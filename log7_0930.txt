开始评估推理过程（版本2.0）...
日志文件: ./evaluation_log/evaluation_results.LoG_7.deepseek-reasoner.json
LLM调试模式: False
找到 100 条记录
检测到input_file: ./generated_data/LoG_7.jsonl
从 ./generated_data/LoG_7.jsonl 加载了 100 个例子的图数据

处理前 50 条记录（总共 100 条）...

================================================================================
处理记录 1/50
================================================================================
记录索引: 0
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_0.json
✅ 使用缓存结果:
   - 句子数: 28
   - 提取的语句数: 62
   - 初始条件数: 38

=== Statement提取完成 ===
总句子数: 28
成功提取: 28
失败提取: 0
总statements数: 62

=== 开始清洗Statement格式 ===
原始statements数: 62
清洗后statements数: 62
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 62
标准化后节点数: 62
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → babbpus and baccpus and bachpus (原始: x is babbpus and baccpus and bachpus)
  2. [actual] x → qurrpus (原始: x is qurrpus)
  3. [actual] qurrpus → babbpus (原始: qurrpus is babbpus)
  4. [actual] qurrpus → baccpus (原始: qurrpus is baccpus)
  5. [actual] qurrpus → bachpus (原始: qurrpus is bachpus)
  6. [actual] x → yujzpus (原始: x is yujzpus)
  7. [actual] yujzpus → xuhppus (原始: yujzpus is xuhppus)
  8. [actual] xuhppus → kujmpus (原始: xuhppus is kujmpus)
  9. [actual] x → kujmpus (原始: x is kujmpus)
  10. [actual] kujmpus → balkpus (原始: kujmpus is balkpus)
  11. [planning] x → balkpus (原始: x is balkpus)
  12. [actual] balkpus → dadmpus (原始: balkpus is dadmpus)
  13. [planning] x → dadmpus (原始: x is dadmpus)
  14. [actual] dadmpus → dahcpus (原始: dadmpus is dahcpus)
  15. [planning] x → dahcpus (原始: x is dahcpus)
  16. [actual] dahcpus → xolqpus (原始: dahcpus is xolqpus)
  17. [planning] x → xolqpus (原始: x is xolqpus)
  18. [actual] xolqpus → jozypus (原始: xolqpus is jozypus)
  19. [actual] x → jozypus (原始: x is jozypus)
  20. [actual] jozypus → yudxpus (原始: jozypus is yudxpus)
  21. [planning] x → yudxpus (原始: x is yudxpus)
  22. [actual] yudxpus → pasvpus (原始: yudxpus is pasvpus)
  23. [planning] x → pasvpus (原始: x is pasvpus)
  24. [actual] pasvpus → kibcpus (原始: pasvpus is kibcpus)
  25. [planning] x → kibcpus (原始: x is kibcpus)
  26. [actual] kibcpus → hofppus (原始: kibcpus is hofppus)
  27. [planning] x → hofppus (原始: x is hofppus)
  28. [actual] hofppus → fojkpus (原始: hofppus is fojkpus)
  29. [planning] x → fojkpus (原始: x is fojkpus)
  30. [actual] fojkpus → rakzpus (原始: fojkpus is rakzpus)
  31. [planning] x → rakzpus (原始: x is rakzpus)
  32. [actual] rakzpus → zirrpus (原始: rakzpus is zirrpus)
  33. [planning] x → zirrpus (原始: x is zirrpus)
  34. [actual] zirrpus → caplpus (原始: zirrpus is caplpus)
  35. [planning] x → caplpus (原始: x is caplpus)
  36. [actual] caplpus → zolwpus (原始: caplpus is zolwpus)
  37. [planning] x → zolwpus (原始: x is zolwpus)
  38. [actual] zolwpus → kohdpus (原始: zolwpus is kohdpus)
  39. [planning] x → kohdpus (原始: x is kohdpus)
  40. [actual] kohdpus → jayhpus (原始: kohdpus is jayhpus)
  41. [planning] x → jayhpus (原始: x is jayhpus)
  42. [actual] jayhpus → ruqtpus (原始: jayhpus is ruqtpus)
  43. [planning] x → ruqtpus (原始: x is ruqtpus)
  44. [actual] ruqtpus → necxpus (原始: ruqtpus is necxpus)
  45. [planning] x → necxpus (原始: x is necxpus)
  46. [actual] necxpus → qurrpus (原始: necxpus is qurrpus)
  47. [planning] x → qurrpus (原始: x is qurrpus)
  48. [actual] x → qurrpus (原始: x is qurrpus)
  49. [actual] qurrpus → rajypus and ruxtpus (原始: qurrpus is rajypus and ruxtpus)
  50. [actual] rajypus → wortpus (原始: rajypus is wortpus)
  51. [actual] wortpus → babbpus (原始: wortpus is babbpus)
  52. [actual] x → babbpus (原始: x is babbpus)
  53. [actual] qurrpus → xowqpus (原始: qurrpus is xowqpus)
  54. [actual] xowqpus → bedzpus (原始: xowqpus is bedzpus)
  55. [actual] bedzpus → qummpus (原始: bedzpus is qummpus)
  56. [actual] qummpus → baccpus (原始: qummpus is baccpus)
  57. [actual] x → baccpus (原始: x is baccpus)
  58. [planning] x → baccpus (原始: x is baccpus)
  59. [actual] qurrpus → buwhpus (原始: qurrpus is buwhpus)
  60. [actual] buwhpus → bachpus (原始: buwhpus is bachpus)
  61. [planning] x → bachpus (原始: x is bachpus)
  62. [actual] x → babbpus and baccpus and bachpus (原始: x is babbpus and baccpus and bachpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 57
[后处理] 加载LoG图，包含 57 个节点
  LoG节点 0: x is babbpus and baccpus and bachpus (规则: MP, 深度: 1)
  LoG节点 1: x is fojkpus (规则: MP, 深度: 2)
  LoG节点 2: fojkpus is babbpus and baccpus and bachpus (规则: CE, 深度: 2)
  LoG节点 3: x is jozypus (规则: CE, 深度: 3)
  LoG节点 4: jozypus is fojkpus (规则: CE, 深度: 3)
  LoG节点 5: fojkpus is babbpus and baccpus and bachpus and pifvpus (规则: MP, 深度: 3)
  LoG节点 6: x is jozypus and dubbpus (规则: MP, 深度: 4)
  LoG节点 7: jozypus is fojkpus and jizmpus (规则: MP, 深度: 4)
  LoG节点 8: fojkpus is zolwpus (规则: CE, 深度: 4)
  LoG节点 9: zolwpus is babbpus and baccpus and bachpus and pifvpus (规则: MP, 深度: 4)
  LoG节点 10: x is kujmpus (规则: CE, 深度: 5)
  LoG节点 11: kujmpus is jozypus and dubbpus (规则: MP, 深度: 5)
  LoG节点 12: jozypus is kibcpus (规则: CE, 深度: 5)
  LoG节点 13: kibcpus is fojkpus and jizmpus (规则: CI, 深度: 5)
  LoG节点 14: fojkpus is zolwpus and zetqpus (规则: MP, 深度: 5)
  LoG节点 15: zolwpus is qurrpus (规则: MP, 深度: 5)
  LoG节点 16: qurrpus is babbpus and baccpus and bachpus and pifvpus (规则: CI, 深度: 5)
  LoG节点 17: x is kujmpus and bizwpus (规则: MP, 深度: 6)
  LoG节点 18: kujmpus is dahcpus (规则: MP, 深度: 6)
  LoG节点 19: dahcpus is jozypus and dubbpus (规则: MP, 深度: 6)
  LoG节点 20: jozypus is kibcpus and mektpus (规则: MP, 深度: 6)
  LoG节点 21: kibcpus is fojkpus (规则: MP, 深度: 6)
  LoG节点 22: kibcpus is jizmpus (规则: MP, 深度: 6)
  LoG节点 23: fojkpus is zirrpus (规则: CE, 深度: 6)
  LoG节点 24: zirrpus is zolwpus and zetqpus (规则: CI, 深度: 6)
  LoG节点 25: zolwpus is jayhpus (规则: MP, 深度: 6)
  LoG节点 26: jayhpus is qurrpus (规则: MP, 深度: 6)
  LoG节点 27: qurrpus is babbpus (规则: MP, 深度: 6)
  LoG节点 28: qurrpus is baccpus (规则: MP, 深度: 6)
  LoG节点 29: qurrpus is bachpus (规则: CE, 深度: 6)
  LoG节点 30: qurrpus is pifvpus (规则: MP, 深度: 6)
  LoG节点 31: x is xuhppus (规则: MP, 深度: 7)
  LoG节点 32: xuhppus is kujmpus and bizwpus (规则: CE, 深度: 7)
  LoG节点 33: kujmpus is dadmpus (规则: MP, 深度: 7)
  LoG节点 34: dadmpus is dahcpus (规则: CE, 深度: 7)
  LoG节点 35: dahcpus is xolqpus (规则: CE, 深度: 7)
  LoG节点 36: xolqpus is jozypus and dubbpus (规则: CE, 深度: 7)
  LoG节点 37: jozypus is pasvpus (规则: MP, 深度: 7)
  LoG节点 38: pasvpus is kibcpus and mektpus (规则: CE, 深度: 7)
  LoG节点 39: kibcpus is hofppus (规则: CE, 深度: 7)
  LoG节点 40: hofppus is fojkpus (规则: CE, 深度: 7)
  LoG节点 41: kibcpus is gagdpus (规则: MP, 深度: 7)
  LoG节点 42: gagdpus is jizmpus (规则: CE, 深度: 7)
  LoG节点 43: fojkpus is zirrpus and mahkpus (规则: MP, 深度: 7)
  LoG节点 44: zirrpus is zolwpus (规则: MP, 深度: 7)
  LoG节点 45: zirrpus is zetqpus (规则: CE, 深度: 7)
  LoG节点 46: zolwpus is kohdpus (规则: CE, 深度: 7)
  LoG节点 47: kohdpus is jayhpus (规则: CE, 深度: 7)
  LoG节点 48: jayhpus is ruqtpus (规则: CE, 深度: 7)
  LoG节点 49: ruqtpus is qurrpus (规则: MP, 深度: 7)
  LoG节点 50: qurrpus is rajypus (规则: CE, 深度: 7)
  LoG节点 51: rajypus is babbpus (规则: MP, 深度: 7)
  LoG节点 52: qurrpus is bedzpus (规则: MP, 深度: 7)
  LoG节点 53: bedzpus is baccpus (规则: MP, 深度: 7)
  LoG节点 54: qurrpus is bachpus and waddpus (规则: MP, 深度: 7)
  LoG节点 55: qurrpus is bowdpus (规则: CE, 深度: 7)
  LoG节点 56: bowdpus is pifvpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 62
   - 初始条件数: 38
   - LoG图节点数: 57

📋 初始条件列表:
    1. yudxpus is pasvpus
    2. ruqtpus is necxpus
    3. hujjpus is gagdpus
    4. qurrpus is xowqpus
    5. necxpus is qurrpus
    6. qummpus is baccpus
    7. zirrpus is zetqpus and nojbpus
    8. kibcpus is hujjpus
    9. jozypus is yudxpus
   10. nogkpus is pifvpus
   11. dahcpus is xolqpus and himnpus
   12. xuhppus is kujmpus and bizwpus and vatppus
   13. yujzpus is xuhppus
   14. dadmpus is dahcpus and sizcpus
   15. hofppus is fojkpus and liqfpus
   16. kohdpus is jayhpus and depkpus
   17. qurrpus is bowdpus and qizkpus
   18. buwhpus is bachpus and waddpus
   19. gagdpus is jizmpus and wexkpus
   20. rajypus is wortpus
   21. x is yujzpus
   22. jayhpus is ruqtpus and lojtpus
   23. qurrpus is rajypus and ruxtpus
   24. balkpus is dadmpus
   25. zolwpus is kohdpus and boyspus
   26. kujmpus is balkpus
   27. xolqpus is jozypus and dubbpus and kezqpus
   28. xowqpus is bedzpus
   29. qurrpus is buwhpus
   30. pasvpus is kibcpus and mektpus and sayqpus
   31. zirrpus is caplpus
   32. wortpus is babbpus
   33. fojkpus is rakzpus
   34. bedzpus is qummpus
   35. bowdpus is nogkpus
   36. rakzpus is zirrpus and mahkpus
   37. kibcpus is hofppus and juvjpus
   38. caplpus is zolwpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 38 个前提节点

🔍 开始处理actual节点...

   节点 1: x is babbpus and baccpus and bachpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus and baccpus and bachpus
[子树点亮]     └─ 点亮依赖节点: x is fojkpus (深度2)
[子树点亮]     └─ 点亮依赖节点: fojkpus is babbpus and baccpus and bachpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is jozypus (深度3)
[子树点亮]     └─ 点亮依赖节点: jozypus is fojkpus (深度3)
[子树点亮]     └─ 点亮依赖节点: fojkpus is babbpus and baccpus and bachpus and pifvpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is jozypus and dubbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: jozypus is fojkpus and jizmpus (深度4)
[子树点亮]     └─ 点亮依赖节点: fojkpus is zolwpus (深度4)
[子树点亮]     └─ 点亮依赖节点: zolwpus is babbpus and baccpus and bachpus and pifvpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is kujmpus (深度5)
[子树点亮]     └─ 点亮依赖节点: kujmpus is jozypus and dubbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: jozypus is kibcpus (深度5)
[子树点亮]     └─ 点亮依赖节点: kibcpus is fojkpus and jizmpus (深度5)
[子树点亮]     └─ 点亮依赖节点: fojkpus is zolwpus and zetqpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zolwpus is qurrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: qurrpus is babbpus and baccpus and bachpus and pifvpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is kujmpus and bizwpus (深度6)
[子树点亮]     └─ 点亮依赖节点: kujmpus is dahcpus (深度6)
[子树点亮]     └─ 点亮依赖节点: dahcpus is jozypus and dubbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jozypus is kibcpus and mektpus (深度6)
[子树点亮]     └─ 点亮依赖节点: kibcpus is fojkpus (深度6)
[子树点亮]     └─ 点亮依赖节点: kibcpus is jizmpus (深度6)
[子树点亮]     └─ 点亮依赖节点: fojkpus is zirrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: zirrpus is zolwpus and zetqpus (深度6)
[子树点亮]     └─ 点亮依赖节点: zolwpus is jayhpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jayhpus is qurrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: qurrpus is babbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: qurrpus is baccpus (深度6)
[子树点亮]     └─ 点亮依赖节点: qurrpus is bachpus (深度6)
[子树点亮]     └─ 点亮依赖节点: qurrpus is pifvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is xuhppus (深度7)
[子树点亮]     └─ 点亮依赖节点: xuhppus is kujmpus and bizwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kujmpus is dadmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: dadmpus is dahcpus (深度7)
[子树点亮]     └─ 点亮依赖节点: dahcpus is xolqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xolqpus is jozypus and dubbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jozypus is pasvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: pasvpus is kibcpus and mektpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kibcpus is hofppus (深度7)
[子树点亮]     └─ 点亮依赖节点: hofppus is fojkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kibcpus is gagdpus (深度7)
[子树点亮]     └─ 点亮依赖节点: gagdpus is jizmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: fojkpus is zirrpus and mahkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: zirrpus is zolwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: zirrpus is zetqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: zolwpus is kohdpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kohdpus is jayhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jayhpus is ruqtpus (深度7)
[子树点亮]     └─ 点亮依赖节点: ruqtpus is qurrpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qurrpus is rajypus (深度7)
[子树点亮]     └─ 点亮依赖节点: rajypus is babbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qurrpus is bedzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: bedzpus is baccpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qurrpus is bachpus and waddpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qurrpus is bowdpus (深度7)
[子树点亮]     └─ 点亮依赖节点: bowdpus is pifvpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 56 个节点
      ✅ 验证成功 + LoG匹配

   节点 2: x is qurrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is yujzpus → yujzpus is qurrpus
[后处理] 基于推理轨迹点亮节点，使用了 22 个前提条件:
  - 前提: x is yujzpus
  - 前提: yujzpus is xuhppus
  - 前提: xuhppus is kujmpus and bizwpus and vatppus
  - 前提: kujmpus is balkpus
  - 前提: balkpus is dadmpus
  - 前提: dadmpus is dahcpus and sizcpus
  - 前提: dahcpus is xolqpus and himnpus
  - 前提: xolqpus is jozypus and dubbpus and kezqpus
  - 前提: jozypus is yudxpus
  - 前提: yudxpus is pasvpus
  - 前提: pasvpus is kibcpus and mektpus and sayqpus
  - 前提: kibcpus is hofppus and juvjpus
  - 前提: hofppus is fojkpus and liqfpus
  - 前提: fojkpus is rakzpus
  - 前提: rakzpus is zirrpus and mahkpus
  - 前提: zirrpus is caplpus
  - 前提: caplpus is zolwpus
  - 前提: zolwpus is kohdpus and boyspus
  - 前提: kohdpus is jayhpus and depkpus
  - 前提: jayhpus is ruqtpus and lojtpus
  - 前提: ruqtpus is necxpus
  - 前提: necxpus is qurrpus

   节点 3: qurrpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 4: qurrpus is baccpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 5: qurrpus is bachpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 6: x is yujzpus
      ↻ 重复节点，计数: 2

   节点 7: yujzpus is xuhppus
      ↻ 重复节点，计数: 2

   节点 8: xuhppus is kujmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: xuhppus is kujmpus and bizwpus and vatppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: xuhppus is kujmpus and bizwpus and vatppus

   节点 9: x is kujmpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 10: kujmpus is balkpus
      ↻ 重复节点，计数: 2

   节点 11: balkpus is dadmpus
      ↻ 重复节点，计数: 2

   节点 12: dadmpus is dahcpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 13: dahcpus is xolqpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 14: xolqpus is jozypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: xolqpus is jozypus and dubbpus and kezqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: xolqpus is jozypus and dubbpus and kezqpus

   节点 15: x is jozypus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 16: jozypus is yudxpus
      ↻ 重复节点，计数: 2

   节点 17: yudxpus is pasvpus
      ↻ 重复节点，计数: 2

   节点 18: pasvpus is kibcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: pasvpus is kibcpus and mektpus and sayqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: pasvpus is kibcpus and mektpus and sayqpus

   节点 19: kibcpus is hofppus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 20: hofppus is fojkpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 21: fojkpus is rakzpus
      ↻ 重复节点，计数: 2

   节点 22: rakzpus is zirrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: rakzpus is zirrpus and mahkpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: rakzpus is zirrpus and mahkpus

   节点 23: zirrpus is caplpus
      ↻ 重复节点，计数: 2

   节点 24: caplpus is zolwpus
      ↻ 重复节点，计数: 2

   节点 25: zolwpus is kohdpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 26: kohdpus is jayhpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 27: jayhpus is ruqtpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 28: ruqtpus is necxpus
      ↻ 重复节点，计数: 2

   节点 29: necxpus is qurrpus
      ↻ 重复节点，计数: 2

   节点 30: x is qurrpus
      ↻ 重复节点，计数: 2

   节点 31: qurrpus is rajypus and ruxtpus
      ↻ 重复节点，计数: 2

   节点 32: rajypus is wortpus
      ↻ 重复节点，计数: 2

   节点 33: wortpus is babbpus
      ↻ 重复节点，计数: 2

   节点 34: x is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is babbpus and baccpus and bachpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is babbpus and baccpus and bachpus

   节点 35: qurrpus is xowqpus
      ↻ 重复节点，计数: 2

   节点 36: xowqpus is bedzpus
      ↻ 重复节点，计数: 2

   节点 37: bedzpus is qummpus
      ↻ 重复节点，计数: 2

   节点 38: qummpus is baccpus
      ↻ 重复节点，计数: 2

   节点 39: x is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is babbpus and baccpus and bachpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is babbpus and baccpus and bachpus

   节点 40: qurrpus is buwhpus
      ↻ 重复节点，计数: 2

   节点 41: buwhpus is bachpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: buwhpus is bachpus and waddpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: buwhpus is bachpus and waddpus

   节点 42: x is babbpus and baccpus and bachpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 42
   - 新增节点: 21
   - 更新已存在节点: 21
   - 点亮的LoG节点: 57

🎯 推理质量统计:
   - 完美推理: 21 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 57节点, 38前提, 复杂度1-38

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 59
   - 前提节点: 38
   - 推理节点: 21
   - 幻觉节点: 0
   - 点亮LoG节点: 57

✅ 推理节点详情:
   🟢 x is babbpus and baccpus and bachpus (出现2次, 质量:perfect)
   🟢 x is qurrpus (出现2次, 质量:perfect)
   🟢 qurrpus is babbpus (出现1次, 质量:perfect)
   🟢 qurrpus is baccpus (出现1次, 质量:perfect)
   🟢 qurrpus is bachpus (出现1次, 质量:perfect)
   🟢 xuhppus is kujmpus (出现1次, 质量:perfect)
   🟢 x is kujmpus (出现1次, 质量:perfect)
   🟢 dadmpus is dahcpus (出现1次, 质量:perfect)
   🟢 dahcpus is xolqpus (出现1次, 质量:perfect)
   🟢 xolqpus is jozypus (出现1次, 质量:perfect)
   🟢 x is jozypus (出现1次, 质量:perfect)
   🟢 pasvpus is kibcpus (出现1次, 质量:perfect)
   🟢 kibcpus is hofppus (出现1次, 质量:perfect)
   🟢 hofppus is fojkpus (出现1次, 质量:perfect)
   🟢 rakzpus is zirrpus (出现1次, 质量:perfect)
   🟢 zolwpus is kohdpus (出现1次, 质量:perfect)
   🟢 kohdpus is jayhpus (出现1次, 质量:perfect)
   🟢 jayhpus is ruqtpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现1次, 质量:perfect)
   🟢 x is baccpus (出现1次, 质量:perfect)
   🟢 buwhpus is bachpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - bedzpus is baccpus
   - x is babbpus and baccpus and bachpus
   - zirrpus is zetqpus
   - jozypus is kibcpus and mektpus
   - xolqpus is jozypus and dubbpus
   - zolwpus is kohdpus
   - qurrpus is pifvpus
   - qurrpus is bedzpus
   - x is fojkpus
   - x is kujmpus and bizwpus
   - ruqtpus is qurrpus
   - kujmpus is jozypus and dubbpus
   - fojkpus is babbpus and baccpus and bachpus
   - x is jozypus and dubbpus
   - kibcpus is hofppus
   - zirrpus is zolwpus and zetqpus
   - kibcpus is gagdpus
   - kohdpus is jayhpus
   - qurrpus is rajypus
   - qurrpus is bowdpus
   - qurrpus is babbpus and baccpus and bachpus and pifvpus
   - x is jozypus
   - zolwpus is jayhpus
   - zolwpus is qurrpus
   - fojkpus is zirrpus
   - dadmpus is dahcpus
   - qurrpus is bachpus and waddpus
   - gagdpus is jizmpus
   - jozypus is fojkpus and jizmpus
   - x is kujmpus
   - dahcpus is xolqpus
   - kibcpus is fojkpus and jizmpus
   - qurrpus is baccpus
   - jozypus is pasvpus
   - pasvpus is kibcpus and mektpus
   - jayhpus is qurrpus
   - kibcpus is jizmpus
   - rajypus is babbpus
   - x is xuhppus
   - kujmpus is dadmpus
   - dahcpus is jozypus and dubbpus
   - bowdpus is pifvpus
   - fojkpus is zirrpus and mahkpus
   - qurrpus is bachpus
   - fojkpus is zolwpus
   - zirrpus is zolwpus
   - kujmpus is dahcpus
   - kibcpus is fojkpus
   - qurrpus is babbpus
   - xuhppus is kujmpus and bizwpus
   - fojkpus is zolwpus and zetqpus
   - fojkpus is babbpus and baccpus and bachpus and pifvpus
   - jozypus is kibcpus
   - zolwpus is babbpus and baccpus and bachpus and pifvpus
   - hofppus is fojkpus
   - jayhpus is ruqtpus
   - jozypus is fojkpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus and baccpus and bachpus (第7层)
   节点Coverage: 57/57 = 100.00%
   前提条件Coverage: 19/38 = 50.00%
   各推理层点亮比例:
     第1层: 26/26 = 100.00%
     第2层: 14/14 = 100.00%
     第3层: 7/7 = 100.00%
     第4层: 4/4 = 100.00%
     第5层: 3/3 = 100.00%
     第6层: 2/2 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/21 = 0.00%
   可推导节点: 21/21
   Strict Error Rate: 0/21 = 0.00%
   严格有效节点: 21/21

   详细分析:
     完美推理: 21 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 2/50
================================================================================
记录索引: 1
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_1.json
✅ 使用缓存结果:
   - 句子数: 6
   - 提取的语句数: 24
   - 初始条件数: 40

=== Statement提取完成 ===
总句子数: 6
成功提取: 6
失败提取: 0
总statements数: 24

=== 开始清洗Statement格式 ===
原始statements数: 24
清洗后statements数: 24
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 24
标准化后节点数: 24
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → comrpus (原始: x is comrpus)
  2. [actual] comrpus → kosypus (原始: comrpus is kosypus)
  3. [actual] kosypus → nusdpus (原始: kosypus is nusdpus)
  4. [actual] nusdpus → soczpus (原始: nusdpus is soczpus)
  5. [actual] soczpus → jekrpus (原始: soczpus is jekrpus)
  6. [actual] jekrpus → joslpus (原始: jekrpus is joslpus)
  7. [actual] jekrpus → mewbpus (原始: jekrpus is mewbpus)
  8. [actual] jekrpus → jakfpus (原始: jekrpus is jakfpus)
  9. [actual] jekrpus → luxhpus (原始: jekrpus is luxhpus)
  10. [actual] jekrpus → miqrpus (原始: jekrpus is miqrpus)
  11. [actual] jekrpus → dubxpus (原始: jekrpus is dubxpus)
  12. [actual] jekrpus → vobnpus (原始: jekrpus is vobnpus)
  13. [actual] jekrpus → kilqpus (原始: jekrpus is kilqpus)
  14. [actual] jekrpus → yubnpus (原始: jekrpus is yubnpus)
  15. [actual] jekrpus → rohppus (原始: jekrpus is rohppus)
  16. [actual] jekrpus → lignpus (原始: jekrpus is lignpus)
  17. [actual] jekrpus → kurvpus (原始: jekrpus is kurvpus)
  18. [actual] jekrpus → pislpus (原始: jekrpus is pislpus)
  19. [actual] jekrpus → gommpus (原始: jekrpus is gommpus)
  20. [actual] jekrpus → kapxpus (原始: jekrpus is kapxpus)
  21. [actual] jekrpus → penppus (原始: jekrpus is penppus)
  22. [actual] jekrpus → babbpus (原始: jekrpus is babbpus)
  23. [actual] comrpus → babbpus (原始: comrpus is babbpus)
  24. [actual] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 58
[后处理] 加载LoG图，包含 58 个节点
  LoG节点 0: x is babbpus (规则: MP, 深度: 1)
  LoG节点 1: x is wegppus (规则: CE, 深度: 2)
  LoG节点 2: wegppus is babbpus (规则: MP, 深度: 2)
  LoG节点 3: x is wegppus and piwdpus (规则: MP, 深度: 3)
  LoG节点 4: wegppus is yubnpus (规则: MP, 深度: 3)
  LoG节点 5: yubnpus is babbpus (规则: MP, 深度: 3)
  LoG节点 6: x is qotypus (规则: MP, 深度: 4)
  LoG节点 7: qotypus is wegppus and piwdpus (规则: CE, 深度: 4)
  LoG节点 8: wegppus is jekrpus (规则: CE, 深度: 4)
  LoG节点 9: jekrpus is yubnpus (规则: MP, 深度: 4)
  LoG节点 10: yubnpus is pislpus (规则: CE, 深度: 4)
  LoG节点 11: pislpus is babbpus (规则: CE, 深度: 4)
  LoG节点 12: x is vaghpus (规则: MP, 深度: 5)
  LoG节点 13: vaghpus is qotypus (规则: MP, 深度: 5)
  LoG节点 14: qotypus is wegppus and piwdpus and miwypus (规则: MP, 深度: 5)
  LoG节点 15: wegppus is jekrpus and rimspus (规则: MP, 深度: 5)
  LoG节点 16: jekrpus is jakfpus (规则: CE, 深度: 5)
  LoG节点 17: jakfpus is yubnpus (规则: MP, 深度: 5)
  LoG节点 18: yubnpus is pislpus and vexrpus (规则: MP, 深度: 5)
  LoG节点 19: pislpus is babbpus and tugdpus (规则: MP, 深度: 5)
  LoG节点 20: x is nusdpus (规则: MP, 深度: 6)
  LoG节点 21: nusdpus is vaghpus (规则: MP, 深度: 6)
  LoG节点 22: vaghpus is dakppus (规则: CE, 深度: 6)
  LoG节点 23: dakppus is qotypus (规则: MP, 深度: 6)
  LoG节点 24: qotypus is biyfpus (规则: CE, 深度: 6)
  LoG节点 25: biyfpus is wegppus and piwdpus and miwypus (规则: CE, 深度: 6)
  LoG节点 26: wegppus is soczpus (规则: MP, 深度: 6)
  LoG节点 27: soczpus is jekrpus and rimspus (规则: CI, 深度: 6)
  LoG节点 28: jekrpus is jakfpus and yevcpus (规则: MP, 深度: 6)
  LoG节点 29: jakfpus is miqrpus (规则: CE, 深度: 6)
  LoG节点 30: miqrpus is yubnpus (规则: MP, 深度: 6)
  LoG节点 31: yubnpus is lignpus (规则: CE, 深度: 6)
  LoG节点 32: lignpus is pislpus and vexrpus (规则: CI, 深度: 6)
  LoG节点 33: pislpus is kapxpus (规则: CE, 深度: 6)
  LoG节点 34: kapxpus is babbpus and tugdpus (规则: CE, 深度: 6)
  LoG节点 35: x is kosypus (规则: MP, 深度: 7)
  LoG节点 36: kosypus is nusdpus (规则: CE, 深度: 7)
  LoG节点 37: nusdpus is gagdpus (规则: MP, 深度: 7)
  LoG节点 38: gagdpus is vaghpus (规则: MP, 深度: 7)
  LoG节点 39: vaghpus is dakppus and fewdpus (规则: MP, 深度: 7)
  LoG节点 40: dakppus is rizlpus (规则: CE, 深度: 7)
  LoG节点 41: rizlpus is qotypus (规则: CE, 深度: 7)
  LoG节点 42: qotypus is biyfpus and racspus (规则: MP, 深度: 7)
  LoG节点 43: biyfpus is wegppus and piwdpus and miwypus and tagwpus (规则: MP, 深度: 7)
  LoG节点 44: wegppus is yulppus (规则: MP, 深度: 7)
  LoG节点 45: yulppus is soczpus (规则: CE, 深度: 7)
  LoG节点 46: soczpus is jekrpus (规则: CE, 深度: 7)
  LoG节点 47: soczpus is rimspus (规则: CE, 深度: 7)
  LoG节点 48: jekrpus is mewbpus (规则: MP, 深度: 7)
  LoG节点 49: mewbpus is jakfpus and yevcpus (规则: CI, 深度: 7)
  LoG节点 50: jakfpus is miqrpus and xacdpus (规则: MP, 深度: 7)
  LoG节点 51: miqrpus is vobnpus (规则: MP, 深度: 7)
  LoG节点 52: vobnpus is yubnpus (规则: MP, 深度: 7)
  LoG节点 53: yubnpus is lignpus and cicwpus (规则: MP, 深度: 7)
  LoG节点 54: lignpus is pislpus (规则: MP, 深度: 7)
  LoG节点 55: lignpus is vexrpus (规则: MP, 深度: 7)
  LoG节点 56: pislpus is kapxpus and fedzpus (规则: MP, 深度: 7)
  LoG节点 57: kapxpus is babbpus and tugdpus and xiqrpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 24
   - 初始条件数: 40
   - LoG图节点数: 58

📋 初始条件列表:
    1. wegmpus is biyfpus and racspus
    2. mewbpus is yevcpus
    3. soczpus is rimspus and quzbpus
    4. joslpus is mewbpus
    5. comrpus is kosypus
    6. vaghpus is tiyypus
    7. dakppus is rizlpus and zidxpus
    8. mewbpus is jakfpus
    9. luxhpus is miqrpus and xacdpus
   10. jekrpus is joslpus
   11. jakfpus is luxhpus
   12. kurvpus is pislpus
   13. wegppus is lobmpus
   14. dubxpus is vobnpus
   15. qotypus is wegmpus
   16. penppus is babbpus and tugdpus and xiqrpus
   17. miqrpus is dubxpus
   18. secmpus is gagdpus
   19. x is comrpus
   20. nusdpus is secmpus
   21. lugdpus is wegppus and piwdpus and miwypus and tagwpus
   22. biyfpus is lugdpus
   23. pislpus is gommpus
   24. yubnpus is rohppus
   25. lignpus is kurvpus
   26. rizlpus is qotypus and benzpus
   27. yulppus is soczpus and meyvpus
   28. rohppus is lignpus and cicwpus
   29. kilqpus is yubnpus
   30. gommpus is kapxpus and fedzpus
   31. kapxpus is penppus
   32. gagdpus is zoyjpus
   33. lignpus is tenlpus
   34. lobmpus is yulppus
   35. zoyjpus is vaghpus
   36. tiyypus is dakppus and fewdpus
   37. vobnpus is kilqpus
   38. soczpus is jekrpus and dodxpus
   39. tenlpus is vexrpus
   40. kosypus is nusdpus and xagspus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 40 个前提节点

🔍 开始处理actual节点...

   节点 1: x is comrpus
      ↻ 重复节点，计数: 2

   节点 2: comrpus is kosypus
      ↻ 重复节点，计数: 2

   节点 3: kosypus is nusdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: kosypus is nusdpus
      ✅ 验证成功 + LoG匹配

   节点 4: nusdpus is soczpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: nusdpus is secmpus → secmpus is soczpus
[后处理] 基于推理轨迹点亮节点，使用了 15 个前提条件:
  - 前提: nusdpus is secmpus
  - 前提: secmpus is gagdpus
  - 前提: gagdpus is zoyjpus
  - 前提: zoyjpus is vaghpus
  - 前提: vaghpus is tiyypus
  - 前提: tiyypus is dakppus and fewdpus
  - 前提: dakppus is rizlpus and zidxpus
  - 前提: rizlpus is qotypus and benzpus
  - 前提: qotypus is wegmpus
  - 前提: wegmpus is biyfpus and racspus
  - 前提: biyfpus is lugdpus
  - 前提: lugdpus is wegppus and piwdpus and miwypus and tagwpus
  - 前提: wegppus is lobmpus
  - 前提: lobmpus is yulppus
  - 前提: yulppus is soczpus and meyvpus
  ✓ 点亮LoG节点: qotypus is wegppus and piwdpus
[子树点亮]     └─ 点亮依赖节点: qotypus is wegppus and piwdpus and miwypus (深度5)
[子树点亮]     └─ 点亮依赖节点: qotypus is biyfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: biyfpus is wegppus and piwdpus and miwypus (深度6)
[子树点亮]     └─ 点亮依赖节点: qotypus is biyfpus and racspus (深度7)
[子树点亮]     └─ 点亮依赖节点: biyfpus is wegppus and piwdpus and miwypus and tagwpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
  ✓ 点亮LoG节点: vaghpus is qotypus
[子树点亮]     └─ 点亮依赖节点: vaghpus is dakppus (深度6)
[子树点亮]     └─ 点亮依赖节点: dakppus is qotypus (深度6)
[子树点亮]     └─ 点亮依赖节点: vaghpus is dakppus and fewdpus (深度7)
[子树点亮]     └─ 点亮依赖节点: dakppus is rizlpus (深度7)
[子树点亮]     └─ 点亮依赖节点: rizlpus is qotypus (深度7)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
  ✓ 点亮LoG节点: nusdpus is vaghpus
[子树点亮]     └─ 点亮依赖节点: nusdpus is gagdpus (深度7)
[子树点亮]     └─ 点亮依赖节点: gagdpus is vaghpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
  ✓ 点亮LoG节点: wegppus is soczpus
[子树点亮]     └─ 点亮依赖节点: wegppus is yulppus (深度7)
[子树点亮]     └─ 点亮依赖节点: yulppus is soczpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 4 个LoG节点

   节点 5: soczpus is jekrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: soczpus is jekrpus
      ✅ 验证成功 + LoG匹配

   节点 6: jekrpus is joslpus
      ↻ 重复节点，计数: 2

   节点 7: jekrpus is mewbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: jekrpus is mewbpus
      ✅ 验证成功 + LoG匹配

   节点 8: jekrpus is jakfpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: jekrpus is jakfpus
[子树点亮]     └─ 点亮依赖节点: jekrpus is jakfpus and yevcpus (深度6)
[子树点亮]     └─ 点亮依赖节点: mewbpus is jakfpus and yevcpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 9: jekrpus is luxhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: jekrpus is joslpus → joslpus is luxhpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: jekrpus is joslpus
  - 前提: joslpus is mewbpus
  - 前提: mewbpus is jakfpus
  - 前提: jakfpus is luxhpus

   节点 10: jekrpus is miqrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: jekrpus is joslpus → joslpus is miqrpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: jekrpus is joslpus
  - 前提: joslpus is mewbpus
  - 前提: mewbpus is jakfpus
  - 前提: jakfpus is luxhpus
  - 前提: luxhpus is miqrpus and xacdpus
  ✓ 点亮LoG节点: jakfpus is miqrpus
[子树点亮]     └─ 点亮依赖节点: jakfpus is miqrpus and xacdpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 11: jekrpus is dubxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: jekrpus is joslpus → joslpus is dubxpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: jekrpus is joslpus
  - 前提: joslpus is mewbpus
  - 前提: mewbpus is jakfpus
  - 前提: jakfpus is luxhpus
  - 前提: luxhpus is miqrpus and xacdpus
  - 前提: miqrpus is dubxpus

   节点 12: jekrpus is vobnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: jekrpus is joslpus → joslpus is vobnpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: jekrpus is joslpus
  - 前提: joslpus is mewbpus
  - 前提: mewbpus is jakfpus
  - 前提: jakfpus is luxhpus
  - 前提: luxhpus is miqrpus and xacdpus
  - 前提: miqrpus is dubxpus
  - 前提: dubxpus is vobnpus
  ✓ 点亮LoG节点: miqrpus is vobnpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 13: jekrpus is kilqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: jekrpus is joslpus → joslpus is kilqpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: jekrpus is joslpus
  - 前提: joslpus is mewbpus
  - 前提: mewbpus is jakfpus
  - 前提: jakfpus is luxhpus
  - 前提: luxhpus is miqrpus and xacdpus
  - 前提: miqrpus is dubxpus
  - 前提: dubxpus is vobnpus
  - 前提: vobnpus is kilqpus

   节点 14: jekrpus is yubnpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: jekrpus is yubnpus
[子树点亮]     └─ 点亮依赖节点: jakfpus is yubnpus (深度5)
[子树点亮]     └─ 点亮依赖节点: miqrpus is yubnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: vobnpus is yubnpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 15: jekrpus is rohppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: jekrpus is joslpus → joslpus is rohppus
[后处理] 基于推理轨迹点亮节点，使用了 10 个前提条件:
  - 前提: jekrpus is joslpus
  - 前提: joslpus is mewbpus
  - 前提: mewbpus is jakfpus
  - 前提: jakfpus is luxhpus
  - 前提: luxhpus is miqrpus and xacdpus
  - 前提: miqrpus is dubxpus
  - 前提: dubxpus is vobnpus
  - 前提: vobnpus is kilqpus
  - 前提: kilqpus is yubnpus
  - 前提: yubnpus is rohppus

   节点 16: jekrpus is lignpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: jekrpus is joslpus → joslpus is lignpus
[后处理] 基于推理轨迹点亮节点，使用了 11 个前提条件:
  - 前提: jekrpus is joslpus
  - 前提: joslpus is mewbpus
  - 前提: mewbpus is jakfpus
  - 前提: jakfpus is luxhpus
  - 前提: luxhpus is miqrpus and xacdpus
  - 前提: miqrpus is dubxpus
  - 前提: dubxpus is vobnpus
  - 前提: vobnpus is kilqpus
  - 前提: kilqpus is yubnpus
  - 前提: yubnpus is rohppus
  - 前提: rohppus is lignpus and cicwpus
  ✓ 点亮LoG节点: yubnpus is lignpus
[子树点亮]     └─ 点亮依赖节点: yubnpus is lignpus and cicwpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 17: jekrpus is kurvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: jekrpus is joslpus → joslpus is kurvpus
[后处理] 基于推理轨迹点亮节点，使用了 12 个前提条件:
  - 前提: jekrpus is joslpus
  - 前提: joslpus is mewbpus
  - 前提: mewbpus is jakfpus
  - 前提: jakfpus is luxhpus
  - 前提: luxhpus is miqrpus and xacdpus
  - 前提: miqrpus is dubxpus
  - 前提: dubxpus is vobnpus
  - 前提: vobnpus is kilqpus
  - 前提: kilqpus is yubnpus
  - 前提: yubnpus is rohppus
  - 前提: rohppus is lignpus and cicwpus
  - 前提: lignpus is kurvpus

   节点 18: jekrpus is pislpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: jekrpus is joslpus → joslpus is pislpus
[后处理] 基于推理轨迹点亮节点，使用了 13 个前提条件:
  - 前提: jekrpus is joslpus
  - 前提: joslpus is mewbpus
  - 前提: mewbpus is jakfpus
  - 前提: jakfpus is luxhpus
  - 前提: luxhpus is miqrpus and xacdpus
  - 前提: miqrpus is dubxpus
  - 前提: dubxpus is vobnpus
  - 前提: vobnpus is kilqpus
  - 前提: kilqpus is yubnpus
  - 前提: yubnpus is rohppus
  - 前提: rohppus is lignpus and cicwpus
  - 前提: lignpus is kurvpus
  - 前提: kurvpus is pislpus
  ✓ 点亮LoG节点: yubnpus is pislpus
[子树点亮]     └─ 点亮依赖节点: yubnpus is pislpus and vexrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: lignpus is pislpus and vexrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: lignpus is pislpus (深度7)
[子树点亮]     └─ 点亮依赖节点: lignpus is vexrpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 19: jekrpus is gommpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: jekrpus is joslpus → joslpus is gommpus
[后处理] 基于推理轨迹点亮节点，使用了 14 个前提条件:
  - 前提: jekrpus is joslpus
  - 前提: joslpus is mewbpus
  - 前提: mewbpus is jakfpus
  - 前提: jakfpus is luxhpus
  - 前提: luxhpus is miqrpus and xacdpus
  - 前提: miqrpus is dubxpus
  - 前提: dubxpus is vobnpus
  - 前提: vobnpus is kilqpus
  - 前提: kilqpus is yubnpus
  - 前提: yubnpus is rohppus
  - 前提: rohppus is lignpus and cicwpus
  - 前提: lignpus is kurvpus
  - 前提: kurvpus is pislpus
  - 前提: pislpus is gommpus

   节点 20: jekrpus is kapxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: jekrpus is joslpus → joslpus is kapxpus
[后处理] 基于推理轨迹点亮节点，使用了 15 个前提条件:
  - 前提: jekrpus is joslpus
  - 前提: joslpus is mewbpus
  - 前提: mewbpus is jakfpus
  - 前提: jakfpus is luxhpus
  - 前提: luxhpus is miqrpus and xacdpus
  - 前提: miqrpus is dubxpus
  - 前提: dubxpus is vobnpus
  - 前提: vobnpus is kilqpus
  - 前提: kilqpus is yubnpus
  - 前提: yubnpus is rohppus
  - 前提: rohppus is lignpus and cicwpus
  - 前提: lignpus is kurvpus
  - 前提: kurvpus is pislpus
  - 前提: pislpus is gommpus
  - 前提: gommpus is kapxpus and fedzpus
  ✓ 点亮LoG节点: pislpus is kapxpus
[子树点亮]     └─ 点亮依赖节点: pislpus is kapxpus and fedzpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 21: jekrpus is penppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: jekrpus is joslpus → joslpus is penppus
[后处理] 基于推理轨迹点亮节点，使用了 16 个前提条件:
  - 前提: jekrpus is joslpus
  - 前提: joslpus is mewbpus
  - 前提: mewbpus is jakfpus
  - 前提: jakfpus is luxhpus
  - 前提: luxhpus is miqrpus and xacdpus
  - 前提: miqrpus is dubxpus
  - 前提: dubxpus is vobnpus
  - 前提: vobnpus is kilqpus
  - 前提: kilqpus is yubnpus
  - 前提: yubnpus is rohppus
  - 前提: rohppus is lignpus and cicwpus
  - 前提: lignpus is kurvpus
  - 前提: kurvpus is pislpus
  - 前提: pislpus is gommpus
  - 前提: gommpus is kapxpus and fedzpus
  - 前提: kapxpus is penppus

   节点 22: jekrpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: jekrpus is joslpus → joslpus is babbpus
[后处理] 基于推理轨迹点亮节点，使用了 17 个前提条件:
  - 前提: jekrpus is joslpus
  - 前提: joslpus is mewbpus
  - 前提: mewbpus is jakfpus
  - 前提: jakfpus is luxhpus
  - 前提: luxhpus is miqrpus and xacdpus
  - 前提: miqrpus is dubxpus
  - 前提: dubxpus is vobnpus
  - 前提: vobnpus is kilqpus
  - 前提: kilqpus is yubnpus
  - 前提: yubnpus is rohppus
  - 前提: rohppus is lignpus and cicwpus
  - 前提: lignpus is kurvpus
  - 前提: kurvpus is pislpus
  - 前提: pislpus is gommpus
  - 前提: gommpus is kapxpus and fedzpus
  - 前提: kapxpus is penppus
  - 前提: penppus is babbpus and tugdpus and xiqrpus
  ✓ 点亮LoG节点: yubnpus is babbpus
[子树点亮]     └─ 点亮依赖节点: pislpus is babbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: pislpus is babbpus and tugdpus (深度5)
[子树点亮]     └─ 点亮依赖节点: kapxpus is babbpus and tugdpus (深度6)
[子树点亮]     └─ 点亮依赖节点: kapxpus is babbpus and tugdpus and xiqrpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 23: comrpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: comrpus is kosypus → kosypus is babbpus
[后处理] 基于推理轨迹点亮节点，使用了 19 个前提条件:
  - 前提: comrpus is kosypus
  - 前提: kosypus is nusdpus
  - 前提: nusdpus is secmpus
  - 前提: secmpus is gagdpus
  - 前提: gagdpus is zoyjpus
  - 前提: zoyjpus is vaghpus
  - 前提: vaghpus is tiyypus
  - 前提: tiyypus is dakppus and fewdpus
  - 前提: dakppus is rizlpus and zidxpus
  - 前提: rizlpus is qotypus and benzpus
  - 前提: qotypus is wegmpus
  - 前提: wegmpus is biyfpus and racspus
  - 前提: biyfpus is lugdpus
  - 前提: lugdpus is wegppus and piwdpus and miwypus and tagwpus
  - 前提: wegppus is lobmpus
  - 前提: lobmpus is yulppus
  - 前提: yulppus is soczpus and meyvpus
  - 前提: soczpus is jekrpus
  - 前提: jekrpus is babbpus
  ✓ 点亮LoG节点: wegppus is babbpus
[子树点亮]     └─ 点亮依赖节点: wegppus is yubnpus (深度3)
[子树点亮]     └─ 点亮依赖节点: wegppus is jekrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: wegppus is jekrpus and rimspus (深度5)
[子树点亮]     └─ 点亮依赖节点: soczpus is jekrpus and rimspus (深度6)
[子树点亮]     └─ 点亮依赖节点: soczpus is rimspus (深度7)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 24: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is wegppus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is wegppus and piwdpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is qotypus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is vaghpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is nusdpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is kosypus (深度7)
[后处理]   └─ 自动点亮依赖子树: 6 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 24
   - 新增节点: 21
   - 更新已存在节点: 3
   - 点亮的LoG节点: 58

🎯 推理质量统计:
   - 完美推理: 21 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 58节点, 40前提, 复杂度1-40

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 61
   - 前提节点: 40
   - 推理节点: 21
   - 幻觉节点: 0
   - 点亮LoG节点: 58

✅ 推理节点详情:
   🟢 kosypus is nusdpus (出现1次, 质量:perfect)
   🟢 nusdpus is soczpus (出现1次, 质量:perfect)
   🟢 soczpus is jekrpus (出现1次, 质量:perfect)
   🟢 jekrpus is mewbpus (出现1次, 质量:perfect)
   🟢 jekrpus is jakfpus (出现1次, 质量:perfect)
   🟢 jekrpus is luxhpus (出现1次, 质量:perfect)
   🟢 jekrpus is miqrpus (出现1次, 质量:perfect)
   🟢 jekrpus is dubxpus (出现1次, 质量:perfect)
   🟢 jekrpus is vobnpus (出现1次, 质量:perfect)
   🟢 jekrpus is kilqpus (出现1次, 质量:perfect)
   🟢 jekrpus is yubnpus (出现1次, 质量:perfect)
   🟢 jekrpus is rohppus (出现1次, 质量:perfect)
   🟢 jekrpus is lignpus (出现1次, 质量:perfect)
   🟢 jekrpus is kurvpus (出现1次, 质量:perfect)
   🟢 jekrpus is pislpus (出现1次, 质量:perfect)
   🟢 jekrpus is gommpus (出现1次, 质量:perfect)
   🟢 jekrpus is kapxpus (出现1次, 质量:perfect)
   🟢 jekrpus is penppus (出现1次, 质量:perfect)
   🟢 jekrpus is babbpus (出现1次, 质量:perfect)
   🟢 comrpus is babbpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - yubnpus is pislpus and vexrpus
   - kapxpus is babbpus and tugdpus
   - qotypus is wegppus and piwdpus
   - lignpus is vexrpus
   - x is qotypus
   - biyfpus is wegppus and piwdpus and miwypus
   - qotypus is wegppus and piwdpus and miwypus
   - soczpus is jekrpus
   - miqrpus is vobnpus
   - dakppus is rizlpus
   - yubnpus is lignpus
   - pislpus is kapxpus and fedzpus
   - lignpus is pislpus and vexrpus
   - jekrpus is yubnpus
   - x is wegppus
   - jekrpus is mewbpus
   - nusdpus is gagdpus
   - wegppus is babbpus
   - qotypus is biyfpus
   - vaghpus is dakppus and fewdpus
   - nusdpus is vaghpus
   - x is kosypus
   - wegppus is yulppus
   - yulppus is soczpus
   - wegppus is jekrpus
   - jakfpus is miqrpus and xacdpus
   - yubnpus is lignpus and cicwpus
   - vaghpus is dakppus
   - wegppus is soczpus
   - pislpus is babbpus
   - pislpus is babbpus and tugdpus
   - wegppus is jekrpus and rimspus
   - qotypus is biyfpus and racspus
   - x is vaghpus
   - miqrpus is yubnpus
   - vobnpus is yubnpus
   - kosypus is nusdpus
   - wegppus is yubnpus
   - jakfpus is yubnpus
   - pislpus is kapxpus
   - biyfpus is wegppus and piwdpus and miwypus and tagwpus
   - kapxpus is babbpus and tugdpus and xiqrpus
   - rizlpus is qotypus
   - gagdpus is vaghpus
   - jakfpus is miqrpus
   - x is wegppus and piwdpus
   - yubnpus is babbpus
   - soczpus is rimspus
   - dakppus is qotypus
   - jekrpus is jakfpus and yevcpus
   - mewbpus is jakfpus and yevcpus
   - lignpus is pislpus
   - vaghpus is qotypus
   - yubnpus is pislpus
   - soczpus is jekrpus and rimspus
   - x is babbpus
   - x is nusdpus
   - jekrpus is jakfpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus (第7层)
   节点Coverage: 58/58 = 100.00%
   前提条件Coverage: 3/40 = 7.50%
   各推理层点亮比例:
     第1层: 23/23 = 100.00%
     第2层: 15/15 = 100.00%
     第3层: 8/8 = 100.00%
     第4层: 6/6 = 100.00%
     第5层: 3/3 = 100.00%
     第6层: 2/2 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/21 = 0.00%
   可推导节点: 21/21
   Strict Error Rate: 0/21 = 0.00%
   严格有效节点: 21/21

   详细分析:
     完美推理: 21 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 3/50
================================================================================
记录索引: 2
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_2.json
✅ 使用缓存结果:
   - 句子数: 8
   - 提取的语句数: 33
   - 初始条件数: 28

=== Statement提取完成 ===
总句子数: 8
成功提取: 8
失败提取: 0
总statements数: 33

=== 开始清洗Statement格式 ===
原始statements数: 33
清洗后statements数: 32
过滤掉的statements数: 1
清洗后的statements:
  1. [actual] x is ravdpus
  2. [actual] ravdpus is baccpus
  3. [actual] ravdpus is woskpus
  4. [actual] woskpus is kajqpus
  5. [actual] kajqpus is giqfpus
  6. [actual] giqfpus is dowcpus
  7. [actual] dowcpus is bulzpus
  8. [actual] bulzpus is neqjpus
  9. [actual] neqjpus is dokfpus
  10. [actual] dokfpus is kecvpus
  11. [actual] kecvpus is begrpus
  12. [actual] begrpus is faxcpus
  13. [actual] faxcpus is zeqhpus
  14. [actual] zeqhpus is dotdpus
  15. [actual] dotdpus is miwbpus
  16. [actual] miwbpus is widbpus
  17. [actual] widbpus is kiygpus
  18. [actual] kiygpus is noyspus
  19. [actual] noyspus is wukbpus
  20. [actual] wukbpus is xakdpus
  21. [actual] xakdpus is bepspus
  22. [actual] bepspus is kiglpus
  23. [actual] kiglpus is vafxpus
  24. [actual] vafxpus is nusnpus
  25. [actual] nusnpus is safbpus
  26. [actual] safbpus is vinxpus
  27. [actual] vinxpus is baccpus
  28. [planning] ravdpus is baccpus
  29. [actual] x is baccpus
  30. [actual] x is baccpus
  31. [actual] x is babbpus or baccpus
  32. [actual] x is baccpus

=== 开始标准化和解析节点 ===
清洗后statements数: 32
标准化后节点数: 32
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → ravdpus (原始: x is ravdpus)
  2. [actual] ravdpus → baccpus (原始: ravdpus is baccpus)
  3. [actual] ravdpus → woskpus (原始: ravdpus is woskpus)
  4. [actual] woskpus → kajqpus (原始: woskpus is kajqpus)
  5. [actual] kajqpus → giqfpus (原始: kajqpus is giqfpus)
  6. [actual] giqfpus → dowcpus (原始: giqfpus is dowcpus)
  7. [actual] dowcpus → bulzpus (原始: dowcpus is bulzpus)
  8. [actual] bulzpus → neqjpus (原始: bulzpus is neqjpus)
  9. [actual] neqjpus → dokfpus (原始: neqjpus is dokfpus)
  10. [actual] dokfpus → kecvpus (原始: dokfpus is kecvpus)
  11. [actual] kecvpus → begrpus (原始: kecvpus is begrpus)
  12. [actual] begrpus → faxcpus (原始: begrpus is faxcpus)
  13. [actual] faxcpus → zeqhpus (原始: faxcpus is zeqhpus)
  14. [actual] zeqhpus → dotdpus (原始: zeqhpus is dotdpus)
  15. [actual] dotdpus → miwbpus (原始: dotdpus is miwbpus)
  16. [actual] miwbpus → widbpus (原始: miwbpus is widbpus)
  17. [actual] widbpus → kiygpus (原始: widbpus is kiygpus)
  18. [actual] kiygpus → noyspus (原始: kiygpus is noyspus)
  19. [actual] noyspus → wukbpus (原始: noyspus is wukbpus)
  20. [actual] wukbpus → xakdpus (原始: wukbpus is xakdpus)
  21. [actual] xakdpus → bepspus (原始: xakdpus is bepspus)
  22. [actual] bepspus → kiglpus (原始: bepspus is kiglpus)
  23. [actual] kiglpus → vafxpus (原始: kiglpus is vafxpus)
  24. [actual] vafxpus → nusnpus (原始: vafxpus is nusnpus)
  25. [actual] nusnpus → safbpus (原始: nusnpus is safbpus)
  26. [actual] safbpus → vinxpus (原始: safbpus is vinxpus)
  27. [actual] vinxpus → baccpus (原始: vinxpus is baccpus)
  28. [planning] ravdpus → baccpus (原始: ravdpus is baccpus)
  29. [actual] x → baccpus (原始: x is baccpus)
  30. [actual] x → baccpus (原始: x is baccpus)
  31. [actual] x → babbpus or baccpus (原始: x is babbpus or baccpus)
  32. [actual] x → baccpus (原始: x is baccpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 43
[后处理] 加载LoG图，包含 43 个节点
  LoG节点 0: x is babbpus or baccpus (规则: MP, 深度: 1)
  LoG节点 1: x is dotdpus (规则: CE, 深度: 2)
  LoG节点 2: dotdpus is babbpus or baccpus (规则: DI, 深度: 2)
  LoG节点 3: x is dotdpus and fifzpus (规则: MP, 深度: 3)
  LoG节点 4: dotdpus is baccpus (规则: MP, 深度: 3)
  LoG节点 5: x is dowcpus (规则: CE, 深度: 4)
  LoG节点 6: dowcpus is dotdpus and fifzpus (规则: MP, 深度: 4)
  LoG节点 7: dotdpus is vafxpus (规则: MP, 深度: 4)
  LoG节点 8: vafxpus is baccpus (规则: CE, 深度: 4)
  LoG节点 9: x is dowcpus and mahqpus (规则: MP, 深度: 5)
  LoG节点 10: dowcpus is dokfpus (规则: CE, 深度: 5)
  LoG节点 11: dokfpus is dotdpus and fifzpus (规则: MP, 深度: 5)
  LoG节点 12: dotdpus is xakdpus (规则: MP, 深度: 5)
  LoG节点 13: xakdpus is vafxpus (规则: CE, 深度: 5)
  LoG节点 14: vafxpus is baccpus and tehqpus (规则: MP, 深度: 5)
  LoG节点 15: x is woskpus (规则: CE, 深度: 6)
  LoG节点 16: woskpus is dowcpus and mahqpus (规则: MP, 深度: 6)
  LoG节点 17: dowcpus is dokfpus and bocxpus (规则: MP, 深度: 6)
  LoG节点 18: dokfpus is faxcpus (规则: MP, 深度: 6)
  LoG节点 19: faxcpus is dotdpus and fifzpus (规则: CI, 深度: 6)
  LoG节点 20: dotdpus is noyspus (规则: MP, 深度: 6)
  LoG节点 21: noyspus is xakdpus (规则: MP, 深度: 6)
  LoG节点 22: xakdpus is vafxpus and gitkpus (规则: MP, 深度: 6)
  LoG节点 23: vafxpus is safbpus (规则: CE, 深度: 6)
  LoG节点 24: safbpus is baccpus and tehqpus (规则: CI, 深度: 6)
  LoG节点 25: x is woskpus and zozcpus (规则: MP, 深度: 7)
  LoG节点 26: woskpus is giqfpus (规则: MP, 深度: 7)
  LoG节点 27: giqfpus is dowcpus and mahqpus (规则: CE, 深度: 7)
  LoG节点 28: dowcpus is neqjpus (规则: MP, 深度: 7)
  LoG节点 29: neqjpus is dokfpus and bocxpus (规则: CE, 深度: 7)
  LoG节点 30: dokfpus is begrpus (规则: MP, 深度: 7)
  LoG节点 31: begrpus is faxcpus (规则: CE, 深度: 7)
  LoG节点 32: faxcpus is dotdpus (规则: MP, 深度: 7)
  LoG节点 33: faxcpus is fifzpus (规则: CE, 深度: 7)
  LoG节点 34: dotdpus is widbpus (规则: MP, 深度: 7)
  LoG节点 35: widbpus is noyspus (规则: MP, 深度: 7)
  LoG节点 36: noyspus is wukbpus (规则: CE, 深度: 7)
  LoG节点 37: wukbpus is xakdpus (规则: CE, 深度: 7)
  LoG节点 38: xakdpus is kiglpus (规则: MP, 深度: 7)
  LoG节点 39: kiglpus is vafxpus and gitkpus (规则: CE, 深度: 7)
  LoG节点 40: vafxpus is safbpus and tolvpus (规则: MP, 深度: 7)
  LoG节点 41: safbpus is baccpus (规则: MP, 深度: 7)
  LoG节点 42: safbpus is tehqpus (规则: CE, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 32
   - 初始条件数: 28
   - LoG图节点数: 43

📋 初始条件列表:
    1. neqjpus is dokfpus and bocxpus and jusdpus
    2. dowcpus is bulzpus
    3. dotdpus is miwbpus
    4. kiygpus is noyspus
    5. xakdpus is bepspus
    6. woskpus is kajqpus
    7. faxcpus is zeqhpus
    8. kecvpus is begrpus
    9. kiglpus is vafxpus and gitkpus and gehkpus
   10. nusnpus is safbpus and tolvpus
   11. kajqpus is giqfpus
   12. begrpus is faxcpus and tugdpus
   13. widbpus is kiygpus
   14. vafxpus is nusnpus
   15. ravdpus is woskpus and zozcpus
   16. dokfpus is kecvpus
   17. wukbpus is xakdpus and xiyrpus
   18. giqfpus is dowcpus and mahqpus and dexnpus
   19. x is ravdpus
   20. faxcpus is fifzpus and vaqbpus
   21. miwbpus is widbpus
   22. bepspus is kiglpus
   23. safbpus is tehqpus and juyqpus
   24. bulzpus is neqjpus
   25. zeqhpus is dotdpus
   26. noyspus is wukbpus and sekmpus
   27. vinxpus is baccpus
   28. safbpus is vinxpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 28 个前提节点

🔍 开始处理actual节点...

   节点 1: x is ravdpus
      ↻ 重复节点，计数: 2

   节点 2: ravdpus is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP+CE
      📋 推理路径: MP+CE规则: ravdpus is woskpus → woskpus is baccpus
[后处理] 基于推理轨迹点亮节点，使用了 25 个前提条件:
  - 前提: ravdpus is woskpus and zozcpus
  - 前提: woskpus is kajqpus
  - 前提: kajqpus is giqfpus
  - 前提: giqfpus is dowcpus and mahqpus and dexnpus
  - 前提: dowcpus is bulzpus
  - 前提: bulzpus is neqjpus
  - 前提: neqjpus is dokfpus and bocxpus and jusdpus
  - 前提: dokfpus is kecvpus
  - 前提: kecvpus is begrpus
  - 前提: begrpus is faxcpus and tugdpus
  - 前提: faxcpus is zeqhpus
  - 前提: zeqhpus is dotdpus
  - 前提: dotdpus is miwbpus
  - 前提: miwbpus is widbpus
  - 前提: widbpus is kiygpus
  - 前提: kiygpus is noyspus
  - 前提: noyspus is wukbpus and sekmpus
  - 前提: wukbpus is xakdpus and xiyrpus
  - 前提: xakdpus is bepspus
  - 前提: bepspus is kiglpus
  - 前提: kiglpus is vafxpus and gitkpus and gehkpus
  - 前提: vafxpus is nusnpus
  - 前提: nusnpus is safbpus and tolvpus
  - 前提: safbpus is vinxpus
  - 前提: vinxpus is baccpus
  ✓ 点亮LoG节点: dotdpus is babbpus or baccpus
[子树点亮]     └─ 点亮依赖节点: dotdpus is baccpus (深度3)
[子树点亮]     └─ 点亮依赖节点: dotdpus is vafxpus (深度4)
[子树点亮]     └─ 点亮依赖节点: vafxpus is baccpus (深度4)
[子树点亮]     └─ 点亮依赖节点: dotdpus is xakdpus (深度5)
[子树点亮]     └─ 点亮依赖节点: xakdpus is vafxpus (深度5)
[子树点亮]     └─ 点亮依赖节点: vafxpus is baccpus and tehqpus (深度5)
[子树点亮]     └─ 点亮依赖节点: dotdpus is noyspus (深度6)
[子树点亮]     └─ 点亮依赖节点: noyspus is xakdpus (深度6)
[子树点亮]     └─ 点亮依赖节点: xakdpus is vafxpus and gitkpus (深度6)
[子树点亮]     └─ 点亮依赖节点: vafxpus is safbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: safbpus is baccpus and tehqpus (深度6)
[子树点亮]     └─ 点亮依赖节点: dotdpus is widbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: widbpus is noyspus (深度7)
[子树点亮]     └─ 点亮依赖节点: noyspus is wukbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: wukbpus is xakdpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xakdpus is kiglpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kiglpus is vafxpus and gitkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: vafxpus is safbpus and tolvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: safbpus is baccpus (深度7)
[子树点亮]     └─ 点亮依赖节点: safbpus is tehqpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 20 个节点
  ✓ 点亮LoG节点: dowcpus is dokfpus
[子树点亮]     └─ 点亮依赖节点: dowcpus is dokfpus and bocxpus (深度6)
[子树点亮]     └─ 点亮依赖节点: dowcpus is neqjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: neqjpus is dokfpus and bocxpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
  ✓ 点亮LoG节点: woskpus is dowcpus and mahqpus
[子树点亮]     └─ 点亮依赖节点: woskpus is giqfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: giqfpus is dowcpus and mahqpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
  ✓ 点亮LoG节点: dokfpus is faxcpus
[子树点亮]     └─ 点亮依赖节点: dokfpus is begrpus (深度7)
[子树点亮]     └─ 点亮依赖节点: begrpus is faxcpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
  ✓ 点亮LoG节点: faxcpus is dotdpus
[后处理] 通过推理轨迹额外点亮了 5 个LoG节点

   节点 3: ravdpus is woskpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: ravdpus is woskpus and zozcpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: ravdpus is woskpus and zozcpus

   节点 4: woskpus is kajqpus
      ↻ 重复节点，计数: 2

   节点 5: kajqpus is giqfpus
      ↻ 重复节点，计数: 2

   节点 6: giqfpus is dowcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: giqfpus is dowcpus and mahqpus and dexnpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: giqfpus is dowcpus and mahqpus and dexnpus

   节点 7: dowcpus is bulzpus
      ↻ 重复节点，计数: 2

   节点 8: bulzpus is neqjpus
      ↻ 重复节点，计数: 2

   节点 9: neqjpus is dokfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: neqjpus is dokfpus and bocxpus and jusdpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: neqjpus is dokfpus and bocxpus and jusdpus

   节点 10: dokfpus is kecvpus
      ↻ 重复节点，计数: 2

   节点 11: kecvpus is begrpus
      ↻ 重复节点，计数: 2

   节点 12: begrpus is faxcpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 13: faxcpus is zeqhpus
      ↻ 重复节点，计数: 2

   节点 14: zeqhpus is dotdpus
      ↻ 重复节点，计数: 2

   节点 15: dotdpus is miwbpus
      ↻ 重复节点，计数: 2

   节点 16: miwbpus is widbpus
      ↻ 重复节点，计数: 2

   节点 17: widbpus is kiygpus
      ↻ 重复节点，计数: 2

   节点 18: kiygpus is noyspus
      ↻ 重复节点，计数: 2

   节点 19: noyspus is wukbpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 20: wukbpus is xakdpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 21: xakdpus is bepspus
      ↻ 重复节点，计数: 2

   节点 22: bepspus is kiglpus
      ↻ 重复节点，计数: 2

   节点 23: kiglpus is vafxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kiglpus is vafxpus and gitkpus and gehkpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kiglpus is vafxpus and gitkpus and gehkpus

   节点 24: vafxpus is nusnpus
      ↻ 重复节点，计数: 2

   节点 25: nusnpus is safbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: nusnpus is safbpus and tolvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: nusnpus is safbpus and tolvpus

   节点 26: safbpus is vinxpus
      ↻ 重复节点，计数: 2

   节点 27: vinxpus is baccpus
      ↻ 重复节点，计数: 2

   节点 28: x is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is ravdpus → ravdpus is baccpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is ravdpus
  - 前提: ravdpus is baccpus
  ✓ 点亮LoG节点: x is babbpus or baccpus
[子树点亮]     └─ 点亮依赖节点: x is dotdpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is dotdpus and fifzpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is dowcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: dowcpus is dotdpus and fifzpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is dowcpus and mahqpus (深度5)
[子树点亮]     └─ 点亮依赖节点: dokfpus is dotdpus and fifzpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is woskpus (深度6)
[子树点亮]     └─ 点亮依赖节点: faxcpus is dotdpus and fifzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is woskpus and zozcpus (深度7)
[子树点亮]     └─ 点亮依赖节点: faxcpus is fifzpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 10 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 29: x is baccpus
      ↻ 重复节点，计数: 2

   节点 30: x is babbpus or baccpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 31: x is baccpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 31
   - 新增节点: 11
   - 更新已存在节点: 20
   - 点亮的LoG节点: 43

🎯 推理质量统计:
   - 完美推理: 11 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 43节点, 28前提, 复杂度1-28

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 39
   - 前提节点: 28
   - 推理节点: 11
   - 幻觉节点: 0
   - 点亮LoG节点: 43

✅ 推理节点详情:
   🟢 ravdpus is baccpus (出现1次, 质量:perfect)
   🟢 ravdpus is woskpus (出现1次, 质量:perfect)
   🟢 giqfpus is dowcpus (出现1次, 质量:perfect)
   🟢 neqjpus is dokfpus (出现1次, 质量:perfect)
   🟢 begrpus is faxcpus (出现1次, 质量:perfect)
   🟢 noyspus is wukbpus (出现1次, 质量:perfect)
   🟢 wukbpus is xakdpus (出现1次, 质量:perfect)
   🟢 kiglpus is vafxpus (出现1次, 质量:perfect)
   🟢 nusnpus is safbpus (出现1次, 质量:perfect)
   🟢 x is baccpus (出现3次, 质量:perfect)
   🟢 x is babbpus or baccpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - faxcpus is dotdpus and fifzpus
   - safbpus is tehqpus
   - x is dowcpus
   - widbpus is noyspus
   - giqfpus is dowcpus and mahqpus
   - xakdpus is vafxpus and gitkpus
   - woskpus is giqfpus
   - x is dowcpus and mahqpus
   - dowcpus is neqjpus
   - x is woskpus
   - dotdpus is vafxpus
   - safbpus is baccpus
   - xakdpus is kiglpus
   - dotdpus is widbpus
   - dokfpus is faxcpus
   - x is dotdpus and fifzpus
   - x is woskpus and zozcpus
   - vafxpus is baccpus and tehqpus
   - safbpus is baccpus and tehqpus
   - begrpus is faxcpus
   - noyspus is wukbpus
   - xakdpus is vafxpus
   - vafxpus is safbpus
   - dokfpus is dotdpus and fifzpus
   - vafxpus is baccpus
   - dotdpus is babbpus or baccpus
   - vafxpus is safbpus and tolvpus
   - woskpus is dowcpus and mahqpus
   - dotdpus is baccpus
   - dokfpus is begrpus
   - faxcpus is dotdpus
   - noyspus is xakdpus
   - dowcpus is dokfpus and bocxpus
   - dotdpus is noyspus
   - x is dotdpus
   - kiglpus is vafxpus and gitkpus
   - wukbpus is xakdpus
   - faxcpus is fifzpus
   - neqjpus is dokfpus and bocxpus
   - dotdpus is xakdpus
   - x is babbpus or baccpus
   - dowcpus is dokfpus
   - dowcpus is dotdpus and fifzpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus or baccpus (第7层)
   节点Coverage: 43/43 = 100.00%
   前提条件Coverage: 18/28 = 64.29%
   各推理层点亮比例:
     第1层: 18/18 = 100.00%
     第2层: 10/10 = 100.00%
     第3层: 6/6 = 100.00%
     第4层: 4/4 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 2/2 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/11 = 0.00%
   可推导节点: 11/11
   Strict Error Rate: 0/11 = 0.00%
   严格有效节点: 11/11

   详细分析:
     完美推理: 11 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 4/50
================================================================================
记录索引: 3
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_3.json
✅ 使用缓存结果:
   - 句子数: 32
   - 提取的语句数: 28
   - 初始条件数: 17

=== Statement提取完成 ===
总句子数: 32
成功提取: 32
失败提取: 0
总statements数: 28

=== 开始清洗Statement格式 ===
原始statements数: 28
清洗后statements数: 28
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 28
标准化后节点数: 28
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → zutqpus (原始: x is zutqpus)
  2. [actual] zutqpus → riwkpus (原始: zutqpus is riwkpus)
  3. [planning] x → riwkpus (原始: x is riwkpus)
  4. [actual] riwkpus → ciyfpus (原始: riwkpus is ciyfpus)
  5. [planning] x → ciyfpus (原始: x is ciyfpus)
  6. [actual] ciyfpus → qazmpus (原始: ciyfpus is qazmpus)
  7. [planning] x → qazmpus (原始: x is qazmpus)
  8. [actual] qazmpus → gefspus (原始: qazmpus is gefspus)
  9. [planning] x → gefspus (原始: x is gefspus)
  10. [actual] gefspus → sitgpus (原始: gefspus is sitgpus)
  11. [planning] x → sitgpus (原始: x is sitgpus)
  12. [actual] sitgpus → luprpus (原始: sitgpus is luprpus)
  13. [planning] x → luprpus (原始: x is luprpus)
  14. [actual] luprpus → cosgpus (原始: luprpus is cosgpus)
  15. [planning] x → cosgpus (原始: x is cosgpus)
  16. [actual] cosgpus → jefjpus and vucxpus (原始: cosgpus is jefjpus and vucxpus)
  17. [planning] x → jefjpus (原始: x is jefjpus)
  18. [actual] jefjpus → jatlpus and rerdpus (原始: jefjpus is jatlpus and rerdpus)
  19. [actual] x → jatlpus (原始: x is jatlpus)
  20. [actual] jatlpus → cacrpus and sefypus (原始: jatlpus is cacrpus and sefypus)
  21. [actual] x → cacrpus (原始: x is cacrpus)
  22. [actual] cacrpus → kugrpus and tuwhpus (原始: cacrpus is kugrpus and tuwhpus)
  23. [actual] x → kugrpus (原始: x is kugrpus)
  24. [actual] kugrpus → jejtpus (原始: kugrpus is jejtpus)
  25. [planning] x → jejtpus (原始: x is jejtpus)
  26. [actual] jejtpus → babbpus and xanbpus and buvmpus and zigrpus (原始: jejtpus is babbpus and xanbpus and buvmpus and zigrpus)
  27. [actual] x → babbpus (原始: x is babbpus)
  28. [actual] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 25
[后处理] 加载LoG图，包含 25 个节点
  LoG节点 0: x is babbpus (规则: CE, 深度: 1)
  LoG节点 1: x is babbpus and xanbpus (规则: MP, 深度: 2)
  LoG节点 2: x is sitgpus (规则: CE, 深度: 3)
  LoG节点 3: sitgpus is babbpus and xanbpus (规则: CE, 深度: 3)
  LoG节点 4: x is sitgpus and kahmpus (规则: MP, 深度: 4)
  LoG节点 5: sitgpus is babbpus and xanbpus and buvmpus (规则: MP, 深度: 4)
  LoG节点 6: x is ciyfpus (规则: CE, 深度: 5)
  LoG节点 7: ciyfpus is sitgpus and kahmpus (规则: CE, 深度: 5)
  LoG节点 8: sitgpus is cacrpus (规则: MP, 深度: 5)
  LoG节点 9: cacrpus is babbpus and xanbpus and buvmpus (规则: CE, 深度: 5)
  LoG节点 10: x is ciyfpus and luqppus (规则: MP, 深度: 6)
  LoG节点 11: ciyfpus is sitgpus and kahmpus and gexkpus (规则: MP, 深度: 6)
  LoG节点 12: sitgpus is jefjpus (规则: MP, 深度: 6)
  LoG节点 13: jefjpus is cacrpus (规则: MP, 深度: 6)
  LoG节点 14: cacrpus is babbpus and xanbpus and buvmpus and zigrpus (规则: MP, 深度: 6)
  LoG节点 15: x is riwkpus (规则: MP, 深度: 7)
  LoG节点 16: riwkpus is ciyfpus and luqppus (规则: CI, 深度: 7)
  LoG节点 17: ciyfpus is gefspus (规则: MP, 深度: 7)
  LoG节点 18: gefspus is sitgpus and kahmpus and gexkpus (规则: CI, 深度: 7)
  LoG节点 19: sitgpus is cosgpus (规则: MP, 深度: 7)
  LoG节点 20: cosgpus is jefjpus (规则: CE, 深度: 7)
  LoG节点 21: jefjpus is jatlpus (规则: CE, 深度: 7)
  LoG节点 22: jatlpus is cacrpus (规则: CE, 深度: 7)
  LoG节点 23: cacrpus is kugrpus (规则: CE, 深度: 7)
  LoG节点 24: kugrpus is babbpus and xanbpus and buvmpus and zigrpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 28
   - 初始条件数: 17
   - LoG图节点数: 25

📋 初始条件列表:
    1. sitgpus is luprpus
    2. gefspus is sitgpus
    3. jefjpus is jatlpus and rerdpus
    4. jejtpus is babbpus and xanbpus and buvmpus and zigrpus
    5. kugrpus is jejtpus
    6. gefspus is kahmpus
    7. x is zutqpus
    8. cacrpus is kugrpus and tuwhpus
    9. jatlpus is cacrpus and sefypus
   10. qazmpus is gefspus
   11. ciyfpus is qazmpus
   12. gefspus is gexkpus
   13. cosgpus is jefjpus and vucxpus
   14. riwkpus is ciyfpus
   15. riwkpus is luqppus
   16. luprpus is cosgpus
   17. zutqpus is riwkpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 17 个前提节点

🔍 开始处理actual节点...

   节点 1: x is zutqpus
      ↻ 重复节点，计数: 2

   节点 2: zutqpus is riwkpus
      ↻ 重复节点，计数: 2

   节点 3: riwkpus is ciyfpus
      ↻ 重复节点，计数: 2

   节点 4: ciyfpus is qazmpus
      ↻ 重复节点，计数: 2

   节点 5: qazmpus is gefspus
      ↻ 重复节点，计数: 2

   节点 6: gefspus is sitgpus
      ↻ 重复节点，计数: 2

   节点 7: sitgpus is luprpus
      ↻ 重复节点，计数: 2

   节点 8: luprpus is cosgpus
      ↻ 重复节点，计数: 2

   节点 9: cosgpus is jefjpus and vucxpus
      ↻ 重复节点，计数: 2

   节点 10: jefjpus is jatlpus and rerdpus
      ↻ 重复节点，计数: 2

   节点 11: x is jatlpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zutqpus → zutqpus is jatlpus
[后处理] 基于推理轨迹点亮节点，使用了 10 个前提条件:
  - 前提: x is zutqpus
  - 前提: zutqpus is riwkpus
  - 前提: riwkpus is ciyfpus
  - 前提: ciyfpus is qazmpus
  - 前提: qazmpus is gefspus
  - 前提: gefspus is sitgpus
  - 前提: sitgpus is luprpus
  - 前提: luprpus is cosgpus
  - 前提: cosgpus is jefjpus and vucxpus
  - 前提: jefjpus is jatlpus and rerdpus
  ✓ 点亮LoG节点: x is sitgpus
[子树点亮]     └─ 点亮依赖节点: x is sitgpus and kahmpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is ciyfpus (深度5)
[子树点亮]     └─ 点亮依赖节点: ciyfpus is sitgpus and kahmpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is ciyfpus and luqppus (深度6)
[子树点亮]     └─ 点亮依赖节点: ciyfpus is sitgpus and kahmpus and gexkpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is riwkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: riwkpus is ciyfpus and luqppus (深度7)
[子树点亮]     └─ 点亮依赖节点: ciyfpus is gefspus (深度7)
[子树点亮]     └─ 点亮依赖节点: gefspus is sitgpus and kahmpus and gexkpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 9 个节点
  ✓ 点亮LoG节点: sitgpus is jefjpus
[子树点亮]     └─ 点亮依赖节点: sitgpus is cosgpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cosgpus is jefjpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
  ✓ 点亮LoG节点: jefjpus is jatlpus
[后处理] 通过推理轨迹额外点亮了 3 个LoG节点

   节点 12: jatlpus is cacrpus and sefypus
      ↻ 重复节点，计数: 2

   节点 13: x is cacrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zutqpus → zutqpus is cacrpus
[后处理] 基于推理轨迹点亮节点，使用了 11 个前提条件:
  - 前提: x is zutqpus
  - 前提: zutqpus is riwkpus
  - 前提: riwkpus is ciyfpus
  - 前提: ciyfpus is qazmpus
  - 前提: qazmpus is gefspus
  - 前提: gefspus is sitgpus
  - 前提: sitgpus is luprpus
  - 前提: luprpus is cosgpus
  - 前提: cosgpus is jefjpus and vucxpus
  - 前提: jefjpus is jatlpus and rerdpus
  - 前提: jatlpus is cacrpus and sefypus
  ✓ 点亮LoG节点: sitgpus is cacrpus
[子树点亮]     └─ 点亮依赖节点: jefjpus is cacrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jatlpus is cacrpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 14: cacrpus is kugrpus and tuwhpus
      ↻ 重复节点，计数: 2

   节点 15: x is kugrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zutqpus → zutqpus is kugrpus
[后处理] 基于推理轨迹点亮节点，使用了 12 个前提条件:
  - 前提: x is zutqpus
  - 前提: zutqpus is riwkpus
  - 前提: riwkpus is ciyfpus
  - 前提: ciyfpus is qazmpus
  - 前提: qazmpus is gefspus
  - 前提: gefspus is sitgpus
  - 前提: sitgpus is luprpus
  - 前提: luprpus is cosgpus
  - 前提: cosgpus is jefjpus and vucxpus
  - 前提: jefjpus is jatlpus and rerdpus
  - 前提: jatlpus is cacrpus and sefypus
  - 前提: cacrpus is kugrpus and tuwhpus
  ✓ 点亮LoG节点: cacrpus is kugrpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 16: kugrpus is jejtpus
      ↻ 重复节点，计数: 2

   节点 17: jejtpus is babbpus and xanbpus and buvmpus and zigrpus
      ↻ 重复节点，计数: 2

   节点 18: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is babbpus and xanbpus (深度2)
[子树点亮]     └─ 点亮依赖节点: sitgpus is babbpus and xanbpus (深度3)
[子树点亮]     └─ 点亮依赖节点: sitgpus is babbpus and xanbpus and buvmpus (深度4)
[子树点亮]     └─ 点亮依赖节点: cacrpus is babbpus and xanbpus and buvmpus (深度5)
[子树点亮]     └─ 点亮依赖节点: cacrpus is babbpus and xanbpus and buvmpus and zigrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: kugrpus is babbpus and xanbpus and buvmpus and zigrpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 6 个节点
      ✅ 验证成功 + LoG匹配

   节点 19: x is babbpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 19
   - 新增节点: 4
   - 更新已存在节点: 15
   - 点亮的LoG节点: 25

🎯 推理质量统计:
   - 完美推理: 4 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 25节点, 17前提, 复杂度1-17

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 21
   - 前提节点: 17
   - 推理节点: 4
   - 幻觉节点: 0
   - 点亮LoG节点: 25

✅ 推理节点详情:
   🟢 x is jatlpus (出现1次, 质量:perfect)
   🟢 x is cacrpus (出现1次, 质量:perfect)
   🟢 x is kugrpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现2次, 质量:perfect)

🔥 点亮的LoG节点:
   - riwkpus is ciyfpus and luqppus
   - sitgpus is jefjpus
   - x is sitgpus and kahmpus
   - ciyfpus is gefspus
   - ciyfpus is sitgpus and kahmpus
   - x is ciyfpus and luqppus
   - x is babbpus and xanbpus
   - sitgpus is cosgpus
   - cacrpus is babbpus and xanbpus and buvmpus and zigrpus
   - cosgpus is jefjpus
   - sitgpus is babbpus and xanbpus and buvmpus
   - cacrpus is kugrpus
   - gefspus is sitgpus and kahmpus and gexkpus
   - kugrpus is babbpus and xanbpus and buvmpus and zigrpus
   - jatlpus is cacrpus
   - jefjpus is cacrpus
   - jefjpus is jatlpus
   - cacrpus is babbpus and xanbpus and buvmpus
   - x is ciyfpus
   - ciyfpus is sitgpus and kahmpus and gexkpus
   - x is sitgpus
   - sitgpus is babbpus and xanbpus
   - sitgpus is cacrpus
   - x is riwkpus
   - x is babbpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus (第7层)
   节点Coverage: 25/25 = 100.00%
   前提条件Coverage: 14/17 = 82.35%
   各推理层点亮比例:
     第1层: 10/10 = 100.00%
     第2层: 5/5 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/4 = 0.00%
   可推导节点: 4/4
   Strict Error Rate: 0/4 = 0.00%
   严格有效节点: 4/4

   详细分析:
     完美推理: 4 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 5/50
================================================================================
记录索引: 4
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_4.json
✅ 使用缓存结果:
   - 句子数: 14
   - 提取的语句数: 12
   - 初始条件数: 11

=== Statement提取完成 ===
总句子数: 14
成功提取: 14
失败提取: 0
总statements数: 12

=== 开始清洗Statement格式 ===
原始statements数: 12
清洗后statements数: 12
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 12
标准化后节点数: 12
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → guhvpus (原始: x is guhvpus)
  2. [actual] guhvpus → wejxpus (原始: guhvpus is wejxpus)
  3. [actual] wejxpus → quxvpus (原始: wejxpus is quxvpus)
  4. [actual] quxvpus → gibzpus (原始: quxvpus is gibzpus)
  5. [actual] gibzpus → lubqpus (原始: gibzpus is lubqpus)
  6. [actual] lubqpus → jemmpus (原始: lubqpus is jemmpus)
  7. [actual] jemmpus → kilfpus (原始: jemmpus is kilfpus)
  8. [actual] kilfpus → tafkpus (原始: kilfpus is tafkpus)
  9. [actual] tafkpus → nirrpus (原始: tafkpus is nirrpus)
  10. [actual] nirrpus → bewspus (原始: nirrpus is bewspus)
  11. [actual] bewspus → babbpus (原始: bewspus is babbpus)
  12. [actual] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 22
[后处理] 加载LoG图，包含 22 个节点
  LoG节点 0: x is babbpus (规则: CE, 深度: 1)
  LoG节点 1: x is babbpus and yetzpus (规则: MP, 深度: 2)
  LoG节点 2: x is lubqpus (规则: CE, 深度: 3)
  LoG节点 3: lubqpus is babbpus and yetzpus (规则: CE, 深度: 3)
  LoG节点 4: x is lubqpus and yimbpus (规则: MP, 深度: 4)
  LoG节点 5: lubqpus is babbpus and yetzpus and fudppus (规则: MP, 深度: 4)
  LoG节点 6: x is quxvpus (规则: CE, 深度: 5)
  LoG节点 7: quxvpus is lubqpus and yimbpus (规则: CE, 深度: 5)
  LoG节点 8: lubqpus is tafkpus (规则: CE, 深度: 5)
  LoG节点 9: tafkpus is babbpus and yetzpus and fudppus (规则: CE, 深度: 5)
  LoG节点 10: x is quxvpus and kavmpus (规则: MP, 深度: 6)
  LoG节点 11: quxvpus is lubqpus and yimbpus and kubtpus (规则: MP, 深度: 6)
  LoG节点 12: lubqpus is tafkpus and caxgpus (规则: MP, 深度: 6)
  LoG节点 13: tafkpus is babbpus and yetzpus and fudppus and wuqnpus (规则: MP, 深度: 6)
  LoG节点 14: x is guhvpus (规则: CE, 深度: 7)
  LoG节点 15: guhvpus is quxvpus and kavmpus (规则: MP, 深度: 7)
  LoG节点 16: quxvpus is gibzpus (规则: CE, 深度: 7)
  LoG节点 17: gibzpus is lubqpus and yimbpus and kubtpus (规则: CE, 深度: 7)
  LoG节点 18: lubqpus is jemmpus (规则: CE, 深度: 7)
  LoG节点 19: jemmpus is tafkpus and caxgpus (规则: MP, 深度: 7)
  LoG节点 20: tafkpus is nirrpus (规则: CE, 深度: 7)
  LoG节点 21: nirrpus is babbpus and yetzpus and fudppus and wuqnpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 12
   - 初始条件数: 11
   - LoG图节点数: 22

📋 初始条件列表:
    1. nirrpus is bewspus
    2. kilfpus is tafkpus and caxgpus
    3. lubqpus is jemmpus and xazhpus
    4. x is guhvpus and galwpus
    5. tafkpus is nirrpus and domcpus
    6. bewspus is babbpus and yetzpus and fudppus and wuqnpus
    7. quxvpus is gibzpus and xuzdpus
    8. gibzpus is lubqpus and yimbpus and kubtpus and riyppus
    9. guhvpus is wejxpus
   10. wejxpus is quxvpus and kavmpus
   11. jemmpus is kilfpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 11 个前提节点

🔍 开始处理actual节点...

   节点 1: x is guhvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is guhvpus
      ✅ 验证成功 + LoG匹配

   节点 2: guhvpus is wejxpus
      ↻ 重复节点，计数: 2

   节点 3: wejxpus is quxvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wejxpus is quxvpus and kavmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wejxpus is quxvpus and kavmpus

   节点 4: quxvpus is gibzpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: quxvpus is gibzpus
      ✅ 验证成功 + LoG匹配

   节点 5: gibzpus is lubqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gibzpus is lubqpus and yimbpus and kubtpus and riyppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gibzpus is lubqpus and yimbpus and kubtpus and riyppus
  ✓ 点亮LoG节点: gibzpus is lubqpus and yimbpus and kubtpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 6: lubqpus is jemmpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: lubqpus is jemmpus
      ✅ 验证成功 + LoG匹配

   节点 7: jemmpus is kilfpus
      ↻ 重复节点，计数: 2

   节点 8: kilfpus is tafkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kilfpus is tafkpus and caxgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kilfpus is tafkpus and caxgpus

   节点 9: tafkpus is nirrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: tafkpus is nirrpus
      ✅ 验证成功 + LoG匹配

   节点 10: nirrpus is bewspus
      ↻ 重复节点，计数: 2

   节点 11: bewspus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: bewspus is babbpus and yetzpus and fudppus and wuqnpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: bewspus is babbpus and yetzpus and fudppus and wuqnpus

   节点 12: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is babbpus and yetzpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is lubqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: lubqpus is babbpus and yetzpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is lubqpus and yimbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: lubqpus is babbpus and yetzpus and fudppus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is quxvpus (深度5)
[子树点亮]     └─ 点亮依赖节点: quxvpus is lubqpus and yimbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: lubqpus is tafkpus (深度5)
[子树点亮]     └─ 点亮依赖节点: tafkpus is babbpus and yetzpus and fudppus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is quxvpus and kavmpus (深度6)
[子树点亮]     └─ 点亮依赖节点: quxvpus is lubqpus and yimbpus and kubtpus (深度6)
[子树点亮]     └─ 点亮依赖节点: lubqpus is tafkpus and caxgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: tafkpus is babbpus and yetzpus and fudppus and wuqnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: guhvpus is quxvpus and kavmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jemmpus is tafkpus and caxgpus (深度7)
[子树点亮]     └─ 点亮依赖节点: nirrpus is babbpus and yetzpus and fudppus and wuqnpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 16 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 12
   - 新增节点: 9
   - 更新已存在节点: 3
   - 点亮的LoG节点: 22

🎯 推理质量统计:
   - 完美推理: 9 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 22节点, 11前提, 复杂度1-11

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 20
   - 前提节点: 11
   - 推理节点: 9
   - 幻觉节点: 0
   - 点亮LoG节点: 22

✅ 推理节点详情:
   🟢 x is guhvpus (出现1次, 质量:perfect)
   🟢 wejxpus is quxvpus (出现1次, 质量:perfect)
   🟢 quxvpus is gibzpus (出现1次, 质量:perfect)
   🟢 gibzpus is lubqpus (出现1次, 质量:perfect)
   🟢 lubqpus is jemmpus (出现1次, 质量:perfect)
   🟢 kilfpus is tafkpus (出现1次, 质量:perfect)
   🟢 tafkpus is nirrpus (出现1次, 质量:perfect)
   🟢 bewspus is babbpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - tafkpus is nirrpus
   - x is lubqpus
   - quxvpus is lubqpus and yimbpus and kubtpus
   - x is quxvpus
   - lubqpus is tafkpus and caxgpus
   - x is quxvpus and kavmpus
   - lubqpus is jemmpus
   - nirrpus is babbpus and yetzpus and fudppus and wuqnpus
   - lubqpus is babbpus and yetzpus and fudppus
   - jemmpus is tafkpus and caxgpus
   - tafkpus is babbpus and yetzpus and fudppus and wuqnpus
   - x is guhvpus
   - quxvpus is gibzpus
   - tafkpus is babbpus and yetzpus and fudppus
   - lubqpus is tafkpus
   - guhvpus is quxvpus and kavmpus
   - x is lubqpus and yimbpus
   - quxvpus is lubqpus and yimbpus
   - gibzpus is lubqpus and yimbpus and kubtpus
   - x is babbpus and yetzpus
   - lubqpus is babbpus and yetzpus
   - x is babbpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus (第7层)
   节点Coverage: 22/22 = 100.00%
   前提条件Coverage: 3/11 = 27.27%
   各推理层点亮比例:
     第1层: 8/8 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/9 = 0.00%
   可推导节点: 9/9
   Strict Error Rate: 0/9 = 0.00%
   严格有效节点: 9/9

   详细分析:
     完美推理: 9 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 6/50
================================================================================
记录索引: 5
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_5.json
✅ 使用缓存结果:
   - 句子数: 25
   - 提取的语句数: 27
   - 初始条件数: 24

=== Statement提取完成 ===
总句子数: 25
成功提取: 25
失败提取: 0
总statements数: 27

=== 开始清洗Statement格式 ===
原始statements数: 27
清洗后statements数: 27
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 27
标准化后节点数: 27
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] xazhpus → gemzpus (原始: xazhpus is gemzpus)
  2. [actual] gemzpus → jigrpus (原始: gemzpus is jigrpus)
  3. [actual] jigrpus → rafqpus (原始: jigrpus is rafqpus)
  4. [actual] rafqpus → rewdpus (原始: rafqpus is rewdpus)
  5. [actual] rewdpus → nuyvpus (原始: rewdpus is nuyvpus)
  6. [actual] nuyvpus → lugdpus and gobxpus (原始: nuyvpus is lugdpus and gobxpus)
  7. [actual] lugdpus → jazxpus (原始: lugdpus is jazxpus)
  8. [actual] jazxpus → pofwpus and pexwpus (原始: jazxpus is pofwpus and pexwpus)
  9. [actual] pofwpus → covhpus (原始: pofwpus is covhpus)
  10. [actual] covhpus → cikfpus (原始: covhpus is cikfpus)
  11. [actual] cikfpus → tojjpus and dophpus and fimkpus (原始: cikfpus is tojjpus and dophpus and fimkpus)
  12. [actual] tojjpus → vulcpus and rashpus (原始: tojjpus is vulcpus and rashpus)
  13. [actual] tojjpus → habspus (原始: tojjpus is habspus)
  14. [actual] tojjpus → vulcpus (原始: tojjpus is vulcpus)
  15. [actual] vulcpus → wicwpus (原始: vulcpus is wicwpus)
  16. [actual] wicwpus → tiqxpus (原始: wicwpus is tiqxpus)
  17. [actual] tojjpus → tiqxpus (原始: tojjpus is tiqxpus)
  18. [actual] x → tiqxpus (原始: x is tiqxpus)
  19. [actual] tiqxpus → bachpus (原始: tiqxpus is bachpus)
  20. [actual] tiqxpus → jegbpus (原始: tiqxpus is jegbpus)
  21. [actual] jegbpus → babbpus and baccpus (原始: jegbpus is babbpus and baccpus)
  22. [actual] tiqxpus → babbpus and baccpus and bachpus (原始: tiqxpus is babbpus and baccpus and bachpus)
  23. [actual] x → tiqxpus (原始: x is tiqxpus)
  24. [actual] x → babbpus (原始: x is babbpus)
  25. [actual] x → baccpus (原始: x is baccpus)
  26. [actual] x → bachpus (原始: x is bachpus)
  27. [actual] x → babbpus and baccpus and bachpus (原始: x is babbpus and baccpus and bachpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 34
[后处理] 加载LoG图，包含 34 个节点
  LoG节点 0: x is babbpus and baccpus and bachpus (规则: CE, 深度: 1)
  LoG节点 1: x is babbpus and baccpus and bachpus and fuhwpus (规则: MP, 深度: 2)
  LoG节点 2: x is tojjpus (规则: CE, 深度: 3)
  LoG节点 3: tojjpus is babbpus and baccpus and bachpus and fuhwpus (规则: CI, 深度: 3)
  LoG节点 4: x is tojjpus and dophpus (规则: MP, 深度: 4)
  LoG节点 5: tojjpus is babbpus and baccpus and bachpus (规则: CE, 深度: 4)
  LoG节点 6: tojjpus is fuhwpus (规则: CE, 深度: 4)
  LoG节点 7: x is lugdpus (规则: MP, 深度: 5)
  LoG节点 8: lugdpus is tojjpus and dophpus (规则: MP, 深度: 5)
  LoG节点 9: tojjpus is babbpus and baccpus and bachpus and zibcpus (规则: MP, 深度: 5)
  LoG节点 10: tojjpus is fuhwpus and zidppus (规则: MP, 深度: 5)
  LoG节点 11: x is rafqpus (规则: MP, 深度: 6)
  LoG节点 12: rafqpus is lugdpus (规则: MP, 深度: 6)
  LoG节点 13: lugdpus is pofwpus (规则: CE, 深度: 6)
  LoG节点 14: pofwpus is tojjpus and dophpus (规则: MP, 深度: 6)
  LoG节点 15: tojjpus is tiqxpus (规则: MP, 深度: 6)
  LoG节点 16: tiqxpus is babbpus and baccpus and bachpus and zibcpus (规则: CI, 深度: 6)
  LoG节点 17: tojjpus is kejgpus (规则: MP, 深度: 6)
  LoG节点 18: kejgpus is fuhwpus and zidppus (规则: MP, 深度: 6)
  LoG节点 19: x is gemzpus (规则: MP, 深度: 7)
  LoG节点 20: gemzpus is rafqpus (规则: MP, 深度: 7)
  LoG节点 21: rafqpus is nuyvpus (规则: MP, 深度: 7)
  LoG节点 22: nuyvpus is lugdpus (规则: CE, 深度: 7)
  LoG节点 23: lugdpus is pofwpus and pexwpus (规则: MP, 深度: 7)
  LoG节点 24: pofwpus is cikfpus (规则: MP, 深度: 7)
  LoG节点 25: cikfpus is tojjpus and dophpus (规则: CE, 深度: 7)
  LoG节点 26: tojjpus is vulcpus (规则: CE, 深度: 7)
  LoG节点 27: vulcpus is tiqxpus (规则: MP, 深度: 7)
  LoG节点 28: tiqxpus is babbpus and baccpus (规则: MP, 深度: 7)
  LoG节点 29: tiqxpus is bachpus and zibcpus (规则: CI, 深度: 7)
  LoG节点 30: tojjpus is fimxpus (规则: MP, 深度: 7)
  LoG节点 31: fimxpus is kejgpus (规则: CE, 深度: 7)
  LoG节点 32: kejgpus is buthpus (规则: CE, 深度: 7)
  LoG节点 33: buthpus is fuhwpus and zidppus (规则: CE, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 27
   - 初始条件数: 24
   - LoG图节点数: 34

📋 初始条件列表:
    1. nuyvpus is lugdpus and gobxpus
    2. tiqxpus is bachpus
    3. x is xazhpus
    4. tiqxpus is jegbpus
    5. tojjpus is habspus
    6. jazxpus is pofwpus and pexwpus
    7. buthpus is fuhwpus and zidppus and geqnpus
    8. rafqpus is rewdpus
    9. gemzpus is jigrpus
   10. cikfpus is tojjpus and dophpus and fimkpus
   11. tiqxpus is zibcpus
   12. pofwpus is covhpus
   13. rewdpus is nuyvpus
   14. lugdpus is jazxpus
   15. vulcpus is wicwpus
   16. tojjpus is vulcpus and rashpus
   17. fimxpus is kejgpus and pipqpus
   18. habspus is fimxpus
   19. kejgpus is buthpus and zegnpus
   20. jegbpus is babbpus and baccpus
   21. covhpus is cikfpus
   22. jigrpus is rafqpus
   23. wicwpus is tiqxpus
   24. xazhpus is gemzpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 24 个前提节点

🔍 开始处理actual节点...

   节点 1: xazhpus is gemzpus
      ↻ 重复节点，计数: 2

   节点 2: gemzpus is jigrpus
      ↻ 重复节点，计数: 2

   节点 3: jigrpus is rafqpus
      ↻ 重复节点，计数: 2

   节点 4: rafqpus is rewdpus
      ↻ 重复节点，计数: 2

   节点 5: rewdpus is nuyvpus
      ↻ 重复节点，计数: 2

   节点 6: nuyvpus is lugdpus and gobxpus
      ↻ 重复节点，计数: 2

   节点 7: lugdpus is jazxpus
      ↻ 重复节点，计数: 2

   节点 8: jazxpus is pofwpus and pexwpus
      ↻ 重复节点，计数: 2

   节点 9: pofwpus is covhpus
      ↻ 重复节点，计数: 2

   节点 10: covhpus is cikfpus
      ↻ 重复节点，计数: 2

   节点 11: cikfpus is tojjpus and dophpus and fimkpus
      ↻ 重复节点，计数: 2

   节点 12: tojjpus is vulcpus and rashpus
      ↻ 重复节点，计数: 2

   节点 13: tojjpus is habspus
      ↻ 重复节点，计数: 2

   节点 14: tojjpus is vulcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: tojjpus is vulcpus
      ✅ 验证成功 + LoG匹配

   节点 15: vulcpus is wicwpus
      ↻ 重复节点，计数: 2

   节点 16: wicwpus is tiqxpus
      ↻ 重复节点，计数: 2

   节点 17: tojjpus is tiqxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: tojjpus is tiqxpus
[子树点亮]     └─ 点亮依赖节点: vulcpus is tiqxpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 18: x is tiqxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xazhpus → xazhpus is tiqxpus
[后处理] 基于推理轨迹点亮节点，使用了 13 个前提条件:
  - 前提: x is xazhpus
  - 前提: xazhpus is gemzpus
  - 前提: gemzpus is jigrpus
  - 前提: jigrpus is rafqpus
  - 前提: rafqpus is rewdpus
  - 前提: rewdpus is nuyvpus
  - 前提: nuyvpus is lugdpus and gobxpus
  - 前提: lugdpus is jazxpus
  - 前提: jazxpus is pofwpus and pexwpus
  - 前提: pofwpus is covhpus
  - 前提: covhpus is cikfpus
  - 前提: cikfpus is tojjpus and dophpus and fimkpus
  - 前提: tojjpus is tiqxpus
  ✓ 点亮LoG节点: x is tojjpus
[子树点亮]     └─ 点亮依赖节点: x is tojjpus and dophpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is lugdpus (深度5)
[子树点亮]     └─ 点亮依赖节点: lugdpus is tojjpus and dophpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is rafqpus (深度6)
[子树点亮]     └─ 点亮依赖节点: rafqpus is lugdpus (深度6)
[子树点亮]     └─ 点亮依赖节点: lugdpus is pofwpus (深度6)
[子树点亮]     └─ 点亮依赖节点: pofwpus is tojjpus and dophpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is gemzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: gemzpus is rafqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: rafqpus is nuyvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: nuyvpus is lugdpus (深度7)
[子树点亮]     └─ 点亮依赖节点: lugdpus is pofwpus and pexwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: pofwpus is cikfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cikfpus is tojjpus and dophpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 14 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 19: tiqxpus is bachpus
      ↻ 重复节点，计数: 2

   节点 20: tiqxpus is jegbpus
      ↻ 重复节点，计数: 2

   节点 21: jegbpus is babbpus and baccpus
      ↻ 重复节点，计数: 2

   节点 22: tiqxpus is babbpus and baccpus and bachpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: tiqxpus is babbpus → tiqxpus is baccpus → tiqxpus is bachpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: tiqxpus is jegbpus
  - 前提: jegbpus is babbpus and baccpus
  - 前提: tiqxpus is bachpus
  ✓ 点亮LoG节点: tiqxpus is babbpus and baccpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 23: x is tiqxpus
      ↻ 重复节点，计数: 2

   节点 24: x is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xazhpus → xazhpus is babbpus
[后处理] 基于推理轨迹点亮节点，使用了 16 个前提条件:
  - 前提: x is xazhpus
  - 前提: xazhpus is gemzpus
  - 前提: gemzpus is jigrpus
  - 前提: jigrpus is rafqpus
  - 前提: rafqpus is rewdpus
  - 前提: rewdpus is nuyvpus
  - 前提: nuyvpus is lugdpus and gobxpus
  - 前提: lugdpus is jazxpus
  - 前提: jazxpus is pofwpus and pexwpus
  - 前提: pofwpus is covhpus
  - 前提: covhpus is cikfpus
  - 前提: cikfpus is tojjpus and dophpus and fimkpus
  - 前提: tojjpus is vulcpus
  - 前提: vulcpus is wicwpus
  - 前提: wicwpus is tiqxpus
  - 前提: tiqxpus is babbpus and baccpus and bachpus
  ✓ 点亮LoG节点: x is babbpus and baccpus and bachpus
[子树点亮]     └─ 点亮依赖节点: x is babbpus and baccpus and bachpus and fuhwpus (深度2)
[子树点亮]     └─ 点亮依赖节点: tojjpus is babbpus and baccpus and bachpus and fuhwpus (深度3)
[子树点亮]     └─ 点亮依赖节点: tojjpus is babbpus and baccpus and bachpus (深度4)
[子树点亮]     └─ 点亮依赖节点: tojjpus is fuhwpus (深度4)
[子树点亮]     └─ 点亮依赖节点: tojjpus is babbpus and baccpus and bachpus and zibcpus (深度5)
[子树点亮]     └─ 点亮依赖节点: tojjpus is fuhwpus and zidppus (深度5)
[子树点亮]     └─ 点亮依赖节点: tiqxpus is babbpus and baccpus and bachpus and zibcpus (深度6)
[子树点亮]     └─ 点亮依赖节点: tojjpus is kejgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: kejgpus is fuhwpus and zidppus (深度6)
[子树点亮]     └─ 点亮依赖节点: tiqxpus is bachpus and zibcpus (深度7)
[子树点亮]     └─ 点亮依赖节点: tojjpus is fimxpus (深度7)
[子树点亮]     └─ 点亮依赖节点: fimxpus is kejgpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kejgpus is buthpus (深度7)
[子树点亮]     └─ 点亮依赖节点: buthpus is fuhwpus and zidppus (深度7)
[后处理]   └─ 自动点亮依赖子树: 14 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 25: x is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xazhpus → xazhpus is baccpus
[后处理] 基于推理轨迹点亮节点，使用了 16 个前提条件:
  - 前提: x is xazhpus
  - 前提: xazhpus is gemzpus
  - 前提: gemzpus is jigrpus
  - 前提: jigrpus is rafqpus
  - 前提: rafqpus is rewdpus
  - 前提: rewdpus is nuyvpus
  - 前提: nuyvpus is lugdpus and gobxpus
  - 前提: lugdpus is jazxpus
  - 前提: jazxpus is pofwpus and pexwpus
  - 前提: pofwpus is covhpus
  - 前提: covhpus is cikfpus
  - 前提: cikfpus is tojjpus and dophpus and fimkpus
  - 前提: tojjpus is vulcpus
  - 前提: vulcpus is wicwpus
  - 前提: wicwpus is tiqxpus
  - 前提: tiqxpus is babbpus and baccpus and bachpus

   节点 26: x is bachpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xazhpus → xazhpus is bachpus
[后处理] 基于推理轨迹点亮节点，使用了 16 个前提条件:
  - 前提: x is xazhpus
  - 前提: xazhpus is gemzpus
  - 前提: gemzpus is jigrpus
  - 前提: jigrpus is rafqpus
  - 前提: rafqpus is rewdpus
  - 前提: rewdpus is nuyvpus
  - 前提: nuyvpus is lugdpus and gobxpus
  - 前提: lugdpus is jazxpus
  - 前提: jazxpus is pofwpus and pexwpus
  - 前提: pofwpus is covhpus
  - 前提: covhpus is cikfpus
  - 前提: cikfpus is tojjpus and dophpus and fimkpus
  - 前提: tojjpus is vulcpus
  - 前提: vulcpus is wicwpus
  - 前提: wicwpus is tiqxpus
  - 前提: tiqxpus is bachpus

   节点 27: x is babbpus and baccpus and bachpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 27
   - 新增节点: 8
   - 更新已存在节点: 19
   - 点亮的LoG节点: 34

🎯 推理质量统计:
   - 完美推理: 8 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 34节点, 24前提, 复杂度1-24

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 32
   - 前提节点: 24
   - 推理节点: 8
   - 幻觉节点: 0
   - 点亮LoG节点: 34

✅ 推理节点详情:
   🟢 tojjpus is vulcpus (出现1次, 质量:perfect)
   🟢 tojjpus is tiqxpus (出现1次, 质量:perfect)
   🟢 x is tiqxpus (出现2次, 质量:perfect)
   🟢 tiqxpus is babbpus and baccpus and bachpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现1次, 质量:perfect)
   🟢 x is baccpus (出现1次, 质量:perfect)
   🟢 x is bachpus (出现1次, 质量:perfect)
   🟢 x is babbpus and baccpus and bachpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - tojjpus is babbpus and baccpus and bachpus and fuhwpus
   - x is babbpus and baccpus and bachpus
   - tojjpus is babbpus and baccpus and bachpus
   - x is lugdpus
   - tiqxpus is babbpus and baccpus
   - x is gemzpus
   - tojjpus is fuhwpus and zidppus
   - fimxpus is kejgpus
   - lugdpus is tojjpus and dophpus
   - rafqpus is nuyvpus
   - pofwpus is tojjpus and dophpus
   - tojjpus is vulcpus
   - cikfpus is tojjpus and dophpus
   - tojjpus is tiqxpus
   - rafqpus is lugdpus
   - gemzpus is rafqpus
   - kejgpus is buthpus
   - x is rafqpus
   - lugdpus is pofwpus
   - lugdpus is pofwpus and pexwpus
   - x is babbpus and baccpus and bachpus and fuhwpus
   - tiqxpus is babbpus and baccpus and bachpus and zibcpus
   - tiqxpus is bachpus and zibcpus
   - x is tojjpus
   - x is tojjpus and dophpus
   - kejgpus is fuhwpus and zidppus
   - buthpus is fuhwpus and zidppus
   - tojjpus is fuhwpus
   - tojjpus is babbpus and baccpus and bachpus and zibcpus
   - tojjpus is kejgpus
   - tojjpus is fimxpus
   - vulcpus is tiqxpus
   - pofwpus is cikfpus
   - nuyvpus is lugdpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus and baccpus and bachpus (第7层)
   节点Coverage: 34/34 = 100.00%
   前提条件Coverage: 18/24 = 75.00%
   各推理层点亮比例:
     第1层: 15/15 = 100.00%
     第2层: 8/8 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 3/3 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/8 = 0.00%
   可推导节点: 8/8
   Strict Error Rate: 0/8 = 0.00%
   严格有效节点: 8/8

   详细分析:
     完美推理: 8 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 7/50
================================================================================
记录索引: 6
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_6.json
✅ 使用缓存结果:
   - 句子数: 5
   - 提取的语句数: 44
   - 初始条件数: 44

=== Statement提取完成 ===
总句子数: 5
成功提取: 5
失败提取: 0
总statements数: 44

=== 开始清洗Statement格式 ===
原始statements数: 44
清洗后statements数: 44
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 44
标准化后节点数: 44
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babbpus (原始: x is babbpus)
  2. [actual] x → xelspus (原始: x is xelspus)
  3. [actual] xelspus → tuwspus and fagvpus (原始: xelspus is tuwspus and fagvpus)
  4. [actual] tuwspus → javbpus (原始: tuwspus is javbpus)
  5. [actual] javbpus → moywpus (原始: javbpus is moywpus)
  6. [actual] moywpus → likqpus and koqhpus (原始: moywpus is likqpus and koqhpus)
  7. [actual] likqpus → gizfpus (原始: likqpus is gizfpus)
  8. [actual] gizfpus → toxqpus (原始: gizfpus is toxqpus)
  9. [actual] toxqpus → dadmpus (原始: toxqpus is dadmpus)
  10. [actual] dadmpus → jeyypus and wehppus (原始: dadmpus is jeyypus and wehppus)
  11. [actual] jeyypus → zetjpus (原始: jeyypus is zetjpus)
  12. [actual] zetjpus → pektpus (原始: zetjpus is pektpus)
  13. [actual] pektpus → gemypus and godjpus (原始: pektpus is gemypus and godjpus)
  14. [actual] gemypus → ribhpus (原始: gemypus is ribhpus)
  15. [actual] ribhpus → qakjpus (原始: ribhpus is qakjpus)
  16. [actual] qakjpus → nitdpus (原始: qakjpus is nitdpus)
  17. [actual] nitdpus → jojspus and sedxpus and mexvpus (原始: nitdpus is jojspus and sedxpus and mexvpus)
  18. [actual] jojspus → jahfpus and pakqpus (原始: jojspus is jahfpus and pakqpus)
  19. [actual] jahfpus → zivgpus and fesvpus and xuhtpus (原始: jahfpus is zivgpus and fesvpus and xuhtpus)
  20. [actual] zivgpus → yebkpus (原始: zivgpus is yebkpus)
  21. [actual] yebkpus → limhpus and vetjpus (原始: yebkpus is limhpus and vetjpus)
  22. [actual] limhpus → piqypus and gimnpus (原始: limhpus is piqypus and gimnpus)
  23. [actual] piqypus → yorgpus (原始: piqypus is yorgpus)
  24. [actual] yorgpus → xojjpus (原始: yorgpus is xojjpus)
  25. [actual] xojjpus → ronmpus (原始: xojjpus is ronmpus)
  26. [actual] ronmpus → joblpus (原始: ronmpus is joblpus)
  27. [actual] joblpus → xezppus (原始: joblpus is xezppus)
  28. [actual] xezppus → rebfpus and mutjpus (原始: xezppus is rebfpus and mutjpus)
  29. [actual] rebfpus → diwppus (原始: rebfpus is diwppus)
  30. [actual] diwppus → jufwpus and goldpus (原始: diwppus is jufwpus and goldpus)
  31. [actual] jufwpus → vatzpus and javlpus (原始: jufwpus is vatzpus and javlpus)
  32. [actual] vatzpus → quzbpus and gefgpus (原始: vatzpus is quzbpus and gefgpus)
  33. [actual] quzbpus → vixmpus (原始: quzbpus is vixmpus)
  34. [actual] vixmpus → lepdpus (原始: vixmpus is lepdpus)
  35. [actual] lepdpus → ribppus (原始: lepdpus is ribppus)
  36. [actual] ribppus → mohxpus (原始: ribppus is mohxpus)
  37. [actual] mohxpus → leygpus (原始: mohxpus is leygpus)
  38. [actual] leygpus → ranbpus (原始: leygpus is ranbpus)
  39. [actual] ranbpus → jaffpus (原始: ranbpus is jaffpus)
  40. [actual] jaffpus → fibbpus (原始: jaffpus is fibbpus)
  41. [actual] fibbpus → kuvcpus (原始: fibbpus is kuvcpus)
  42. [actual] kuvcpus → viqbpus (原始: kuvcpus is viqbpus)
  43. [actual] viqbpus → babbpus (原始: viqbpus is babbpus)
  44. [actual] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 61
[后处理] 加载LoG图，包含 61 个节点
  LoG节点 0: x is babbpus (规则: MP, 深度: 1)
  LoG节点 1: x is jojspus (规则: CE, 深度: 2)
  LoG节点 2: jojspus is babbpus (规则: MP, 深度: 2)
  LoG节点 3: x is jojspus and sedxpus (规则: MP, 深度: 3)
  LoG节点 4: jojspus is piqypus (规则: CE, 深度: 3)
  LoG节点 5: piqypus is babbpus (规则: MP, 深度: 3)
  LoG节点 6: x is jeyypus (规则: MP, 深度: 4)
  LoG节点 7: jeyypus is jojspus and sedxpus (规则: CE, 深度: 4)
  LoG节点 8: jojspus is piqypus and lalbpus (规则: MP, 深度: 4)
  LoG节点 9: piqypus is quzbpus (规则: MP, 深度: 4)
  LoG节点 10: quzbpus is babbpus (规则: MP, 深度: 4)
  LoG节点 11: x is likqpus (规则: MP, 深度: 5)
  LoG节点 12: likqpus is jeyypus (规则: CE, 深度: 5)
  LoG节点 13: jeyypus is jojspus and sedxpus and mexvpus (规则: MP, 深度: 5)
  LoG节点 14: jojspus is zivgpus (规则: CE, 深度: 5)
  LoG节点 15: zivgpus is piqypus and lalbpus (规则: MP, 深度: 5)
  LoG节点 16: piqypus is rebfpus (规则: MP, 深度: 5)
  LoG节点 17: rebfpus is quzbpus (规则: MP, 深度: 5)
  LoG节点 18: quzbpus is fibbpus (规则: MP, 深度: 5)
  LoG节点 19: fibbpus is babbpus (规则: CE, 深度: 5)
  LoG节点 20: x is tuwspus (规则: CE, 深度: 6)
  LoG节点 21: tuwspus is likqpus (规则: MP, 深度: 6)
  LoG节点 22: likqpus is jeyypus and wehppus (规则: MP, 深度: 6)
  LoG节点 23: jeyypus is gemypus (规则: MP, 深度: 6)
  LoG节点 24: gemypus is jojspus and sedxpus and mexvpus (规则: MP, 深度: 6)
  LoG节点 25: jojspus is zivgpus and fesvpus (规则: MP, 深度: 6)
  LoG节点 26: zivgpus is limhpus (规则: CE, 深度: 6)
  LoG节点 27: limhpus is piqypus and lalbpus (规则: CI, 深度: 6)
  LoG节点 28: piqypus is joblpus (规则: MP, 深度: 6)
  LoG节点 29: joblpus is rebfpus (规则: CE, 深度: 6)
  LoG节点 30: rebfpus is jufwpus (规则: CE, 深度: 6)
  LoG节点 31: jufwpus is quzbpus (规则: MP, 深度: 6)
  LoG节点 32: quzbpus is mohxpus (规则: MP, 深度: 6)
  LoG节点 33: mohxpus is fibbpus (规则: MP, 深度: 6)
  LoG节点 34: fibbpus is babbpus and zuhxpus (规则: MP, 深度: 6)
  LoG节点 35: x is tuwspus and fagvpus (规则: MP, 深度: 7)
  LoG节点 36: tuwspus is moywpus (规则: MP, 深度: 7)
  LoG节点 37: moywpus is likqpus (规则: CE, 深度: 7)
  LoG节点 38: likqpus is toxqpus (规则: MP, 深度: 7)
  LoG节点 39: toxqpus is jeyypus and wehppus (规则: MP, 深度: 7)
  LoG节点 40: jeyypus is pektpus (规则: MP, 深度: 7)
  LoG节点 41: pektpus is gemypus (规则: CE, 深度: 7)
  LoG节点 42: gemypus is qakjpus (规则: MP, 深度: 7)
  LoG节点 43: qakjpus is jojspus and sedxpus and mexvpus (规则: MP, 深度: 7)
  LoG节点 44: jojspus is jahfpus (规则: CE, 深度: 7)
  LoG节点 45: jahfpus is zivgpus and fesvpus (规则: CE, 深度: 7)
  LoG节点 46: zivgpus is limhpus and vetjpus (规则: MP, 深度: 7)
  LoG节点 47: limhpus is piqypus (规则: CE, 深度: 7)
  LoG节点 48: limhpus is lalbpus (规则: CE, 深度: 7)
  LoG节点 49: piqypus is xojjpus (规则: MP, 深度: 7)
  LoG节点 50: xojjpus is joblpus (规则: MP, 深度: 7)
  LoG节点 51: joblpus is rebfpus and mutjpus (规则: MP, 深度: 7)
  LoG节点 52: rebfpus is jufwpus and goldpus (规则: MP, 深度: 7)
  LoG节点 53: jufwpus is vatzpus (规则: CE, 深度: 7)
  LoG节点 54: vatzpus is quzbpus (规则: CE, 深度: 7)
  LoG节点 55: quzbpus is lepdpus (规则: MP, 深度: 7)
  LoG节点 56: lepdpus is mohxpus (规则: MP, 深度: 7)
  LoG节点 57: mohxpus is ranbpus (规则: MP, 深度: 7)
  LoG节点 58: ranbpus is fibbpus (规则: MP, 深度: 7)
  LoG节点 59: fibbpus is viqbpus (规则: MP, 深度: 7)
  LoG节点 60: viqbpus is babbpus and zuhxpus (规则: CI, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 44
   - 初始条件数: 44
   - LoG图节点数: 61

📋 初始条件列表:
    1. zetjpus is pektpus
    2. likqpus is gizfpus
    3. yorgpus is xojjpus
    4. vatzpus is quzbpus and gefgpus
    5. ribppus is mohxpus
    6. dadmpus is jeyypus and wehppus
    7. jahfpus is zivgpus and fesvpus and xuhtpus
    8. zivgpus is yebkpus
    9. moywpus is likqpus and koqhpus
   10. ribhpus is qakjpus
   11. gizfpus is toxqpus
   12. jojspus is jahfpus and pakqpus
   13. piqypus is yorgpus
   14. rebfpus is diwppus
   15. viqbpus is zuhxpus
   16. mohxpus is leygpus
   17. lepdpus is ribppus
   18. gemypus is ribhpus
   19. tuwspus is javbpus
   20. kuvcpus is viqbpus
   21. yebkpus is limhpus and vetjpus
   22. ranbpus is jaffpus
   23. joblpus is xezppus
   24. x is xelspus
   25. leygpus is ranbpus
   26. toxqpus is dadmpus
   27. limhpus is lalbpus and vahxpus
   28. jeyypus is zetjpus
   29. viqbpus is babbpus
   30. javbpus is moywpus
   31. jufwpus is vatzpus and javlpus
   32. ronmpus is joblpus
   33. xezppus is rebfpus and mutjpus
   34. qakjpus is nitdpus
   35. nitdpus is jojspus and sedxpus and mexvpus
   36. fibbpus is kuvcpus
   37. xojjpus is ronmpus
   38. pektpus is gemypus and godjpus
   39. diwppus is jufwpus and goldpus
   40. vixmpus is lepdpus
   41. limhpus is piqypus and gimnpus
   42. xelspus is tuwspus and fagvpus
   43. quzbpus is vixmpus
   44. jaffpus is fibbpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 44 个前提节点

🔍 开始处理actual节点...

   节点 1: x is xelspus
      ↻ 重复节点，计数: 2

   节点 2: xelspus is tuwspus and fagvpus
      ↻ 重复节点，计数: 2

   节点 3: tuwspus is javbpus
      ↻ 重复节点，计数: 2

   节点 4: javbpus is moywpus
      ↻ 重复节点，计数: 2

   节点 5: moywpus is likqpus and koqhpus
      ↻ 重复节点，计数: 2

   节点 6: likqpus is gizfpus
      ↻ 重复节点，计数: 2

   节点 7: gizfpus is toxqpus
      ↻ 重复节点，计数: 2

   节点 8: toxqpus is dadmpus
      ↻ 重复节点，计数: 2

   节点 9: dadmpus is jeyypus and wehppus
      ↻ 重复节点，计数: 2

   节点 10: jeyypus is zetjpus
      ↻ 重复节点，计数: 2

   节点 11: zetjpus is pektpus
      ↻ 重复节点，计数: 2

   节点 12: pektpus is gemypus and godjpus
      ↻ 重复节点，计数: 2

   节点 13: gemypus is ribhpus
      ↻ 重复节点，计数: 2

   节点 14: ribhpus is qakjpus
      ↻ 重复节点，计数: 2

   节点 15: qakjpus is nitdpus
      ↻ 重复节点，计数: 2

   节点 16: nitdpus is jojspus and sedxpus and mexvpus
      ↻ 重复节点，计数: 2

   节点 17: jojspus is jahfpus and pakqpus
      ↻ 重复节点，计数: 2

   节点 18: jahfpus is zivgpus and fesvpus and xuhtpus
      ↻ 重复节点，计数: 2

   节点 19: zivgpus is yebkpus
      ↻ 重复节点，计数: 2

   节点 20: yebkpus is limhpus and vetjpus
      ↻ 重复节点，计数: 2

   节点 21: limhpus is piqypus and gimnpus
      ↻ 重复节点，计数: 2

   节点 22: piqypus is yorgpus
      ↻ 重复节点，计数: 2

   节点 23: yorgpus is xojjpus
      ↻ 重复节点，计数: 2

   节点 24: xojjpus is ronmpus
      ↻ 重复节点，计数: 2

   节点 25: ronmpus is joblpus
      ↻ 重复节点，计数: 2

   节点 26: joblpus is xezppus
      ↻ 重复节点，计数: 2

   节点 27: xezppus is rebfpus and mutjpus
      ↻ 重复节点，计数: 2

   节点 28: rebfpus is diwppus
      ↻ 重复节点，计数: 2

   节点 29: diwppus is jufwpus and goldpus
      ↻ 重复节点，计数: 2

   节点 30: jufwpus is vatzpus and javlpus
      ↻ 重复节点，计数: 2

   节点 31: vatzpus is quzbpus and gefgpus
      ↻ 重复节点，计数: 2

   节点 32: quzbpus is vixmpus
      ↻ 重复节点，计数: 2

   节点 33: vixmpus is lepdpus
      ↻ 重复节点，计数: 2

   节点 34: lepdpus is ribppus
      ↻ 重复节点，计数: 2

   节点 35: ribppus is mohxpus
      ↻ 重复节点，计数: 2

   节点 36: mohxpus is leygpus
      ↻ 重复节点，计数: 2

   节点 37: leygpus is ranbpus
      ↻ 重复节点，计数: 2

   节点 38: ranbpus is jaffpus
      ↻ 重复节点，计数: 2

   节点 39: jaffpus is fibbpus
      ↻ 重复节点，计数: 2

   节点 40: fibbpus is kuvcpus
      ↻ 重复节点，计数: 2

   节点 41: kuvcpus is viqbpus
      ↻ 重复节点，计数: 2

   节点 42: viqbpus is babbpus
      ↻ 重复节点，计数: 2

   节点 43: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is jojspus (深度2)
[子树点亮]     └─ 点亮依赖节点: jojspus is babbpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is jojspus and sedxpus (深度3)
[子树点亮]     └─ 点亮依赖节点: jojspus is piqypus (深度3)
[子树点亮]     └─ 点亮依赖节点: piqypus is babbpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is jeyypus (深度4)
[子树点亮]     └─ 点亮依赖节点: jeyypus is jojspus and sedxpus (深度4)
[子树点亮]     └─ 点亮依赖节点: jojspus is piqypus and lalbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: piqypus is quzbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: quzbpus is babbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is likqpus (深度5)
[子树点亮]     └─ 点亮依赖节点: likqpus is jeyypus (深度5)
[子树点亮]     └─ 点亮依赖节点: jeyypus is jojspus and sedxpus and mexvpus (深度5)
[子树点亮]     └─ 点亮依赖节点: jojspus is zivgpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zivgpus is piqypus and lalbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: piqypus is rebfpus (深度5)
[子树点亮]     └─ 点亮依赖节点: rebfpus is quzbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: quzbpus is fibbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: fibbpus is babbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is tuwspus (深度6)
[子树点亮]     └─ 点亮依赖节点: tuwspus is likqpus (深度6)
[子树点亮]     └─ 点亮依赖节点: likqpus is jeyypus and wehppus (深度6)
[子树点亮]     └─ 点亮依赖节点: jeyypus is gemypus (深度6)
[子树点亮]     └─ 点亮依赖节点: gemypus is jojspus and sedxpus and mexvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jojspus is zivgpus and fesvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: zivgpus is limhpus (深度6)
[子树点亮]     └─ 点亮依赖节点: limhpus is piqypus and lalbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: piqypus is joblpus (深度6)
[子树点亮]     └─ 点亮依赖节点: joblpus is rebfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: rebfpus is jufwpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jufwpus is quzbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: quzbpus is mohxpus (深度6)
[子树点亮]     └─ 点亮依赖节点: mohxpus is fibbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: fibbpus is babbpus and zuhxpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is tuwspus and fagvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: tuwspus is moywpus (深度7)
[子树点亮]     └─ 点亮依赖节点: moywpus is likqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: likqpus is toxqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: toxqpus is jeyypus and wehppus (深度7)
[子树点亮]     └─ 点亮依赖节点: jeyypus is pektpus (深度7)
[子树点亮]     └─ 点亮依赖节点: pektpus is gemypus (深度7)
[子树点亮]     └─ 点亮依赖节点: gemypus is qakjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qakjpus is jojspus and sedxpus and mexvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jojspus is jahfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jahfpus is zivgpus and fesvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: zivgpus is limhpus and vetjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: limhpus is piqypus (深度7)
[子树点亮]     └─ 点亮依赖节点: limhpus is lalbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: piqypus is xojjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xojjpus is joblpus (深度7)
[子树点亮]     └─ 点亮依赖节点: joblpus is rebfpus and mutjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: rebfpus is jufwpus and goldpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jufwpus is vatzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: vatzpus is quzbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: quzbpus is lepdpus (深度7)
[子树点亮]     └─ 点亮依赖节点: lepdpus is mohxpus (深度7)
[子树点亮]     └─ 点亮依赖节点: mohxpus is ranbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: ranbpus is fibbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: fibbpus is viqbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: viqbpus is babbpus and zuhxpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 60 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 43
   - 新增节点: 1
   - 更新已存在节点: 42
   - 点亮的LoG节点: 61

🎯 推理质量统计:
   - 完美推理: 1 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 61节点, 44前提, 复杂度1-44

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 45
   - 前提节点: 44
   - 推理节点: 1
   - 幻觉节点: 0
   - 点亮LoG节点: 61

✅ 推理节点详情:
   🟢 x is babbpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - gemypus is qakjpus
   - lepdpus is mohxpus
   - jojspus is jahfpus
   - tuwspus is moywpus
   - fibbpus is babbpus
   - x is tuwspus and fagvpus
   - jufwpus is vatzpus
   - likqpus is toxqpus
   - rebfpus is jufwpus
   - x is jojspus
   - gemypus is jojspus and sedxpus and mexvpus
   - jahfpus is zivgpus and fesvpus
   - piqypus is babbpus
   - quzbpus is babbpus
   - piqypus is xojjpus
   - jojspus is babbpus
   - mohxpus is ranbpus
   - x is jojspus and sedxpus
   - jeyypus is gemypus
   - limhpus is piqypus and lalbpus
   - zivgpus is limhpus and vetjpus
   - quzbpus is fibbpus
   - zivgpus is limhpus
   - qakjpus is jojspus and sedxpus and mexvpus
   - limhpus is lalbpus
   - ranbpus is fibbpus
   - likqpus is jeyypus and wehppus
   - jojspus is piqypus
   - piqypus is quzbpus
   - jufwpus is quzbpus
   - fibbpus is viqbpus
   - piqypus is rebfpus
   - tuwspus is likqpus
   - jeyypus is jojspus and sedxpus and mexvpus
   - jojspus is piqypus and lalbpus
   - jojspus is zivgpus
   - quzbpus is mohxpus
   - jeyypus is pektpus
   - moywpus is likqpus
   - rebfpus is jufwpus and goldpus
   - joblpus is rebfpus and mutjpus
   - limhpus is piqypus
   - fibbpus is babbpus and zuhxpus
   - toxqpus is jeyypus and wehppus
   - xojjpus is joblpus
   - likqpus is jeyypus
   - rebfpus is quzbpus
   - zivgpus is piqypus and lalbpus
   - x is jeyypus
   - piqypus is joblpus
   - joblpus is rebfpus
   - jojspus is zivgpus and fesvpus
   - viqbpus is babbpus and zuhxpus
   - mohxpus is fibbpus
   - pektpus is gemypus
   - quzbpus is lepdpus
   - x is likqpus
   - x is babbpus
   - vatzpus is quzbpus
   - x is tuwspus
   - jeyypus is jojspus and sedxpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus (第7层)
   节点Coverage: 61/61 = 100.00%
   前提条件Coverage: 42/44 = 95.45%
   各推理层点亮比例:
     第1层: 26/26 = 100.00%
     第2层: 15/15 = 100.00%
     第3层: 9/9 = 100.00%
     第4层: 5/5 = 100.00%
     第5层: 3/3 = 100.00%
     第6层: 2/2 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/1 = 0.00%
   可推导节点: 1/1
   Strict Error Rate: 0/1 = 0.00%
   严格有效节点: 1/1

   详细分析:
     完美推理: 1 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 8/50
================================================================================
记录索引: 7
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_7.json
✅ 使用缓存结果:
   - 句子数: 6
   - 提取的语句数: 45
   - 初始条件数: 44

=== Statement提取完成 ===
总句子数: 6
成功提取: 6
失败提取: 0
总statements数: 45

=== 开始清洗Statement格式 ===
原始statements数: 45
清洗后statements数: 45
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 45
标准化后节点数: 45
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → dojgpus (原始: x is dojgpus)
  2. [actual] x → babbpus (原始: x is babbpus)
  3. [actual] x → dojgpus (原始: x is dojgpus)
  4. [actual] dojgpus → ticxpus (原始: dojgpus is ticxpus)
  5. [actual] ticxpus → yitvpus (原始: ticxpus is yitvpus)
  6. [actual] yitvpus → gighpus (原始: yitvpus is gighpus)
  7. [actual] gighpus → ranwpus (原始: gighpus is ranwpus)
  8. [actual] ranwpus → najzpus (原始: ranwpus is najzpus)
  9. [actual] najzpus → barhpus (原始: najzpus is barhpus)
  10. [actual] barhpus → dehtpus (原始: barhpus is dehtpus)
  11. [actual] dehtpus → poqcpus (原始: dehtpus is poqcpus)
  12. [actual] poqcpus → kebqpus (原始: poqcpus is kebqpus)
  13. [actual] kebqpus → qazjpus (原始: kebqpus is qazjpus)
  14. [actual] qazjpus → ciqdpus (原始: qazjpus is ciqdpus)
  15. [actual] ciqdpus → sumnpus (原始: ciqdpus is sumnpus)
  16. [actual] sumnpus → degfpus (原始: sumnpus is degfpus)
  17. [actual] degfpus → hiqkpus (原始: degfpus is hiqkpus)
  18. [actual] hiqkpus → zuhjpus (原始: hiqkpus is zuhjpus)
  19. [actual] zuhjpus → sumcpus (原始: zuhjpus is sumcpus)
  20. [actual] sumcpus → tudrpus (原始: sumcpus is tudrpus)
  21. [actual] tudrpus → cikspus (原始: tudrpus is cikspus)
  22. [actual] cikspus → tefkpus (原始: cikspus is tefkpus)
  23. [actual] tefkpus → zexspus (原始: tefkpus is zexspus)
  24. [actual] zexspus → colzpus (原始: zexspus is colzpus)
  25. [actual] colzpus → gijxpus (原始: colzpus is gijxpus)
  26. [actual] gijxpus → ludspus (原始: gijxpus is ludspus)
  27. [actual] ludspus → nujvpus (原始: ludspus is nujvpus)
  28. [actual] nujvpus → zeyfpus (原始: nujvpus is zeyfpus)
  29. [actual] zeyfpus → fakfpus (原始: zeyfpus is fakfpus)
  30. [actual] fakfpus → copppus (原始: fakfpus is copppus)
  31. [actual] copppus → puchpus (原始: copppus is puchpus)
  32. [actual] puchpus → vulgpus (原始: puchpus is vulgpus)
  33. [actual] vulgpus → koqwpus (原始: vulgpus is koqwpus)
  34. [actual] koqwpus → butfpus (原始: koqwpus is butfpus)
  35. [actual] butfpus → gumypus (原始: butfpus is gumypus)
  36. [actual] gumypus → mukbpus (原始: gumypus is mukbpus)
  37. [actual] mukbpus → vefcpus (原始: mukbpus is vefcpus)
  38. [actual] vefcpus → mengpus (原始: vefcpus is mengpus)
  39. [actual] mengpus → roydpus (原始: mengpus is roydpus)
  40. [actual] roydpus → ridrpus (原始: roydpus is ridrpus)
  41. [actual] ridrpus → winwpus (原始: ridrpus is winwpus)
  42. [actual] winwpus → babbpus (原始: winwpus is babbpus)
  43. [actual] x → babbpus (原始: x is babbpus)
  44. [actual] x → babbpus (原始: x is babbpus)
  45. [actual] x → babbpus or baccpus or bachpus (原始: x is babbpus or baccpus or bachpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 67
[后处理] 加载LoG图，包含 67 个节点
  LoG节点 0: x is babbpus or baccpus or bachpus (规则: MP, 深度: 1)
  LoG节点 1: x is gijxpus (规则: MP, 深度: 2)
  LoG节点 2: gijxpus is babbpus or baccpus or bachpus (规则: MP, 深度: 2)
  LoG节点 3: x is hiqkpus (规则: MP, 深度: 3)
  LoG节点 4: hiqkpus is gijxpus (规则: MP, 深度: 3)
  LoG节点 5: gijxpus is koqwpus (规则: CE, 深度: 3)
  LoG节点 6: koqwpus is babbpus or baccpus or bachpus (规则: MP, 深度: 3)
  LoG节点 7: x is dehtpus (规则: MP, 深度: 4)
  LoG节点 8: dehtpus is hiqkpus (规则: MP, 深度: 4)
  LoG节点 9: hiqkpus is cikspus (规则: CE, 深度: 4)
  LoG节点 10: cikspus is gijxpus (规则: CE, 深度: 4)
  LoG节点 11: gijxpus is koqwpus and diqrpus (规则: MP, 深度: 4)
  LoG节点 12: koqwpus is ridrpus (规则: MP, 深度: 4)
  LoG节点 13: ridrpus is babbpus or baccpus or bachpus (规则: DI, 深度: 4)
  LoG节点 14: x is gighpus (规则: CE, 深度: 5)
  LoG节点 15: gighpus is dehtpus (规则: CE, 深度: 5)
  LoG节点 16: dehtpus is ciqdpus (规则: CE, 深度: 5)
  LoG节点 17: ciqdpus is hiqkpus (规则: CE, 深度: 5)
  LoG节点 18: hiqkpus is cikspus and gojmpus (规则: MP, 深度: 5)
  LoG节点 19: cikspus is gijxpus and qokxpus (规则: MP, 深度: 5)
  LoG节点 20: gijxpus is fakfpus (规则: MP, 深度: 5)
  LoG节点 21: fakfpus is koqwpus and diqrpus (规则: MP, 深度: 5)
  LoG节点 22: koqwpus is gumypus (规则: CE, 深度: 5)
  LoG节点 23: gumypus is ridrpus (规则: MP, 深度: 5)
  LoG节点 24: ridrpus is baccpus or babbpus (规则: DI, 深度: 5)
  LoG节点 25: x is gighpus and lulppus (规则: MP, 深度: 6)
  LoG节点 26: gighpus is dehtpus and sipzpus (规则: MP, 深度: 6)
  LoG节点 27: dehtpus is ciqdpus and lablpus (规则: MP, 深度: 6)
  LoG节点 28: ciqdpus is hiqkpus and hejjpus (规则: MP, 深度: 6)
  LoG节点 29: hiqkpus is sumcpus (规则: CE, 深度: 6)
  LoG节点 30: sumcpus is cikspus and gojmpus (规则: CI, 深度: 6)
  LoG节点 31: cikspus is colzpus (规则: MP, 深度: 6)
  LoG节点 32: colzpus is gijxpus and qokxpus (规则: CI, 深度: 6)
  LoG节点 33: gijxpus is nujvpus (规则: CE, 深度: 6)
  LoG节点 34: nujvpus is fakfpus (规则: CE, 深度: 6)
  LoG节点 35: fakfpus is puchpus (规则: CE, 深度: 6)
  LoG节点 36: puchpus is koqwpus and diqrpus (规则: CE, 深度: 6)
  LoG节点 37: koqwpus is gumypus and tuxxpus (规则: MP, 深度: 6)
  LoG节点 38: gumypus is mengpus (规则: MP, 深度: 6)
  LoG节点 39: mengpus is ridrpus (规则: CE, 深度: 6)
  LoG节点 40: ridrpus is babbpus (规则: MP, 深度: 6)
  LoG节点 41: x is ticxpus (规则: MP, 深度: 7)
  LoG节点 42: ticxpus is gighpus and lulppus (规则: MP, 深度: 7)
  LoG节点 43: gighpus is najzpus (规则: MP, 深度: 7)
  LoG节点 44: najzpus is dehtpus and sipzpus (规则: MP, 深度: 7)
  LoG节点 45: dehtpus is kebqpus (规则: MP, 深度: 7)
  LoG节点 46: kebqpus is ciqdpus and lablpus (规则: MP, 深度: 7)
  LoG节点 47: ciqdpus is sumnpus (规则: CE, 深度: 7)
  LoG节点 48: sumnpus is hiqkpus and hejjpus (规则: MP, 深度: 7)
  LoG节点 49: hiqkpus is sumcpus and qebkpus (规则: MP, 深度: 7)
  LoG节点 50: sumcpus is cikspus (规则: MP, 深度: 7)
  LoG节点 51: sumcpus is gojmpus (规则: MP, 深度: 7)
  LoG节点 52: cikspus is tefkpus (规则: CE, 深度: 7)
  LoG节点 53: tefkpus is colzpus (规则: MP, 深度: 7)
  LoG节点 54: colzpus is gijxpus (规则: CE, 深度: 7)
  LoG节点 55: colzpus is qokxpus (规则: CE, 深度: 7)
  LoG节点 56: gijxpus is nujvpus and zosdpus (规则: MP, 深度: 7)
  LoG节点 57: nujvpus is fakfpus and puglpus (规则: MP, 深度: 7)
  LoG节点 58: fakfpus is puchpus and duwqpus (规则: MP, 深度: 7)
  LoG节点 59: puchpus is koqwpus and diqrpus and fibppus (规则: MP, 深度: 7)
  LoG节点 60: koqwpus is butfpus (规则: CE, 深度: 7)
  LoG节点 61: butfpus is gumypus and tuxxpus (规则: CI, 深度: 7)
  LoG节点 62: gumypus is vefcpus (规则: MP, 深度: 7)
  LoG节点 63: vefcpus is mengpus (规则: CE, 深度: 7)
  LoG节点 64: mengpus is ridrpus and qaylpus (规则: MP, 深度: 7)
  LoG节点 65: ridrpus is winwpus (规则: CE, 深度: 7)
  LoG节点 66: winwpus is babbpus (规则: CE, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 45
   - 初始条件数: 44
   - LoG图节点数: 67

📋 初始条件列表:
    1. mukbpus is vefcpus
    2. ticxpus is yitvpus
    3. fakfpus is copppus
    4. ludspus is nujvpus and zosdpus
    5. kebqpus is qazjpus
    6. vulgpus is koqwpus and diqrpus and fibppus
    7. puchpus is vulgpus
    8. colzpus is gijxpus and lakjpus
    9. cikspus is tefkpus and gixhpus
   10. ridrpus is winwpus and fuynpus
   11. tudrpus is cikspus
   12. gighpus is ranwpus
   13. najzpus is barhpus
   14. ranwpus is najzpus
   15. tefkpus is zexspus
   16. roydpus is ridrpus and qaylpus
   17. qazjpus is ciqdpus and lablpus
   18. dehtpus is poqcpus
   19. degfpus is hiqkpus and hejjpus
   20. butfpus is gumypus
   21. zexspus is colzpus
   22. gijxpus is ludspus
   23. butfpus is tuxxpus
   24. colzpus is qokxpus and lumqpus
   25. winwpus is babbpus and monnpus
   26. yitvpus is gighpus and lulppus
   27. zuhjpus is sumcpus and qebkpus
   28. zeyfpus is fakfpus and puglpus
   29. sumcpus is tudrpus
   30. ciqdpus is sumnpus and terdpus
   31. dojgpus is ticxpus
   32. tezcpus is gojmpus
   33. vefcpus is mengpus and sorqpus
   34. gumypus is mukbpus
   35. sumnpus is degfpus
   36. copppus is puchpus and duwqpus
   37. barhpus is dehtpus and sipzpus
   38. koqwpus is butfpus and nopypus
   39. sumcpus is tezcpus
   40. poqcpus is kebqpus
   41. x is dojgpus
   42. hiqkpus is zuhjpus
   43. mengpus is roydpus
   44. nujvpus is zeyfpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 44 个前提节点

🔍 开始处理actual节点...

   节点 1: x is dojgpus
      ↻ 重复节点，计数: 2

   节点 2: x is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is dojgpus → dojgpus is babbpus
[后处理] 基于推理轨迹点亮节点，使用了 40 个前提条件:
  - 前提: x is dojgpus
  - 前提: dojgpus is ticxpus
  - 前提: ticxpus is yitvpus
  - 前提: yitvpus is gighpus and lulppus
  - 前提: gighpus is ranwpus
  - 前提: ranwpus is najzpus
  - 前提: najzpus is barhpus
  - 前提: barhpus is dehtpus and sipzpus
  - 前提: dehtpus is poqcpus
  - 前提: poqcpus is kebqpus
  - 前提: kebqpus is qazjpus
  - 前提: qazjpus is ciqdpus and lablpus
  - 前提: ciqdpus is sumnpus and terdpus
  - 前提: sumnpus is degfpus
  - 前提: degfpus is hiqkpus and hejjpus
  - 前提: hiqkpus is zuhjpus
  - 前提: zuhjpus is sumcpus and qebkpus
  - 前提: sumcpus is tudrpus
  - 前提: tudrpus is cikspus
  - 前提: cikspus is tefkpus and gixhpus
  - 前提: tefkpus is zexspus
  - 前提: zexspus is colzpus
  - 前提: colzpus is gijxpus and lakjpus
  - 前提: gijxpus is ludspus
  - 前提: ludspus is nujvpus and zosdpus
  - 前提: nujvpus is zeyfpus
  - 前提: zeyfpus is fakfpus and puglpus
  - 前提: fakfpus is copppus
  - 前提: copppus is puchpus and duwqpus
  - 前提: puchpus is vulgpus
  - 前提: vulgpus is koqwpus and diqrpus and fibppus
  - 前提: koqwpus is butfpus and nopypus
  - 前提: butfpus is gumypus
  - 前提: gumypus is mukbpus
  - 前提: mukbpus is vefcpus
  - 前提: vefcpus is mengpus and sorqpus
  - 前提: mengpus is roydpus
  - 前提: roydpus is ridrpus and qaylpus
  - 前提: ridrpus is winwpus and fuynpus
  - 前提: winwpus is babbpus and monnpus
  ✓ 点亮LoG节点: x is babbpus or baccpus or bachpus
[子树点亮]     └─ 点亮依赖节点: x is gijxpus (深度2)
[子树点亮]     └─ 点亮依赖节点: gijxpus is babbpus or baccpus or bachpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is hiqkpus (深度3)
[子树点亮]     └─ 点亮依赖节点: hiqkpus is gijxpus (深度3)
[子树点亮]     └─ 点亮依赖节点: gijxpus is koqwpus (深度3)
[子树点亮]     └─ 点亮依赖节点: koqwpus is babbpus or baccpus or bachpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is dehtpus (深度4)
[子树点亮]     └─ 点亮依赖节点: dehtpus is hiqkpus (深度4)
[子树点亮]     └─ 点亮依赖节点: hiqkpus is cikspus (深度4)
[子树点亮]     └─ 点亮依赖节点: cikspus is gijxpus (深度4)
[子树点亮]     └─ 点亮依赖节点: gijxpus is koqwpus and diqrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: koqwpus is ridrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: ridrpus is babbpus or baccpus or bachpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is gighpus (深度5)
[子树点亮]     └─ 点亮依赖节点: gighpus is dehtpus (深度5)
[子树点亮]     └─ 点亮依赖节点: dehtpus is ciqdpus (深度5)
[子树点亮]     └─ 点亮依赖节点: ciqdpus is hiqkpus (深度5)
[子树点亮]     └─ 点亮依赖节点: hiqkpus is cikspus and gojmpus (深度5)
[子树点亮]     └─ 点亮依赖节点: cikspus is gijxpus and qokxpus (深度5)
[子树点亮]     └─ 点亮依赖节点: gijxpus is fakfpus (深度5)
[子树点亮]     └─ 点亮依赖节点: fakfpus is koqwpus and diqrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: koqwpus is gumypus (深度5)
[子树点亮]     └─ 点亮依赖节点: gumypus is ridrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: ridrpus is baccpus or babbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is gighpus and lulppus (深度6)
[子树点亮]     └─ 点亮依赖节点: gighpus is dehtpus and sipzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: dehtpus is ciqdpus and lablpus (深度6)
[子树点亮]     └─ 点亮依赖节点: ciqdpus is hiqkpus and hejjpus (深度6)
[子树点亮]     └─ 点亮依赖节点: hiqkpus is sumcpus (深度6)
[子树点亮]     └─ 点亮依赖节点: sumcpus is cikspus and gojmpus (深度6)
[子树点亮]     └─ 点亮依赖节点: cikspus is colzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: colzpus is gijxpus and qokxpus (深度6)
[子树点亮]     └─ 点亮依赖节点: gijxpus is nujvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: nujvpus is fakfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: fakfpus is puchpus (深度6)
[子树点亮]     └─ 点亮依赖节点: puchpus is koqwpus and diqrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: koqwpus is gumypus and tuxxpus (深度6)
[子树点亮]     └─ 点亮依赖节点: gumypus is mengpus (深度6)
[子树点亮]     └─ 点亮依赖节点: mengpus is ridrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: ridrpus is babbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is ticxpus (深度7)
[子树点亮]     └─ 点亮依赖节点: ticxpus is gighpus and lulppus (深度7)
[子树点亮]     └─ 点亮依赖节点: gighpus is najzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: najzpus is dehtpus and sipzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: dehtpus is kebqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kebqpus is ciqdpus and lablpus (深度7)
[子树点亮]     └─ 点亮依赖节点: ciqdpus is sumnpus (深度7)
[子树点亮]     └─ 点亮依赖节点: sumnpus is hiqkpus and hejjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: hiqkpus is sumcpus and qebkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: sumcpus is cikspus (深度7)
[子树点亮]     └─ 点亮依赖节点: sumcpus is gojmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cikspus is tefkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: tefkpus is colzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: colzpus is gijxpus (深度7)
[子树点亮]     └─ 点亮依赖节点: colzpus is qokxpus (深度7)
[子树点亮]     └─ 点亮依赖节点: gijxpus is nujvpus and zosdpus (深度7)
[子树点亮]     └─ 点亮依赖节点: nujvpus is fakfpus and puglpus (深度7)
[子树点亮]     └─ 点亮依赖节点: fakfpus is puchpus and duwqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: puchpus is koqwpus and diqrpus and fibppus (深度7)
[子树点亮]     └─ 点亮依赖节点: koqwpus is butfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: butfpus is gumypus and tuxxpus (深度7)
[子树点亮]     └─ 点亮依赖节点: gumypus is vefcpus (深度7)
[子树点亮]     └─ 点亮依赖节点: vefcpus is mengpus (深度7)
[子树点亮]     └─ 点亮依赖节点: mengpus is ridrpus and qaylpus (深度7)
[子树点亮]     └─ 点亮依赖节点: ridrpus is winwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: winwpus is babbpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 66 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 3: x is dojgpus
      ↻ 重复节点，计数: 3

   节点 4: dojgpus is ticxpus
      ↻ 重复节点，计数: 2

   节点 5: ticxpus is yitvpus
      ↻ 重复节点，计数: 2

   节点 6: yitvpus is gighpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yitvpus is gighpus and lulppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yitvpus is gighpus and lulppus

   节点 7: gighpus is ranwpus
      ↻ 重复节点，计数: 2

   节点 8: ranwpus is najzpus
      ↻ 重复节点，计数: 2

   节点 9: najzpus is barhpus
      ↻ 重复节点，计数: 2

   节点 10: barhpus is dehtpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: barhpus is dehtpus and sipzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: barhpus is dehtpus and sipzpus

   节点 11: dehtpus is poqcpus
      ↻ 重复节点，计数: 2

   节点 12: poqcpus is kebqpus
      ↻ 重复节点，计数: 2

   节点 13: kebqpus is qazjpus
      ↻ 重复节点，计数: 2

   节点 14: qazjpus is ciqdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qazjpus is ciqdpus and lablpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qazjpus is ciqdpus and lablpus

   节点 15: ciqdpus is sumnpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 16: sumnpus is degfpus
      ↻ 重复节点，计数: 2

   节点 17: degfpus is hiqkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: degfpus is hiqkpus and hejjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: degfpus is hiqkpus and hejjpus

   节点 18: hiqkpus is zuhjpus
      ↻ 重复节点，计数: 2

   节点 19: zuhjpus is sumcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zuhjpus is sumcpus and qebkpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zuhjpus is sumcpus and qebkpus

   节点 20: sumcpus is tudrpus
      ↻ 重复节点，计数: 2

   节点 21: tudrpus is cikspus
      ↻ 重复节点，计数: 2

   节点 22: cikspus is tefkpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 23: tefkpus is zexspus
      ↻ 重复节点，计数: 2

   节点 24: zexspus is colzpus
      ↻ 重复节点，计数: 2

   节点 25: colzpus is gijxpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 26: gijxpus is ludspus
      ↻ 重复节点，计数: 2

   节点 27: ludspus is nujvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: ludspus is nujvpus and zosdpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: ludspus is nujvpus and zosdpus

   节点 28: nujvpus is zeyfpus
      ↻ 重复节点，计数: 2

   节点 29: zeyfpus is fakfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zeyfpus is fakfpus and puglpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zeyfpus is fakfpus and puglpus

   节点 30: fakfpus is copppus
      ↻ 重复节点，计数: 2

   节点 31: copppus is puchpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: copppus is puchpus and duwqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: copppus is puchpus and duwqpus

   节点 32: puchpus is vulgpus
      ↻ 重复节点，计数: 2

   节点 33: vulgpus is koqwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: vulgpus is koqwpus and diqrpus and fibppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: vulgpus is koqwpus and diqrpus and fibppus

   节点 34: koqwpus is butfpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 35: butfpus is gumypus
      ↻ 重复节点，计数: 2

   节点 36: gumypus is mukbpus
      ↻ 重复节点，计数: 2

   节点 37: mukbpus is vefcpus
      ↻ 重复节点，计数: 2

   节点 38: vefcpus is mengpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 39: mengpus is roydpus
      ↻ 重复节点，计数: 2

   节点 40: roydpus is ridrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: roydpus is ridrpus and qaylpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: roydpus is ridrpus and qaylpus

   节点 41: ridrpus is winwpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 42: winwpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 43: x is babbpus
      ↻ 重复节点，计数: 2

   节点 44: x is babbpus
      ↻ 重复节点，计数: 3

   节点 45: x is babbpus or baccpus or bachpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 45
   - 新增节点: 19
   - 更新已存在节点: 26
   - 点亮的LoG节点: 67

🎯 推理质量统计:
   - 完美推理: 19 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 67节点, 44前提, 复杂度1-44

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 63
   - 前提节点: 44
   - 推理节点: 19
   - 幻觉节点: 0
   - 点亮LoG节点: 67

✅ 推理节点详情:
   🟢 x is babbpus (出现3次, 质量:perfect)
   🟢 yitvpus is gighpus (出现1次, 质量:perfect)
   🟢 barhpus is dehtpus (出现1次, 质量:perfect)
   🟢 qazjpus is ciqdpus (出现1次, 质量:perfect)
   🟢 ciqdpus is sumnpus (出现1次, 质量:perfect)
   🟢 degfpus is hiqkpus (出现1次, 质量:perfect)
   🟢 zuhjpus is sumcpus (出现1次, 质量:perfect)
   🟢 cikspus is tefkpus (出现1次, 质量:perfect)
   🟢 colzpus is gijxpus (出现1次, 质量:perfect)
   🟢 ludspus is nujvpus (出现1次, 质量:perfect)
   🟢 zeyfpus is fakfpus (出现1次, 质量:perfect)
   🟢 copppus is puchpus (出现1次, 质量:perfect)
   🟢 vulgpus is koqwpus (出现1次, 质量:perfect)
   🟢 koqwpus is butfpus (出现1次, 质量:perfect)
   🟢 vefcpus is mengpus (出现1次, 质量:perfect)
   🟢 roydpus is ridrpus (出现1次, 质量:perfect)
   🟢 ridrpus is winwpus (出现1次, 质量:perfect)
   🟢 winwpus is babbpus (出现1次, 质量:perfect)
   🟢 x is babbpus or baccpus or bachpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - gijxpus is nujvpus
   - cikspus is tefkpus
   - ciqdpus is hiqkpus and hejjpus
   - kebqpus is ciqdpus and lablpus
   - gumypus is ridrpus
   - dehtpus is kebqpus
   - gijxpus is koqwpus and diqrpus
   - colzpus is gijxpus
   - puchpus is koqwpus and diqrpus and fibppus
   - cikspus is colzpus
   - sumcpus is gojmpus
   - vefcpus is mengpus
   - gighpus is dehtpus and sipzpus
   - najzpus is dehtpus and sipzpus
   - sumnpus is hiqkpus and hejjpus
   - ciqdpus is hiqkpus
   - ridrpus is baccpus or babbpus
   - fakfpus is puchpus and duwqpus
   - gijxpus is babbpus or baccpus or bachpus
   - winwpus is babbpus
   - ridrpus is winwpus
   - x is babbpus or baccpus or bachpus
   - ticxpus is gighpus and lulppus
   - colzpus is gijxpus and qokxpus
   - mengpus is ridrpus
   - hiqkpus is cikspus
   - x is ticxpus
   - nujvpus is fakfpus and puglpus
   - gumypus is vefcpus
   - gighpus is dehtpus
   - dehtpus is hiqkpus
   - koqwpus is babbpus or baccpus or bachpus
   - cikspus is gijxpus
   - hiqkpus is cikspus and gojmpus
   - hiqkpus is sumcpus and qebkpus
   - gijxpus is nujvpus and zosdpus
   - fakfpus is koqwpus and diqrpus
   - tefkpus is colzpus
   - hiqkpus is gijxpus
   - puchpus is koqwpus and diqrpus
   - koqwpus is gumypus and tuxxpus
   - x is gijxpus
   - sumcpus is cikspus
   - dehtpus is ciqdpus and lablpus
   - gijxpus is fakfpus
   - x is dehtpus
   - sumcpus is cikspus and gojmpus
   - gighpus is najzpus
   - cikspus is gijxpus and qokxpus
   - fakfpus is puchpus
   - butfpus is gumypus and tuxxpus
   - gijxpus is koqwpus
   - colzpus is qokxpus
   - koqwpus is ridrpus
   - koqwpus is butfpus
   - ridrpus is babbpus or baccpus or bachpus
   - mengpus is ridrpus and qaylpus
   - gumypus is mengpus
   - x is gighpus
   - x is gighpus and lulppus
   - nujvpus is fakfpus
   - ciqdpus is sumnpus
   - dehtpus is ciqdpus
   - x is hiqkpus
   - hiqkpus is sumcpus
   - ridrpus is babbpus
   - koqwpus is gumypus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus or baccpus or bachpus (第7层)
   节点Coverage: 67/67 = 100.00%
   前提条件Coverage: 23/44 = 52.27%
   各推理层点亮比例:
     第1层: 26/26 = 100.00%
     第2层: 16/16 = 100.00%
     第3层: 11/11 = 100.00%
     第4层: 7/7 = 100.00%
     第5层: 4/4 = 100.00%
     第6层: 2/2 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/19 = 0.00%
   可推导节点: 19/19
   Strict Error Rate: 0/19 = 0.00%
   严格有效节点: 19/19

   详细分析:
     完美推理: 19 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 9/50
================================================================================
记录索引: 8
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_8.json
✅ 使用缓存结果:
   - 句子数: 8
   - 提取的语句数: 32
   - 初始条件数: 27

=== Statement提取完成 ===
总句子数: 8
成功提取: 8
失败提取: 0
总statements数: 32

=== 开始清洗Statement格式 ===
原始statements数: 32
清洗后statements数: 32
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 32
标准化后节点数: 32
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → qosppus (原始: x is qosppus)
  2. [actual] x → babbpus (原始: x is babbpus)
  3. [actual] x → qosppus (原始: x is qosppus)
  4. [actual] qosppus → jogdpus (原始: qosppus is jogdpus)
  5. [actual] jogdpus → gokwpus (原始: jogdpus is gokwpus)
  6. [actual] gokwpus → mobbpus (原始: gokwpus is mobbpus)
  7. [actual] mobbpus → cirjpus (原始: mobbpus is cirjpus)
  8. [actual] cirjpus → zunbpus (原始: cirjpus is zunbpus)
  9. [actual] zunbpus → meqhpus (原始: zunbpus is meqhpus)
  10. [actual] meqhpus → tuqfpus (原始: meqhpus is tuqfpus)
  11. [actual] tuqfpus → nukdpus (原始: tuqfpus is nukdpus)
  12. [actual] nukdpus → poxdpus (原始: nukdpus is poxdpus)
  13. [actual] poxdpus → fejfpus (原始: poxdpus is fejfpus)
  14. [actual] fejfpus → cinwpus (原始: fejfpus is cinwpus)
  15. [actual] cinwpus → payppus (原始: cinwpus is payppus)
  16. [actual] payppus → tiynpus (原始: payppus is tiynpus)
  17. [actual] tiynpus → zuwhpus (原始: tiynpus is zuwhpus)
  18. [actual] zuwhpus → lojmpus (原始: zuwhpus is lojmpus)
  19. [actual] lojmpus → viyrpus (原始: lojmpus is viyrpus)
  20. [actual] viyrpus → zatrpus (原始: viyrpus is zatrpus)
  21. [actual] zatrpus → kugrpus (原始: zatrpus is kugrpus)
  22. [actual] kugrpus → vapgpus (原始: kugrpus is vapgpus)
  23. [actual] vapgpus → loqzpus (原始: vapgpus is loqzpus)
  24. [actual] loqzpus → huknpus (原始: loqzpus is huknpus)
  25. [actual] huknpus → nibtpus (原始: huknpus is nibtpus)
  26. [actual] nibtpus → delppus (原始: nibtpus is delppus)
  27. [actual] delppus → guhvpus (原始: delppus is guhvpus)
  28. [actual] guhvpus → kevxpus (原始: guhvpus is kevxpus)
  29. [actual] kevxpus → babbpus (原始: kevxpus is babbpus)
  30. [actual] x → babbpus (原始: x is babbpus)
  31. [actual] x → babbpus or baccpus (原始: x is babbpus or baccpus)
  32. [actual] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 41
[后处理] 加载LoG图，包含 41 个节点
  LoG节点 0: x is babbpus or baccpus (规则: DI, 深度: 1)
  LoG节点 1: x is babbpus (规则: MP, 深度: 2)
  LoG节点 2: x is poxdpus (规则: MP, 深度: 3)
  LoG节点 3: poxdpus is babbpus (规则: MP, 深度: 3)
  LoG节点 4: x is mobbpus (规则: CE, 深度: 4)
  LoG节点 5: mobbpus is poxdpus (规则: MP, 深度: 4)
  LoG节点 6: poxdpus is zatrpus (规则: CE, 深度: 4)
  LoG节点 7: zatrpus is babbpus (规则: MP, 深度: 4)
  LoG节点 8: x is mobbpus and kugmpus (规则: MP, 深度: 5)
  LoG节点 9: mobbpus is zunbpus (规则: CE, 深度: 5)
  LoG节点 10: zunbpus is poxdpus (规则: MP, 深度: 5)
  LoG节点 11: poxdpus is zatrpus and teycpus (规则: MP, 深度: 5)
  LoG节点 12: zatrpus is nibtpus (规则: MP, 深度: 5)
  LoG节点 13: nibtpus is babbpus (规则: MP, 深度: 5)
  LoG节点 14: x is jogdpus (规则: CE, 深度: 6)
  LoG节点 15: jogdpus is mobbpus and kugmpus (规则: CE, 深度: 6)
  LoG节点 16: mobbpus is zunbpus and yuyhpus (规则: MP, 深度: 6)
  LoG节点 17: zunbpus is tuqfpus (规则: CE, 深度: 6)
  LoG节点 18: tuqfpus is poxdpus (规则: CE, 深度: 6)
  LoG节点 19: poxdpus is tiynpus (规则: MP, 深度: 6)
  LoG节点 20: tiynpus is zatrpus and teycpus (规则: MP, 深度: 6)
  LoG节点 21: zatrpus is vapgpus (规则: CE, 深度: 6)
  LoG节点 22: vapgpus is nibtpus (规则: MP, 深度: 6)
  LoG节点 23: nibtpus is guhvpus (规则: MP, 深度: 6)
  LoG节点 24: guhvpus is babbpus (规则: CE, 深度: 6)
  LoG节点 25: x is jogdpus and yajhpus (规则: MP, 深度: 7)
  LoG节点 26: jogdpus is mobbpus and kugmpus and migbpus (规则: MP, 深度: 7)
  LoG节点 27: mobbpus is cirjpus (规则: CE, 深度: 7)
  LoG节点 28: cirjpus is zunbpus and yuyhpus (规则: CE, 深度: 7)
  LoG节点 29: zunbpus is tuqfpus and hantpus (规则: MP, 深度: 7)
  LoG节点 30: tuqfpus is poxdpus and kiynpus (规则: MP, 深度: 7)
  LoG节点 31: poxdpus is cinwpus (规则: MP, 深度: 7)
  LoG节点 32: cinwpus is tiynpus (规则: MP, 深度: 7)
  LoG节点 33: tiynpus is lojmpus (规则: MP, 深度: 7)
  LoG节点 34: lojmpus is zatrpus and teycpus (规则: MP, 深度: 7)
  LoG节点 35: zatrpus is vapgpus and liddpus (规则: MP, 深度: 7)
  LoG节点 36: vapgpus is huknpus (规则: MP, 深度: 7)
  LoG节点 37: huknpus is nibtpus (规则: CE, 深度: 7)
  LoG节点 38: nibtpus is delppus (规则: CE, 深度: 7)
  LoG节点 39: delppus is guhvpus (规则: CE, 深度: 7)
  LoG节点 40: guhvpus is babbpus and cixppus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 32
   - 初始条件数: 27
   - LoG图节点数: 41

📋 初始条件列表:
    1. lojmpus is viyrpus
    2. guhvpus is kevxpus
    3. poxdpus is fejfpus
    4. huknpus is nibtpus and poygpus
    5. tiynpus is zuwhpus
    6. fejfpus is cinwpus
    7. payppus is tiynpus
    8. delppus is guhvpus and mexspus
    9. meqhpus is tuqfpus and hantpus
   10. vapgpus is loqzpus
   11. nibtpus is delppus and jehbpus
   12. viyrpus is zatrpus and teycpus
   13. tuqfpus is nukdpus
   14. zunbpus is meqhpus
   15. qosppus is jogdpus and yajhpus
   16. cinwpus is payppus
   17. kugrpus is vapgpus and liddpus
   18. cirjpus is zunbpus and yuyhpus and ciphpus
   19. kevxpus is babbpus and cixppus
   20. loqzpus is huknpus
   21. jogdpus is gokwpus
   22. zuwhpus is lojmpus
   23. nukdpus is poxdpus and kiynpus
   24. zatrpus is kugrpus
   25. gokwpus is mobbpus and kugmpus and migbpus
   26. x is qosppus
   27. mobbpus is cirjpus and cosxpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 27 个前提节点

🔍 开始处理actual节点...

   节点 1: x is qosppus
      ↻ 重复节点，计数: 2

   节点 2: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is poxdpus (深度3)
[子树点亮]     └─ 点亮依赖节点: poxdpus is babbpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is mobbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: mobbpus is poxdpus (深度4)
[子树点亮]     └─ 点亮依赖节点: poxdpus is zatrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: zatrpus is babbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is mobbpus and kugmpus (深度5)
[子树点亮]     └─ 点亮依赖节点: mobbpus is zunbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zunbpus is poxdpus (深度5)
[子树点亮]     └─ 点亮依赖节点: poxdpus is zatrpus and teycpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zatrpus is nibtpus (深度5)
[子树点亮]     └─ 点亮依赖节点: nibtpus is babbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is jogdpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jogdpus is mobbpus and kugmpus (深度6)
[子树点亮]     └─ 点亮依赖节点: mobbpus is zunbpus and yuyhpus (深度6)
[子树点亮]     └─ 点亮依赖节点: zunbpus is tuqfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: tuqfpus is poxdpus (深度6)
[子树点亮]     └─ 点亮依赖节点: poxdpus is tiynpus (深度6)
[子树点亮]     └─ 点亮依赖节点: tiynpus is zatrpus and teycpus (深度6)
[子树点亮]     └─ 点亮依赖节点: zatrpus is vapgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: vapgpus is nibtpus (深度6)
[子树点亮]     └─ 点亮依赖节点: nibtpus is guhvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: guhvpus is babbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is jogdpus and yajhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jogdpus is mobbpus and kugmpus and migbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: mobbpus is cirjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cirjpus is zunbpus and yuyhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: zunbpus is tuqfpus and hantpus (深度7)
[子树点亮]     └─ 点亮依赖节点: tuqfpus is poxdpus and kiynpus (深度7)
[子树点亮]     └─ 点亮依赖节点: poxdpus is cinwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cinwpus is tiynpus (深度7)
[子树点亮]     └─ 点亮依赖节点: tiynpus is lojmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: lojmpus is zatrpus and teycpus (深度7)
[子树点亮]     └─ 点亮依赖节点: zatrpus is vapgpus and liddpus (深度7)
[子树点亮]     └─ 点亮依赖节点: vapgpus is huknpus (深度7)
[子树点亮]     └─ 点亮依赖节点: huknpus is nibtpus (深度7)
[子树点亮]     └─ 点亮依赖节点: nibtpus is delppus (深度7)
[子树点亮]     └─ 点亮依赖节点: delppus is guhvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: guhvpus is babbpus and cixppus (深度7)
[后处理]   └─ 自动点亮依赖子树: 39 个节点
      ✅ 验证成功 + LoG匹配

   节点 3: x is qosppus
      ↻ 重复节点，计数: 3

   节点 4: qosppus is jogdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qosppus is jogdpus and yajhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qosppus is jogdpus and yajhpus

   节点 5: jogdpus is gokwpus
      ↻ 重复节点，计数: 2

   节点 6: gokwpus is mobbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gokwpus is mobbpus and kugmpus and migbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gokwpus is mobbpus and kugmpus and migbpus

   节点 7: mobbpus is cirjpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 8: cirjpus is zunbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: cirjpus is zunbpus and yuyhpus and ciphpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: cirjpus is zunbpus and yuyhpus and ciphpus

   节点 9: zunbpus is meqhpus
      ↻ 重复节点，计数: 2

   节点 10: meqhpus is tuqfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: meqhpus is tuqfpus and hantpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: meqhpus is tuqfpus and hantpus

   节点 11: tuqfpus is nukdpus
      ↻ 重复节点，计数: 2

   节点 12: nukdpus is poxdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: nukdpus is poxdpus and kiynpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: nukdpus is poxdpus and kiynpus

   节点 13: poxdpus is fejfpus
      ↻ 重复节点，计数: 2

   节点 14: fejfpus is cinwpus
      ↻ 重复节点，计数: 2

   节点 15: cinwpus is payppus
      ↻ 重复节点，计数: 2

   节点 16: payppus is tiynpus
      ↻ 重复节点，计数: 2

   节点 17: tiynpus is zuwhpus
      ↻ 重复节点，计数: 2

   节点 18: zuwhpus is lojmpus
      ↻ 重复节点，计数: 2

   节点 19: lojmpus is viyrpus
      ↻ 重复节点，计数: 2

   节点 20: viyrpus is zatrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: viyrpus is zatrpus and teycpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: viyrpus is zatrpus and teycpus

   节点 21: zatrpus is kugrpus
      ↻ 重复节点，计数: 2

   节点 22: kugrpus is vapgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kugrpus is vapgpus and liddpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kugrpus is vapgpus and liddpus

   节点 23: vapgpus is loqzpus
      ↻ 重复节点，计数: 2

   节点 24: loqzpus is huknpus
      ↻ 重复节点，计数: 2

   节点 25: huknpus is nibtpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 26: nibtpus is delppus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 27: delppus is guhvpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 28: guhvpus is kevxpus
      ↻ 重复节点，计数: 2

   节点 29: kevxpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kevxpus is babbpus and cixppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kevxpus is babbpus and cixppus

   节点 30: x is babbpus
      ↻ 重复节点，计数: 2

   节点 31: x is babbpus or baccpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus or baccpus
      ✅ 验证成功 + LoG匹配

   节点 32: x is babbpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 32
   - 新增节点: 14
   - 更新已存在节点: 18
   - 点亮的LoG节点: 41

🎯 推理质量统计:
   - 完美推理: 14 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 41节点, 27前提, 复杂度1-27

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 41
   - 前提节点: 27
   - 推理节点: 14
   - 幻觉节点: 0
   - 点亮LoG节点: 41

✅ 推理节点详情:
   🟢 x is babbpus (出现3次, 质量:perfect)
   🟢 qosppus is jogdpus (出现1次, 质量:perfect)
   🟢 gokwpus is mobbpus (出现1次, 质量:perfect)
   🟢 mobbpus is cirjpus (出现1次, 质量:perfect)
   🟢 cirjpus is zunbpus (出现1次, 质量:perfect)
   🟢 meqhpus is tuqfpus (出现1次, 质量:perfect)
   🟢 nukdpus is poxdpus (出现1次, 质量:perfect)
   🟢 viyrpus is zatrpus (出现1次, 质量:perfect)
   🟢 kugrpus is vapgpus (出现1次, 质量:perfect)
   🟢 huknpus is nibtpus (出现1次, 质量:perfect)
   🟢 nibtpus is delppus (出现1次, 质量:perfect)
   🟢 delppus is guhvpus (出现1次, 质量:perfect)
   🟢 kevxpus is babbpus (出现1次, 质量:perfect)
   🟢 x is babbpus or baccpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - mobbpus is zunbpus and yuyhpus
   - guhvpus is babbpus and cixppus
   - x is poxdpus
   - x is jogdpus and yajhpus
   - zunbpus is tuqfpus and hantpus
   - zunbpus is tuqfpus
   - nibtpus is babbpus
   - poxdpus is tiynpus
   - zatrpus is vapgpus and liddpus
   - nibtpus is delppus
   - x is jogdpus
   - jogdpus is mobbpus and kugmpus and migbpus
   - zatrpus is babbpus
   - delppus is guhvpus
   - x is mobbpus and kugmpus
   - cinwpus is tiynpus
   - poxdpus is babbpus
   - tuqfpus is poxdpus
   - poxdpus is zatrpus
   - vapgpus is nibtpus
   - tuqfpus is poxdpus and kiynpus
   - poxdpus is zatrpus and teycpus
   - tiynpus is lojmpus
   - guhvpus is babbpus
   - vapgpus is huknpus
   - huknpus is nibtpus
   - tiynpus is zatrpus and teycpus
   - x is mobbpus
   - cirjpus is zunbpus and yuyhpus
   - mobbpus is cirjpus
   - mobbpus is zunbpus
   - jogdpus is mobbpus and kugmpus
   - zunbpus is poxdpus
   - zatrpus is vapgpus
   - zatrpus is nibtpus
   - mobbpus is poxdpus
   - x is babbpus or baccpus
   - nibtpus is guhvpus
   - x is babbpus
   - poxdpus is cinwpus
   - lojmpus is zatrpus and teycpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus or baccpus (第7层)
   节点Coverage: 41/41 = 100.00%
   前提条件Coverage: 15/27 = 55.56%
   各推理层点亮比例:
     第1层: 16/16 = 100.00%
     第2层: 11/11 = 100.00%
     第3层: 6/6 = 100.00%
     第4层: 4/4 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/14 = 0.00%
   可推导节点: 14/14
   Strict Error Rate: 0/14 = 0.00%
   严格有效节点: 14/14

   详细分析:
     完美推理: 14 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 10/50
================================================================================
记录索引: 9
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_9.json
✅ 使用缓存结果:
   - 句子数: 4
   - 提取的语句数: 8
   - 初始条件数: 23

=== Statement提取完成 ===
总句子数: 4
成功提取: 4
失败提取: 0
总statements数: 8

=== 开始清洗Statement格式 ===
原始statements数: 8
清洗后statements数: 8
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 8
标准化后节点数: 8
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → veyhpus (原始: x is veyhpus)
  2. [actual] x → jipqpus (原始: x is jipqpus)
  3. [actual] jipqpus → babbpus (原始: jipqpus is babbpus)
  4. [actual] jipqpus → baccpus (原始: jipqpus is baccpus)
  5. [actual] jipqpus → bachpus (原始: jipqpus is bachpus)
  6. [actual] x → babbpus (原始: x is babbpus)
  7. [actual] x → baccpus (原始: x is baccpus)
  8. [actual] x → bachpus (原始: x is bachpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 36
[后处理] 加载LoG图，包含 36 个节点
  LoG节点 0: x is babbpus and baccpus and bachpus (规则: CE, 深度: 1)
  LoG节点 1: x is babbpus and baccpus and bachpus and loncpus (规则: MP, 深度: 2)
  LoG节点 2: x is jipqpus (规则: MP, 深度: 3)
  LoG节点 3: jipqpus is babbpus and baccpus and bachpus and loncpus (规则: CI, 深度: 3)
  LoG节点 4: x is cumfpus (规则: CE, 深度: 4)
  LoG节点 5: cumfpus is jipqpus (规则: CE, 深度: 4)
  LoG节点 6: jipqpus is babbpus and baccpus and bachpus (规则: CI, 深度: 4)
  LoG节点 7: jipqpus is loncpus (规则: CE, 深度: 4)
  LoG节点 8: x is cumfpus and fitgpus (规则: MP, 深度: 5)
  LoG节点 9: cumfpus is jipqpus and megtpus (规则: MP, 深度: 5)
  LoG节点 10: jipqpus is babbpus (规则: CE, 深度: 5)
  LoG节点 11: jipqpus is baccpus (规则: CE, 深度: 5)
  LoG节点 12: jipqpus is bachpus (规则: MP, 深度: 5)
  LoG节点 13: jipqpus is loncpus and vawxpus (规则: MP, 深度: 5)
  LoG节点 14: x is gagdpus (规则: CE, 深度: 6)
  LoG节点 15: gagdpus is cumfpus and fitgpus (规则: CE, 深度: 6)
  LoG节点 16: cumfpus is ziczpus (规则: CE, 深度: 6)
  LoG节点 17: ziczpus is jipqpus and megtpus (规则: CE, 深度: 6)
  LoG节点 18: jipqpus is babbpus and jaqjpus (规则: MP, 深度: 6)
  LoG节点 19: jipqpus is baccpus and romcpus (规则: MP, 深度: 6)
  LoG节点 20: jipqpus is resxpus (规则: CE, 深度: 6)
  LoG节点 21: resxpus is bachpus (规则: CE, 深度: 6)
  LoG节点 22: jipqpus is repjpus (规则: CE, 深度: 6)
  LoG节点 23: repjpus is loncpus and vawxpus (规则: CE, 深度: 6)
  LoG节点 24: x is gagdpus and vilgpus (规则: MP, 深度: 7)
  LoG节点 25: gagdpus is cumfpus and fitgpus and palfpus (规则: MP, 深度: 7)
  LoG节点 26: cumfpus is ziczpus and pogtpus (规则: MP, 深度: 7)
  LoG节点 27: ziczpus is jipqpus and megtpus and mefzpus (规则: MP, 深度: 7)
  LoG节点 28: jipqpus is vimzpus (规则: MP, 深度: 7)
  LoG节点 29: vimzpus is babbpus and jaqjpus (规则: CI, 深度: 7)
  LoG节点 30: jipqpus is sajvpus (规则: CE, 深度: 7)
  LoG节点 31: sajvpus is baccpus and romcpus (规则: MP, 深度: 7)
  LoG节点 32: jipqpus is resxpus and moxwpus (规则: MP, 深度: 7)
  LoG节点 33: resxpus is bachpus and demkpus (规则: MP, 深度: 7)
  LoG节点 34: jipqpus is repjpus and metppus (规则: MP, 深度: 7)
  LoG节点 35: repjpus is loncpus and vawxpus and kemtpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 8
   - 初始条件数: 23
   - LoG图节点数: 36

📋 初始条件列表:
    1. veyhpus is gagdpus and vilgpus
    2. vimzpus is jaqjpus
    3. resxpus is gixqpus
    4. tahkpus is baccpus and romcpus
    5. gegwpus is resxpus and moxwpus
    6. gagdpus is venzpus
    7. papmpus is vimzpus
    8. venzpus is cumfpus and fitgpus and palfpus
    9. jipqpus is papmpus
   10. vimzpus is babbpus
   11. ziczpus is nahnpus
   12. jipqpus is sajvpus and fejrpus
   13. zenppus is repjpus and metppus
   14. x is veyhpus
   15. gixqpus is bachpus and demkpus
   16. cumfpus is nachpus
   17. jipqpus is gegwpus
   18. sajvpus is tahkpus
   19. nahnpus is jipqpus and megtpus and mefzpus
   20. nachpus is ziczpus and pogtpus
   21. jipqpus is zenppus
   22. repjpus is rizkpus
   23. rizkpus is loncpus and vawxpus and kemtpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 23 个前提节点

🔍 开始处理actual节点...

   节点 1: x is veyhpus
      ↻ 重复节点，计数: 2

   节点 2: x is jipqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is jipqpus
[子树点亮]     └─ 点亮依赖节点: x is cumfpus (深度4)
[子树点亮]     └─ 点亮依赖节点: cumfpus is jipqpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is cumfpus and fitgpus (深度5)
[子树点亮]     └─ 点亮依赖节点: cumfpus is jipqpus and megtpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is gagdpus (深度6)
[子树点亮]     └─ 点亮依赖节点: gagdpus is cumfpus and fitgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: cumfpus is ziczpus (深度6)
[子树点亮]     └─ 点亮依赖节点: ziczpus is jipqpus and megtpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is gagdpus and vilgpus (深度7)
[子树点亮]     └─ 点亮依赖节点: gagdpus is cumfpus and fitgpus and palfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cumfpus is ziczpus and pogtpus (深度7)
[子树点亮]     └─ 点亮依赖节点: ziczpus is jipqpus and megtpus and mefzpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 12 个节点
      ✅ 验证成功 + LoG匹配

   节点 3: jipqpus is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: jipqpus is babbpus
[子树点亮]     └─ 点亮依赖节点: jipqpus is babbpus and jaqjpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jipqpus is vimzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: vimzpus is babbpus and jaqjpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 4: jipqpus is baccpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: jipqpus is baccpus
[子树点亮]     └─ 点亮依赖节点: jipqpus is baccpus and romcpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jipqpus is sajvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: sajvpus is baccpus and romcpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 5: jipqpus is bachpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: jipqpus is bachpus
[子树点亮]     └─ 点亮依赖节点: jipqpus is resxpus (深度6)
[子树点亮]     └─ 点亮依赖节点: resxpus is bachpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jipqpus is resxpus and moxwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: resxpus is bachpus and demkpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
      ✅ 验证成功 + LoG匹配

   节点 6: x is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is veyhpus → veyhpus is babbpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is veyhpus
  - 前提: veyhpus is gagdpus and vilgpus
  - 前提: gagdpus is venzpus
  - 前提: venzpus is cumfpus and fitgpus and palfpus
  - 前提: cumfpus is nachpus
  - 前提: nachpus is ziczpus and pogtpus
  - 前提: ziczpus is nahnpus
  - 前提: nahnpus is jipqpus and megtpus and mefzpus
  - 前提: jipqpus is babbpus

   节点 7: x is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is veyhpus → veyhpus is baccpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is veyhpus
  - 前提: veyhpus is gagdpus and vilgpus
  - 前提: gagdpus is venzpus
  - 前提: venzpus is cumfpus and fitgpus and palfpus
  - 前提: cumfpus is nachpus
  - 前提: nachpus is ziczpus and pogtpus
  - 前提: ziczpus is nahnpus
  - 前提: nahnpus is jipqpus and megtpus and mefzpus
  - 前提: jipqpus is baccpus

   节点 8: x is bachpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is veyhpus → veyhpus is bachpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is veyhpus
  - 前提: veyhpus is gagdpus and vilgpus
  - 前提: gagdpus is venzpus
  - 前提: venzpus is cumfpus and fitgpus and palfpus
  - 前提: cumfpus is nachpus
  - 前提: nachpus is ziczpus and pogtpus
  - 前提: ziczpus is nahnpus
  - 前提: nahnpus is jipqpus and megtpus and mefzpus
  - 前提: jipqpus is bachpus

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 8
   - 新增节点: 7
   - 更新已存在节点: 1
   - 点亮的LoG节点: 26

🎯 推理质量统计:
   - 完美推理: 7 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 36节点, 23前提, 复杂度1-23

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 30
   - 前提节点: 23
   - 推理节点: 7
   - 幻觉节点: 0
   - 点亮LoG节点: 26

✅ 推理节点详情:
   🟢 x is jipqpus (出现1次, 质量:perfect)
   🟢 jipqpus is babbpus (出现1次, 质量:perfect)
   🟢 jipqpus is baccpus (出现1次, 质量:perfect)
   🟢 jipqpus is bachpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现1次, 质量:perfect)
   🟢 x is baccpus (出现1次, 质量:perfect)
   🟢 x is bachpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - cumfpus is jipqpus and megtpus
   - x is gagdpus and vilgpus
   - jipqpus is bachpus
   - cumfpus is ziczpus
   - ziczpus is jipqpus and megtpus and mefzpus
   - gagdpus is cumfpus and fitgpus
   - vimzpus is babbpus and jaqjpus
   - sajvpus is baccpus and romcpus
   - resxpus is bachpus and demkpus
   - x is jipqpus
   - cumfpus is ziczpus and pogtpus
   - jipqpus is baccpus
   - jipqpus is resxpus and moxwpus
   - jipqpus is vimzpus
   - jipqpus is resxpus
   - x is cumfpus
   - cumfpus is jipqpus
   - jipqpus is babbpus
   - jipqpus is baccpus and romcpus
   - x is cumfpus and fitgpus
   - gagdpus is cumfpus and fitgpus and palfpus
   - x is gagdpus
   - resxpus is bachpus
   - jipqpus is babbpus and jaqjpus
   - jipqpus is sajvpus
   - ziczpus is jipqpus and megtpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/7 = 71.43%
   最深点亮节点: x is jipqpus (第5层)
   节点Coverage: 26/36 = 72.22%
   前提条件Coverage: 1/23 = 4.35%
   各推理层点亮比例:
     第1层: 10/12 = 83.33%
     第2层: 8/10 = 80.00%
     第3层: 5/6 = 83.33%
     第4层: 2/4 = 50.00%
     第5层: 1/2 = 50.00%
     第6层: 0/1 = 0.00%
     第7层: 0/1 = 0.00%

🎯 计算Precision指标...
   Error Rate: 0/7 = 0.00%
   可推导节点: 7/7
   Strict Error Rate: 0/7 = 0.00%
   严格有效节点: 7/7

   详细分析:
     完美推理: 7 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 11/50
================================================================================
记录索引: 10
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_10.json
✅ 使用缓存结果:
   - 句子数: 26
   - 提取的语句数: 27
   - 初始条件数: 19

=== Statement提取完成 ===
总句子数: 26
成功提取: 26
失败提取: 0
总statements数: 27

=== 开始清洗Statement格式 ===
原始statements数: 27
清洗后statements数: 27
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 27
标准化后节点数: 26
过滤掉的无效实体数: 1
标准化后的节点:
  1. [planning] x → baccpus (原始: x is baccpus)
  2. [actual] x → suyvpus and buhwpus (原始: x is suyvpus and buhwpus)
  3. [actual] suyvpus → toxqpus and zexspus (原始: suyvpus is toxqpus and zexspus)
  4. [actual] toxqpus → qagbpus (原始: toxqpus is qagbpus)
  5. [actual] qagbpus → duqcpus (原始: qagbpus is duqcpus)
  6. [actual] duqcpus → cuwjpus and dedzpus and fajmpus (原始: duqcpus is cuwjpus and dedzpus and fajmpus)
  7. [actual] cuwjpus → minvpus (原始: cuwjpus is minvpus)
  8. [actual] minvpus → posgpus and qojtpus (原始: minvpus is posgpus and qojtpus)
  9. [actual] posgpus → yuyhpus (原始: posgpus is yuyhpus)
  10. [actual] yuyhpus → pudzpus (原始: yuyhpus is pudzpus)
  11. [actual] pudzpus → poltpus and saxvpus and keydpus (原始: pudzpus is poltpus and saxvpus and keydpus)
  12. [actual] poltpus → joytpus (原始: poltpus is joytpus)
  13. [actual] joytpus → jozzpus (原始: joytpus is jozzpus)
  14. [actual] jozzpus → deqypus and kojspus and qixypus (原始: jozzpus is deqypus and kojspus and qixypus)
  15. [actual] deqypus → lozypus (原始: deqypus is lozypus)
  16. [actual] lozypus → tuktpus (原始: lozypus is tuktpus)
  17. [actual] tuktpus → pumgpus and wortpus (原始: tuktpus is pumgpus and wortpus)
  18. [actual] pumgpus → qadzpus (原始: pumgpus is qadzpus)
  19. [actual] qadzpus → sultpus (原始: qadzpus is sultpus)
  20. [actual] sultpus → baccpus and gayjpus and gutkpus (原始: sultpus is baccpus and gayjpus and gutkpus)
  21. [actual] suyvpus → baccpus (原始: suyvpus is baccpus)
  22. [actual] x → suyvpus (原始: x is suyvpus)
  23. [actual] x → baccpus (原始: x is baccpus)
  24. [actual] x → baccpus (原始: x is baccpus)
  25. [actual] x → baccpus (原始: x is baccpus)
  26. [actual] x → babbpus or baccpus or bachpus (原始: x is babbpus or baccpus or bachpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 31
[后处理] 加载LoG图，包含 31 个节点
  LoG节点 0: x is babbpus or baccpus or bachpus (规则: DI, 深度: 1)
  LoG节点 1: x is baccpus (规则: MP, 深度: 2)
  LoG节点 2: x is poltpus (规则: MP, 深度: 3)
  LoG节点 3: poltpus is baccpus (规则: CE, 深度: 3)
  LoG节点 4: x is cuwjpus (规则: CE, 深度: 4)
  LoG节点 5: cuwjpus is poltpus (规则: CE, 深度: 4)
  LoG节点 6: poltpus is baccpus and gayjpus (规则: MP, 深度: 4)
  LoG节点 7: x is cuwjpus and dedzpus (规则: MP, 深度: 5)
  LoG节点 8: cuwjpus is poltpus and saxvpus (规则: MP, 深度: 5)
  LoG节点 9: poltpus is deqypus (规则: CE, 深度: 5)
  LoG节点 10: deqypus is baccpus and gayjpus (规则: MP, 深度: 5)
  LoG节点 11: x is toxqpus (规则: MP, 深度: 6)
  LoG节点 12: toxqpus is cuwjpus and dedzpus (规则: MP, 深度: 6)
  LoG节点 13: cuwjpus is posgpus (规则: CE, 深度: 6)
  LoG节点 14: posgpus is poltpus and saxvpus (规则: MP, 深度: 6)
  LoG节点 15: poltpus is deqypus and kojspus (规则: MP, 深度: 6)
  LoG节点 16: deqypus is pumgpus (规则: MP, 深度: 6)
  LoG节点 17: pumgpus is baccpus and gayjpus (规则: MP, 深度: 6)
  LoG节点 18: x is suyvpus (规则: CE, 深度: 7)
  LoG节点 19: suyvpus is toxqpus (规则: CE, 深度: 7)
  LoG节点 20: toxqpus is duqcpus (规则: MP, 深度: 7)
  LoG节点 21: duqcpus is cuwjpus and dedzpus (规则: CE, 深度: 7)
  LoG节点 22: cuwjpus is posgpus and qojtpus (规则: MP, 深度: 7)
  LoG节点 23: posgpus is pudzpus (规则: MP, 深度: 7)
  LoG节点 24: pudzpus is poltpus and saxvpus (规则: CE, 深度: 7)
  LoG节点 25: poltpus is jozzpus (规则: MP, 深度: 7)
  LoG节点 26: jozzpus is deqypus and kojspus (规则: CE, 深度: 7)
  LoG节点 27: deqypus is tuktpus (规则: MP, 深度: 7)
  LoG节点 28: tuktpus is pumgpus (规则: CE, 深度: 7)
  LoG节点 29: pumgpus is sultpus (规则: MP, 深度: 7)
  LoG节点 30: sultpus is baccpus and gayjpus (规则: CE, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 26
   - 初始条件数: 19
   - LoG图节点数: 31

📋 初始条件列表:
    1. pumgpus is qadzpus
    2. duqcpus is cuwjpus and dedzpus and fajmpus
    3. toxqpus is qagbpus
    4. yuyhpus is pudzpus
    5. cuwjpus is minvpus
    6. minvpus is posgpus and qojtpus
    7. joytpus is jozzpus
    8. pudzpus is poltpus and saxvpus and keydpus
    9. qadzpus is sultpus
   10. tuktpus is pumgpus and wortpus
   11. deqypus is lozypus
   12. x is suyvpus and buhwpus
   13. suyvpus is toxqpus and zexspus
   14. lozypus is tuktpus
   15. posgpus is yuyhpus
   16. sultpus is baccpus and gayjpus and gutkpus
   17. qagbpus is duqcpus
   18. jozzpus is deqypus and kojspus and qixypus
   19. poltpus is joytpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 19 个前提节点

🔍 开始处理actual节点...

   节点 1: x is suyvpus and buhwpus
      ↻ 重复节点，计数: 2

   节点 2: suyvpus is toxqpus and zexspus
      ↻ 重复节点，计数: 2

   节点 3: toxqpus is qagbpus
      ↻ 重复节点，计数: 2

   节点 4: qagbpus is duqcpus
      ↻ 重复节点，计数: 2

   节点 5: duqcpus is cuwjpus and dedzpus and fajmpus
      ↻ 重复节点，计数: 2

   节点 6: cuwjpus is minvpus
      ↻ 重复节点，计数: 2

   节点 7: minvpus is posgpus and qojtpus
      ↻ 重复节点，计数: 2

   节点 8: posgpus is yuyhpus
      ↻ 重复节点，计数: 2

   节点 9: yuyhpus is pudzpus
      ↻ 重复节点，计数: 2

   节点 10: pudzpus is poltpus and saxvpus and keydpus
      ↻ 重复节点，计数: 2

   节点 11: poltpus is joytpus
      ↻ 重复节点，计数: 2

   节点 12: joytpus is jozzpus
      ↻ 重复节点，计数: 2

   节点 13: jozzpus is deqypus and kojspus and qixypus
      ↻ 重复节点，计数: 2

   节点 14: deqypus is lozypus
      ↻ 重复节点，计数: 2

   节点 15: lozypus is tuktpus
      ↻ 重复节点，计数: 2

   节点 16: tuktpus is pumgpus and wortpus
      ↻ 重复节点，计数: 2

   节点 17: pumgpus is qadzpus
      ↻ 重复节点，计数: 2

   节点 18: qadzpus is sultpus
      ↻ 重复节点，计数: 2

   节点 19: sultpus is baccpus and gayjpus and gutkpus
      ↻ 重复节点，计数: 2

   节点 20: suyvpus is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP+CE
      📋 推理路径: MP+CE规则: suyvpus is toxqpus → toxqpus is baccpus
[后处理] 基于推理轨迹点亮节点，使用了 18 个前提条件:
  - 前提: suyvpus is toxqpus and zexspus
  - 前提: toxqpus is qagbpus
  - 前提: qagbpus is duqcpus
  - 前提: duqcpus is cuwjpus and dedzpus and fajmpus
  - 前提: cuwjpus is minvpus
  - 前提: minvpus is posgpus and qojtpus
  - 前提: posgpus is yuyhpus
  - 前提: yuyhpus is pudzpus
  - 前提: pudzpus is poltpus and saxvpus and keydpus
  - 前提: poltpus is joytpus
  - 前提: joytpus is jozzpus
  - 前提: jozzpus is deqypus and kojspus and qixypus
  - 前提: deqypus is lozypus
  - 前提: lozypus is tuktpus
  - 前提: tuktpus is pumgpus and wortpus
  - 前提: pumgpus is qadzpus
  - 前提: qadzpus is sultpus
  - 前提: sultpus is baccpus and gayjpus and gutkpus
  ✓ 点亮LoG节点: poltpus is baccpus
[子树点亮]     └─ 点亮依赖节点: poltpus is baccpus and gayjpus (深度4)
[子树点亮]     └─ 点亮依赖节点: poltpus is deqypus (深度5)
[子树点亮]     └─ 点亮依赖节点: deqypus is baccpus and gayjpus (深度5)
[子树点亮]     └─ 点亮依赖节点: poltpus is deqypus and kojspus (深度6)
[子树点亮]     └─ 点亮依赖节点: deqypus is pumgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: pumgpus is baccpus and gayjpus (深度6)
[子树点亮]     └─ 点亮依赖节点: poltpus is jozzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jozzpus is deqypus and kojspus (深度7)
[子树点亮]     └─ 点亮依赖节点: deqypus is tuktpus (深度7)
[子树点亮]     └─ 点亮依赖节点: tuktpus is pumgpus (深度7)
[子树点亮]     └─ 点亮依赖节点: pumgpus is sultpus (深度7)
[子树点亮]     └─ 点亮依赖节点: sultpus is baccpus and gayjpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 12 个节点
  ✓ 点亮LoG节点: cuwjpus is poltpus
[子树点亮]     └─ 点亮依赖节点: cuwjpus is poltpus and saxvpus (深度5)
[子树点亮]     └─ 点亮依赖节点: cuwjpus is posgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: posgpus is poltpus and saxvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: cuwjpus is posgpus and qojtpus (深度7)
[子树点亮]     └─ 点亮依赖节点: posgpus is pudzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: pudzpus is poltpus and saxvpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 6 个节点
  ✓ 点亮LoG节点: toxqpus is cuwjpus and dedzpus
[子树点亮]     └─ 点亮依赖节点: toxqpus is duqcpus (深度7)
[子树点亮]     └─ 点亮依赖节点: duqcpus is cuwjpus and dedzpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
  ✓ 点亮LoG节点: suyvpus is toxqpus
[后处理] 通过推理轨迹额外点亮了 4 个LoG节点

   节点 21: x is suyvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is suyvpus
      ✅ 验证成功 + LoG匹配

   节点 22: x is baccpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is baccpus
[子树点亮]     └─ 点亮依赖节点: x is poltpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is cuwjpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is cuwjpus and dedzpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is toxqpus (深度6)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
      ✅ 验证成功 + LoG匹配

   节点 23: x is baccpus
      ↻ 重复节点，计数: 2

   节点 24: x is baccpus
      ↻ 重复节点，计数: 3

   节点 25: x is babbpus or baccpus or bachpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus or baccpus or bachpus
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 25
   - 新增节点: 4
   - 更新已存在节点: 21
   - 点亮的LoG节点: 31

🎯 推理质量统计:
   - 完美推理: 4 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 31节点, 19前提, 复杂度1-19

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 23
   - 前提节点: 19
   - 推理节点: 4
   - 幻觉节点: 0
   - 点亮LoG节点: 31

✅ 推理节点详情:
   🟢 suyvpus is baccpus (出现1次, 质量:perfect)
   🟢 x is suyvpus (出现1次, 质量:perfect)
   🟢 x is baccpus (出现3次, 质量:perfect)
   🟢 x is babbpus or baccpus or bachpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - deqypus is baccpus and gayjpus
   - toxqpus is cuwjpus and dedzpus
   - deqypus is tuktpus
   - jozzpus is deqypus and kojspus
   - x is poltpus
   - tuktpus is pumgpus
   - poltpus is deqypus
   - x is cuwjpus
   - poltpus is jozzpus
   - cuwjpus is posgpus and qojtpus
   - x is babbpus or baccpus or bachpus
   - pudzpus is poltpus and saxvpus
   - cuwjpus is posgpus
   - poltpus is baccpus
   - cuwjpus is poltpus and saxvpus
   - x is suyvpus
   - posgpus is pudzpus
   - poltpus is deqypus and kojspus
   - pumgpus is sultpus
   - posgpus is poltpus and saxvpus
   - toxqpus is duqcpus
   - x is cuwjpus and dedzpus
   - x is toxqpus
   - x is baccpus
   - sultpus is baccpus and gayjpus
   - cuwjpus is poltpus
   - suyvpus is toxqpus
   - pumgpus is baccpus and gayjpus
   - poltpus is baccpus and gayjpus
   - deqypus is pumgpus
   - duqcpus is cuwjpus and dedzpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus or baccpus or bachpus (第7层)
   节点Coverage: 31/31 = 100.00%
   前提条件Coverage: 19/19 = 100.00%
   各推理层点亮比例:
     第1层: 13/13 = 100.00%
     第2层: 7/7 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 3/3 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/4 = 0.00%
   可推导节点: 4/4
   Strict Error Rate: 0/4 = 0.00%
   严格有效节点: 4/4

   详细分析:
     完美推理: 4 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 12/50
================================================================================
记录索引: 11
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_11.json
✅ 使用缓存结果:
   - 句子数: 28
   - 提取的语句数: 33
   - 初始条件数: 24

=== Statement提取完成 ===
总句子数: 28
成功提取: 28
失败提取: 0
总statements数: 33

=== 开始清洗Statement格式 ===
原始statements数: 33
清洗后statements数: 33
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 33
标准化后节点数: 31
过滤掉的无效实体数: 2
标准化后的节点:
  1. [planning] x → babbpus (原始: x is babbpus)
  2. [planning] x → baccpus (原始: x is baccpus)
  3. [planning] x → bachpus (原始: x is bachpus)
  4. [actual] x → zoftpus (原始: x is zoftpus)
  5. [actual] zoftpus → gawwpus (原始: zoftpus is gawwpus)
  6. [actual] gawwpus → jaqvpus (原始: gawwpus is jaqvpus)
  7. [actual] jaqvpus → nohfpus (原始: jaqvpus is nohfpus)
  8. [actual] nohfpus → zebkpus (原始: nohfpus is zebkpus)
  9. [actual] zebkpus → koqcpus (原始: zebkpus is koqcpus)
  10. [actual] x → koqcpus (原始: x is koqcpus)
  11. [actual] koqcpus → suzdpus (原始: koqcpus is suzdpus)
  12. [actual] suzdpus → kojypus (原始: suzdpus is kojypus)
  13. [actual] kojypus → qohwpus (原始: kojypus is qohwpus)
  14. [actual] qohwpus → babbpus (原始: qohwpus is babbpus)
  15. [actual] x → koqcpus (原始: x is koqcpus)
  16. [actual] x → babbpus (原始: x is babbpus)
  17. [actual] x → suzdpus (原始: x is suzdpus)
  18. [actual] suzdpus → boqvpus (原始: suzdpus is boqvpus)
  19. [actual] boqvpus → remxpus (原始: boqvpus is remxpus)
  20. [actual] remxpus → davkpus (原始: remxpus is davkpus)
  21. [actual] davkpus → baccpus (原始: davkpus is baccpus)
  22. [actual] x → baccpus (原始: x is baccpus)
  23. [actual] x → suzdpus (原始: x is suzdpus)
  24. [actual] suzdpus → hajcpus (原始: suzdpus is hajcpus)
  25. [actual] hajcpus → rarrpus (原始: hajcpus is rarrpus)
  26. [actual] rarrpus → septpus (原始: rarrpus is septpus)
  27. [actual] septpus → bachpus (原始: septpus is bachpus)
  28. [actual] x → bachpus (原始: x is bachpus)
  29. [actual] x → babbpus (原始: x is babbpus)
  30. [actual] x → baccpus (原始: x is baccpus)
  31. [actual] x → bachpus (原始: x is bachpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 34
[后处理] 加载LoG图，包含 34 个节点
  LoG节点 0: x is babbpus and baccpus and bachpus (规则: CE, 深度: 1)
  LoG节点 1: x is babbpus and baccpus and bachpus and buzmpus (规则: MP, 深度: 2)
  LoG节点 2: x is suzdpus (规则: MP, 深度: 3)
  LoG节点 3: suzdpus is babbpus and baccpus and bachpus and buzmpus (规则: CI, 深度: 3)
  LoG节点 4: x is nohfpus (规则: CE, 深度: 4)
  LoG节点 5: nohfpus is suzdpus (规则: CE, 深度: 4)
  LoG节点 6: suzdpus is babbpus and baccpus (规则: CI, 深度: 4)
  LoG节点 7: suzdpus is bachpus and buzmpus (规则: CE, 深度: 4)
  LoG节点 8: x is nohfpus and xetgpus (规则: MP, 深度: 5)
  LoG节点 9: nohfpus is suzdpus and sacypus (规则: MP, 深度: 5)
  LoG节点 10: suzdpus is babbpus (规则: CE, 深度: 5)
  LoG节点 11: suzdpus is baccpus (规则: CE, 深度: 5)
  LoG节点 12: suzdpus is bachpus and buzmpus and kinhpus (规则: MP, 深度: 5)
  LoG节点 13: x is gawwpus (规则: CE, 深度: 6)
  LoG节点 14: gawwpus is nohfpus and xetgpus (规则: CI, 深度: 6)
  LoG节点 15: nohfpus is koqcpus (规则: CE, 深度: 6)
  LoG节点 16: koqcpus is suzdpus and sacypus (规则: CI, 深度: 6)
  LoG节点 17: suzdpus is babbpus and vaqbpus (规则: MP, 深度: 6)
  LoG节点 18: suzdpus is baccpus and judmpus (规则: MP, 深度: 6)
  LoG节点 19: suzdpus is rarrpus (规则: CE, 深度: 6)
  LoG节点 20: rarrpus is bachpus and buzmpus and kinhpus (规则: CI, 深度: 6)
  LoG节点 21: x is gawwpus and qurypus (规则: MP, 深度: 7)
  LoG节点 22: gawwpus is nohfpus (规则: MP, 深度: 7)
  LoG节点 23: gawwpus is xetgpus (规则: CE, 深度: 7)
  LoG节点 24: nohfpus is koqcpus and xexrpus (规则: MP, 深度: 7)
  LoG节点 25: koqcpus is suzdpus (规则: CE, 深度: 7)
  LoG节点 26: koqcpus is sacypus (规则: MP, 深度: 7)
  LoG节点 27: suzdpus is qohwpus (规则: MP, 深度: 7)
  LoG节点 28: qohwpus is babbpus and vaqbpus (规则: CI, 深度: 7)
  LoG节点 29: suzdpus is remxpus (规则: MP, 深度: 7)
  LoG节点 30: remxpus is baccpus and judmpus (规则: MP, 深度: 7)
  LoG节点 31: suzdpus is rarrpus and ludjpus (规则: MP, 深度: 7)
  LoG节点 32: rarrpus is bachpus (规则: MP, 深度: 7)
  LoG节点 33: rarrpus is buzmpus and kinhpus (规则: CI, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 31
   - 初始条件数: 24
   - LoG图节点数: 34

📋 初始条件列表:
    1. suzdpus is hajcpus
    2. rarrpus is buzmpus
    3. suzdpus is kojypus
    4. nohfpus is zebkpus
    5. zebkpus is koqcpus and xexrpus
    6. koqcpus is ciwmpus
    7. kojypus is qohwpus
    8. remxpus is davkpus
    9. suzdpus is boqvpus
   10. gawwpus is jaqvpus
   11. rarrpus is kinhpus
   12. x is zoftpus
   13. qohwpus is vaqbpus
   14. koqcpus is suzdpus and muhbpus
   15. gawwpus is xetgpus and hoywpus
   16. rarrpus is septpus
   17. hajcpus is rarrpus and ludjpus
   18. qohwpus is babbpus
   19. ciwmpus is sacypus
   20. septpus is bachpus
   21. jaqvpus is nohfpus
   22. boqvpus is remxpus
   23. zoftpus is gawwpus and qurypus
   24. davkpus is baccpus and judmpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 24 个前提节点

🔍 开始处理actual节点...

   节点 1: x is zoftpus
      ↻ 重复节点，计数: 2

   节点 2: zoftpus is gawwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zoftpus is gawwpus and qurypus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zoftpus is gawwpus and qurypus

   节点 3: gawwpus is jaqvpus
      ↻ 重复节点，计数: 2

   节点 4: jaqvpus is nohfpus
      ↻ 重复节点，计数: 2

   节点 5: nohfpus is zebkpus
      ↻ 重复节点，计数: 2

   节点 6: zebkpus is koqcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zebkpus is koqcpus and xexrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zebkpus is koqcpus and xexrpus

   节点 7: x is koqcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zoftpus → zoftpus is koqcpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is zoftpus
  - 前提: zoftpus is gawwpus
  - 前提: gawwpus is jaqvpus
  - 前提: jaqvpus is nohfpus
  - 前提: nohfpus is zebkpus
  - 前提: zebkpus is koqcpus
  ✓ 点亮LoG节点: x is nohfpus
[子树点亮]     └─ 点亮依赖节点: x is nohfpus and xetgpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is gawwpus (深度6)
[子树点亮]     └─ 点亮依赖节点: gawwpus is nohfpus and xetgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is gawwpus and qurypus (深度7)
[子树点亮]     └─ 点亮依赖节点: gawwpus is nohfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: gawwpus is xetgpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 6 个节点
  ✓ 点亮LoG节点: nohfpus is koqcpus
[子树点亮]     └─ 点亮依赖节点: nohfpus is koqcpus and xexrpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 2 个LoG节点

   节点 8: koqcpus is suzdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: koqcpus is suzdpus
      ✅ 验证成功 + LoG匹配

   节点 9: suzdpus is kojypus
      ↻ 重复节点，计数: 2

   节点 10: kojypus is qohwpus
      ↻ 重复节点，计数: 2

   节点 11: qohwpus is babbpus
      ↻ 重复节点，计数: 2

   节点 12: x is koqcpus
      ↻ 重复节点，计数: 2

   节点 13: x is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zoftpus → zoftpus is babbpus
[后处理] 基于推理轨迹点亮节点，使用了 10 个前提条件:
  - 前提: x is zoftpus
  - 前提: zoftpus is gawwpus
  - 前提: gawwpus is jaqvpus
  - 前提: jaqvpus is nohfpus
  - 前提: nohfpus is zebkpus
  - 前提: zebkpus is koqcpus
  - 前提: koqcpus is suzdpus
  - 前提: suzdpus is kojypus
  - 前提: kojypus is qohwpus
  - 前提: qohwpus is babbpus
  ✓ 点亮LoG节点: x is suzdpus
[子树点亮]     └─ 点亮依赖节点: nohfpus is suzdpus (深度4)
[子树点亮]     └─ 点亮依赖节点: nohfpus is suzdpus and sacypus (深度5)
[子树点亮]     └─ 点亮依赖节点: koqcpus is suzdpus and sacypus (深度6)
[子树点亮]     └─ 点亮依赖节点: koqcpus is sacypus (深度7)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
  ✓ 点亮LoG节点: suzdpus is babbpus
[子树点亮]     └─ 点亮依赖节点: suzdpus is babbpus and vaqbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: suzdpus is qohwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qohwpus is babbpus and vaqbpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
[后处理] 通过推理轨迹额外点亮了 2 个LoG节点

   节点 14: x is suzdpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 15: suzdpus is boqvpus
      ↻ 重复节点，计数: 2

   节点 16: boqvpus is remxpus
      ↻ 重复节点，计数: 2

   节点 17: remxpus is davkpus
      ↻ 重复节点，计数: 2

   节点 18: davkpus is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: davkpus is baccpus and judmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: davkpus is baccpus and judmpus

   节点 19: x is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zoftpus → zoftpus is baccpus
[后处理] 基于推理轨迹点亮节点，使用了 11 个前提条件:
  - 前提: x is zoftpus
  - 前提: zoftpus is gawwpus
  - 前提: gawwpus is jaqvpus
  - 前提: jaqvpus is nohfpus
  - 前提: nohfpus is zebkpus
  - 前提: zebkpus is koqcpus
  - 前提: koqcpus is suzdpus
  - 前提: suzdpus is boqvpus
  - 前提: boqvpus is remxpus
  - 前提: remxpus is davkpus
  - 前提: davkpus is baccpus
  ✓ 点亮LoG节点: suzdpus is baccpus
[子树点亮]     └─ 点亮依赖节点: suzdpus is baccpus and judmpus (深度6)
[子树点亮]     └─ 点亮依赖节点: suzdpus is remxpus (深度7)
[子树点亮]     └─ 点亮依赖节点: remxpus is baccpus and judmpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 20: x is suzdpus
      ↻ 重复节点，计数: 2

   节点 21: suzdpus is hajcpus
      ↻ 重复节点，计数: 2

   节点 22: hajcpus is rarrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: hajcpus is rarrpus and ludjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: hajcpus is rarrpus and ludjpus

   节点 23: rarrpus is septpus
      ↻ 重复节点，计数: 2

   节点 24: septpus is bachpus
      ↻ 重复节点，计数: 2

   节点 25: x is bachpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zoftpus → zoftpus is bachpus
[后处理] 基于推理轨迹点亮节点，使用了 11 个前提条件:
  - 前提: x is zoftpus
  - 前提: zoftpus is gawwpus
  - 前提: gawwpus is jaqvpus
  - 前提: jaqvpus is nohfpus
  - 前提: nohfpus is zebkpus
  - 前提: zebkpus is koqcpus
  - 前提: koqcpus is suzdpus
  - 前提: suzdpus is hajcpus
  - 前提: hajcpus is rarrpus
  - 前提: rarrpus is septpus
  - 前提: septpus is bachpus
  ✓ 点亮LoG节点: suzdpus is rarrpus
[子树点亮]     └─ 点亮依赖节点: suzdpus is rarrpus and ludjpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
  ✓ 点亮LoG节点: rarrpus is bachpus
[后处理] 通过推理轨迹额外点亮了 2 个LoG节点

   节点 26: x is babbpus
      ↻ 重复节点，计数: 2

   节点 27: x is baccpus
      ↻ 重复节点，计数: 2

   节点 28: x is bachpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 28
   - 新增节点: 10
   - 更新已存在节点: 18
   - 点亮的LoG节点: 26

🎯 推理质量统计:
   - 完美推理: 10 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 34节点, 24前提, 复杂度1-24

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 34
   - 前提节点: 24
   - 推理节点: 10
   - 幻觉节点: 0
   - 点亮LoG节点: 26

✅ 推理节点详情:
   🟢 zoftpus is gawwpus (出现1次, 质量:perfect)
   🟢 zebkpus is koqcpus (出现1次, 质量:perfect)
   🟢 x is koqcpus (出现2次, 质量:perfect)
   🟢 koqcpus is suzdpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现2次, 质量:perfect)
   🟢 x is suzdpus (出现2次, 质量:perfect)
   🟢 davkpus is baccpus (出现1次, 质量:perfect)
   🟢 x is baccpus (出现2次, 质量:perfect)
   🟢 hajcpus is rarrpus (出现1次, 质量:perfect)
   🟢 x is bachpus (出现2次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is gawwpus
   - gawwpus is xetgpus
   - nohfpus is suzdpus and sacypus
   - rarrpus is bachpus
   - suzdpus is rarrpus
   - x is nohfpus and xetgpus
   - gawwpus is nohfpus
   - nohfpus is koqcpus
   - x is suzdpus
   - nohfpus is koqcpus and xexrpus
   - suzdpus is babbpus and vaqbpus
   - qohwpus is babbpus and vaqbpus
   - remxpus is baccpus and judmpus
   - koqcpus is suzdpus
   - suzdpus is babbpus
   - x is nohfpus
   - suzdpus is qohwpus
   - suzdpus is baccpus
   - x is gawwpus and qurypus
   - nohfpus is suzdpus
   - gawwpus is nohfpus and xetgpus
   - suzdpus is remxpus
   - suzdpus is baccpus and judmpus
   - suzdpus is rarrpus and ludjpus
   - koqcpus is sacypus
   - koqcpus is suzdpus and sacypus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/7 = 71.43%
   最深点亮节点: x is suzdpus (第5层)
   节点Coverage: 26/34 = 76.47%
   前提条件Coverage: 13/24 = 54.17%
   各推理层点亮比例:
     第1层: 12/13 = 92.31%
     第2层: 7/8 = 87.50%
     第3层: 4/5 = 80.00%
     第4层: 2/4 = 50.00%
     第5层: 1/2 = 50.00%
     第6层: 0/1 = 0.00%
     第7层: 0/1 = 0.00%

🎯 计算Precision指标...
   Error Rate: 0/10 = 0.00%
   可推导节点: 10/10
   Strict Error Rate: 0/10 = 0.00%
   严格有效节点: 10/10

   详细分析:
     完美推理: 10 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 13/50
================================================================================
记录索引: 12
问题状态: incorrect
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_12.json
✅ 使用缓存结果:
   - 句子数: 5
   - 提取的语句数: 6
   - 初始条件数: 45

=== Statement提取完成 ===
总句子数: 5
成功提取: 5
失败提取: 0
总statements数: 6

=== 开始清洗Statement格式 ===
原始statements数: 6
清洗后statements数: 6
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 6
标准化后节点数: 6
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → cislpus (原始: x is cislpus)
  2. [actual] x → posnpus (原始: x is posnpus)
  3. [actual] posnpus → babbpus and pubzpus (原始: posnpus is babbpus and pubzpus)
  4. [actual] x → posnpus (原始: x is posnpus)
  5. [planning] x → babbpus (原始: x is babbpus)
  6. [planning] x → pubzpus (原始: x is pubzpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 65
[后处理] 加载LoG图，包含 65 个节点
  LoG节点 0: x is babbpus (规则: MP, 深度: 1)
  LoG节点 1: x is varxpus (规则: MP, 深度: 2)
  LoG节点 2: varxpus is babbpus (规则: MP, 深度: 2)
  LoG节点 3: x is gebbpus (规则: CE, 深度: 3)
  LoG节点 4: gebbpus is varxpus (规则: CE, 深度: 3)
  LoG节点 5: varxpus is pazspus (规则: CE, 深度: 3)
  LoG节点 6: pazspus is babbpus (规则: MP, 深度: 3)
  LoG节点 7: x is gebbpus and veqqpus (规则: MP, 深度: 4)
  LoG节点 8: gebbpus is varxpus and lopppus (规则: MP, 深度: 4)
  LoG节点 9: varxpus is pazspus and jalvpus (规则: MP, 深度: 4)
  LoG节点 10: pazspus is fijcpus (规则: MP, 深度: 4)
  LoG节点 11: fijcpus is babbpus (规则: CE, 深度: 4)
  LoG节点 12: x is quhbpus (规则: MP, 深度: 5)
  LoG节点 13: quhbpus is gebbpus and veqqpus (规则: MP, 深度: 5)
  LoG节点 14: gebbpus is dexdpus (规则: MP, 深度: 5)
  LoG节点 15: dexdpus is varxpus and lopppus (规则: CI, 深度: 5)
  LoG节点 16: varxpus is texvpus (规则: CE, 深度: 5)
  LoG节点 17: texvpus is pazspus and jalvpus (规则: MP, 深度: 5)
  LoG节点 18: pazspus is rozrpus (规则: CE, 深度: 5)
  LoG节点 19: rozrpus is fijcpus (规则: MP, 深度: 5)
  LoG节点 20: fijcpus is babbpus and qehxpus (规则: MP, 深度: 5)
  LoG节点 21: x is fichpus (规则: MP, 深度: 6)
  LoG节点 22: fichpus is quhbpus (规则: MP, 深度: 6)
  LoG节点 23: quhbpus is fadhpus (规则: CE, 深度: 6)
  LoG节点 24: fadhpus is gebbpus and veqqpus (规则: MP, 深度: 6)
  LoG节点 25: gebbpus is vuknpus (规则: MP, 深度: 6)
  LoG节点 26: vuknpus is dexdpus (规则: MP, 深度: 6)
  LoG节点 27: dexdpus is varxpus (规则: CE, 深度: 6)
  LoG节点 28: dexdpus is lopppus (规则: MP, 深度: 6)
  LoG节点 29: varxpus is texvpus and pirlpus (规则: MP, 深度: 6)
  LoG节点 30: texvpus is foztpus (规则: CE, 深度: 6)
  LoG节点 31: foztpus is pazspus and jalvpus (规则: MP, 深度: 6)
  LoG节点 32: pazspus is rozrpus and yatypus (规则: MP, 深度: 6)
  LoG节点 33: rozrpus is bevbpus (规则: CE, 深度: 6)
  LoG节点 34: bevbpus is fijcpus (规则: MP, 深度: 6)
  LoG节点 35: fijcpus is posnpus (规则: MP, 深度: 6)
  LoG节点 36: posnpus is babbpus and qehxpus (规则: CI, 深度: 6)
  LoG节点 37: x is kumhpus (规则: MP, 深度: 7)
  LoG节点 38: kumhpus is fichpus (规则: MP, 深度: 7)
  LoG节点 39: fichpus is hundpus (规则: MP, 深度: 7)
  LoG节点 40: hundpus is quhbpus (规则: CE, 深度: 7)
  LoG节点 41: quhbpus is fadhpus and wobtpus (规则: MP, 深度: 7)
  LoG节点 42: fadhpus is radmpus (规则: MP, 深度: 7)
  LoG节点 43: radmpus is gebbpus and veqqpus (规则: CI, 深度: 7)
  LoG节点 44: gebbpus is ruwdpus (规则: CE, 深度: 7)
  LoG节点 45: ruwdpus is vuknpus (规则: MP, 深度: 7)
  LoG节点 46: vuknpus is vidhpus (规则: MP, 深度: 7)
  LoG节点 47: vidhpus is dexdpus (规则: CE, 深度: 7)
  LoG节点 48: dexdpus is varxpus and honjpus (规则: MP, 深度: 7)
  LoG节点 49: dexdpus is jehbpus (规则: MP, 深度: 7)
  LoG节点 50: jehbpus is lopppus (规则: CE, 深度: 7)
  LoG节点 51: varxpus is yowhpus (规则: MP, 深度: 7)
  LoG节点 52: yowhpus is texvpus and pirlpus (规则: CE, 深度: 7)
  LoG节点 53: texvpus is foztpus and lakjpus (规则: MP, 深度: 7)
  LoG节点 54: foztpus is cuxkpus (规则: MP, 深度: 7)
  LoG节点 55: cuxkpus is pazspus and jalvpus (规则: CI, 深度: 7)
  LoG节点 56: pazspus is tuccpus (规则: MP, 深度: 7)
  LoG节点 57: tuccpus is rozrpus and yatypus (规则: MP, 深度: 7)
  LoG节点 58: rozrpus is bevbpus and cuvkpus (规则: MP, 深度: 7)
  LoG节点 59: bevbpus is hefcpus (规则: CE, 深度: 7)
  LoG节点 60: hefcpus is fijcpus (规则: CE, 深度: 7)
  LoG节点 61: fijcpus is kupjpus (规则: CE, 深度: 7)
  LoG节点 62: kupjpus is posnpus (规则: CE, 深度: 7)
  LoG节点 63: posnpus is babbpus (规则: CE, 深度: 7)
  LoG节点 64: posnpus is qehxpus (规则: CE, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 6
   - 初始条件数: 45
   - LoG图节点数: 65

📋 初始条件列表:
    1. cuxkpus is pazspus
    2. cuxkpus is jalvpus
    3. himtpus is jehbpus
    4. bevbpus is hefcpus and modbpus
    5. reklpus is bevbpus and cuvkpus
    6. pazspus is focfpus
    7. foztpus is gowxpus
    8. poqcpus is foztpus and lakjpus
    9. xekgpus is yowhpus
   10. hefcpus is fijcpus and qifmpus
   11. focfpus is tuccpus
   12. vidhpus is dexdpus and donfpus
   13. sicgpus is fadhpus and wobtpus
   14. varxpus is xekgpus
   15. radmpus is gebbpus
   16. zolxpus is rozrpus and yatypus
   17. posnpus is qehxpus and xofzpus
   18. dexdpus is cenvpus
   19. fadhpus is maxwpus
   20. rozhpus is vuknpus
   21. x is cislpus
   22. fichpus is ranbpus
   23. cislpus is kumhpus
   24. sajrpus is vidhpus
   25. yowhpus is texvpus and pirlpus and puhzpus
   26. gebbpus is ruwdpus and boscpus
   27. gowxpus is cuxkpus
   28. jehbpus is lopppus and qomvpus
   29. botbpus is fichpus
   30. vuknpus is sajrpus
   31. maxwpus is radmpus
   32. radmpus is veqqpus
   33. quhbpus is sicgpus
   34. tuccpus is zolxpus
   35. kupjpus is posnpus and ruxdpus
   36. rozrpus is reklpus
   37. dexdpus is himtpus
   38. fijcpus is kupjpus and zivfpus
   39. kumhpus is botbpus
   40. ruwdpus is rozhpus
   41. texvpus is poqcpus
   42. cenvpus is varxpus and honjpus
   43. hundpus is quhbpus and viqlpus
   44. ranbpus is hundpus
   45. posnpus is babbpus and pubzpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 45 个前提节点

🔍 开始处理actual节点...

   节点 1: x is cislpus
      ↻ 重复节点，计数: 2

   节点 2: x is posnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is cislpus → cislpus is posnpus
[后处理] 基于推理轨迹点亮节点，使用了 38 个前提条件:
  - 前提: x is cislpus
  - 前提: cislpus is kumhpus
  - 前提: kumhpus is botbpus
  - 前提: botbpus is fichpus
  - 前提: fichpus is ranbpus
  - 前提: ranbpus is hundpus
  - 前提: hundpus is quhbpus and viqlpus
  - 前提: quhbpus is sicgpus
  - 前提: sicgpus is fadhpus and wobtpus
  - 前提: fadhpus is maxwpus
  - 前提: maxwpus is radmpus
  - 前提: radmpus is gebbpus
  - 前提: gebbpus is ruwdpus and boscpus
  - 前提: ruwdpus is rozhpus
  - 前提: rozhpus is vuknpus
  - 前提: vuknpus is sajrpus
  - 前提: sajrpus is vidhpus
  - 前提: vidhpus is dexdpus and donfpus
  - 前提: dexdpus is cenvpus
  - 前提: cenvpus is varxpus and honjpus
  - 前提: varxpus is xekgpus
  - 前提: xekgpus is yowhpus
  - 前提: yowhpus is texvpus and pirlpus and puhzpus
  - 前提: texvpus is poqcpus
  - 前提: poqcpus is foztpus and lakjpus
  - 前提: foztpus is gowxpus
  - 前提: gowxpus is cuxkpus
  - 前提: cuxkpus is pazspus
  - 前提: pazspus is focfpus
  - 前提: focfpus is tuccpus
  - 前提: tuccpus is zolxpus
  - 前提: zolxpus is rozrpus and yatypus
  - 前提: rozrpus is reklpus
  - 前提: reklpus is bevbpus and cuvkpus
  - 前提: bevbpus is hefcpus and modbpus
  - 前提: hefcpus is fijcpus and qifmpus
  - 前提: fijcpus is kupjpus and zivfpus
  - 前提: kupjpus is posnpus and ruxdpus
  ✓ 点亮LoG节点: x is varxpus
[子树点亮]     └─ 点亮依赖节点: x is gebbpus (深度3)
[子树点亮]     └─ 点亮依赖节点: gebbpus is varxpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is gebbpus and veqqpus (深度4)
[子树点亮]     └─ 点亮依赖节点: gebbpus is varxpus and lopppus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is quhbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: quhbpus is gebbpus and veqqpus (深度5)
[子树点亮]     └─ 点亮依赖节点: gebbpus is dexdpus (深度5)
[子树点亮]     └─ 点亮依赖节点: dexdpus is varxpus and lopppus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is fichpus (深度6)
[子树点亮]     └─ 点亮依赖节点: fichpus is quhbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: quhbpus is fadhpus (深度6)
[子树点亮]     └─ 点亮依赖节点: fadhpus is gebbpus and veqqpus (深度6)
[子树点亮]     └─ 点亮依赖节点: gebbpus is vuknpus (深度6)
[子树点亮]     └─ 点亮依赖节点: vuknpus is dexdpus (深度6)
[子树点亮]     └─ 点亮依赖节点: dexdpus is varxpus (深度6)
[子树点亮]     └─ 点亮依赖节点: dexdpus is lopppus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is kumhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kumhpus is fichpus (深度7)
[子树点亮]     └─ 点亮依赖节点: fichpus is hundpus (深度7)
[子树点亮]     └─ 点亮依赖节点: hundpus is quhbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: quhbpus is fadhpus and wobtpus (深度7)
[子树点亮]     └─ 点亮依赖节点: fadhpus is radmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: radmpus is gebbpus and veqqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: gebbpus is ruwdpus (深度7)
[子树点亮]     └─ 点亮依赖节点: ruwdpus is vuknpus (深度7)
[子树点亮]     └─ 点亮依赖节点: vuknpus is vidhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: vidhpus is dexdpus (深度7)
[子树点亮]     └─ 点亮依赖节点: dexdpus is varxpus and honjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: dexdpus is jehbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jehbpus is lopppus (深度7)
[后处理]   └─ 自动点亮依赖子树: 30 个节点
  ✓ 点亮LoG节点: varxpus is pazspus
[子树点亮]     └─ 点亮依赖节点: varxpus is pazspus and jalvpus (深度4)
[子树点亮]     └─ 点亮依赖节点: varxpus is texvpus (深度5)
[子树点亮]     └─ 点亮依赖节点: texvpus is pazspus and jalvpus (深度5)
[子树点亮]     └─ 点亮依赖节点: varxpus is texvpus and pirlpus (深度6)
[子树点亮]     └─ 点亮依赖节点: texvpus is foztpus (深度6)
[子树点亮]     └─ 点亮依赖节点: foztpus is pazspus and jalvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: varxpus is yowhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: yowhpus is texvpus and pirlpus (深度7)
[子树点亮]     └─ 点亮依赖节点: texvpus is foztpus and lakjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: foztpus is cuxkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cuxkpus is pazspus and jalvpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 11 个节点
  ✓ 点亮LoG节点: pazspus is fijcpus
[子树点亮]     └─ 点亮依赖节点: pazspus is rozrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: rozrpus is fijcpus (深度5)
[子树点亮]     └─ 点亮依赖节点: pazspus is rozrpus and yatypus (深度6)
[子树点亮]     └─ 点亮依赖节点: rozrpus is bevbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: bevbpus is fijcpus (深度6)
[子树点亮]     └─ 点亮依赖节点: pazspus is tuccpus (深度7)
[子树点亮]     └─ 点亮依赖节点: tuccpus is rozrpus and yatypus (深度7)
[子树点亮]     └─ 点亮依赖节点: rozrpus is bevbpus and cuvkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: bevbpus is hefcpus (深度7)
[子树点亮]     └─ 点亮依赖节点: hefcpus is fijcpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 10 个节点
  ✓ 点亮LoG节点: fijcpus is posnpus
[子树点亮]     └─ 点亮依赖节点: fijcpus is kupjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kupjpus is posnpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 4 个LoG节点

   节点 3: posnpus is babbpus and pubzpus
      ↻ 重复节点，计数: 2

   节点 4: x is posnpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 4
   - 新增节点: 1
   - 更新已存在节点: 3
   - 点亮的LoG节点: 57

🎯 推理质量统计:
   - 完美推理: 1 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 65节点, 45前提, 复杂度1-45

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 46
   - 前提节点: 45
   - 推理节点: 1
   - 幻觉节点: 0
   - 点亮LoG节点: 57

✅ 推理节点详情:
   🟢 x is posnpus (出现2次, 质量:perfect)

🔥 点亮的LoG节点:
   - varxpus is pazspus
   - foztpus is pazspus and jalvpus
   - dexdpus is varxpus and honjpus
   - cuxkpus is pazspus and jalvpus
   - x is varxpus
   - varxpus is pazspus and jalvpus
   - foztpus is cuxkpus
   - bevbpus is hefcpus
   - pazspus is rozrpus and yatypus
   - x is gebbpus
   - hefcpus is fijcpus
   - x is fichpus
   - radmpus is gebbpus and veqqpus
   - gebbpus is varxpus
   - varxpus is texvpus and pirlpus
   - dexdpus is lopppus
   - x is quhbpus
   - dexdpus is varxpus
   - rozrpus is fijcpus
   - gebbpus is ruwdpus
   - fijcpus is kupjpus
   - vuknpus is dexdpus
   - vuknpus is vidhpus
   - dexdpus is jehbpus
   - bevbpus is fijcpus
   - fichpus is quhbpus
   - ruwdpus is vuknpus
   - kumhpus is fichpus
   - x is gebbpus and veqqpus
   - quhbpus is fadhpus
   - fadhpus is gebbpus and veqqpus
   - jehbpus is lopppus
   - texvpus is pazspus and jalvpus
   - hundpus is quhbpus
   - varxpus is texvpus
   - yowhpus is texvpus and pirlpus
   - fadhpus is radmpus
   - gebbpus is varxpus and lopppus
   - pazspus is rozrpus
   - pazspus is tuccpus
   - x is kumhpus
   - fijcpus is posnpus
   - dexdpus is varxpus and lopppus
   - fichpus is hundpus
   - quhbpus is fadhpus and wobtpus
   - vidhpus is dexdpus
   - texvpus is foztpus and lakjpus
   - rozrpus is bevbpus
   - kupjpus is posnpus
   - pazspus is fijcpus
   - quhbpus is gebbpus and veqqpus
   - texvpus is foztpus
   - rozrpus is bevbpus and cuvkpus
   - varxpus is yowhpus
   - gebbpus is dexdpus
   - tuccpus is rozrpus and yatypus
   - gebbpus is vuknpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 6/7 = 85.71%
   最深点亮节点: x is varxpus (第6层)
   节点Coverage: 57/65 = 87.69%
   前提条件Coverage: 2/45 = 4.44%
   各推理层点亮比例:
     第1层: 26/28 = 92.86%
     第2层: 15/16 = 93.75%
     第3层: 8/9 = 88.89%
     第4层: 4/5 = 80.00%
     第5层: 3/4 = 75.00%
     第6层: 1/2 = 50.00%
     第7层: 0/1 = 0.00%

🎯 计算Precision指标...
   Error Rate: 0/1 = 0.00%
   可推导节点: 1/1
   Strict Error Rate: 0/1 = 0.00%
   严格有效节点: 1/1

   详细分析:
     完美推理: 1 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 14/50
================================================================================
记录索引: 13
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_13.json
✅ 使用缓存结果:
   - 句子数: 21
   - 提取的语句数: 19
   - 初始条件数: 17

=== Statement提取完成 ===
总句子数: 21
成功提取: 21
失败提取: 0
总statements数: 19

=== 开始清洗Statement格式 ===
原始statements数: 19
清洗后statements数: 19
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 19
标准化后节点数: 19
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babbpus (原始: x is babbpus)
  2. [actual] x → peqkpus (原始: x is peqkpus)
  3. [actual] peqkpus → teghpus and nogmpus (原始: peqkpus is teghpus and nogmpus)
  4. [actual] teghpus → lezspus (原始: teghpus is lezspus)
  5. [actual] lezspus → tidmpus and cihvpus (原始: lezspus is tidmpus and cihvpus)
  6. [actual] tidmpus → mimvpus and toygpus (原始: tidmpus is mimvpus and toygpus)
  7. [actual] mimvpus → hirdpus and nubypus (原始: mimvpus is hirdpus and nubypus)
  8. [actual] hirdpus → kepkpus and hadtpus (原始: hirdpus is kepkpus and hadtpus)
  9. [actual] kepkpus → huhkpus and gisspus (原始: kepkpus is huhkpus and gisspus)
  10. [actual] huhkpus → guwwpus and kaxppus (原始: huhkpus is guwwpus and kaxppus)
  11. [actual] guwwpus → jebrpus (原始: guwwpus is jebrpus)
  12. [actual] jebrpus → gidxpus and mexbpus (原始: jebrpus is gidxpus and mexbpus)
  13. [actual] gidxpus → nadrpus and hisgpus (原始: gidxpus is nadrpus and hisgpus)
  14. [actual] nadrpus → gegcpus and funlpus (原始: nadrpus is gegcpus and funlpus)
  15. [actual] gegcpus → vozppus (原始: gegcpus is vozppus)
  16. [actual] vozppus → babbpus and hitvpus and pivnpus (原始: vozppus is babbpus and hitvpus and pivnpus)
  17. [actual] peqkpus → babbpus (原始: peqkpus is babbpus)
  18. [actual] x → peqkpus (原始: x is peqkpus)
  19. [actual] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 29
[后处理] 加载LoG图，包含 29 个节点
  LoG节点 0: x is babbpus (规则: CE, 深度: 1)
  LoG节点 1: x is babbpus and hitvpus (规则: MP, 深度: 2)
  LoG节点 2: x is huhkpus (规则: CE, 深度: 3)
  LoG节点 3: huhkpus is babbpus and hitvpus (规则: CE, 深度: 3)
  LoG节点 4: x is huhkpus and gisspus (规则: MP, 深度: 4)
  LoG节点 5: huhkpus is babbpus and hitvpus and pivnpus (规则: MP, 深度: 4)
  LoG节点 6: x is tidmpus (规则: MP, 深度: 5)
  LoG节点 7: tidmpus is huhkpus and gisspus (规则: MP, 深度: 5)
  LoG节点 8: huhkpus is jebrpus (规则: CE, 深度: 5)
  LoG节点 9: jebrpus is babbpus and hitvpus and pivnpus (规则: MP, 深度: 5)
  LoG节点 10: x is teghpus (规则: CE, 深度: 6)
  LoG节点 11: teghpus is tidmpus (规则: CE, 深度: 6)
  LoG节点 12: tidmpus is hirdpus (规则: MP, 深度: 6)
  LoG节点 13: hirdpus is huhkpus and gisspus (规则: MP, 深度: 6)
  LoG节点 14: huhkpus is jebrpus and luglpus (规则: MP, 深度: 6)
  LoG节点 15: jebrpus is nadrpus (规则: MP, 深度: 6)
  LoG节点 16: nadrpus is babbpus and hitvpus and pivnpus (规则: MP, 深度: 6)
  LoG节点 17: x is teghpus and nogmpus (规则: MP, 深度: 7)
  LoG节点 18: teghpus is tidmpus and cihvpus (规则: MP, 深度: 7)
  LoG节点 19: tidmpus is mimvpus (规则: CE, 深度: 7)
  LoG节点 20: mimvpus is hirdpus (规则: CE, 深度: 7)
  LoG节点 21: hirdpus is kepkpus (规则: CE, 深度: 7)
  LoG节点 22: kepkpus is huhkpus and gisspus (规则: CI, 深度: 7)
  LoG节点 23: huhkpus is guwwpus (规则: CE, 深度: 7)
  LoG节点 24: guwwpus is jebrpus and luglpus (规则: CI, 深度: 7)
  LoG节点 25: jebrpus is gidxpus (规则: CE, 深度: 7)
  LoG节点 26: gidxpus is nadrpus (规则: CE, 深度: 7)
  LoG节点 27: nadrpus is gegcpus (规则: CE, 深度: 7)
  LoG节点 28: gegcpus is babbpus and hitvpus and pivnpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 19
   - 初始条件数: 17
   - LoG图节点数: 29

📋 初始条件列表:
    1. vozppus is babbpus and hitvpus and pivnpus
    2. gegcpus is vozppus
    3. teghpus is lezspus
    4. gidxpus is nadrpus and hisgpus
    5. lezspus is tidmpus and cihvpus
    6. guwwpus is luglpus
    7. tidmpus is mimvpus and toygpus
    8. mimvpus is hirdpus and nubypus
    9. huhkpus is guwwpus and kaxppus
   10. kepkpus is gisspus
   11. guwwpus is jebrpus
   12. x is peqkpus
   13. kepkpus is huhkpus
   14. nadrpus is gegcpus and funlpus
   15. hirdpus is kepkpus and hadtpus
   16. jebrpus is gidxpus and mexbpus
   17. peqkpus is teghpus and nogmpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 17 个前提节点

🔍 开始处理actual节点...

   节点 1: x is peqkpus
      ↻ 重复节点，计数: 2

   节点 2: peqkpus is teghpus and nogmpus
      ↻ 重复节点，计数: 2

   节点 3: teghpus is lezspus
      ↻ 重复节点，计数: 2

   节点 4: lezspus is tidmpus and cihvpus
      ↻ 重复节点，计数: 2

   节点 5: tidmpus is mimvpus and toygpus
      ↻ 重复节点，计数: 2

   节点 6: mimvpus is hirdpus and nubypus
      ↻ 重复节点，计数: 2

   节点 7: hirdpus is kepkpus and hadtpus
      ↻ 重复节点，计数: 2

   节点 8: kepkpus is huhkpus and gisspus
      🔍 验证新节点...
[后处理] 点亮LoG节点: kepkpus is huhkpus and gisspus
      ✅ 验证成功 + LoG匹配

   节点 9: huhkpus is guwwpus and kaxppus
      ↻ 重复节点，计数: 2

   节点 10: guwwpus is jebrpus
      ↻ 重复节点，计数: 2

   节点 11: jebrpus is gidxpus and mexbpus
      ↻ 重复节点，计数: 2

   节点 12: gidxpus is nadrpus and hisgpus
      ↻ 重复节点，计数: 2

   节点 13: nadrpus is gegcpus and funlpus
      ↻ 重复节点，计数: 2

   节点 14: gegcpus is vozppus
      ↻ 重复节点，计数: 2

   节点 15: vozppus is babbpus and hitvpus and pivnpus
      ↻ 重复节点，计数: 2

   节点 16: peqkpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP+CE
      📋 推理路径: MP+CE规则: peqkpus is teghpus → teghpus is babbpus
[后处理] 基于推理轨迹点亮节点，使用了 14 个前提条件:
  - 前提: peqkpus is teghpus and nogmpus
  - 前提: teghpus is lezspus
  - 前提: lezspus is tidmpus and cihvpus
  - 前提: tidmpus is mimvpus and toygpus
  - 前提: mimvpus is hirdpus and nubypus
  - 前提: hirdpus is kepkpus and hadtpus
  - 前提: kepkpus is huhkpus
  - 前提: huhkpus is guwwpus and kaxppus
  - 前提: guwwpus is jebrpus
  - 前提: jebrpus is gidxpus and mexbpus
  - 前提: gidxpus is nadrpus and hisgpus
  - 前提: nadrpus is gegcpus and funlpus
  - 前提: gegcpus is vozppus
  - 前提: vozppus is babbpus and hitvpus and pivnpus
  ✓ 点亮LoG节点: huhkpus is babbpus and hitvpus
[子树点亮]     └─ 点亮依赖节点: huhkpus is babbpus and hitvpus and pivnpus (深度4)
[子树点亮]     └─ 点亮依赖节点: huhkpus is jebrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: jebrpus is babbpus and hitvpus and pivnpus (深度5)
[子树点亮]     └─ 点亮依赖节点: huhkpus is jebrpus and luglpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jebrpus is nadrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: nadrpus is babbpus and hitvpus and pivnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: huhkpus is guwwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: guwwpus is jebrpus and luglpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jebrpus is gidxpus (深度7)
[子树点亮]     └─ 点亮依赖节点: gidxpus is nadrpus (深度7)
[子树点亮]     └─ 点亮依赖节点: nadrpus is gegcpus (深度7)
[子树点亮]     └─ 点亮依赖节点: gegcpus is babbpus and hitvpus and pivnpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 12 个节点
  ✓ 点亮LoG节点: teghpus is tidmpus
[子树点亮]     └─ 点亮依赖节点: teghpus is tidmpus and cihvpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
  ✓ 点亮LoG节点: tidmpus is hirdpus
[子树点亮]     └─ 点亮依赖节点: tidmpus is mimvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: mimvpus is hirdpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
  ✓ 点亮LoG节点: hirdpus is kepkpus
[后处理] 通过推理轨迹额外点亮了 4 个LoG节点

   节点 17: x is peqkpus
      ↻ 重复节点，计数: 3

   节点 18: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is babbpus and hitvpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is huhkpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is huhkpus and gisspus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is tidmpus (深度5)
[子树点亮]     └─ 点亮依赖节点: tidmpus is huhkpus and gisspus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is teghpus (深度6)
[子树点亮]     └─ 点亮依赖节点: hirdpus is huhkpus and gisspus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is teghpus and nogmpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 8 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 18
   - 新增节点: 3
   - 更新已存在节点: 15
   - 点亮的LoG节点: 29

🎯 推理质量统计:
   - 完美推理: 3 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 29节点, 17前提, 复杂度1-17

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 20
   - 前提节点: 17
   - 推理节点: 3
   - 幻觉节点: 0
   - 点亮LoG节点: 29

✅ 推理节点详情:
   🟢 kepkpus is huhkpus and gisspus (出现1次, 质量:perfect)
   🟢 peqkpus is babbpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - teghpus is tidmpus and cihvpus
   - huhkpus is babbpus and hitvpus
   - x is teghpus and nogmpus
   - tidmpus is hirdpus
   - x is teghpus
   - jebrpus is babbpus and hitvpus and pivnpus
   - hirdpus is kepkpus
   - x is huhkpus and gisspus
   - tidmpus is mimvpus
   - gegcpus is babbpus and hitvpus and pivnpus
   - nadrpus is babbpus and hitvpus and pivnpus
   - huhkpus is guwwpus
   - jebrpus is gidxpus
   - huhkpus is jebrpus and luglpus
   - mimvpus is hirdpus
   - huhkpus is jebrpus
   - nadrpus is gegcpus
   - x is huhkpus
   - x is tidmpus
   - gidxpus is nadrpus
   - tidmpus is huhkpus and gisspus
   - huhkpus is babbpus and hitvpus and pivnpus
   - hirdpus is huhkpus and gisspus
   - guwwpus is jebrpus and luglpus
   - teghpus is tidmpus
   - x is babbpus and hitvpus
   - jebrpus is nadrpus
   - kepkpus is huhkpus and gisspus
   - x is babbpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus (第7层)
   节点Coverage: 29/29 = 100.00%
   前提条件Coverage: 14/17 = 82.35%
   各推理层点亮比例:
     第1层: 12/12 = 100.00%
     第2层: 7/7 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/3 = 0.00%
   可推导节点: 3/3
   Strict Error Rate: 0/3 = 0.00%
   严格有效节点: 3/3

   详细分析:
     完美推理: 3 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 15/50
================================================================================
记录索引: 14
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_14.json
✅ 使用缓存结果:
   - 句子数: 36
   - 提取的语句数: 61
   - 初始条件数: 33

=== Statement提取完成 ===
总句子数: 36
成功提取: 36
失败提取: 0
总statements数: 61

=== 开始清洗Statement格式 ===
原始statements数: 61
清洗后statements数: 61
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 61
标准化后节点数: 61
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → hogkpus (原始: x is hogkpus)
  2. [actual] hogkpus → dopmpus (原始: hogkpus is dopmpus)
  3. [planning] x → dopmpus (原始: x is dopmpus)
  4. [actual] dopmpus → jafnpus (原始: dopmpus is jafnpus)
  5. [planning] x → jafnpus (原始: x is jafnpus)
  6. [actual] jafnpus → yutkpus (原始: jafnpus is yutkpus)
  7. [planning] x → yutkpus (原始: x is yutkpus)
  8. [actual] yutkpus → tinkpus (原始: yutkpus is tinkpus)
  9. [planning] x → tinkpus (原始: x is tinkpus)
  10. [actual] tinkpus → fakkpus (原始: tinkpus is fakkpus)
  11. [planning] x → fakkpus (原始: x is fakkpus)
  12. [actual] fakkpus → ralnpus (原始: fakkpus is ralnpus)
  13. [planning] x → ralnpus (原始: x is ralnpus)
  14. [actual] ralnpus → bekbpus (原始: ralnpus is bekbpus)
  15. [planning] x → bekbpus (原始: x is bekbpus)
  16. [actual] bekbpus → tajspus (原始: bekbpus is tajspus)
  17. [planning] x → tajspus (原始: x is tajspus)
  18. [actual] tajspus → nibrpus (原始: tajspus is nibrpus)
  19. [planning] x → nibrpus (原始: x is nibrpus)
  20. [actual] nibrpus → lafxpus (原始: nibrpus is lafxpus)
  21. [planning] x → lafxpus (原始: x is lafxpus)
  22. [actual] lafxpus → kejhpus (原始: lafxpus is kejhpus)
  23. [planning] x → kejhpus (原始: x is kejhpus)
  24. [actual] kejhpus → vohppus (原始: kejhpus is vohppus)
  25. [planning] x → vohppus (原始: x is vohppus)
  26. [actual] vohppus → vaclpus (原始: vohppus is vaclpus)
  27. [planning] x → vaclpus (原始: x is vaclpus)
  28. [actual] vaclpus → hoczpus (原始: vaclpus is hoczpus)
  29. [planning] x → hoczpus (原始: x is hoczpus)
  30. [actual] hoczpus → feqbpus (原始: hoczpus is feqbpus)
  31. [planning] x → feqbpus (原始: x is feqbpus)
  32. [actual] feqbpus → luprpus (原始: feqbpus is luprpus)
  33. [planning] x → luprpus (原始: x is luprpus)
  34. [actual] luprpus → yeyvpus (原始: luprpus is yeyvpus)
  35. [actual] x → yeyvpus (原始: x is yeyvpus)
  36. [actual] yeyvpus → babbpus (原始: yeyvpus is babbpus)
  37. [planning] x → babbpus (原始: x is babbpus)
  38. [actual] x → tajspus (原始: x is tajspus)
  39. [actual] tajspus → hohnpus (原始: tajspus is hohnpus)
  40. [actual] x → hohnpus (原始: x is hohnpus)
  41. [actual] hohnpus → kupnpus (原始: hohnpus is kupnpus)
  42. [planning] x → kupnpus (原始: x is kupnpus)
  43. [actual] kupnpus → noszpus (原始: kupnpus is noszpus)
  44. [actual] x → noszpus (原始: x is noszpus)
  45. [actual] noszpus → mamgpus (原始: noszpus is mamgpus)
  46. [planning] x → mamgpus (原始: x is mamgpus)
  47. [actual] mamgpus → vihppus (原始: mamgpus is vihppus)
  48. [planning] x → vihppus (原始: x is vihppus)
  49. [actual] vihppus → xepfpus (原始: vihppus is xepfpus)
  50. [actual] x → xepfpus (原始: x is xepfpus)
  51. [actual] xepfpus → ferjpus (原始: xepfpus is ferjpus)
  52. [actual] x → ferjpus (原始: x is ferjpus)
  53. [actual] ferjpus → lovwpus (原始: ferjpus is lovwpus)
  54. [planning] x → lovwpus (原始: x is lovwpus)
  55. [actual] lovwpus → bofbpus (原始: lovwpus is bofbpus)
  56. [actual] x → bofbpus (原始: x is bofbpus)
  57. [actual] bofbpus → koxmpus (原始: bofbpus is koxmpus)
  58. [planning] x → koxmpus (原始: x is koxmpus)
  59. [actual] koxmpus → baccpus and bachpus (原始: koxmpus is baccpus and bachpus)
  60. [actual] x → baccpus and bachpus (原始: x is baccpus and bachpus)
  61. [actual] x → babbpus and baccpus and bachpus (原始: x is babbpus and baccpus and bachpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 52
[后处理] 加载LoG图，包含 52 个节点
  LoG节点 0: x is babbpus and baccpus and bachpus (规则: MP, 深度: 1)
  LoG节点 1: x is tajspus (规则: CE, 深度: 2)
  LoG节点 2: tajspus is babbpus and baccpus and bachpus (规则: CI, 深度: 2)
  LoG节点 3: x is tajspus and levbpus (规则: MP, 深度: 3)
  LoG节点 4: tajspus is babbpus (规则: CE, 深度: 3)
  LoG节点 5: tajspus is baccpus and bachpus (规则: MP, 深度: 3)
  LoG节点 6: x is jafnpus (规则: CE, 深度: 4)
  LoG节点 7: jafnpus is tajspus and levbpus (规则: CE, 深度: 4)
  LoG节点 8: tajspus is babbpus and kubtpus (规则: MP, 深度: 4)
  LoG节点 9: tajspus is xepfpus (规则: MP, 深度: 4)
  LoG节点 10: xepfpus is baccpus and bachpus (规则: CE, 深度: 4)
  LoG节点 11: x is jafnpus and zobtpus (规则: MP, 深度: 5)
  LoG节点 12: jafnpus is tajspus and levbpus and fivnpus (规则: MP, 深度: 5)
  LoG节点 13: tajspus is vaclpus (规则: MP, 深度: 5)
  LoG节点 14: vaclpus is babbpus and kubtpus (规则: MP, 深度: 5)
  LoG节点 15: tajspus is mamgpus (规则: MP, 深度: 5)
  LoG节点 16: mamgpus is xepfpus (规则: CE, 深度: 5)
  LoG节点 17: xepfpus is baccpus and bachpus and yiwgpus (规则: MP, 深度: 5)
  LoG节点 18: x is dopmpus (规则: CE, 深度: 6)
  LoG节点 19: dopmpus is jafnpus and zobtpus (规则: CI, 深度: 6)
  LoG节点 20: jafnpus is fakkpus (规则: MP, 深度: 6)
  LoG节点 21: fakkpus is tajspus and levbpus and fivnpus (规则: MP, 深度: 6)
  LoG节点 22: tajspus is kejhpus (规则: MP, 深度: 6)
  LoG节点 23: kejhpus is vaclpus (规则: CE, 深度: 6)
  LoG节点 24: vaclpus is feqbpus (规则: CE, 深度: 6)
  LoG节点 25: feqbpus is babbpus and kubtpus (规则: MP, 深度: 6)
  LoG节点 26: tajspus is kupnpus (规则: CE, 深度: 6)
  LoG节点 27: kupnpus is mamgpus (规则: CE, 深度: 6)
  LoG节点 28: mamgpus is xepfpus and hanxpus (规则: MP, 深度: 6)
  LoG节点 29: xepfpus is bofbpus (规则: MP, 深度: 6)
  LoG节点 30: bofbpus is baccpus and bachpus and yiwgpus (规则: CI, 深度: 6)
  LoG节点 31: x is dopmpus and qobqpus (规则: MP, 深度: 7)
  LoG节点 32: dopmpus is jafnpus (规则: CE, 深度: 7)
  LoG节点 33: dopmpus is zobtpus (规则: CE, 深度: 7)
  LoG节点 34: jafnpus is yutkpus (规则: CE, 深度: 7)
  LoG节点 35: yutkpus is fakkpus (规则: MP, 深度: 7)
  LoG节点 36: fakkpus is bekbpus (规则: MP, 深度: 7)
  LoG节点 37: bekbpus is tajspus and levbpus and fivnpus (规则: CI, 深度: 7)
  LoG节点 38: tajspus is lafxpus (规则: MP, 深度: 7)
  LoG节点 39: lafxpus is kejhpus (规则: CE, 深度: 7)
  LoG节点 40: kejhpus is vaclpus and rilrpus (规则: MP, 深度: 7)
  LoG节点 41: vaclpus is feqbpus and yothpus (规则: MP, 深度: 7)
  LoG节点 42: feqbpus is yeyvpus (规则: MP, 深度: 7)
  LoG节点 43: yeyvpus is babbpus and kubtpus (规则: CE, 深度: 7)
  LoG节点 44: tajspus is kupnpus and yetzpus (规则: MP, 深度: 7)
  LoG节点 45: kupnpus is mamgpus and wadmpus (规则: MP, 深度: 7)
  LoG节点 46: mamgpus is vihppus (规则: CE, 深度: 7)
  LoG节点 47: vihppus is xepfpus and hanxpus (规则: CE, 深度: 7)
  LoG节点 48: xepfpus is ferjpus (规则: CE, 深度: 7)
  LoG节点 49: ferjpus is bofbpus (规则: MP, 深度: 7)
  LoG节点 50: bofbpus is baccpus and bachpus (规则: MP, 深度: 7)
  LoG节点 51: bofbpus is yiwgpus (规则: CE, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 61
   - 初始条件数: 33
   - LoG图节点数: 52

📋 初始条件列表:
    1. vaclpus is hoczpus
    2. dopmpus is zobtpus and nisbpus
    3. bofbpus is yiwgpus and libjpus
    4. tajspus is hohnpus
    5. mamgpus is vihppus and rukwpus
    6. kupnpus is noszpus
    7. bofbpus is koxmpus
    8. hoczpus is feqbpus and yothpus
    9. tajspus is nibrpus
   10. x is hogkpus
   11. bekbpus is fivnpus
   12. luprpus is yeyvpus
   13. ferjpus is lovwpus
   14. bekbpus is tajspus and levbpus
   15. noszpus is mamgpus and wadmpus
   16. tinkpus is fakkpus
   17. jafnpus is yutkpus and duqwpus
   18. koxmpus is baccpus and bachpus
   19. yeyvpus is babbpus and kubtpus and jijxpus
   20. xepfpus is ferjpus and rosjpus
   21. lafxpus is kejhpus and pirgpus
   22. feqbpus is luprpus
   23. vohppus is vaclpus and rilrpus
   24. ralnpus is bekbpus
   25. yutkpus is tinkpus
   26. dopmpus is jafnpus and fovlpus
   27. kejhpus is vohppus
   28. lovwpus is bofbpus
   29. nibrpus is lafxpus
   30. fakkpus is ralnpus
   31. hogkpus is dopmpus and qobqpus
   32. vihppus is xepfpus and hanxpus and retlpus
   33. hohnpus is kupnpus and yetzpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 33 个前提节点

🔍 开始处理actual节点...

   节点 1: x is hogkpus
      ↻ 重复节点，计数: 2

   节点 2: hogkpus is dopmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: hogkpus is dopmpus and qobqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: hogkpus is dopmpus and qobqpus

   节点 3: dopmpus is jafnpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: dopmpus is jafnpus
      ✅ 验证成功 + LoG匹配

   节点 4: jafnpus is yutkpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: jafnpus is yutkpus
      ✅ 验证成功 + LoG匹配

   节点 5: yutkpus is tinkpus
      ↻ 重复节点，计数: 2

   节点 6: tinkpus is fakkpus
      ↻ 重复节点，计数: 2

   节点 7: fakkpus is ralnpus
      ↻ 重复节点，计数: 2

   节点 8: ralnpus is bekbpus
      ↻ 重复节点，计数: 2

   节点 9: bekbpus is tajspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: bekbpus is tajspus and levbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: bekbpus is tajspus and levbpus

   节点 10: tajspus is nibrpus
      ↻ 重复节点，计数: 2

   节点 11: nibrpus is lafxpus
      ↻ 重复节点，计数: 2

   节点 12: lafxpus is kejhpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: lafxpus is kejhpus
      ✅ 验证成功 + LoG匹配

   节点 13: kejhpus is vohppus
      ↻ 重复节点，计数: 2

   节点 14: vohppus is vaclpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: vohppus is vaclpus and rilrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: vohppus is vaclpus and rilrpus

   节点 15: vaclpus is hoczpus
      ↻ 重复节点，计数: 2

   节点 16: hoczpus is feqbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: hoczpus is feqbpus and yothpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: hoczpus is feqbpus and yothpus

   节点 17: feqbpus is luprpus
      ↻ 重复节点，计数: 2

   节点 18: luprpus is yeyvpus
      ↻ 重复节点，计数: 2

   节点 19: x is yeyvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is hogkpus → hogkpus is yeyvpus
[后处理] 基于推理轨迹点亮节点，使用了 18 个前提条件:
  - 前提: x is hogkpus
  - 前提: hogkpus is dopmpus
  - 前提: dopmpus is jafnpus
  - 前提: jafnpus is yutkpus
  - 前提: yutkpus is tinkpus
  - 前提: tinkpus is fakkpus
  - 前提: fakkpus is ralnpus
  - 前提: ralnpus is bekbpus
  - 前提: bekbpus is tajspus
  - 前提: tajspus is nibrpus
  - 前提: nibrpus is lafxpus
  - 前提: lafxpus is kejhpus
  - 前提: kejhpus is vohppus
  - 前提: vohppus is vaclpus
  - 前提: vaclpus is hoczpus
  - 前提: hoczpus is feqbpus
  - 前提: feqbpus is luprpus
  - 前提: luprpus is yeyvpus
  ✓ 点亮LoG节点: x is tajspus
[子树点亮]     └─ 点亮依赖节点: x is tajspus and levbpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is jafnpus (深度4)
[子树点亮]     └─ 点亮依赖节点: jafnpus is tajspus and levbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is jafnpus and zobtpus (深度5)
[子树点亮]     └─ 点亮依赖节点: jafnpus is tajspus and levbpus and fivnpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is dopmpus (深度6)
[子树点亮]     └─ 点亮依赖节点: dopmpus is jafnpus and zobtpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jafnpus is fakkpus (深度6)
[子树点亮]     └─ 点亮依赖节点: fakkpus is tajspus and levbpus and fivnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is dopmpus and qobqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: dopmpus is zobtpus (深度7)
[子树点亮]     └─ 点亮依赖节点: yutkpus is fakkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: fakkpus is bekbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: bekbpus is tajspus and levbpus and fivnpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 14 个节点
  ✓ 点亮LoG节点: tajspus is vaclpus
[子树点亮]     └─ 点亮依赖节点: tajspus is kejhpus (深度6)
[子树点亮]     └─ 点亮依赖节点: kejhpus is vaclpus (深度6)
[子树点亮]     └─ 点亮依赖节点: tajspus is lafxpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kejhpus is vaclpus and rilrpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
  ✓ 点亮LoG节点: vaclpus is feqbpus
[子树点亮]     └─ 点亮依赖节点: vaclpus is feqbpus and yothpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
  ✓ 点亮LoG节点: feqbpus is yeyvpus
[后处理] 通过推理轨迹额外点亮了 4 个LoG节点

   节点 20: yeyvpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yeyvpus is babbpus and kubtpus and jijxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yeyvpus is babbpus and kubtpus and jijxpus
  ✓ 点亮LoG节点: yeyvpus is babbpus and kubtpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 21: x is tajspus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 22: tajspus is hohnpus
      ↻ 重复节点，计数: 2

   节点 23: x is hohnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is hogkpus → hogkpus is hohnpus
[后处理] 基于推理轨迹点亮节点，使用了 10 个前提条件:
  - 前提: x is hogkpus
  - 前提: hogkpus is dopmpus
  - 前提: dopmpus is jafnpus
  - 前提: jafnpus is yutkpus
  - 前提: yutkpus is tinkpus
  - 前提: tinkpus is fakkpus
  - 前提: fakkpus is ralnpus
  - 前提: ralnpus is bekbpus
  - 前提: bekbpus is tajspus
  - 前提: tajspus is hohnpus

   节点 24: hohnpus is kupnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: hohnpus is kupnpus and yetzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: hohnpus is kupnpus and yetzpus

   节点 25: kupnpus is noszpus
      ↻ 重复节点，计数: 2

   节点 26: x is noszpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is hogkpus → hogkpus is noszpus
[后处理] 基于推理轨迹点亮节点，使用了 12 个前提条件:
  - 前提: x is hogkpus
  - 前提: hogkpus is dopmpus
  - 前提: dopmpus is jafnpus
  - 前提: jafnpus is yutkpus
  - 前提: yutkpus is tinkpus
  - 前提: tinkpus is fakkpus
  - 前提: fakkpus is ralnpus
  - 前提: ralnpus is bekbpus
  - 前提: bekbpus is tajspus
  - 前提: tajspus is hohnpus
  - 前提: hohnpus is kupnpus
  - 前提: kupnpus is noszpus
  ✓ 点亮LoG节点: tajspus is kupnpus
[子树点亮]     └─ 点亮依赖节点: tajspus is kupnpus and yetzpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 27: noszpus is mamgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: noszpus is mamgpus and wadmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: noszpus is mamgpus and wadmpus

   节点 28: mamgpus is vihppus
      🔍 验证新节点...
[后处理] 点亮LoG节点: mamgpus is vihppus
      ✅ 验证成功 + LoG匹配

   节点 29: vihppus is xepfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: vihppus is xepfpus and hanxpus and retlpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: vihppus is xepfpus and hanxpus and retlpus
  ✓ 点亮LoG节点: vihppus is xepfpus and hanxpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 30: x is xepfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is hogkpus → hogkpus is xepfpus
[后处理] 基于推理轨迹点亮节点，使用了 15 个前提条件:
  - 前提: x is hogkpus
  - 前提: hogkpus is dopmpus
  - 前提: dopmpus is jafnpus
  - 前提: jafnpus is yutkpus
  - 前提: yutkpus is tinkpus
  - 前提: tinkpus is fakkpus
  - 前提: fakkpus is ralnpus
  - 前提: ralnpus is bekbpus
  - 前提: bekbpus is tajspus
  - 前提: tajspus is hohnpus
  - 前提: hohnpus is kupnpus
  - 前提: kupnpus is noszpus
  - 前提: noszpus is mamgpus
  - 前提: mamgpus is vihppus
  - 前提: vihppus is xepfpus
  ✓ 点亮LoG节点: tajspus is xepfpus
[子树点亮]     └─ 点亮依赖节点: tajspus is mamgpus (深度5)
[子树点亮]     └─ 点亮依赖节点: mamgpus is xepfpus (深度5)
[子树点亮]     └─ 点亮依赖节点: kupnpus is mamgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: mamgpus is xepfpus and hanxpus (深度6)
[子树点亮]     └─ 点亮依赖节点: kupnpus is mamgpus and wadmpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 31: xepfpus is ferjpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: xepfpus is ferjpus
      ✅ 验证成功 + LoG匹配

   节点 32: x is ferjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is hogkpus → hogkpus is ferjpus
[后处理] 基于推理轨迹点亮节点，使用了 16 个前提条件:
  - 前提: x is hogkpus
  - 前提: hogkpus is dopmpus
  - 前提: dopmpus is jafnpus
  - 前提: jafnpus is yutkpus
  - 前提: yutkpus is tinkpus
  - 前提: tinkpus is fakkpus
  - 前提: fakkpus is ralnpus
  - 前提: ralnpus is bekbpus
  - 前提: bekbpus is tajspus
  - 前提: tajspus is hohnpus
  - 前提: hohnpus is kupnpus
  - 前提: kupnpus is noszpus
  - 前提: noszpus is mamgpus
  - 前提: mamgpus is vihppus
  - 前提: vihppus is xepfpus
  - 前提: xepfpus is ferjpus

   节点 33: ferjpus is lovwpus
      ↻ 重复节点，计数: 2

   节点 34: lovwpus is bofbpus
      ↻ 重复节点，计数: 2

   节点 35: x is bofbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is hogkpus → hogkpus is bofbpus
[后处理] 基于推理轨迹点亮节点，使用了 18 个前提条件:
  - 前提: x is hogkpus
  - 前提: hogkpus is dopmpus
  - 前提: dopmpus is jafnpus
  - 前提: jafnpus is yutkpus
  - 前提: yutkpus is tinkpus
  - 前提: tinkpus is fakkpus
  - 前提: fakkpus is ralnpus
  - 前提: ralnpus is bekbpus
  - 前提: bekbpus is tajspus
  - 前提: tajspus is hohnpus
  - 前提: hohnpus is kupnpus
  - 前提: kupnpus is noszpus
  - 前提: noszpus is mamgpus
  - 前提: mamgpus is vihppus
  - 前提: vihppus is xepfpus
  - 前提: xepfpus is ferjpus
  - 前提: ferjpus is lovwpus
  - 前提: lovwpus is bofbpus
  ✓ 点亮LoG节点: xepfpus is bofbpus
[子树点亮]     └─ 点亮依赖节点: ferjpus is bofbpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 36: bofbpus is koxmpus
      ↻ 重复节点，计数: 2

   节点 37: koxmpus is baccpus and bachpus
      ↻ 重复节点，计数: 2

   节点 38: x is baccpus and bachpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is hogkpus → hogkpus is baccpus and bachpus
[后处理] 基于推理轨迹点亮节点，使用了 20 个前提条件:
  - 前提: x is hogkpus
  - 前提: hogkpus is dopmpus
  - 前提: dopmpus is jafnpus
  - 前提: jafnpus is yutkpus
  - 前提: yutkpus is tinkpus
  - 前提: tinkpus is fakkpus
  - 前提: fakkpus is ralnpus
  - 前提: ralnpus is bekbpus
  - 前提: bekbpus is tajspus
  - 前提: tajspus is hohnpus
  - 前提: hohnpus is kupnpus
  - 前提: kupnpus is noszpus
  - 前提: noszpus is mamgpus
  - 前提: mamgpus is vihppus
  - 前提: vihppus is xepfpus
  - 前提: xepfpus is ferjpus
  - 前提: ferjpus is lovwpus
  - 前提: lovwpus is bofbpus
  - 前提: bofbpus is koxmpus
  - 前提: koxmpus is baccpus and bachpus
  ✓ 点亮LoG节点: tajspus is baccpus and bachpus
[子树点亮]     └─ 点亮依赖节点: xepfpus is baccpus and bachpus (深度4)
[子树点亮]     └─ 点亮依赖节点: xepfpus is baccpus and bachpus and yiwgpus (深度5)
[子树点亮]     └─ 点亮依赖节点: bofbpus is baccpus and bachpus and yiwgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: bofbpus is baccpus and bachpus (深度7)
[子树点亮]     └─ 点亮依赖节点: bofbpus is yiwgpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 39: x is babbpus and baccpus and bachpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus and baccpus and bachpus
[子树点亮]     └─ 点亮依赖节点: tajspus is babbpus and baccpus and bachpus (深度2)
[子树点亮]     └─ 点亮依赖节点: tajspus is babbpus (深度3)
[子树点亮]     └─ 点亮依赖节点: tajspus is babbpus and kubtpus (深度4)
[子树点亮]     └─ 点亮依赖节点: vaclpus is babbpus and kubtpus (深度5)
[子树点亮]     └─ 点亮依赖节点: feqbpus is babbpus and kubtpus (深度6)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 39
   - 新增节点: 22
   - 更新已存在节点: 17
   - 点亮的LoG节点: 52

🎯 推理质量统计:
   - 完美推理: 22 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 52节点, 33前提, 复杂度1-33

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 55
   - 前提节点: 33
   - 推理节点: 22
   - 幻觉节点: 0
   - 点亮LoG节点: 52

✅ 推理节点详情:
   🟢 hogkpus is dopmpus (出现1次, 质量:perfect)
   🟢 dopmpus is jafnpus (出现1次, 质量:perfect)
   🟢 jafnpus is yutkpus (出现1次, 质量:perfect)
   🟢 bekbpus is tajspus (出现1次, 质量:perfect)
   🟢 lafxpus is kejhpus (出现1次, 质量:perfect)
   🟢 vohppus is vaclpus (出现1次, 质量:perfect)
   🟢 hoczpus is feqbpus (出现1次, 质量:perfect)
   🟢 x is yeyvpus (出现1次, 质量:perfect)
   🟢 yeyvpus is babbpus (出现1次, 质量:perfect)
   🟢 x is tajspus (出现1次, 质量:perfect)
   🟢 x is hohnpus (出现1次, 质量:perfect)
   🟢 hohnpus is kupnpus (出现1次, 质量:perfect)
   🟢 x is noszpus (出现1次, 质量:perfect)
   🟢 noszpus is mamgpus (出现1次, 质量:perfect)
   🟢 mamgpus is vihppus (出现1次, 质量:perfect)
   🟢 vihppus is xepfpus (出现1次, 质量:perfect)
   🟢 x is xepfpus (出现1次, 质量:perfect)
   🟢 xepfpus is ferjpus (出现1次, 质量:perfect)
   🟢 x is ferjpus (出现1次, 质量:perfect)
   🟢 x is bofbpus (出现1次, 质量:perfect)
   🟢 x is baccpus and bachpus (出现1次, 质量:perfect)
   🟢 x is babbpus and baccpus and bachpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - tajspus is vaclpus
   - tajspus is baccpus and bachpus
   - yutkpus is fakkpus
   - kupnpus is mamgpus and wadmpus
   - x is babbpus and baccpus and bachpus
   - tajspus is babbpus and baccpus and bachpus
   - tajspus is kejhpus
   - x is tajspus
   - dopmpus is jafnpus
   - x is dopmpus and qobqpus
   - dopmpus is jafnpus and zobtpus
   - x is jafnpus and zobtpus
   - kupnpus is mamgpus
   - x is jafnpus
   - vihppus is xepfpus and hanxpus
   - yeyvpus is babbpus and kubtpus
   - jafnpus is fakkpus
   - fakkpus is tajspus and levbpus and fivnpus
   - tajspus is lafxpus
   - kejhpus is vaclpus
   - xepfpus is ferjpus
   - tajspus is mamgpus
   - vaclpus is feqbpus
   - ferjpus is bofbpus
   - jafnpus is tajspus and levbpus and fivnpus
   - vaclpus is babbpus and kubtpus
   - dopmpus is zobtpus
   - x is dopmpus
   - mamgpus is xepfpus and hanxpus
   - fakkpus is bekbpus
   - bekbpus is tajspus and levbpus and fivnpus
   - tajspus is kupnpus
   - tajspus is babbpus
   - jafnpus is tajspus and levbpus
   - tajspus is babbpus and kubtpus
   - lafxpus is kejhpus
   - jafnpus is yutkpus
   - feqbpus is yeyvpus
   - tajspus is kupnpus and yetzpus
   - bofbpus is baccpus and bachpus
   - x is tajspus and levbpus
   - xepfpus is baccpus and bachpus
   - kejhpus is vaclpus and rilrpus
   - tajspus is xepfpus
   - vaclpus is feqbpus and yothpus
   - bofbpus is baccpus and bachpus and yiwgpus
   - mamgpus is vihppus
   - xepfpus is baccpus and bachpus and yiwgpus
   - feqbpus is babbpus and kubtpus
   - mamgpus is xepfpus
   - xepfpus is bofbpus
   - bofbpus is yiwgpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus and baccpus and bachpus (第7层)
   节点Coverage: 52/52 = 100.00%
   前提条件Coverage: 17/33 = 51.52%
   各推理层点亮比例:
     第1层: 21/21 = 100.00%
     第2层: 13/13 = 100.00%
     第3层: 7/7 = 100.00%
     第4层: 5/5 = 100.00%
     第5层: 3/3 = 100.00%
     第6层: 2/2 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/22 = 0.00%
   可推导节点: 22/22
   Strict Error Rate: 0/22 = 0.00%
   严格有效节点: 22/22

   详细分析:
     完美推理: 22 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 16/50
================================================================================
记录索引: 15
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_15.json
✅ 使用缓存结果:
   - 句子数: 40
   - 提取的语句数: 59
   - 初始条件数: 43

=== Statement提取完成 ===
总句子数: 40
成功提取: 40
失败提取: 0
总statements数: 59

=== 开始清洗Statement格式 ===
原始statements数: 59
清洗后statements数: 58
过滤掉的statements数: 1
清洗后的statements:
  1. [planning] x is babbpus
  2. [planning] x is baccpus
  3. [planning] x is bachpus
  4. [actual] x is bepdpus
  5. [actual] bepdpus is hartpus and tobppus
  6. [actual] gidmpus is yowrpus
  7. [actual] yowrpus is xeldpus
  8. [actual] xeldpus is dawdpus
  9. [actual] dawdpus is cormpus
  10. [actual] cormpus is meqzpus
  11. [actual] meqzpus is wewvpus
  12. [actual] wewvpus is jerjpus
  13. [actual] jerjpus is tavqpus
  14. [actual] tavqpus is pesspus
  15. [actual] pesspus is zecvpus
  16. [actual] zecvpus is cevnpus
  17. [actual] cevnpus is hacwpus
  18. [actual] hacwpus is xirhpus
  19. [actual] xirhpus is xuykpus
  20. [actual] xuykpus is weblpus
  21. [actual] weblpus is movbpus
  22. [actual] movbpus is bachpus
  23. [actual] x is bachpus
  24. [actual] x is babbpus
  25. [actual] x is pumbpus
  26. [actual] bepdpus is hartpus
  27. [actual] hartpus is gidmpus
  28. [actual] gidmpus is yowrpus
  29. [actual] yowrpus is xeldpus
  30. [actual] xeldpus is dawdpus
  31. [actual] dawdpus is cormpus
  32. [actual] cormpus is meqzpus
  33. [actual] meqzpus is wewvpus
  34. [actual] wewvpus is jerjpus
  35. [actual] jerjpus is tavqpus
  36. [actual] tavqpus is pesspus
  37. [actual] pesspus is zecvpus
  38. [actual] zecvpus is gurcpus
  39. [actual] gurcpus is fownpus
  40. [actual] fownpus is wexkpus
  41. [actual] wexkpus is ziqfpus
  42. [actual] ziqfpus is qobppus
  43. [actual] qobppus is pumbpus
  44. [actual] pumbpus is ludbpus
  45. [actual] ludbpus is pejdpus
  46. [actual] pejdpus is jucjpus
  47. [actual] jucjpus is yezwpus
  48. [actual] yezwpus is babbpus
  49. [actual] x is babbpus
  50. [actual] x is pumbpus
  51. [actual] pumbpus is gergpus
  52. [actual] gergpus is ziycpus
  53. [actual] ziycpus is qixtpus
  54. [actual] qixtpus is fuwlpus
  55. [actual] fuwlpus is fuvfpus
  56. [actual] fuvfpus is baccpus
  57. [actual] x is baccpus
  58. [actual] x is babbpus and baccpus and bachpus

=== 开始标准化和解析节点 ===
清洗后statements数: 58
标准化后节点数: 58
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babbpus (原始: x is babbpus)
  2. [planning] x → baccpus (原始: x is baccpus)
  3. [planning] x → bachpus (原始: x is bachpus)
  4. [actual] x → bepdpus (原始: x is bepdpus)
  5. [actual] bepdpus → hartpus and tobppus (原始: bepdpus is hartpus and tobppus)
  6. [actual] gidmpus → yowrpus (原始: gidmpus is yowrpus)
  7. [actual] yowrpus → xeldpus (原始: yowrpus is xeldpus)
  8. [actual] xeldpus → dawdpus (原始: xeldpus is dawdpus)
  9. [actual] dawdpus → cormpus (原始: dawdpus is cormpus)
  10. [actual] cormpus → meqzpus (原始: cormpus is meqzpus)
  11. [actual] meqzpus → wewvpus (原始: meqzpus is wewvpus)
  12. [actual] wewvpus → jerjpus (原始: wewvpus is jerjpus)
  13. [actual] jerjpus → tavqpus (原始: jerjpus is tavqpus)
  14. [actual] tavqpus → pesspus (原始: tavqpus is pesspus)
  15. [actual] pesspus → zecvpus (原始: pesspus is zecvpus)
  16. [actual] zecvpus → cevnpus (原始: zecvpus is cevnpus)
  17. [actual] cevnpus → hacwpus (原始: cevnpus is hacwpus)
  18. [actual] hacwpus → xirhpus (原始: hacwpus is xirhpus)
  19. [actual] xirhpus → xuykpus (原始: xirhpus is xuykpus)
  20. [actual] xuykpus → weblpus (原始: xuykpus is weblpus)
  21. [actual] weblpus → movbpus (原始: weblpus is movbpus)
  22. [actual] movbpus → bachpus (原始: movbpus is bachpus)
  23. [actual] x → bachpus (原始: x is bachpus)
  24. [actual] x → babbpus (原始: x is babbpus)
  25. [actual] x → pumbpus (原始: x is pumbpus)
  26. [actual] bepdpus → hartpus (原始: bepdpus is hartpus)
  27. [actual] hartpus → gidmpus (原始: hartpus is gidmpus)
  28. [actual] gidmpus → yowrpus (原始: gidmpus is yowrpus)
  29. [actual] yowrpus → xeldpus (原始: yowrpus is xeldpus)
  30. [actual] xeldpus → dawdpus (原始: xeldpus is dawdpus)
  31. [actual] dawdpus → cormpus (原始: dawdpus is cormpus)
  32. [actual] cormpus → meqzpus (原始: cormpus is meqzpus)
  33. [actual] meqzpus → wewvpus (原始: meqzpus is wewvpus)
  34. [actual] wewvpus → jerjpus (原始: wewvpus is jerjpus)
  35. [actual] jerjpus → tavqpus (原始: jerjpus is tavqpus)
  36. [actual] tavqpus → pesspus (原始: tavqpus is pesspus)
  37. [actual] pesspus → zecvpus (原始: pesspus is zecvpus)
  38. [actual] zecvpus → gurcpus (原始: zecvpus is gurcpus)
  39. [actual] gurcpus → fownpus (原始: gurcpus is fownpus)
  40. [actual] fownpus → wexkpus (原始: fownpus is wexkpus)
  41. [actual] wexkpus → ziqfpus (原始: wexkpus is ziqfpus)
  42. [actual] ziqfpus → qobppus (原始: ziqfpus is qobppus)
  43. [actual] qobppus → pumbpus (原始: qobppus is pumbpus)
  44. [actual] pumbpus → ludbpus (原始: pumbpus is ludbpus)
  45. [actual] ludbpus → pejdpus (原始: ludbpus is pejdpus)
  46. [actual] pejdpus → jucjpus (原始: pejdpus is jucjpus)
  47. [actual] jucjpus → yezwpus (原始: jucjpus is yezwpus)
  48. [actual] yezwpus → babbpus (原始: yezwpus is babbpus)
  49. [actual] x → babbpus (原始: x is babbpus)
  50. [actual] x → pumbpus (原始: x is pumbpus)
  51. [actual] pumbpus → gergpus (原始: pumbpus is gergpus)
  52. [actual] gergpus → ziycpus (原始: gergpus is ziycpus)
  53. [actual] ziycpus → qixtpus (原始: ziycpus is qixtpus)
  54. [actual] qixtpus → fuwlpus (原始: qixtpus is fuwlpus)
  55. [actual] fuwlpus → fuvfpus (原始: fuwlpus is fuvfpus)
  56. [actual] fuvfpus → baccpus (原始: fuvfpus is baccpus)
  57. [actual] x → baccpus (原始: x is baccpus)
  58. [actual] x → babbpus and baccpus and bachpus (原始: x is babbpus and baccpus and bachpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 59
[后处理] 加载LoG图，包含 59 个节点
  LoG节点 0: x is babbpus and baccpus and bachpus (规则: MP, 深度: 1)
  LoG节点 1: x is zecvpus (规则: CE, 深度: 2)
  LoG节点 2: zecvpus is babbpus and baccpus and bachpus (规则: CI, 深度: 2)
  LoG节点 3: x is zecvpus and tocfpus (规则: MP, 深度: 3)
  LoG节点 4: zecvpus is babbpus and baccpus (规则: MP, 深度: 3)
  LoG节点 5: zecvpus is bachpus (规则: CE, 深度: 3)
  LoG节点 6: x is xeldpus (规则: CE, 深度: 4)
  LoG节点 7: xeldpus is zecvpus and tocfpus (规则: CI, 深度: 4)
  LoG节点 8: zecvpus is pumbpus (规则: MP, 深度: 4)
  LoG节点 9: pumbpus is babbpus and baccpus (规则: CI, 深度: 4)
  LoG节点 10: zecvpus is bachpus and yogqpus (规则: MP, 深度: 4)
  LoG节点 11: x is xeldpus and sewxpus (规则: MP, 深度: 5)
  LoG节点 12: xeldpus is zecvpus (规则: MP, 深度: 5)
  LoG节点 13: xeldpus is tocfpus (规则: CE, 深度: 5)
  LoG节点 14: zecvpus is fownpus (规则: CE, 深度: 5)
  LoG节点 15: fownpus is pumbpus (规则: MP, 深度: 5)
  LoG节点 16: pumbpus is babbpus (规则: MP, 深度: 5)
  LoG节点 17: pumbpus is baccpus (规则: MP, 深度: 5)
  LoG节点 18: zecvpus is xuykpus (规则: MP, 深度: 5)
  LoG节点 19: xuykpus is bachpus and yogqpus (规则: CE, 深度: 5)
  LoG节点 20: x is hartpus (规则: CE, 深度: 6)
  LoG节点 21: hartpus is xeldpus and sewxpus (规则: MP, 深度: 6)
  LoG节点 22: xeldpus is wewvpus (规则: MP, 深度: 6)
  LoG节点 23: wewvpus is zecvpus (规则: MP, 深度: 6)
  LoG节点 24: xeldpus is tocfpus and laqkpus (规则: MP, 深度: 6)
  LoG节点 25: zecvpus is fownpus and hezvpus (规则: MP, 深度: 6)
  LoG节点 26: fownpus is ziqfpus (规则: CE, 深度: 6)
  LoG节点 27: ziqfpus is pumbpus (规则: CE, 深度: 6)
  LoG节点 28: pumbpus is jucjpus (规则: MP, 深度: 6)
  LoG节点 29: jucjpus is babbpus (规则: CE, 深度: 6)
  LoG节点 30: pumbpus is qixtpus (规则: MP, 深度: 6)
  LoG节点 31: qixtpus is baccpus (规则: MP, 深度: 6)
  LoG节点 32: zecvpus is hacwpus (规则: CE, 深度: 6)
  LoG节点 33: hacwpus is xuykpus (规则: CE, 深度: 6)
  LoG节点 34: xuykpus is bachpus and yogqpus and qugkpus (规则: MP, 深度: 6)
  LoG节点 35: x is hartpus and tobppus (规则: MP, 深度: 7)
  LoG节点 36: hartpus is yowrpus (规则: MP, 深度: 7)
  LoG节点 37: yowrpus is xeldpus and sewxpus (规则: CI, 深度: 7)
  LoG节点 38: xeldpus is cormpus (规则: MP, 深度: 7)
  LoG节点 39: cormpus is wewvpus (规则: MP, 深度: 7)
  LoG节点 40: wewvpus is tavqpus (规则: MP, 深度: 7)
  LoG节点 41: tavqpus is zecvpus (规则: MP, 深度: 7)
  LoG节点 42: xeldpus is sehxpus (规则: MP, 深度: 7)
  LoG节点 43: sehxpus is tocfpus and laqkpus (规则: MP, 深度: 7)
  LoG节点 44: zecvpus is gurcpus (规则: CE, 深度: 7)
  LoG节点 45: gurcpus is fownpus and hezvpus (规则: CI, 深度: 7)
  LoG节点 46: fownpus is ziqfpus and bopkpus (规则: MP, 深度: 7)
  LoG节点 47: ziqfpus is pumbpus and qiwkpus (规则: MP, 深度: 7)
  LoG节点 48: pumbpus is ludbpus (规则: CE, 深度: 7)
  LoG节点 49: ludbpus is jucjpus (规则: MP, 深度: 7)
  LoG节点 50: jucjpus is babbpus and kexxpus (规则: MP, 深度: 7)
  LoG节点 51: pumbpus is ziycpus (规则: MP, 深度: 7)
  LoG节点 52: ziycpus is qixtpus (规则: CE, 深度: 7)
  LoG节点 53: qixtpus is fuvfpus (规则: MP, 深度: 7)
  LoG节点 54: fuvfpus is baccpus (规则: CE, 深度: 7)
  LoG节点 55: zecvpus is hacwpus and rawkpus (规则: MP, 深度: 7)
  LoG节点 56: hacwpus is xuykpus and zocjpus (规则: MP, 深度: 7)
  LoG节点 57: xuykpus is movbpus (规则: MP, 深度: 7)
  LoG节点 58: movbpus is bachpus and yogqpus and qugkpus (规则: CE, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 58
   - 初始条件数: 43
   - LoG图节点数: 59

📋 初始条件列表:
    1. veqxpus is tocfpus and laqkpus
    2. hacwpus is xirhpus
    3. movbpus is bachpus and yogqpus and qugkpus and mozspus
    4. qobppus is pumbpus and qiwkpus
    5. wexkpus is ziqfpus and bopkpus
    6. pejdpus is jucjpus
    7. ludbpus is pejdpus
    8. xeldpus is waztpus
    9. zecvpus is cevnpus
   10. wewvpus is jerjpus
   11. fuvfpus is baccpus and mabkpus
   12. gidmpus is yowrpus
   13. cormpus is meqzpus
   14. meqzpus is wewvpus
   15. fuwlpus is fuvfpus
   16. yowrpus is sewxpus
   17. pumbpus is ludbpus and fagtpus
   18. cevnpus is hacwpus and rawkpus
   19. bepdpus is hartpus and tobppus
   20. xirhpus is xuykpus and zocjpus
   21. jucjpus is yezwpus
   22. hartpus is gidmpus
   23. xuykpus is weblpus
   24. tavqpus is pesspus
   25. weblpus is movbpus
   26. qixtpus is fuwlpus
   27. jerjpus is tavqpus
   28. xeldpus is dawdpus
   29. gergpus is ziycpus
   30. pesspus is zecvpus
   31. ziycpus is qixtpus and beszpus
   32. yezwpus is babbpus and kexxpus
   33. fownpus is wexkpus
   34. yowrpus is xeldpus
   35. pumbpus is gergpus
   36. gurcpus is fownpus
   37. x is bepdpus
   38. ziqfpus is qobppus
   39. dawdpus is cormpus
   40. sehxpus is veqxpus
   41. gurcpus is hezvpus
   42. waztpus is sehxpus
   43. zecvpus is gurcpus and kerrpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 43 个前提节点

🔍 开始处理actual节点...

   节点 1: x is bepdpus
      ↻ 重复节点，计数: 2

   节点 2: bepdpus is hartpus and tobppus
      ↻ 重复节点，计数: 2

   节点 3: gidmpus is yowrpus
      ↻ 重复节点，计数: 2

   节点 4: yowrpus is xeldpus
      ↻ 重复节点，计数: 2

   节点 5: xeldpus is dawdpus
      ↻ 重复节点，计数: 2

   节点 6: dawdpus is cormpus
      ↻ 重复节点，计数: 2

   节点 7: cormpus is meqzpus
      ↻ 重复节点，计数: 2

   节点 8: meqzpus is wewvpus
      ↻ 重复节点，计数: 2

   节点 9: wewvpus is jerjpus
      ↻ 重复节点，计数: 2

   节点 10: jerjpus is tavqpus
      ↻ 重复节点，计数: 2

   节点 11: tavqpus is pesspus
      ↻ 重复节点，计数: 2

   节点 12: pesspus is zecvpus
      ↻ 重复节点，计数: 2

   节点 13: zecvpus is cevnpus
      ↻ 重复节点，计数: 2

   节点 14: cevnpus is hacwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: cevnpus is hacwpus and rawkpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: cevnpus is hacwpus and rawkpus

   节点 15: hacwpus is xirhpus
      ↻ 重复节点，计数: 2

   节点 16: xirhpus is xuykpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: xirhpus is xuykpus and zocjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: xirhpus is xuykpus and zocjpus

   节点 17: xuykpus is weblpus
      ↻ 重复节点，计数: 2

   节点 18: weblpus is movbpus
      ↻ 重复节点，计数: 2

   节点 19: movbpus is bachpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: movbpus is bachpus and yogqpus and qugkpus and mozspus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: movbpus is bachpus and yogqpus and qugkpus and mozspus
  ✓ 点亮LoG节点: movbpus is bachpus and yogqpus and qugkpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 20: x is bachpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is bepdpus → bepdpus is bachpus
[后处理] 基于推理轨迹点亮节点，使用了 20 个前提条件:
  - 前提: x is bepdpus
  - 前提: bepdpus is hartpus and tobppus
  - 前提: hartpus is gidmpus
  - 前提: gidmpus is yowrpus
  - 前提: yowrpus is xeldpus
  - 前提: xeldpus is dawdpus
  - 前提: dawdpus is cormpus
  - 前提: cormpus is meqzpus
  - 前提: meqzpus is wewvpus
  - 前提: wewvpus is jerjpus
  - 前提: jerjpus is tavqpus
  - 前提: tavqpus is pesspus
  - 前提: pesspus is zecvpus
  - 前提: zecvpus is cevnpus
  - 前提: cevnpus is hacwpus
  - 前提: hacwpus is xirhpus
  - 前提: xirhpus is xuykpus
  - 前提: xuykpus is weblpus
  - 前提: weblpus is movbpus
  - 前提: movbpus is bachpus
  ✓ 点亮LoG节点: x is zecvpus
[子树点亮]     └─ 点亮依赖节点: x is zecvpus and tocfpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is xeldpus (深度4)
[子树点亮]     └─ 点亮依赖节点: xeldpus is zecvpus and tocfpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is xeldpus and sewxpus (深度5)
[子树点亮]     └─ 点亮依赖节点: xeldpus is zecvpus (深度5)
[子树点亮]     └─ 点亮依赖节点: xeldpus is tocfpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is hartpus (深度6)
[子树点亮]     └─ 点亮依赖节点: hartpus is xeldpus and sewxpus (深度6)
[子树点亮]     └─ 点亮依赖节点: xeldpus is wewvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: wewvpus is zecvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: xeldpus is tocfpus and laqkpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is hartpus and tobppus (深度7)
[子树点亮]     └─ 点亮依赖节点: hartpus is yowrpus (深度7)
[子树点亮]     └─ 点亮依赖节点: yowrpus is xeldpus and sewxpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xeldpus is cormpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cormpus is wewvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: wewvpus is tavqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: tavqpus is zecvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xeldpus is sehxpus (深度7)
[子树点亮]     └─ 点亮依赖节点: sehxpus is tocfpus and laqkpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 20 个节点
  ✓ 点亮LoG节点: zecvpus is bachpus
[子树点亮]     └─ 点亮依赖节点: zecvpus is bachpus and yogqpus (深度4)
[子树点亮]     └─ 点亮依赖节点: zecvpus is xuykpus (深度5)
[子树点亮]     └─ 点亮依赖节点: xuykpus is bachpus and yogqpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zecvpus is hacwpus (深度6)
[子树点亮]     └─ 点亮依赖节点: hacwpus is xuykpus (深度6)
[子树点亮]     └─ 点亮依赖节点: xuykpus is bachpus and yogqpus and qugkpus (深度6)
[子树点亮]     └─ 点亮依赖节点: zecvpus is hacwpus and rawkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: hacwpus is xuykpus and zocjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xuykpus is movbpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 9 个节点
[后处理] 通过推理轨迹额外点亮了 2 个LoG节点

   节点 21: x is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is bepdpus → bepdpus is babbpus
[后处理] 基于推理轨迹点亮节点，使用了 24 个前提条件:
  - 前提: x is bepdpus
  - 前提: bepdpus is hartpus and tobppus
  - 前提: hartpus is gidmpus
  - 前提: gidmpus is yowrpus
  - 前提: yowrpus is xeldpus
  - 前提: xeldpus is dawdpus
  - 前提: dawdpus is cormpus
  - 前提: cormpus is meqzpus
  - 前提: meqzpus is wewvpus
  - 前提: wewvpus is jerjpus
  - 前提: jerjpus is tavqpus
  - 前提: tavqpus is pesspus
  - 前提: pesspus is zecvpus
  - 前提: zecvpus is gurcpus and kerrpus
  - 前提: gurcpus is fownpus
  - 前提: fownpus is wexkpus
  - 前提: wexkpus is ziqfpus and bopkpus
  - 前提: ziqfpus is qobppus
  - 前提: qobppus is pumbpus and qiwkpus
  - 前提: pumbpus is ludbpus and fagtpus
  - 前提: ludbpus is pejdpus
  - 前提: pejdpus is jucjpus
  - 前提: jucjpus is yezwpus
  - 前提: yezwpus is babbpus and kexxpus
  ✓ 点亮LoG节点: zecvpus is pumbpus
[子树点亮]     └─ 点亮依赖节点: zecvpus is fownpus (深度5)
[子树点亮]     └─ 点亮依赖节点: fownpus is pumbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zecvpus is fownpus and hezvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: fownpus is ziqfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: ziqfpus is pumbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: zecvpus is gurcpus (深度7)
[子树点亮]     └─ 点亮依赖节点: gurcpus is fownpus and hezvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: fownpus is ziqfpus and bopkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: ziqfpus is pumbpus and qiwkpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 9 个节点
  ✓ 点亮LoG节点: pumbpus is babbpus
[子树点亮]     └─ 点亮依赖节点: pumbpus is jucjpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jucjpus is babbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: pumbpus is ludbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: ludbpus is jucjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jucjpus is babbpus and kexxpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
[后处理] 通过推理轨迹额外点亮了 2 个LoG节点

   节点 22: x is pumbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is bepdpus → bepdpus is pumbpus
[后处理] 基于推理轨迹点亮节点，使用了 19 个前提条件:
  - 前提: x is bepdpus
  - 前提: bepdpus is hartpus and tobppus
  - 前提: hartpus is gidmpus
  - 前提: gidmpus is yowrpus
  - 前提: yowrpus is xeldpus
  - 前提: xeldpus is dawdpus
  - 前提: dawdpus is cormpus
  - 前提: cormpus is meqzpus
  - 前提: meqzpus is wewvpus
  - 前提: wewvpus is jerjpus
  - 前提: jerjpus is tavqpus
  - 前提: tavqpus is pesspus
  - 前提: pesspus is zecvpus
  - 前提: zecvpus is gurcpus and kerrpus
  - 前提: gurcpus is fownpus
  - 前提: fownpus is wexkpus
  - 前提: wexkpus is ziqfpus and bopkpus
  - 前提: ziqfpus is qobppus
  - 前提: qobppus is pumbpus and qiwkpus

   节点 23: bepdpus is hartpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: bepdpus is hartpus and tobppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: bepdpus is hartpus and tobppus

   节点 24: hartpus is gidmpus
      ↻ 重复节点，计数: 2

   节点 25: gidmpus is yowrpus
      ↻ 重复节点，计数: 3

   节点 26: yowrpus is xeldpus
      ↻ 重复节点，计数: 3

   节点 27: xeldpus is dawdpus
      ↻ 重复节点，计数: 3

   节点 28: dawdpus is cormpus
      ↻ 重复节点，计数: 3

   节点 29: cormpus is meqzpus
      ↻ 重复节点，计数: 3

   节点 30: meqzpus is wewvpus
      ↻ 重复节点，计数: 3

   节点 31: wewvpus is jerjpus
      ↻ 重复节点，计数: 3

   节点 32: jerjpus is tavqpus
      ↻ 重复节点，计数: 3

   节点 33: tavqpus is pesspus
      ↻ 重复节点，计数: 3

   节点 34: pesspus is zecvpus
      ↻ 重复节点，计数: 3

   节点 35: zecvpus is gurcpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 36: gurcpus is fownpus
      ↻ 重复节点，计数: 2

   节点 37: fownpus is wexkpus
      ↻ 重复节点，计数: 2

   节点 38: wexkpus is ziqfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wexkpus is ziqfpus and bopkpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wexkpus is ziqfpus and bopkpus

   节点 39: ziqfpus is qobppus
      ↻ 重复节点，计数: 2

   节点 40: qobppus is pumbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qobppus is pumbpus and qiwkpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qobppus is pumbpus and qiwkpus

   节点 41: pumbpus is ludbpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 42: ludbpus is pejdpus
      ↻ 重复节点，计数: 2

   节点 43: pejdpus is jucjpus
      ↻ 重复节点，计数: 2

   节点 44: jucjpus is yezwpus
      ↻ 重复节点，计数: 2

   节点 45: yezwpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yezwpus is babbpus and kexxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yezwpus is babbpus and kexxpus

   节点 46: x is babbpus
      ↻ 重复节点，计数: 2

   节点 47: x is pumbpus
      ↻ 重复节点，计数: 2

   节点 48: pumbpus is gergpus
      ↻ 重复节点，计数: 2

   节点 49: gergpus is ziycpus
      ↻ 重复节点，计数: 2

   节点 50: ziycpus is qixtpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: ziycpus is qixtpus
      ✅ 验证成功 + LoG匹配

   节点 51: qixtpus is fuwlpus
      ↻ 重复节点，计数: 2

   节点 52: fuwlpus is fuvfpus
      ↻ 重复节点，计数: 2

   节点 53: fuvfpus is baccpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: fuvfpus is baccpus
      ✅ 验证成功 + LoG匹配

   节点 54: x is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is bepdpus → bepdpus is baccpus
[后处理] 基于推理轨迹点亮节点，使用了 25 个前提条件:
  - 前提: x is bepdpus
  - 前提: bepdpus is hartpus
  - 前提: hartpus is gidmpus
  - 前提: gidmpus is yowrpus
  - 前提: yowrpus is xeldpus
  - 前提: xeldpus is dawdpus
  - 前提: dawdpus is cormpus
  - 前提: cormpus is meqzpus
  - 前提: meqzpus is wewvpus
  - 前提: wewvpus is jerjpus
  - 前提: jerjpus is tavqpus
  - 前提: tavqpus is pesspus
  - 前提: pesspus is zecvpus
  - 前提: zecvpus is gurcpus
  - 前提: gurcpus is fownpus
  - 前提: fownpus is wexkpus
  - 前提: wexkpus is ziqfpus
  - 前提: ziqfpus is qobppus
  - 前提: qobppus is pumbpus
  - 前提: pumbpus is gergpus
  - 前提: gergpus is ziycpus
  - 前提: ziycpus is qixtpus
  - 前提: qixtpus is fuwlpus
  - 前提: fuwlpus is fuvfpus
  - 前提: fuvfpus is baccpus
  ✓ 点亮LoG节点: pumbpus is baccpus
[子树点亮]     └─ 点亮依赖节点: pumbpus is qixtpus (深度6)
[子树点亮]     └─ 点亮依赖节点: qixtpus is baccpus (深度6)
[子树点亮]     └─ 点亮依赖节点: pumbpus is ziycpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qixtpus is fuvfpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 55: x is babbpus and baccpus and bachpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus and baccpus and bachpus
[子树点亮]     └─ 点亮依赖节点: zecvpus is babbpus and baccpus and bachpus (深度2)
[子树点亮]     └─ 点亮依赖节点: zecvpus is babbpus and baccpus (深度3)
[子树点亮]     └─ 点亮依赖节点: pumbpus is babbpus and baccpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 55
   - 新增节点: 16
   - 更新已存在节点: 39
   - 点亮的LoG节点: 59

🎯 推理质量统计:
   - 完美推理: 16 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 59节点, 43前提, 复杂度1-43

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 59
   - 前提节点: 43
   - 推理节点: 16
   - 幻觉节点: 0
   - 点亮LoG节点: 59

✅ 推理节点详情:
   🟢 cevnpus is hacwpus (出现1次, 质量:perfect)
   🟢 xirhpus is xuykpus (出现1次, 质量:perfect)
   🟢 movbpus is bachpus (出现1次, 质量:perfect)
   🟢 x is bachpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现2次, 质量:perfect)
   🟢 x is pumbpus (出现2次, 质量:perfect)
   🟢 bepdpus is hartpus (出现1次, 质量:perfect)
   🟢 zecvpus is gurcpus (出现1次, 质量:perfect)
   🟢 wexkpus is ziqfpus (出现1次, 质量:perfect)
   🟢 qobppus is pumbpus (出现1次, 质量:perfect)
   🟢 pumbpus is ludbpus (出现1次, 质量:perfect)
   🟢 yezwpus is babbpus (出现1次, 质量:perfect)
   🟢 ziycpus is qixtpus (出现1次, 质量:perfect)
   🟢 fuvfpus is baccpus (出现1次, 质量:perfect)
   🟢 x is baccpus (出现1次, 质量:perfect)
   🟢 x is babbpus and baccpus and bachpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - zecvpus is gurcpus
   - zecvpus is pumbpus
   - xeldpus is zecvpus and tocfpus
   - fownpus is ziqfpus
   - hartpus is xeldpus and sewxpus
   - jucjpus is babbpus
   - x is babbpus and baccpus and bachpus
   - hartpus is yowrpus
   - x is xeldpus
   - zecvpus is xuykpus
   - pumbpus is ziycpus
   - zecvpus is bachpus
   - ziqfpus is pumbpus and qiwkpus
   - zecvpus is bachpus and yogqpus
   - xuykpus is movbpus
   - qixtpus is fuvfpus
   - zecvpus is hacwpus
   - ludbpus is jucjpus
   - pumbpus is babbpus and baccpus
   - fuvfpus is baccpus
   - tavqpus is zecvpus
   - zecvpus is hacwpus and rawkpus
   - x is hartpus
   - xeldpus is zecvpus
   - x is hartpus and tobppus
   - xeldpus is sehxpus
   - pumbpus is babbpus
   - pumbpus is baccpus
   - zecvpus is babbpus and baccpus and bachpus
   - jucjpus is babbpus and kexxpus
   - movbpus is bachpus and yogqpus and qugkpus
   - hacwpus is xuykpus and zocjpus
   - xeldpus is cormpus
   - xuykpus is bachpus and yogqpus
   - x is zecvpus and tocfpus
   - x is zecvpus
   - sehxpus is tocfpus and laqkpus
   - ziycpus is qixtpus
   - wewvpus is zecvpus
   - yowrpus is xeldpus and sewxpus
   - wewvpus is tavqpus
   - xeldpus is tocfpus
   - hacwpus is xuykpus
   - xuykpus is bachpus and yogqpus and qugkpus
   - zecvpus is fownpus and hezvpus
   - fownpus is ziqfpus and bopkpus
   - pumbpus is ludbpus
   - pumbpus is qixtpus
   - zecvpus is babbpus and baccpus
   - qixtpus is baccpus
   - ziqfpus is pumbpus
   - pumbpus is jucjpus
   - gurcpus is fownpus and hezvpus
   - xeldpus is wewvpus
   - cormpus is wewvpus
   - zecvpus is fownpus
   - fownpus is pumbpus
   - x is xeldpus and sewxpus
   - xeldpus is tocfpus and laqkpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus and baccpus and bachpus (第7层)
   节点Coverage: 59/59 = 100.00%
   前提条件Coverage: 27/43 = 62.79%
   各推理层点亮比例:
     第1层: 24/24 = 100.00%
     第2层: 15/15 = 100.00%
     第3层: 9/9 = 100.00%
     第4层: 5/5 = 100.00%
     第5层: 3/3 = 100.00%
     第6层: 2/2 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/16 = 0.00%
   可推导节点: 16/16
   Strict Error Rate: 0/16 = 0.00%
   严格有效节点: 16/16

   详细分析:
     完美推理: 16 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 17/50
================================================================================
记录索引: 16
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_16.json
✅ 使用缓存结果:
   - 句子数: 6
   - 提取的语句数: 25
   - 初始条件数: 24

=== Statement提取完成 ===
总句子数: 6
成功提取: 6
失败提取: 0
总statements数: 25

=== 开始清洗Statement格式 ===
原始statements数: 25
清洗后statements数: 25
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 25
标准化后节点数: 25
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babbpus (原始: x is babbpus)
  2. [actual] x → waqrpus (原始: x is waqrpus)
  3. [actual] waqrpus → setspus (原始: waqrpus is setspus)
  4. [actual] setspus → tezfpus (原始: setspus is tezfpus)
  5. [actual] tezfpus → zarppus (原始: tezfpus is zarppus)
  6. [actual] zarppus → diqrpus (原始: zarppus is diqrpus)
  7. [actual] diqrpus → nezspus (原始: diqrpus is nezspus)
  8. [actual] nezspus → muyvpus (原始: nezspus is muyvpus)
  9. [actual] muyvpus → vulppus (原始: muyvpus is vulppus)
  10. [actual] vulppus → fosnpus (原始: vulppus is fosnpus)
  11. [actual] fosnpus → winkpus (原始: fosnpus is winkpus)
  12. [actual] winkpus → gaqppus (原始: winkpus is gaqppus)
  13. [actual] gaqppus → kugmpus (原始: gaqppus is kugmpus)
  14. [actual] kugmpus → qotypus (原始: kugmpus is qotypus)
  15. [actual] qotypus → yiwppus (原始: qotypus is yiwppus)
  16. [actual] yiwppus → nimspus (原始: yiwppus is nimspus)
  17. [actual] nimspus → hisgpus (原始: nimspus is hisgpus)
  18. [actual] hisgpus → hocgpus (原始: hisgpus is hocgpus)
  19. [actual] hocgpus → fintpus (原始: hocgpus is fintpus)
  20. [actual] fintpus → supxpus (原始: fintpus is supxpus)
  21. [actual] supxpus → qosrpus (原始: supxpus is qosrpus)
  22. [actual] qosrpus → wuhfpus (原始: qosrpus is wuhfpus)
  23. [actual] wuhfpus → babbpus (原始: wuhfpus is babbpus)
  24. [actual] x → babbpus (原始: x is babbpus)
  25. [actual] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 36
[后处理] 加载LoG图，包含 36 个节点
  LoG节点 0: x is babbpus (规则: CE, 深度: 1)
  LoG节点 1: x is babbpus and jizcpus (规则: MP, 深度: 2)
  LoG节点 2: x is hisgpus (规则: MP, 深度: 3)
  LoG节点 3: hisgpus is babbpus and jizcpus (规则: CE, 深度: 3)
  LoG节点 4: x is zarppus (规则: CE, 深度: 4)
  LoG节点 5: zarppus is hisgpus (规则: MP, 深度: 4)
  LoG节点 6: hisgpus is babbpus and jizcpus and zexzpus (规则: MP, 深度: 4)
  LoG节点 7: x is zarppus and bobtpus (规则: MP, 深度: 5)
  LoG节点 8: zarppus is kugmpus (规则: MP, 深度: 5)
  LoG节点 9: kugmpus is hisgpus (规则: MP, 深度: 5)
  LoG节点 10: hisgpus is qosrpus (规则: MP, 深度: 5)
  LoG节点 11: qosrpus is babbpus and jizcpus and zexzpus (规则: CI, 深度: 5)
  LoG节点 12: x is setspus (规则: CE, 深度: 6)
  LoG节点 13: setspus is zarppus and bobtpus (规则: CE, 深度: 6)
  LoG节点 14: zarppus is vulppus (规则: MP, 深度: 6)
  LoG节点 15: vulppus is kugmpus (规则: MP, 深度: 6)
  LoG节点 16: kugmpus is yiwppus (规则: CE, 深度: 6)
  LoG节点 17: yiwppus is hisgpus (规则: CE, 深度: 6)
  LoG节点 18: hisgpus is fintpus (规则: MP, 深度: 6)
  LoG节点 19: fintpus is qosrpus (规则: MP, 深度: 6)
  LoG节点 20: qosrpus is babbpus (规则: CE, 深度: 6)
  LoG节点 21: qosrpus is jizcpus and zexzpus (规则: CE, 深度: 6)
  LoG节点 22: x is setspus and jotbpus (规则: MP, 深度: 7)
  LoG节点 23: setspus is zarppus and bobtpus and wukppus (规则: MP, 深度: 7)
  LoG节点 24: zarppus is nezspus (规则: MP, 深度: 7)
  LoG节点 25: nezspus is vulppus (规则: MP, 深度: 7)
  LoG节点 26: vulppus is winkpus (规则: MP, 深度: 7)
  LoG节点 27: winkpus is kugmpus (规则: MP, 深度: 7)
  LoG节点 28: kugmpus is yiwppus and hobtpus (规则: MP, 深度: 7)
  LoG节点 29: yiwppus is hisgpus and kambpus (规则: MP, 深度: 7)
  LoG节点 30: hisgpus is hocgpus (规则: CE, 深度: 7)
  LoG节点 31: hocgpus is fintpus (规则: CE, 深度: 7)
  LoG节点 32: fintpus is supxpus (规则: CE, 深度: 7)
  LoG节点 33: supxpus is qosrpus (规则: CE, 深度: 7)
  LoG节点 34: qosrpus is babbpus and sixkpus (规则: MP, 深度: 7)
  LoG节点 35: qosrpus is jizcpus and zexzpus and helqpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 25
   - 初始条件数: 24
   - LoG图节点数: 36

📋 初始条件列表:
    1. gaqppus is kugmpus
    2. vulppus is fosnpus
    3. qosrpus is wuhfpus
    4. setspus is tezfpus
    5. supxpus is qosrpus and xugypus
    6. zarppus is diqrpus
    7. roplpus is jizcpus and zexzpus and helqpus
    8. hocgpus is fintpus and boxcpus
    9. nezspus is muyvpus
   10. nimspus is hisgpus and kambpus
   11. qotypus is yiwppus and hobtpus
   12. x is waqrpus
   13. muyvpus is vulppus
   14. yiwppus is nimspus
   15. qosrpus is roplpus
   16. fintpus is supxpus and kelkpus
   17. kugmpus is qotypus
   18. wuhfpus is babbpus and sixkpus
   19. fosnpus is winkpus
   20. tezfpus is zarppus and bobtpus and wukppus
   21. hisgpus is hocgpus and wodxpus
   22. winkpus is gaqppus
   23. waqrpus is setspus and jotbpus
   24. diqrpus is nezspus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 24 个前提节点

🔍 开始处理actual节点...

   节点 1: x is waqrpus
      ↻ 重复节点，计数: 2

   节点 2: waqrpus is setspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: waqrpus is setspus and jotbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: waqrpus is setspus and jotbpus

   节点 3: setspus is tezfpus
      ↻ 重复节点，计数: 2

   节点 4: tezfpus is zarppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: tezfpus is zarppus and bobtpus and wukppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: tezfpus is zarppus and bobtpus and wukppus

   节点 5: zarppus is diqrpus
      ↻ 重复节点，计数: 2

   节点 6: diqrpus is nezspus
      ↻ 重复节点，计数: 2

   节点 7: nezspus is muyvpus
      ↻ 重复节点，计数: 2

   节点 8: muyvpus is vulppus
      ↻ 重复节点，计数: 2

   节点 9: vulppus is fosnpus
      ↻ 重复节点，计数: 2

   节点 10: fosnpus is winkpus
      ↻ 重复节点，计数: 2

   节点 11: winkpus is gaqppus
      ↻ 重复节点，计数: 2

   节点 12: gaqppus is kugmpus
      ↻ 重复节点，计数: 2

   节点 13: kugmpus is qotypus
      ↻ 重复节点，计数: 2

   节点 14: qotypus is yiwppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qotypus is yiwppus and hobtpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qotypus is yiwppus and hobtpus

   节点 15: yiwppus is nimspus
      ↻ 重复节点，计数: 2

   节点 16: nimspus is hisgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: nimspus is hisgpus and kambpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: nimspus is hisgpus and kambpus

   节点 17: hisgpus is hocgpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: hisgpus is hocgpus
      ✅ 验证成功 + LoG匹配

   节点 18: hocgpus is fintpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: hocgpus is fintpus
      ✅ 验证成功 + LoG匹配

   节点 19: fintpus is supxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: fintpus is supxpus
      ✅ 验证成功 + LoG匹配

   节点 20: supxpus is qosrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: supxpus is qosrpus
      ✅ 验证成功 + LoG匹配

   节点 21: qosrpus is wuhfpus
      ↻ 重复节点，计数: 2

   节点 22: wuhfpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wuhfpus is babbpus and sixkpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wuhfpus is babbpus and sixkpus

   节点 23: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is babbpus and jizcpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is hisgpus (深度3)
[子树点亮]     └─ 点亮依赖节点: hisgpus is babbpus and jizcpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is zarppus (深度4)
[子树点亮]     └─ 点亮依赖节点: zarppus is hisgpus (深度4)
[子树点亮]     └─ 点亮依赖节点: hisgpus is babbpus and jizcpus and zexzpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is zarppus and bobtpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zarppus is kugmpus (深度5)
[子树点亮]     └─ 点亮依赖节点: kugmpus is hisgpus (深度5)
[子树点亮]     └─ 点亮依赖节点: hisgpus is qosrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: qosrpus is babbpus and jizcpus and zexzpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is setspus (深度6)
[子树点亮]     └─ 点亮依赖节点: setspus is zarppus and bobtpus (深度6)
[子树点亮]     └─ 点亮依赖节点: zarppus is vulppus (深度6)
[子树点亮]     └─ 点亮依赖节点: vulppus is kugmpus (深度6)
[子树点亮]     └─ 点亮依赖节点: kugmpus is yiwppus (深度6)
[子树点亮]     └─ 点亮依赖节点: yiwppus is hisgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: hisgpus is fintpus (深度6)
[子树点亮]     └─ 点亮依赖节点: fintpus is qosrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: qosrpus is babbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: qosrpus is jizcpus and zexzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is setspus and jotbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: setspus is zarppus and bobtpus and wukppus (深度7)
[子树点亮]     └─ 点亮依赖节点: zarppus is nezspus (深度7)
[子树点亮]     └─ 点亮依赖节点: nezspus is vulppus (深度7)
[子树点亮]     └─ 点亮依赖节点: vulppus is winkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: winkpus is kugmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kugmpus is yiwppus and hobtpus (深度7)
[子树点亮]     └─ 点亮依赖节点: yiwppus is hisgpus and kambpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qosrpus is babbpus and sixkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qosrpus is jizcpus and zexzpus and helqpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 31 个节点
      ✅ 验证成功 + LoG匹配

   节点 24: x is babbpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 24
   - 新增节点: 10
   - 更新已存在节点: 14
   - 点亮的LoG节点: 36

🎯 推理质量统计:
   - 完美推理: 10 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 36节点, 24前提, 复杂度1-24

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 34
   - 前提节点: 24
   - 推理节点: 10
   - 幻觉节点: 0
   - 点亮LoG节点: 36

✅ 推理节点详情:
   🟢 waqrpus is setspus (出现1次, 质量:perfect)
   🟢 tezfpus is zarppus (出现1次, 质量:perfect)
   🟢 qotypus is yiwppus (出现1次, 质量:perfect)
   🟢 nimspus is hisgpus (出现1次, 质量:perfect)
   🟢 hisgpus is hocgpus (出现1次, 质量:perfect)
   🟢 hocgpus is fintpus (出现1次, 质量:perfect)
   🟢 fintpus is supxpus (出现1次, 质量:perfect)
   🟢 supxpus is qosrpus (出现1次, 质量:perfect)
   🟢 wuhfpus is babbpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现2次, 质量:perfect)

🔥 点亮的LoG节点:
   - kugmpus is yiwppus and hobtpus
   - fintpus is supxpus
   - hisgpus is babbpus and jizcpus
   - zarppus is hisgpus
   - hisgpus is fintpus
   - zarppus is nezspus
   - setspus is zarppus and bobtpus and wukppus
   - qosrpus is babbpus and jizcpus and zexzpus
   - hisgpus is babbpus and jizcpus and zexzpus
   - qosrpus is babbpus
   - x is setspus
   - x is setspus and jotbpus
   - hisgpus is hocgpus
   - x is zarppus
   - hisgpus is qosrpus
   - kugmpus is hisgpus
   - vulppus is kugmpus
   - qosrpus is babbpus and sixkpus
   - qosrpus is jizcpus and zexzpus
   - qosrpus is jizcpus and zexzpus and helqpus
   - zarppus is vulppus
   - yiwppus is hisgpus
   - hocgpus is fintpus
   - fintpus is qosrpus
   - nezspus is vulppus
   - setspus is zarppus and bobtpus
   - x is hisgpus
   - zarppus is kugmpus
   - vulppus is winkpus
   - winkpus is kugmpus
   - x is zarppus and bobtpus
   - kugmpus is yiwppus
   - yiwppus is hisgpus and kambpus
   - supxpus is qosrpus
   - x is babbpus
   - x is babbpus and jizcpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus (第7层)
   节点Coverage: 36/36 = 100.00%
   前提条件Coverage: 13/24 = 54.17%
   各推理层点亮比例:
     第1层: 14/14 = 100.00%
     第2层: 10/10 = 100.00%
     第3层: 5/5 = 100.00%
     第4层: 3/3 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/10 = 0.00%
   可推导节点: 10/10
   Strict Error Rate: 0/10 = 0.00%
   严格有效节点: 10/10

   详细分析:
     完美推理: 10 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 18/50
================================================================================
记录索引: 17
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_17.json
✅ 使用缓存结果:
   - 句子数: 4
   - 提取的语句数: 18
   - 初始条件数: 31

=== Statement提取完成 ===
总句子数: 4
成功提取: 4
失败提取: 0
总statements数: 18

=== 开始清洗Statement格式 ===
原始statements数: 18
清洗后statements数: 18
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 18
标准化后节点数: 18
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → sujbpus (原始: x is sujbpus)
  2. [actual] sujbpus → xafnpus (原始: sujbpus is xafnpus)
  3. [actual] xafnpus → kivlpus (原始: xafnpus is kivlpus)
  4. [actual] kivlpus → zobbpus (原始: kivlpus is zobbpus)
  5. [actual] zobbpus → xifvpus (原始: zobbpus is xifvpus)
  6. [actual] xifvpus → qonnpus (原始: xifvpus is qonnpus)
  7. [actual] qonnpus → dafgpus (原始: qonnpus is dafgpus)
  8. [actual] dafgpus → xerrpus (原始: dafgpus is xerrpus)
  9. [actual] xerrpus → jeptpus (原始: xerrpus is jeptpus)
  10. [actual] jeptpus → teyppus (原始: jeptpus is teyppus)
  11. [actual] teyppus → quxhpus (原始: teyppus is quxhpus)
  12. [actual] quxhpus → hifcpus (原始: quxhpus is hifcpus)
  13. [actual] hifcpus → fehppus (原始: hifcpus is fehppus)
  14. [actual] fehppus → huscpus (原始: fehppus is huscpus)
  15. [actual] huscpus → korzpus (原始: huscpus is korzpus)
  16. [actual] korzpus → fuynpus (原始: korzpus is fuynpus)
  17. [actual] fuynpus → babbpus (原始: fuynpus is babbpus)
  18. [actual] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 41
[后处理] 加载LoG图，包含 41 个节点
  LoG节点 0: x is babbpus (规则: MP, 深度: 1)
  LoG节点 1: x is dafgpus (规则: CE, 深度: 2)
  LoG节点 2: dafgpus is babbpus (规则: CE, 深度: 2)
  LoG节点 3: x is dafgpus and kebspus (规则: MP, 深度: 3)
  LoG节点 4: dafgpus is babbpus and jexrpus (规则: MP, 深度: 3)
  LoG节点 5: x is zobbpus (规则: CE, 深度: 4)
  LoG节点 6: zobbpus is dafgpus and kebspus (规则: CI, 深度: 4)
  LoG节点 7: dafgpus is hifcpus (规则: CE, 深度: 4)
  LoG节点 8: hifcpus is babbpus and jexrpus (规则: MP, 深度: 4)
  LoG节点 9: x is zobbpus and lujrpus (规则: MP, 深度: 5)
  LoG节点 10: zobbpus is dafgpus (规则: CE, 深度: 5)
  LoG节点 11: zobbpus is kebspus (规则: MP, 深度: 5)
  LoG节点 12: dafgpus is hifcpus and mohhpus (规则: MP, 深度: 5)
  LoG节点 13: hifcpus is korzpus (规则: CE, 深度: 5)
  LoG节点 14: korzpus is babbpus and jexrpus (规则: CI, 深度: 5)
  LoG节点 15: x is xafnpus (规则: CE, 深度: 6)
  LoG节点 16: xafnpus is zobbpus and lujrpus (规则: CI, 深度: 6)
  LoG节点 17: zobbpus is dafgpus and lovrpus (规则: MP, 深度: 6)
  LoG节点 18: zobbpus is yannpus (规则: CE, 深度: 6)
  LoG节点 19: yannpus is kebspus (规则: MP, 深度: 6)
  LoG节点 20: dafgpus is jeptpus (规则: CE, 深度: 6)
  LoG节点 21: jeptpus is hifcpus and mohhpus (规则: MP, 深度: 6)
  LoG节点 22: hifcpus is korzpus and dahgpus (规则: MP, 深度: 6)
  LoG节点 23: korzpus is babbpus (规则: CE, 深度: 6)
  LoG节点 24: korzpus is jexrpus (规则: MP, 深度: 6)
  LoG节点 25: x is xafnpus and zapppus (规则: MP, 深度: 7)
  LoG节点 26: xafnpus is zobbpus (规则: MP, 深度: 7)
  LoG节点 27: xafnpus is lujrpus (规则: MP, 深度: 7)
  LoG节点 28: zobbpus is qonnpus (规则: MP, 深度: 7)
  LoG节点 29: qonnpus is dafgpus and lovrpus (规则: CI, 深度: 7)
  LoG节点 30: zobbpus is yannpus and felcpus (规则: MP, 深度: 7)
  LoG节点 31: yannpus is celwpus (规则: CE, 深度: 7)
  LoG节点 32: celwpus is kebspus (规则: MP, 深度: 7)
  LoG节点 33: dafgpus is jeptpus and cosxpus (规则: MP, 深度: 7)
  LoG节点 34: jeptpus is quxhpus (规则: MP, 深度: 7)
  LoG节点 35: quxhpus is hifcpus and mohhpus (规则: CI, 深度: 7)
  LoG节点 36: hifcpus is huscpus (规则: MP, 深度: 7)
  LoG节点 37: huscpus is korzpus and dahgpus (规则: CI, 深度: 7)
  LoG节点 38: korzpus is babbpus and vifhpus (规则: MP, 深度: 7)
  LoG节点 39: korzpus is xovypus (规则: MP, 深度: 7)
  LoG节点 40: xovypus is jexrpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 18
   - 初始条件数: 31
   - LoG图节点数: 41

📋 初始条件列表:
    1. qonnpus is dafgpus
    2. korzpus is tezdpus
    3. jarlpus is yannpus and felcpus
    4. zobbpus is xifvpus
    5. sujbpus is xafnpus and zapppus
    6. qinypus is lujrpus
    7. korzpus is fuynpus
    8. kivlpus is zobbpus
    9. celwpus is keyxpus
   10. qonnpus is lovrpus
   11. keyxpus is kebspus
   12. xafnpus is qinypus
   13. huscpus is korzpus
   14. teyppus is quxhpus
   15. fuynpus is babbpus and vifhpus
   16. quxhpus is mohhpus
   17. yannpus is celwpus and nidmpus
   18. x is sujbpus
   19. hifcpus is fehppus
   20. huscpus is dahgpus
   21. xovypus is fubqpus
   22. jeptpus is teyppus
   23. zobbpus is jarlpus
   24. fehppus is huscpus
   25. xerrpus is jeptpus and cosxpus
   26. dafgpus is xerrpus
   27. xafnpus is kivlpus
   28. tezdpus is xovypus
   29. quxhpus is hifcpus
   30. fubqpus is jexrpus
   31. xifvpus is qonnpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 31 个前提节点

🔍 开始处理actual节点...

   节点 1: x is sujbpus
      ↻ 重复节点，计数: 2

   节点 2: sujbpus is xafnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: sujbpus is xafnpus and zapppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: sujbpus is xafnpus and zapppus

   节点 3: xafnpus is kivlpus
      ↻ 重复节点，计数: 2

   节点 4: kivlpus is zobbpus
      ↻ 重复节点，计数: 2

   节点 5: zobbpus is xifvpus
      ↻ 重复节点，计数: 2

   节点 6: xifvpus is qonnpus
      ↻ 重复节点，计数: 2

   节点 7: qonnpus is dafgpus
      ↻ 重复节点，计数: 2

   节点 8: dafgpus is xerrpus
      ↻ 重复节点，计数: 2

   节点 9: xerrpus is jeptpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: xerrpus is jeptpus and cosxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: xerrpus is jeptpus and cosxpus

   节点 10: jeptpus is teyppus
      ↻ 重复节点，计数: 2

   节点 11: teyppus is quxhpus
      ↻ 重复节点，计数: 2

   节点 12: quxhpus is hifcpus
      ↻ 重复节点，计数: 2

   节点 13: hifcpus is fehppus
      ↻ 重复节点，计数: 2

   节点 14: fehppus is huscpus
      ↻ 重复节点，计数: 2

   节点 15: huscpus is korzpus
      ↻ 重复节点，计数: 2

   节点 16: korzpus is fuynpus
      ↻ 重复节点，计数: 2

   节点 17: fuynpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: fuynpus is babbpus and vifhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: fuynpus is babbpus and vifhpus

   节点 18: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is dafgpus (深度2)
[子树点亮]     └─ 点亮依赖节点: dafgpus is babbpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is dafgpus and kebspus (深度3)
[子树点亮]     └─ 点亮依赖节点: dafgpus is babbpus and jexrpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is zobbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: zobbpus is dafgpus and kebspus (深度4)
[子树点亮]     └─ 点亮依赖节点: dafgpus is hifcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: hifcpus is babbpus and jexrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is zobbpus and lujrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zobbpus is dafgpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zobbpus is kebspus (深度5)
[子树点亮]     └─ 点亮依赖节点: dafgpus is hifcpus and mohhpus (深度5)
[子树点亮]     └─ 点亮依赖节点: hifcpus is korzpus (深度5)
[子树点亮]     └─ 点亮依赖节点: korzpus is babbpus and jexrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is xafnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: xafnpus is zobbpus and lujrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: zobbpus is dafgpus and lovrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: zobbpus is yannpus (深度6)
[子树点亮]     └─ 点亮依赖节点: yannpus is kebspus (深度6)
[子树点亮]     └─ 点亮依赖节点: dafgpus is jeptpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jeptpus is hifcpus and mohhpus (深度6)
[子树点亮]     └─ 点亮依赖节点: hifcpus is korzpus and dahgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: korzpus is babbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: korzpus is jexrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is xafnpus and zapppus (深度7)
[子树点亮]     └─ 点亮依赖节点: xafnpus is zobbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xafnpus is lujrpus (深度7)
[子树点亮]     └─ 点亮依赖节点: zobbpus is qonnpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qonnpus is dafgpus and lovrpus (深度7)
[子树点亮]     └─ 点亮依赖节点: zobbpus is yannpus and felcpus (深度7)
[子树点亮]     └─ 点亮依赖节点: yannpus is celwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: celwpus is kebspus (深度7)
[子树点亮]     └─ 点亮依赖节点: dafgpus is jeptpus and cosxpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jeptpus is quxhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: quxhpus is hifcpus and mohhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: hifcpus is huscpus (深度7)
[子树点亮]     └─ 点亮依赖节点: huscpus is korzpus and dahgpus (深度7)
[子树点亮]     └─ 点亮依赖节点: korzpus is babbpus and vifhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: korzpus is xovypus (深度7)
[子树点亮]     └─ 点亮依赖节点: xovypus is jexrpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 40 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 18
   - 新增节点: 4
   - 更新已存在节点: 14
   - 点亮的LoG节点: 41

🎯 推理质量统计:
   - 完美推理: 4 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 41节点, 31前提, 复杂度1-31

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 35
   - 前提节点: 31
   - 推理节点: 4
   - 幻觉节点: 0
   - 点亮LoG节点: 41

✅ 推理节点详情:
   🟢 sujbpus is xafnpus (出现1次, 质量:perfect)
   🟢 xerrpus is jeptpus (出现1次, 质量:perfect)
   🟢 fuynpus is babbpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - xafnpus is zobbpus and lujrpus
   - hifcpus is huscpus
   - x is zobbpus
   - x is xafnpus and zapppus
   - x is dafgpus
   - dafgpus is babbpus
   - dafgpus is jeptpus and cosxpus
   - korzpus is babbpus and vifhpus
   - x is zobbpus and lujrpus
   - korzpus is jexrpus
   - xafnpus is lujrpus
   - dafgpus is babbpus and jexrpus
   - x is dafgpus and kebspus
   - zobbpus is qonnpus
   - yannpus is celwpus
   - jeptpus is quxhpus
   - hifcpus is babbpus and jexrpus
   - yannpus is kebspus
   - dafgpus is hifcpus
   - x is xafnpus
   - xafnpus is zobbpus
   - jeptpus is hifcpus and mohhpus
   - zobbpus is yannpus
   - hifcpus is korzpus
   - zobbpus is dafgpus and kebspus
   - zobbpus is dafgpus and lovrpus
   - hifcpus is korzpus and dahgpus
   - zobbpus is kebspus
   - celwpus is kebspus
   - xovypus is jexrpus
   - korzpus is babbpus
   - huscpus is korzpus and dahgpus
   - dafgpus is hifcpus and mohhpus
   - quxhpus is hifcpus and mohhpus
   - dafgpus is jeptpus
   - zobbpus is yannpus and felcpus
   - x is babbpus
   - zobbpus is dafgpus
   - korzpus is babbpus and jexrpus
   - korzpus is xovypus
   - qonnpus is dafgpus and lovrpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus (第7层)
   节点Coverage: 41/41 = 100.00%
   前提条件Coverage: 14/31 = 45.16%
   各推理层点亮比例:
     第1层: 16/16 = 100.00%
     第2层: 10/10 = 100.00%
     第3层: 6/6 = 100.00%
     第4层: 4/4 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 2/2 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/4 = 0.00%
   可推导节点: 4/4
   Strict Error Rate: 0/4 = 0.00%
   严格有效节点: 4/4

   详细分析:
     完美推理: 4 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 19/50
================================================================================
记录索引: 18
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_18.json
✅ 使用缓存结果:
   - 句子数: 6
   - 提取的语句数: 25
   - 初始条件数: 24

=== Statement提取完成 ===
总句子数: 6
成功提取: 6
失败提取: 0
总statements数: 25

=== 开始清洗Statement格式 ===
原始statements数: 25
清洗后statements数: 25
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 25
标准化后节点数: 25
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → yexnpus (原始: x is yexnpus)
  2. [actual] yexnpus → divqpus (原始: yexnpus is divqpus)
  3. [actual] divqpus → wefbpus (原始: divqpus is wefbpus)
  4. [actual] wefbpus → nadbpus (原始: wefbpus is nadbpus)
  5. [actual] nadbpus → fusrpus (原始: nadbpus is fusrpus)
  6. [actual] fusrpus → quzrpus (原始: fusrpus is quzrpus)
  7. [actual] quzrpus → lozypus (原始: quzrpus is lozypus)
  8. [actual] lozypus → voyppus (原始: lozypus is voyppus)
  9. [actual] voyppus → lidbpus (原始: voyppus is lidbpus)
  10. [actual] lidbpus → morvpus (原始: lidbpus is morvpus)
  11. [actual] morvpus → lutkpus (原始: morvpus is lutkpus)
  12. [actual] lutkpus → lukmpus (原始: lutkpus is lukmpus)
  13. [actual] lukmpus → fubqpus (原始: lukmpus is fubqpus)
  14. [actual] fubqpus → jurfpus (原始: fubqpus is jurfpus)
  15. [actual] jurfpus → merdpus (原始: jurfpus is merdpus)
  16. [actual] merdpus → cillpus (原始: merdpus is cillpus)
  17. [actual] cillpus → fesvpus (原始: cillpus is fesvpus)
  18. [actual] fesvpus → cijspus (原始: fesvpus is cijspus)
  19. [actual] cijspus → biqvpus (原始: cijspus is biqvpus)
  20. [actual] biqvpus → xuydpus (原始: biqvpus is xuydpus)
  21. [actual] xuydpus → qoxxpus (原始: xuydpus is qoxxpus)
  22. [actual] qoxxpus → bachpus (原始: qoxxpus is bachpus)
  23. [actual] x → bachpus (原始: x is bachpus)
  24. [actual] x → bachpus (原始: x is bachpus)
  25. [actual] x → babbpus or baccpus or bachpus (原始: x is babbpus or baccpus or bachpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 38
[后处理] 加载LoG图，包含 38 个节点
  LoG节点 0: x is babbpus or baccpus or bachpus (规则: MP, 深度: 1)
  LoG节点 1: x is lozypus (规则: CE, 深度: 2)
  LoG节点 2: lozypus is babbpus or baccpus or bachpus (规则: DI, 深度: 2)
  LoG节点 3: x is lozypus and xahgpus (规则: MP, 深度: 3)
  LoG节点 4: lozypus is bachpus (规则: MP, 深度: 3)
  LoG节点 5: x is wefbpus (规则: CE, 深度: 4)
  LoG节点 6: wefbpus is lozypus and xahgpus (规则: CE, 深度: 4)
  LoG节点 7: lozypus is lukmpus (规则: CE, 深度: 4)
  LoG节点 8: lukmpus is bachpus (规则: MP, 深度: 4)
  LoG节点 9: x is wefbpus and nojdpus (规则: MP, 深度: 5)
  LoG节点 10: wefbpus is lozypus and xahgpus and wuzspus (规则: MP, 深度: 5)
  LoG节点 11: lozypus is lukmpus and vurnpus (规则: MP, 深度: 5)
  LoG节点 12: lukmpus is cijspus (规则: MP, 深度: 5)
  LoG节点 13: cijspus is bachpus (规则: CE, 深度: 5)
  LoG节点 14: x is divqpus (规则: CE, 深度: 6)
  LoG节点 15: divqpus is wefbpus and nojdpus (规则: CI, 深度: 6)
  LoG节点 16: wefbpus is fusrpus (规则: MP, 深度: 6)
  LoG节点 17: fusrpus is lozypus and xahgpus and wuzspus (规则: CE, 深度: 6)
  LoG节点 18: lozypus is lidbpus (规则: CE, 深度: 6)
  LoG节点 19: lidbpus is lukmpus and vurnpus (规则: MP, 深度: 6)
  LoG节点 20: lukmpus is merdpus (规则: MP, 深度: 6)
  LoG节点 21: merdpus is cijspus (规则: MP, 深度: 6)
  LoG节点 22: cijspus is bachpus and mawjpus (规则: MP, 深度: 6)
  LoG节点 23: x is divqpus and nalfpus (规则: MP, 深度: 7)
  LoG节点 24: divqpus is wefbpus (规则: CE, 深度: 7)
  LoG节点 25: divqpus is nojdpus (规则: MP, 深度: 7)
  LoG节点 26: wefbpus is nadbpus (规则: CE, 深度: 7)
  LoG节点 27: nadbpus is fusrpus (规则: CE, 深度: 7)
  LoG节点 28: fusrpus is lozypus and xahgpus and wuzspus and jaswpus (规则: MP, 深度: 7)
  LoG节点 29: lozypus is lidbpus and wiwkpus (规则: MP, 深度: 7)
  LoG节点 30: lidbpus is morvpus (规则: CE, 深度: 7)
  LoG节点 31: morvpus is lukmpus and vurnpus (规则: MP, 深度: 7)
  LoG节点 32: lukmpus is fubqpus (规则: CE, 深度: 7)
  LoG节点 33: fubqpus is merdpus (规则: MP, 深度: 7)
  LoG节点 34: merdpus is fesvpus (规则: MP, 深度: 7)
  LoG节点 35: fesvpus is cijspus (规则: CE, 深度: 7)
  LoG节点 36: cijspus is xuydpus (规则: MP, 深度: 7)
  LoG节点 37: xuydpus is bachpus and mawjpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 25
   - 初始条件数: 24
   - LoG图节点数: 38

📋 初始条件列表:
    1. lukmpus is fubqpus and cakgpus
    2. jurfpus is merdpus
    3. fusrpus is quzrpus
    4. divqpus is wefbpus and posqpus
    5. biqvpus is xuydpus
    6. fubqpus is jurfpus
    7. wefbpus is nadbpus and hamfpus
    8. xuydpus is qoxxpus
    9. nadbpus is fusrpus and hucwpus
   10. merdpus is cillpus
   11. lutkpus is lukmpus and vurnpus
   12. voyppus is lidbpus and wiwkpus
   13. fesvpus is cijspus and hulkpus
   14. lidbpus is morvpus and dotjpus
   15. quzrpus is lozypus and xahgpus and wuzspus and jaswpus
   16. yexnpus is divqpus and nalfpus
   17. morvpus is lutkpus
   18. cijspus is biqvpus
   19. x is yexnpus
   20. fefdpus is nojdpus
   21. qoxxpus is bachpus and mawjpus
   22. divqpus is fefdpus
   23. lozypus is voyppus
   24. cillpus is fesvpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 24 个前提节点

🔍 开始处理actual节点...

   节点 1: x is yexnpus
      ↻ 重复节点，计数: 2

   节点 2: yexnpus is divqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yexnpus is divqpus and nalfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yexnpus is divqpus and nalfpus

   节点 3: divqpus is wefbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: divqpus is wefbpus
      ✅ 验证成功 + LoG匹配

   节点 4: wefbpus is nadbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: wefbpus is nadbpus
      ✅ 验证成功 + LoG匹配

   节点 5: nadbpus is fusrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: nadbpus is fusrpus
      ✅ 验证成功 + LoG匹配

   节点 6: fusrpus is quzrpus
      ↻ 重复节点，计数: 2

   节点 7: quzrpus is lozypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: quzrpus is lozypus and xahgpus and wuzspus and jaswpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: quzrpus is lozypus and xahgpus and wuzspus and jaswpus

   节点 8: lozypus is voyppus
      ↻ 重复节点，计数: 2

   节点 9: voyppus is lidbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: voyppus is lidbpus and wiwkpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: voyppus is lidbpus and wiwkpus

   节点 10: lidbpus is morvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: lidbpus is morvpus
      ✅ 验证成功 + LoG匹配

   节点 11: morvpus is lutkpus
      ↻ 重复节点，计数: 2

   节点 12: lutkpus is lukmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: lutkpus is lukmpus and vurnpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: lutkpus is lukmpus and vurnpus

   节点 13: lukmpus is fubqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: lukmpus is fubqpus
      ✅ 验证成功 + LoG匹配

   节点 14: fubqpus is jurfpus
      ↻ 重复节点，计数: 2

   节点 15: jurfpus is merdpus
      ↻ 重复节点，计数: 2

   节点 16: merdpus is cillpus
      ↻ 重复节点，计数: 2

   节点 17: cillpus is fesvpus
      ↻ 重复节点，计数: 2

   节点 18: fesvpus is cijspus
      🔍 验证新节点...
[后处理] 点亮LoG节点: fesvpus is cijspus
      ✅ 验证成功 + LoG匹配

   节点 19: cijspus is biqvpus
      ↻ 重复节点，计数: 2

   节点 20: biqvpus is xuydpus
      ↻ 重复节点，计数: 2

   节点 21: xuydpus is qoxxpus
      ↻ 重复节点，计数: 2

   节点 22: qoxxpus is bachpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qoxxpus is bachpus and mawjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qoxxpus is bachpus and mawjpus

   节点 23: x is bachpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is yexnpus → yexnpus is bachpus
[后处理] 基于推理轨迹点亮节点，使用了 22 个前提条件:
  - 前提: x is yexnpus
  - 前提: yexnpus is divqpus
  - 前提: divqpus is wefbpus
  - 前提: wefbpus is nadbpus
  - 前提: nadbpus is fusrpus
  - 前提: fusrpus is quzrpus
  - 前提: quzrpus is lozypus
  - 前提: lozypus is voyppus
  - 前提: voyppus is lidbpus
  - 前提: lidbpus is morvpus
  - 前提: morvpus is lutkpus
  - 前提: lutkpus is lukmpus
  - 前提: lukmpus is fubqpus
  - 前提: fubqpus is jurfpus
  - 前提: jurfpus is merdpus
  - 前提: merdpus is cillpus
  - 前提: cillpus is fesvpus
  - 前提: fesvpus is cijspus
  - 前提: cijspus is biqvpus
  - 前提: biqvpus is xuydpus
  - 前提: xuydpus is qoxxpus
  - 前提: qoxxpus is bachpus
  ✓ 点亮LoG节点: x is babbpus or baccpus or bachpus
[子树点亮]     └─ 点亮依赖节点: x is lozypus (深度2)
[子树点亮]     └─ 点亮依赖节点: lozypus is babbpus or baccpus or bachpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is lozypus and xahgpus (深度3)
[子树点亮]     └─ 点亮依赖节点: lozypus is bachpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is wefbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: wefbpus is lozypus and xahgpus (深度4)
[子树点亮]     └─ 点亮依赖节点: lozypus is lukmpus (深度4)
[子树点亮]     └─ 点亮依赖节点: lukmpus is bachpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is wefbpus and nojdpus (深度5)
[子树点亮]     └─ 点亮依赖节点: wefbpus is lozypus and xahgpus and wuzspus (深度5)
[子树点亮]     └─ 点亮依赖节点: lozypus is lukmpus and vurnpus (深度5)
[子树点亮]     └─ 点亮依赖节点: lukmpus is cijspus (深度5)
[子树点亮]     └─ 点亮依赖节点: cijspus is bachpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is divqpus (深度6)
[子树点亮]     └─ 点亮依赖节点: divqpus is wefbpus and nojdpus (深度6)
[子树点亮]     └─ 点亮依赖节点: wefbpus is fusrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: fusrpus is lozypus and xahgpus and wuzspus (深度6)
[子树点亮]     └─ 点亮依赖节点: lozypus is lidbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: lidbpus is lukmpus and vurnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: lukmpus is merdpus (深度6)
[子树点亮]     └─ 点亮依赖节点: merdpus is cijspus (深度6)
[子树点亮]     └─ 点亮依赖节点: cijspus is bachpus and mawjpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is divqpus and nalfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: divqpus is nojdpus (深度7)
[子树点亮]     └─ 点亮依赖节点: fusrpus is lozypus and xahgpus and wuzspus and jaswpus (深度7)
[子树点亮]     └─ 点亮依赖节点: lozypus is lidbpus and wiwkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: morvpus is lukmpus and vurnpus (深度7)
[子树点亮]     └─ 点亮依赖节点: fubqpus is merdpus (深度7)
[子树点亮]     └─ 点亮依赖节点: merdpus is fesvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cijspus is xuydpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xuydpus is bachpus and mawjpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 31 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 24: x is bachpus
      ↻ 重复节点，计数: 2

   节点 25: x is babbpus or baccpus or bachpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 25
   - 新增节点: 13
   - 更新已存在节点: 12
   - 点亮的LoG节点: 38

🎯 推理质量统计:
   - 完美推理: 13 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 38节点, 24前提, 复杂度1-24

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 37
   - 前提节点: 24
   - 推理节点: 13
   - 幻觉节点: 0
   - 点亮LoG节点: 38

✅ 推理节点详情:
   🟢 yexnpus is divqpus (出现1次, 质量:perfect)
   🟢 divqpus is wefbpus (出现1次, 质量:perfect)
   🟢 wefbpus is nadbpus (出现1次, 质量:perfect)
   🟢 nadbpus is fusrpus (出现1次, 质量:perfect)
   🟢 quzrpus is lozypus (出现1次, 质量:perfect)
   🟢 voyppus is lidbpus (出现1次, 质量:perfect)
   🟢 lidbpus is morvpus (出现1次, 质量:perfect)
   🟢 lutkpus is lukmpus (出现1次, 质量:perfect)
   🟢 lukmpus is fubqpus (出现1次, 质量:perfect)
   🟢 fesvpus is cijspus (出现1次, 质量:perfect)
   🟢 qoxxpus is bachpus (出现1次, 质量:perfect)
   🟢 x is bachpus (出现2次, 质量:perfect)
   🟢 x is babbpus or baccpus or bachpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - lozypus is lukmpus
   - wefbpus is lozypus and xahgpus
   - x is lozypus and xahgpus
   - wefbpus is fusrpus
   - merdpus is cijspus
   - divqpus is nojdpus
   - fubqpus is merdpus
   - x is wefbpus
   - fusrpus is lozypus and xahgpus and wuzspus
   - morvpus is lukmpus and vurnpus
   - fesvpus is cijspus
   - cijspus is bachpus
   - x is babbpus or baccpus or bachpus
   - lidbpus is lukmpus and vurnpus
   - lidbpus is morvpus
   - x is divqpus and nalfpus
   - lukmpus is merdpus
   - wefbpus is nadbpus
   - divqpus is wefbpus and nojdpus
   - lozypus is lukmpus and vurnpus
   - xuydpus is bachpus and mawjpus
   - lozypus is bachpus
   - lukmpus is bachpus
   - lukmpus is cijspus
   - merdpus is fesvpus
   - lukmpus is fubqpus
   - lozypus is lidbpus
   - x is divqpus
   - fusrpus is lozypus and xahgpus and wuzspus and jaswpus
   - x is lozypus
   - lozypus is lidbpus and wiwkpus
   - cijspus is bachpus and mawjpus
   - nadbpus is fusrpus
   - x is wefbpus and nojdpus
   - wefbpus is lozypus and xahgpus and wuzspus
   - cijspus is xuydpus
   - divqpus is wefbpus
   - lozypus is babbpus or baccpus or bachpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus or baccpus or bachpus (第7层)
   节点Coverage: 38/38 = 100.00%
   前提条件Coverage: 11/24 = 45.83%
   各推理层点亮比例:
     第1层: 15/15 = 100.00%
     第2层: 9/9 = 100.00%
     第3层: 5/5 = 100.00%
     第4层: 4/4 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 2/2 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/13 = 0.00%
   可推导节点: 13/13
   Strict Error Rate: 0/13 = 0.00%
   严格有效节点: 13/13

   详细分析:
     完美推理: 13 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 20/50
================================================================================
记录索引: 19
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_19.json
✅ 使用缓存结果:
   - 句子数: 39
   - 提取的语句数: 49
   - 初始条件数: 32

=== Statement提取完成 ===
总句子数: 39
成功提取: 39
失败提取: 0
总statements数: 49

=== 开始清洗Statement格式 ===
原始statements数: 49
清洗后statements数: 49
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 49
标准化后节点数: 49
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babbpus (原始: x is babbpus)
  2. [planning] x → baccpus (原始: x is baccpus)
  3. [planning] x → baccpus (原始: x is baccpus)
  4. [actual] x → mircpus and yesppus (原始: x is mircpus and yesppus)
  5. [actual] mircpus → rahypus (原始: mircpus is rahypus)
  6. [actual] rahypus → peqkpus and yawlpus (原始: rahypus is peqkpus and yawlpus)
  7. [actual] peqkpus → hexjpus and cilvpus (原始: peqkpus is hexjpus and cilvpus)
  8. [actual] hexjpus → qiwxpus (原始: hexjpus is qiwxpus)
  9. [actual] hexjpus → zagvpus (原始: hexjpus is zagvpus)
  10. [actual] hexjpus → xatrpus (原始: hexjpus is xatrpus)
  11. [actual] qiwxpus → nibbpus and cuyhpus (原始: qiwxpus is nibbpus and cuyhpus)
  12. [actual] qiwxpus → nibbpus (原始: qiwxpus is nibbpus)
  13. [actual] nibbpus → vudrpus (原始: nibbpus is vudrpus)
  14. [actual] vudrpus → famhpus and yocjpus (原始: vudrpus is famhpus and yocjpus)
  15. [actual] famhpus → cedcpus (原始: famhpus is cedcpus)
  16. [actual] cedcpus → recxpus and zuhkpus (原始: cedcpus is recxpus and zuhkpus)
  17. [actual] qiwxpus → cuyhpus (原始: qiwxpus is cuyhpus)
  18. [actual] cuyhpus → qidwpus and kabfpus (原始: cuyhpus is qidwpus and kabfpus)
  19. [actual] qidwpus → duympus and zegmpus (原始: qidwpus is duympus and zegmpus)
  20. [actual] duympus → gimhpus (原始: duympus is gimhpus)
  21. [actual] gimhpus → vohlpus (原始: gimhpus is vohlpus)
  22. [actual] vohlpus → xukxpus and kicppus (原始: vohlpus is xukxpus and kicppus)
  23. [actual] xukxpus → putmpus (原始: xukxpus is putmpus)
  24. [actual] putmpus → ceqspus (原始: putmpus is ceqspus)
  25. [actual] ceqspus → ganfpus (原始: ceqspus is ganfpus)
  26. [actual] ganfpus → waqtpus (原始: ganfpus is waqtpus)
  27. [actual] waqtpus → cuwrpus and dulcpus (原始: waqtpus is cuwrpus and dulcpus)
  28. [actual] cuwrpus → sizmpus (原始: cuwrpus is sizmpus)
  29. [actual] sizmpus → haqqpus and dadjpus (原始: sizmpus is haqqpus and dadjpus)
  30. [actual] haqqpus → bejmpus (原始: haqqpus is bejmpus)
  31. [actual] bejmpus → tobppus and goydpus (原始: bejmpus is tobppus and goydpus)
  32. [actual] tobppus → rebvpus (原始: tobppus is rebvpus)
  33. [actual] rebvpus → rudqpus (原始: rebvpus is rudqpus)
  34. [actual] rudqpus → xawppus (原始: rudqpus is xawppus)
  35. [actual] xawppus → kotzpus (原始: xawppus is kotzpus)
  36. [actual] kotzpus → gaqjpus (原始: kotzpus is gaqjpus)
  37. [actual] gaqjpus → baccpus and xiflpus (原始: gaqjpus is baccpus and xiflpus)
  38. [actual] x → qiwxpus (原始: x is qiwxpus)
  39. [actual] qiwxpus → hexjpus (原始: qiwxpus is hexjpus)
  40. [actual] qiwxpus → peqkpus (原始: qiwxpus is peqkpus)
  41. [actual] qiwxpus → rahypus (原始: qiwxpus is rahypus)
  42. [actual] qiwxpus → mircpus (原始: qiwxpus is mircpus)
  43. [actual] qiwxpus → gaqjpus (原始: qiwxpus is gaqjpus)
  44. [actual] gaqjpus → baccpus (原始: gaqjpus is baccpus)
  45. [planning] x → gaqjpus (原始: x is gaqjpus)
  46. [planning] x → baccpus (原始: x is baccpus)
  47. [actual] x → baccpus (原始: x is baccpus)
  48. [actual] x → baccpus (原始: x is baccpus)
  49. [actual] x → babbpus or baccpus (原始: x is babbpus or baccpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 48
[后处理] 加载LoG图，包含 48 个节点
  LoG节点 0: x is babbpus or baccpus (规则: MP, 深度: 1)
  LoG节点 1: x is vohlpus (规则: CE, 深度: 2)
  LoG节点 2: vohlpus is babbpus or baccpus (规则: DI, 深度: 2)
  LoG节点 3: x is vohlpus and recxpus (规则: MP, 深度: 3)
  LoG节点 4: vohlpus is baccpus (规则: MP, 深度: 3)
  LoG节点 5: x is qiwxpus (规则: MP, 深度: 4)
  LoG节点 6: qiwxpus is vohlpus and recxpus (规则: CI, 深度: 4)
  LoG节点 7: vohlpus is cuwrpus (规则: MP, 深度: 4)
  LoG节点 8: cuwrpus is baccpus (规则: MP, 深度: 4)
  LoG节点 9: x is peqkpus (规则: CE, 深度: 5)
  LoG节点 10: peqkpus is qiwxpus (规则: CE, 深度: 5)
  LoG节点 11: qiwxpus is vohlpus (规则: MP, 深度: 5)
  LoG节点 12: qiwxpus is recxpus (规则: MP, 深度: 5)
  LoG节点 13: vohlpus is putmpus (规则: CE, 深度: 5)
  LoG节点 14: putmpus is cuwrpus (规则: CE, 深度: 5)
  LoG节点 15: cuwrpus is tobppus (规则: MP, 深度: 5)
  LoG节点 16: tobppus is baccpus (规则: MP, 深度: 5)
  LoG节点 17: x is peqkpus and yawlpus (规则: MP, 深度: 6)
  LoG节点 18: peqkpus is qiwxpus and zagvpus (规则: MP, 深度: 6)
  LoG节点 19: qiwxpus is qidwpus (规则: CE, 深度: 6)
  LoG节点 20: qidwpus is vohlpus (规则: MP, 深度: 6)
  LoG节点 21: qiwxpus is famhpus (规则: MP, 深度: 6)
  LoG节点 22: famhpus is recxpus (规则: CE, 深度: 6)
  LoG节点 23: vohlpus is putmpus and nornpus (规则: MP, 深度: 6)
  LoG节点 24: putmpus is cuwrpus and dulcpus (规则: MP, 深度: 6)
  LoG节点 25: cuwrpus is haqqpus (规则: CE, 深度: 6)
  LoG节点 26: haqqpus is tobppus (规则: CE, 深度: 6)
  LoG节点 27: tobppus is kotzpus (规则: MP, 深度: 6)
  LoG节点 28: kotzpus is baccpus (规则: CE, 深度: 6)
  LoG节点 29: x is mircpus (规则: CE, 深度: 7)
  LoG节点 30: mircpus is peqkpus and yawlpus (规则: MP, 深度: 7)
  LoG节点 31: peqkpus is hexjpus (规则: CE, 深度: 7)
  LoG节点 32: hexjpus is qiwxpus and zagvpus (规则: CE, 深度: 7)
  LoG节点 33: qiwxpus is qidwpus and kabfpus (规则: MP, 深度: 7)
  LoG节点 34: qidwpus is duympus (规则: CE, 深度: 7)
  LoG节点 35: duympus is vohlpus (规则: MP, 深度: 7)
  LoG节点 36: qiwxpus is vudrpus (规则: MP, 深度: 7)
  LoG节点 37: vudrpus is famhpus (规则: CE, 深度: 7)
  LoG节点 38: famhpus is recxpus and zuhkpus (规则: MP, 深度: 7)
  LoG节点 39: vohlpus is xukxpus (规则: CE, 深度: 7)
  LoG节点 40: xukxpus is putmpus and nornpus (规则: CI, 深度: 7)
  LoG节点 41: putmpus is ganfpus (规则: MP, 深度: 7)
  LoG节点 42: ganfpus is cuwrpus and dulcpus (规则: MP, 深度: 7)
  LoG节点 43: cuwrpus is haqqpus and dadjpus (规则: MP, 深度: 7)
  LoG节点 44: haqqpus is tobppus and goydpus (规则: MP, 深度: 7)
  LoG节点 45: tobppus is rudqpus (规则: MP, 深度: 7)
  LoG节点 46: rudqpus is kotzpus (规则: MP, 深度: 7)
  LoG节点 47: kotzpus is baccpus and xiflpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 49
   - 初始条件数: 32
   - LoG图节点数: 48

📋 初始条件列表:
    1. qiwxpus is nibbpus
    2. duympus is gimhpus
    3. gaqjpus is baccpus and xiflpus
    4. famhpus is cedcpus
    5. rahypus is peqkpus and yawlpus
    6. kotzpus is gaqjpus
    7. peqkpus is hexjpus and cilvpus
    8. gimhpus is vohlpus
    9. xukxpus is putmpus
   10. waqtpus is cuwrpus and dulcpus
   11. nibbpus is vudrpus
   12. mircpus is rahypus
   13. sizmpus is haqqpus and dadjpus
   14. vohlpus is xukxpus and kicppus
   15. hexjpus is qiwxpus and zagvpus and xatrpus
   16. ganfpus is waqtpus
   17. cuwrpus is sizmpus
   18. tobppus is rebvpus
   19. xukxpus is nornpus
   20. xawppus is kotzpus
   21. ceqspus is ganfpus
   22. qiwxpus is cuyhpus
   23. bejmpus is tobppus and goydpus
   24. rebvpus is rudqpus
   25. putmpus is ceqspus
   26. haqqpus is bejmpus
   27. rudqpus is xawppus
   28. vudrpus is famhpus and yocjpus
   29. x is mircpus and yesppus
   30. qidwpus is duympus and zegmpus
   31. cedcpus is recxpus and zuhkpus
   32. cuyhpus is qidwpus and kabfpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 32 个前提节点

🔍 开始处理actual节点...

   节点 1: x is mircpus and yesppus
      ↻ 重复节点，计数: 2

   节点 2: mircpus is rahypus
      ↻ 重复节点，计数: 2

   节点 3: rahypus is peqkpus and yawlpus
      ↻ 重复节点，计数: 2

   节点 4: peqkpus is hexjpus and cilvpus
      ↻ 重复节点，计数: 2

   节点 5: hexjpus is qiwxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: hexjpus is qiwxpus and zagvpus and xatrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: hexjpus is qiwxpus and zagvpus and xatrpus
  ✓ 点亮LoG节点: hexjpus is qiwxpus and zagvpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 6: hexjpus is zagvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: hexjpus is qiwxpus and zagvpus and xatrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: hexjpus is qiwxpus and zagvpus and xatrpus

   节点 7: hexjpus is xatrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: hexjpus is qiwxpus and zagvpus and xatrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: hexjpus is qiwxpus and zagvpus and xatrpus

   节点 8: qiwxpus is nibbpus and cuyhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: qiwxpus is nibbpus → qiwxpus is cuyhpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: qiwxpus is nibbpus
  - 前提: qiwxpus is cuyhpus

   节点 9: qiwxpus is nibbpus
      ↻ 重复节点，计数: 2

   节点 10: nibbpus is vudrpus
      ↻ 重复节点，计数: 2

   节点 11: vudrpus is famhpus and yocjpus
      ↻ 重复节点，计数: 2

   节点 12: famhpus is cedcpus
      ↻ 重复节点，计数: 2

   节点 13: cedcpus is recxpus and zuhkpus
      ↻ 重复节点，计数: 2

   节点 14: qiwxpus is cuyhpus
      ↻ 重复节点，计数: 2

   节点 15: cuyhpus is qidwpus and kabfpus
      ↻ 重复节点，计数: 2

   节点 16: qidwpus is duympus and zegmpus
      ↻ 重复节点，计数: 2

   节点 17: duympus is gimhpus
      ↻ 重复节点，计数: 2

   节点 18: gimhpus is vohlpus
      ↻ 重复节点，计数: 2

   节点 19: vohlpus is xukxpus and kicppus
      ↻ 重复节点，计数: 2

   节点 20: xukxpus is putmpus
      ↻ 重复节点，计数: 2

   节点 21: putmpus is ceqspus
      ↻ 重复节点，计数: 2

   节点 22: ceqspus is ganfpus
      ↻ 重复节点，计数: 2

   节点 23: ganfpus is waqtpus
      ↻ 重复节点，计数: 2

   节点 24: waqtpus is cuwrpus and dulcpus
      ↻ 重复节点，计数: 2

   节点 25: cuwrpus is sizmpus
      ↻ 重复节点，计数: 2

   节点 26: sizmpus is haqqpus and dadjpus
      ↻ 重复节点，计数: 2

   节点 27: haqqpus is bejmpus
      ↻ 重复节点，计数: 2

   节点 28: bejmpus is tobppus and goydpus
      ↻ 重复节点，计数: 2

   节点 29: tobppus is rebvpus
      ↻ 重复节点，计数: 2

   节点 30: rebvpus is rudqpus
      ↻ 重复节点，计数: 2

   节点 31: rudqpus is xawppus
      ↻ 重复节点，计数: 2

   节点 32: xawppus is kotzpus
      ↻ 重复节点，计数: 2

   节点 33: kotzpus is gaqjpus
      ↻ 重复节点，计数: 2

   节点 34: gaqjpus is baccpus and xiflpus
      ↻ 重复节点，计数: 2

   节点 35: x is qiwxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is qiwxpus
[子树点亮]     └─ 点亮依赖节点: x is peqkpus (深度5)
[子树点亮]     └─ 点亮依赖节点: peqkpus is qiwxpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is peqkpus and yawlpus (深度6)
[子树点亮]     └─ 点亮依赖节点: peqkpus is qiwxpus and zagvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is mircpus (深度7)
[子树点亮]     └─ 点亮依赖节点: mircpus is peqkpus and yawlpus (深度7)
[子树点亮]     └─ 点亮依赖节点: peqkpus is hexjpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 7 个节点
      ✅ 验证成功 + LoG匹配

   节点 36: qiwxpus is hexjpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 37: qiwxpus is peqkpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 38: qiwxpus is rahypus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 39: qiwxpus is mircpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 40: qiwxpus is gaqjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: qiwxpus is cuyhpus → cuyhpus is gaqjpus
[后处理] 基于推理轨迹点亮节点，使用了 20 个前提条件:
  - 前提: qiwxpus is cuyhpus
  - 前提: cuyhpus is qidwpus and kabfpus
  - 前提: qidwpus is duympus and zegmpus
  - 前提: duympus is gimhpus
  - 前提: gimhpus is vohlpus
  - 前提: vohlpus is xukxpus and kicppus
  - 前提: xukxpus is putmpus
  - 前提: putmpus is ceqspus
  - 前提: ceqspus is ganfpus
  - 前提: ganfpus is waqtpus
  - 前提: waqtpus is cuwrpus and dulcpus
  - 前提: cuwrpus is sizmpus
  - 前提: sizmpus is haqqpus and dadjpus
  - 前提: haqqpus is bejmpus
  - 前提: bejmpus is tobppus and goydpus
  - 前提: tobppus is rebvpus
  - 前提: rebvpus is rudqpus
  - 前提: rudqpus is xawppus
  - 前提: xawppus is kotzpus
  - 前提: kotzpus is gaqjpus
  ✓ 点亮LoG节点: vohlpus is cuwrpus
[子树点亮]     └─ 点亮依赖节点: vohlpus is putmpus (深度5)
[子树点亮]     └─ 点亮依赖节点: putmpus is cuwrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: vohlpus is putmpus and nornpus (深度6)
[子树点亮]     └─ 点亮依赖节点: putmpus is cuwrpus and dulcpus (深度6)
[子树点亮]     └─ 点亮依赖节点: vohlpus is xukxpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xukxpus is putmpus and nornpus (深度7)
[子树点亮]     └─ 点亮依赖节点: putmpus is ganfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: ganfpus is cuwrpus and dulcpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 8 个节点
  ✓ 点亮LoG节点: qiwxpus is vohlpus
[子树点亮]     └─ 点亮依赖节点: qiwxpus is qidwpus (深度6)
[子树点亮]     └─ 点亮依赖节点: qidwpus is vohlpus (深度6)
[子树点亮]     └─ 点亮依赖节点: qiwxpus is qidwpus and kabfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qidwpus is duympus (深度7)
[子树点亮]     └─ 点亮依赖节点: duympus is vohlpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
  ✓ 点亮LoG节点: cuwrpus is tobppus
[子树点亮]     └─ 点亮依赖节点: cuwrpus is haqqpus (深度6)
[子树点亮]     └─ 点亮依赖节点: haqqpus is tobppus (深度6)
[子树点亮]     └─ 点亮依赖节点: cuwrpus is haqqpus and dadjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: haqqpus is tobppus and goydpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
  ✓ 点亮LoG节点: tobppus is kotzpus
[子树点亮]     └─ 点亮依赖节点: tobppus is rudqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: rudqpus is kotzpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 4 个LoG节点

   节点 41: gaqjpus is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gaqjpus is baccpus and xiflpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gaqjpus is baccpus and xiflpus

   节点 42: x is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qiwxpus → qiwxpus is baccpus
[后处理] 基于推理轨迹点亮节点，使用了 22 个前提条件:
  - 前提: x is qiwxpus
  - 前提: qiwxpus is cuyhpus
  - 前提: cuyhpus is qidwpus and kabfpus
  - 前提: qidwpus is duympus and zegmpus
  - 前提: duympus is gimhpus
  - 前提: gimhpus is vohlpus
  - 前提: vohlpus is xukxpus and kicppus
  - 前提: xukxpus is putmpus
  - 前提: putmpus is ceqspus
  - 前提: ceqspus is ganfpus
  - 前提: ganfpus is waqtpus
  - 前提: waqtpus is cuwrpus and dulcpus
  - 前提: cuwrpus is sizmpus
  - 前提: sizmpus is haqqpus and dadjpus
  - 前提: haqqpus is bejmpus
  - 前提: bejmpus is tobppus and goydpus
  - 前提: tobppus is rebvpus
  - 前提: rebvpus is rudqpus
  - 前提: rudqpus is xawppus
  - 前提: xawppus is kotzpus
  - 前提: kotzpus is gaqjpus
  - 前提: gaqjpus is baccpus
  ✓ 点亮LoG节点: x is babbpus or baccpus
[子树点亮]     └─ 点亮依赖节点: x is vohlpus (深度2)
[子树点亮]     └─ 点亮依赖节点: vohlpus is babbpus or baccpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is vohlpus and recxpus (深度3)
[子树点亮]     └─ 点亮依赖节点: vohlpus is baccpus (深度3)
[子树点亮]     └─ 点亮依赖节点: qiwxpus is vohlpus and recxpus (深度4)
[子树点亮]     └─ 点亮依赖节点: cuwrpus is baccpus (深度4)
[子树点亮]     └─ 点亮依赖节点: qiwxpus is recxpus (深度5)
[子树点亮]     └─ 点亮依赖节点: tobppus is baccpus (深度5)
[子树点亮]     └─ 点亮依赖节点: qiwxpus is famhpus (深度6)
[子树点亮]     └─ 点亮依赖节点: famhpus is recxpus (深度6)
[子树点亮]     └─ 点亮依赖节点: kotzpus is baccpus (深度6)
[子树点亮]     └─ 点亮依赖节点: qiwxpus is vudrpus (深度7)
[子树点亮]     └─ 点亮依赖节点: vudrpus is famhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: famhpus is recxpus and zuhkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kotzpus is baccpus and xiflpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 15 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 43: x is baccpus
      ↻ 重复节点，计数: 2

   节点 44: x is babbpus or baccpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 44
   - 新增节点: 13
   - 更新已存在节点: 31
   - 点亮的LoG节点: 48

🎯 推理质量统计:
   - 完美推理: 7 (节点正确 + 路径正确)
   - 部分推理: 6 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 48节点, 32前提, 复杂度1-32

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 45
   - 前提节点: 32
   - 推理节点: 9
   - 幻觉节点: 4
   - 点亮LoG节点: 48

❌ 幻觉节点详情:
   - qiwxpus is hexjpus (出现1次)
   - qiwxpus is peqkpus (出现1次)
   - qiwxpus is rahypus (出现1次)
   - qiwxpus is mircpus (出现1次)

✅ 推理节点详情:
   🟢 hexjpus is qiwxpus (出现1次, 质量:perfect)
   🟢 hexjpus is zagvpus (出现1次, 质量:perfect)
   🟢 hexjpus is xatrpus (出现1次, 质量:perfect)
   🟡 qiwxpus is nibbpus and cuyhpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['qiwxpus is hexjpus', 'qiwxpus is peqkpus', 'qiwxpus is rahypus', 'qiwxpus is mircpus']
   🟢 x is qiwxpus (出现1次, 质量:perfect)
   🟡 qiwxpus is gaqjpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['qiwxpus is hexjpus', 'qiwxpus is peqkpus', 'qiwxpus is rahypus', 'qiwxpus is mircpus']
   🟢 gaqjpus is baccpus (出现1次, 质量:perfect)
   🟢 x is baccpus (出现2次, 质量:perfect)
   🟢 x is babbpus or baccpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is mircpus
   - cuwrpus is tobppus
   - qiwxpus is vohlpus
   - vohlpus is xukxpus
   - qiwxpus is famhpus
   - famhpus is recxpus
   - vohlpus is babbpus or baccpus
   - haqqpus is tobppus
   - qidwpus is duympus
   - qiwxpus is qidwpus
   - cuwrpus is haqqpus and dadjpus
   - putmpus is ganfpus
   - kotzpus is baccpus
   - mircpus is peqkpus and yawlpus
   - putmpus is cuwrpus
   - famhpus is recxpus and zuhkpus
   - x is peqkpus
   - qiwxpus is recxpus
   - qiwxpus is vohlpus and recxpus
   - tobppus is rudqpus
   - x is peqkpus and yawlpus
   - tobppus is baccpus
   - cuwrpus is baccpus
   - xukxpus is putmpus and nornpus
   - hexjpus is qiwxpus and zagvpus
   - x is vohlpus and recxpus
   - haqqpus is tobppus and goydpus
   - vohlpus is cuwrpus
   - duympus is vohlpus
   - putmpus is cuwrpus and dulcpus
   - qiwxpus is vudrpus
   - vohlpus is putmpus
   - rudqpus is kotzpus
   - kotzpus is baccpus and xiflpus
   - peqkpus is hexjpus
   - x is qiwxpus
   - tobppus is kotzpus
   - x is vohlpus
   - vohlpus is baccpus
   - qidwpus is vohlpus
   - qiwxpus is qidwpus and kabfpus
   - peqkpus is qiwxpus
   - vohlpus is putmpus and nornpus
   - x is babbpus or baccpus
   - cuwrpus is haqqpus
   - ganfpus is cuwrpus and dulcpus
   - vudrpus is famhpus
   - peqkpus is qiwxpus and zagvpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus or baccpus (第7层)
   节点Coverage: 48/48 = 100.00%
   前提条件Coverage: 30/32 = 93.75%
   各推理层点亮比例:
     第1层: 19/19 = 100.00%
     第2层: 12/12 = 100.00%
     第3层: 8/8 = 100.00%
     第4层: 4/4 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 2/2 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 4/13 = 30.77%
   可推导节点: 9/13
   Strict Error Rate: 6/13 = 46.15%
   严格有效节点: 7/13

   详细分析:
     完美推理: 7 (53.85%)
     部分推理: 6 (46.15%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 21/50
================================================================================
记录索引: 20
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_20.json
✅ 使用缓存结果:
   - 句子数: 31
   - 提取的语句数: 32
   - 初始条件数: 30

=== Statement提取完成 ===
总句子数: 31
成功提取: 31
失败提取: 0
总statements数: 32

=== 开始清洗Statement格式 ===
原始statements数: 32
清洗后statements数: 32
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 32
标准化后节点数: 32
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babbpus and baccpus (原始: x is babbpus and baccpus)
  2. [actual] quvqpus → cisjpus and rilxpus (原始: quvqpus is cisjpus and rilxpus)
  3. [actual] cisjpus → kapwpus (原始: cisjpus is kapwpus)
  4. [actual] kapwpus → wohqpus and mipkpus (原始: kapwpus is wohqpus and mipkpus)
  5. [actual] wohqpus → buwgpus (原始: wohqpus is buwgpus)
  6. [actual] buwgpus → qehkpus (原始: buwgpus is qehkpus)
  7. [actual] qehkpus → yuvspus (原始: qehkpus is yuvspus)
  8. [actual] yuvspus → rirwpus (原始: yuvspus is rirwpus)
  9. [actual] rirwpus → yuljpus and pivlpus (原始: rirwpus is yuljpus and pivlpus)
  10. [actual] yuljpus → koytpus and qimbpus (原始: yuljpus is koytpus and qimbpus)
  11. [actual] koytpus → baflpus (原始: koytpus is baflpus)
  12. [actual] baflpus → hegzpus and fefdpus (原始: baflpus is hegzpus and fefdpus)
  13. [actual] hegzpus → cihjpus and nujhpus (原始: hegzpus is cihjpus and nujhpus)
  14. [actual] cihjpus → nulwpus (原始: cihjpus is nulwpus)
  15. [actual] quvqpus → nulwpus (原始: quvqpus is nulwpus)
  16. [actual] nulwpus → zoqypus and dirlpus (原始: nulwpus is zoqypus and dirlpus)
  17. [actual] quvqpus → zoqypus (原始: quvqpus is zoqypus)
  18. [actual] zoqypus → baccpus (原始: zoqypus is baccpus)
  19. [actual] quvqpus → baccpus (原始: quvqpus is baccpus)
  20. [actual] quvqpus → babbpus (原始: quvqpus is babbpus)
  21. [actual] quvqpus → nulwpus (原始: quvqpus is nulwpus)
  22. [actual] nulwpus → jochpus (原始: nulwpus is jochpus)
  23. [actual] jochpus → wuhmpus (原始: jochpus is wuhmpus)
  24. [actual] wuhmpus → liwvpus (原始: wuhmpus is liwvpus)
  25. [actual] liwvpus → zexspus (原始: liwvpus is zexspus)
  26. [actual] zexspus → fayypus (原始: zexspus is fayypus)
  27. [actual] fayypus → xifwpus (原始: fayypus is xifwpus)
  28. [actual] xifwpus → babbpus and dirnpus (原始: xifwpus is babbpus and dirnpus)
  29. [actual] quvqpus → babbpus (原始: quvqpus is babbpus)
  30. [actual] quvqpus → babbpus and baccpus (原始: quvqpus is babbpus and baccpus)
  31. [actual] x → quvqpus (原始: x is quvqpus)
  32. [actual] x → babbpus and baccpus (原始: x is babbpus and baccpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 43
[后处理] 加载LoG图，包含 43 个节点
  LoG节点 0: x is babbpus and baccpus (规则: CE, 深度: 1)
  LoG节点 1: x is babbpus and baccpus and riqtpus (规则: MP, 深度: 2)
  LoG节点 2: x is rirwpus (规则: CE, 深度: 3)
  LoG节点 3: rirwpus is babbpus and baccpus and riqtpus (规则: MP, 深度: 3)
  LoG节点 4: x is rirwpus and kevdpus (规则: MP, 深度: 4)
  LoG节点 5: rirwpus is nulwpus (规则: MP, 深度: 4)
  LoG节点 6: nulwpus is babbpus and baccpus and riqtpus (规则: CI, 深度: 4)
  LoG节点 7: x is wohqpus (规则: MP, 深度: 5)
  LoG节点 8: wohqpus is rirwpus and kevdpus (规则: CI, 深度: 5)
  LoG节点 9: rirwpus is hegzpus (规则: MP, 深度: 5)
  LoG节点 10: hegzpus is nulwpus (规则: CE, 深度: 5)
  LoG节点 11: nulwpus is babbpus (规则: MP, 深度: 5)
  LoG节点 12: nulwpus is baccpus (规则: CE, 深度: 5)
  LoG节点 13: nulwpus is riqtpus (规则: CE, 深度: 5)
  LoG节点 14: x is cisjpus (规则: CE, 深度: 6)
  LoG节点 15: cisjpus is wohqpus (规则: CE, 深度: 6)
  LoG节点 16: wohqpus is rirwpus (规则: MP, 深度: 6)
  LoG节点 17: wohqpus is kevdpus (规则: CE, 深度: 6)
  LoG节点 18: rirwpus is koytpus (规则: MP, 深度: 6)
  LoG节点 19: koytpus is hegzpus (规则: CE, 深度: 6)
  LoG节点 20: hegzpus is nulwpus and quwjpus (规则: MP, 深度: 6)
  LoG节点 21: nulwpus is zexspus (规则: MP, 深度: 6)
  LoG节点 22: zexspus is babbpus (规则: MP, 深度: 6)
  LoG节点 23: nulwpus is baccpus and riddpus (规则: MP, 深度: 6)
  LoG节点 24: nulwpus is riqtpus and tofjpus (规则: MP, 深度: 6)
  LoG节点 25: x is cisjpus and rilxpus (规则: MP, 深度: 7)
  LoG节点 26: cisjpus is wohqpus and mipkpus (规则: MP, 深度: 7)
  LoG节点 27: wohqpus is qehkpus (规则: MP, 深度: 7)
  LoG节点 28: qehkpus is rirwpus (规则: MP, 深度: 7)
  LoG节点 29: wohqpus is kevdpus and pexfpus (规则: MP, 深度: 7)
  LoG节点 30: rirwpus is yuljpus (规则: CE, 深度: 7)
  LoG节点 31: yuljpus is koytpus (规则: CE, 深度: 7)
  LoG节点 32: koytpus is hegzpus and fefdpus (规则: MP, 深度: 7)
  LoG节点 33: hegzpus is cihjpus (规则: CE, 深度: 7)
  LoG节点 34: cihjpus is nulwpus and quwjpus (规则: CI, 深度: 7)
  LoG节点 35: nulwpus is wuhmpus (规则: MP, 深度: 7)
  LoG节点 36: wuhmpus is zexspus (规则: MP, 深度: 7)
  LoG节点 37: zexspus is xifwpus (规则: MP, 深度: 7)
  LoG节点 38: xifwpus is babbpus (规则: CE, 深度: 7)
  LoG节点 39: nulwpus is zoqypus (规则: CE, 深度: 7)
  LoG节点 40: zoqypus is baccpus and riddpus (规则: CI, 深度: 7)
  LoG节点 41: nulwpus is kuxjpus (规则: CE, 深度: 7)
  LoG节点 42: kuxjpus is riqtpus and tofjpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 32
   - 初始条件数: 30
   - LoG图节点数: 43

📋 初始条件列表:
    1. neggpus is kevdpus and pexfpus
    2. punlpus is riqtpus and tofjpus
    3. qehkpus is yuvspus
    4. nulwpus is kuxjpus and jevdpus
    5. xifwpus is babbpus and dirnpus
    6. koytpus is baflpus
    7. jochpus is wuhmpus
    8. rirwpus is yuljpus and pivlpus
    9. baflpus is hegzpus and fefdpus
   10. zoqypus is riddpus
   11. quvqpus is cisjpus and rilxpus
   12. cihjpus is nulwpus
   13. yuljpus is koytpus and qimbpus
   14. cihjpus is quwjpus
   15. nulwpus is zoqypus and dirlpus
   16. zexspus is fayypus
   17. cisjpus is kapwpus
   18. nulwpus is jochpus
   19. buwgpus is qehkpus
   20. liwvpus is zexspus
   21. kuxjpus is punlpus
   22. zoqypus is baccpus
   23. fayypus is xifwpus
   24. yuvspus is rirwpus
   25. x is quvqpus
   26. kapwpus is wohqpus and mipkpus
   27. wohqpus is buwgpus
   28. wuhmpus is liwvpus
   29. hegzpus is cihjpus and nujhpus
   30. wohqpus is neggpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 30 个前提节点

🔍 开始处理actual节点...

   节点 1: quvqpus is cisjpus and rilxpus
      ↻ 重复节点，计数: 2

   节点 2: cisjpus is kapwpus
      ↻ 重复节点，计数: 2

   节点 3: kapwpus is wohqpus and mipkpus
      ↻ 重复节点，计数: 2

   节点 4: wohqpus is buwgpus
      ↻ 重复节点，计数: 2

   节点 5: buwgpus is qehkpus
      ↻ 重复节点，计数: 2

   节点 6: qehkpus is yuvspus
      ↻ 重复节点，计数: 2

   节点 7: yuvspus is rirwpus
      ↻ 重复节点，计数: 2

   节点 8: rirwpus is yuljpus and pivlpus
      ↻ 重复节点，计数: 2

   节点 9: yuljpus is koytpus and qimbpus
      ↻ 重复节点，计数: 2

   节点 10: koytpus is baflpus
      ↻ 重复节点，计数: 2

   节点 11: baflpus is hegzpus and fefdpus
      ↻ 重复节点，计数: 2

   节点 12: hegzpus is cihjpus and nujhpus
      ↻ 重复节点，计数: 2

   节点 13: cihjpus is nulwpus
      ↻ 重复节点，计数: 2

   节点 14: quvqpus is nulwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP+CE
      📋 推理路径: MP+CE规则: quvqpus is cisjpus → cisjpus is nulwpus
[后处理] 基于推理轨迹点亮节点，使用了 13 个前提条件:
  - 前提: quvqpus is cisjpus and rilxpus
  - 前提: cisjpus is kapwpus
  - 前提: kapwpus is wohqpus and mipkpus
  - 前提: wohqpus is buwgpus
  - 前提: buwgpus is qehkpus
  - 前提: qehkpus is yuvspus
  - 前提: yuvspus is rirwpus
  - 前提: rirwpus is yuljpus and pivlpus
  - 前提: yuljpus is koytpus and qimbpus
  - 前提: koytpus is baflpus
  - 前提: baflpus is hegzpus and fefdpus
  - 前提: hegzpus is cihjpus and nujhpus
  - 前提: cihjpus is nulwpus
  ✓ 点亮LoG节点: rirwpus is nulwpus
[子树点亮]     └─ 点亮依赖节点: rirwpus is hegzpus (深度5)
[子树点亮]     └─ 点亮依赖节点: hegzpus is nulwpus (深度5)
[子树点亮]     └─ 点亮依赖节点: rirwpus is koytpus (深度6)
[子树点亮]     └─ 点亮依赖节点: koytpus is hegzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: hegzpus is nulwpus and quwjpus (深度6)
[子树点亮]     └─ 点亮依赖节点: rirwpus is yuljpus (深度7)
[子树点亮]     └─ 点亮依赖节点: yuljpus is koytpus (深度7)
[子树点亮]     └─ 点亮依赖节点: koytpus is hegzpus and fefdpus (深度7)
[子树点亮]     └─ 点亮依赖节点: hegzpus is cihjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cihjpus is nulwpus and quwjpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 10 个节点
  ✓ 点亮LoG节点: cisjpus is wohqpus
[子树点亮]     └─ 点亮依赖节点: cisjpus is wohqpus and mipkpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
  ✓ 点亮LoG节点: wohqpus is rirwpus
[子树点亮]     └─ 点亮依赖节点: wohqpus is qehkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qehkpus is rirwpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 3 个LoG节点

   节点 15: nulwpus is zoqypus and dirlpus
      ↻ 重复节点，计数: 2

   节点 16: quvqpus is zoqypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: quvqpus is nulwpus → nulwpus is zoqypus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: quvqpus is nulwpus
  - 前提: nulwpus is zoqypus and dirlpus
  ✓ 点亮LoG节点: nulwpus is zoqypus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 17: zoqypus is baccpus
      ↻ 重复节点，计数: 2

   节点 18: quvqpus is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: quvqpus is nulwpus → nulwpus is baccpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: quvqpus is nulwpus
  - 前提: nulwpus is zoqypus and dirlpus
  - 前提: zoqypus is baccpus
  ✓ 点亮LoG节点: nulwpus is baccpus
[子树点亮]     └─ 点亮依赖节点: nulwpus is baccpus and riddpus (深度6)
[子树点亮]     └─ 点亮依赖节点: zoqypus is baccpus and riddpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 19: quvqpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: quvqpus is nulwpus → nulwpus is babbpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: quvqpus is nulwpus
  - 前提: nulwpus is jochpus
  - 前提: jochpus is wuhmpus
  - 前提: wuhmpus is liwvpus
  - 前提: liwvpus is zexspus
  - 前提: zexspus is fayypus
  - 前提: fayypus is xifwpus
  - 前提: xifwpus is babbpus and dirnpus
  ✓ 点亮LoG节点: nulwpus is babbpus
[子树点亮]     └─ 点亮依赖节点: nulwpus is zexspus (深度6)
[子树点亮]     └─ 点亮依赖节点: zexspus is babbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: nulwpus is wuhmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: wuhmpus is zexspus (深度7)
[子树点亮]     └─ 点亮依赖节点: zexspus is xifwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xifwpus is babbpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 6 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 20: quvqpus is nulwpus
      ↻ 重复节点，计数: 2

   节点 21: nulwpus is jochpus
      ↻ 重复节点，计数: 2

   节点 22: jochpus is wuhmpus
      ↻ 重复节点，计数: 2

   节点 23: wuhmpus is liwvpus
      ↻ 重复节点，计数: 2

   节点 24: liwvpus is zexspus
      ↻ 重复节点，计数: 2

   节点 25: zexspus is fayypus
      ↻ 重复节点，计数: 2

   节点 26: fayypus is xifwpus
      ↻ 重复节点，计数: 2

   节点 27: xifwpus is babbpus and dirnpus
      ↻ 重复节点，计数: 2

   节点 28: quvqpus is babbpus
      ↻ 重复节点，计数: 2

   节点 29: quvqpus is babbpus and baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: quvqpus is nulwpus → nulwpus is babbpus and baccpus
[后处理] 基于推理轨迹点亮节点，使用了 10 个前提条件:
  - 前提: quvqpus is nulwpus
  - 前提: nulwpus is jochpus
  - 前提: jochpus is wuhmpus
  - 前提: wuhmpus is liwvpus
  - 前提: liwvpus is zexspus
  - 前提: zexspus is fayypus
  - 前提: fayypus is xifwpus
  - 前提: xifwpus is babbpus and dirnpus
  - 前提: nulwpus is zoqypus and dirlpus
  - 前提: zoqypus is baccpus

   节点 30: x is quvqpus
      ↻ 重复节点，计数: 2

   节点 31: x is babbpus and baccpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus and baccpus
[子树点亮]     └─ 点亮依赖节点: x is babbpus and baccpus and riqtpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is rirwpus (深度3)
[子树点亮]     └─ 点亮依赖节点: rirwpus is babbpus and baccpus and riqtpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is rirwpus and kevdpus (深度4)
[子树点亮]     └─ 点亮依赖节点: nulwpus is babbpus and baccpus and riqtpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is wohqpus (深度5)
[子树点亮]     └─ 点亮依赖节点: wohqpus is rirwpus and kevdpus (深度5)
[子树点亮]     └─ 点亮依赖节点: nulwpus is riqtpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is cisjpus (深度6)
[子树点亮]     └─ 点亮依赖节点: wohqpus is kevdpus (深度6)
[子树点亮]     └─ 点亮依赖节点: nulwpus is riqtpus and tofjpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is cisjpus and rilxpus (深度7)
[子树点亮]     └─ 点亮依赖节点: wohqpus is kevdpus and pexfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: nulwpus is kuxjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kuxjpus is riqtpus and tofjpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 15 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 31
   - 新增节点: 6
   - 更新已存在节点: 25
   - 点亮的LoG节点: 43

🎯 推理质量统计:
   - 完美推理: 6 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 43节点, 30前提, 复杂度1-30

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 36
   - 前提节点: 30
   - 推理节点: 6
   - 幻觉节点: 0
   - 点亮LoG节点: 43

✅ 推理节点详情:
   🟢 quvqpus is nulwpus (出现2次, 质量:perfect)
   🟢 quvqpus is zoqypus (出现1次, 质量:perfect)
   🟢 quvqpus is baccpus (出现1次, 质量:perfect)
   🟢 quvqpus is babbpus (出现2次, 质量:perfect)
   🟢 quvqpus is babbpus and baccpus (出现1次, 质量:perfect)
   🟢 x is babbpus and baccpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - rirwpus is hegzpus
   - wohqpus is qehkpus
   - nulwpus is wuhmpus
   - nulwpus is baccpus
   - zexspus is xifwpus
   - hegzpus is nulwpus
   - wohqpus is kevdpus
   - cisjpus is wohqpus and mipkpus
   - nulwpus is zoqypus
   - wuhmpus is zexspus
   - kuxjpus is riqtpus and tofjpus
   - x is rirwpus
   - xifwpus is babbpus
   - x is babbpus and baccpus and riqtpus
   - rirwpus is koytpus
   - zoqypus is baccpus and riddpus
   - wohqpus is rirwpus and kevdpus
   - nulwpus is kuxjpus
   - nulwpus is baccpus and riddpus
   - nulwpus is zexspus
   - cisjpus is wohqpus
   - x is rirwpus and kevdpus
   - nulwpus is riqtpus
   - x is cisjpus and rilxpus
   - x is wohqpus
   - nulwpus is babbpus and baccpus and riqtpus
   - hegzpus is nulwpus and quwjpus
   - hegzpus is cihjpus
   - zexspus is babbpus
   - rirwpus is babbpus and baccpus and riqtpus
   - koytpus is hegzpus
   - rirwpus is yuljpus
   - nulwpus is riqtpus and tofjpus
   - rirwpus is nulwpus
   - x is babbpus and baccpus
   - cihjpus is nulwpus and quwjpus
   - wohqpus is rirwpus
   - nulwpus is babbpus
   - qehkpus is rirwpus
   - yuljpus is koytpus
   - x is cisjpus
   - wohqpus is kevdpus and pexfpus
   - koytpus is hegzpus and fefdpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus and baccpus (第7层)
   节点Coverage: 43/43 = 100.00%
   前提条件Coverage: 23/30 = 76.67%
   各推理层点亮比例:
     第1层: 18/18 = 100.00%
     第2层: 11/11 = 100.00%
     第3层: 7/7 = 100.00%
     第4层: 3/3 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/6 = 0.00%
   可推导节点: 6/6
   Strict Error Rate: 0/6 = 0.00%
   严格有效节点: 6/6

   详细分析:
     完美推理: 6 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 22/50
================================================================================
记录索引: 21
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_21.json
✅ 使用缓存结果:
   - 句子数: 13
   - 提取的语句数: 21
   - 初始条件数: 9

=== Statement提取完成 ===
总句子数: 13
成功提取: 13
失败提取: 0
总statements数: 21

=== 开始清洗Statement格式 ===
原始statements数: 21
清洗后statements数: 21
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 21
标准化后节点数: 21
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → sicxpus (原始: x is sicxpus)
  2. [actual] sicxpus → catlpus and xeyqpus (原始: sicxpus is catlpus and xeyqpus)
  3. [actual] x → catlpus (原始: x is catlpus)
  4. [actual] catlpus → fudqpus (原始: catlpus is fudqpus)
  5. [planning] x → fudqpus (原始: x is fudqpus)
  6. [actual] fudqpus → jafppus and qawzpus (原始: fudqpus is jafppus and qawzpus)
  7. [actual] x → jafppus (原始: x is jafppus)
  8. [actual] jafppus → cimqpus (原始: jafppus is cimqpus)
  9. [planning] x → cimqpus (原始: x is cimqpus)
  10. [actual] jafppus → mizbpus and xopmpus (原始: jafppus is mizbpus and xopmpus)
  11. [actual] x → jafppus (原始: x is jafppus)
  12. [actual] x → mizbpus (原始: x is mizbpus)
  13. [actual] mizbpus → haxtpus (原始: mizbpus is haxtpus)
  14. [planning] x → haxtpus (原始: x is haxtpus)
  15. [actual] haxtpus → bachpus (原始: haxtpus is bachpus)
  16. [planning] x → bachpus (原始: x is bachpus)
  17. [actual] x → bachpus (原始: x is bachpus)
  18. [planning] x → babbpus (原始: x is babbpus)
  19. [planning] x → baccpus (原始: x is baccpus)
  20. [planning] x → bachpus (原始: x is bachpus)
  21. [actual] x → bachpus (原始: x is bachpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 15
[后处理] 加载LoG图，包含 15 个节点
  LoG节点 0: x is babbpus or baccpus or bachpus (规则: DI, 深度: 1)
  LoG节点 1: x is baccpus or bachpus (规则: DI, 深度: 2)
  LoG节点 2: x is bachpus (规则: CE, 深度: 3)
  LoG节点 3: x is bachpus and paznpus (规则: MP, 深度: 4)
  LoG节点 4: x is jafppus (规则: MP, 深度: 5)
  LoG节点 5: jafppus is bachpus and paznpus (规则: CI, 深度: 5)
  LoG节点 6: x is catlpus (规则: CE, 深度: 6)
  LoG节点 7: catlpus is jafppus (规则: CE, 深度: 6)
  LoG节点 8: jafppus is bachpus (规则: MP, 深度: 6)
  LoG节点 9: jafppus is paznpus (规则: CE, 深度: 6)
  LoG节点 10: x is catlpus and xeyqpus (规则: MP, 深度: 7)
  LoG节点 11: catlpus is jafppus and qawzpus (规则: MP, 深度: 7)
  LoG节点 12: jafppus is mizbpus (规则: CE, 深度: 7)
  LoG节点 13: mizbpus is bachpus (规则: MP, 深度: 7)
  LoG节点 14: jafppus is paznpus and jubdpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 21
   - 初始条件数: 9
   - LoG图节点数: 15

📋 初始条件列表:
    1. catlpus is fudqpus
    2. cimqpus is paznpus and jubdpus
    3. sicxpus is catlpus and xeyqpus
    4. fudqpus is jafppus and qawzpus
    5. haxtpus is bachpus
    6. x is sicxpus
    7. mizbpus is haxtpus
    8. jafppus is cimqpus
    9. jafppus is mizbpus and xopmpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 9 个前提节点

🔍 开始处理actual节点...

   节点 1: x is sicxpus
      ↻ 重复节点，计数: 2

   节点 2: sicxpus is catlpus and xeyqpus
      ↻ 重复节点，计数: 2

   节点 3: x is catlpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is catlpus
[子树点亮]     └─ 点亮依赖节点: x is catlpus and xeyqpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 4: catlpus is fudqpus
      ↻ 重复节点，计数: 2

   节点 5: fudqpus is jafppus and qawzpus
      ↻ 重复节点，计数: 2

   节点 6: x is jafppus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is jafppus
[子树点亮]     └─ 点亮依赖节点: catlpus is jafppus (深度6)
[子树点亮]     └─ 点亮依赖节点: catlpus is jafppus and qawzpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 7: jafppus is cimqpus
      ↻ 重复节点，计数: 2

   节点 8: jafppus is mizbpus and xopmpus
      ↻ 重复节点，计数: 2

   节点 9: x is jafppus
      ↻ 重复节点，计数: 2

   节点 10: x is mizbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is sicxpus → sicxpus is mizbpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is sicxpus
  - 前提: sicxpus is catlpus and xeyqpus
  - 前提: catlpus is fudqpus
  - 前提: fudqpus is jafppus and qawzpus
  - 前提: jafppus is mizbpus and xopmpus
  ✓ 点亮LoG节点: jafppus is mizbpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 11: mizbpus is haxtpus
      ↻ 重复节点，计数: 2

   节点 12: haxtpus is bachpus
      ↻ 重复节点，计数: 2

   节点 13: x is bachpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is bachpus
[子树点亮]     └─ 点亮依赖节点: x is bachpus and paznpus (深度4)
[子树点亮]     └─ 点亮依赖节点: jafppus is bachpus and paznpus (深度5)
[子树点亮]     └─ 点亮依赖节点: jafppus is bachpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jafppus is paznpus (深度6)
[子树点亮]     └─ 点亮依赖节点: mizbpus is bachpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jafppus is paznpus and jubdpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 6 个节点
      ✅ 验证成功 + LoG匹配

   节点 14: x is bachpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 14
   - 新增节点: 4
   - 更新已存在节点: 10
   - 点亮的LoG节点: 13

🎯 推理质量统计:
   - 完美推理: 4 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 15节点, 9前提, 复杂度1-9

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 13
   - 前提节点: 9
   - 推理节点: 4
   - 幻觉节点: 0
   - 点亮LoG节点: 13

✅ 推理节点详情:
   🟢 x is catlpus (出现1次, 质量:perfect)
   🟢 x is jafppus (出现2次, 质量:perfect)
   🟢 x is mizbpus (出现1次, 质量:perfect)
   🟢 x is bachpus (出现2次, 质量:perfect)

🔥 点亮的LoG节点:
   - jafppus is paznpus and jubdpus
   - jafppus is mizbpus
   - catlpus is jafppus
   - catlpus is jafppus and qawzpus
   - x is jafppus
   - mizbpus is bachpus
   - jafppus is paznpus
   - x is catlpus
   - jafppus is bachpus and paznpus
   - x is catlpus and xeyqpus
   - x is bachpus and paznpus
   - x is bachpus
   - jafppus is bachpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/7 = 71.43%
   最深点亮节点: x is bachpus (第5层)
   节点Coverage: 13/15 = 86.67%
   前提条件Coverage: 8/9 = 88.89%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%
     第6层: 0/1 = 0.00%
     第7层: 0/1 = 0.00%

🎯 计算Precision指标...
   Error Rate: 0/4 = 0.00%
   可推导节点: 4/4
   Strict Error Rate: 0/4 = 0.00%
   严格有效节点: 4/4

   详细分析:
     完美推理: 4 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 23/50
================================================================================
记录索引: 22
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_22.json
✅ 使用缓存结果:
   - 句子数: 33
   - 提取的语句数: 32
   - 初始条件数: 27

=== Statement提取完成 ===
总句子数: 33
成功提取: 33
失败提取: 0
总statements数: 32

=== 开始清洗Statement格式 ===
原始statements数: 32
清洗后statements数: 32
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 32
标准化后节点数: 32
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babbpus and baccpus (原始: x is babbpus and baccpus)
  2. [actual] x → puzvpus (原始: x is puzvpus)
  3. [actual] puzvpus → yivgpus (原始: puzvpus is yivgpus)
  4. [actual] yivgpus → nixvpus (原始: yivgpus is nixvpus)
  5. [actual] nixvpus → lekzpus (原始: nixvpus is lekzpus)
  6. [actual] lekzpus → vazbpus (原始: lekzpus is vazbpus)
  7. [actual] vazbpus → cibwpus (原始: vazbpus is cibwpus)
  8. [actual] cibwpus → xustpus (原始: cibwpus is xustpus)
  9. [actual] xustpus → kigcpus (原始: xustpus is kigcpus)
  10. [actual] kigcpus → simqpus (原始: kigcpus is simqpus)
  11. [actual] simqpus → didypus (原始: simqpus is didypus)
  12. [actual] didypus → kovqpus (原始: didypus is kovqpus)
  13. [actual] kovqpus → ramlpus (原始: kovqpus is ramlpus)
  14. [actual] ramlpus → xirhpus (原始: ramlpus is xirhpus)
  15. [actual] xirhpus → nukxpus (原始: xirhpus is nukxpus)
  16. [actual] nukxpus → kesmpus (原始: nukxpus is kesmpus)
  17. [actual] kesmpus → rasfpus (原始: kesmpus is rasfpus)
  18. [actual] rasfpus → geqvpus (原始: rasfpus is geqvpus)
  19. [actual] geqvpus → lortpus (原始: geqvpus is lortpus)
  20. [actual] lortpus → vahtpus (原始: lortpus is vahtpus)
  21. [actual] vahtpus → pollpus (原始: vahtpus is pollpus)
  22. [actual] pollpus → movwpus (原始: pollpus is movwpus)
  23. [actual] movwpus → donzpus (原始: movwpus is donzpus)
  24. [actual] donzpus → keyxpus (原始: donzpus is keyxpus)
  25. [actual] keyxpus → gokxpus (原始: keyxpus is gokxpus)
  26. [actual] gokxpus → pezppus (原始: gokxpus is pezppus)
  27. [actual] pezppus → jefbpus (原始: pezppus is jefbpus)
  28. [actual] jefbpus → babbpus and baccpus (原始: jefbpus is babbpus and baccpus)
  29. [actual] puzvpus → jefbpus (原始: puzvpus is jefbpus)
  30. [actual] jefbpus → babbpus and baccpus (原始: jefbpus is babbpus and baccpus)
  31. [planning] x → jefbpus (原始: x is jefbpus)
  32. [actual] x → babbpus and baccpus (原始: x is babbpus and baccpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 39
[后处理] 加载LoG图，包含 39 个节点
  LoG节点 0: x is babbpus and baccpus (规则: CE, 深度: 1)
  LoG节点 1: x is babbpus and baccpus and wicnpus (规则: MP, 深度: 2)
  LoG节点 2: x is ramlpus (规则: MP, 深度: 3)
  LoG节点 3: ramlpus is babbpus and baccpus and wicnpus (规则: MP, 深度: 3)
  LoG节点 4: x is xustpus (规则: MP, 深度: 4)
  LoG节点 5: xustpus is ramlpus (规则: CE, 深度: 4)
  LoG节点 6: ramlpus is vahtpus (规则: CE, 深度: 4)
  LoG节点 7: vahtpus is babbpus and baccpus and wicnpus (规则: MP, 深度: 4)
  LoG节点 8: x is yivgpus (规则: CE, 深度: 5)
  LoG节点 9: yivgpus is xustpus (规则: MP, 深度: 5)
  LoG节点 10: xustpus is ramlpus and kuzcpus (规则: MP, 深度: 5)
  LoG节点 11: ramlpus is vahtpus and savkpus (规则: MP, 深度: 5)
  LoG节点 12: vahtpus is keyxpus (规则: CE, 深度: 5)
  LoG节点 13: keyxpus is babbpus and baccpus and wicnpus (规则: CE, 深度: 5)
  LoG节点 14: x is yivgpus and juqnpus (规则: MP, 深度: 6)
  LoG节点 15: yivgpus is lekzpus (规则: CE, 深度: 6)
  LoG节点 16: lekzpus is xustpus (规则: MP, 深度: 6)
  LoG节点 17: xustpus is didypus (规则: MP, 深度: 6)
  LoG节点 18: didypus is ramlpus and kuzcpus (规则: CE, 深度: 6)
  LoG节点 19: ramlpus is rasfpus (规则: MP, 深度: 6)
  LoG节点 20: rasfpus is vahtpus and savkpus (规则: MP, 深度: 6)
  LoG节点 21: vahtpus is keyxpus and pahkpus (规则: MP, 深度: 6)
  LoG节点 22: keyxpus is babbpus and baccpus and wicnpus and durnpus (规则: MP, 深度: 6)
  LoG节点 23: x is puzvpus (规则: CE, 深度: 7)
  LoG节点 24: puzvpus is yivgpus and juqnpus (规则: CE, 深度: 7)
  LoG节点 25: yivgpus is lekzpus and tamxpus (规则: MP, 深度: 7)
  LoG节点 26: lekzpus is cibwpus (规则: MP, 深度: 7)
  LoG节点 27: cibwpus is xustpus (规则: CE, 深度: 7)
  LoG节点 28: xustpus is kigcpus (规则: CE, 深度: 7)
  LoG节点 29: kigcpus is didypus (规则: MP, 深度: 7)
  LoG节点 30: didypus is ramlpus and kuzcpus and pokvpus (规则: MP, 深度: 7)
  LoG节点 31: ramlpus is nukxpus (规则: MP, 深度: 7)
  LoG节点 32: nukxpus is rasfpus (规则: MP, 深度: 7)
  LoG节点 33: rasfpus is geqvpus (规则: CE, 深度: 7)
  LoG节点 34: geqvpus is vahtpus and savkpus (规则: MP, 深度: 7)
  LoG节点 35: vahtpus is movwpus (规则: MP, 深度: 7)
  LoG节点 36: movwpus is keyxpus and pahkpus (规则: MP, 深度: 7)
  LoG节点 37: keyxpus is pezppus (规则: MP, 深度: 7)
  LoG节点 38: pezppus is babbpus and baccpus and wicnpus and durnpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 32
   - 初始条件数: 27
   - LoG图节点数: 39

📋 初始条件列表:
    1. vahtpus is pollpus
    2. nixvpus is lekzpus and tamxpus
    3. lekzpus is vazbpus
    4. x is puzvpus and yeszpus
    5. keyxpus is gokxpus
    6. pezppus is jefbpus
    7. yivgpus is nixvpus
    8. movwpus is donzpus
    9. nukxpus is kesmpus
   10. didypus is kovqpus
   11. gokxpus is pezppus
   12. xustpus is kigcpus and mavnpus
   13. cibwpus is xustpus and bifzpus
   14. pollpus is movwpus
   15. kigcpus is simqpus
   16. kesmpus is rasfpus
   17. simqpus is didypus
   18. donzpus is keyxpus and pahkpus
   19. rasfpus is geqvpus and yubzpus
   20. kovqpus is ramlpus and kuzcpus and pokvpus
   21. ramlpus is xirhpus
   22. jefbpus is babbpus and baccpus and wicnpus and durnpus
   23. puzvpus is yivgpus and juqnpus and sodgpus
   24. geqvpus is lortpus
   25. lortpus is vahtpus and savkpus
   26. vazbpus is cibwpus
   27. xirhpus is nukxpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 27 个前提节点

🔍 开始处理actual节点...

   节点 1: x is puzvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is puzvpus
      ✅ 验证成功 + LoG匹配

   节点 2: puzvpus is yivgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: puzvpus is yivgpus and juqnpus and sodgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: puzvpus is yivgpus and juqnpus and sodgpus
  ✓ 点亮LoG节点: puzvpus is yivgpus and juqnpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 3: yivgpus is nixvpus
      ↻ 重复节点，计数: 2

   节点 4: nixvpus is lekzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: nixvpus is lekzpus and tamxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: nixvpus is lekzpus and tamxpus

   节点 5: lekzpus is vazbpus
      ↻ 重复节点，计数: 2

   节点 6: vazbpus is cibwpus
      ↻ 重复节点，计数: 2

   节点 7: cibwpus is xustpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: cibwpus is xustpus
      ✅ 验证成功 + LoG匹配

   节点 8: xustpus is kigcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: xustpus is kigcpus
      ✅ 验证成功 + LoG匹配

   节点 9: kigcpus is simqpus
      ↻ 重复节点，计数: 2

   节点 10: simqpus is didypus
      ↻ 重复节点，计数: 2

   节点 11: didypus is kovqpus
      ↻ 重复节点，计数: 2

   节点 12: kovqpus is ramlpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kovqpus is ramlpus and kuzcpus and pokvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kovqpus is ramlpus and kuzcpus and pokvpus

   节点 13: ramlpus is xirhpus
      ↻ 重复节点，计数: 2

   节点 14: xirhpus is nukxpus
      ↻ 重复节点，计数: 2

   节点 15: nukxpus is kesmpus
      ↻ 重复节点，计数: 2

   节点 16: kesmpus is rasfpus
      ↻ 重复节点，计数: 2

   节点 17: rasfpus is geqvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: rasfpus is geqvpus
      ✅ 验证成功 + LoG匹配

   节点 18: geqvpus is lortpus
      ↻ 重复节点，计数: 2

   节点 19: lortpus is vahtpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: lortpus is vahtpus and savkpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: lortpus is vahtpus and savkpus

   节点 20: vahtpus is pollpus
      ↻ 重复节点，计数: 2

   节点 21: pollpus is movwpus
      ↻ 重复节点，计数: 2

   节点 22: movwpus is donzpus
      ↻ 重复节点，计数: 2

   节点 23: donzpus is keyxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: donzpus is keyxpus and pahkpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: donzpus is keyxpus and pahkpus

   节点 24: keyxpus is gokxpus
      ↻ 重复节点，计数: 2

   节点 25: gokxpus is pezppus
      ↻ 重复节点，计数: 2

   节点 26: pezppus is jefbpus
      ↻ 重复节点，计数: 2

   节点 27: jefbpus is babbpus and baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: jefbpus is babbpus → jefbpus is baccpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: jefbpus is babbpus and baccpus and wicnpus and durnpus

   节点 28: puzvpus is jefbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: puzvpus is yivgpus → yivgpus is jefbpus
[后处理] 基于推理轨迹点亮节点，使用了 25 个前提条件:
  - 前提: puzvpus is yivgpus
  - 前提: yivgpus is nixvpus
  - 前提: nixvpus is lekzpus
  - 前提: lekzpus is vazbpus
  - 前提: vazbpus is cibwpus
  - 前提: cibwpus is xustpus
  - 前提: xustpus is kigcpus
  - 前提: kigcpus is simqpus
  - 前提: simqpus is didypus
  - 前提: didypus is kovqpus
  - 前提: kovqpus is ramlpus
  - 前提: ramlpus is xirhpus
  - 前提: xirhpus is nukxpus
  - 前提: nukxpus is kesmpus
  - 前提: kesmpus is rasfpus
  - 前提: rasfpus is geqvpus
  - 前提: geqvpus is lortpus
  - 前提: lortpus is vahtpus
  - 前提: vahtpus is pollpus
  - 前提: pollpus is movwpus
  - 前提: movwpus is donzpus
  - 前提: donzpus is keyxpus
  - 前提: keyxpus is gokxpus
  - 前提: gokxpus is pezppus
  - 前提: pezppus is jefbpus
  ✓ 点亮LoG节点: xustpus is ramlpus
[子树点亮]     └─ 点亮依赖节点: xustpus is ramlpus and kuzcpus (深度5)
[子树点亮]     └─ 点亮依赖节点: xustpus is didypus (深度6)
[子树点亮]     └─ 点亮依赖节点: didypus is ramlpus and kuzcpus (深度6)
[子树点亮]     └─ 点亮依赖节点: kigcpus is didypus (深度7)
[子树点亮]     └─ 点亮依赖节点: didypus is ramlpus and kuzcpus and pokvpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
  ✓ 点亮LoG节点: ramlpus is vahtpus
[子树点亮]     └─ 点亮依赖节点: ramlpus is vahtpus and savkpus (深度5)
[子树点亮]     └─ 点亮依赖节点: ramlpus is rasfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: rasfpus is vahtpus and savkpus (深度6)
[子树点亮]     └─ 点亮依赖节点: ramlpus is nukxpus (深度7)
[子树点亮]     └─ 点亮依赖节点: nukxpus is rasfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: geqvpus is vahtpus and savkpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 6 个节点
  ✓ 点亮LoG节点: yivgpus is xustpus
[子树点亮]     └─ 点亮依赖节点: yivgpus is lekzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: lekzpus is xustpus (深度6)
[子树点亮]     └─ 点亮依赖节点: yivgpus is lekzpus and tamxpus (深度7)
[子树点亮]     └─ 点亮依赖节点: lekzpus is cibwpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
  ✓ 点亮LoG节点: vahtpus is keyxpus
[子树点亮]     └─ 点亮依赖节点: vahtpus is keyxpus and pahkpus (深度6)
[子树点亮]     └─ 点亮依赖节点: vahtpus is movwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: movwpus is keyxpus and pahkpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
  ✓ 点亮LoG节点: keyxpus is pezppus
[后处理] 通过推理轨迹额外点亮了 5 个LoG节点

   节点 29: jefbpus is babbpus and baccpus
      ↻ 重复节点，计数: 2

   节点 30: x is babbpus and baccpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus and baccpus
[子树点亮]     └─ 点亮依赖节点: x is babbpus and baccpus and wicnpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is ramlpus (深度3)
[子树点亮]     └─ 点亮依赖节点: ramlpus is babbpus and baccpus and wicnpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is xustpus (深度4)
[子树点亮]     └─ 点亮依赖节点: vahtpus is babbpus and baccpus and wicnpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is yivgpus (深度5)
[子树点亮]     └─ 点亮依赖节点: keyxpus is babbpus and baccpus and wicnpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is yivgpus and juqnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: keyxpus is babbpus and baccpus and wicnpus and durnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: pezppus is babbpus and baccpus and wicnpus and durnpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 10 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 30
   - 新增节点: 12
   - 更新已存在节点: 18
   - 点亮的LoG节点: 39

🎯 推理质量统计:
   - 完美推理: 12 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 39节点, 27前提, 复杂度1-27

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 39
   - 前提节点: 27
   - 推理节点: 12
   - 幻觉节点: 0
   - 点亮LoG节点: 39

✅ 推理节点详情:
   🟢 x is puzvpus (出现1次, 质量:perfect)
   🟢 puzvpus is yivgpus (出现1次, 质量:perfect)
   🟢 nixvpus is lekzpus (出现1次, 质量:perfect)
   🟢 cibwpus is xustpus (出现1次, 质量:perfect)
   🟢 xustpus is kigcpus (出现1次, 质量:perfect)
   🟢 kovqpus is ramlpus (出现1次, 质量:perfect)
   🟢 rasfpus is geqvpus (出现1次, 质量:perfect)
   🟢 lortpus is vahtpus (出现1次, 质量:perfect)
   🟢 donzpus is keyxpus (出现1次, 质量:perfect)
   🟢 jefbpus is babbpus and baccpus (出现2次, 质量:perfect)
   🟢 puzvpus is jefbpus (出现1次, 质量:perfect)
   🟢 x is babbpus and baccpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - yivgpus is xustpus
   - vahtpus is keyxpus
   - movwpus is keyxpus and pahkpus
   - rasfpus is geqvpus
   - x is puzvpus
   - ramlpus is nukxpus
   - keyxpus is babbpus and baccpus and wicnpus
   - x is babbpus and baccpus and wicnpus
   - x is yivgpus
   - ramlpus is rasfpus
   - puzvpus is yivgpus and juqnpus
   - yivgpus is lekzpus
   - vahtpus is movwpus
   - xustpus is didypus
   - x is yivgpus and juqnpus
   - kigcpus is didypus
   - keyxpus is babbpus and baccpus and wicnpus and durnpus
   - nukxpus is rasfpus
   - didypus is ramlpus and kuzcpus and pokvpus
   - lekzpus is xustpus
   - ramlpus is vahtpus and savkpus
   - pezppus is babbpus and baccpus and wicnpus and durnpus
   - ramlpus is babbpus and baccpus and wicnpus
   - x is xustpus
   - xustpus is ramlpus
   - lekzpus is cibwpus
   - keyxpus is pezppus
   - x is ramlpus
   - geqvpus is vahtpus and savkpus
   - didypus is ramlpus and kuzcpus
   - vahtpus is babbpus and baccpus and wicnpus
   - rasfpus is vahtpus and savkpus
   - x is babbpus and baccpus
   - xustpus is ramlpus and kuzcpus
   - yivgpus is lekzpus and tamxpus
   - cibwpus is xustpus
   - vahtpus is keyxpus and pahkpus
   - ramlpus is vahtpus
   - xustpus is kigcpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus and baccpus (第7层)
   节点Coverage: 39/39 = 100.00%
   前提条件Coverage: 17/27 = 62.96%
   各推理层点亮比例:
     第1层: 16/16 = 100.00%
     第2层: 9/9 = 100.00%
     第3层: 6/6 = 100.00%
     第4层: 4/4 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/12 = 0.00%
   可推导节点: 12/12
   Strict Error Rate: 0/12 = 0.00%
   严格有效节点: 12/12

   详细分析:
     完美推理: 12 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 24/50
================================================================================
记录索引: 23
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_23.json
✅ 使用缓存结果:
   - 句子数: 20
   - 提取的语句数: 26
   - 初始条件数: 25

=== Statement提取完成 ===
总句子数: 20
成功提取: 20
失败提取: 0
总statements数: 26

=== 开始清洗Statement格式 ===
原始statements数: 26
清洗后statements数: 26
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 26
标准化后节点数: 26
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babbpus and baccpus and bachpus (原始: x is babbpus and baccpus and bachpus)
  2. [actual] jiyxpus → babbpus (原始: jiyxpus is babbpus)
  3. [actual] jiyxpus → baccpus (原始: jiyxpus is baccpus)
  4. [actual] jiyxpus → bachpus (原始: jiyxpus is bachpus)
  5. [actual] x → dogppus (原始: x is dogppus)
  6. [actual] dogppus → tutqpus (原始: dogppus is tutqpus)
  7. [actual] tutqpus → jikdpus and yofmpus (原始: tutqpus is jikdpus and yofmpus)
  8. [actual] dogppus → jikdpus (原始: dogppus is jikdpus)
  9. [actual] jikdpus → lasspus and nibjpus (原始: jikdpus is lasspus and nibjpus)
  10. [actual] dogppus → lasspus (原始: dogppus is lasspus)
  11. [actual] lasspus → gasgpus (原始: lasspus is gasgpus)
  12. [actual] gasgpus → xujvpus (原始: gasgpus is xujvpus)
  13. [actual] xujvpus → seqfpus (原始: xujvpus is seqfpus)
  14. [actual] seqfpus → xoxbpus (原始: seqfpus is xoxbpus)
  15. [actual] xoxbpus → barkpus and voxlpus (原始: xoxbpus is barkpus and voxlpus)
  16. [actual] seqfpus → barkpus (原始: seqfpus is barkpus)
  17. [actual] barkpus → fiskpus (原始: barkpus is fiskpus)
  18. [actual] fiskpus → paqlpus (原始: fiskpus is paqlpus)
  19. [actual] paqlpus → putfpus (原始: paqlpus is putfpus)
  20. [actual] putfpus → bezhpus and dathpus (原始: putfpus is bezhpus and dathpus)
  21. [actual] putfpus → bezhpus (原始: putfpus is bezhpus)
  22. [actual] bezhpus → jiyxpus and bexjpus (原始: bezhpus is jiyxpus and bexjpus)
  23. [actual] bezhpus → jiyxpus (原始: bezhpus is jiyxpus)
  24. [actual] x → jiyxpus (原始: x is jiyxpus)
  25. [actual] jiyxpus → babbpus and baccpus and bachpus (原始: jiyxpus is babbpus and baccpus and bachpus)
  26. [actual] x → babbpus and baccpus and bachpus (原始: x is babbpus and baccpus and bachpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 35
[后处理] 加载LoG图，包含 35 个节点
  LoG节点 0: x is babbpus and baccpus and bachpus (规则: CE, 深度: 1)
  LoG节点 1: x is babbpus and baccpus and bachpus and zoxhpus (规则: MP, 深度: 2)
  LoG节点 2: x is paqlpus (规则: CE, 深度: 3)
  LoG节点 3: paqlpus is babbpus and baccpus and bachpus and zoxhpus (规则: CI, 深度: 3)
  LoG节点 4: x is paqlpus and pexfpus (规则: MP, 深度: 4)
  LoG节点 5: paqlpus is babbpus and baccpus and bachpus (规则: CE, 深度: 4)
  LoG节点 6: paqlpus is zoxhpus (规则: MP, 深度: 4)
  LoG节点 7: x is xujvpus (规则: MP, 深度: 5)
  LoG节点 8: xujvpus is paqlpus and pexfpus (规则: MP, 深度: 5)
  LoG节点 9: paqlpus is babbpus and baccpus and bachpus and setrpus (规则: MP, 深度: 5)
  LoG节点 10: paqlpus is gabcpus (规则: CE, 深度: 5)
  LoG节点 11: gabcpus is zoxhpus (规则: CE, 深度: 5)
  LoG节点 12: x is jikdpus (规则: MP, 深度: 6)
  LoG节点 13: jikdpus is xujvpus (规则: MP, 深度: 6)
  LoG节点 14: xujvpus is barkpus (规则: MP, 深度: 6)
  LoG节点 15: barkpus is paqlpus and pexfpus (规则: CI, 深度: 6)
  LoG节点 16: paqlpus is bezhpus (规则: CE, 深度: 6)
  LoG节点 17: bezhpus is babbpus and baccpus and bachpus and setrpus (规则: MP, 深度: 6)
  LoG节点 18: paqlpus is gabcpus and qoxqpus (规则: MP, 深度: 6)
  LoG节点 19: gabcpus is zoxhpus and zasqpus (规则: MP, 深度: 6)
  LoG节点 20: x is tutqpus (规则: MP, 深度: 7)
  LoG节点 21: tutqpus is jikdpus (规则: CE, 深度: 7)
  LoG节点 22: jikdpus is lasspus (规则: CE, 深度: 7)
  LoG节点 23: lasspus is xujvpus (规则: MP, 深度: 7)
  LoG节点 24: xujvpus is xoxbpus (规则: MP, 深度: 7)
  LoG节点 25: xoxbpus is barkpus (规则: CE, 深度: 7)
  LoG节点 26: barkpus is paqlpus (规则: MP, 深度: 7)
  LoG节点 27: barkpus is pexfpus (规则: CE, 深度: 7)
  LoG节点 28: paqlpus is bezhpus and dathpus (规则: MP, 深度: 7)
  LoG节点 29: bezhpus is jiyxpus (规则: CE, 深度: 7)
  LoG节点 30: jiyxpus is babbpus and baccpus and bachpus and setrpus (规则: CI, 深度: 7)
  LoG节点 31: paqlpus is wohqpus (规则: MP, 深度: 7)
  LoG节点 32: wohqpus is gabcpus and qoxqpus (规则: CI, 深度: 7)
  LoG节点 33: gabcpus is cectpus (规则: MP, 深度: 7)
  LoG节点 34: cectpus is zoxhpus and zasqpus (规则: CI, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 26
   - 初始条件数: 25
   - LoG图节点数: 35

📋 初始条件列表:
    1. paqlpus is putfpus
    2. fiskpus is paqlpus
    3. nikbpus is cectpus
    4. seqfpus is xoxbpus
    5. gabcpus is nikbpus
    6. putfpus is bezhpus and dathpus
    7. paqlpus is lusqpus
    8. x is dogppus
    9. cectpus is zasqpus
   10. bezhpus is jiyxpus and bexjpus
   11. barkpus is fiskpus
   12. xoxbpus is barkpus and voxlpus
   13. tutqpus is jikdpus and yofmpus
   14. lusqpus is wohqpus
   15. jikdpus is lasspus and nibjpus
   16. jiyxpus is setrpus
   17. barkpus is pexfpus and muncpus
   18. wohqpus is gabcpus
   19. gasgpus is xujvpus
   20. lasspus is gasgpus
   21. dogppus is tutqpus
   22. cectpus is zoxhpus
   23. jiyxpus is babbpus and baccpus and bachpus
   24. xujvpus is seqfpus
   25. wohqpus is qoxqpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 25 个前提节点

🔍 开始处理actual节点...

   节点 1: jiyxpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: jiyxpus is babbpus and baccpus and bachpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: jiyxpus is babbpus and baccpus and bachpus

   节点 2: jiyxpus is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: jiyxpus is babbpus and baccpus and bachpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: jiyxpus is babbpus and baccpus and bachpus

   节点 3: jiyxpus is bachpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: jiyxpus is babbpus and baccpus and bachpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: jiyxpus is babbpus and baccpus and bachpus

   节点 4: x is dogppus
      ↻ 重复节点，计数: 2

   节点 5: dogppus is tutqpus
      ↻ 重复节点，计数: 2

   节点 6: tutqpus is jikdpus and yofmpus
      ↻ 重复节点，计数: 2

   节点 7: dogppus is jikdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: dogppus is tutqpus → tutqpus is jikdpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: dogppus is tutqpus
  - 前提: tutqpus is jikdpus and yofmpus
  ✓ 点亮LoG节点: tutqpus is jikdpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 8: jikdpus is lasspus and nibjpus
      ↻ 重复节点，计数: 2

   节点 9: dogppus is lasspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: dogppus is tutqpus → tutqpus is lasspus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: dogppus is tutqpus
  - 前提: tutqpus is jikdpus and yofmpus
  - 前提: jikdpus is lasspus and nibjpus
  ✓ 点亮LoG节点: jikdpus is lasspus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 10: lasspus is gasgpus
      ↻ 重复节点，计数: 2

   节点 11: gasgpus is xujvpus
      ↻ 重复节点，计数: 2

   节点 12: xujvpus is seqfpus
      ↻ 重复节点，计数: 2

   节点 13: seqfpus is xoxbpus
      ↻ 重复节点，计数: 2

   节点 14: xoxbpus is barkpus and voxlpus
      ↻ 重复节点，计数: 2

   节点 15: seqfpus is barkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: seqfpus is xoxbpus → xoxbpus is barkpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: seqfpus is xoxbpus
  - 前提: xoxbpus is barkpus and voxlpus
  ✓ 点亮LoG节点: xoxbpus is barkpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 16: barkpus is fiskpus
      ↻ 重复节点，计数: 2

   节点 17: fiskpus is paqlpus
      ↻ 重复节点，计数: 2

   节点 18: paqlpus is putfpus
      ↻ 重复节点，计数: 2

   节点 19: putfpus is bezhpus and dathpus
      ↻ 重复节点，计数: 2

   节点 20: putfpus is bezhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: putfpus is bezhpus and dathpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: putfpus is bezhpus and dathpus

   节点 21: bezhpus is jiyxpus and bexjpus
      ↻ 重复节点，计数: 2

   节点 22: bezhpus is jiyxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: bezhpus is jiyxpus
      ✅ 验证成功 + LoG匹配

   节点 23: x is jiyxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is dogppus → dogppus is jiyxpus
[后处理] 基于推理轨迹点亮节点，使用了 14 个前提条件:
  - 前提: x is dogppus
  - 前提: dogppus is tutqpus
  - 前提: tutqpus is jikdpus and yofmpus
  - 前提: jikdpus is lasspus and nibjpus
  - 前提: lasspus is gasgpus
  - 前提: gasgpus is xujvpus
  - 前提: xujvpus is seqfpus
  - 前提: seqfpus is xoxbpus
  - 前提: xoxbpus is barkpus and voxlpus
  - 前提: barkpus is fiskpus
  - 前提: fiskpus is paqlpus
  - 前提: paqlpus is putfpus
  - 前提: putfpus is bezhpus
  - 前提: bezhpus is jiyxpus
  ✓ 点亮LoG节点: x is paqlpus
[子树点亮]     └─ 点亮依赖节点: x is paqlpus and pexfpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is xujvpus (深度5)
[子树点亮]     └─ 点亮依赖节点: xujvpus is paqlpus and pexfpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is jikdpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jikdpus is xujvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: xujvpus is barkpus (深度6)
[子树点亮]     └─ 点亮依赖节点: barkpus is paqlpus and pexfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is tutqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: lasspus is xujvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xujvpus is xoxbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: barkpus is paqlpus (深度7)
[子树点亮]     └─ 点亮依赖节点: barkpus is pexfpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 12 个节点
  ✓ 点亮LoG节点: paqlpus is bezhpus
[子树点亮]     └─ 点亮依赖节点: paqlpus is bezhpus and dathpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 2 个LoG节点

   节点 24: jiyxpus is babbpus and baccpus and bachpus
      ↻ 重复节点，计数: 2

   节点 25: x is babbpus and baccpus and bachpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus and baccpus and bachpus
[子树点亮]     └─ 点亮依赖节点: x is babbpus and baccpus and bachpus and zoxhpus (深度2)
[子树点亮]     └─ 点亮依赖节点: paqlpus is babbpus and baccpus and bachpus and zoxhpus (深度3)
[子树点亮]     └─ 点亮依赖节点: paqlpus is babbpus and baccpus and bachpus (深度4)
[子树点亮]     └─ 点亮依赖节点: paqlpus is zoxhpus (深度4)
[子树点亮]     └─ 点亮依赖节点: paqlpus is babbpus and baccpus and bachpus and setrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: paqlpus is gabcpus (深度5)
[子树点亮]     └─ 点亮依赖节点: gabcpus is zoxhpus (深度5)
[子树点亮]     └─ 点亮依赖节点: bezhpus is babbpus and baccpus and bachpus and setrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: paqlpus is gabcpus and qoxqpus (深度6)
[子树点亮]     └─ 点亮依赖节点: gabcpus is zoxhpus and zasqpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jiyxpus is babbpus and baccpus and bachpus and setrpus (深度7)
[子树点亮]     └─ 点亮依赖节点: paqlpus is wohqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: wohqpus is gabcpus and qoxqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: gabcpus is cectpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cectpus is zoxhpus and zasqpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 15 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 25
   - 新增节点: 10
   - 更新已存在节点: 15
   - 点亮的LoG节点: 35

🎯 推理质量统计:
   - 完美推理: 10 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 35节点, 25前提, 复杂度1-25

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 35
   - 前提节点: 25
   - 推理节点: 10
   - 幻觉节点: 0
   - 点亮LoG节点: 35

✅ 推理节点详情:
   🟢 jiyxpus is babbpus (出现1次, 质量:perfect)
   🟢 jiyxpus is baccpus (出现1次, 质量:perfect)
   🟢 jiyxpus is bachpus (出现1次, 质量:perfect)
   🟢 dogppus is jikdpus (出现1次, 质量:perfect)
   🟢 dogppus is lasspus (出现1次, 质量:perfect)
   🟢 seqfpus is barkpus (出现1次, 质量:perfect)
   🟢 putfpus is bezhpus (出现1次, 质量:perfect)
   🟢 bezhpus is jiyxpus (出现1次, 质量:perfect)
   🟢 x is jiyxpus (出现1次, 质量:perfect)
   🟢 x is babbpus and baccpus and bachpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is xujvpus
   - xujvpus is xoxbpus
   - x is paqlpus and pexfpus
   - wohqpus is gabcpus and qoxqpus
   - x is babbpus and baccpus and bachpus
   - paqlpus is gabcpus and qoxqpus
   - bezhpus is babbpus and baccpus and bachpus and setrpus
   - paqlpus is gabcpus
   - lasspus is xujvpus
   - paqlpus is bezhpus
   - barkpus is pexfpus
   - gabcpus is zoxhpus
   - xujvpus is barkpus
   - barkpus is paqlpus and pexfpus
   - gabcpus is cectpus
   - paqlpus is babbpus and baccpus and bachpus and zoxhpus
   - jikdpus is lasspus
   - gabcpus is zoxhpus and zasqpus
   - barkpus is paqlpus
   - bezhpus is jiyxpus
   - paqlpus is bezhpus and dathpus
   - tutqpus is jikdpus
   - x is jikdpus
   - x is tutqpus
   - jikdpus is xujvpus
   - x is paqlpus
   - cectpus is zoxhpus and zasqpus
   - paqlpus is zoxhpus
   - jiyxpus is babbpus and baccpus and bachpus and setrpus
   - xoxbpus is barkpus
   - paqlpus is babbpus and baccpus and bachpus and setrpus
   - x is babbpus and baccpus and bachpus and zoxhpus
   - xujvpus is paqlpus and pexfpus
   - paqlpus is babbpus and baccpus and bachpus
   - paqlpus is wohqpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus and baccpus and bachpus (第7层)
   节点Coverage: 35/35 = 100.00%
   前提条件Coverage: 15/25 = 60.00%
   各推理层点亮比例:
     第1层: 15/15 = 100.00%
     第2层: 8/8 = 100.00%
     第3层: 5/5 = 100.00%
     第4层: 3/3 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/10 = 0.00%
   可推导节点: 10/10
   Strict Error Rate: 0/10 = 0.00%
   严格有效节点: 10/10

   详细分析:
     完美推理: 10 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 25/50
================================================================================
记录索引: 24
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_24.json
✅ 使用缓存结果:
   - 句子数: 45
   - 提取的语句数: 44
   - 初始条件数: 37

=== Statement提取完成 ===
总句子数: 45
成功提取: 45
失败提取: 0
总statements数: 44

=== 开始清洗Statement格式 ===
原始statements数: 44
清洗后statements数: 41
过滤掉的statements数: 3
清洗后的statements:
  1. [planning] x is babbpus
  2. [planning] x is baccpus
  3. [planning] x is bachpus
  4. [actual] x is nithpus
  5. [actual] nithpus is darcpus
  6. [actual] darcpus is biwvpus
  7. [actual] biwvpus is litjpus
  8. [actual] litjpus is daydpus
  9. [actual] daydpus is mexfpus and purfpus
  10. [actual] mexfpus is qeytpus
  11. [actual] qeytpus is gewspus
  12. [actual] gewspus is wojrpus
  13. [actual] wojrpus is bogcpus
  14. [actual] bogcpus is jilmpus
  15. [actual] jilmpus is niydpus
  16. [actual] niydpus is tidmpus
  17. [actual] tidmpus is reyvpus
  18. [actual] reyvpus is vipfpus
  19. [actual] vipfpus is qicjpus
  20. [actual] qicjpus is gonkpus
  21. [actual] gonkpus is lefnpus and cuyzpus
  22. [actual] lefnpus is mayrpus
  23. [actual] mayrpus is nisdpus
  24. [actual] nisdpus is risrpus
  25. [actual] risrpus is sihkpus
  26. [actual] sihkpus is tanbpus
  27. [actual] tanbpus is zeplpus
  28. [actual] zeplpus is wuxkpus
  29. [actual] wuxkpus is vugdpus
  30. [actual] vugdpus is babbpus and baccpus and rezypus and yotfpus
  31. [actual] x is babbpus and baccpus
  32. [actual] risrpus is ropzpus
  33. [actual] ropzpus is lultpus and tusspus
  34. [actual] lultpus is vifwpus
  35. [actual] vifwpus is colypus
  36. [actual] colypus is pemspus
  37. [actual] pemspus is cophpus
  38. [actual] cophpus is nuqdpus and qilrpus
  39. [actual] nuqdpus is bachpus
  40. [actual] x is bachpus
  41. [actual] x is babbpus and baccpus and bachpus

=== 开始标准化和解析节点 ===
清洗后statements数: 41
标准化后节点数: 41
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babbpus (原始: x is babbpus)
  2. [planning] x → baccpus (原始: x is baccpus)
  3. [planning] x → bachpus (原始: x is bachpus)
  4. [actual] x → nithpus (原始: x is nithpus)
  5. [actual] nithpus → darcpus (原始: nithpus is darcpus)
  6. [actual] darcpus → biwvpus (原始: darcpus is biwvpus)
  7. [actual] biwvpus → litjpus (原始: biwvpus is litjpus)
  8. [actual] litjpus → daydpus (原始: litjpus is daydpus)
  9. [actual] daydpus → mexfpus and purfpus (原始: daydpus is mexfpus and purfpus)
  10. [actual] mexfpus → qeytpus (原始: mexfpus is qeytpus)
  11. [actual] qeytpus → gewspus (原始: qeytpus is gewspus)
  12. [actual] gewspus → wojrpus (原始: gewspus is wojrpus)
  13. [actual] wojrpus → bogcpus (原始: wojrpus is bogcpus)
  14. [actual] bogcpus → jilmpus (原始: bogcpus is jilmpus)
  15. [actual] jilmpus → niydpus (原始: jilmpus is niydpus)
  16. [actual] niydpus → tidmpus (原始: niydpus is tidmpus)
  17. [actual] tidmpus → reyvpus (原始: tidmpus is reyvpus)
  18. [actual] reyvpus → vipfpus (原始: reyvpus is vipfpus)
  19. [actual] vipfpus → qicjpus (原始: vipfpus is qicjpus)
  20. [actual] qicjpus → gonkpus (原始: qicjpus is gonkpus)
  21. [actual] gonkpus → lefnpus and cuyzpus (原始: gonkpus is lefnpus and cuyzpus)
  22. [actual] lefnpus → mayrpus (原始: lefnpus is mayrpus)
  23. [actual] mayrpus → nisdpus (原始: mayrpus is nisdpus)
  24. [actual] nisdpus → risrpus (原始: nisdpus is risrpus)
  25. [actual] risrpus → sihkpus (原始: risrpus is sihkpus)
  26. [actual] sihkpus → tanbpus (原始: sihkpus is tanbpus)
  27. [actual] tanbpus → zeplpus (原始: tanbpus is zeplpus)
  28. [actual] zeplpus → wuxkpus (原始: zeplpus is wuxkpus)
  29. [actual] wuxkpus → vugdpus (原始: wuxkpus is vugdpus)
  30. [actual] vugdpus → babbpus and baccpus and rezypus and yotfpus (原始: vugdpus is babbpus and baccpus and rezypus and yotfpus)
  31. [actual] x → babbpus and baccpus (原始: x is babbpus and baccpus)
  32. [actual] risrpus → ropzpus (原始: risrpus is ropzpus)
  33. [actual] ropzpus → lultpus and tusspus (原始: ropzpus is lultpus and tusspus)
  34. [actual] lultpus → vifwpus (原始: lultpus is vifwpus)
  35. [actual] vifwpus → colypus (原始: vifwpus is colypus)
  36. [actual] colypus → pemspus (原始: colypus is pemspus)
  37. [actual] pemspus → cophpus (原始: pemspus is cophpus)
  38. [actual] cophpus → nuqdpus and qilrpus (原始: cophpus is nuqdpus and qilrpus)
  39. [actual] nuqdpus → bachpus (原始: nuqdpus is bachpus)
  40. [actual] x → bachpus (原始: x is bachpus)
  41. [actual] x → babbpus and baccpus and bachpus (原始: x is babbpus and baccpus and bachpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 45
[后处理] 加载LoG图，包含 45 个节点
  LoG节点 0: x is babbpus and baccpus and bachpus (规则: CE, 深度: 1)
  LoG节点 1: x is babbpus and baccpus and bachpus and wehdpus (规则: MP, 深度: 2)
  LoG节点 2: x is risrpus (规则: MP, 深度: 3)
  LoG节点 3: risrpus is babbpus and baccpus and bachpus and wehdpus (规则: CI, 深度: 3)
  LoG节点 4: x is reyvpus (规则: MP, 深度: 4)
  LoG节点 5: reyvpus is risrpus (规则: MP, 深度: 4)
  LoG节点 6: risrpus is babbpus and baccpus (规则: CE, 深度: 4)
  LoG节点 7: risrpus is bachpus and wehdpus (规则: MP, 深度: 4)
  LoG节点 8: x is mexfpus (规则: MP, 深度: 5)
  LoG节点 9: mexfpus is reyvpus (规则: MP, 深度: 5)
  LoG节点 10: reyvpus is lefnpus (规则: CE, 深度: 5)
  LoG节点 11: lefnpus is risrpus (规则: CE, 深度: 5)
  LoG节点 12: risrpus is babbpus and baccpus and rezypus (规则: MP, 深度: 5)
  LoG节点 13: risrpus is cophpus (规则: MP, 深度: 5)
  LoG节点 14: cophpus is bachpus and wehdpus (规则: CE, 深度: 5)
  LoG节点 15: x is litjpus (规则: MP, 深度: 6)
  LoG节点 16: litjpus is mexfpus (规则: CE, 深度: 6)
  LoG节点 17: mexfpus is bogcpus (规则: MP, 深度: 6)
  LoG节点 18: bogcpus is reyvpus (规则: MP, 深度: 6)
  LoG节点 19: reyvpus is lefnpus and cuyzpus (规则: MP, 深度: 6)
  LoG节点 20: lefnpus is risrpus and kazqpus (规则: MP, 深度: 6)
  LoG节点 21: risrpus is wuxkpus (规则: MP, 深度: 6)
  LoG节点 22: wuxkpus is babbpus and baccpus and rezypus (规则: CE, 深度: 6)
  LoG节点 23: risrpus is lultpus (规则: CE, 深度: 6)
  LoG节点 24: lultpus is cophpus (规则: MP, 深度: 6)
  LoG节点 25: cophpus is bachpus and wehdpus and rimrpus (规则: MP, 深度: 6)
  LoG节点 26: x is darcpus (规则: MP, 深度: 7)
  LoG节点 27: darcpus is litjpus (规则: MP, 深度: 7)
  LoG节点 28: litjpus is mexfpus and purfpus (规则: MP, 深度: 7)
  LoG节点 29: mexfpus is gewspus (规则: MP, 深度: 7)
  LoG节点 30: gewspus is bogcpus (规则: MP, 深度: 7)
  LoG节点 31: bogcpus is niydpus (规则: MP, 深度: 7)
  LoG节点 32: niydpus is reyvpus (规则: MP, 深度: 7)
  LoG节点 33: reyvpus is qicjpus (规则: MP, 深度: 7)
  LoG节点 34: qicjpus is lefnpus and cuyzpus (规则: MP, 深度: 7)
  LoG节点 35: lefnpus is nisdpus (规则: MP, 深度: 7)
  LoG节点 36: nisdpus is risrpus and kazqpus (规则: CI, 深度: 7)
  LoG节点 37: risrpus is tanbpus (规则: MP, 深度: 7)
  LoG节点 38: tanbpus is wuxkpus (规则: MP, 深度: 7)
  LoG节点 39: wuxkpus is babbpus and baccpus and rezypus and yotfpus (规则: MP, 深度: 7)
  LoG节点 40: risrpus is lultpus and tusspus (规则: MP, 深度: 7)
  LoG节点 41: lultpus is colypus (规则: MP, 深度: 7)
  LoG节点 42: colypus is cophpus (规则: MP, 深度: 7)
  LoG节点 43: cophpus is nuqdpus (规则: CE, 深度: 7)
  LoG节点 44: nuqdpus is bachpus and wehdpus and rimrpus (规则: CI, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 41
   - 初始条件数: 37
   - LoG图节点数: 45

📋 初始条件列表:
    1. jilmpus is niydpus
    2. qeytpus is gewspus
    3. nuqdpus is wehdpus and rimrpus
    4. tanbpus is zeplpus
    5. darcpus is biwvpus
    6. reyvpus is vipfpus
    7. ropzpus is lultpus and tusspus
    8. pemspus is cophpus
    9. gewspus is wojrpus
   10. risrpus is sihkpus
   11. x is nithpus
   12. vifwpus is colypus
   13. wojrpus is bogcpus
   14. sihkpus is tanbpus
   15. zeplpus is wuxkpus
   16. daydpus is mexfpus and purfpus
   17. mayrpus is nisdpus
   18. nisdpus is risrpus
   19. lefnpus is mayrpus
   20. qicjpus is gonkpus
   21. bogcpus is jilmpus
   22. mexfpus is qeytpus
   23. colypus is pemspus
   24. biwvpus is litjpus
   25. lultpus is vifwpus
   26. vipfpus is qicjpus
   27. niydpus is tidmpus
   28. risrpus is ropzpus
   29. wuxkpus is vugdpus
   30. gonkpus is lefnpus and cuyzpus
   31. tidmpus is reyvpus
   32. nithpus is darcpus
   33. cophpus is nuqdpus and qilrpus
   34. nisdpus is kazqpus
   35. vugdpus is babbpus and baccpus and rezypus and yotfpus
   36. nuqdpus is bachpus
   37. litjpus is daydpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 37 个前提节点

🔍 开始处理actual节点...

   节点 1: x is nithpus
      ↻ 重复节点，计数: 2

   节点 2: nithpus is darcpus
      ↻ 重复节点，计数: 2

   节点 3: darcpus is biwvpus
      ↻ 重复节点，计数: 2

   节点 4: biwvpus is litjpus
      ↻ 重复节点，计数: 2

   节点 5: litjpus is daydpus
      ↻ 重复节点，计数: 2

   节点 6: daydpus is mexfpus and purfpus
      ↻ 重复节点，计数: 2

   节点 7: mexfpus is qeytpus
      ↻ 重复节点，计数: 2

   节点 8: qeytpus is gewspus
      ↻ 重复节点，计数: 2

   节点 9: gewspus is wojrpus
      ↻ 重复节点，计数: 2

   节点 10: wojrpus is bogcpus
      ↻ 重复节点，计数: 2

   节点 11: bogcpus is jilmpus
      ↻ 重复节点，计数: 2

   节点 12: jilmpus is niydpus
      ↻ 重复节点，计数: 2

   节点 13: niydpus is tidmpus
      ↻ 重复节点，计数: 2

   节点 14: tidmpus is reyvpus
      ↻ 重复节点，计数: 2

   节点 15: reyvpus is vipfpus
      ↻ 重复节点，计数: 2

   节点 16: vipfpus is qicjpus
      ↻ 重复节点，计数: 2

   节点 17: qicjpus is gonkpus
      ↻ 重复节点，计数: 2

   节点 18: gonkpus is lefnpus and cuyzpus
      ↻ 重复节点，计数: 2

   节点 19: lefnpus is mayrpus
      ↻ 重复节点，计数: 2

   节点 20: mayrpus is nisdpus
      ↻ 重复节点，计数: 2

   节点 21: nisdpus is risrpus
      ↻ 重复节点，计数: 2

   节点 22: risrpus is sihkpus
      ↻ 重复节点，计数: 2

   节点 23: sihkpus is tanbpus
      ↻ 重复节点，计数: 2

   节点 24: tanbpus is zeplpus
      ↻ 重复节点，计数: 2

   节点 25: zeplpus is wuxkpus
      ↻ 重复节点，计数: 2

   节点 26: wuxkpus is vugdpus
      ↻ 重复节点，计数: 2

   节点 27: vugdpus is babbpus and baccpus and rezypus and yotfpus
      ↻ 重复节点，计数: 2

   节点 28: x is babbpus and baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is nithpus → nithpus is babbpus and baccpus
[后处理] 基于推理轨迹点亮节点，使用了 27 个前提条件:
  - 前提: x is nithpus
  - 前提: nithpus is darcpus
  - 前提: darcpus is biwvpus
  - 前提: biwvpus is litjpus
  - 前提: litjpus is daydpus
  - 前提: daydpus is mexfpus and purfpus
  - 前提: mexfpus is qeytpus
  - 前提: qeytpus is gewspus
  - 前提: gewspus is wojrpus
  - 前提: wojrpus is bogcpus
  - 前提: bogcpus is jilmpus
  - 前提: jilmpus is niydpus
  - 前提: niydpus is tidmpus
  - 前提: tidmpus is reyvpus
  - 前提: reyvpus is vipfpus
  - 前提: vipfpus is qicjpus
  - 前提: qicjpus is gonkpus
  - 前提: gonkpus is lefnpus and cuyzpus
  - 前提: lefnpus is mayrpus
  - 前提: mayrpus is nisdpus
  - 前提: nisdpus is risrpus
  - 前提: risrpus is sihkpus
  - 前提: sihkpus is tanbpus
  - 前提: tanbpus is zeplpus
  - 前提: zeplpus is wuxkpus
  - 前提: wuxkpus is vugdpus
  - 前提: vugdpus is babbpus and baccpus and rezypus and yotfpus
  ✓ 点亮LoG节点: x is risrpus
[子树点亮]     └─ 点亮依赖节点: x is reyvpus (深度4)
[子树点亮]     └─ 点亮依赖节点: reyvpus is risrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is mexfpus (深度5)
[子树点亮]     └─ 点亮依赖节点: mexfpus is reyvpus (深度5)
[子树点亮]     └─ 点亮依赖节点: reyvpus is lefnpus (深度5)
[子树点亮]     └─ 点亮依赖节点: lefnpus is risrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is litjpus (深度6)
[子树点亮]     └─ 点亮依赖节点: litjpus is mexfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: mexfpus is bogcpus (深度6)
[子树点亮]     └─ 点亮依赖节点: bogcpus is reyvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: reyvpus is lefnpus and cuyzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: lefnpus is risrpus and kazqpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is darcpus (深度7)
[子树点亮]     └─ 点亮依赖节点: darcpus is litjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: litjpus is mexfpus and purfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: mexfpus is gewspus (深度7)
[子树点亮]     └─ 点亮依赖节点: gewspus is bogcpus (深度7)
[子树点亮]     └─ 点亮依赖节点: bogcpus is niydpus (深度7)
[子树点亮]     └─ 点亮依赖节点: niydpus is reyvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: reyvpus is qicjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qicjpus is lefnpus and cuyzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: lefnpus is nisdpus (深度7)
[子树点亮]     └─ 点亮依赖节点: nisdpus is risrpus and kazqpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 23 个节点
  ✓ 点亮LoG节点: risrpus is babbpus and baccpus
[子树点亮]     └─ 点亮依赖节点: risrpus is babbpus and baccpus and rezypus (深度5)
[子树点亮]     └─ 点亮依赖节点: risrpus is wuxkpus (深度6)
[子树点亮]     └─ 点亮依赖节点: wuxkpus is babbpus and baccpus and rezypus (深度6)
[子树点亮]     └─ 点亮依赖节点: risrpus is tanbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: tanbpus is wuxkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: wuxkpus is babbpus and baccpus and rezypus and yotfpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 6 个节点
[后处理] 通过推理轨迹额外点亮了 2 个LoG节点

   节点 29: risrpus is ropzpus
      ↻ 重复节点，计数: 2

   节点 30: ropzpus is lultpus and tusspus
      ↻ 重复节点，计数: 2

   节点 31: lultpus is vifwpus
      ↻ 重复节点，计数: 2

   节点 32: vifwpus is colypus
      ↻ 重复节点，计数: 2

   节点 33: colypus is pemspus
      ↻ 重复节点，计数: 2

   节点 34: pemspus is cophpus
      ↻ 重复节点，计数: 2

   节点 35: cophpus is nuqdpus and qilrpus
      ↻ 重复节点，计数: 2

   节点 36: nuqdpus is bachpus
      ↻ 重复节点，计数: 2

   节点 37: x is bachpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is nithpus → nithpus is bachpus
[后处理] 基于推理轨迹点亮节点，使用了 29 个前提条件:
  - 前提: x is nithpus
  - 前提: nithpus is darcpus
  - 前提: darcpus is biwvpus
  - 前提: biwvpus is litjpus
  - 前提: litjpus is daydpus
  - 前提: daydpus is mexfpus and purfpus
  - 前提: mexfpus is qeytpus
  - 前提: qeytpus is gewspus
  - 前提: gewspus is wojrpus
  - 前提: wojrpus is bogcpus
  - 前提: bogcpus is jilmpus
  - 前提: jilmpus is niydpus
  - 前提: niydpus is tidmpus
  - 前提: tidmpus is reyvpus
  - 前提: reyvpus is vipfpus
  - 前提: vipfpus is qicjpus
  - 前提: qicjpus is gonkpus
  - 前提: gonkpus is lefnpus and cuyzpus
  - 前提: lefnpus is mayrpus
  - 前提: mayrpus is nisdpus
  - 前提: nisdpus is risrpus
  - 前提: risrpus is ropzpus
  - 前提: ropzpus is lultpus and tusspus
  - 前提: lultpus is vifwpus
  - 前提: vifwpus is colypus
  - 前提: colypus is pemspus
  - 前提: pemspus is cophpus
  - 前提: cophpus is nuqdpus and qilrpus
  - 前提: nuqdpus is bachpus
  ✓ 点亮LoG节点: risrpus is cophpus
[子树点亮]     └─ 点亮依赖节点: risrpus is lultpus (深度6)
[子树点亮]     └─ 点亮依赖节点: lultpus is cophpus (深度6)
[子树点亮]     └─ 点亮依赖节点: risrpus is lultpus and tusspus (深度7)
[子树点亮]     └─ 点亮依赖节点: lultpus is colypus (深度7)
[子树点亮]     └─ 点亮依赖节点: colypus is cophpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
  ✓ 点亮LoG节点: cophpus is nuqdpus
[后处理] 通过推理轨迹额外点亮了 2 个LoG节点

   节点 38: x is babbpus and baccpus and bachpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus and baccpus and bachpus
[子树点亮]     └─ 点亮依赖节点: x is babbpus and baccpus and bachpus and wehdpus (深度2)
[子树点亮]     └─ 点亮依赖节点: risrpus is babbpus and baccpus and bachpus and wehdpus (深度3)
[子树点亮]     └─ 点亮依赖节点: risrpus is bachpus and wehdpus (深度4)
[子树点亮]     └─ 点亮依赖节点: cophpus is bachpus and wehdpus (深度5)
[子树点亮]     └─ 点亮依赖节点: cophpus is bachpus and wehdpus and rimrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: nuqdpus is bachpus and wehdpus and rimrpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 6 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 38
   - 新增节点: 3
   - 更新已存在节点: 35
   - 点亮的LoG节点: 45

🎯 推理质量统计:
   - 完美推理: 3 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 45节点, 37前提, 复杂度1-37

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 40
   - 前提节点: 37
   - 推理节点: 3
   - 幻觉节点: 0
   - 点亮LoG节点: 45

✅ 推理节点详情:
   🟢 x is babbpus and baccpus (出现1次, 质量:perfect)
   🟢 x is bachpus (出现1次, 质量:perfect)
   🟢 x is babbpus and baccpus and bachpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - lefnpus is risrpus
   - x is babbpus and baccpus and bachpus
   - risrpus is lultpus and tusspus
   - lultpus is colypus
   - reyvpus is lefnpus and cuyzpus
   - risrpus is lultpus
   - x is mexfpus
   - qicjpus is lefnpus and cuyzpus
   - tanbpus is wuxkpus
   - cophpus is bachpus and wehdpus
   - gewspus is bogcpus
   - mexfpus is bogcpus
   - x is risrpus
   - nisdpus is risrpus and kazqpus
   - lultpus is cophpus
   - cophpus is nuqdpus
   - litjpus is mexfpus and purfpus
   - risrpus is babbpus and baccpus and rezypus
   - cophpus is bachpus and wehdpus and rimrpus
   - reyvpus is qicjpus
   - wuxkpus is babbpus and baccpus and rezypus
   - risrpus is bachpus and wehdpus
   - niydpus is reyvpus
   - mexfpus is reyvpus
   - nuqdpus is bachpus and wehdpus and rimrpus
   - reyvpus is lefnpus
   - x is babbpus and baccpus and bachpus and wehdpus
   - litjpus is mexfpus
   - wuxkpus is babbpus and baccpus and rezypus and yotfpus
   - risrpus is babbpus and baccpus
   - darcpus is litjpus
   - colypus is cophpus
   - bogcpus is niydpus
   - x is reyvpus
   - x is litjpus
   - lefnpus is nisdpus
   - risrpus is cophpus
   - reyvpus is risrpus
   - lefnpus is risrpus and kazqpus
   - bogcpus is reyvpus
   - mexfpus is gewspus
   - risrpus is tanbpus
   - risrpus is babbpus and baccpus and bachpus and wehdpus
   - risrpus is wuxkpus
   - x is darcpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus and baccpus and bachpus (第7层)
   节点Coverage: 45/45 = 100.00%
   前提条件Coverage: 35/37 = 94.59%
   各推理层点亮比例:
     第1层: 19/19 = 100.00%
     第2层: 11/11 = 100.00%
     第3层: 7/7 = 100.00%
     第4层: 4/4 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/3 = 0.00%
   可推导节点: 3/3
   Strict Error Rate: 0/3 = 0.00%
   严格有效节点: 3/3

   详细分析:
     完美推理: 3 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 26/50
================================================================================
记录索引: 25
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_25.json
✅ 使用缓存结果:
   - 句子数: 7
   - 提取的语句数: 29
   - 初始条件数: 34

=== Statement提取完成 ===
总句子数: 7
成功提取: 7
失败提取: 0
总statements数: 29

=== 开始清洗Statement格式 ===
原始statements数: 29
清洗后statements数: 28
过滤掉的statements数: 1
清洗后的statements:
  1. [planning] x is babbpus
  2. [planning] x is baccpus
  3. [planning] x is bachpus
  4. [actual] x is resppus
  5. [actual] x is qodspus
  6. [actual] qodspus is nibqpus
  7. [actual] nibqpus is cihqpus
  8. [actual] cihqpus is hoyypus
  9. [actual] hoyypus is qepcpus
  10. [actual] qepcpus is babbpus
  11. [actual] x is babbpus
  12. [actual] qodspus is yapzpus
  13. [actual] yapzpus is tecgpus
  14. [actual] tecgpus is lihvpus
  15. [actual] lihvpus is qoxypus
  16. [actual] qoxypus is jundpus
  17. [actual] jundpus is hubqpus
  18. [actual] hubqpus is somzpus
  19. [actual] somzpus is baccpus
  20. [actual] x is baccpus
  21. [actual] qodspus is gokkpus
  22. [actual] gokkpus is yexfpus
  23. [actual] yexfpus is riqtpus
  24. [actual] riqtpus is bachpus
  25. [actual] x is bachpus
  26. [actual] x is babbpus
  27. [actual] x is baccpus
  28. [actual] x is bachpus

=== 开始标准化和解析节点 ===
清洗后statements数: 28
标准化后节点数: 28
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babbpus (原始: x is babbpus)
  2. [planning] x → baccpus (原始: x is baccpus)
  3. [planning] x → bachpus (原始: x is bachpus)
  4. [actual] x → resppus (原始: x is resppus)
  5. [actual] x → qodspus (原始: x is qodspus)
  6. [actual] qodspus → nibqpus (原始: qodspus is nibqpus)
  7. [actual] nibqpus → cihqpus (原始: nibqpus is cihqpus)
  8. [actual] cihqpus → hoyypus (原始: cihqpus is hoyypus)
  9. [actual] hoyypus → qepcpus (原始: hoyypus is qepcpus)
  10. [actual] qepcpus → babbpus (原始: qepcpus is babbpus)
  11. [actual] x → babbpus (原始: x is babbpus)
  12. [actual] qodspus → yapzpus (原始: qodspus is yapzpus)
  13. [actual] yapzpus → tecgpus (原始: yapzpus is tecgpus)
  14. [actual] tecgpus → lihvpus (原始: tecgpus is lihvpus)
  15. [actual] lihvpus → qoxypus (原始: lihvpus is qoxypus)
  16. [actual] qoxypus → jundpus (原始: qoxypus is jundpus)
  17. [actual] jundpus → hubqpus (原始: jundpus is hubqpus)
  18. [actual] hubqpus → somzpus (原始: hubqpus is somzpus)
  19. [actual] somzpus → baccpus (原始: somzpus is baccpus)
  20. [actual] x → baccpus (原始: x is baccpus)
  21. [actual] qodspus → gokkpus (原始: qodspus is gokkpus)
  22. [actual] gokkpus → yexfpus (原始: gokkpus is yexfpus)
  23. [actual] yexfpus → riqtpus (原始: yexfpus is riqtpus)
  24. [actual] riqtpus → bachpus (原始: riqtpus is bachpus)
  25. [actual] x → bachpus (原始: x is bachpus)
  26. [actual] x → babbpus (原始: x is babbpus)
  27. [actual] x → baccpus (原始: x is baccpus)
  28. [actual] x → bachpus (原始: x is bachpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 46
[后处理] 加载LoG图，包含 46 个节点
  LoG节点 0: x is babbpus and baccpus and bachpus (规则: CE, 深度: 1)
  LoG节点 1: x is babbpus and baccpus and bachpus and vexbpus (规则: MP, 深度: 2)
  LoG节点 2: x is qodspus (规则: CE, 深度: 3)
  LoG节点 3: qodspus is babbpus and baccpus and bachpus and vexbpus (规则: CI, 深度: 3)
  LoG节点 4: x is qodspus and pexwpus (规则: MP, 深度: 4)
  LoG节点 5: qodspus is babbpus (规则: CE, 深度: 4)
  LoG节点 6: qodspus is baccpus (规则: MP, 深度: 4)
  LoG节点 7: qodspus is bachpus (规则: CE, 深度: 4)
  LoG节点 8: qodspus is vexbpus (规则: CE, 深度: 4)
  LoG节点 9: x is luygpus (规则: MP, 深度: 5)
  LoG节点 10: luygpus is qodspus and pexwpus (规则: CE, 深度: 5)
  LoG节点 11: qodspus is babbpus and gilvpus (规则: MP, 深度: 5)
  LoG节点 12: qodspus is qoxypus (规则: CE, 深度: 5)
  LoG节点 13: qoxypus is baccpus (规则: CE, 深度: 5)
  LoG节点 14: qodspus is bachpus and pitzpus (规则: MP, 深度: 5)
  LoG节点 15: qodspus is vexbpus and ribbpus (规则: MP, 深度: 5)
  LoG节点 16: x is torppus (规则: MP, 深度: 6)
  LoG节点 17: torppus is luygpus (规则: MP, 深度: 6)
  LoG节点 18: luygpus is qodspus and pexwpus and muwypus (规则: MP, 深度: 6)
  LoG节点 19: qodspus is hoyypus (规则: MP, 深度: 6)
  LoG节点 20: hoyypus is babbpus and gilvpus (规则: CE, 深度: 6)
  LoG节点 21: qodspus is qoxypus and guvkpus (规则: MP, 深度: 6)
  LoG节点 22: qoxypus is baccpus and kaqfpus (规则: MP, 深度: 6)
  LoG节点 23: qodspus is yexfpus (规则: CE, 深度: 6)
  LoG节点 24: yexfpus is bachpus and pitzpus (规则: CI, 深度: 6)
  LoG节点 25: qodspus is libkpus (规则: MP, 深度: 6)
  LoG节点 26: libkpus is vexbpus and ribbpus (规则: CE, 深度: 6)
  LoG节点 27: x is resppus (规则: CE, 深度: 7)
  LoG节点 28: resppus is torppus (规则: CE, 深度: 7)
  LoG节点 29: torppus is loxmpus (规则: MP, 深度: 7)
  LoG节点 30: loxmpus is luygpus (规则: CE, 深度: 7)
  LoG节点 31: luygpus is dajnpus (规则: MP, 深度: 7)
  LoG节点 32: dajnpus is qodspus and pexwpus and muwypus (规则: CI, 深度: 7)
  LoG节点 33: qodspus is nibqpus (规则: CE, 深度: 7)
  LoG节点 34: nibqpus is hoyypus (规则: MP, 深度: 7)
  LoG节点 35: hoyypus is babbpus and gilvpus and jevrpus (规则: MP, 深度: 7)
  LoG节点 36: qodspus is tecgpus (规则: MP, 深度: 7)
  LoG节点 37: tecgpus is qoxypus and guvkpus (规则: MP, 深度: 7)
  LoG节点 38: qoxypus is hubqpus (规则: MP, 深度: 7)
  LoG节点 39: hubqpus is baccpus and kaqfpus (规则: MP, 深度: 7)
  LoG节点 40: qodspus is yexfpus and goctpus (规则: MP, 深度: 7)
  LoG节点 41: yexfpus is bachpus (规则: MP, 深度: 7)
  LoG节点 42: yexfpus is pitzpus (规则: MP, 深度: 7)
  LoG节点 43: qodspus is boxcpus (规则: MP, 深度: 7)
  LoG节点 44: boxcpus is libkpus (规则: CE, 深度: 7)
  LoG节点 45: libkpus is vexbpus and ribbpus and jukdpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 28
   - 初始条件数: 34
   - LoG图节点数: 46

📋 初始条件列表:
    1. zurppus is boxcpus
    2. x is resppus and wectpus
    3. dajnpus is muwypus
    4. nojqpus is vexbpus and ribbpus and jukdpus
    5. luygpus is loswpus
    6. dajnpus is qodspus
    7. qepcpus is babbpus and gilvpus and jevrpus
    8. somzpus is baccpus and kaqfpus
    9. yapzpus is tecgpus
   10. dasbpus is pitzpus
   11. jundpus is hubqpus
   12. qodspus is gokkpus
   13. qodspus is yapzpus
   14. resppus is torppus and fagspus
   15. yexfpus is dasbpus
   16. libkpus is nojqpus
   17. nibqpus is cihqpus
   18. tecgpus is lihvpus
   19. torppus is garzpus
   20. riqtpus is bachpus
   21. garzpus is loxmpus
   22. qoxypus is jundpus
   23. boxcpus is libkpus and currpus
   24. gokkpus is yexfpus and goctpus
   25. cihqpus is hoyypus
   26. qodspus is zurppus
   27. hoyypus is qepcpus
   28. yexfpus is riqtpus
   29. loxmpus is luygpus and lewnpus
   30. hubqpus is somzpus
   31. dajnpus is pexwpus
   32. loswpus is dajnpus
   33. qodspus is nibqpus and bawnpus
   34. lihvpus is qoxypus and guvkpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 34 个前提节点

🔍 开始处理actual节点...

   节点 1: x is resppus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is resppus
      ✅ 验证成功 + LoG匹配

   节点 2: x is qodspus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is qodspus
[子树点亮]     └─ 点亮依赖节点: x is qodspus and pexwpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is luygpus (深度5)
[子树点亮]     └─ 点亮依赖节点: luygpus is qodspus and pexwpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is torppus (深度6)
[子树点亮]     └─ 点亮依赖节点: torppus is luygpus (深度6)
[子树点亮]     └─ 点亮依赖节点: luygpus is qodspus and pexwpus and muwypus (深度6)
[子树点亮]     └─ 点亮依赖节点: resppus is torppus (深度7)
[子树点亮]     └─ 点亮依赖节点: torppus is loxmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: loxmpus is luygpus (深度7)
[子树点亮]     └─ 点亮依赖节点: luygpus is dajnpus (深度7)
[子树点亮]     └─ 点亮依赖节点: dajnpus is qodspus and pexwpus and muwypus (深度7)
[后处理]   └─ 自动点亮依赖子树: 11 个节点
      ✅ 验证成功 + LoG匹配

   节点 3: qodspus is nibqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: qodspus is nibqpus
      ✅ 验证成功 + LoG匹配

   节点 4: nibqpus is cihqpus
      ↻ 重复节点，计数: 2

   节点 5: cihqpus is hoyypus
      ↻ 重复节点，计数: 2

   节点 6: hoyypus is qepcpus
      ↻ 重复节点，计数: 2

   节点 7: qepcpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qepcpus is babbpus and gilvpus and jevrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qepcpus is babbpus and gilvpus and jevrpus

   节点 8: x is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is resppus → resppus is babbpus
[后处理] 基于推理轨迹点亮节点，使用了 13 个前提条件:
  - 前提: x is resppus
  - 前提: resppus is torppus and fagspus
  - 前提: torppus is garzpus
  - 前提: garzpus is loxmpus
  - 前提: loxmpus is luygpus and lewnpus
  - 前提: luygpus is loswpus
  - 前提: loswpus is dajnpus
  - 前提: dajnpus is qodspus
  - 前提: qodspus is nibqpus
  - 前提: nibqpus is cihqpus
  - 前提: cihqpus is hoyypus
  - 前提: hoyypus is qepcpus
  - 前提: qepcpus is babbpus
  ✓ 点亮LoG节点: qodspus is babbpus
[子树点亮]     └─ 点亮依赖节点: qodspus is babbpus and gilvpus (深度5)
[子树点亮]     └─ 点亮依赖节点: qodspus is hoyypus (深度6)
[子树点亮]     └─ 点亮依赖节点: hoyypus is babbpus and gilvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: nibqpus is hoyypus (深度7)
[子树点亮]     └─ 点亮依赖节点: hoyypus is babbpus and gilvpus and jevrpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 9: qodspus is yapzpus
      ↻ 重复节点，计数: 2

   节点 10: yapzpus is tecgpus
      ↻ 重复节点，计数: 2

   节点 11: tecgpus is lihvpus
      ↻ 重复节点，计数: 2

   节点 12: lihvpus is qoxypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: lihvpus is qoxypus and guvkpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: lihvpus is qoxypus and guvkpus

   节点 13: qoxypus is jundpus
      ↻ 重复节点，计数: 2

   节点 14: jundpus is hubqpus
      ↻ 重复节点，计数: 2

   节点 15: hubqpus is somzpus
      ↻ 重复节点，计数: 2

   节点 16: somzpus is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: somzpus is baccpus and kaqfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: somzpus is baccpus and kaqfpus

   节点 17: x is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is resppus → resppus is baccpus
[后处理] 基于推理轨迹点亮节点，使用了 16 个前提条件:
  - 前提: x is resppus
  - 前提: resppus is torppus and fagspus
  - 前提: torppus is garzpus
  - 前提: garzpus is loxmpus
  - 前提: loxmpus is luygpus and lewnpus
  - 前提: luygpus is loswpus
  - 前提: loswpus is dajnpus
  - 前提: dajnpus is qodspus
  - 前提: qodspus is yapzpus
  - 前提: yapzpus is tecgpus
  - 前提: tecgpus is lihvpus
  - 前提: lihvpus is qoxypus
  - 前提: qoxypus is jundpus
  - 前提: jundpus is hubqpus
  - 前提: hubqpus is somzpus
  - 前提: somzpus is baccpus
  ✓ 点亮LoG节点: qodspus is baccpus
[子树点亮]     └─ 点亮依赖节点: qodspus is qoxypus (深度5)
[子树点亮]     └─ 点亮依赖节点: qoxypus is baccpus (深度5)
[子树点亮]     └─ 点亮依赖节点: qodspus is qoxypus and guvkpus (深度6)
[子树点亮]     └─ 点亮依赖节点: qoxypus is baccpus and kaqfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: qodspus is tecgpus (深度7)
[子树点亮]     └─ 点亮依赖节点: tecgpus is qoxypus and guvkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qoxypus is hubqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: hubqpus is baccpus and kaqfpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 8 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 18: qodspus is gokkpus
      ↻ 重复节点，计数: 2

   节点 19: gokkpus is yexfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gokkpus is yexfpus and goctpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gokkpus is yexfpus and goctpus

   节点 20: yexfpus is riqtpus
      ↻ 重复节点，计数: 2

   节点 21: riqtpus is bachpus
      ↻ 重复节点，计数: 2

   节点 22: x is bachpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is resppus → resppus is bachpus
[后处理] 基于推理轨迹点亮节点，使用了 12 个前提条件:
  - 前提: x is resppus
  - 前提: resppus is torppus and fagspus
  - 前提: torppus is garzpus
  - 前提: garzpus is loxmpus
  - 前提: loxmpus is luygpus and lewnpus
  - 前提: luygpus is loswpus
  - 前提: loswpus is dajnpus
  - 前提: dajnpus is qodspus
  - 前提: qodspus is gokkpus
  - 前提: gokkpus is yexfpus
  - 前提: yexfpus is riqtpus
  - 前提: riqtpus is bachpus
  ✓ 点亮LoG节点: qodspus is bachpus
[子树点亮]     └─ 点亮依赖节点: qodspus is bachpus and pitzpus (深度5)
[子树点亮]     └─ 点亮依赖节点: qodspus is yexfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: yexfpus is bachpus and pitzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: qodspus is yexfpus and goctpus (深度7)
[子树点亮]     └─ 点亮依赖节点: yexfpus is bachpus (深度7)
[子树点亮]     └─ 点亮依赖节点: yexfpus is pitzpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 6 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 23: x is babbpus
      ↻ 重复节点，计数: 2

   节点 24: x is baccpus
      ↻ 重复节点，计数: 2

   节点 25: x is bachpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 25
   - 新增节点: 10
   - 更新已存在节点: 15
   - 点亮的LoG节点: 36

🎯 推理质量统计:
   - 完美推理: 10 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 46节点, 34前提, 复杂度1-34

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 44
   - 前提节点: 34
   - 推理节点: 10
   - 幻觉节点: 0
   - 点亮LoG节点: 36

✅ 推理节点详情:
   🟢 x is resppus (出现1次, 质量:perfect)
   🟢 x is qodspus (出现1次, 质量:perfect)
   🟢 qodspus is nibqpus (出现1次, 质量:perfect)
   🟢 qepcpus is babbpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现2次, 质量:perfect)
   🟢 lihvpus is qoxypus (出现1次, 质量:perfect)
   🟢 somzpus is baccpus (出现1次, 质量:perfect)
   🟢 x is baccpus (出现2次, 质量:perfect)
   🟢 gokkpus is yexfpus (出现1次, 质量:perfect)
   🟢 x is bachpus (出现2次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is qodspus and pexwpus
   - resppus is torppus
   - qodspus is baccpus
   - luygpus is dajnpus
   - qodspus is qoxypus and guvkpus
   - qoxypus is baccpus
   - yexfpus is bachpus and pitzpus
   - qodspus is babbpus and gilvpus
   - x is qodspus
   - qodspus is qoxypus
   - dajnpus is qodspus and pexwpus and muwypus
   - qodspus is babbpus
   - qodspus is bachpus and pitzpus
   - yexfpus is pitzpus
   - torppus is luygpus
   - qoxypus is hubqpus
   - hubqpus is baccpus and kaqfpus
   - qodspus is bachpus
   - torppus is loxmpus
   - hoyypus is babbpus and gilvpus
   - hoyypus is babbpus and gilvpus and jevrpus
   - yexfpus is bachpus
   - qodspus is nibqpus
   - qodspus is yexfpus
   - x is luygpus
   - x is resppus
   - nibqpus is hoyypus
   - qodspus is hoyypus
   - x is torppus
   - tecgpus is qoxypus and guvkpus
   - qodspus is yexfpus and goctpus
   - luygpus is qodspus and pexwpus and muwypus
   - loxmpus is luygpus
   - qodspus is tecgpus
   - luygpus is qodspus and pexwpus
   - qoxypus is baccpus and kaqfpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/7 = 71.43%
   最深点亮节点: x is qodspus (第5层)
   节点Coverage: 36/46 = 78.26%
   前提条件Coverage: 12/34 = 35.29%
   各推理层点亮比例:
     第1层: 16/19 = 84.21%
     第2层: 9/11 = 81.82%
     第3层: 6/7 = 85.71%
     第4层: 4/5 = 80.00%
     第5层: 1/2 = 50.00%
     第6层: 0/1 = 0.00%
     第7层: 0/1 = 0.00%

🎯 计算Precision指标...
   Error Rate: 0/10 = 0.00%
   可推导节点: 10/10
   Strict Error Rate: 0/10 = 0.00%
   严格有效节点: 10/10

   详细分析:
     完美推理: 10 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 27/50
================================================================================
记录索引: 26
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_26.json
✅ 使用缓存结果:
   - 句子数: 6
   - 提取的语句数: 40
   - 初始条件数: 43

=== Statement提取完成 ===
总句子数: 6
成功提取: 6
失败提取: 0
总statements数: 40

=== 开始清洗Statement格式 ===
原始statements数: 40
清洗后statements数: 40
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 40
标准化后节点数: 40
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babbpus (原始: x is babbpus)
  2. [actual] x → cidcpus (原始: x is cidcpus)
  3. [actual] x → cidcpus (原始: x is cidcpus)
  4. [actual] cidcpus → qupwpus (原始: cidcpus is qupwpus)
  5. [actual] qupwpus → qucqpus (原始: qupwpus is qucqpus)
  6. [actual] qucqpus → culbpus (原始: qucqpus is culbpus)
  7. [actual] culbpus → cehkpus (原始: culbpus is cehkpus)
  8. [actual] cehkpus → raqppus (原始: cehkpus is raqppus)
  9. [actual] raqppus → kaqbpus (原始: raqppus is kaqbpus)
  10. [actual] kaqbpus → bokqpus (原始: kaqbpus is bokqpus)
  11. [actual] bokqpus → ruybpus (原始: bokqpus is ruybpus)
  12. [actual] ruybpus → sellpus (原始: ruybpus is sellpus)
  13. [actual] sellpus → zumvpus (原始: sellpus is zumvpus)
  14. [actual] zumvpus → xuszpus (原始: zumvpus is xuszpus)
  15. [actual] xuszpus → nedypus (原始: xuszpus is nedypus)
  16. [actual] nedypus → lalmpus (原始: nedypus is lalmpus)
  17. [actual] lalmpus → qakcpus (原始: lalmpus is qakcpus)
  18. [actual] qakcpus → cugnpus (原始: qakcpus is cugnpus)
  19. [actual] cugnpus → rongpus (原始: cugnpus is rongpus)
  20. [actual] rongpus → zobtpus (原始: rongpus is zobtpus)
  21. [actual] zobtpus → sawhpus (原始: zobtpus is sawhpus)
  22. [actual] sawhpus → cubrpus (原始: sawhpus is cubrpus)
  23. [actual] cubrpus → yogqpus (原始: cubrpus is yogqpus)
  24. [actual] yogqpus → dokvpus (原始: yogqpus is dokvpus)
  25. [actual] dokvpus → raqqpus (原始: dokvpus is raqqpus)
  26. [actual] raqqpus → gilvpus (原始: raqqpus is gilvpus)
  27. [actual] gilvpus → nefgpus (原始: gilvpus is nefgpus)
  28. [actual] nefgpus → wadjpus (原始: nefgpus is wadjpus)
  29. [actual] wadjpus → carhpus (原始: wadjpus is carhpus)
  30. [actual] carhpus → leqhpus (原始: carhpus is leqhpus)
  31. [actual] leqhpus → futhpus (原始: leqhpus is futhpus)
  32. [actual] futhpus → lecwpus (原始: futhpus is lecwpus)
  33. [actual] lecwpus → cahrpus (原始: lecwpus is cahrpus)
  34. [actual] cahrpus → nutwpus (原始: cahrpus is nutwpus)
  35. [actual] nutwpus → ceznpus (原始: nutwpus is ceznpus)
  36. [actual] ceznpus → gummpus (原始: ceznpus is gummpus)
  37. [actual] gummpus → dawmpus (原始: gummpus is dawmpus)
  38. [actual] dawmpus → babbpus (原始: dawmpus is babbpus)
  39. [actual] x → babbpus (原始: x is babbpus)
  40. [actual] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 60
[后处理] 加载LoG图，包含 60 个节点
  LoG节点 0: x is babbpus (规则: MP, 深度: 1)
  LoG节点 1: x is futhpus (规则: MP, 深度: 2)
  LoG节点 2: futhpus is babbpus (规则: CE, 深度: 2)
  LoG节点 3: x is xuszpus (规则: MP, 深度: 3)
  LoG节点 4: xuszpus is futhpus (规则: MP, 深度: 3)
  LoG节点 5: futhpus is babbpus and raywpus (规则: MP, 深度: 3)
  LoG节点 6: x is kaqbpus (规则: CE, 深度: 4)
  LoG节点 7: kaqbpus is xuszpus (规则: CE, 深度: 4)
  LoG节点 8: xuszpus is dokvpus (规则: MP, 深度: 4)
  LoG节点 9: dokvpus is futhpus (规则: MP, 深度: 4)
  LoG节点 10: futhpus is nutwpus (规则: CE, 深度: 4)
  LoG节点 11: nutwpus is babbpus and raywpus (规则: CI, 深度: 4)
  LoG节点 12: x is kaqbpus and befbpus (规则: MP, 深度: 5)
  LoG节点 13: kaqbpus is xuszpus and yeddpus (规则: MP, 深度: 5)
  LoG节点 14: xuszpus is cugnpus (规则: CE, 深度: 5)
  LoG节点 15: cugnpus is dokvpus (规则: MP, 深度: 5)
  LoG节点 16: dokvpus is gilvpus (规则: CE, 深度: 5)
  LoG节点 17: gilvpus is futhpus (规则: MP, 深度: 5)
  LoG节点 18: futhpus is nutwpus and rihwpus (规则: MP, 深度: 5)
  LoG节点 19: nutwpus is babbpus (规则: CE, 深度: 5)
  LoG节点 20: nutwpus is raywpus (规则: MP, 深度: 5)
  LoG节点 21: x is culbpus (规则: MP, 深度: 6)
  LoG节点 22: culbpus is kaqbpus and befbpus (规则: MP, 深度: 6)
  LoG节点 23: kaqbpus is sellpus (规则: MP, 深度: 6)
  LoG节点 24: sellpus is xuszpus and yeddpus (规则: CE, 深度: 6)
  LoG节点 25: xuszpus is cugnpus and boqqpus (规则: MP, 深度: 6)
  LoG节点 26: cugnpus is cubrpus (规则: MP, 深度: 6)
  LoG节点 27: cubrpus is dokvpus (规则: CE, 深度: 6)
  LoG节点 28: dokvpus is gilvpus and durgpus (规则: MP, 深度: 6)
  LoG节点 29: gilvpus is carhpus (规则: MP, 深度: 6)
  LoG节点 30: carhpus is futhpus (规则: CE, 深度: 6)
  LoG节点 31: futhpus is cahrpus (规则: CE, 深度: 6)
  LoG节点 32: cahrpus is nutwpus and rihwpus (规则: CI, 深度: 6)
  LoG节点 33: nutwpus is babbpus and kaljpus (规则: MP, 深度: 6)
  LoG节点 34: nutwpus is mitspus (规则: CE, 深度: 6)
  LoG节点 35: mitspus is raywpus (规则: CE, 深度: 6)
  LoG节点 36: x is qupwpus (规则: MP, 深度: 7)
  LoG节点 37: qupwpus is culbpus (规则: MP, 深度: 7)
  LoG节点 38: culbpus is raqppus (规则: MP, 深度: 7)
  LoG节点 39: raqppus is kaqbpus and befbpus (规则: CI, 深度: 7)
  LoG节点 40: kaqbpus is ruybpus (规则: MP, 深度: 7)
  LoG节点 41: ruybpus is sellpus (规则: CE, 深度: 7)
  LoG节点 42: sellpus is xuszpus and yeddpus and weztpus (规则: MP, 深度: 7)
  LoG节点 43: xuszpus is lalmpus (规则: MP, 深度: 7)
  LoG节点 44: lalmpus is cugnpus and boqqpus (规则: MP, 深度: 7)
  LoG节点 45: cugnpus is zobtpus (规则: MP, 深度: 7)
  LoG节点 46: zobtpus is cubrpus (规则: MP, 深度: 7)
  LoG节点 47: cubrpus is dokvpus and timlpus (规则: MP, 深度: 7)
  LoG节点 48: dokvpus is raqqpus (规则: CE, 深度: 7)
  LoG节点 49: raqqpus is gilvpus and durgpus (规则: CI, 深度: 7)
  LoG节点 50: gilvpus is nefgpus (规则: CE, 深度: 7)
  LoG节点 51: nefgpus is carhpus (规则: MP, 深度: 7)
  LoG节点 52: carhpus is futhpus and xedlpus (规则: MP, 深度: 7)
  LoG节点 53: futhpus is cahrpus and hidwpus (规则: MP, 深度: 7)
  LoG节点 54: cahrpus is nutwpus (规则: CE, 深度: 7)
  LoG节点 55: cahrpus is rihwpus (规则: CE, 深度: 7)
  LoG节点 56: nutwpus is gummpus (规则: MP, 深度: 7)
  LoG节点 57: gummpus is babbpus and kaljpus (规则: MP, 深度: 7)
  LoG节点 58: nutwpus is mitspus and jusfpus (规则: MP, 深度: 7)
  LoG节点 59: mitspus is raywpus and xaxcpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 40
   - 初始条件数: 43
   - LoG图节点数: 60

📋 初始条件列表:
    1. cubrpus is yogqpus
    2. vibqpus is mitspus and jusfpus
    3. mitspus is kuqfpus
    4. raqppus is kaqbpus
    5. ruybpus is sellpus and xexbpus
    6. qakcpus is cugnpus and boqqpus
    7. yogqpus is dokvpus and timlpus
    8. sawhpus is cubrpus
    9. kaqbpus is bokqpus
   10. rongpus is zobtpus
   11. gummpus is dawmpus
   12. cahrpus is rihwpus and xaxfpus
   13. lalmpus is qakcpus
   14. cidcpus is qupwpus
   15. ceznpus is gummpus
   16. kuqfpus is raywpus and xaxcpus
   17. dokvpus is raqqpus and fibdpus
   18. nutwpus is ceznpus
   19. qupwpus is qucqpus
   20. qucqpus is culbpus
   21. xuszpus is nedypus
   22. nefgpus is wadjpus
   23. culbpus is cehkpus
   24. dawmpus is babbpus and kaljpus
   25. raqqpus is durgpus
   26. cahrpus is nutwpus and mafppus
   27. cehkpus is raqppus
   28. zobtpus is sawhpus
   29. carhpus is leqhpus
   30. wadjpus is carhpus
   31. bokqpus is ruybpus
   32. lecwpus is cahrpus and hidwpus
   33. raqppus is befbpus
   34. raqqpus is gilvpus
   35. cugnpus is rongpus
   36. sellpus is zumvpus
   37. nedypus is lalmpus
   38. nutwpus is vibqpus
   39. gilvpus is nefgpus and rolgpus
   40. zumvpus is xuszpus and yeddpus and weztpus
   41. x is cidcpus
   42. futhpus is lecwpus
   43. leqhpus is futhpus and xedlpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 43 个前提节点

🔍 开始处理actual节点...

   节点 1: x is cidcpus
      ↻ 重复节点，计数: 2

   节点 2: x is cidcpus
      ↻ 重复节点，计数: 3

   节点 3: cidcpus is qupwpus
      ↻ 重复节点，计数: 2

   节点 4: qupwpus is qucqpus
      ↻ 重复节点，计数: 2

   节点 5: qucqpus is culbpus
      ↻ 重复节点，计数: 2

   节点 6: culbpus is cehkpus
      ↻ 重复节点，计数: 2

   节点 7: cehkpus is raqppus
      ↻ 重复节点，计数: 2

   节点 8: raqppus is kaqbpus
      ↻ 重复节点，计数: 2

   节点 9: kaqbpus is bokqpus
      ↻ 重复节点，计数: 2

   节点 10: bokqpus is ruybpus
      ↻ 重复节点，计数: 2

   节点 11: ruybpus is sellpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: ruybpus is sellpus
      ✅ 验证成功 + LoG匹配

   节点 12: sellpus is zumvpus
      ↻ 重复节点，计数: 2

   节点 13: zumvpus is xuszpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zumvpus is xuszpus and yeddpus and weztpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zumvpus is xuszpus and yeddpus and weztpus

   节点 14: xuszpus is nedypus
      ↻ 重复节点，计数: 2

   节点 15: nedypus is lalmpus
      ↻ 重复节点，计数: 2

   节点 16: lalmpus is qakcpus
      ↻ 重复节点，计数: 2

   节点 17: qakcpus is cugnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qakcpus is cugnpus and boqqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qakcpus is cugnpus and boqqpus

   节点 18: cugnpus is rongpus
      ↻ 重复节点，计数: 2

   节点 19: rongpus is zobtpus
      ↻ 重复节点，计数: 2

   节点 20: zobtpus is sawhpus
      ↻ 重复节点，计数: 2

   节点 21: sawhpus is cubrpus
      ↻ 重复节点，计数: 2

   节点 22: cubrpus is yogqpus
      ↻ 重复节点，计数: 2

   节点 23: yogqpus is dokvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yogqpus is dokvpus and timlpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yogqpus is dokvpus and timlpus

   节点 24: dokvpus is raqqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: dokvpus is raqqpus
      ✅ 验证成功 + LoG匹配

   节点 25: raqqpus is gilvpus
      ↻ 重复节点，计数: 2

   节点 26: gilvpus is nefgpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: gilvpus is nefgpus
      ✅ 验证成功 + LoG匹配

   节点 27: nefgpus is wadjpus
      ↻ 重复节点，计数: 2

   节点 28: wadjpus is carhpus
      ↻ 重复节点，计数: 2

   节点 29: carhpus is leqhpus
      ↻ 重复节点，计数: 2

   节点 30: leqhpus is futhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: leqhpus is futhpus and xedlpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: leqhpus is futhpus and xedlpus

   节点 31: futhpus is lecwpus
      ↻ 重复节点，计数: 2

   节点 32: lecwpus is cahrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: lecwpus is cahrpus and hidwpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: lecwpus is cahrpus and hidwpus

   节点 33: cahrpus is nutwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: cahrpus is nutwpus
      ✅ 验证成功 + LoG匹配

   节点 34: nutwpus is ceznpus
      ↻ 重复节点，计数: 2

   节点 35: ceznpus is gummpus
      ↻ 重复节点，计数: 2

   节点 36: gummpus is dawmpus
      ↻ 重复节点，计数: 2

   节点 37: dawmpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: dawmpus is babbpus and kaljpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: dawmpus is babbpus and kaljpus

   节点 38: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is futhpus (深度2)
[子树点亮]     └─ 点亮依赖节点: futhpus is babbpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is xuszpus (深度3)
[子树点亮]     └─ 点亮依赖节点: xuszpus is futhpus (深度3)
[子树点亮]     └─ 点亮依赖节点: futhpus is babbpus and raywpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is kaqbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: kaqbpus is xuszpus (深度4)
[子树点亮]     └─ 点亮依赖节点: xuszpus is dokvpus (深度4)
[子树点亮]     └─ 点亮依赖节点: dokvpus is futhpus (深度4)
[子树点亮]     └─ 点亮依赖节点: futhpus is nutwpus (深度4)
[子树点亮]     └─ 点亮依赖节点: nutwpus is babbpus and raywpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is kaqbpus and befbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: kaqbpus is xuszpus and yeddpus (深度5)
[子树点亮]     └─ 点亮依赖节点: xuszpus is cugnpus (深度5)
[子树点亮]     └─ 点亮依赖节点: cugnpus is dokvpus (深度5)
[子树点亮]     └─ 点亮依赖节点: dokvpus is gilvpus (深度5)
[子树点亮]     └─ 点亮依赖节点: gilvpus is futhpus (深度5)
[子树点亮]     └─ 点亮依赖节点: futhpus is nutwpus and rihwpus (深度5)
[子树点亮]     └─ 点亮依赖节点: nutwpus is babbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: nutwpus is raywpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is culbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: culbpus is kaqbpus and befbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: kaqbpus is sellpus (深度6)
[子树点亮]     └─ 点亮依赖节点: sellpus is xuszpus and yeddpus (深度6)
[子树点亮]     └─ 点亮依赖节点: xuszpus is cugnpus and boqqpus (深度6)
[子树点亮]     └─ 点亮依赖节点: cugnpus is cubrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: cubrpus is dokvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: dokvpus is gilvpus and durgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: gilvpus is carhpus (深度6)
[子树点亮]     └─ 点亮依赖节点: carhpus is futhpus (深度6)
[子树点亮]     └─ 点亮依赖节点: futhpus is cahrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: cahrpus is nutwpus and rihwpus (深度6)
[子树点亮]     └─ 点亮依赖节点: nutwpus is babbpus and kaljpus (深度6)
[子树点亮]     └─ 点亮依赖节点: nutwpus is mitspus (深度6)
[子树点亮]     └─ 点亮依赖节点: mitspus is raywpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is qupwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qupwpus is culbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: culbpus is raqppus (深度7)
[子树点亮]     └─ 点亮依赖节点: raqppus is kaqbpus and befbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kaqbpus is ruybpus (深度7)
[子树点亮]     └─ 点亮依赖节点: sellpus is xuszpus and yeddpus and weztpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xuszpus is lalmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: lalmpus is cugnpus and boqqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cugnpus is zobtpus (深度7)
[子树点亮]     └─ 点亮依赖节点: zobtpus is cubrpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cubrpus is dokvpus and timlpus (深度7)
[子树点亮]     └─ 点亮依赖节点: raqqpus is gilvpus and durgpus (深度7)
[子树点亮]     └─ 点亮依赖节点: nefgpus is carhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: carhpus is futhpus and xedlpus (深度7)
[子树点亮]     └─ 点亮依赖节点: futhpus is cahrpus and hidwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cahrpus is rihwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: nutwpus is gummpus (深度7)
[子树点亮]     └─ 点亮依赖节点: gummpus is babbpus and kaljpus (深度7)
[子树点亮]     └─ 点亮依赖节点: nutwpus is mitspus and jusfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: mitspus is raywpus and xaxcpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 55 个节点
      ✅ 验证成功 + LoG匹配

   节点 39: x is babbpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 39
   - 新增节点: 11
   - 更新已存在节点: 28
   - 点亮的LoG节点: 60

🎯 推理质量统计:
   - 完美推理: 11 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 60节点, 43前提, 复杂度1-43

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 54
   - 前提节点: 43
   - 推理节点: 11
   - 幻觉节点: 0
   - 点亮LoG节点: 60

✅ 推理节点详情:
   🟢 ruybpus is sellpus (出现1次, 质量:perfect)
   🟢 zumvpus is xuszpus (出现1次, 质量:perfect)
   🟢 qakcpus is cugnpus (出现1次, 质量:perfect)
   🟢 yogqpus is dokvpus (出现1次, 质量:perfect)
   🟢 dokvpus is raqqpus (出现1次, 质量:perfect)
   🟢 gilvpus is nefgpus (出现1次, 质量:perfect)
   🟢 leqhpus is futhpus (出现1次, 质量:perfect)
   🟢 lecwpus is cahrpus (出现1次, 质量:perfect)
   🟢 cahrpus is nutwpus (出现1次, 质量:perfect)
   🟢 dawmpus is babbpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现2次, 质量:perfect)

🔥 点亮的LoG节点:
   - dokvpus is raqqpus
   - nutwpus is raywpus
   - cahrpus is nutwpus and rihwpus
   - futhpus is babbpus and raywpus
   - gilvpus is carhpus
   - futhpus is nutwpus and rihwpus
   - culbpus is kaqbpus and befbpus
   - zobtpus is cubrpus
   - gummpus is babbpus and kaljpus
   - carhpus is futhpus
   - futhpus is cahrpus and hidwpus
   - kaqbpus is xuszpus and yeddpus
   - cugnpus is cubrpus
   - mitspus is raywpus and xaxcpus
   - cahrpus is rihwpus
   - nutwpus is babbpus and kaljpus
   - sellpus is xuszpus and yeddpus
   - cubrpus is dokvpus and timlpus
   - nefgpus is carhpus
   - futhpus is cahrpus
   - lalmpus is cugnpus and boqqpus
   - xuszpus is cugnpus and boqqpus
   - cubrpus is dokvpus
   - xuszpus is futhpus
   - nutwpus is babbpus
   - cugnpus is zobtpus
   - nutwpus is gummpus
   - xuszpus is cugnpus
   - futhpus is nutwpus
   - x is kaqbpus and befbpus
   - nutwpus is mitspus and jusfpus
   - culbpus is raqppus
   - gilvpus is nefgpus
   - xuszpus is lalmpus
   - carhpus is futhpus and xedlpus
   - ruybpus is sellpus
   - xuszpus is dokvpus
   - raqqpus is gilvpus and durgpus
   - kaqbpus is xuszpus
   - mitspus is raywpus
   - x is culbpus
   - dokvpus is futhpus
   - nutwpus is babbpus and raywpus
   - dokvpus is gilvpus and durgpus
   - kaqbpus is ruybpus
   - sellpus is xuszpus and yeddpus and weztpus
   - dokvpus is gilvpus
   - x is futhpus
   - gilvpus is futhpus
   - kaqbpus is sellpus
   - qupwpus is culbpus
   - cugnpus is dokvpus
   - x is xuszpus
   - futhpus is babbpus
   - x is babbpus
   - nutwpus is mitspus
   - cahrpus is nutwpus
   - x is qupwpus
   - raqppus is kaqbpus and befbpus
   - x is kaqbpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus (第7层)
   节点Coverage: 60/60 = 100.00%
   前提条件Coverage: 26/43 = 60.47%
   各推理层点亮比例:
     第1层: 24/24 = 100.00%
     第2层: 15/15 = 100.00%
     第3层: 9/9 = 100.00%
     第4层: 6/6 = 100.00%
     第5层: 3/3 = 100.00%
     第6层: 2/2 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/11 = 0.00%
   可推导节点: 11/11
   Strict Error Rate: 0/11 = 0.00%
   严格有效节点: 11/11

   详细分析:
     完美推理: 11 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 28/50
================================================================================
记录索引: 27
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_27.json
✅ 使用缓存结果:
   - 句子数: 15
   - 提取的语句数: 25
   - 初始条件数: 17

=== Statement提取完成 ===
总句子数: 15
成功提取: 15
失败提取: 0
总statements数: 25

=== 开始清洗Statement格式 ===
原始statements数: 25
清洗后statements数: 25
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 25
标准化后节点数: 25
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babbpus (原始: x is babbpus)
  2. [actual] x → qaqxpus (原始: x is qaqxpus)
  3. [actual] qaqxpus → baccpus (原始: qaqxpus is baccpus)
  4. [actual] x → baccpus (原始: x is baccpus)
  5. [actual] baccpus → bohzpus (原始: baccpus is bohzpus)
  6. [planning] x → bohzpus (原始: x is bohzpus)
  7. [actual] bohzpus → jerjpus (原始: bohzpus is jerjpus)
  8. [planning] x → jerjpus (原始: x is jerjpus)
  9. [actual] jerjpus → davrpus (原始: jerjpus is davrpus)
  10. [planning] x → davrpus (原始: x is davrpus)
  11. [actual] davrpus → gimnpus (原始: davrpus is gimnpus)
  12. [planning] x → gimnpus (原始: x is gimnpus)
  13. [actual] gimnpus → wufkpus (原始: gimnpus is wufkpus)
  14. [planning] x → wufkpus (原始: x is wufkpus)
  15. [actual] wufkpus → fokhpus (原始: wufkpus is fokhpus)
  16. [planning] x → fokhpus (原始: x is fokhpus)
  17. [actual] fokhpus → cazqpus (原始: fokhpus is cazqpus)
  18. [planning] x → cazqpus (原始: x is cazqpus)
  19. [actual] cazqpus → feljpus (原始: cazqpus is feljpus)
  20. [planning] x → feljpus (原始: x is feljpus)
  21. [actual] feljpus → nirlpus (原始: feljpus is nirlpus)
  22. [planning] x → nirlpus (原始: x is nirlpus)
  23. [actual] nirlpus → babbpus (原始: nirlpus is babbpus)
  24. [planning] x → babbpus (原始: x is babbpus)
  25. [actual] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 25
[后处理] 加载LoG图，包含 25 个节点
  LoG节点 0: x is babbpus (规则: CE, 深度: 1)
  LoG节点 1: x is babbpus and dagnpus (规则: MP, 深度: 2)
  LoG节点 2: x is gimnpus (规则: CE, 深度: 3)
  LoG节点 3: gimnpus is babbpus and dagnpus (规则: CE, 深度: 3)
  LoG节点 4: x is gimnpus and durnpus (规则: MP, 深度: 4)
  LoG节点 5: gimnpus is babbpus and dagnpus and yostpus (规则: MP, 深度: 4)
  LoG节点 6: x is jerjpus (规则: CE, 深度: 5)
  LoG节点 7: jerjpus is gimnpus and durnpus (规则: CI, 深度: 5)
  LoG节点 8: gimnpus is feljpus (规则: CE, 深度: 5)
  LoG节点 9: feljpus is babbpus and dagnpus and yostpus (规则: CI, 深度: 5)
  LoG节点 10: x is jerjpus and muxspus (规则: MP, 深度: 6)
  LoG节点 11: jerjpus is gimnpus (规则: CE, 深度: 6)
  LoG节点 12: jerjpus is durnpus (规则: CE, 深度: 6)
  LoG节点 13: gimnpus is feljpus and dadypus (规则: MP, 深度: 6)
  LoG节点 14: feljpus is babbpus (规则: CE, 深度: 6)
  LoG节点 15: feljpus is dagnpus and yostpus (规则: CI, 深度: 6)
  LoG节点 16: x is baccpus (规则: MP, 深度: 7)
  LoG节点 17: baccpus is jerjpus and muxspus (规则: MP, 深度: 7)
  LoG节点 18: jerjpus is gimnpus and felgpus (规则: MP, 深度: 7)
  LoG节点 19: jerjpus is durnpus and gucnpus (规则: MP, 深度: 7)
  LoG节点 20: gimnpus is fokhpus (规则: MP, 深度: 7)
  LoG节点 21: fokhpus is feljpus and dadypus (规则: MP, 深度: 7)
  LoG节点 22: feljpus is babbpus and xorhpus (规则: MP, 深度: 7)
  LoG节点 23: feljpus is dagnpus (规则: MP, 深度: 7)
  LoG节点 24: feljpus is yostpus (规则: CE, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 25
   - 初始条件数: 17
   - LoG图节点数: 25

📋 初始条件列表:
    1. baccpus is bohzpus
    2. feljpus is nirlpus
    3. bohzpus is jerjpus and muxspus
    4. feljpus is rajvpus
    5. jerjpus is davrpus
    6. rajvpus is dagnpus
    7. mosypus is durnpus and gucnpus
    8. x is qaqxpus
    9. fokhpus is cazqpus
   10. cazqpus is feljpus and dadypus
   11. qaqxpus is baccpus
   12. gimnpus is wufkpus
   13. feljpus is yostpus and liptpus
   14. davrpus is gimnpus and felgpus
   15. wufkpus is fokhpus
   16. nirlpus is babbpus and xorhpus
   17. jerjpus is mosypus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 17 个前提节点

🔍 开始处理actual节点...

   节点 1: x is qaqxpus
      ↻ 重复节点，计数: 2

   节点 2: qaqxpus is baccpus
      ↻ 重复节点，计数: 2

   节点 3: x is baccpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is baccpus
      ✅ 验证成功 + LoG匹配

   节点 4: baccpus is bohzpus
      ↻ 重复节点，计数: 2

   节点 5: bohzpus is jerjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: bohzpus is jerjpus and muxspus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: bohzpus is jerjpus and muxspus

   节点 6: jerjpus is davrpus
      ↻ 重复节点，计数: 2

   节点 7: davrpus is gimnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: davrpus is gimnpus and felgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: davrpus is gimnpus and felgpus

   节点 8: gimnpus is wufkpus
      ↻ 重复节点，计数: 2

   节点 9: wufkpus is fokhpus
      ↻ 重复节点，计数: 2

   节点 10: fokhpus is cazqpus
      ↻ 重复节点，计数: 2

   节点 11: cazqpus is feljpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: cazqpus is feljpus and dadypus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: cazqpus is feljpus and dadypus

   节点 12: feljpus is nirlpus
      ↻ 重复节点，计数: 2

   节点 13: nirlpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: nirlpus is babbpus and xorhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: nirlpus is babbpus and xorhpus

   节点 14: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is babbpus and dagnpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is gimnpus (深度3)
[子树点亮]     └─ 点亮依赖节点: gimnpus is babbpus and dagnpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is gimnpus and durnpus (深度4)
[子树点亮]     └─ 点亮依赖节点: gimnpus is babbpus and dagnpus and yostpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is jerjpus (深度5)
[子树点亮]     └─ 点亮依赖节点: jerjpus is gimnpus and durnpus (深度5)
[子树点亮]     └─ 点亮依赖节点: gimnpus is feljpus (深度5)
[子树点亮]     └─ 点亮依赖节点: feljpus is babbpus and dagnpus and yostpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is jerjpus and muxspus (深度6)
[子树点亮]     └─ 点亮依赖节点: jerjpus is gimnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jerjpus is durnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: gimnpus is feljpus and dadypus (深度6)
[子树点亮]     └─ 点亮依赖节点: feljpus is babbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: feljpus is dagnpus and yostpus (深度6)
[子树点亮]     └─ 点亮依赖节点: baccpus is jerjpus and muxspus (深度7)
[子树点亮]     └─ 点亮依赖节点: jerjpus is gimnpus and felgpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jerjpus is durnpus and gucnpus (深度7)
[子树点亮]     └─ 点亮依赖节点: gimnpus is fokhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: fokhpus is feljpus and dadypus (深度7)
[子树点亮]     └─ 点亮依赖节点: feljpus is babbpus and xorhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: feljpus is dagnpus (深度7)
[子树点亮]     └─ 点亮依赖节点: feljpus is yostpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 23 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 14
   - 新增节点: 6
   - 更新已存在节点: 8
   - 点亮的LoG节点: 25

🎯 推理质量统计:
   - 完美推理: 6 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 25节点, 17前提, 复杂度1-17

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 23
   - 前提节点: 17
   - 推理节点: 6
   - 幻觉节点: 0
   - 点亮LoG节点: 25

✅ 推理节点详情:
   🟢 x is baccpus (出现1次, 质量:perfect)
   🟢 bohzpus is jerjpus (出现1次, 质量:perfect)
   🟢 davrpus is gimnpus (出现1次, 质量:perfect)
   🟢 cazqpus is feljpus (出现1次, 质量:perfect)
   🟢 nirlpus is babbpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - gimnpus is fokhpus
   - feljpus is yostpus
   - jerjpus is gimnpus
   - baccpus is jerjpus and muxspus
   - x is gimnpus and durnpus
   - x is jerjpus and muxspus
   - x is babbpus and dagnpus
   - gimnpus is feljpus
   - feljpus is dagnpus
   - jerjpus is gimnpus and felgpus
   - feljpus is babbpus
   - gimnpus is babbpus and dagnpus and yostpus
   - gimnpus is babbpus and dagnpus
   - jerjpus is durnpus
   - jerjpus is gimnpus and durnpus
   - fokhpus is feljpus and dadypus
   - feljpus is dagnpus and yostpus
   - feljpus is babbpus and xorhpus
   - x is jerjpus
   - x is baccpus
   - jerjpus is durnpus and gucnpus
   - x is gimnpus
   - gimnpus is feljpus and dadypus
   - feljpus is babbpus and dagnpus and yostpus
   - x is babbpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus (第7层)
   节点Coverage: 25/25 = 100.00%
   前提条件Coverage: 8/17 = 47.06%
   各推理层点亮比例:
     第1层: 9/9 = 100.00%
     第2层: 6/6 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/6 = 0.00%
   可推导节点: 6/6
   Strict Error Rate: 0/6 = 0.00%
   严格有效节点: 6/6

   详细分析:
     完美推理: 6 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 29/50
================================================================================
记录索引: 28
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_28.json
✅ 使用缓存结果:
   - 句子数: 34
   - 提取的语句数: 34
   - 初始条件数: 37

=== Statement提取完成 ===
总句子数: 34
成功提取: 34
失败提取: 0
总statements数: 34

=== 开始清洗Statement格式 ===
原始statements数: 34
清洗后statements数: 34
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 34
标准化后节点数: 33
过滤掉的无效实体数: 1
标准化后的节点:
  1. [actual] dewcpus → babbpus or baccpus or bachpus (原始: dewcpus is babbpus or baccpus or bachpus)
  2. [actual] x → gilbpus (原始: x is gilbpus)
  3. [actual] gilbpus → zegkpus (原始: gilbpus is zegkpus)
  4. [actual] zegkpus → cibzpus (原始: zegkpus is cibzpus)
  5. [actual] cibzpus → dohfpus (原始: cibzpus is dohfpus)
  6. [actual] dohfpus → xerspus (原始: dohfpus is xerspus)
  7. [actual] xerspus → zadwpus (原始: xerspus is zadwpus)
  8. [actual] zadwpus → dugtpus (原始: zadwpus is dugtpus)
  9. [actual] dugtpus → tecfpus (原始: dugtpus is tecfpus)
  10. [actual] tecfpus → ciynpus (原始: tecfpus is ciynpus)
  11. [actual] ciynpus → patrpus (原始: ciynpus is patrpus)
  12. [actual] patrpus → saynpus (原始: patrpus is saynpus)
  13. [actual] saynpus → kerspus (原始: saynpus is kerspus)
  14. [actual] kerspus → sukypus (原始: kerspus is sukypus)
  15. [actual] sukypus → wemppus (原始: sukypus is wemppus)
  16. [actual] wemppus → tuwhpus (原始: wemppus is tuwhpus)
  17. [actual] tuwhpus → jozvpus (原始: tuwhpus is jozvpus)
  18. [actual] jozvpus → xekgpus (原始: jozvpus is xekgpus)
  19. [actual] xekgpus → vajkpus (原始: xekgpus is vajkpus)
  20. [actual] vajkpus → tudfpus (原始: vajkpus is tudfpus)
  21. [actual] tudfpus → yevlpus (原始: tudfpus is yevlpus)
  22. [actual] yevlpus → licqpus (原始: yevlpus is licqpus)
  23. [actual] licqpus → xulspus (原始: licqpus is xulspus)
  24. [actual] xulspus → dehppus (原始: xulspus is dehppus)
  25. [actual] dehppus → hidwpus (原始: dehppus is hidwpus)
  26. [actual] hidwpus → pazwpus (原始: hidwpus is pazwpus)
  27. [actual] pazwpus → pigjpus (原始: pazwpus is pigjpus)
  28. [actual] pigjpus → baxlpus (原始: pigjpus is baxlpus)
  29. [actual] baxlpus → vislpus (原始: baxlpus is vislpus)
  30. [actual] vislpus → dewcpus (原始: vislpus is dewcpus)
  31. [actual] dewcpus → babbpus or baccpus or bachpus (原始: dewcpus is babbpus or baccpus or bachpus)
  32. [actual] x → dewcpus (原始: x is dewcpus)
  33. [actual] x → babbpus or baccpus or bachpus (原始: x is babbpus or baccpus or bachpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 59
[后处理] 加载LoG图，包含 59 个节点
  LoG节点 0: x is babbpus or baccpus or bachpus (规则: MP, 深度: 1)
  LoG节点 1: x is dugtpus (规则: CE, 深度: 2)
  LoG节点 2: dugtpus is babbpus or baccpus or bachpus (规则: MP, 深度: 2)
  LoG节点 3: x is dugtpus and suljpus (规则: MP, 深度: 3)
  LoG节点 4: dugtpus is jozvpus (规则: MP, 深度: 3)
  LoG节点 5: jozvpus is babbpus or baccpus or bachpus (规则: MP, 深度: 3)
  LoG节点 6: x is xerspus (规则: CE, 深度: 4)
  LoG节点 7: xerspus is dugtpus and suljpus (规则: CI, 深度: 4)
  LoG节点 8: dugtpus is kerspus (规则: MP, 深度: 4)
  LoG节点 9: kerspus is jozvpus (规则: CE, 深度: 4)
  LoG节点 10: jozvpus is licqpus (规则: CE, 深度: 4)
  LoG节点 11: licqpus is babbpus or baccpus or bachpus (规则: MP, 深度: 4)
  LoG节点 12: x is xerspus and cochpus (规则: MP, 深度: 5)
  LoG节点 13: xerspus is dugtpus (规则: CE, 深度: 5)
  LoG节点 14: xerspus is suljpus (规则: MP, 深度: 5)
  LoG节点 15: dugtpus is patrpus (规则: CE, 深度: 5)
  LoG节点 16: patrpus is kerspus (规则: CE, 深度: 5)
  LoG节点 17: kerspus is jozvpus and duncpus (规则: MP, 深度: 5)
  LoG节点 18: jozvpus is licqpus and bixzpus (规则: MP, 深度: 5)
  LoG节点 19: licqpus is pazwpus (规则: MP, 深度: 5)
  LoG节点 20: pazwpus is babbpus or baccpus or bachpus (规则: MP, 深度: 5)
  LoG节点 21: x is cibzpus (规则: MP, 深度: 6)
  LoG节点 22: cibzpus is xerspus and cochpus (规则: CI, 深度: 6)
  LoG节点 23: xerspus is dugtpus and rodbpus (规则: MP, 深度: 6)
  LoG节点 24: xerspus is cuzvpus (规则: CE, 深度: 6)
  LoG节点 25: cuzvpus is suljpus (规则: CE, 深度: 6)
  LoG节点 26: dugtpus is patrpus and soxtpus (规则: MP, 深度: 6)
  LoG节点 27: patrpus is kerspus and kadmpus (规则: MP, 深度: 6)
  LoG节点 28: kerspus is wemppus (规则: CE, 深度: 6)
  LoG节点 29: wemppus is jozvpus and duncpus (规则: CE, 深度: 6)
  LoG节点 30: jozvpus is tudfpus (规则: MP, 深度: 6)
  LoG节点 31: tudfpus is licqpus and bixzpus (规则: MP, 深度: 6)
  LoG节点 32: licqpus is dehppus (规则: CE, 深度: 6)
  LoG节点 33: dehppus is pazwpus (规则: CE, 深度: 6)
  LoG节点 34: pazwpus is baxlpus (规则: CE, 深度: 6)
  LoG节点 35: baxlpus is babbpus or baccpus or bachpus (规则: MP, 深度: 6)
  LoG节点 36: x is gilbpus (规则: CE, 深度: 7)
  LoG节点 37: gilbpus is cibzpus (规则: MP, 深度: 7)
  LoG节点 38: cibzpus is xerspus (规则: MP, 深度: 7)
  LoG节点 39: cibzpus is cochpus (规则: CE, 深度: 7)
  LoG节点 40: xerspus is zadwpus (规则: CE, 深度: 7)
  LoG节点 41: zadwpus is dugtpus and rodbpus (规则: CE, 深度: 7)
  LoG节点 42: xerspus is cuzvpus and nivbpus (规则: MP, 深度: 7)
  LoG节点 43: cuzvpus is suljpus and tijspus (规则: MP, 深度: 7)
  LoG节点 44: dugtpus is ciynpus (规则: MP, 深度: 7)
  LoG节点 45: ciynpus is patrpus and soxtpus (规则: CE, 深度: 7)
  LoG节点 46: patrpus is saynpus (规则: CE, 深度: 7)
  LoG节点 47: saynpus is kerspus and kadmpus (规则: CI, 深度: 7)
  LoG节点 48: kerspus is wemppus and yigmpus (规则: MP, 深度: 7)
  LoG节点 49: wemppus is jozvpus and duncpus and netkpus (规则: MP, 深度: 7)
  LoG节点 50: jozvpus is xekgpus (规则: CE, 深度: 7)
  LoG节点 51: xekgpus is tudfpus (规则: MP, 深度: 7)
  LoG节点 52: tudfpus is yevlpus (规则: CE, 深度: 7)
  LoG节点 53: yevlpus is licqpus and bixzpus (规则: CI, 深度: 7)
  LoG节点 54: licqpus is dehppus and rocgpus (规则: MP, 深度: 7)
  LoG节点 55: dehppus is pazwpus and paqlpus (规则: MP, 深度: 7)
  LoG节点 56: pazwpus is baxlpus and zaytpus (规则: MP, 深度: 7)
  LoG节点 57: baxlpus is vislpus (规则: CE, 深度: 7)
  LoG节点 58: vislpus is babbpus or baccpus or bachpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 33
   - 初始条件数: 37
   - LoG图节点数: 59

📋 初始条件列表:
    1. yevlpus is bixzpus
    2. jozvpus is xekgpus and hifdpus
    3. vislpus is dewcpus
    4. hidwpus is pazwpus and paqlpus
    5. xekgpus is vajkpus
    6. patrpus is saynpus and beqhpus
    7. zadwpus is dugtpus and rodbpus and kevgpus
    8. dugtpus is tecfpus
    9. ciynpus is patrpus and soxtpus and baytpus
   10. pigjpus is baxlpus and zaytpus
   11. jokwpus is suljpus and tijspus
   12. dewcpus is babbpus or baccpus or bachpus
   13. pazwpus is pigjpus
   14. yevlpus is licqpus
   15. licqpus is xulspus
   16. x is gilbpus and xikppus
   17. tuyqpus is cuzvpus and nivbpus
   18. wemppus is tuwhpus
   19. cibzpus is cochpus and rublpus
   20. xerspus is zadwpus and vaxkpus
   21. cibzpus is dohfpus
   22. tecfpus is ciynpus
   23. sukypus is wemppus and yigmpus
   24. kerspus is sukypus
   25. saynpus is kerspus
   26. gilbpus is zegkpus
   27. saynpus is kadmpus
   28. tudfpus is yevlpus and vuwqpus
   29. zegkpus is cibzpus
   30. vajkpus is tudfpus
   31. xerspus is tuyqpus
   32. xulspus is dehppus and rocgpus
   33. dohfpus is xerspus
   34. cuzvpus is jokwpus
   35. tuwhpus is jozvpus and duncpus and netkpus
   36. dehppus is hidwpus
   37. baxlpus is vislpus and ruktpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 37 个前提节点

🔍 开始处理actual节点...

   节点 1: dewcpus is babbpus or baccpus or bachpus
      ↻ 重复节点，计数: 2

   节点 2: x is gilbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is gilbpus
      ✅ 验证成功 + LoG匹配

   节点 3: gilbpus is zegkpus
      ↻ 重复节点，计数: 2

   节点 4: zegkpus is cibzpus
      ↻ 重复节点，计数: 2

   节点 5: cibzpus is dohfpus
      ↻ 重复节点，计数: 2

   节点 6: dohfpus is xerspus
      ↻ 重复节点，计数: 2

   节点 7: xerspus is zadwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: xerspus is zadwpus
      ✅ 验证成功 + LoG匹配

   节点 8: zadwpus is dugtpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zadwpus is dugtpus and rodbpus and kevgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zadwpus is dugtpus and rodbpus and kevgpus
  ✓ 点亮LoG节点: zadwpus is dugtpus and rodbpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 9: dugtpus is tecfpus
      ↻ 重复节点，计数: 2

   节点 10: tecfpus is ciynpus
      ↻ 重复节点，计数: 2

   节点 11: ciynpus is patrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: ciynpus is patrpus and soxtpus and baytpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: ciynpus is patrpus and soxtpus and baytpus
  ✓ 点亮LoG节点: ciynpus is patrpus and soxtpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 12: patrpus is saynpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: patrpus is saynpus
      ✅ 验证成功 + LoG匹配

   节点 13: saynpus is kerspus
      ↻ 重复节点，计数: 2

   节点 14: kerspus is sukypus
      ↻ 重复节点，计数: 2

   节点 15: sukypus is wemppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: sukypus is wemppus and yigmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: sukypus is wemppus and yigmpus

   节点 16: wemppus is tuwhpus
      ↻ 重复节点，计数: 2

   节点 17: tuwhpus is jozvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: tuwhpus is jozvpus and duncpus and netkpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: tuwhpus is jozvpus and duncpus and netkpus

   节点 18: jozvpus is xekgpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: jozvpus is xekgpus
      ✅ 验证成功 + LoG匹配

   节点 19: xekgpus is vajkpus
      ↻ 重复节点，计数: 2

   节点 20: vajkpus is tudfpus
      ↻ 重复节点，计数: 2

   节点 21: tudfpus is yevlpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: tudfpus is yevlpus
      ✅ 验证成功 + LoG匹配

   节点 22: yevlpus is licqpus
      ↻ 重复节点，计数: 2

   节点 23: licqpus is xulspus
      ↻ 重复节点，计数: 2

   节点 24: xulspus is dehppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: xulspus is dehppus and rocgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: xulspus is dehppus and rocgpus

   节点 25: dehppus is hidwpus
      ↻ 重复节点，计数: 2

   节点 26: hidwpus is pazwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: hidwpus is pazwpus and paqlpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: hidwpus is pazwpus and paqlpus

   节点 27: pazwpus is pigjpus
      ↻ 重复节点，计数: 2

   节点 28: pigjpus is baxlpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: pigjpus is baxlpus and zaytpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: pigjpus is baxlpus and zaytpus

   节点 29: baxlpus is vislpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: baxlpus is vislpus
      ✅ 验证成功 + LoG匹配

   节点 30: vislpus is dewcpus
      ↻ 重复节点，计数: 2

   节点 31: dewcpus is babbpus or baccpus or bachpus
      ↻ 重复节点，计数: 3

   节点 32: x is dewcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is gilbpus → gilbpus is dewcpus
[后处理] 基于推理轨迹点亮节点，使用了 29 个前提条件:
  - 前提: x is gilbpus
  - 前提: gilbpus is zegkpus
  - 前提: zegkpus is cibzpus
  - 前提: cibzpus is dohfpus
  - 前提: dohfpus is xerspus
  - 前提: xerspus is zadwpus
  - 前提: zadwpus is dugtpus
  - 前提: dugtpus is tecfpus
  - 前提: tecfpus is ciynpus
  - 前提: ciynpus is patrpus
  - 前提: patrpus is saynpus
  - 前提: saynpus is kerspus
  - 前提: kerspus is sukypus
  - 前提: sukypus is wemppus
  - 前提: wemppus is tuwhpus
  - 前提: tuwhpus is jozvpus
  - 前提: jozvpus is xekgpus
  - 前提: xekgpus is vajkpus
  - 前提: vajkpus is tudfpus
  - 前提: tudfpus is yevlpus
  - 前提: yevlpus is licqpus
  - 前提: licqpus is xulspus
  - 前提: xulspus is dehppus
  - 前提: dehppus is hidwpus
  - 前提: hidwpus is pazwpus
  - 前提: pazwpus is pigjpus
  - 前提: pigjpus is baxlpus
  - 前提: baxlpus is vislpus
  - 前提: vislpus is dewcpus
  ✓ 点亮LoG节点: x is dugtpus
[子树点亮]     └─ 点亮依赖节点: x is dugtpus and suljpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is xerspus (深度4)
[子树点亮]     └─ 点亮依赖节点: xerspus is dugtpus and suljpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is xerspus and cochpus (深度5)
[子树点亮]     └─ 点亮依赖节点: xerspus is dugtpus (深度5)
[子树点亮]     └─ 点亮依赖节点: xerspus is suljpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is cibzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: cibzpus is xerspus and cochpus (深度6)
[子树点亮]     └─ 点亮依赖节点: xerspus is dugtpus and rodbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: xerspus is cuzvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: cuzvpus is suljpus (深度6)
[子树点亮]     └─ 点亮依赖节点: gilbpus is cibzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cibzpus is xerspus (深度7)
[子树点亮]     └─ 点亮依赖节点: cibzpus is cochpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xerspus is cuzvpus and nivbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cuzvpus is suljpus and tijspus (深度7)
[后处理]   └─ 自动点亮依赖子树: 16 个节点
  ✓ 点亮LoG节点: dugtpus is jozvpus
[子树点亮]     └─ 点亮依赖节点: dugtpus is kerspus (深度4)
[子树点亮]     └─ 点亮依赖节点: kerspus is jozvpus (深度4)
[子树点亮]     └─ 点亮依赖节点: dugtpus is patrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: patrpus is kerspus (深度5)
[子树点亮]     └─ 点亮依赖节点: kerspus is jozvpus and duncpus (深度5)
[子树点亮]     └─ 点亮依赖节点: dugtpus is patrpus and soxtpus (深度6)
[子树点亮]     └─ 点亮依赖节点: patrpus is kerspus and kadmpus (深度6)
[子树点亮]     └─ 点亮依赖节点: kerspus is wemppus (深度6)
[子树点亮]     └─ 点亮依赖节点: wemppus is jozvpus and duncpus (深度6)
[子树点亮]     └─ 点亮依赖节点: dugtpus is ciynpus (深度7)
[子树点亮]     └─ 点亮依赖节点: saynpus is kerspus and kadmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kerspus is wemppus and yigmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: wemppus is jozvpus and duncpus and netkpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 13 个节点
  ✓ 点亮LoG节点: jozvpus is licqpus
[子树点亮]     └─ 点亮依赖节点: jozvpus is licqpus and bixzpus (深度5)
[子树点亮]     └─ 点亮依赖节点: jozvpus is tudfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: tudfpus is licqpus and bixzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: xekgpus is tudfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: yevlpus is licqpus and bixzpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
  ✓ 点亮LoG节点: licqpus is pazwpus
[子树点亮]     └─ 点亮依赖节点: licqpus is dehppus (深度6)
[子树点亮]     └─ 点亮依赖节点: dehppus is pazwpus (深度6)
[子树点亮]     └─ 点亮依赖节点: licqpus is dehppus and rocgpus (深度7)
[子树点亮]     └─ 点亮依赖节点: dehppus is pazwpus and paqlpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
  ✓ 点亮LoG节点: pazwpus is baxlpus
[子树点亮]     └─ 点亮依赖节点: pazwpus is baxlpus and zaytpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 5 个LoG节点

   节点 33: x is babbpus or baccpus or bachpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus or baccpus or bachpus
[子树点亮]     └─ 点亮依赖节点: dugtpus is babbpus or baccpus or bachpus (深度2)
[子树点亮]     └─ 点亮依赖节点: jozvpus is babbpus or baccpus or bachpus (深度3)
[子树点亮]     └─ 点亮依赖节点: licqpus is babbpus or baccpus or bachpus (深度4)
[子树点亮]     └─ 点亮依赖节点: pazwpus is babbpus or baccpus or bachpus (深度5)
[子树点亮]     └─ 点亮依赖节点: baxlpus is babbpus or baccpus or bachpus (深度6)
[子树点亮]     └─ 点亮依赖节点: vislpus is babbpus or baccpus or bachpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 6 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 33
   - 新增节点: 15
   - 更新已存在节点: 18
   - 点亮的LoG节点: 59

🎯 推理质量统计:
   - 完美推理: 15 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 59节点, 37前提, 复杂度1-37

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 52
   - 前提节点: 37
   - 推理节点: 15
   - 幻觉节点: 0
   - 点亮LoG节点: 59

✅ 推理节点详情:
   🟢 x is gilbpus (出现1次, 质量:perfect)
   🟢 xerspus is zadwpus (出现1次, 质量:perfect)
   🟢 zadwpus is dugtpus (出现1次, 质量:perfect)
   🟢 ciynpus is patrpus (出现1次, 质量:perfect)
   🟢 patrpus is saynpus (出现1次, 质量:perfect)
   🟢 sukypus is wemppus (出现1次, 质量:perfect)
   🟢 tuwhpus is jozvpus (出现1次, 质量:perfect)
   🟢 jozvpus is xekgpus (出现1次, 质量:perfect)
   🟢 tudfpus is yevlpus (出现1次, 质量:perfect)
   🟢 xulspus is dehppus (出现1次, 质量:perfect)
   🟢 hidwpus is pazwpus (出现1次, 质量:perfect)
   🟢 pigjpus is baxlpus (出现1次, 质量:perfect)
   🟢 baxlpus is vislpus (出现1次, 质量:perfect)
   🟢 x is dewcpus (出现1次, 质量:perfect)
   🟢 x is babbpus or baccpus or bachpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - saynpus is kerspus and kadmpus
   - cuzvpus is suljpus
   - licqpus is dehppus
   - dugtpus is ciynpus
   - x is xerspus
   - x is dugtpus
   - jozvpus is licqpus and bixzpus
   - xerspus is dugtpus and rodbpus
   - kerspus is wemppus and yigmpus
   - patrpus is saynpus
   - x is cibzpus
   - cuzvpus is suljpus and tijspus
   - xerspus is zadwpus
   - dugtpus is kerspus
   - dugtpus is patrpus
   - cibzpus is xerspus
   - kerspus is jozvpus
   - x is babbpus or baccpus or bachpus
   - x is gilbpus
   - patrpus is kerspus and kadmpus
   - x is xerspus and cochpus
   - patrpus is kerspus
   - jozvpus is licqpus
   - dehppus is pazwpus and paqlpus
   - ciynpus is patrpus and soxtpus
   - tudfpus is yevlpus
   - wemppus is jozvpus and duncpus and netkpus
   - baxlpus is babbpus or baccpus or bachpus
   - cibzpus is xerspus and cochpus
   - jozvpus is babbpus or baccpus or bachpus
   - wemppus is jozvpus and duncpus
   - pazwpus is baxlpus
   - xerspus is dugtpus and suljpus
   - xerspus is dugtpus
   - vislpus is babbpus or baccpus or bachpus
   - zadwpus is dugtpus and rodbpus
   - kerspus is wemppus
   - dugtpus is patrpus and soxtpus
   - dugtpus is babbpus or baccpus or bachpus
   - gilbpus is cibzpus
   - xerspus is cuzvpus and nivbpus
   - yevlpus is licqpus and bixzpus
   - dehppus is pazwpus
   - dugtpus is jozvpus
   - jozvpus is xekgpus
   - pazwpus is babbpus or baccpus or bachpus
   - kerspus is jozvpus and duncpus
   - xerspus is suljpus
   - xekgpus is tudfpus
   - pazwpus is baxlpus and zaytpus
   - x is dugtpus and suljpus
   - jozvpus is tudfpus
   - licqpus is pazwpus
   - tudfpus is licqpus and bixzpus
   - cibzpus is cochpus
   - xerspus is cuzvpus
   - licqpus is babbpus or baccpus or bachpus
   - baxlpus is vislpus
   - licqpus is dehppus and rocgpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus or baccpus or bachpus (第7层)
   节点Coverage: 59/59 = 100.00%
   前提条件Coverage: 17/37 = 45.95%
   各推理层点亮比例:
     第1层: 23/23 = 100.00%
     第2层: 15/15 = 100.00%
     第3层: 9/9 = 100.00%
     第4层: 6/6 = 100.00%
     第5层: 3/3 = 100.00%
     第6层: 2/2 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/15 = 0.00%
   可推导节点: 15/15
   Strict Error Rate: 0/15 = 0.00%
   严格有效节点: 15/15

   详细分析:
     完美推理: 15 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 30/50
================================================================================
记录索引: 29
问题状态: incorrect
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_29.json
✅ 使用缓存结果:
   - 句子数: 7
   - 提取的语句数: 30
   - 初始条件数: 32

=== Statement提取完成 ===
总句子数: 7
成功提取: 7
失败提取: 0
总statements数: 30

=== 开始清洗Statement格式 ===
原始statements数: 30
清洗后statements数: 30
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 30
标准化后节点数: 30
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → jeflpus and bupvpus (原始: x is jeflpus and bupvpus)
  2. [actual] jeflpus → comdpus (原始: jeflpus is comdpus)
  3. [actual] comdpus → lerwpus (原始: comdpus is lerwpus)
  4. [actual] lerwpus → wohspus and mabbpus (原始: lerwpus is wohspus and mabbpus)
  5. [actual] wohspus → susypus (原始: wohspus is susypus)
  6. [actual] susypus → xexhpus (原始: susypus is xexhpus)
  7. [actual] xexhpus → guwbpus and mujrpus (原始: xexhpus is guwbpus and mujrpus)
  8. [actual] guwbpus → vuvtpus (原始: guwbpus is vuvtpus)
  9. [actual] vuvtpus → gacqpus (原始: vuvtpus is gacqpus)
  10. [actual] gacqpus → hasjpus and wagcpus (原始: gacqpus is hasjpus and wagcpus)
  11. [actual] hasjpus → jimvpus and wagcpus (原始: hasjpus is jimvpus and wagcpus)
  12. [actual] jimvpus → fahjpus and hafmpus (原始: jimvpus is fahjpus and hafmpus)
  13. [actual] fahjpus → runhpus and vegmpus and mafdpus (原始: fahjpus is runhpus and vegmpus and mafdpus)
  14. [actual] runhpus → xavwpus and wurdpus (原始: runhpus is xavwpus and wurdpus)
  15. [actual] xavwpus → raqzpus (原始: xavwpus is raqzpus)
  16. [actual] raqzpus → labhpus (原始: raqzpus is labhpus)
  17. [actual] labhpus → xarhpus and beqhpus (原始: labhpus is xarhpus and beqhpus)
  18. [actual] xarhpus → wuxzpus (原始: xarhpus is wuxzpus)
  19. [actual] wuxzpus → kevjpus (原始: wuxzpus is kevjpus)
  20. [actual] kevjpus → qidwpus and faqwpus and lukmpus (原始: kevjpus is qidwpus and faqwpus and lukmpus)
  21. [actual] qidwpus → kuvfpus and woxkpus (原始: qidwpus is kuvfpus and woxkpus)
  22. [actual] kuvfpus → hohnpus (原始: kuvfpus is hohnpus)
  23. [actual] hohnpus → dojmpus and wuwypus (原始: hohnpus is dojmpus and wuwypus)
  24. [actual] dijompus → muqfpus (原始: dijompus is muqfpus)
  25. [actual] muqfpus → piqypus and babbpus and kilspus and godjpus (原始: muqfpus is piqypus and babbpus and kilspus and godjpus)
  26. [actual] x → piqypus (原始: x is piqypus)
  27. [actual] piqypus → babbpus and kilspus and godjpus (原始: piqypus is babbpus and kilspus and godjpus)
  28. [planning] x → babbpus (原始: x is babbpus)
  29. [planning] x → kilspus (原始: x is kilspus)
  30. [planning] x → godjpus (原始: x is godjpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 54
[后处理] 加载LoG图，包含 54 个节点
  LoG节点 0: x is babbpus (规则: MP, 深度: 1)
  LoG节点 1: x is xarhpus (规则: MP, 深度: 2)
  LoG节点 2: xarhpus is babbpus (规则: CE, 深度: 2)
  LoG节点 3: x is xexhpus (规则: CE, 深度: 3)
  LoG节点 4: xexhpus is xarhpus (规则: MP, 深度: 3)
  LoG节点 5: xarhpus is babbpus and mehxpus (规则: MP, 深度: 3)
  LoG节点 6: x is xexhpus and cinwpus (规则: MP, 深度: 4)
  LoG节点 7: xexhpus is runhpus (规则: MP, 深度: 4)
  LoG节点 8: runhpus is xarhpus (规则: CE, 深度: 4)
  LoG节点 9: xarhpus is dojmpus (规则: MP, 深度: 4)
  LoG节点 10: dojmpus is babbpus and mehxpus (规则: CI, 深度: 4)
  LoG节点 11: x is comdpus (规则: CE, 深度: 5)
  LoG节点 12: comdpus is xexhpus and cinwpus (规则: MP, 深度: 5)
  LoG节点 13: xexhpus is jimvpus (规则: MP, 深度: 5)
  LoG节点 14: jimvpus is runhpus (规则: CE, 深度: 5)
  LoG节点 15: runhpus is xarhpus and bafppus (规则: MP, 深度: 5)
  LoG节点 16: xarhpus is qidwpus (规则: CE, 深度: 5)
  LoG节点 17: qidwpus is dojmpus (规则: CE, 深度: 5)
  LoG节点 18: dojmpus is babbpus (规则: CE, 深度: 5)
  LoG节点 19: dojmpus is mehxpus (规则: CE, 深度: 5)
  LoG节点 20: x is comdpus and damppus (规则: MP, 深度: 6)
  LoG节点 21: comdpus is wohspus (规则: CE, 深度: 6)
  LoG节点 22: wohspus is xexhpus and cinwpus (规则: CI, 深度: 6)
  LoG节点 23: xexhpus is gacqpus (规则: MP, 深度: 6)
  LoG节点 24: gacqpus is jimvpus (规则: CE, 深度: 6)
  LoG节点 25: jimvpus is runhpus and vegmpus (规则: MP, 深度: 6)
  LoG节点 26: runhpus is labhpus (规则: MP, 深度: 6)
  LoG节点 27: labhpus is xarhpus and bafppus (规则: CI, 深度: 6)
  LoG节点 28: xarhpus is qidwpus and faqwpus (规则: MP, 深度: 6)
  LoG节点 29: qidwpus is dojmpus and wuwypus (规则: MP, 深度: 6)
  LoG节点 30: dojmpus is babbpus and kilspus (规则: MP, 深度: 6)
  LoG节点 31: dojmpus is mehxpus and vavjpus (规则: MP, 深度: 6)
  LoG节点 32: x is jeflpus (规则: CE, 深度: 7)
  LoG节点 33: jeflpus is comdpus and damppus (规则: CE, 深度: 7)
  LoG节点 34: comdpus is wohspus and mabbpus (规则: MP, 深度: 7)
  LoG节点 35: wohspus is xexhpus (规则: MP, 深度: 7)
  LoG节点 36: wohspus is cinwpus (规则: CE, 深度: 7)
  LoG节点 37: xexhpus is guwbpus (规则: CE, 深度: 7)
  LoG节点 38: guwbpus is gacqpus (规则: MP, 深度: 7)
  LoG节点 39: gacqpus is jimvpus and wagcpus (规则: MP, 深度: 7)
  LoG节点 40: jimvpus is fahjpus (规则: CE, 深度: 7)
  LoG节点 41: fahjpus is runhpus and vegmpus (规则: CE, 深度: 7)
  LoG节点 42: runhpus is xavwpus (规则: CE, 深度: 7)
  LoG节点 43: xavwpus is labhpus (规则: MP, 深度: 7)
  LoG节点 44: labhpus is xarhpus (规则: CE, 深度: 7)
  LoG节点 45: labhpus is bafppus (规则: MP, 深度: 7)
  LoG节点 46: xarhpus is kevjpus (规则: MP, 深度: 7)
  LoG节点 47: kevjpus is qidwpus and faqwpus (规则: CE, 深度: 7)
  LoG节点 48: qidwpus is kuvfpus (规则: CE, 深度: 7)
  LoG节点 49: kuvfpus is dojmpus and wuwypus (规则: MP, 深度: 7)
  LoG节点 50: dojmpus is piqypus (规则: MP, 深度: 7)
  LoG节点 51: piqypus is babbpus and kilspus (规则: CE, 深度: 7)
  LoG节点 52: dojmpus is jevkpus (规则: MP, 深度: 7)
  LoG节点 53: jevkpus is mehxpus and vavjpus (规则: CE, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 30
   - 初始条件数: 32
   - LoG图节点数: 54

📋 初始条件列表:
    1. dojmpus is gajfpus
    2. jevkpus is mehxpus and vavjpus and wihzpus
    3. kuvfpus is hohnpus
    4. raqzpus is labhpus
    5. runhpus is xavwpus and wurdpus
    6. comdpus is lerwpus
    7. fahjpus is runhpus and vegmpus and mafdpus
    8. fuyvpus is bafppus
    9. vuvtpus is gacqpus
   10. hohnpus is dojmpus and wuwypus
   11. xexhpus is guwbpus and mujrpus
   12. muqfpus is piqypus
   13. kevjpus is qidwpus and faqwpus and lukmpus
   14. labhpus is xarhpus and beqhpus
   15. piqypus is babbpus and kilspus and godjpus
   16. x is jeflpus and bupvpus
   17. gacqpus is hasjpus
   18. wohspus is susypus
   19. susypus is xexhpus
   20. xavwpus is raqzpus
   21. dojmpus is muqfpus
   22. hasjpus is jimvpus and wagcpus
   23. qidwpus is kuvfpus and woxkpus
   24. jeflpus is comdpus and damppus and qurrpus
   25. jimvpus is fahjpus and hafmpus
   26. lerwpus is wohspus and mabbpus
   27. gajfpus is jevkpus
   28. wohspus is cinwpus and vuknpus
   29. labhpus is fuyvpus
   30. xarhpus is wuxzpus
   31. guwbpus is vuvtpus
   32. wuxzpus is kevjpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 32 个前提节点

🔍 开始处理actual节点...

   节点 1: x is jeflpus and bupvpus
      ↻ 重复节点，计数: 2

   节点 2: jeflpus is comdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: jeflpus is comdpus and damppus and qurrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: jeflpus is comdpus and damppus and qurrpus
  ✓ 点亮LoG节点: jeflpus is comdpus and damppus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 3: comdpus is lerwpus
      ↻ 重复节点，计数: 2

   节点 4: lerwpus is wohspus and mabbpus
      ↻ 重复节点，计数: 2

   节点 5: wohspus is susypus
      ↻ 重复节点，计数: 2

   节点 6: susypus is xexhpus
      ↻ 重复节点，计数: 2

   节点 7: xexhpus is guwbpus and mujrpus
      ↻ 重复节点，计数: 2

   节点 8: guwbpus is vuvtpus
      ↻ 重复节点，计数: 2

   节点 9: vuvtpus is gacqpus
      ↻ 重复节点，计数: 2

   节点 10: gacqpus is hasjpus and wagcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: gacqpus is hasjpus → gacqpus is wagcpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: gacqpus is hasjpus
  - 前提: hasjpus is jimvpus and wagcpus
  ✓ 点亮LoG节点: gacqpus is jimvpus
[子树点亮]     └─ 点亮依赖节点: gacqpus is jimvpus and wagcpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 11: hasjpus is jimvpus and wagcpus
      ↻ 重复节点，计数: 2

   节点 12: jimvpus is fahjpus and hafmpus
      ↻ 重复节点，计数: 2

   节点 13: fahjpus is runhpus and vegmpus and mafdpus
      ↻ 重复节点，计数: 2

   节点 14: runhpus is xavwpus and wurdpus
      ↻ 重复节点，计数: 2

   节点 15: xavwpus is raqzpus
      ↻ 重复节点，计数: 2

   节点 16: raqzpus is labhpus
      ↻ 重复节点，计数: 2

   节点 17: labhpus is xarhpus and beqhpus
      ↻ 重复节点，计数: 2

   节点 18: xarhpus is wuxzpus
      ↻ 重复节点，计数: 2

   节点 19: wuxzpus is kevjpus
      ↻ 重复节点，计数: 2

   节点 20: kevjpus is qidwpus and faqwpus and lukmpus
      ↻ 重复节点，计数: 2

   节点 21: qidwpus is kuvfpus and woxkpus
      ↻ 重复节点，计数: 2

   节点 22: kuvfpus is hohnpus
      ↻ 重复节点，计数: 2

   节点 23: hohnpus is dojmpus and wuwypus
      ↻ 重复节点，计数: 2

   节点 24: dijompus is muqfpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 25: muqfpus is piqypus and babbpus and kilspus and godjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: muqfpus is piqypus → muqfpus is babbpus → muqfpus is kilspus → muqfpus is godjpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: muqfpus is piqypus
  - 前提: piqypus is babbpus and kilspus and godjpus
  ✓ 点亮LoG节点: piqypus is babbpus and kilspus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 26: x is piqypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP+CE
      📋 推理路径: MP+CE规则: x is jeflpus → jeflpus is piqypus
[后处理] 基于推理轨迹点亮节点，使用了 25 个前提条件:
  - 前提: x is jeflpus and bupvpus
  - 前提: jeflpus is comdpus
  - 前提: comdpus is lerwpus
  - 前提: lerwpus is wohspus and mabbpus
  - 前提: wohspus is susypus
  - 前提: susypus is xexhpus
  - 前提: xexhpus is guwbpus and mujrpus
  - 前提: guwbpus is vuvtpus
  - 前提: vuvtpus is gacqpus
  - 前提: gacqpus is hasjpus
  - 前提: hasjpus is jimvpus and wagcpus
  - 前提: jimvpus is fahjpus and hafmpus
  - 前提: fahjpus is runhpus and vegmpus and mafdpus
  - 前提: runhpus is xavwpus and wurdpus
  - 前提: xavwpus is raqzpus
  - 前提: raqzpus is labhpus
  - 前提: labhpus is xarhpus and beqhpus
  - 前提: xarhpus is wuxzpus
  - 前提: wuxzpus is kevjpus
  - 前提: kevjpus is qidwpus and faqwpus and lukmpus
  - 前提: qidwpus is kuvfpus and woxkpus
  - 前提: kuvfpus is hohnpus
  - 前提: hohnpus is dojmpus and wuwypus
  - 前提: dojmpus is muqfpus
  - 前提: muqfpus is piqypus
  ✓ 点亮LoG节点: x is xarhpus
[子树点亮]     └─ 点亮依赖节点: x is xexhpus (深度3)
[子树点亮]     └─ 点亮依赖节点: xexhpus is xarhpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is xexhpus and cinwpus (深度4)
[子树点亮]     └─ 点亮依赖节点: xexhpus is runhpus (深度4)
[子树点亮]     └─ 点亮依赖节点: runhpus is xarhpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is comdpus (深度5)
[子树点亮]     └─ 点亮依赖节点: comdpus is xexhpus and cinwpus (深度5)
[子树点亮]     └─ 点亮依赖节点: xexhpus is jimvpus (深度5)
[子树点亮]     └─ 点亮依赖节点: jimvpus is runhpus (深度5)
[子树点亮]     └─ 点亮依赖节点: runhpus is xarhpus and bafppus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is comdpus and damppus (深度6)
[子树点亮]     └─ 点亮依赖节点: comdpus is wohspus (深度6)
[子树点亮]     └─ 点亮依赖节点: wohspus is xexhpus and cinwpus (深度6)
[子树点亮]     └─ 点亮依赖节点: xexhpus is gacqpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jimvpus is runhpus and vegmpus (深度6)
[子树点亮]     └─ 点亮依赖节点: runhpus is labhpus (深度6)
[子树点亮]     └─ 点亮依赖节点: labhpus is xarhpus and bafppus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is jeflpus (深度7)
[子树点亮]     └─ 点亮依赖节点: comdpus is wohspus and mabbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: wohspus is xexhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: wohspus is cinwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xexhpus is guwbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: guwbpus is gacqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jimvpus is fahjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: fahjpus is runhpus and vegmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: runhpus is xavwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xavwpus is labhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: labhpus is xarhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: labhpus is bafppus (深度7)
[后处理]   └─ 自动点亮依赖子树: 29 个节点
  ✓ 点亮LoG节点: xarhpus is dojmpus
[子树点亮]     └─ 点亮依赖节点: xarhpus is qidwpus (深度5)
[子树点亮]     └─ 点亮依赖节点: qidwpus is dojmpus (深度5)
[子树点亮]     └─ 点亮依赖节点: xarhpus is qidwpus and faqwpus (深度6)
[子树点亮]     └─ 点亮依赖节点: qidwpus is dojmpus and wuwypus (深度6)
[子树点亮]     └─ 点亮依赖节点: xarhpus is kevjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kevjpus is qidwpus and faqwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qidwpus is kuvfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kuvfpus is dojmpus and wuwypus (深度7)
[后处理]   └─ 自动点亮依赖子树: 8 个节点
  ✓ 点亮LoG节点: dojmpus is piqypus
[后处理] 通过推理轨迹额外点亮了 3 个LoG节点

   节点 27: piqypus is babbpus and kilspus and godjpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 27
   - 新增节点: 5
   - 更新已存在节点: 22
   - 点亮的LoG节点: 44

🎯 推理质量统计:
   - 完美推理: 5 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 54节点, 32前提, 复杂度1-32
[高级点亮] 新点亮 2 个LoG节点

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 37
   - 前提节点: 32
   - 推理节点: 4
   - 幻觉节点: 1
   - 点亮LoG节点: 46

❌ 幻觉节点详情:
   - dijompus is muqfpus (出现1次)

✅ 推理节点详情:
   🟢 jeflpus is comdpus (出现1次, 质量:perfect)
   🟢 gacqpus is hasjpus and wagcpus (出现1次, 质量:perfect)
   🟢 muqfpus is piqypus and babbpus and kilspus and godjpus (出现1次, 质量:perfect)
   🟢 x is piqypus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - runhpus is xarhpus and bafppus
   - qidwpus is dojmpus
   - xexhpus is runhpus
   - x is xexhpus
   - labhpus is bafppus
   - guwbpus is gacqpus
   - xavwpus is labhpus
   - dojmpus is babbpus and kilspus
   - xexhpus is xarhpus
   - kuvfpus is dojmpus and wuwypus
   - wohspus is xexhpus and cinwpus
   - labhpus is xarhpus
   - dojmpus is babbpus
   - xexhpus is jimvpus
   - qidwpus is dojmpus and wuwypus
   - jimvpus is runhpus and vegmpus
   - x is comdpus and damppus
   - xarhpus is kevjpus
   - kevjpus is qidwpus and faqwpus
   - gacqpus is jimvpus
   - jeflpus is comdpus and damppus
   - wohspus is cinwpus
   - xexhpus is guwbpus
   - xarhpus is qidwpus and faqwpus
   - runhpus is xarhpus
   - gacqpus is jimvpus and wagcpus
   - jimvpus is fahjpus
   - runhpus is labhpus
   - piqypus is babbpus and kilspus
   - jimvpus is runhpus
   - labhpus is xarhpus and bafppus
   - comdpus is wohspus and mabbpus
   - runhpus is xavwpus
   - fahjpus is runhpus and vegmpus
   - comdpus is wohspus
   - qidwpus is kuvfpus
   - x is jeflpus
   - wohspus is xexhpus
   - x is xarhpus
   - xarhpus is qidwpus
   - x is xexhpus and cinwpus
   - xarhpus is dojmpus
   - comdpus is xexhpus and cinwpus
   - dojmpus is piqypus
   - x is comdpus
   - xexhpus is gacqpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 6/7 = 85.71%
   最深点亮节点: x is xarhpus (第6层)
   节点Coverage: 46/54 = 85.19%
   前提条件Coverage: 22/32 = 68.75%
   各推理层点亮比例:
     第1层: 20/22 = 90.91%
     第2层: 11/12 = 91.67%
     第3层: 8/9 = 88.89%
     第4层: 4/5 = 80.00%
     第5层: 2/3 = 66.67%
     第6层: 1/2 = 50.00%
     第7层: 0/1 = 0.00%

🎯 计算Precision指标...
   Error Rate: 1/5 = 20.00%
   可推导节点: 4/5
   Strict Error Rate: 1/5 = 20.00%
   严格有效节点: 4/5

   详细分析:
     完美推理: 5 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 31/50
================================================================================
记录索引: 30
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_30.json
✅ 使用缓存结果:
   - 句子数: 21
   - 提取的语句数: 37
   - 初始条件数: 21

=== Statement提取完成 ===
总句子数: 21
成功提取: 21
失败提取: 0
总statements数: 37

=== 开始清洗Statement格式 ===
原始statements数: 37
清洗后statements数: 37
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 37
标准化后节点数: 37
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babbpus (原始: x is babbpus)
  2. [planning] x → baccpus (原始: x is baccpus)
  3. [actual] x → tefgpus and cabgpus (原始: x is tefgpus and cabgpus)
  4. [actual] tefgpus → tiympus and movgpus (原始: tefgpus is tiympus and movgpus)
  5. [actual] x → tiympus (原始: x is tiympus)
  6. [actual] tiympus → lojmpus and pectpus (原始: tiympus is lojmpus and pectpus)
  7. [actual] x → lojmpus (原始: x is lojmpus)
  8. [actual] lojmpus → yaxspus (原始: lojmpus is yaxspus)
  9. [planning] x → yaxspus (原始: x is yaxspus)
  10. [actual] yaxspus → pozxpus and gilvpus (原始: yaxspus is pozxpus and gilvpus)
  11. [actual] x → pozxpus (原始: x is pozxpus)
  12. [actual] pozxpus → suljpus and dintpus (原始: pozxpus is suljpus and dintpus)
  13. [actual] x → suljpus (原始: x is suljpus)
  14. [actual] suljpus → xewjpus (原始: suljpus is xewjpus)
  15. [planning] x → xewjpus (原始: x is xewjpus)
  16. [actual] xewjpus → veglpus and cuwhpus (原始: xewjpus is veglpus and cuwhpus)
  17. [actual] x → veglpus (原始: x is veglpus)
  18. [actual] veglpus → vajypus and jocfpus (原始: veglpus is vajypus and jocfpus)
  19. [actual] x → vajypus (原始: x is vajypus)
  20. [actual] vajypus → hukzpus (原始: vajypus is hukzpus)
  21. [actual] x → hukzpus (原始: x is hukzpus)
  22. [actual] hukzpus → sixdpus and zufhpus (原始: hukzpus is sixdpus and zufhpus)
  23. [actual] x → sixdpus (原始: x is sixdpus)
  24. [actual] sixdpus → tescpus (原始: sixdpus is tescpus)
  25. [actual] x → tescpus (原始: x is tescpus)
  26. [actual] tescpus → jimmpus (原始: tescpus is jimmpus)
  27. [planning] x → jimmpus (原始: x is jimmpus)
  28. [actual] jimmpus → pikfpus (原始: jimmpus is pikfpus)
  29. [planning] x → pikfpus (原始: x is pikfpus)
  30. [actual] pikfpus → wivzpus and batdpus (原始: pikfpus is wivzpus and batdpus)
  31. [planning] x → wivzpus (原始: x is wivzpus)
  32. [actual] wivzpus → cixppus (原始: wivzpus is cixppus)
  33. [actual] x → cixppus (原始: x is cixppus)
  34. [actual] cixppus → babbpus and fapmpus (原始: cixppus is babbpus and fapmpus)
  35. [actual] x → babbpus (原始: x is babbpus)
  36. [actual] x → babbpus (原始: x is babbpus)
  37. [actual] x → babbpus or baccpus (原始: x is babbpus or baccpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 34
[后处理] 加载LoG图，包含 34 个节点
  LoG节点 0: x is babbpus or baccpus (规则: DI, 深度: 1)
  LoG节点 1: x is babbpus (规则: MP, 深度: 2)
  LoG节点 2: x is sixdpus (规则: MP, 深度: 3)
  LoG节点 3: sixdpus is babbpus (规则: CE, 深度: 3)
  LoG节点 4: x is pozxpus (规则: CE, 深度: 4)
  LoG节点 5: pozxpus is sixdpus (规则: MP, 深度: 4)
  LoG节点 6: sixdpus is babbpus and gakdpus (规则: MP, 深度: 4)
  LoG节点 7: x is pozxpus and gilvpus (规则: MP, 深度: 5)
  LoG节点 8: pozxpus is xewjpus (规则: CE, 深度: 5)
  LoG节点 9: xewjpus is sixdpus (规则: MP, 深度: 5)
  LoG节点 10: sixdpus is wivzpus (规则: CE, 深度: 5)
  LoG节点 11: wivzpus is babbpus and gakdpus (规则: CI, 深度: 5)
  LoG节点 12: x is tiympus (规则: MP, 深度: 6)
  LoG节点 13: tiympus is pozxpus and gilvpus (规则: MP, 深度: 6)
  LoG节点 14: pozxpus is xewjpus and rodfpus (规则: MP, 深度: 6)
  LoG节点 15: xewjpus is vajypus (规则: MP, 深度: 6)
  LoG节点 16: vajypus is sixdpus (规则: CE, 深度: 6)
  LoG节点 17: sixdpus is wivzpus and batdpus (规则: MP, 深度: 6)
  LoG节点 18: wivzpus is babbpus (规则: CE, 深度: 6)
  LoG节点 19: wivzpus is gakdpus (规则: MP, 深度: 6)
  LoG节点 20: x is tefgpus (规则: CE, 深度: 7)
  LoG节点 21: tefgpus is tiympus (规则: CE, 深度: 7)
  LoG节点 22: tiympus is lojmpus (规则: CE, 深度: 7)
  LoG节点 23: lojmpus is pozxpus and gilvpus (规则: MP, 深度: 7)
  LoG节点 24: pozxpus is suljpus (规则: CE, 深度: 7)
  LoG节点 25: suljpus is xewjpus and rodfpus (规则: CI, 深度: 7)
  LoG节点 26: xewjpus is veglpus (规则: CE, 深度: 7)
  LoG节点 27: veglpus is vajypus (规则: CE, 深度: 7)
  LoG节点 28: vajypus is sixdpus and zufhpus (规则: MP, 深度: 7)
  LoG节点 29: sixdpus is jimmpus (规则: MP, 深度: 7)
  LoG节点 30: jimmpus is wivzpus and batdpus (规则: MP, 深度: 7)
  LoG节点 31: wivzpus is babbpus and fapmpus (规则: MP, 深度: 7)
  LoG节点 32: wivzpus is jahrpus (规则: CE, 深度: 7)
  LoG节点 33: jahrpus is gakdpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 37
   - 初始条件数: 21
   - LoG图节点数: 34

📋 初始条件列表:
    1. tiympus is lojmpus and pectpus
    2. cixppus is babbpus and fapmpus
    3. suljpus is rodfpus
    4. pozxpus is suljpus and dintpus
    5. vajypus is hukzpus
    6. veglpus is vajypus and jocfpus
    7. suljpus is xewjpus
    8. lojmpus is yaxspus
    9. qolrpus is gakdpus
   10. jahrpus is qolrpus
   11. yaxspus is pozxpus and gilvpus
   12. x is tefgpus and cabgpus
   13. jimmpus is pikfpus
   14. hukzpus is sixdpus and zufhpus
   15. wivzpus is jahrpus and puzvpus
   16. tescpus is jimmpus
   17. pikfpus is wivzpus and batdpus
   18. sixdpus is tescpus
   19. wivzpus is cixppus
   20. tefgpus is tiympus and movgpus
   21. xewjpus is veglpus and cuwhpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 21 个前提节点

🔍 开始处理actual节点...

   节点 1: x is tefgpus and cabgpus
      ↻ 重复节点，计数: 2

   节点 2: tefgpus is tiympus and movgpus
      ↻ 重复节点，计数: 2

   节点 3: x is tiympus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is tiympus
[子树点亮]     └─ 点亮依赖节点: x is tefgpus (深度7)
[子树点亮]     └─ 点亮依赖节点: tefgpus is tiympus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 4: tiympus is lojmpus and pectpus
      ↻ 重复节点，计数: 2

   节点 5: x is lojmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is tiympus → tiympus is lojmpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is tiympus
  - 前提: tiympus is lojmpus and pectpus
  ✓ 点亮LoG节点: tiympus is lojmpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 6: lojmpus is yaxspus
      ↻ 重复节点，计数: 2

   节点 7: yaxspus is pozxpus and gilvpus
      ↻ 重复节点，计数: 2

   节点 8: x is pozxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is pozxpus
[子树点亮]     └─ 点亮依赖节点: x is pozxpus and gilvpus (深度5)
[子树点亮]     └─ 点亮依赖节点: tiympus is pozxpus and gilvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: lojmpus is pozxpus and gilvpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 9: pozxpus is suljpus and dintpus
      ↻ 重复节点，计数: 2

   节点 10: x is suljpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is tiympus → tiympus is suljpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is tiympus
  - 前提: tiympus is lojmpus and pectpus
  - 前提: lojmpus is yaxspus
  - 前提: yaxspus is pozxpus and gilvpus
  - 前提: pozxpus is suljpus and dintpus
  ✓ 点亮LoG节点: pozxpus is suljpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 11: suljpus is xewjpus
      ↻ 重复节点，计数: 2

   节点 12: xewjpus is veglpus and cuwhpus
      ↻ 重复节点，计数: 2

   节点 13: x is veglpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is tiympus → tiympus is veglpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is tiympus
  - 前提: tiympus is lojmpus and pectpus
  - 前提: lojmpus is yaxspus
  - 前提: yaxspus is pozxpus and gilvpus
  - 前提: pozxpus is suljpus and dintpus
  - 前提: suljpus is xewjpus
  - 前提: xewjpus is veglpus and cuwhpus
  ✓ 点亮LoG节点: pozxpus is xewjpus
[子树点亮]     └─ 点亮依赖节点: pozxpus is xewjpus and rodfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: suljpus is xewjpus and rodfpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
  ✓ 点亮LoG节点: xewjpus is veglpus
[后处理] 通过推理轨迹额外点亮了 2 个LoG节点

   节点 14: veglpus is vajypus and jocfpus
      ↻ 重复节点，计数: 2

   节点 15: x is vajypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is tiympus → tiympus is vajypus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is tiympus
  - 前提: tiympus is lojmpus and pectpus
  - 前提: lojmpus is yaxspus
  - 前提: yaxspus is pozxpus and gilvpus
  - 前提: pozxpus is suljpus and dintpus
  - 前提: suljpus is xewjpus
  - 前提: xewjpus is veglpus and cuwhpus
  - 前提: veglpus is vajypus and jocfpus
  ✓ 点亮LoG节点: xewjpus is vajypus
[子树点亮]     └─ 点亮依赖节点: veglpus is vajypus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 16: vajypus is hukzpus
      ↻ 重复节点，计数: 2

   节点 17: x is hukzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is tiympus → tiympus is hukzpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is tiympus
  - 前提: tiympus is lojmpus and pectpus
  - 前提: lojmpus is yaxspus
  - 前提: yaxspus is pozxpus and gilvpus
  - 前提: pozxpus is suljpus and dintpus
  - 前提: suljpus is xewjpus
  - 前提: xewjpus is veglpus and cuwhpus
  - 前提: veglpus is vajypus and jocfpus
  - 前提: vajypus is hukzpus

   节点 18: hukzpus is sixdpus and zufhpus
      ↻ 重复节点，计数: 2

   节点 19: x is sixdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is sixdpus
[子树点亮]     └─ 点亮依赖节点: pozxpus is sixdpus (深度4)
[子树点亮]     └─ 点亮依赖节点: xewjpus is sixdpus (深度5)
[子树点亮]     └─ 点亮依赖节点: vajypus is sixdpus (深度6)
[子树点亮]     └─ 点亮依赖节点: vajypus is sixdpus and zufhpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
      ✅ 验证成功 + LoG匹配

   节点 20: sixdpus is tescpus
      ↻ 重复节点，计数: 2

   节点 21: x is tescpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is tiympus → tiympus is tescpus
[后处理] 基于推理轨迹点亮节点，使用了 11 个前提条件:
  - 前提: x is tiympus
  - 前提: tiympus is lojmpus and pectpus
  - 前提: lojmpus is yaxspus
  - 前提: yaxspus is pozxpus and gilvpus
  - 前提: pozxpus is suljpus and dintpus
  - 前提: suljpus is xewjpus
  - 前提: xewjpus is veglpus and cuwhpus
  - 前提: veglpus is vajypus and jocfpus
  - 前提: vajypus is hukzpus
  - 前提: hukzpus is sixdpus and zufhpus
  - 前提: sixdpus is tescpus

   节点 22: tescpus is jimmpus
      ↻ 重复节点，计数: 2

   节点 23: jimmpus is pikfpus
      ↻ 重复节点，计数: 2

   节点 24: pikfpus is wivzpus and batdpus
      ↻ 重复节点，计数: 2

   节点 25: wivzpus is cixppus
      ↻ 重复节点，计数: 2

   节点 26: x is cixppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is tiympus → tiympus is cixppus
[后处理] 基于推理轨迹点亮节点，使用了 15 个前提条件:
  - 前提: x is tiympus
  - 前提: tiympus is lojmpus and pectpus
  - 前提: lojmpus is yaxspus
  - 前提: yaxspus is pozxpus and gilvpus
  - 前提: pozxpus is suljpus and dintpus
  - 前提: suljpus is xewjpus
  - 前提: xewjpus is veglpus and cuwhpus
  - 前提: veglpus is vajypus and jocfpus
  - 前提: vajypus is hukzpus
  - 前提: hukzpus is sixdpus and zufhpus
  - 前提: sixdpus is tescpus
  - 前提: tescpus is jimmpus
  - 前提: jimmpus is pikfpus
  - 前提: pikfpus is wivzpus and batdpus
  - 前提: wivzpus is cixppus
  ✓ 点亮LoG节点: sixdpus is wivzpus
[子树点亮]     └─ 点亮依赖节点: sixdpus is wivzpus and batdpus (深度6)
[子树点亮]     └─ 点亮依赖节点: sixdpus is jimmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jimmpus is wivzpus and batdpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 27: cixppus is babbpus and fapmpus
      ↻ 重复节点，计数: 2

   节点 28: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: sixdpus is babbpus (深度3)
[子树点亮]     └─ 点亮依赖节点: sixdpus is babbpus and gakdpus (深度4)
[子树点亮]     └─ 点亮依赖节点: wivzpus is babbpus and gakdpus (深度5)
[子树点亮]     └─ 点亮依赖节点: wivzpus is babbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: wivzpus is gakdpus (深度6)
[子树点亮]     └─ 点亮依赖节点: wivzpus is babbpus and fapmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: wivzpus is jahrpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jahrpus is gakdpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 8 个节点
      ✅ 验证成功 + LoG匹配

   节点 29: x is babbpus
      ↻ 重复节点，计数: 2

   节点 30: x is babbpus or baccpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus or baccpus
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 30
   - 新增节点: 12
   - 更新已存在节点: 18
   - 点亮的LoG节点: 34

🎯 推理质量统计:
   - 完美推理: 12 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 34节点, 21前提, 复杂度1-21

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 33
   - 前提节点: 21
   - 推理节点: 12
   - 幻觉节点: 0
   - 点亮LoG节点: 34

✅ 推理节点详情:
   🟢 x is tiympus (出现1次, 质量:perfect)
   🟢 x is lojmpus (出现1次, 质量:perfect)
   🟢 x is pozxpus (出现1次, 质量:perfect)
   🟢 x is suljpus (出现1次, 质量:perfect)
   🟢 x is veglpus (出现1次, 质量:perfect)
   🟢 x is vajypus (出现1次, 质量:perfect)
   🟢 x is hukzpus (出现1次, 质量:perfect)
   🟢 x is sixdpus (出现1次, 质量:perfect)
   🟢 x is tescpus (出现1次, 质量:perfect)
   🟢 x is cixppus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现2次, 质量:perfect)
   🟢 x is babbpus or baccpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - vajypus is sixdpus and zufhpus
   - x is tiympus
   - wivzpus is gakdpus
   - sixdpus is wivzpus
   - xewjpus is sixdpus
   - tiympus is pozxpus and gilvpus
   - pozxpus is suljpus
   - wivzpus is babbpus
   - x is pozxpus and gilvpus
   - x is pozxpus
   - xewjpus is veglpus
   - lojmpus is pozxpus and gilvpus
   - jimmpus is wivzpus and batdpus
   - veglpus is vajypus
   - sixdpus is jimmpus
   - x is sixdpus
   - wivzpus is babbpus and gakdpus
   - sixdpus is babbpus
   - tiympus is lojmpus
   - pozxpus is xewjpus and rodfpus
   - pozxpus is xewjpus
   - sixdpus is wivzpus and batdpus
   - wivzpus is jahrpus
   - tefgpus is tiympus
   - sixdpus is babbpus and gakdpus
   - vajypus is sixdpus
   - jahrpus is gakdpus
   - suljpus is xewjpus and rodfpus
   - xewjpus is vajypus
   - pozxpus is sixdpus
   - x is babbpus or baccpus
   - wivzpus is babbpus and fapmpus
   - x is babbpus
   - x is tefgpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus or baccpus (第7层)
   节点Coverage: 34/34 = 100.00%
   前提条件Coverage: 17/21 = 80.95%
   各推理层点亮比例:
     第1层: 14/14 = 100.00%
     第2层: 8/8 = 100.00%
     第3层: 5/5 = 100.00%
     第4层: 3/3 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/12 = 0.00%
   可推导节点: 12/12
   Strict Error Rate: 0/12 = 0.00%
   严格有效节点: 12/12

   详细分析:
     完美推理: 12 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 32/50
================================================================================
记录索引: 31
问题状态: incorrect
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_31.json
✅ 使用缓存结果:
   - 句子数: 8
   - 提取的语句数: 5
   - 初始条件数: 16

=== Statement提取完成 ===
总句子数: 8
成功提取: 8
失败提取: 0
总statements数: 5

=== 开始清洗Statement格式 ===
原始statements数: 5
清洗后statements数: 4
过滤掉的statements数: 1
清洗后的statements:
  1. [actual] x is hujbpus
  2. [planning] x is babbpus
  3. [actual] ginbpus is babbpus
  4. [planning] x is babbpus

=== 开始标准化和解析节点 ===
清洗后statements数: 4
标准化后节点数: 4
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → hujbpus (原始: x is hujbpus)
  2. [planning] x → babbpus (原始: x is babbpus)
  3. [actual] ginbpus → babbpus (原始: ginbpus is babbpus)
  4. [planning] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 26
[后处理] 加载LoG图，包含 26 个节点
  LoG节点 0: x is babbpus (规则: CE, 深度: 1)
  LoG节点 1: x is babbpus and selqpus (规则: MP, 深度: 2)
  LoG节点 2: x is cufypus (规则: MP, 深度: 3)
  LoG节点 3: cufypus is babbpus and selqpus (规则: CE, 深度: 3)
  LoG节点 4: x is qogxpus (规则: CE, 深度: 4)
  LoG节点 5: qogxpus is cufypus (规则: CE, 深度: 4)
  LoG节点 6: cufypus is babbpus and selqpus and casqpus (规则: MP, 深度: 4)
  LoG节点 7: x is qogxpus and wehfpus (规则: MP, 深度: 5)
  LoG节点 8: qogxpus is cufypus and xonnpus (规则: MP, 深度: 5)
  LoG节点 9: cufypus is xezgpus (规则: CE, 深度: 5)
  LoG节点 10: xezgpus is babbpus and selqpus and casqpus (规则: CE, 深度: 5)
  LoG节点 11: x is bewspus (规则: CE, 深度: 6)
  LoG节点 12: bewspus is qogxpus and wehfpus (规则: MP, 深度: 6)
  LoG节点 13: qogxpus is wakspus (规则: CE, 深度: 6)
  LoG节点 14: wakspus is cufypus and xonnpus (规则: CE, 深度: 6)
  LoG节点 15: cufypus is xezgpus and tabbpus (规则: MP, 深度: 6)
  LoG节点 16: xezgpus is babbpus and selqpus and casqpus and sokhpus (规则: MP, 深度: 6)
  LoG节点 17: x is bewspus and picppus (规则: MP, 深度: 7)
  LoG节点 18: bewspus is safmpus (规则: MP, 深度: 7)
  LoG节点 19: safmpus is qogxpus and wehfpus (规则: CE, 深度: 7)
  LoG节点 20: qogxpus is wakspus and vikzpus (规则: MP, 深度: 7)
  LoG节点 21: wakspus is cufypus and xonnpus and jocfpus (规则: MP, 深度: 7)
  LoG节点 22: cufypus is mutdpus (规则: CE, 深度: 7)
  LoG节点 23: mutdpus is xezgpus and tabbpus (规则: CI, 深度: 7)
  LoG节点 24: xezgpus is ginbpus (规则: MP, 深度: 7)
  LoG节点 25: ginbpus is babbpus and selqpus and casqpus and sokhpus (规则: CI, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 4
   - 初始条件数: 16
   - LoG图节点数: 26

📋 初始条件列表:
    1. safmpus is qogxpus and wehfpus and yedtpus
    2. xezgpus is weszpus
    3. ginbpus is babbpus and selqpus and casqpus
    4. mutdpus is tabbpus
    5. rudwpus is cufypus and xonnpus and jocfpus
    6. x is hujbpus
    7. cufypus is mutdpus and celnpus
    8. ginbpus is sokhpus
    9. hujbpus is bewspus and picppus
   10. weszpus is ginbpus
   11. bewspus is fujtpus
   12. wakspus is rudwpus
   13. risrpus is wakspus and vikzpus
   14. mutdpus is xezgpus
   15. qogxpus is risrpus
   16. fujtpus is safmpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 16 个前提节点

🔍 开始处理actual节点...

   节点 1: x is hujbpus
      ↻ 重复节点，计数: 2

   节点 2: ginbpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: ginbpus is babbpus and selqpus and casqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: ginbpus is babbpus and selqpus and casqpus

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 2
   - 新增节点: 1
   - 更新已存在节点: 1
   - 点亮的LoG节点: 0

🎯 推理质量统计:
   - 完美推理: 1 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 26节点, 16前提, 复杂度1-16

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 17
   - 前提节点: 16
   - 推理节点: 1
   - 幻觉节点: 0
   - 点亮LoG节点: 0

✅ 推理节点详情:
   🟢 ginbpus is babbpus (出现1次, 质量:perfect)

⚠️  未点亮任何LoG节点

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 0/7 = 0.00%
   节点Coverage: 0/26 = 0.00%
   前提条件Coverage: 1/16 = 6.25%
   各推理层点亮比例:
     第1层: 0/9 = 0.00%
     第2层: 0/6 = 0.00%
     第3层: 0/4 = 0.00%
     第4层: 0/3 = 0.00%
     第5层: 0/2 = 0.00%
     第6层: 0/1 = 0.00%
     第7层: 0/1 = 0.00%

🎯 计算Precision指标...
   Error Rate: 0/1 = 0.00%
   可推导节点: 1/1
   Strict Error Rate: 0/1 = 0.00%
   严格有效节点: 1/1

   详细分析:
     完美推理: 1 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 33/50
================================================================================
记录索引: 32
问题状态: incorrect
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_32.json
✅ 使用缓存结果:
   - 句子数: 5
   - 提取的语句数: 13
   - 初始条件数: 23

=== Statement提取完成 ===
总句子数: 5
成功提取: 5
失败提取: 0
总statements数: 13

=== 开始清洗Statement格式 ===
原始statements数: 13
清洗后statements数: 13
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 13
标准化后节点数: 13
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → didjpus (原始: x is didjpus)
  2. [actual] didjpus → wetgpus (原始: didjpus is wetgpus)
  3. [actual] milrpus → babbpus and nidwpus (原始: milrpus is babbpus and nidwpus)
  4. [actual] milrpus → sewjpus (原始: milrpus is sewjpus)
  5. [actual] milrpus → fuxfpus (原始: milrpus is fuxfpus)
  6. [actual] milrpus → miycpus (原始: milrpus is miycpus)
  7. [actual] milrpus → merdpus (原始: milrpus is merdpus)
  8. [actual] milrpus → koxfpus (原始: milrpus is koxfpus)
  9. [actual] milrpus → rudnpus (原始: milrpus is rudnpus)
  10. [actual] milrpus → nejrpus (原始: milrpus is nejrpus)
  11. [actual] milrpus → dubgpus (原始: milrpus is dubgpus)
  12. [actual] milrpus → hudqpus (原始: milrpus is hudqpus)
  13. [actual] milrpus → papkpus (原始: milrpus is papkpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 33
[后处理] 加载LoG图，包含 33 个节点
  LoG节点 0: x is babbpus (规则: CE, 深度: 1)
  LoG节点 1: x is babbpus and kexcpus (规则: MP, 深度: 2)
  LoG节点 2: x is papkpus (规则: CE, 深度: 3)
  LoG节点 3: papkpus is babbpus and kexcpus (规则: CI, 深度: 3)
  LoG节点 4: x is papkpus and zevlpus (规则: MP, 深度: 4)
  LoG节点 5: papkpus is babbpus (规则: MP, 深度: 4)
  LoG节点 6: papkpus is kexcpus (规则: CE, 深度: 4)
  LoG节点 7: x is wutkpus (规则: CE, 深度: 5)
  LoG节点 8: wutkpus is papkpus and zevlpus (规则: CI, 深度: 5)
  LoG节点 9: papkpus is miycpus (规则: MP, 深度: 5)
  LoG节点 10: miycpus is babbpus (规则: CE, 深度: 5)
  LoG节点 11: papkpus is kexcpus and fidwpus (规则: MP, 深度: 5)
  LoG节点 12: x is wutkpus and zohxpus (规则: MP, 深度: 6)
  LoG节点 13: wutkpus is papkpus (规则: CE, 深度: 6)
  LoG节点 14: wutkpus is zevlpus (规则: MP, 深度: 6)
  LoG节点 15: papkpus is rudnpus (规则: MP, 深度: 6)
  LoG节点 16: rudnpus is miycpus (规则: MP, 深度: 6)
  LoG节点 17: miycpus is babbpus and nidwpus (规则: MP, 深度: 6)
  LoG节点 18: papkpus is nuzdpus (规则: CE, 深度: 6)
  LoG节点 19: nuzdpus is kexcpus and fidwpus (规则: CE, 深度: 6)
  LoG节点 20: x is wetgpus (规则: MP, 深度: 7)
  LoG节点 21: wetgpus is wutkpus and zohxpus (规则: CE, 深度: 7)
  LoG节点 22: wutkpus is papkpus and nixnpus (规则: MP, 深度: 7)
  LoG节点 23: wutkpus is jezlpus (规则: MP, 深度: 7)
  LoG节点 24: jezlpus is zevlpus (规则: CE, 深度: 7)
  LoG节点 25: papkpus is dubgpus (规则: MP, 深度: 7)
  LoG节点 26: dubgpus is rudnpus (规则: MP, 深度: 7)
  LoG节点 27: rudnpus is merdpus (规则: MP, 深度: 7)
  LoG节点 28: merdpus is miycpus (规则: CE, 深度: 7)
  LoG节点 29: miycpus is sewjpus (规则: MP, 深度: 7)
  LoG节点 30: sewjpus is babbpus and nidwpus (规则: MP, 深度: 7)
  LoG节点 31: papkpus is nuzdpus and rothpus (规则: MP, 深度: 7)
  LoG节点 32: nuzdpus is kexcpus and fidwpus and vanbpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 13
   - 初始条件数: 23
   - LoG图节点数: 33

📋 初始条件列表:
    1. didjpus is wetgpus
    2. popjpus is nuzdpus and rothpus
    3. miycpus is fuxfpus
    4. rudnpus is koxfpus
    5. merdpus is miycpus and feqxpus
    6. wutkpus is naxzpus
    7. nuzdpus is gapcpus
    8. sewjpus is milrpus
    9. milrpus is babbpus and nidwpus
   10. x is didjpus
   11. gogrpus is jezlpus
   12. koxfpus is merdpus
   13. naxzpus is papkpus and nixnpus
   14. fuxfpus is sewjpus
   15. wutkpus is gogrpus
   16. nejrpus is rudnpus
   17. papkpus is popjpus
   18. dubgpus is nejrpus
   19. wetgpus is wutkpus and zohxpus and nihzpus
   20. papkpus is hudqpus
   21. hudqpus is dubgpus
   22. jezlpus is zevlpus and xatvpus
   23. gapcpus is kexcpus and fidwpus and vanbpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 23 个前提节点

🔍 开始处理actual节点...

   节点 1: x is didjpus
      ↻ 重复节点，计数: 2

   节点 2: didjpus is wetgpus
      ↻ 重复节点，计数: 2

   节点 3: milrpus is babbpus and nidwpus
      ↻ 重复节点，计数: 2

   节点 4: milrpus is sewjpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 5: milrpus is fuxfpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 6: milrpus is miycpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 7: milrpus is merdpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 8: milrpus is koxfpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 9: milrpus is rudnpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 10: milrpus is nejrpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 11: milrpus is dubgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 12: milrpus is hudqpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 13: milrpus is papkpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 13
   - 新增节点: 10
   - 更新已存在节点: 3
   - 点亮的LoG节点: 0

🎯 推理质量统计:
   - 完美推理: 0 (节点正确 + 路径正确)
   - 部分推理: 10 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 33节点, 23前提, 复杂度1-23

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 33
   - 前提节点: 23
   - 推理节点: 0
   - 幻觉节点: 10
   - 点亮LoG节点: 0

❌ 幻觉节点详情:
   - milrpus is sewjpus (出现1次)
   - milrpus is fuxfpus (出现1次)
   - milrpus is miycpus (出现1次)
   - milrpus is merdpus (出现1次)
   - milrpus is koxfpus (出现1次)
   - milrpus is rudnpus (出现1次)
   - milrpus is nejrpus (出现1次)
   - milrpus is dubgpus (出现1次)
   - milrpus is hudqpus (出现1次)
   - milrpus is papkpus (出现1次)

⚠️  未点亮任何LoG节点

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 0/7 = 0.00%
   节点Coverage: 0/33 = 0.00%
   前提条件Coverage: 3/23 = 13.04%
   各推理层点亮比例:
     第1层: 0/13 = 0.00%
     第2层: 0/8 = 0.00%
     第3层: 0/5 = 0.00%
     第4层: 0/3 = 0.00%
     第5层: 0/2 = 0.00%
     第6层: 0/1 = 0.00%
     第7层: 0/1 = 0.00%

🎯 计算Precision指标...
   Error Rate: 10/10 = 100.00%
   可推导节点: 0/10
   Strict Error Rate: 10/10 = 100.00%
   严格有效节点: 0/10

   详细分析:
     完美推理: 0 (0.00%)
     部分推理: 10 (100.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 34/50
================================================================================
记录索引: 33
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_33.json
✅ 使用缓存结果:
   - 句子数: 12
   - 提取的语句数: 12
   - 初始条件数: 13

=== Statement提取完成 ===
总句子数: 12
成功提取: 12
失败提取: 0
总statements数: 12

=== 开始清洗Statement格式 ===
原始statements数: 12
清洗后statements数: 12
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 12
标准化后节点数: 12
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babbpus (原始: x is babbpus)
  2. [planning] x → baccpus (原始: x is baccpus)
  3. [actual] x → somzpus (原始: x is somzpus)
  4. [actual] somzpus → wukzpus and lebwpus (原始: somzpus is wukzpus and lebwpus)
  5. [actual] wukzpus → voggpus and curwpus (原始: wukzpus is voggpus and curwpus)
  6. [actual] voggpus → yokgpus (原始: voggpus is yokgpus)
  7. [actual] yokgpus → rarjpus and fokjpus (原始: yokgpus is rarjpus and fokjpus)
  8. [actual] rarjpus → huncpus (原始: rarjpus is huncpus)
  9. [actual] huncpus → babbpus and pehwpus (原始: huncpus is babbpus and pehwpus)
  10. [actual] x → babbpus (原始: x is babbpus)
  11. [actual] x → babbpus (原始: x is babbpus)
  12. [actual] x → babbpus or baccpus (原始: x is babbpus or baccpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 21
[后处理] 加载LoG图，包含 21 个节点
  LoG节点 0: x is babbpus or baccpus (规则: DI, 深度: 1)
  LoG节点 1: x is babbpus (规则: CE, 深度: 2)
  LoG节点 2: x is babbpus and werzpus (规则: MP, 深度: 3)
  LoG节点 3: x is voggpus (规则: CE, 深度: 4)
  LoG节点 4: voggpus is babbpus and werzpus (规则: CI, 深度: 4)
  LoG节点 5: x is voggpus and sokppus (规则: MP, 深度: 5)
  LoG节点 6: voggpus is babbpus (规则: MP, 深度: 5)
  LoG节点 7: voggpus is werzpus (规则: MP, 深度: 5)
  LoG节点 8: x is wukzpus (规则: CE, 深度: 6)
  LoG节点 9: wukzpus is voggpus and sokppus (规则: CI, 深度: 6)
  LoG节点 10: voggpus is rarjpus (规则: CE, 深度: 6)
  LoG节点 11: rarjpus is babbpus (规则: CE, 深度: 6)
  LoG节点 12: voggpus is ziyqpus (规则: CE, 深度: 6)
  LoG节点 13: ziyqpus is werzpus (规则: CE, 深度: 6)
  LoG节点 14: x is wukzpus and lebwpus (规则: MP, 深度: 7)
  LoG节点 15: wukzpus is voggpus (规则: CE, 深度: 7)
  LoG节点 16: wukzpus is sokppus (规则: MP, 深度: 7)
  LoG节点 17: voggpus is rarjpus and fokjpus (规则: MP, 深度: 7)
  LoG节点 18: rarjpus is babbpus and pehwpus (规则: MP, 深度: 7)
  LoG节点 19: voggpus is ziyqpus and gaskpus (规则: MP, 深度: 7)
  LoG节点 20: ziyqpus is werzpus and fijspus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 12
   - 初始条件数: 13
   - LoG图节点数: 21

📋 初始条件列表:
    1. x is somzpus
    2. yokgpus is rarjpus and fokjpus
    3. voggpus is yokgpus
    4. wukzpus is hadzpus
    5. voggpus is kivnpus
    6. ziyqpus is punlpus
    7. punlpus is werzpus and fijspus
    8. huncpus is babbpus and pehwpus
    9. hadzpus is sokppus
   10. wukzpus is voggpus and curwpus
   11. somzpus is wukzpus and lebwpus
   12. kivnpus is ziyqpus and gaskpus
   13. rarjpus is huncpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 13 个前提节点

🔍 开始处理actual节点...

   节点 1: x is somzpus
      ↻ 重复节点，计数: 2

   节点 2: somzpus is wukzpus and lebwpus
      ↻ 重复节点，计数: 2

   节点 3: wukzpus is voggpus and curwpus
      ↻ 重复节点，计数: 2

   节点 4: voggpus is yokgpus
      ↻ 重复节点，计数: 2

   节点 5: yokgpus is rarjpus and fokjpus
      ↻ 重复节点，计数: 2

   节点 6: rarjpus is huncpus
      ↻ 重复节点，计数: 2

   节点 7: huncpus is babbpus and pehwpus
      ↻ 重复节点，计数: 2

   节点 8: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is babbpus and werzpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is voggpus (深度4)
[子树点亮]     └─ 点亮依赖节点: voggpus is babbpus and werzpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is voggpus and sokppus (深度5)
[子树点亮]     └─ 点亮依赖节点: voggpus is babbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: voggpus is werzpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is wukzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: wukzpus is voggpus and sokppus (深度6)
[子树点亮]     └─ 点亮依赖节点: voggpus is rarjpus (深度6)
[子树点亮]     └─ 点亮依赖节点: rarjpus is babbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: voggpus is ziyqpus (深度6)
[子树点亮]     └─ 点亮依赖节点: ziyqpus is werzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is wukzpus and lebwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: wukzpus is voggpus (深度7)
[子树点亮]     └─ 点亮依赖节点: wukzpus is sokppus (深度7)
[子树点亮]     └─ 点亮依赖节点: voggpus is rarjpus and fokjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: rarjpus is babbpus and pehwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: voggpus is ziyqpus and gaskpus (深度7)
[子树点亮]     └─ 点亮依赖节点: ziyqpus is werzpus and fijspus (深度7)
[后处理]   └─ 自动点亮依赖子树: 19 个节点
      ✅ 验证成功 + LoG匹配

   节点 9: x is babbpus
      ↻ 重复节点，计数: 2

   节点 10: x is babbpus or baccpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus or baccpus
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 10
   - 新增节点: 2
   - 更新已存在节点: 8
   - 点亮的LoG节点: 21

🎯 推理质量统计:
   - 完美推理: 2 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 21节点, 13前提, 复杂度1-13

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 15
   - 前提节点: 13
   - 推理节点: 2
   - 幻觉节点: 0
   - 点亮LoG节点: 21

✅ 推理节点详情:
   🟢 x is babbpus (出现2次, 质量:perfect)
   🟢 x is babbpus or baccpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - voggpus is babbpus
   - x is wukzpus and lebwpus
   - voggpus is rarjpus and fokjpus
   - voggpus is babbpus and werzpus
   - ziyqpus is werzpus
   - voggpus is werzpus
   - rarjpus is babbpus
   - voggpus is rarjpus
   - x is voggpus and sokppus
   - ziyqpus is werzpus and fijspus
   - voggpus is ziyqpus and gaskpus
   - rarjpus is babbpus and pehwpus
   - x is babbpus and werzpus
   - x is wukzpus
   - wukzpus is voggpus
   - wukzpus is voggpus and sokppus
   - wukzpus is sokppus
   - x is babbpus or baccpus
   - x is babbpus
   - voggpus is ziyqpus
   - x is voggpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus or baccpus (第7层)
   节点Coverage: 21/21 = 100.00%
   前提条件Coverage: 7/13 = 53.85%
   各推理层点亮比例:
     第1层: 7/7 = 100.00%
     第2层: 6/6 = 100.00%
     第3层: 3/3 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/2 = 0.00%
   可推导节点: 2/2
   Strict Error Rate: 0/2 = 0.00%
   严格有效节点: 2/2

   详细分析:
     完美推理: 2 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 35/50
================================================================================
记录索引: 34
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_34.json
✅ 使用缓存结果:
   - 句子数: 8
   - 提取的语句数: 20
   - 初始条件数: 15

=== Statement提取完成 ===
总句子数: 8
成功提取: 8
失败提取: 0
总statements数: 20

=== 开始清洗Statement格式 ===
原始statements数: 20
清洗后statements数: 20
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 20
标准化后节点数: 20
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → merbpus (原始: x is merbpus)
  2. [actual] x → baccpus (原始: x is baccpus)
  3. [actual] x → merbpus (原始: x is merbpus)
  4. [actual] merbpus → vamfpus (原始: merbpus is vamfpus)
  5. [actual] vamfpus → bewvpus (原始: vamfpus is bewvpus)
  6. [actual] bewvpus → nakbpus (原始: bewvpus is nakbpus)
  7. [actual] nakbpus → pesypus (原始: nakbpus is pesypus)
  8. [actual] pesypus → qejwpus (原始: pesypus is qejwpus)
  9. [actual] qejwpus → yodzpus (原始: qejwpus is yodzpus)
  10. [actual] yodzpus → duywpus (原始: yodzpus is duywpus)
  11. [actual] duywpus → piqlpus (原始: duywpus is piqlpus)
  12. [actual] piqlpus → rulppus (原始: piqlpus is rulppus)
  13. [actual] rulppus → wogxpus (原始: rulppus is wogxpus)
  14. [actual] wogxpus → nangpus (原始: wogxpus is nangpus)
  15. [actual] nangpus → baccpus (原始: nangpus is baccpus)
  16. [actual] x → baccpus (原始: x is baccpus)
  17. [planning] x → babbpus (原始: x is babbpus)
  18. [planning] x → baccpus (原始: x is baccpus)
  19. [actual] x → baccpus (原始: x is baccpus)
  20. [planning] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 26
[后处理] 加载LoG图，包含 26 个节点
  LoG节点 0: x is babbpus or baccpus (规则: DI, 深度: 1)
  LoG节点 1: x is baccpus (规则: CE, 深度: 2)
  LoG节点 2: x is baccpus and wewspus (规则: MP, 深度: 3)
  LoG节点 3: x is duywpus (规则: MP, 深度: 4)
  LoG节点 4: duywpus is baccpus and wewspus (规则: MP, 深度: 4)
  LoG节点 5: x is nakbpus (规则: MP, 深度: 5)
  LoG节点 6: nakbpus is duywpus (规则: MP, 深度: 5)
  LoG节点 7: duywpus is rulppus (规则: CE, 深度: 5)
  LoG节点 8: rulppus is baccpus and wewspus (规则: CI, 深度: 5)
  LoG节点 9: x is vamfpus (规则: CE, 深度: 6)
  LoG节点 10: vamfpus is nakbpus (规则: CE, 深度: 6)
  LoG节点 11: nakbpus is qejwpus (规则: MP, 深度: 6)
  LoG节点 12: qejwpus is duywpus (规则: CE, 深度: 6)
  LoG节点 13: duywpus is rulppus and toqzpus (规则: MP, 深度: 6)
  LoG节点 14: rulppus is baccpus (规则: MP, 深度: 6)
  LoG节点 15: rulppus is wewspus (规则: CE, 深度: 6)
  LoG节点 16: x is vamfpus and gibppus (规则: MP, 深度: 7)
  LoG节点 17: vamfpus is nakbpus and saylpus (规则: MP, 深度: 7)
  LoG节点 18: nakbpus is pesypus (规则: CE, 深度: 7)
  LoG节点 19: pesypus is qejwpus (规则: CE, 深度: 7)
  LoG节点 20: qejwpus is duywpus and wevzpus (规则: MP, 深度: 7)
  LoG节点 21: duywpus is piqlpus (规则: CE, 深度: 7)
  LoG节点 22: piqlpus is rulppus and toqzpus (规则: CE, 深度: 7)
  LoG节点 23: rulppus is nangpus (规则: MP, 深度: 7)
  LoG节点 24: nangpus is baccpus (规则: CE, 深度: 7)
  LoG节点 25: rulppus is wewspus and huvxpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 20
   - 初始条件数: 15
   - LoG图节点数: 26

📋 初始条件列表:
    1. lojzpus is wewspus and huvxpus
    2. duywpus is piqlpus and qitgpus
    3. piqlpus is rulppus and toqzpus and locgpus
    4. bewvpus is nakbpus and saylpus
    5. x is merbpus
    6. vamfpus is bewvpus
    7. rulppus is wogxpus
    8. nangpus is baccpus and huzqpus
    9. merbpus is vamfpus and gibppus
   10. yodzpus is duywpus and wevzpus
   11. wogxpus is nangpus
   12. pesypus is qejwpus and saqwpus
   13. rulppus is lojzpus
   14. nakbpus is pesypus and dugdpus
   15. qejwpus is yodzpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 15 个前提节点

🔍 开始处理actual节点...

   节点 1: x is merbpus
      ↻ 重复节点，计数: 2

   节点 2: x is baccpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is baccpus
[子树点亮]     └─ 点亮依赖节点: x is baccpus and wewspus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is duywpus (深度4)
[子树点亮]     └─ 点亮依赖节点: duywpus is baccpus and wewspus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is nakbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: nakbpus is duywpus (深度5)
[子树点亮]     └─ 点亮依赖节点: duywpus is rulppus (深度5)
[子树点亮]     └─ 点亮依赖节点: rulppus is baccpus and wewspus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is vamfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: vamfpus is nakbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: nakbpus is qejwpus (深度6)
[子树点亮]     └─ 点亮依赖节点: qejwpus is duywpus (深度6)
[子树点亮]     └─ 点亮依赖节点: duywpus is rulppus and toqzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: rulppus is baccpus (深度6)
[子树点亮]     └─ 点亮依赖节点: rulppus is wewspus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is vamfpus and gibppus (深度7)
[子树点亮]     └─ 点亮依赖节点: vamfpus is nakbpus and saylpus (深度7)
[子树点亮]     └─ 点亮依赖节点: nakbpus is pesypus (深度7)
[子树点亮]     └─ 点亮依赖节点: pesypus is qejwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qejwpus is duywpus and wevzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: duywpus is piqlpus (深度7)
[子树点亮]     └─ 点亮依赖节点: piqlpus is rulppus and toqzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: rulppus is nangpus (深度7)
[子树点亮]     └─ 点亮依赖节点: nangpus is baccpus (深度7)
[子树点亮]     └─ 点亮依赖节点: rulppus is wewspus and huvxpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 24 个节点
      ✅ 验证成功 + LoG匹配

   节点 3: x is merbpus
      ↻ 重复节点，计数: 3

   节点 4: merbpus is vamfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: merbpus is vamfpus and gibppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: merbpus is vamfpus and gibppus

   节点 5: vamfpus is bewvpus
      ↻ 重复节点，计数: 2

   节点 6: bewvpus is nakbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: bewvpus is nakbpus and saylpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: bewvpus is nakbpus and saylpus

   节点 7: nakbpus is pesypus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 8: pesypus is qejwpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 9: qejwpus is yodzpus
      ↻ 重复节点，计数: 2

   节点 10: yodzpus is duywpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yodzpus is duywpus and wevzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yodzpus is duywpus and wevzpus

   节点 11: duywpus is piqlpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 12: piqlpus is rulppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: piqlpus is rulppus and toqzpus and locgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: piqlpus is rulppus and toqzpus and locgpus

   节点 13: rulppus is wogxpus
      ↻ 重复节点，计数: 2

   节点 14: wogxpus is nangpus
      ↻ 重复节点，计数: 2

   节点 15: nangpus is baccpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 16: x is baccpus
      ↻ 重复节点，计数: 2

   节点 17: x is baccpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 17
   - 新增节点: 9
   - 更新已存在节点: 8
   - 点亮的LoG节点: 25

🎯 推理质量统计:
   - 完美推理: 9 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 26节点, 15前提, 复杂度1-15

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 24
   - 前提节点: 15
   - 推理节点: 9
   - 幻觉节点: 0
   - 点亮LoG节点: 25

✅ 推理节点详情:
   🟢 x is baccpus (出现3次, 质量:perfect)
   🟢 merbpus is vamfpus (出现1次, 质量:perfect)
   🟢 bewvpus is nakbpus (出现1次, 质量:perfect)
   🟢 nakbpus is pesypus (出现1次, 质量:perfect)
   🟢 pesypus is qejwpus (出现1次, 质量:perfect)
   🟢 yodzpus is duywpus (出现1次, 质量:perfect)
   🟢 duywpus is piqlpus (出现1次, 质量:perfect)
   🟢 piqlpus is rulppus (出现1次, 质量:perfect)
   🟢 nangpus is baccpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - rulppus is baccpus and wewspus
   - nakbpus is qejwpus
   - qejwpus is duywpus
   - rulppus is baccpus
   - x is baccpus and wewspus
   - vamfpus is nakbpus and saylpus
   - duywpus is baccpus and wewspus
   - duywpus is piqlpus
   - qejwpus is duywpus and wevzpus
   - x is vamfpus
   - vamfpus is nakbpus
   - x is vamfpus and gibppus
   - nakbpus is pesypus
   - rulppus is nangpus
   - nangpus is baccpus
   - duywpus is rulppus
   - x is baccpus
   - piqlpus is rulppus and toqzpus
   - duywpus is rulppus and toqzpus
   - x is duywpus
   - nakbpus is duywpus
   - rulppus is wewspus
   - rulppus is wewspus and huvxpus
   - x is nakbpus
   - pesypus is qejwpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 6/7 = 85.71%
   最深点亮节点: x is baccpus (第6层)
   节点Coverage: 25/26 = 96.15%
   前提条件Coverage: 5/15 = 33.33%
   各推理层点亮比例:
     第1层: 10/10 = 100.00%
     第2层: 7/7 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 0/1 = 0.00%

🎯 计算Precision指标...
   Error Rate: 0/9 = 0.00%
   可推导节点: 9/9
   Strict Error Rate: 0/9 = 0.00%
   严格有效节点: 9/9

   详细分析:
     完美推理: 9 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 36/50
================================================================================
记录索引: 35
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_35.json
✅ 使用缓存结果:
   - 句子数: 36
   - 提取的语句数: 43
   - 初始条件数: 36

=== Statement提取完成 ===
总句子数: 36
成功提取: 36
失败提取: 0
总statements数: 43

=== 开始清洗Statement格式 ===
原始statements数: 43
清洗后statements数: 43
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 43
标准化后节点数: 43
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babbpus (原始: x is babbpus)
  2. [planning] x → baccpus (原始: x is baccpus)
  3. [planning] x → bachpus (原始: x is bachpus)
  4. [actual] x → vavspus and pavlpus (原始: x is vavspus and pavlpus)
  5. [actual] vavspus → jumqpus (原始: vavspus is jumqpus)
  6. [actual] jumqpus → milcpus (原始: jumqpus is milcpus)
  7. [actual] milcpus → lusypus (原始: milcpus is lusypus)
  8. [actual] lusypus → pixxpus (原始: lusypus is pixxpus)
  9. [actual] pixxpus → ceflpus (原始: pixxpus is ceflpus)
  10. [actual] ceflpus → taxspus (原始: ceflpus is taxspus)
  11. [actual] taxspus → paxfpus (原始: taxspus is paxfpus)
  12. [actual] paxfpus → diclpus (原始: paxfpus is diclpus)
  13. [actual] diclpus → yeyvpus (原始: diclpus is yeyvpus)
  14. [actual] yeyvpus → piklpus (原始: yeyvpus is piklpus)
  15. [actual] piklpus → woxwpus (原始: piklpus is woxwpus)
  16. [actual] woxwpus → mecfpus (原始: woxwpus is mecfpus)
  17. [actual] mecfpus → raqfpus (原始: mecfpus is raqfpus)
  18. [actual] raqfpus → nimtpus (原始: raqfpus is nimtpus)
  19. [actual] nimtpus → farvpus (原始: nimtpus is farvpus)
  20. [actual] farvpus → vurlpus (原始: farvpus is vurlpus)
  21. [actual] vurlpus → colypus (原始: vurlpus is colypus)
  22. [actual] colypus → vahxpus (原始: colypus is vahxpus)
  23. [actual] vahxpus → kortpus (原始: vahxpus is kortpus)
  24. [actual] kortpus → toytpus (原始: kortpus is toytpus)
  25. [actual] toytpus → zusfpus (原始: toytpus is zusfpus)
  26. [actual] zusfpus → laqqpus (原始: zusfpus is laqqpus)
  27. [actual] laqqpus → xacdpus (原始: laqqpus is xacdpus)
  28. [actual] xacdpus → qivnpus (原始: xacdpus is qivnpus)
  29. [actual] x → qivnpus (原始: x is qivnpus)
  30. [actual] qivnpus → mizzpus (原始: qivnpus is mizzpus)
  31. [actual] mizzpus → babbpus and rebzpus (原始: mizzpus is babbpus and rebzpus)
  32. [actual] qivnpus → babbpus (原始: qivnpus is babbpus)
  33. [actual] qivnpus → doxcpus (原始: qivnpus is doxcpus)
  34. [actual] doxcpus → baccpus and tawcpus (原始: doxcpus is baccpus and tawcpus)
  35. [actual] qivnpus → baccpus (原始: qivnpus is baccpus)
  36. [actual] qivnpus → lumppus (原始: qivnpus is lumppus)
  37. [actual] lumppus → jopkpus (原始: lumppus is jopkpus)
  38. [actual] jopkpus → bachpus and nutmpus (原始: jopkpus is bachpus and nutmpus)
  39. [actual] qivnpus → bachpus (原始: qivnpus is bachpus)
  40. [actual] x → qivnpus (原始: x is qivnpus)
  41. [actual] x → babbpus (原始: x is babbpus)
  42. [actual] x → baccpus (原始: x is baccpus)
  43. [actual] x → bachpus (原始: x is bachpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 63
[后处理] 加载LoG图，包含 63 个节点
  LoG节点 0: x is babbpus and baccpus and bachpus (规则: MP, 深度: 1)
  LoG节点 1: x is farvpus (规则: MP, 深度: 2)
  LoG节点 2: farvpus is babbpus and baccpus and bachpus (规则: CE, 深度: 2)
  LoG节点 3: x is paxfpus (规则: MP, 深度: 3)
  LoG节点 4: paxfpus is farvpus (规则: MP, 深度: 3)
  LoG节点 5: farvpus is babbpus and baccpus and bachpus and kevjpus (规则: MP, 深度: 3)
  LoG节点 6: x is lusypus (规则: MP, 深度: 4)
  LoG节点 7: lusypus is paxfpus (规则: CE, 深度: 4)
  LoG节点 8: paxfpus is woxwpus (规则: CE, 深度: 4)
  LoG节点 9: woxwpus is farvpus (规则: CE, 深度: 4)
  LoG节点 10: farvpus is toytpus (规则: MP, 深度: 4)
  LoG节点 11: toytpus is babbpus and baccpus and bachpus and kevjpus (规则: MP, 深度: 4)
  LoG节点 12: x is jumqpus (规则: CE, 深度: 5)
  LoG节点 13: jumqpus is lusypus (规则: CE, 深度: 5)
  LoG节点 14: lusypus is paxfpus and wafdpus (规则: MP, 深度: 5)
  LoG节点 15: paxfpus is woxwpus and leggpus (规则: MP, 深度: 5)
  LoG节点 16: woxwpus is farvpus and juyqpus (规则: MP, 深度: 5)
  LoG节点 17: farvpus is vahxpus (规则: CE, 深度: 5)
  LoG节点 18: vahxpus is toytpus (规则: CE, 深度: 5)
  LoG节点 19: toytpus is qivnpus (规则: MP, 深度: 5)
  LoG节点 20: qivnpus is babbpus and baccpus and bachpus and kevjpus (规则: CI, 深度: 5)
  LoG节点 21: x is jumqpus and jukhpus (规则: MP, 深度: 6)
  LoG节点 22: jumqpus is lusypus and daqfpus (规则: MP, 深度: 6)
  LoG节点 23: lusypus is ceflpus (规则: MP, 深度: 6)
  LoG节点 24: ceflpus is paxfpus and wafdpus (规则: CE, 深度: 6)
  LoG节点 25: paxfpus is yeyvpus (规则: MP, 深度: 6)
  LoG节点 26: yeyvpus is woxwpus and leggpus (规则: CI, 深度: 6)
  LoG节点 27: woxwpus is raqfpus (规则: CE, 深度: 6)
  LoG节点 28: raqfpus is farvpus and juyqpus (规则: CE, 深度: 6)
  LoG节点 29: farvpus is vahxpus and lebnpus (规则: MP, 深度: 6)
  LoG节点 30: vahxpus is toytpus and buqwpus (规则: MP, 深度: 6)
  LoG节点 31: toytpus is laqqpus (规则: CE, 深度: 6)
  LoG节点 32: laqqpus is qivnpus (规则: MP, 深度: 6)
  LoG节点 33: qivnpus is babbpus (规则: MP, 深度: 6)
  LoG节点 34: qivnpus is baccpus (规则: CE, 深度: 6)
  LoG节点 35: qivnpus is bachpus (规则: MP, 深度: 6)
  LoG节点 36: qivnpus is kevjpus (规则: CE, 深度: 6)
  LoG节点 37: x is vavspus (规则: CE, 深度: 7)
  LoG节点 38: vavspus is jumqpus and jukhpus (规则: CI, 深度: 7)
  LoG节点 39: jumqpus is milcpus (规则: CE, 深度: 7)
  LoG节点 40: milcpus is lusypus and daqfpus (规则: CE, 深度: 7)
  LoG节点 41: lusypus is pixxpus (规则: CE, 深度: 7)
  LoG节点 42: pixxpus is ceflpus (规则: CE, 深度: 7)
  LoG节点 43: ceflpus is paxfpus and wafdpus and mopxpus (规则: MP, 深度: 7)
  LoG节点 44: paxfpus is diclpus (规则: CE, 深度: 7)
  LoG节点 45: diclpus is yeyvpus (规则: CE, 深度: 7)
  LoG节点 46: yeyvpus is woxwpus (规则: MP, 深度: 7)
  LoG节点 47: yeyvpus is leggpus (规则: CE, 深度: 7)
  LoG节点 48: woxwpus is raqfpus and mavwpus (规则: MP, 深度: 7)
  LoG节点 49: raqfpus is farvpus and juyqpus and kolmpus (规则: MP, 深度: 7)
  LoG节点 50: farvpus is colypus (规则: MP, 深度: 7)
  LoG节点 51: colypus is vahxpus and lebnpus (规则: CE, 深度: 7)
  LoG节点 52: vahxpus is kortpus (规则: CE, 深度: 7)
  LoG节点 53: kortpus is toytpus and buqwpus (规则: CE, 深度: 7)
  LoG节点 54: toytpus is laqqpus and yoljpus (规则: MP, 深度: 7)
  LoG节点 55: laqqpus is xacdpus (规则: CE, 深度: 7)
  LoG节点 56: xacdpus is qivnpus (规则: CE, 深度: 7)
  LoG节点 57: qivnpus is mizzpus (规则: CE, 深度: 7)
  LoG节点 58: mizzpus is babbpus (规则: CE, 深度: 7)
  LoG节点 59: qivnpus is baccpus and tawcpus (规则: MP, 深度: 7)
  LoG节点 60: qivnpus is jopkpus (规则: MP, 深度: 7)
  LoG节点 61: jopkpus is bachpus (规则: CE, 深度: 7)
  LoG节点 62: qivnpus is kevjpus and rorfpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 43
   - 初始条件数: 36
   - LoG图节点数: 63

📋 初始条件列表:
    1. farvpus is vurlpus
    2. lusypus is pixxpus and cuphpus
    3. doxcpus is baccpus and tawcpus
    4. ceflpus is taxspus
    5. vavspus is jumqpus
    6. nimtpus is farvpus and juyqpus and kolmpus
    7. milcpus is lusypus and daqfpus and qumgpus
    8. vavspus is jukhpus
    9. jopkpus is bachpus and nutmpus
   10. paxfpus is diclpus and dobdpus
   11. woxwpus is mecfpus
   12. qivnpus is doxcpus
   13. vurlpus is colypus
   14. diclpus is yeyvpus and kelspus
   15. kortpus is toytpus and buqwpus and yiwjpus
   16. mizzpus is babbpus and rebzpus
   17. pixxpus is ceflpus and lamxpus
   18. tajspus is kevjpus and rorfpus
   19. piklpus is woxwpus
   20. laqqpus is xacdpus and metppus
   21. lumppus is jopkpus
   22. qivnpus is lumppus
   23. x is vavspus and pavlpus
   24. qivnpus is mizzpus and yeyfpus
   25. vahxpus is kortpus and saknpus
   26. yeyvpus is piklpus
   27. mecfpus is raqfpus and mavwpus
   28. colypus is vahxpus and lebnpus and torkpus
   29. xacdpus is qivnpus and magwpus
   30. raqfpus is nimtpus
   31. toytpus is zusfpus
   32. jumqpus is milcpus and fakhpus
   33. zusfpus is laqqpus and yoljpus
   34. yeyvpus is leggpus and kocgpus
   35. taxspus is paxfpus and wafdpus and mopxpus
   36. qivnpus is tajspus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 36 个前提节点

🔍 开始处理actual节点...

   节点 1: x is vavspus and pavlpus
      ↻ 重复节点，计数: 2

   节点 2: vavspus is jumqpus
      ↻ 重复节点，计数: 2

   节点 3: jumqpus is milcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: jumqpus is milcpus
      ✅ 验证成功 + LoG匹配

   节点 4: milcpus is lusypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: milcpus is lusypus and daqfpus and qumgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: milcpus is lusypus and daqfpus and qumgpus
  ✓ 点亮LoG节点: milcpus is lusypus and daqfpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 5: lusypus is pixxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: lusypus is pixxpus
      ✅ 验证成功 + LoG匹配

   节点 6: pixxpus is ceflpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: pixxpus is ceflpus
      ✅ 验证成功 + LoG匹配

   节点 7: ceflpus is taxspus
      ↻ 重复节点，计数: 2

   节点 8: taxspus is paxfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: taxspus is paxfpus and wafdpus and mopxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: taxspus is paxfpus and wafdpus and mopxpus

   节点 9: paxfpus is diclpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: paxfpus is diclpus
      ✅ 验证成功 + LoG匹配

   节点 10: diclpus is yeyvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: diclpus is yeyvpus
      ✅ 验证成功 + LoG匹配

   节点 11: yeyvpus is piklpus
      ↻ 重复节点，计数: 2

   节点 12: piklpus is woxwpus
      ↻ 重复节点，计数: 2

   节点 13: woxwpus is mecfpus
      ↻ 重复节点，计数: 2

   节点 14: mecfpus is raqfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: mecfpus is raqfpus and mavwpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: mecfpus is raqfpus and mavwpus

   节点 15: raqfpus is nimtpus
      ↻ 重复节点，计数: 2

   节点 16: nimtpus is farvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: nimtpus is farvpus and juyqpus and kolmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: nimtpus is farvpus and juyqpus and kolmpus

   节点 17: farvpus is vurlpus
      ↻ 重复节点，计数: 2

   节点 18: vurlpus is colypus
      ↻ 重复节点，计数: 2

   节点 19: colypus is vahxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: colypus is vahxpus and lebnpus and torkpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: colypus is vahxpus and lebnpus and torkpus
  ✓ 点亮LoG节点: colypus is vahxpus and lebnpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 20: vahxpus is kortpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: vahxpus is kortpus
      ✅ 验证成功 + LoG匹配

   节点 21: kortpus is toytpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kortpus is toytpus and buqwpus and yiwjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kortpus is toytpus and buqwpus and yiwjpus
  ✓ 点亮LoG节点: kortpus is toytpus and buqwpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 22: toytpus is zusfpus
      ↻ 重复节点，计数: 2

   节点 23: zusfpus is laqqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zusfpus is laqqpus and yoljpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zusfpus is laqqpus and yoljpus

   节点 24: laqqpus is xacdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: laqqpus is xacdpus
      ✅ 验证成功 + LoG匹配

   节点 25: xacdpus is qivnpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: xacdpus is qivnpus
      ✅ 验证成功 + LoG匹配

   节点 26: x is qivnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP+CE
      📋 推理路径: MP+CE规则: x is vavspus → vavspus is qivnpus
[后处理] 基于推理轨迹点亮节点，使用了 25 个前提条件:
  - 前提: x is vavspus and pavlpus
  - 前提: vavspus is jumqpus
  - 前提: jumqpus is milcpus
  - 前提: milcpus is lusypus
  - 前提: lusypus is pixxpus
  - 前提: pixxpus is ceflpus
  - 前提: ceflpus is taxspus
  - 前提: taxspus is paxfpus
  - 前提: paxfpus is diclpus
  - 前提: diclpus is yeyvpus
  - 前提: yeyvpus is piklpus
  - 前提: piklpus is woxwpus
  - 前提: woxwpus is mecfpus
  - 前提: mecfpus is raqfpus
  - 前提: raqfpus is nimtpus
  - 前提: nimtpus is farvpus
  - 前提: farvpus is vurlpus
  - 前提: vurlpus is colypus
  - 前提: colypus is vahxpus
  - 前提: vahxpus is kortpus
  - 前提: kortpus is toytpus
  - 前提: toytpus is zusfpus
  - 前提: zusfpus is laqqpus
  - 前提: laqqpus is xacdpus
  - 前提: xacdpus is qivnpus
  ✓ 点亮LoG节点: x is farvpus
[子树点亮]     └─ 点亮依赖节点: x is paxfpus (深度3)
[子树点亮]     └─ 点亮依赖节点: paxfpus is farvpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is lusypus (深度4)
[子树点亮]     └─ 点亮依赖节点: lusypus is paxfpus (深度4)
[子树点亮]     └─ 点亮依赖节点: paxfpus is woxwpus (深度4)
[子树点亮]     └─ 点亮依赖节点: woxwpus is farvpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is jumqpus (深度5)
[子树点亮]     └─ 点亮依赖节点: jumqpus is lusypus (深度5)
[子树点亮]     └─ 点亮依赖节点: lusypus is paxfpus and wafdpus (深度5)
[子树点亮]     └─ 点亮依赖节点: paxfpus is woxwpus and leggpus (深度5)
[子树点亮]     └─ 点亮依赖节点: woxwpus is farvpus and juyqpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is jumqpus and jukhpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jumqpus is lusypus and daqfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: lusypus is ceflpus (深度6)
[子树点亮]     └─ 点亮依赖节点: ceflpus is paxfpus and wafdpus (深度6)
[子树点亮]     └─ 点亮依赖节点: paxfpus is yeyvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: yeyvpus is woxwpus and leggpus (深度6)
[子树点亮]     └─ 点亮依赖节点: woxwpus is raqfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: raqfpus is farvpus and juyqpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is vavspus (深度7)
[子树点亮]     └─ 点亮依赖节点: vavspus is jumqpus and jukhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: ceflpus is paxfpus and wafdpus and mopxpus (深度7)
[子树点亮]     └─ 点亮依赖节点: yeyvpus is woxwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: yeyvpus is leggpus (深度7)
[子树点亮]     └─ 点亮依赖节点: woxwpus is raqfpus and mavwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: raqfpus is farvpus and juyqpus and kolmpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 26 个节点
  ✓ 点亮LoG节点: farvpus is toytpus
[子树点亮]     └─ 点亮依赖节点: farvpus is vahxpus (深度5)
[子树点亮]     └─ 点亮依赖节点: vahxpus is toytpus (深度5)
[子树点亮]     └─ 点亮依赖节点: farvpus is vahxpus and lebnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: vahxpus is toytpus and buqwpus (深度6)
[子树点亮]     └─ 点亮依赖节点: farvpus is colypus (深度7)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
  ✓ 点亮LoG节点: toytpus is qivnpus
[子树点亮]     └─ 点亮依赖节点: toytpus is laqqpus (深度6)
[子树点亮]     └─ 点亮依赖节点: laqqpus is qivnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: toytpus is laqqpus and yoljpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
[后处理] 通过推理轨迹额外点亮了 3 个LoG节点

   节点 27: qivnpus is mizzpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: qivnpus is mizzpus
      ✅ 验证成功 + LoG匹配

   节点 28: mizzpus is babbpus and rebzpus
      ↻ 重复节点，计数: 2

   节点 29: qivnpus is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: qivnpus is babbpus
[子树点亮]     └─ 点亮依赖节点: mizzpus is babbpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 30: qivnpus is doxcpus
      ↻ 重复节点，计数: 2

   节点 31: doxcpus is baccpus and tawcpus
      ↻ 重复节点，计数: 2

   节点 32: qivnpus is baccpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: qivnpus is baccpus
[子树点亮]     └─ 点亮依赖节点: qivnpus is baccpus and tawcpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 33: qivnpus is lumppus
      ↻ 重复节点，计数: 2

   节点 34: lumppus is jopkpus
      ↻ 重复节点，计数: 2

   节点 35: jopkpus is bachpus and nutmpus
      ↻ 重复节点，计数: 2

   节点 36: qivnpus is bachpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: qivnpus is bachpus
[子树点亮]     └─ 点亮依赖节点: qivnpus is jopkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jopkpus is bachpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 37: x is qivnpus
      ↻ 重复节点，计数: 2

   节点 38: x is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qivnpus → qivnpus is babbpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is qivnpus
  - 前提: qivnpus is babbpus

   节点 39: x is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qivnpus → qivnpus is baccpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is qivnpus
  - 前提: qivnpus is baccpus

   节点 40: x is bachpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qivnpus → qivnpus is bachpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is qivnpus
  - 前提: qivnpus is bachpus

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 40
   - 新增节点: 23
   - 更新已存在节点: 17
   - 点亮的LoG节点: 56

🎯 推理质量统计:
   - 完美推理: 23 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 63节点, 36前提, 复杂度1-36

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 59
   - 前提节点: 36
   - 推理节点: 23
   - 幻觉节点: 0
   - 点亮LoG节点: 56

✅ 推理节点详情:
   🟢 jumqpus is milcpus (出现1次, 质量:perfect)
   🟢 milcpus is lusypus (出现1次, 质量:perfect)
   🟢 lusypus is pixxpus (出现1次, 质量:perfect)
   🟢 pixxpus is ceflpus (出现1次, 质量:perfect)
   🟢 taxspus is paxfpus (出现1次, 质量:perfect)
   🟢 paxfpus is diclpus (出现1次, 质量:perfect)
   🟢 diclpus is yeyvpus (出现1次, 质量:perfect)
   🟢 mecfpus is raqfpus (出现1次, 质量:perfect)
   🟢 nimtpus is farvpus (出现1次, 质量:perfect)
   🟢 colypus is vahxpus (出现1次, 质量:perfect)
   🟢 vahxpus is kortpus (出现1次, 质量:perfect)
   🟢 kortpus is toytpus (出现1次, 质量:perfect)
   🟢 zusfpus is laqqpus (出现1次, 质量:perfect)
   🟢 laqqpus is xacdpus (出现1次, 质量:perfect)
   🟢 xacdpus is qivnpus (出现1次, 质量:perfect)
   🟢 x is qivnpus (出现2次, 质量:perfect)
   🟢 qivnpus is mizzpus (出现1次, 质量:perfect)
   🟢 qivnpus is babbpus (出现1次, 质量:perfect)
   🟢 qivnpus is baccpus (出现1次, 质量:perfect)
   🟢 qivnpus is bachpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现1次, 质量:perfect)
   🟢 x is baccpus (出现1次, 质量:perfect)
   🟢 x is bachpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - ceflpus is paxfpus and wafdpus
   - laqqpus is qivnpus
   - qivnpus is baccpus and tawcpus
   - yeyvpus is woxwpus and leggpus
   - ceflpus is paxfpus and wafdpus and mopxpus
   - farvpus is vahxpus and lebnpus
   - farvpus is colypus
   - jopkpus is bachpus
   - lusypus is paxfpus
   - lusypus is ceflpus
   - mizzpus is babbpus
   - qivnpus is jopkpus
   - woxwpus is raqfpus and mavwpus
   - toytpus is laqqpus
   - qivnpus is baccpus
   - vavspus is jumqpus and jukhpus
   - pixxpus is ceflpus
   - x is paxfpus
   - farvpus is toytpus
   - x is jumqpus and jukhpus
   - qivnpus is mizzpus
   - raqfpus is farvpus and juyqpus and kolmpus
   - paxfpus is farvpus
   - yeyvpus is leggpus
   - woxwpus is farvpus
   - x is vavspus
   - jumqpus is lusypus
   - paxfpus is woxwpus and leggpus
   - xacdpus is qivnpus
   - vahxpus is toytpus and buqwpus
   - qivnpus is babbpus
   - x is jumqpus
   - milcpus is lusypus and daqfpus
   - paxfpus is yeyvpus
   - paxfpus is woxwpus
   - qivnpus is bachpus
   - woxwpus is farvpus and juyqpus
   - paxfpus is diclpus
   - colypus is vahxpus and lebnpus
   - lusypus is pixxpus
   - lusypus is paxfpus and wafdpus
   - toytpus is qivnpus
   - toytpus is laqqpus and yoljpus
   - yeyvpus is woxwpus
   - diclpus is yeyvpus
   - laqqpus is xacdpus
   - jumqpus is lusypus and daqfpus
   - farvpus is vahxpus
   - vahxpus is toytpus
   - raqfpus is farvpus and juyqpus
   - kortpus is toytpus and buqwpus
   - x is lusypus
   - jumqpus is milcpus
   - vahxpus is kortpus
   - woxwpus is raqfpus
   - x is farvpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 6/7 = 85.71%
   最深点亮节点: x is farvpus (第6层)
   节点Coverage: 56/63 = 88.89%
   前提条件Coverage: 16/36 = 44.44%
   各推理层点亮比例:
     第1层: 25/26 = 96.15%
     第2层: 15/16 = 93.75%
     第3层: 8/9 = 88.89%
     第4层: 5/6 = 83.33%
     第5层: 2/3 = 66.67%
     第6层: 1/2 = 50.00%
     第7层: 0/1 = 0.00%

🎯 计算Precision指标...
   Error Rate: 0/23 = 0.00%
   可推导节点: 23/23
   Strict Error Rate: 0/23 = 0.00%
   严格有效节点: 23/23

   详细分析:
     完美推理: 23 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 37/50
================================================================================
记录索引: 36
问题状态: incorrect
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_36.json
✅ 使用缓存结果:
   - 句子数: 8
   - 提取的语句数: 24
   - 初始条件数: 26

=== Statement提取完成 ===
总句子数: 8
成功提取: 8
失败提取: 0
总statements数: 24

=== 开始清洗Statement格式 ===
原始statements数: 24
清洗后statements数: 24
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 24
标准化后节点数: 23
过滤掉的无效实体数: 1
标准化后的节点:
  1. [actual] yeqypus → deghpus (原始: yeqypus is deghpus)
  2. [actual] deghpus → babbpus and gulkpus and bitzpus (原始: deghpus is babbpus and gulkpus and bitzpus)
  3. [planning] x → deghpus (原始: x is deghpus)
  4. [planning] x → babbpus (原始: x is babbpus)
  5. [planning] x → gulkpus (原始: x is gulkpus)
  6. [planning] x → bitzpus (原始: x is bitzpus)
  7. [actual] x → tixdpus (原始: x is tixdpus)
  8. [actual] tixdpus → rugkpus (原始: tixdpus is rugkpus)
  9. [actual] rugkpus → gizfpus (原始: rugkpus is gizfpus)
  10. [actual] gizfpus → newbpus (原始: gizfpus is newbpus)
  11. [actual] newbpus → pevnpus (原始: newbpus is pevnpus)
  12. [actual] pevnpus → mefzpus and lozypus (原始: pevnpus is mefzpus and lozypus)
  13. [actual] mefzpus → yewlpus (原始: mefzpus is yewlpus)
  14. [actual] yewlpus → cejdpus (原始: yewlpus is cejdpus)
  15. [actual] cejdpus → pervpus (原始: cejdpus is pervpus)
  16. [actual] pervpus → sayjpus (原始: pervpus is sayjpus)
  17. [actual] sayjpus → wiqrpus (原始: sayjpus is wiqrpus)
  18. [actual] wiqrpus → jaqppus (原始: wiqrpus is jaqppus)
  19. [actual] jaqppus → webtpus (原始: jaqppus is webtpus)
  20. [actual] webtpus → yeqypus (原始: webtpus is yeqypus)
  21. [actual] yeqypus → deghpus (原始: yeqypus is deghpus)
  22. [actual] deghpus → babbpus (原始: deghpus is babbpus)
  23. [planning] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 35
[后处理] 加载LoG图，包含 35 个节点
  LoG节点 0: x is babbpus (规则: CE, 深度: 1)
  LoG节点 1: x is babbpus and zurppus (规则: MP, 深度: 2)
  LoG节点 2: x is sayjpus (规则: CE, 深度: 3)
  LoG节点 3: sayjpus is babbpus and zurppus (规则: CI, 深度: 3)
  LoG节点 4: x is sayjpus and timcpus (规则: MP, 深度: 4)
  LoG节点 5: sayjpus is babbpus (规则: CE, 深度: 4)
  LoG节点 6: sayjpus is zurppus (规则: MP, 深度: 4)
  LoG节点 7: x is mefzpus (规则: MP, 深度: 5)
  LoG节点 8: mefzpus is sayjpus and timcpus (规则: CI, 深度: 5)
  LoG节点 9: sayjpus is babbpus and gulkpus (规则: MP, 深度: 5)
  LoG节点 10: sayjpus is xohjpus (规则: MP, 深度: 5)
  LoG节点 11: xohjpus is zurppus (规则: CE, 深度: 5)
  LoG节点 12: x is newbpus (规则: MP, 深度: 6)
  LoG节点 13: newbpus is mefzpus (规则: CE, 深度: 6)
  LoG节点 14: mefzpus is sayjpus (规则: MP, 深度: 6)
  LoG节点 15: mefzpus is timcpus (规则: CE, 深度: 6)
  LoG节点 16: sayjpus is webtpus (规则: MP, 深度: 6)
  LoG节点 17: webtpus is babbpus and gulkpus (规则: MP, 深度: 6)
  LoG节点 18: sayjpus is wicbpus (规则: CE, 深度: 6)
  LoG节点 19: wicbpus is xohjpus (规则: CE, 深度: 6)
  LoG节点 20: xohjpus is zurppus and semzpus (规则: MP, 深度: 6)
  LoG节点 21: x is rugkpus (规则: MP, 深度: 7)
  LoG节点 22: rugkpus is newbpus (规则: MP, 深度: 7)
  LoG节点 23: newbpus is mefzpus and lozypus (规则: MP, 深度: 7)
  LoG节点 24: mefzpus is cejdpus (规则: MP, 深度: 7)
  LoG节点 25: cejdpus is sayjpus (规则: MP, 深度: 7)
  LoG节点 26: mefzpus is timcpus and fokzpus (规则: MP, 深度: 7)
  LoG节点 27: sayjpus is wiqrpus (规则: CE, 深度: 7)
  LoG节点 28: wiqrpus is webtpus (规则: MP, 深度: 7)
  LoG节点 29: webtpus is deghpus (规则: MP, 深度: 7)
  LoG节点 30: deghpus is babbpus and gulkpus (规则: CE, 深度: 7)
  LoG节点 31: sayjpus is wicbpus and yocxpus (规则: MP, 深度: 7)
  LoG节点 32: wicbpus is xohjpus and qaqxpus (规则: MP, 深度: 7)
  LoG节点 33: xohjpus is viqwpus (规则: MP, 深度: 7)
  LoG节点 34: viqwpus is zurppus and semzpus (规则: CI, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 23
   - 初始条件数: 26
   - LoG图节点数: 35

📋 初始条件列表:
    1. webtpus is yeqypus
    2. jaqppus is webtpus
    3. x is tixdpus
    4. vajwpus is viqwpus
    5. rugkpus is gizfpus
    6. mefzpus is fuwlpus
    7. pervpus is sayjpus
    8. cejdpus is pervpus
    9. deghpus is babbpus and gulkpus and bitzpus
   10. fuwlpus is timcpus and fokzpus
   11. sayjpus is gaskpus
   12. tixdpus is rugkpus
   13. pevnpus is mefzpus and lozypus
   14. xohjpus is vajwpus
   15. viqwpus is zurppus
   16. yewlpus is cejdpus
   17. sayjpus is wiqrpus and hibxpus
   18. wicbpus is paqrpus
   19. mefzpus is yewlpus
   20. gizfpus is newbpus
   21. yeqypus is deghpus
   22. paqrpus is xohjpus and qaqxpus
   23. viqwpus is semzpus
   24. newbpus is pevnpus
   25. gaskpus is wicbpus and yocxpus
   26. wiqrpus is jaqppus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 26 个前提节点

🔍 开始处理actual节点...

   节点 1: yeqypus is deghpus
      ↻ 重复节点，计数: 2

   节点 2: deghpus is babbpus and gulkpus and bitzpus
      ↻ 重复节点，计数: 2

   节点 3: x is tixdpus
      ↻ 重复节点，计数: 2

   节点 4: tixdpus is rugkpus
      ↻ 重复节点，计数: 2

   节点 5: rugkpus is gizfpus
      ↻ 重复节点，计数: 2

   节点 6: gizfpus is newbpus
      ↻ 重复节点，计数: 2

   节点 7: newbpus is pevnpus
      ↻ 重复节点，计数: 2

   节点 8: pevnpus is mefzpus and lozypus
      ↻ 重复节点，计数: 2

   节点 9: mefzpus is yewlpus
      ↻ 重复节点，计数: 2

   节点 10: yewlpus is cejdpus
      ↻ 重复节点，计数: 2

   节点 11: cejdpus is pervpus
      ↻ 重复节点，计数: 2

   节点 12: pervpus is sayjpus
      ↻ 重复节点，计数: 2

   节点 13: sayjpus is wiqrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: sayjpus is wiqrpus
      ✅ 验证成功 + LoG匹配

   节点 14: wiqrpus is jaqppus
      ↻ 重复节点，计数: 2

   节点 15: jaqppus is webtpus
      ↻ 重复节点，计数: 2

   节点 16: webtpus is yeqypus
      ↻ 重复节点，计数: 2

   节点 17: yeqypus is deghpus
      ↻ 重复节点，计数: 3

   节点 18: deghpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: deghpus is babbpus and gulkpus and bitzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: deghpus is babbpus and gulkpus and bitzpus
  ✓ 点亮LoG节点: deghpus is babbpus and gulkpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 18
   - 新增节点: 2
   - 更新已存在节点: 16
   - 点亮的LoG节点: 2

🎯 推理质量统计:
   - 完美推理: 2 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 35节点, 26前提, 复杂度1-26

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 28
   - 前提节点: 26
   - 推理节点: 2
   - 幻觉节点: 0
   - 点亮LoG节点: 2

✅ 推理节点详情:
   🟢 sayjpus is wiqrpus (出现1次, 质量:perfect)
   🟢 deghpus is babbpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - deghpus is babbpus and gulkpus
   - sayjpus is wiqrpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 1/7 = 14.29%
   最深点亮节点: sayjpus is wiqrpus (第1层)
   节点Coverage: 2/35 = 5.71%
   前提条件Coverage: 15/26 = 57.69%
   各推理层点亮比例:
     第1层: 2/14 = 14.29%
     第2层: 0/9 = 0.00%
     第3层: 0/5 = 0.00%
     第4层: 0/3 = 0.00%
     第5层: 0/2 = 0.00%
     第6层: 0/1 = 0.00%
     第7层: 0/1 = 0.00%

🎯 计算Precision指标...
   Error Rate: 0/2 = 0.00%
   可推导节点: 2/2
   Strict Error Rate: 0/2 = 0.00%
   严格有效节点: 2/2

   详细分析:
     完美推理: 2 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 38/50
================================================================================
记录索引: 37
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_37.json
✅ 使用缓存结果:
   - 句子数: 5
   - 提取的语句数: 25
   - 初始条件数: 25

=== Statement提取完成 ===
总句子数: 5
成功提取: 5
失败提取: 0
总statements数: 25

=== 开始清洗Statement格式 ===
原始statements数: 25
清洗后statements数: 25
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 25
标准化后节点数: 25
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babbpus (原始: x is babbpus)
  2. [planning] x → baccpus (原始: x is baccpus)
  3. [actual] x → yanhpus (原始: x is yanhpus)
  4. [actual] yanhpus → cohgpus (原始: yanhpus is cohgpus)
  5. [actual] cohgpus → nidtpus (原始: cohgpus is nidtpus)
  6. [actual] nidtpus → vumnpus (原始: nidtpus is vumnpus)
  7. [actual] vumnpus → ziwxpus (原始: vumnpus is ziwxpus)
  8. [actual] ziwxpus → wetwpus (原始: ziwxpus is wetwpus)
  9. [actual] wetwpus → manxpus (原始: wetwpus is manxpus)
  10. [actual] manxpus → boqqpus (原始: manxpus is boqqpus)
  11. [actual] boqqpus → gagjpus (原始: boqqpus is gagjpus)
  12. [actual] gagjpus → tatbpus (原始: gagjpus is tatbpus)
  13. [actual] tatbpus → babbpus (原始: tatbpus is babbpus)
  14. [planning] x → babbpus (原始: x is babbpus)
  15. [actual] x → ciwmpus (原始: x is ciwmpus)
  16. [actual] ciwmpus → xiwmpus (原始: ciwmpus is xiwmpus)
  17. [actual] xiwmpus → gekypus (原始: xiwmpus is gekypus)
  18. [actual] gekypus → lijmpus (原始: gekypus is lijmpus)
  19. [actual] lijmpus → hunwpus (原始: lijmpus is hunwpus)
  20. [actual] hunwpus → muzrpus (原始: hunwpus is muzrpus)
  21. [actual] muzrpus → botdpus (原始: muzrpus is botdpus)
  22. [actual] botdpus → hezcpus (原始: botdpus is hezcpus)
  23. [actual] hezcpus → baccpus (原始: hezcpus is baccpus)
  24. [actual] x → baccpus (原始: x is baccpus)
  25. [actual] x → babbpus and baccpus (原始: x is babbpus and baccpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 41
[后处理] 加载LoG图，包含 41 个节点
  LoG节点 0: x is babbpus and baccpus (规则: CI, 深度: 1)
  LoG节点 1: x is babbpus (规则: CE, 深度: 2)
  LoG节点 2: x is baccpus (规则: CE, 深度: 2)
  LoG节点 3: x is babbpus and wizxpus (规则: MP, 深度: 3)
  LoG节点 4: x is baccpus and covnpus (规则: MP, 深度: 3)
  LoG节点 5: x is wetwpus (规则: MP, 深度: 4)
  LoG节点 6: wetwpus is babbpus and wizxpus (规则: MP, 深度: 4)
  LoG节点 7: x is gekypus (规则: CE, 深度: 4)
  LoG节点 8: gekypus is baccpus and covnpus (规则: MP, 深度: 4)
  LoG节点 9: x is cohgpus (规则: CE, 深度: 5)
  LoG节点 10: cohgpus is wetwpus (规则: CE, 深度: 5)
  LoG节点 11: wetwpus is gagjpus (规则: CE, 深度: 5)
  LoG节点 12: gagjpus is babbpus and wizxpus (规则: CE, 深度: 5)
  LoG节点 13: x is gekypus and ciqjpus (规则: MP, 深度: 5)
  LoG节点 14: gekypus is botdpus (规则: CE, 深度: 5)
  LoG节点 15: botdpus is baccpus and covnpus (规则: CI, 深度: 5)
  LoG节点 16: x is cohgpus and tuvgpus (规则: MP, 深度: 6)
  LoG节点 17: cohgpus is wetwpus and qewqpus (规则: MP, 深度: 6)
  LoG节点 18: wetwpus is gagjpus and ruhgpus (规则: MP, 深度: 6)
  LoG节点 19: gagjpus is babbpus and wizxpus and qotypus (规则: MP, 深度: 6)
  LoG节点 20: x is xiwmpus (规则: CE, 深度: 6)
  LoG节点 21: xiwmpus is gekypus and ciqjpus (规则: CI, 深度: 6)
  LoG节点 22: gekypus is botdpus and zozzpus (规则: MP, 深度: 6)
  LoG节点 23: botdpus is baccpus (规则: CE, 深度: 6)
  LoG节点 24: botdpus is covnpus (规则: MP, 深度: 6)
  LoG节点 25: x is yanhpus (规则: CE, 深度: 7)
  LoG节点 26: yanhpus is cohgpus and tuvgpus (规则: CI, 深度: 7)
  LoG节点 27: cohgpus is vumnpus (规则: MP, 深度: 7)
  LoG节点 28: vumnpus is wetwpus and qewqpus (规则: MP, 深度: 7)
  LoG节点 29: wetwpus is manxpus (规则: CE, 深度: 7)
  LoG节点 30: manxpus is gagjpus and ruhgpus (规则: MP, 深度: 7)
  LoG节点 31: gagjpus is tatbpus (规则: CE, 深度: 7)
  LoG节点 32: tatbpus is babbpus and wizxpus and qotypus (规则: CE, 深度: 7)
  LoG节点 33: x is xiwmpus and xepvpus (规则: MP, 深度: 7)
  LoG节点 34: xiwmpus is gekypus (规则: CE, 深度: 7)
  LoG节点 35: xiwmpus is ciqjpus (规则: MP, 深度: 7)
  LoG节点 36: gekypus is hunwpus (规则: MP, 深度: 7)
  LoG节点 37: hunwpus is botdpus and zozzpus (规则: MP, 深度: 7)
  LoG节点 38: botdpus is baccpus and rubbpus (规则: MP, 深度: 7)
  LoG节点 39: botdpus is mepfpus (规则: CE, 深度: 7)
  LoG节点 40: mepfpus is covnpus (规则: CE, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 25
   - 初始条件数: 25
   - LoG图节点数: 41

📋 初始条件列表:
    1. hunwpus is muzrpus
    2. muzrpus is botdpus and zozzpus
    3. gekypus is lijmpus
    4. vumnpus is ziwxpus
    5. xiwmpus is yognpus
    6. x is yanhpus and woqypus
    7. yanhpus is tuvgpus
    8. botdpus is mepfpus and xubkpus
    9. manxpus is boqqpus
   10. botdpus is hezcpus
   11. ziwxpus is wetwpus and qewqpus
   12. ciwmpus is xiwmpus and xepvpus
   13. tatbpus is babbpus and wizxpus and qotypus and menbpus
   14. yanhpus is cohgpus
   15. gagjpus is tatbpus and rufspus
   16. nidtpus is vumnpus
   17. x is ciwmpus
   18. cohgpus is nidtpus
   19. mepfpus is covnpus and jonrpus
   20. boqqpus is gagjpus and ruhgpus
   21. yognpus is ciqjpus
   22. hezcpus is baccpus and rubbpus
   23. lijmpus is hunwpus
   24. wetwpus is manxpus and wayypus
   25. xiwmpus is gekypus and seljpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 25 个前提节点

🔍 开始处理actual节点...

   节点 1: x is yanhpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is yanhpus
      ✅ 验证成功 + LoG匹配

   节点 2: yanhpus is cohgpus
      ↻ 重复节点，计数: 2

   节点 3: cohgpus is nidtpus
      ↻ 重复节点，计数: 2

   节点 4: nidtpus is vumnpus
      ↻ 重复节点，计数: 2

   节点 5: vumnpus is ziwxpus
      ↻ 重复节点，计数: 2

   节点 6: ziwxpus is wetwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: ziwxpus is wetwpus and qewqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: ziwxpus is wetwpus and qewqpus

   节点 7: wetwpus is manxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: wetwpus is manxpus
      ✅ 验证成功 + LoG匹配

   节点 8: manxpus is boqqpus
      ↻ 重复节点，计数: 2

   节点 9: boqqpus is gagjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: boqqpus is gagjpus and ruhgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: boqqpus is gagjpus and ruhgpus

   节点 10: gagjpus is tatbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: gagjpus is tatbpus
      ✅ 验证成功 + LoG匹配

   节点 11: tatbpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: tatbpus is babbpus and wizxpus and qotypus and menbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: tatbpus is babbpus and wizxpus and qotypus and menbpus
  ✓ 点亮LoG节点: tatbpus is babbpus and wizxpus and qotypus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 12: x is ciwmpus
      ↻ 重复节点，计数: 2

   节点 13: ciwmpus is xiwmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: ciwmpus is xiwmpus and xepvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: ciwmpus is xiwmpus and xepvpus

   节点 14: xiwmpus is gekypus
      🔍 验证新节点...
[后处理] 点亮LoG节点: xiwmpus is gekypus
      ✅ 验证成功 + LoG匹配

   节点 15: gekypus is lijmpus
      ↻ 重复节点，计数: 2

   节点 16: lijmpus is hunwpus
      ↻ 重复节点，计数: 2

   节点 17: hunwpus is muzrpus
      ↻ 重复节点，计数: 2

   节点 18: muzrpus is botdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: muzrpus is botdpus and zozzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: muzrpus is botdpus and zozzpus

   节点 19: botdpus is hezcpus
      ↻ 重复节点，计数: 2

   节点 20: hezcpus is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: hezcpus is baccpus and rubbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: hezcpus is baccpus and rubbpus

   节点 21: x is baccpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is baccpus
[子树点亮]     └─ 点亮依赖节点: x is baccpus and covnpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is gekypus (深度4)
[子树点亮]     └─ 点亮依赖节点: gekypus is baccpus and covnpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is gekypus and ciqjpus (深度5)
[子树点亮]     └─ 点亮依赖节点: gekypus is botdpus (深度5)
[子树点亮]     └─ 点亮依赖节点: botdpus is baccpus and covnpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is xiwmpus (深度6)
[子树点亮]     └─ 点亮依赖节点: xiwmpus is gekypus and ciqjpus (深度6)
[子树点亮]     └─ 点亮依赖节点: gekypus is botdpus and zozzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: botdpus is baccpus (深度6)
[子树点亮]     └─ 点亮依赖节点: botdpus is covnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is xiwmpus and xepvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xiwmpus is ciqjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: gekypus is hunwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: hunwpus is botdpus and zozzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: botdpus is baccpus and rubbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: botdpus is mepfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: mepfpus is covnpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 18 个节点
      ✅ 验证成功 + LoG匹配

   节点 22: x is babbpus and baccpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus and baccpus
[子树点亮]     └─ 点亮依赖节点: x is babbpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is babbpus and wizxpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is wetwpus (深度4)
[子树点亮]     └─ 点亮依赖节点: wetwpus is babbpus and wizxpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is cohgpus (深度5)
[子树点亮]     └─ 点亮依赖节点: cohgpus is wetwpus (深度5)
[子树点亮]     └─ 点亮依赖节点: wetwpus is gagjpus (深度5)
[子树点亮]     └─ 点亮依赖节点: gagjpus is babbpus and wizxpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is cohgpus and tuvgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: cohgpus is wetwpus and qewqpus (深度6)
[子树点亮]     └─ 点亮依赖节点: wetwpus is gagjpus and ruhgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: gagjpus is babbpus and wizxpus and qotypus (深度6)
[子树点亮]     └─ 点亮依赖节点: yanhpus is cohgpus and tuvgpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cohgpus is vumnpus (深度7)
[子树点亮]     └─ 点亮依赖节点: vumnpus is wetwpus and qewqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: manxpus is gagjpus and ruhgpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 16 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 22
   - 新增节点: 12
   - 更新已存在节点: 10
   - 点亮的LoG节点: 41

🎯 推理质量统计:
   - 完美推理: 12 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 41节点, 25前提, 复杂度1-25

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 37
   - 前提节点: 25
   - 推理节点: 12
   - 幻觉节点: 0
   - 点亮LoG节点: 41

✅ 推理节点详情:
   🟢 x is yanhpus (出现1次, 质量:perfect)
   🟢 ziwxpus is wetwpus (出现1次, 质量:perfect)
   🟢 wetwpus is manxpus (出现1次, 质量:perfect)
   🟢 boqqpus is gagjpus (出现1次, 质量:perfect)
   🟢 gagjpus is tatbpus (出现1次, 质量:perfect)
   🟢 tatbpus is babbpus (出现1次, 质量:perfect)
   🟢 ciwmpus is xiwmpus (出现1次, 质量:perfect)
   🟢 xiwmpus is gekypus (出现1次, 质量:perfect)
   🟢 muzrpus is botdpus (出现1次, 质量:perfect)
   🟢 hezcpus is baccpus (出现1次, 质量:perfect)
   🟢 x is baccpus (出现1次, 质量:perfect)
   🟢 x is babbpus and baccpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is yanhpus
   - x is gekypus and ciqjpus
   - gagjpus is babbpus and wizxpus and qotypus
   - x is xiwmpus and xepvpus
   - xiwmpus is gekypus
   - x is gekypus
   - x is baccpus and covnpus
   - botdpus is baccpus
   - wetwpus is babbpus and wizxpus
   - gekypus is botdpus
   - x is cohgpus
   - manxpus is gagjpus and ruhgpus
   - botdpus is covnpus
   - x is wetwpus
   - botdpus is baccpus and rubbpus
   - gekypus is hunwpus
   - mepfpus is covnpus
   - xiwmpus is ciqjpus
   - cohgpus is wetwpus
   - gekypus is baccpus and covnpus
   - botdpus is baccpus and covnpus
   - wetwpus is manxpus
   - x is xiwmpus
   - wetwpus is gagjpus and ruhgpus
   - yanhpus is cohgpus and tuvgpus
   - x is cohgpus and tuvgpus
   - vumnpus is wetwpus and qewqpus
   - wetwpus is gagjpus
   - x is baccpus
   - xiwmpus is gekypus and ciqjpus
   - x is babbpus and baccpus
   - hunwpus is botdpus and zozzpus
   - botdpus is mepfpus
   - cohgpus is wetwpus and qewqpus
   - tatbpus is babbpus and wizxpus and qotypus
   - gekypus is botdpus and zozzpus
   - gagjpus is tatbpus
   - x is babbpus and wizxpus
   - gagjpus is babbpus and wizxpus
   - cohgpus is vumnpus
   - x is babbpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus and baccpus (第7层)
   节点Coverage: 41/41 = 100.00%
   前提条件Coverage: 10/25 = 40.00%
   各推理层点亮比例:
     第1层: 16/16 = 100.00%
     第2层: 9/9 = 100.00%
     第3层: 7/7 = 100.00%
     第4层: 4/4 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 2/2 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/12 = 0.00%
   可推导节点: 12/12
   Strict Error Rate: 0/12 = 0.00%
   严格有效节点: 12/12

   详细分析:
     完美推理: 12 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 39/50
================================================================================
记录索引: 38
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_38.json
✅ 使用缓存结果:
   - 句子数: 7
   - 提取的语句数: 48
   - 初始条件数: 48

=== Statement提取完成 ===
总句子数: 7
成功提取: 7
失败提取: 0
总statements数: 48

=== 开始清洗Statement格式 ===
原始statements数: 48
清洗后statements数: 48
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 48
标准化后节点数: 48
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babbpus (原始: x is babbpus)
  2. [actual] x → pacwpus (原始: x is pacwpus)
  3. [planning] pacwpus → babbpus (原始: pacwpus is babbpus)
  4. [actual] pacwpus → cefypus (原始: pacwpus is cefypus)
  5. [actual] cefypus → sikspus (原始: cefypus is sikspus)
  6. [actual] sikspus → qahypus (原始: sikspus is qahypus)
  7. [actual] qahypus → fixmpus (原始: qahypus is fixmpus)
  8. [actual] fixmpus → yezxpus (原始: fixmpus is yezxpus)
  9. [actual] yezxpus → pondpus (原始: yezxpus is pondpus)
  10. [actual] pondpus → miczpus (原始: pondpus is miczpus)
  11. [actual] miczpus → sadxpus (原始: miczpus is sadxpus)
  12. [actual] sadxpus → woknpus (原始: sadxpus is woknpus)
  13. [actual] woknpus → xepvpus (原始: woknpus is xepvpus)
  14. [actual] xepvpus → bawnpus (原始: xepvpus is bawnpus)
  15. [actual] bawnpus → muzrpus (原始: bawnpus is muzrpus)
  16. [actual] muzrpus → gizzpus (原始: muzrpus is gizzpus)
  17. [actual] gizzpus → wukzpus (原始: gizzpus is wukzpus)
  18. [actual] wukzpus → vahtpus (原始: wukzpus is vahtpus)
  19. [actual] vahtpus → makjpus (原始: vahtpus is makjpus)
  20. [actual] makjpus → vefjpus (原始: makjpus is vefjpus)
  21. [actual] vefjpus → patrpus (原始: vefjpus is patrpus)
  22. [actual] patrpus → neqlpus (原始: patrpus is neqlpus)
  23. [actual] neqlpus → rohppus (原始: neqlpus is rohppus)
  24. [actual] rohppus → qacwpus (原始: rohppus is qacwpus)
  25. [actual] qacwpus → cejdpus (原始: qacwpus is cejdpus)
  26. [actual] cejdpus → hohypus (原始: cejdpus is hohypus)
  27. [actual] hohypus → tujxpus (原始: hohypus is tujxpus)
  28. [actual] tujxpus → yuvspus (原始: tujxpus is yuvspus)
  29. [actual] yuvspus → bimppus (原始: yuvspus is bimppus)
  30. [actual] bimppus → zodzpus (原始: bimppus is zodzpus)
  31. [actual] zodzpus → dogbpus (原始: zodzpus is dogbpus)
  32. [actual] dogbpus → hofppus (原始: dogbpus is hofppus)
  33. [actual] hofppus → kilmpus (原始: hofppus is kilmpus)
  34. [actual] kilmpus → zizmpus (原始: kilmpus is zizmpus)
  35. [actual] zizmpus → vefmpus (原始: zizmpus is vefmpus)
  36. [actual] vefmpus → yeshpus (原始: vefmpus is yeshpus)
  37. [actual] yeshpus → fokhpus (原始: yeshpus is fokhpus)
  38. [actual] fokhpus → vahhpus (原始: fokhpus is vahhpus)
  39. [actual] vahhpus → kupgpus (原始: vahhpus is kupgpus)
  40. [actual] kupgpus → zifbpus (原始: kupgpus is zifbpus)
  41. [actual] zifbpus → wukjpus (原始: zifbpus is wukjpus)
  42. [actual] wukjpus → zolnpus (原始: wukjpus is zolnpus)
  43. [actual] zolnpus → buctpus (原始: zolnpus is buctpus)
  44. [actual] buctpus → babbpus (原始: buctpus is babbpus)
  45. [actual] pacwpus → babbpus (原始: pacwpus is babbpus)
  46. [actual] x → pacwpus (原始: x is pacwpus)
  47. [actual] x → babbpus (原始: x is babbpus)
  48. [actual] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 71
[后处理] 加载LoG图，包含 71 个节点
  LoG节点 0: x is babbpus (规则: MP, 深度: 1)
  LoG节点 1: x is wukzpus (规则: MP, 深度: 2)
  LoG节点 2: wukzpus is babbpus (规则: MP, 深度: 2)
  LoG节点 3: x is sadxpus (规则: MP, 深度: 3)
  LoG节点 4: sadxpus is wukzpus (规则: CE, 深度: 3)
  LoG节点 5: wukzpus is dogbpus (规则: MP, 深度: 3)
  LoG节点 6: dogbpus is babbpus (规则: MP, 深度: 3)
  LoG节点 7: x is fixmpus (规则: CE, 深度: 4)
  LoG节点 8: fixmpus is sadxpus (规则: MP, 深度: 4)
  LoG节点 9: sadxpus is wukzpus and numcpus (规则: MP, 深度: 4)
  LoG节点 10: wukzpus is cejdpus (规则: MP, 深度: 4)
  LoG节点 11: cejdpus is dogbpus (规则: MP, 深度: 4)
  LoG节点 12: dogbpus is kupgpus (规则: MP, 深度: 4)
  LoG节点 13: kupgpus is babbpus (规则: CE, 深度: 4)
  LoG节点 14: x is fixmpus and pemvpus (规则: MP, 深度: 5)
  LoG节点 15: fixmpus is pondpus (规则: CE, 深度: 5)
  LoG节点 16: pondpus is sadxpus (规则: CE, 深度: 5)
  LoG节点 17: sadxpus is muzrpus (规则: CE, 深度: 5)
  LoG节点 18: muzrpus is wukzpus and numcpus (规则: CI, 深度: 5)
  LoG节点 19: wukzpus is neqlpus (规则: MP, 深度: 5)
  LoG节点 20: neqlpus is cejdpus (规则: CE, 深度: 5)
  LoG节点 21: cejdpus is tujxpus (规则: CE, 深度: 5)
  LoG节点 22: tujxpus is dogbpus (规则: CE, 深度: 5)
  LoG节点 23: dogbpus is zizmpus (规则: CE, 深度: 5)
  LoG节点 24: zizmpus is kupgpus (规则: MP, 深度: 5)
  LoG节点 25: kupgpus is babbpus and yexkpus (规则: MP, 深度: 5)
  LoG节点 26: x is cefypus (规则: CE, 深度: 6)
  LoG节点 27: cefypus is fixmpus and pemvpus (规则: MP, 深度: 6)
  LoG节点 28: fixmpus is pondpus and yexzpus (规则: MP, 深度: 6)
  LoG节点 29: pondpus is sadxpus and cujppus (规则: MP, 深度: 6)
  LoG节点 30: sadxpus is muzrpus and xaldpus (规则: MP, 深度: 6)
  LoG节点 31: muzrpus is wukzpus (规则: CE, 深度: 6)
  LoG节点 32: muzrpus is numcpus (规则: CE, 深度: 6)
  LoG节点 33: wukzpus is makjpus (规则: CE, 深度: 6)
  LoG节点 34: makjpus is neqlpus (规则: MP, 深度: 6)
  LoG节点 35: neqlpus is cejdpus and tuqypus (规则: MP, 深度: 6)
  LoG节点 36: cejdpus is tujxpus and zupcpus (规则: MP, 深度: 6)
  LoG节点 37: tujxpus is dogbpus and raympus (规则: MP, 深度: 6)
  LoG节点 38: dogbpus is zizmpus and yimzpus (规则: MP, 深度: 6)
  LoG节点 39: zizmpus is fokhpus (规则: MP, 深度: 6)
  LoG节点 40: fokhpus is kupgpus (规则: CE, 深度: 6)
  LoG节点 41: kupgpus is zolnpus (规则: MP, 深度: 6)
  LoG节点 42: zolnpus is babbpus and yexkpus (规则: CE, 深度: 6)
  LoG节点 43: x is cefypus and voxrpus (规则: MP, 深度: 7)
  LoG节点 44: cefypus is qahypus (规则: MP, 深度: 7)
  LoG节点 45: qahypus is fixmpus and pemvpus (规则: CI, 深度: 7)
  LoG节点 46: fixmpus is yezxpus (规则: CE, 深度: 7)
  LoG节点 47: yezxpus is pondpus and yexzpus (规则: CE, 深度: 7)
  LoG节点 48: pondpus is miczpus (规则: CE, 深度: 7)
  LoG节点 49: miczpus is sadxpus and cujppus (规则: CI, 深度: 7)
  LoG节点 50: sadxpus is xepvpus (规则: MP, 深度: 7)
  LoG节点 51: xepvpus is muzrpus and xaldpus (规则: MP, 深度: 7)
  LoG节点 52: muzrpus is wukzpus and paxvpus (规则: MP, 深度: 7)
  LoG节点 53: muzrpus is numcpus and rimzpus (规则: MP, 深度: 7)
  LoG节点 54: wukzpus is makjpus and koxfpus (规则: MP, 深度: 7)
  LoG节点 55: makjpus is vefjpus (规则: CE, 深度: 7)
  LoG节点 56: vefjpus is neqlpus (规则: MP, 深度: 7)
  LoG节点 57: neqlpus is qacwpus (规则: MP, 深度: 7)
  LoG节点 58: qacwpus is cejdpus and tuqypus (规则: CI, 深度: 7)
  LoG节点 59: cejdpus is hohypus (规则: CE, 深度: 7)
  LoG节点 60: hohypus is tujxpus and zupcpus (规则: CI, 深度: 7)
  LoG节点 61: tujxpus is bimppus (规则: MP, 深度: 7)
  LoG节点 62: bimppus is dogbpus and raympus (规则: MP, 深度: 7)
  LoG节点 63: dogbpus is kilmpus (规则: MP, 深度: 7)
  LoG节点 64: kilmpus is zizmpus and yimzpus (规则: CE, 深度: 7)
  LoG节点 65: zizmpus is vefmpus (规则: CE, 深度: 7)
  LoG节点 66: vefmpus is fokhpus (规则: MP, 深度: 7)
  LoG节点 67: fokhpus is kupgpus and noshpus (规则: MP, 深度: 7)
  LoG节点 68: kupgpus is zifbpus (规则: CE, 深度: 7)
  LoG节点 69: zifbpus is zolnpus (规则: MP, 深度: 7)
  LoG节点 70: zolnpus is babbpus and yexkpus and desqpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 48
   - 初始条件数: 48
   - LoG图节点数: 71

📋 初始条件列表:
    1. zolnpus is buctpus
    2. x is pacwpus
    3. xepvpus is bawnpus
    4. zodzpus is dogbpus and raympus
    5. vahhpus is kupgpus and noshpus
    6. bawnpus is muzrpus and xaldpus
    7. woknpus is xepvpus
    8. gizzpus is wukzpus and paxvpus
    9. fokhpus is vahhpus
   10. makjpus is vefjpus and zixtpus
   11. yuvspus is bimppus
   12. cefypus is sikspus
   13. kupgpus is zifbpus and zutmpus
   14. qacwpus is cejdpus
   15. patrpus is neqlpus
   16. vefjpus is patrpus
   17. dogbpus is hofppus
   18. pacwpus is cefypus and voxrpus
   19. rohppus is qacwpus
   20. hohypus is zupcpus
   21. qacwpus is tuqypus
   22. duglpus is numcpus and rimzpus
   23. bimppus is zodzpus
   24. wukjpus is zolnpus
   25. sikspus is qahypus
   26. miczpus is sadxpus
   27. sadxpus is woknpus
   28. miczpus is cujppus
   29. tujxpus is yuvspus
   30. fixmpus is yezxpus and yasmpus
   31. zizmpus is vefmpus and suvbpus
   32. yeshpus is fokhpus
   33. muzrpus is duglpus
   34. wukzpus is vahtpus
   35. pondpus is miczpus and moxcpus
   36. buctpus is babbpus and yexkpus and desqpus
   37. hohypus is tujxpus
   38. neqlpus is rohppus
   39. zifbpus is wukjpus
   40. vahtpus is makjpus and koxfpus
   41. qahypus is pemvpus
   42. vefmpus is yeshpus
   43. kilmpus is zizmpus and yimzpus and larhpus
   44. muzrpus is gizzpus
   45. cejdpus is hohypus and vozqpus
   46. qahypus is fixmpus
   47. hofppus is kilmpus
   48. yezxpus is pondpus and yexzpus and gakbpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 48 个前提节点

🔍 开始处理actual节点...

   节点 1: x is pacwpus
      ↻ 重复节点，计数: 2

   节点 2: pacwpus is cefypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: pacwpus is cefypus and voxrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: pacwpus is cefypus and voxrpus

   节点 3: cefypus is sikspus
      ↻ 重复节点，计数: 2

   节点 4: sikspus is qahypus
      ↻ 重复节点，计数: 2

   节点 5: qahypus is fixmpus
      ↻ 重复节点，计数: 2

   节点 6: fixmpus is yezxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: fixmpus is yezxpus
      ✅ 验证成功 + LoG匹配

   节点 7: yezxpus is pondpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yezxpus is pondpus and yexzpus and gakbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yezxpus is pondpus and yexzpus and gakbpus
  ✓ 点亮LoG节点: yezxpus is pondpus and yexzpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 8: pondpus is miczpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: pondpus is miczpus
      ✅ 验证成功 + LoG匹配

   节点 9: miczpus is sadxpus
      ↻ 重复节点，计数: 2

   节点 10: sadxpus is woknpus
      ↻ 重复节点，计数: 2

   节点 11: woknpus is xepvpus
      ↻ 重复节点，计数: 2

   节点 12: xepvpus is bawnpus
      ↻ 重复节点，计数: 2

   节点 13: bawnpus is muzrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: bawnpus is muzrpus and xaldpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: bawnpus is muzrpus and xaldpus

   节点 14: muzrpus is gizzpus
      ↻ 重复节点，计数: 2

   节点 15: gizzpus is wukzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gizzpus is wukzpus and paxvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gizzpus is wukzpus and paxvpus

   节点 16: wukzpus is vahtpus
      ↻ 重复节点，计数: 2

   节点 17: vahtpus is makjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: vahtpus is makjpus and koxfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: vahtpus is makjpus and koxfpus

   节点 18: makjpus is vefjpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: makjpus is vefjpus
      ✅ 验证成功 + LoG匹配

   节点 19: vefjpus is patrpus
      ↻ 重复节点，计数: 2

   节点 20: patrpus is neqlpus
      ↻ 重复节点，计数: 2

   节点 21: neqlpus is rohppus
      ↻ 重复节点，计数: 2

   节点 22: rohppus is qacwpus
      ↻ 重复节点，计数: 2

   节点 23: qacwpus is cejdpus
      ↻ 重复节点，计数: 2

   节点 24: cejdpus is hohypus
      🔍 验证新节点...
[后处理] 点亮LoG节点: cejdpus is hohypus
      ✅ 验证成功 + LoG匹配

   节点 25: hohypus is tujxpus
      ↻ 重复节点，计数: 2

   节点 26: tujxpus is yuvspus
      ↻ 重复节点，计数: 2

   节点 27: yuvspus is bimppus
      ↻ 重复节点，计数: 2

   节点 28: bimppus is zodzpus
      ↻ 重复节点，计数: 2

   节点 29: zodzpus is dogbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zodzpus is dogbpus and raympus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zodzpus is dogbpus and raympus

   节点 30: dogbpus is hofppus
      ↻ 重复节点，计数: 2

   节点 31: hofppus is kilmpus
      ↻ 重复节点，计数: 2

   节点 32: kilmpus is zizmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kilmpus is zizmpus and yimzpus and larhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kilmpus is zizmpus and yimzpus and larhpus
  ✓ 点亮LoG节点: kilmpus is zizmpus and yimzpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 33: zizmpus is vefmpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: zizmpus is vefmpus
      ✅ 验证成功 + LoG匹配

   节点 34: vefmpus is yeshpus
      ↻ 重复节点，计数: 2

   节点 35: yeshpus is fokhpus
      ↻ 重复节点，计数: 2

   节点 36: fokhpus is vahhpus
      ↻ 重复节点，计数: 2

   节点 37: vahhpus is kupgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: vahhpus is kupgpus and noshpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: vahhpus is kupgpus and noshpus

   节点 38: kupgpus is zifbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: kupgpus is zifbpus
      ✅ 验证成功 + LoG匹配

   节点 39: zifbpus is wukjpus
      ↻ 重复节点，计数: 2

   节点 40: wukjpus is zolnpus
      ↻ 重复节点，计数: 2

   节点 41: zolnpus is buctpus
      ↻ 重复节点，计数: 2

   节点 42: buctpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: buctpus is babbpus and yexkpus and desqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: buctpus is babbpus and yexkpus and desqpus

   节点 43: pacwpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: pacwpus is cefypus → cefypus is babbpus
[后处理] 基于推理轨迹点亮节点，使用了 41 个前提条件:
  - 前提: pacwpus is cefypus
  - 前提: cefypus is sikspus
  - 前提: sikspus is qahypus
  - 前提: qahypus is fixmpus
  - 前提: fixmpus is yezxpus
  - 前提: yezxpus is pondpus
  - 前提: pondpus is miczpus
  - 前提: miczpus is sadxpus
  - 前提: sadxpus is woknpus
  - 前提: woknpus is xepvpus
  - 前提: xepvpus is bawnpus
  - 前提: bawnpus is muzrpus
  - 前提: muzrpus is gizzpus
  - 前提: gizzpus is wukzpus
  - 前提: wukzpus is vahtpus
  - 前提: vahtpus is makjpus
  - 前提: makjpus is vefjpus
  - 前提: vefjpus is patrpus
  - 前提: patrpus is neqlpus
  - 前提: neqlpus is rohppus
  - 前提: rohppus is qacwpus
  - 前提: qacwpus is cejdpus
  - 前提: cejdpus is hohypus
  - 前提: hohypus is tujxpus
  - 前提: tujxpus is yuvspus
  - 前提: yuvspus is bimppus
  - 前提: bimppus is zodzpus
  - 前提: zodzpus is dogbpus
  - 前提: dogbpus is hofppus
  - 前提: hofppus is kilmpus
  - 前提: kilmpus is zizmpus
  - 前提: zizmpus is vefmpus
  - 前提: vefmpus is yeshpus
  - 前提: yeshpus is fokhpus
  - 前提: fokhpus is vahhpus
  - 前提: vahhpus is kupgpus
  - 前提: kupgpus is zifbpus
  - 前提: zifbpus is wukjpus
  - 前提: wukjpus is zolnpus
  - 前提: zolnpus is buctpus
  - 前提: buctpus is babbpus
  ✓ 点亮LoG节点: wukzpus is babbpus
[子树点亮]     └─ 点亮依赖节点: wukzpus is dogbpus (深度3)
[子树点亮]     └─ 点亮依赖节点: dogbpus is babbpus (深度3)
[子树点亮]     └─ 点亮依赖节点: wukzpus is cejdpus (深度4)
[子树点亮]     └─ 点亮依赖节点: cejdpus is dogbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: dogbpus is kupgpus (深度4)
[子树点亮]     └─ 点亮依赖节点: kupgpus is babbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: wukzpus is neqlpus (深度5)
[子树点亮]     └─ 点亮依赖节点: neqlpus is cejdpus (深度5)
[子树点亮]     └─ 点亮依赖节点: cejdpus is tujxpus (深度5)
[子树点亮]     └─ 点亮依赖节点: tujxpus is dogbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: dogbpus is zizmpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zizmpus is kupgpus (深度5)
[子树点亮]     └─ 点亮依赖节点: kupgpus is babbpus and yexkpus (深度5)
[子树点亮]     └─ 点亮依赖节点: wukzpus is makjpus (深度6)
[子树点亮]     └─ 点亮依赖节点: makjpus is neqlpus (深度6)
[子树点亮]     └─ 点亮依赖节点: neqlpus is cejdpus and tuqypus (深度6)
[子树点亮]     └─ 点亮依赖节点: cejdpus is tujxpus and zupcpus (深度6)
[子树点亮]     └─ 点亮依赖节点: tujxpus is dogbpus and raympus (深度6)
[子树点亮]     └─ 点亮依赖节点: dogbpus is zizmpus and yimzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: zizmpus is fokhpus (深度6)
[子树点亮]     └─ 点亮依赖节点: fokhpus is kupgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: kupgpus is zolnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: zolnpus is babbpus and yexkpus (深度6)
[子树点亮]     └─ 点亮依赖节点: wukzpus is makjpus and koxfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: vefjpus is neqlpus (深度7)
[子树点亮]     └─ 点亮依赖节点: neqlpus is qacwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qacwpus is cejdpus and tuqypus (深度7)
[子树点亮]     └─ 点亮依赖节点: hohypus is tujxpus and zupcpus (深度7)
[子树点亮]     └─ 点亮依赖节点: tujxpus is bimppus (深度7)
[子树点亮]     └─ 点亮依赖节点: bimppus is dogbpus and raympus (深度7)
[子树点亮]     └─ 点亮依赖节点: dogbpus is kilmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: vefmpus is fokhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: fokhpus is kupgpus and noshpus (深度7)
[子树点亮]     └─ 点亮依赖节点: zifbpus is zolnpus (深度7)
[子树点亮]     └─ 点亮依赖节点: zolnpus is babbpus and yexkpus and desqpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 35 个节点
  ✓ 点亮LoG节点: sadxpus is wukzpus
[子树点亮]     └─ 点亮依赖节点: sadxpus is wukzpus and numcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: sadxpus is muzrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: muzrpus is wukzpus and numcpus (深度5)
[子树点亮]     └─ 点亮依赖节点: sadxpus is muzrpus and xaldpus (深度6)
[子树点亮]     └─ 点亮依赖节点: muzrpus is wukzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: muzrpus is numcpus (深度6)
[子树点亮]     └─ 点亮依赖节点: sadxpus is xepvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xepvpus is muzrpus and xaldpus (深度7)
[子树点亮]     └─ 点亮依赖节点: muzrpus is wukzpus and paxvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: muzrpus is numcpus and rimzpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 10 个节点
  ✓ 点亮LoG节点: fixmpus is sadxpus
[子树点亮]     └─ 点亮依赖节点: fixmpus is pondpus (深度5)
[子树点亮]     └─ 点亮依赖节点: pondpus is sadxpus (深度5)
[子树点亮]     └─ 点亮依赖节点: fixmpus is pondpus and yexzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: pondpus is sadxpus and cujppus (深度6)
[子树点亮]     └─ 点亮依赖节点: miczpus is sadxpus and cujppus (深度7)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
  ✓ 点亮LoG节点: cefypus is qahypus
[后处理] 通过推理轨迹额外点亮了 4 个LoG节点

   节点 44: x is pacwpus
      ↻ 重复节点，计数: 3

   节点 45: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is wukzpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is sadxpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is fixmpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is fixmpus and pemvpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is cefypus (深度6)
[子树点亮]     └─ 点亮依赖节点: cefypus is fixmpus and pemvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is cefypus and voxrpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qahypus is fixmpus and pemvpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 8 个节点
      ✅ 验证成功 + LoG匹配

   节点 46: x is babbpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 46
   - 新增节点: 17
   - 更新已存在节点: 29
   - 点亮的LoG节点: 71

🎯 推理质量统计:
   - 完美推理: 17 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 71节点, 48前提, 复杂度1-48

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 65
   - 前提节点: 48
   - 推理节点: 17
   - 幻觉节点: 0
   - 点亮LoG节点: 71

✅ 推理节点详情:
   🟢 pacwpus is cefypus (出现1次, 质量:perfect)
   🟢 fixmpus is yezxpus (出现1次, 质量:perfect)
   🟢 yezxpus is pondpus (出现1次, 质量:perfect)
   🟢 pondpus is miczpus (出现1次, 质量:perfect)
   🟢 bawnpus is muzrpus (出现1次, 质量:perfect)
   🟢 gizzpus is wukzpus (出现1次, 质量:perfect)
   🟢 vahtpus is makjpus (出现1次, 质量:perfect)
   🟢 makjpus is vefjpus (出现1次, 质量:perfect)
   🟢 cejdpus is hohypus (出现1次, 质量:perfect)
   🟢 zodzpus is dogbpus (出现1次, 质量:perfect)
   🟢 kilmpus is zizmpus (出现1次, 质量:perfect)
   🟢 zizmpus is vefmpus (出现1次, 质量:perfect)
   🟢 vahhpus is kupgpus (出现1次, 质量:perfect)
   🟢 kupgpus is zifbpus (出现1次, 质量:perfect)
   🟢 buctpus is babbpus (出现1次, 质量:perfect)
   🟢 pacwpus is babbpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现2次, 质量:perfect)

🔥 点亮的LoG节点:
   - wukzpus is babbpus
   - kupgpus is babbpus
   - dogbpus is zizmpus
   - wukzpus is cejdpus
   - cejdpus is hohypus
   - wukzpus is dogbpus
   - wukzpus is neqlpus
   - wukzpus is makjpus
   - kupgpus is zolnpus
   - fokhpus is kupgpus
   - zizmpus is kupgpus
   - bimppus is dogbpus and raympus
   - pondpus is miczpus
   - wukzpus is makjpus and koxfpus
   - sadxpus is muzrpus
   - dogbpus is kupgpus
   - tujxpus is dogbpus
   - sadxpus is wukzpus
   - makjpus is vefjpus
   - xepvpus is muzrpus and xaldpus
   - cefypus is qahypus
   - pondpus is sadxpus
   - fokhpus is kupgpus and noshpus
   - muzrpus is wukzpus and numcpus
   - yezxpus is pondpus and yexzpus
   - sadxpus is wukzpus and numcpus
   - zizmpus is vefmpus
   - fixmpus is pondpus
   - qahypus is fixmpus and pemvpus
   - x is fixmpus and pemvpus
   - miczpus is sadxpus and cujppus
   - muzrpus is wukzpus
   - zifbpus is zolnpus
   - zolnpus is babbpus and yexkpus
   - neqlpus is qacwpus
   - dogbpus is zizmpus and yimzpus
   - tujxpus is bimppus
   - x is fixmpus
   - fixmpus is pondpus and yexzpus
   - kupgpus is babbpus and yexkpus
   - neqlpus is cejdpus
   - dogbpus is kilmpus
   - x is cefypus and voxrpus
   - kupgpus is zifbpus
   - x is wukzpus
   - cejdpus is tujxpus and zupcpus
   - cejdpus is dogbpus
   - dogbpus is babbpus
   - vefjpus is neqlpus
   - zolnpus is babbpus and yexkpus and desqpus
   - neqlpus is cejdpus and tuqypus
   - cejdpus is tujxpus
   - zizmpus is fokhpus
   - pondpus is sadxpus and cujppus
   - x is cefypus
   - x is sadxpus
   - sadxpus is muzrpus and xaldpus
   - cefypus is fixmpus and pemvpus
   - kilmpus is zizmpus and yimzpus
   - qacwpus is cejdpus and tuqypus
   - makjpus is neqlpus
   - sadxpus is xepvpus
   - muzrpus is wukzpus and paxvpus
   - muzrpus is numcpus and rimzpus
   - fixmpus is sadxpus
   - muzrpus is numcpus
   - hohypus is tujxpus and zupcpus
   - vefmpus is fokhpus
   - x is babbpus
   - tujxpus is dogbpus and raympus
   - fixmpus is yezxpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus (第7层)
   节点Coverage: 71/71 = 100.00%
   前提条件Coverage: 27/48 = 56.25%
   各推理层点亮比例:
     第1层: 28/28 = 100.00%
     第2层: 17/17 = 100.00%
     第3层: 12/12 = 100.00%
     第4层: 7/7 = 100.00%
     第5层: 4/4 = 100.00%
     第6层: 2/2 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/17 = 0.00%
   可推导节点: 17/17
   Strict Error Rate: 0/17 = 0.00%
   严格有效节点: 17/17

   详细分析:
     完美推理: 17 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 40/50
================================================================================
记录索引: 39
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_39.json
✅ 使用缓存结果:
   - 句子数: 37
   - 提取的语句数: 35
   - 初始条件数: 34

=== Statement提取完成 ===
总句子数: 37
成功提取: 37
失败提取: 0
总statements数: 35

=== 开始清洗Statement格式 ===
原始statements数: 35
清洗后statements数: 35
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 35
标准化后节点数: 35
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → rerfpus (原始: x is rerfpus)
  2. [actual] rerfpus → wehdpus (原始: rerfpus is wehdpus)
  3. [actual] wehdpus → kiqxpus (原始: wehdpus is kiqxpus)
  4. [actual] kiqxpus → cefmpus (原始: kiqxpus is cefmpus)
  5. [actual] cefmpus → kapfpus (原始: cefmpus is kapfpus)
  6. [actual] kapfpus → lamppus (原始: kapfpus is lamppus)
  7. [actual] lamppus → gotbpus (原始: lamppus is gotbpus)
  8. [actual] gotbpus → beqgpus (原始: gotbpus is beqgpus)
  9. [actual] beqgpus → fungpus (原始: beqgpus is fungpus)
  10. [actual] fungpus → ziyvpus (原始: fungpus is ziyvpus)
  11. [actual] ziyvpus → gotwpus (原始: ziyvpus is gotwpus)
  12. [actual] gotwpus → sultpus (原始: gotwpus is sultpus)
  13. [actual] sultpus → toytpus (原始: sultpus is toytpus)
  14. [actual] toytpus → mexspus (原始: toytpus is mexspus)
  15. [actual] mexspus → qildpus (原始: mexspus is qildpus)
  16. [actual] qildpus → qonnpus (原始: qildpus is qonnpus)
  17. [actual] qonnpus → gadhpus (原始: qonnpus is gadhpus)
  18. [actual] gadhpus → piwnpus (原始: gadhpus is piwnpus)
  19. [actual] piwnpus → zozkpus (原始: piwnpus is zozkpus)
  20. [actual] zozkpus → durgpus (原始: zozkpus is durgpus)
  21. [actual] durgpus → jangpus (原始: durgpus is jangpus)
  22. [actual] jangpus → teytpus (原始: jangpus is teytpus)
  23. [actual] teytpus → lesfpus (原始: teytpus is lesfpus)
  24. [actual] lesfpus → pivbpus (原始: lesfpus is pivbpus)
  25. [actual] pivbpus → xobjpus (原始: pivbpus is xobjpus)
  26. [actual] xobjpus → xoykpus (原始: xobjpus is xoykpus)
  27. [actual] xoykpus → zehspus (原始: xoykpus is zehspus)
  28. [actual] zehspus → mixypus (原始: zehspus is mixypus)
  29. [actual] mixypus → kebspus (原始: mixypus is kebspus)
  30. [actual] kebspus → mewnpus (原始: kebspus is mewnpus)
  31. [actual] mewnpus → cegdpus (原始: mewnpus is cegdpus)
  32. [actual] cegdpus → bachpus (原始: cegdpus is bachpus)
  33. [actual] x → bachpus (原始: x is bachpus)
  34. [actual] x → babbpus or baccpus or bachpus (原始: x is babbpus or baccpus or bachpus)
  35. [actual] x → bachpus (原始: x is bachpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 47
[后处理] 加载LoG图，包含 47 个节点
  LoG节点 0: x is babbpus or baccpus or bachpus (规则: DI, 深度: 1)
  LoG节点 1: x is bachpus (规则: MP, 深度: 2)
  LoG节点 2: x is zozkpus (规则: MP, 深度: 3)
  LoG节点 3: zozkpus is bachpus (规则: MP, 深度: 3)
  LoG节点 4: x is gotwpus (规则: MP, 深度: 4)
  LoG节点 5: gotwpus is zozkpus (规则: MP, 深度: 4)
  LoG节点 6: zozkpus is mixypus (规则: MP, 深度: 4)
  LoG节点 7: mixypus is bachpus (规则: CE, 深度: 4)
  LoG节点 8: x is lamppus (规则: MP, 深度: 5)
  LoG节点 9: lamppus is gotwpus (规则: MP, 深度: 5)
  LoG节点 10: gotwpus is toytpus (规则: CE, 深度: 5)
  LoG节点 11: toytpus is zozkpus (规则: MP, 深度: 5)
  LoG节点 12: zozkpus is lesfpus (规则: MP, 深度: 5)
  LoG节点 13: lesfpus is mixypus (规则: MP, 深度: 5)
  LoG节点 14: mixypus is bachpus and hocgpus (规则: MP, 深度: 5)
  LoG节点 15: x is wehdpus (规则: CE, 深度: 6)
  LoG节点 16: wehdpus is lamppus (规则: MP, 深度: 6)
  LoG节点 17: lamppus is fungpus (规则: MP, 深度: 6)
  LoG节点 18: fungpus is gotwpus (规则: CE, 深度: 6)
  LoG节点 19: gotwpus is toytpus and yivrpus (规则: MP, 深度: 6)
  LoG节点 20: toytpus is gadhpus (规则: MP, 深度: 6)
  LoG节点 21: gadhpus is zozkpus (规则: CE, 深度: 6)
  LoG节点 22: zozkpus is jangpus (规则: CE, 深度: 6)
  LoG节点 23: jangpus is lesfpus (规则: CE, 深度: 6)
  LoG节点 24: lesfpus is xoykpus (规则: MP, 深度: 6)
  LoG节点 25: xoykpus is mixypus (规则: CE, 深度: 6)
  LoG节点 26: mixypus is mewnpus (规则: CE, 深度: 6)
  LoG节点 27: mewnpus is bachpus and hocgpus (规则: CI, 深度: 6)
  LoG节点 28: x is wehdpus and raympus (规则: MP, 深度: 7)
  LoG节点 29: wehdpus is cefmpus (规则: MP, 深度: 7)
  LoG节点 30: cefmpus is lamppus (规则: MP, 深度: 7)
  LoG节点 31: lamppus is gotbpus (规则: CE, 深度: 7)
  LoG节点 32: gotbpus is fungpus (规则: MP, 深度: 7)
  LoG节点 33: fungpus is gotwpus and woshpus (规则: MP, 深度: 7)
  LoG节点 34: gotwpus is sultpus (规则: CE, 深度: 7)
  LoG节点 35: sultpus is toytpus and yivrpus (规则: CI, 深度: 7)
  LoG节点 36: toytpus is qildpus (规则: MP, 深度: 7)
  LoG节点 37: qildpus is gadhpus (规则: MP, 深度: 7)
  LoG节点 38: gadhpus is zozkpus and xivgpus (规则: MP, 深度: 7)
  LoG节点 39: zozkpus is jangpus and yahvpus (规则: MP, 深度: 7)
  LoG节点 40: jangpus is lesfpus and cemtpus (规则: MP, 深度: 7)
  LoG节点 41: lesfpus is xobjpus (规则: MP, 深度: 7)
  LoG节点 42: xobjpus is xoykpus (规则: CE, 深度: 7)
  LoG节点 43: xoykpus is mixypus and qicmpus (规则: MP, 深度: 7)
  LoG节点 44: mixypus is mewnpus and vecrpus (规则: MP, 深度: 7)
  LoG节点 45: mewnpus is bachpus (规则: MP, 深度: 7)
  LoG节点 46: mewnpus is hocgpus (规则: CE, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 35
   - 初始条件数: 34
   - LoG图节点数: 47

📋 初始条件列表:
    1. rerfpus is wehdpus and raympus
    2. mexspus is qildpus
    3. ziyvpus is gotwpus and woshpus
    4. durgpus is jangpus and yahvpus
    5. xoykpus is zehspus
    6. lamppus is gotbpus and gafxpus
    7. cefmpus is kapfpus
    8. wehdpus is kiqxpus
    9. sultpus is yivrpus
   10. lesfpus is pivbpus
   11. fungpus is ziyvpus
   12. kapfpus is lamppus
   13. gotwpus is sultpus and vonlpus
   14. x is rerfpus
   15. jangpus is teytpus
   16. qonnpus is gadhpus
   17. gadhpus is piwnpus
   18. kiqxpus is cefmpus
   19. gotbpus is beqgpus
   20. pivbpus is xobjpus
   21. xobjpus is xoykpus and xuvhpus
   22. teytpus is lesfpus and cemtpus
   23. piwnpus is zozkpus and xivgpus
   24. toytpus is mexspus
   25. mixypus is kebspus
   26. mewnpus is cegdpus
   27. mewnpus is hocgpus and vardpus
   28. zozkpus is durgpus
   29. kebspus is mewnpus and vecrpus
   30. beqgpus is fungpus
   31. zehspus is mixypus and qicmpus
   32. cegdpus is bachpus
   33. sultpus is toytpus
   34. qildpus is qonnpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 34 个前提节点

🔍 开始处理actual节点...

   节点 1: x is rerfpus
      ↻ 重复节点，计数: 2

   节点 2: rerfpus is wehdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: rerfpus is wehdpus and raympus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: rerfpus is wehdpus and raympus

   节点 3: wehdpus is kiqxpus
      ↻ 重复节点，计数: 2

   节点 4: kiqxpus is cefmpus
      ↻ 重复节点，计数: 2

   节点 5: cefmpus is kapfpus
      ↻ 重复节点，计数: 2

   节点 6: kapfpus is lamppus
      ↻ 重复节点，计数: 2

   节点 7: lamppus is gotbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: lamppus is gotbpus
      ✅ 验证成功 + LoG匹配

   节点 8: gotbpus is beqgpus
      ↻ 重复节点，计数: 2

   节点 9: beqgpus is fungpus
      ↻ 重复节点，计数: 2

   节点 10: fungpus is ziyvpus
      ↻ 重复节点，计数: 2

   节点 11: ziyvpus is gotwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: ziyvpus is gotwpus and woshpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: ziyvpus is gotwpus and woshpus

   节点 12: gotwpus is sultpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: gotwpus is sultpus
      ✅ 验证成功 + LoG匹配

   节点 13: sultpus is toytpus
      ↻ 重复节点，计数: 2

   节点 14: toytpus is mexspus
      ↻ 重复节点，计数: 2

   节点 15: mexspus is qildpus
      ↻ 重复节点，计数: 2

   节点 16: qildpus is qonnpus
      ↻ 重复节点，计数: 2

   节点 17: qonnpus is gadhpus
      ↻ 重复节点，计数: 2

   节点 18: gadhpus is piwnpus
      ↻ 重复节点，计数: 2

   节点 19: piwnpus is zozkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: piwnpus is zozkpus and xivgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: piwnpus is zozkpus and xivgpus

   节点 20: zozkpus is durgpus
      ↻ 重复节点，计数: 2

   节点 21: durgpus is jangpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: durgpus is jangpus and yahvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: durgpus is jangpus and yahvpus

   节点 22: jangpus is teytpus
      ↻ 重复节点，计数: 2

   节点 23: teytpus is lesfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: teytpus is lesfpus and cemtpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: teytpus is lesfpus and cemtpus

   节点 24: lesfpus is pivbpus
      ↻ 重复节点，计数: 2

   节点 25: pivbpus is xobjpus
      ↻ 重复节点，计数: 2

   节点 26: xobjpus is xoykpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: xobjpus is xoykpus
      ✅ 验证成功 + LoG匹配

   节点 27: xoykpus is zehspus
      ↻ 重复节点，计数: 2

   节点 28: zehspus is mixypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zehspus is mixypus and qicmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zehspus is mixypus and qicmpus

   节点 29: mixypus is kebspus
      ↻ 重复节点，计数: 2

   节点 30: kebspus is mewnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kebspus is mewnpus and vecrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kebspus is mewnpus and vecrpus

   节点 31: mewnpus is cegdpus
      ↻ 重复节点，计数: 2

   节点 32: cegdpus is bachpus
      ↻ 重复节点，计数: 2

   节点 33: x is bachpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is bachpus
[子树点亮]     └─ 点亮依赖节点: x is zozkpus (深度3)
[子树点亮]     └─ 点亮依赖节点: zozkpus is bachpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is gotwpus (深度4)
[子树点亮]     └─ 点亮依赖节点: gotwpus is zozkpus (深度4)
[子树点亮]     └─ 点亮依赖节点: zozkpus is mixypus (深度4)
[子树点亮]     └─ 点亮依赖节点: mixypus is bachpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is lamppus (深度5)
[子树点亮]     └─ 点亮依赖节点: lamppus is gotwpus (深度5)
[子树点亮]     └─ 点亮依赖节点: gotwpus is toytpus (深度5)
[子树点亮]     └─ 点亮依赖节点: toytpus is zozkpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zozkpus is lesfpus (深度5)
[子树点亮]     └─ 点亮依赖节点: lesfpus is mixypus (深度5)
[子树点亮]     └─ 点亮依赖节点: mixypus is bachpus and hocgpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is wehdpus (深度6)
[子树点亮]     └─ 点亮依赖节点: wehdpus is lamppus (深度6)
[子树点亮]     └─ 点亮依赖节点: lamppus is fungpus (深度6)
[子树点亮]     └─ 点亮依赖节点: fungpus is gotwpus (深度6)
[子树点亮]     └─ 点亮依赖节点: gotwpus is toytpus and yivrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: toytpus is gadhpus (深度6)
[子树点亮]     └─ 点亮依赖节点: gadhpus is zozkpus (深度6)
[子树点亮]     └─ 点亮依赖节点: zozkpus is jangpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jangpus is lesfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: lesfpus is xoykpus (深度6)
[子树点亮]     └─ 点亮依赖节点: xoykpus is mixypus (深度6)
[子树点亮]     └─ 点亮依赖节点: mixypus is mewnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: mewnpus is bachpus and hocgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is wehdpus and raympus (深度7)
[子树点亮]     └─ 点亮依赖节点: wehdpus is cefmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cefmpus is lamppus (深度7)
[子树点亮]     └─ 点亮依赖节点: gotbpus is fungpus (深度7)
[子树点亮]     └─ 点亮依赖节点: fungpus is gotwpus and woshpus (深度7)
[子树点亮]     └─ 点亮依赖节点: sultpus is toytpus and yivrpus (深度7)
[子树点亮]     └─ 点亮依赖节点: toytpus is qildpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qildpus is gadhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: gadhpus is zozkpus and xivgpus (深度7)
[子树点亮]     └─ 点亮依赖节点: zozkpus is jangpus and yahvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jangpus is lesfpus and cemtpus (深度7)
[子树点亮]     └─ 点亮依赖节点: lesfpus is xobjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xoykpus is mixypus and qicmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: mixypus is mewnpus and vecrpus (深度7)
[子树点亮]     └─ 点亮依赖节点: mewnpus is bachpus (深度7)
[子树点亮]     └─ 点亮依赖节点: mewnpus is hocgpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 42 个节点
      ✅ 验证成功 + LoG匹配

   节点 34: x is babbpus or baccpus or bachpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus or baccpus or bachpus
      ✅ 验证成功 + LoG匹配

   节点 35: x is bachpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 35
   - 新增节点: 12
   - 更新已存在节点: 23
   - 点亮的LoG节点: 47

🎯 推理质量统计:
   - 完美推理: 12 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 47节点, 34前提, 复杂度1-34

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 46
   - 前提节点: 34
   - 推理节点: 12
   - 幻觉节点: 0
   - 点亮LoG节点: 47

✅ 推理节点详情:
   🟢 rerfpus is wehdpus (出现1次, 质量:perfect)
   🟢 lamppus is gotbpus (出现1次, 质量:perfect)
   🟢 ziyvpus is gotwpus (出现1次, 质量:perfect)
   🟢 gotwpus is sultpus (出现1次, 质量:perfect)
   🟢 piwnpus is zozkpus (出现1次, 质量:perfect)
   🟢 durgpus is jangpus (出现1次, 质量:perfect)
   🟢 teytpus is lesfpus (出现1次, 质量:perfect)
   🟢 xobjpus is xoykpus (出现1次, 质量:perfect)
   🟢 zehspus is mixypus (出现1次, 质量:perfect)
   🟢 kebspus is mewnpus (出现1次, 质量:perfect)
   🟢 x is bachpus (出现2次, 质量:perfect)
   🟢 x is babbpus or baccpus or bachpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - fungpus is gotwpus and woshpus
   - toytpus is gadhpus
   - jangpus is lesfpus and cemtpus
   - gotwpus is toytpus
   - fungpus is gotwpus
   - lesfpus is xobjpus
   - zozkpus is jangpus
   - zozkpus is mixypus
   - toytpus is zozkpus
   - x is bachpus
   - lesfpus is mixypus
   - lesfpus is xoykpus
   - x is babbpus or baccpus or bachpus
   - mixypus is mewnpus
   - jangpus is lesfpus
   - zozkpus is lesfpus
   - x is lamppus
   - cefmpus is lamppus
   - sultpus is toytpus and yivrpus
   - x is gotwpus
   - toytpus is qildpus
   - wehdpus is cefmpus
   - x is zozkpus
   - gotbpus is fungpus
   - mewnpus is hocgpus
   - x is wehdpus
   - mixypus is bachpus and hocgpus
   - zozkpus is jangpus and yahvpus
   - wehdpus is lamppus
   - xobjpus is xoykpus
   - qildpus is gadhpus
   - gadhpus is zozkpus
   - gotwpus is zozkpus
   - mewnpus is bachpus and hocgpus
   - lamppus is fungpus
   - xoykpus is mixypus and qicmpus
   - lamppus is gotwpus
   - xoykpus is mixypus
   - mixypus is bachpus
   - x is wehdpus and raympus
   - mewnpus is bachpus
   - zozkpus is bachpus
   - gadhpus is zozkpus and xivgpus
   - mixypus is mewnpus and vecrpus
   - gotwpus is sultpus
   - lamppus is gotbpus
   - gotwpus is toytpus and yivrpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus or baccpus or bachpus (第7层)
   节点Coverage: 47/47 = 100.00%
   前提条件Coverage: 22/34 = 64.71%
   各推理层点亮比例:
     第1层: 19/19 = 100.00%
     第2层: 13/13 = 100.00%
     第3层: 7/7 = 100.00%
     第4层: 4/4 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/12 = 0.00%
   可推导节点: 12/12
   Strict Error Rate: 0/12 = 0.00%
   严格有效节点: 12/12

   详细分析:
     完美推理: 12 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 41/50
================================================================================
记录索引: 40
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_40.json
✅ 使用缓存结果:
   - 句子数: 11
   - 提取的语句数: 35
   - 初始条件数: 29

=== Statement提取完成 ===
总句子数: 11
成功提取: 11
失败提取: 0
总statements数: 35

=== 开始清洗Statement格式 ===
原始statements数: 35
清洗后statements数: 35
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 35
标准化后节点数: 35
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → kobbpus and gidvpus (原始: x is kobbpus and gidvpus)
  2. [actual] x → nejrpus (原始: x is nejrpus)
  3. [actual] x → kobbpus (原始: x is kobbpus)
  4. [actual] kobbpus → nibrpus (原始: kobbpus is nibrpus)
  5. [actual] nibrpus → nakwpus (原始: nibrpus is nakwpus)
  6. [actual] nakwpus → tamjpus (原始: nakwpus is tamjpus)
  7. [actual] tamjpus → joslpus (原始: tamjpus is joslpus)
  8. [actual] joslpus → mifypus (原始: joslpus is mifypus)
  9. [actual] mifypus → nictpus (原始: mifypus is nictpus)
  10. [actual] nictpus → ciqqpus (原始: nictpus is ciqqpus)
  11. [actual] ciqqpus → fosnpus (原始: ciqqpus is fosnpus)
  12. [actual] fosnpus → murppus (原始: fosnpus is murppus)
  13. [actual] murppus → keptpus (原始: murppus is keptpus)
  14. [actual] keptpus → wanrpus (原始: keptpus is wanrpus)
  15. [actual] wanrpus → widhpus (原始: wanrpus is widhpus)
  16. [actual] widhpus → tipcpus (原始: widhpus is tipcpus)
  17. [actual] tipcpus → vambpus (原始: tipcpus is vambpus)
  18. [actual] vambpus → muqcpus (原始: vambpus is muqcpus)
  19. [actual] muqcpus → kucypus (原始: muqcpus is kucypus)
  20. [actual] kucypus → varxpus (原始: kucypus is varxpus)
  21. [actual] varxpus → yeybpus (原始: varxpus is yeybpus)
  22. [actual] yeybpus → soxhpus (原始: yeybpus is soxhpus)
  23. [actual] soxhpus → fokspus (原始: soxhpus is fokspus)
  24. [actual] fokspus → bizrpus (原始: fokspus is bizrpus)
  25. [actual] bizrpus → riwzpus (原始: bizrpus is riwzpus)
  26. [actual] riwzpus → nejrpus (原始: riwzpus is nejrpus)
  27. [actual] x → nejrpus (原始: x is nejrpus)
  28. [actual] nejrpus → bodspus (原始: nejrpus is bodspus)
  29. [actual] nejrpus → zahcpus (原始: nejrpus is zahcpus)
  30. [actual] bodspus → baccpus (原始: bodspus is baccpus)
  31. [actual] nejrpus → baccpus (原始: nejrpus is baccpus)
  32. [actual] zahcpus → babbpus (原始: zahcpus is babbpus)
  33. [actual] nejrpus → babbpus (原始: nejrpus is babbpus)
  34. [actual] x → nejrpus (原始: x is nejrpus)
  35. [actual] x → babbpus and baccpus (原始: x is babbpus and baccpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 45
[后处理] 加载LoG图，包含 45 个节点
  LoG节点 0: x is babbpus and baccpus (规则: MP, 深度: 1)
  LoG节点 1: x is widhpus (规则: CE, 深度: 2)
  LoG节点 2: widhpus is babbpus and baccpus (规则: CE, 深度: 2)
  LoG节点 3: x is widhpus and xesypus (规则: MP, 深度: 3)
  LoG节点 4: widhpus is babbpus and baccpus and bokgpus (规则: MP, 深度: 3)
  LoG节点 5: x is fosnpus (规则: MP, 深度: 4)
  LoG节点 6: fosnpus is widhpus and xesypus (规则: CE, 深度: 4)
  LoG节点 7: widhpus is soxhpus (规则: MP, 深度: 4)
  LoG节点 8: soxhpus is babbpus and baccpus and bokgpus (规则: MP, 深度: 4)
  LoG节点 9: x is joslpus (规则: MP, 深度: 5)
  LoG节点 10: joslpus is fosnpus (规则: MP, 深度: 5)
  LoG节点 11: fosnpus is widhpus and xesypus and loxmpus (规则: MP, 深度: 5)
  LoG节点 12: widhpus is muqcpus (规则: CE, 深度: 5)
  LoG节点 13: muqcpus is soxhpus (规则: MP, 深度: 5)
  LoG节点 14: soxhpus is nejrpus (规则: MP, 深度: 5)
  LoG节点 15: nejrpus is babbpus and baccpus and bokgpus (规则: CI, 深度: 5)
  LoG节点 16: x is nakwpus (规则: MP, 深度: 6)
  LoG节点 17: nakwpus is joslpus (规则: CE, 深度: 6)
  LoG节点 18: joslpus is nictpus (规则: CE, 深度: 6)
  LoG节点 19: nictpus is fosnpus (规则: CE, 深度: 6)
  LoG节点 20: fosnpus is keptpus (规则: CE, 深度: 6)
  LoG节点 21: keptpus is widhpus and xesypus and loxmpus (规则: MP, 深度: 6)
  LoG节点 22: widhpus is muqcpus and sezjpus (规则: MP, 深度: 6)
  LoG节点 23: muqcpus is varxpus (规则: CE, 深度: 6)
  LoG节点 24: varxpus is soxhpus (规则: CE, 深度: 6)
  LoG节点 25: soxhpus is bizrpus (规则: CE, 深度: 6)
  LoG节点 26: bizrpus is nejrpus (规则: CE, 深度: 6)
  LoG节点 27: nejrpus is babbpus (规则: CE, 深度: 6)
  LoG节点 28: nejrpus is baccpus and bokgpus (规则: CE, 深度: 6)
  LoG节点 29: x is kobbpus (规则: CE, 深度: 7)
  LoG节点 30: kobbpus is nakwpus (规则: MP, 深度: 7)
  LoG节点 31: nakwpus is joslpus and mupgpus (规则: MP, 深度: 7)
  LoG节点 32: joslpus is nictpus and reyjpus (规则: MP, 深度: 7)
  LoG节点 33: nictpus is fosnpus and mexbpus (规则: MP, 深度: 7)
  LoG节点 34: fosnpus is keptpus and wikdpus (规则: MP, 深度: 7)
  LoG节点 35: keptpus is wanrpus (规则: CE, 深度: 7)
  LoG节点 36: wanrpus is widhpus and xesypus and loxmpus (规则: CE, 深度: 7)
  LoG节点 37: widhpus is vambpus (规则: MP, 深度: 7)
  LoG节点 38: vambpus is muqcpus and sezjpus (规则: CI, 深度: 7)
  LoG节点 39: muqcpus is varxpus and canbpus (规则: MP, 深度: 7)
  LoG节点 40: varxpus is soxhpus and xicypus (规则: MP, 深度: 7)
  LoG节点 41: soxhpus is bizrpus and tikkpus (规则: MP, 深度: 7)
  LoG节点 42: bizrpus is nejrpus and nacfpus (规则: MP, 深度: 7)
  LoG节点 43: nejrpus is babbpus and dihjpus (规则: MP, 深度: 7)
  LoG节点 44: nejrpus is baccpus and bokgpus and gihrpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 35
   - 初始条件数: 29
   - LoG图节点数: 45

📋 初始条件列表:
    1. fosnpus is murppus
    2. nakwpus is tamjpus
    3. kobbpus is nibrpus
    4. yeybpus is soxhpus and xicypus
    5. joslpus is mifypus
    6. keptpus is wanrpus and tahcpus
    7. x is kobbpus and gidvpus
    8. nejrpus is bodspus
    9. vambpus is sezjpus
   10. nejrpus is zahcpus
   11. wanrpus is widhpus and xesypus and loxmpus and capmpus
   12. bodspus is baccpus and bokgpus and gihrpus
   13. nibrpus is nakwpus
   14. mifypus is nictpus and reyjpus
   15. nictpus is ciqqpus
   16. soxhpus is fokspus
   17. varxpus is yeybpus
   18. ciqqpus is fosnpus and mexbpus
   19. widhpus is tipcpus
   20. riwzpus is nejrpus and nacfpus
   21. bizrpus is riwzpus
   22. tipcpus is vambpus
   23. vambpus is muqcpus
   24. fokspus is bizrpus and tikkpus
   25. tamjpus is joslpus and mupgpus
   26. kucypus is varxpus and canbpus
   27. murppus is keptpus and wikdpus
   28. zahcpus is babbpus and dihjpus
   29. muqcpus is kucypus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 29 个前提节点

🔍 开始处理actual节点...

   节点 1: x is kobbpus and gidvpus
      ↻ 重复节点，计数: 2

   节点 2: x is nejrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP+CE
      📋 推理路径: MP+CE规则: x is kobbpus → kobbpus is nejrpus
[后处理] 基于推理轨迹点亮节点，使用了 24 个前提条件:
  - 前提: x is kobbpus and gidvpus
  - 前提: kobbpus is nibrpus
  - 前提: nibrpus is nakwpus
  - 前提: nakwpus is tamjpus
  - 前提: tamjpus is joslpus and mupgpus
  - 前提: joslpus is mifypus
  - 前提: mifypus is nictpus and reyjpus
  - 前提: nictpus is ciqqpus
  - 前提: ciqqpus is fosnpus and mexbpus
  - 前提: fosnpus is murppus
  - 前提: murppus is keptpus and wikdpus
  - 前提: keptpus is wanrpus and tahcpus
  - 前提: wanrpus is widhpus and xesypus and loxmpus and capmpus
  - 前提: widhpus is tipcpus
  - 前提: tipcpus is vambpus
  - 前提: vambpus is muqcpus
  - 前提: muqcpus is kucypus
  - 前提: kucypus is varxpus and canbpus
  - 前提: varxpus is yeybpus
  - 前提: yeybpus is soxhpus and xicypus
  - 前提: soxhpus is fokspus
  - 前提: fokspus is bizrpus and tikkpus
  - 前提: bizrpus is riwzpus
  - 前提: riwzpus is nejrpus and nacfpus
  ✓ 点亮LoG节点: x is widhpus
[子树点亮]     └─ 点亮依赖节点: x is widhpus and xesypus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is fosnpus (深度4)
[子树点亮]     └─ 点亮依赖节点: fosnpus is widhpus and xesypus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is joslpus (深度5)
[子树点亮]     └─ 点亮依赖节点: joslpus is fosnpus (深度5)
[子树点亮]     └─ 点亮依赖节点: fosnpus is widhpus and xesypus and loxmpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is nakwpus (深度6)
[子树点亮]     └─ 点亮依赖节点: nakwpus is joslpus (深度6)
[子树点亮]     └─ 点亮依赖节点: joslpus is nictpus (深度6)
[子树点亮]     └─ 点亮依赖节点: nictpus is fosnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: fosnpus is keptpus (深度6)
[子树点亮]     └─ 点亮依赖节点: keptpus is widhpus and xesypus and loxmpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is kobbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kobbpus is nakwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: nakwpus is joslpus and mupgpus (深度7)
[子树点亮]     └─ 点亮依赖节点: joslpus is nictpus and reyjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: nictpus is fosnpus and mexbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: fosnpus is keptpus and wikdpus (深度7)
[子树点亮]     └─ 点亮依赖节点: keptpus is wanrpus (深度7)
[子树点亮]     └─ 点亮依赖节点: wanrpus is widhpus and xesypus and loxmpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 20 个节点
  ✓ 点亮LoG节点: widhpus is soxhpus
[子树点亮]     └─ 点亮依赖节点: widhpus is muqcpus (深度5)
[子树点亮]     └─ 点亮依赖节点: muqcpus is soxhpus (深度5)
[子树点亮]     └─ 点亮依赖节点: widhpus is muqcpus and sezjpus (深度6)
[子树点亮]     └─ 点亮依赖节点: muqcpus is varxpus (深度6)
[子树点亮]     └─ 点亮依赖节点: varxpus is soxhpus (深度6)
[子树点亮]     └─ 点亮依赖节点: widhpus is vambpus (深度7)
[子树点亮]     └─ 点亮依赖节点: vambpus is muqcpus and sezjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: muqcpus is varxpus and canbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: varxpus is soxhpus and xicypus (深度7)
[后处理]   └─ 自动点亮依赖子树: 9 个节点
  ✓ 点亮LoG节点: soxhpus is nejrpus
[子树点亮]     └─ 点亮依赖节点: soxhpus is bizrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: bizrpus is nejrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: soxhpus is bizrpus and tikkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: bizrpus is nejrpus and nacfpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
[后处理] 通过推理轨迹额外点亮了 3 个LoG节点

   节点 3: x is kobbpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 4: kobbpus is nibrpus
      ↻ 重复节点，计数: 2

   节点 5: nibrpus is nakwpus
      ↻ 重复节点，计数: 2

   节点 6: nakwpus is tamjpus
      ↻ 重复节点，计数: 2

   节点 7: tamjpus is joslpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: tamjpus is joslpus and mupgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: tamjpus is joslpus and mupgpus

   节点 8: joslpus is mifypus
      ↻ 重复节点，计数: 2

   节点 9: mifypus is nictpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: mifypus is nictpus and reyjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: mifypus is nictpus and reyjpus

   节点 10: nictpus is ciqqpus
      ↻ 重复节点，计数: 2

   节点 11: ciqqpus is fosnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: ciqqpus is fosnpus and mexbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: ciqqpus is fosnpus and mexbpus

   节点 12: fosnpus is murppus
      ↻ 重复节点，计数: 2

   节点 13: murppus is keptpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: murppus is keptpus and wikdpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: murppus is keptpus and wikdpus

   节点 14: keptpus is wanrpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 15: wanrpus is widhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wanrpus is widhpus and xesypus and loxmpus and capmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wanrpus is widhpus and xesypus and loxmpus and capmpus

   节点 16: widhpus is tipcpus
      ↻ 重复节点，计数: 2

   节点 17: tipcpus is vambpus
      ↻ 重复节点，计数: 2

   节点 18: vambpus is muqcpus
      ↻ 重复节点，计数: 2

   节点 19: muqcpus is kucypus
      ↻ 重复节点，计数: 2

   节点 20: kucypus is varxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kucypus is varxpus and canbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kucypus is varxpus and canbpus

   节点 21: varxpus is yeybpus
      ↻ 重复节点，计数: 2

   节点 22: yeybpus is soxhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yeybpus is soxhpus and xicypus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yeybpus is soxhpus and xicypus

   节点 23: soxhpus is fokspus
      ↻ 重复节点，计数: 2

   节点 24: fokspus is bizrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: fokspus is bizrpus and tikkpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: fokspus is bizrpus and tikkpus

   节点 25: bizrpus is riwzpus
      ↻ 重复节点，计数: 2

   节点 26: riwzpus is nejrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: riwzpus is nejrpus and nacfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: riwzpus is nejrpus and nacfpus

   节点 27: x is nejrpus
      ↻ 重复节点，计数: 2

   节点 28: nejrpus is bodspus
      ↻ 重复节点，计数: 2

   节点 29: nejrpus is zahcpus
      ↻ 重复节点，计数: 2

   节点 30: bodspus is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: bodspus is baccpus and bokgpus and gihrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: bodspus is baccpus and bokgpus and gihrpus

   节点 31: nejrpus is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: nejrpus is bodspus → bodspus is baccpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: nejrpus is bodspus
  - 前提: bodspus is baccpus

   节点 32: zahcpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zahcpus is babbpus and dihjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zahcpus is babbpus and dihjpus

   节点 33: nejrpus is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: nejrpus is babbpus
[子树点亮]     └─ 点亮依赖节点: nejrpus is babbpus and dihjpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 34: x is nejrpus
      ↻ 重复节点，计数: 3

   节点 35: x is babbpus and baccpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus and baccpus
[子树点亮]     └─ 点亮依赖节点: widhpus is babbpus and baccpus (深度2)
[子树点亮]     └─ 点亮依赖节点: widhpus is babbpus and baccpus and bokgpus (深度3)
[子树点亮]     └─ 点亮依赖节点: soxhpus is babbpus and baccpus and bokgpus (深度4)
[子树点亮]     └─ 点亮依赖节点: nejrpus is babbpus and baccpus and bokgpus (深度5)
[子树点亮]     └─ 点亮依赖节点: nejrpus is baccpus and bokgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: nejrpus is baccpus and bokgpus and gihrpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 6 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 35
   - 新增节点: 17
   - 更新已存在节点: 18
   - 点亮的LoG节点: 45

🎯 推理质量统计:
   - 完美推理: 17 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 45节点, 29前提, 复杂度1-29

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 46
   - 前提节点: 29
   - 推理节点: 17
   - 幻觉节点: 0
   - 点亮LoG节点: 45

✅ 推理节点详情:
   🟢 x is nejrpus (出现3次, 质量:perfect)
   🟢 x is kobbpus (出现1次, 质量:perfect)
   🟢 tamjpus is joslpus (出现1次, 质量:perfect)
   🟢 mifypus is nictpus (出现1次, 质量:perfect)
   🟢 ciqqpus is fosnpus (出现1次, 质量:perfect)
   🟢 murppus is keptpus (出现1次, 质量:perfect)
   🟢 keptpus is wanrpus (出现1次, 质量:perfect)
   🟢 wanrpus is widhpus (出现1次, 质量:perfect)
   🟢 kucypus is varxpus (出现1次, 质量:perfect)
   🟢 yeybpus is soxhpus (出现1次, 质量:perfect)
   🟢 fokspus is bizrpus (出现1次, 质量:perfect)
   🟢 riwzpus is nejrpus (出现1次, 质量:perfect)
   🟢 bodspus is baccpus (出现1次, 质量:perfect)
   🟢 nejrpus is baccpus (出现1次, 质量:perfect)
   🟢 zahcpus is babbpus (出现1次, 质量:perfect)
   🟢 nejrpus is babbpus (出现1次, 质量:perfect)
   🟢 x is babbpus and baccpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - nejrpus is baccpus and bokgpus
   - x is joslpus
   - soxhpus is nejrpus
   - vambpus is muqcpus and sezjpus
   - muqcpus is soxhpus
   - muqcpus is varxpus and canbpus
   - nejrpus is babbpus and dihjpus
   - nejrpus is baccpus and bokgpus and gihrpus
   - x is nakwpus
   - nejrpus is babbpus
   - fosnpus is widhpus and xesypus
   - bizrpus is nejrpus and nacfpus
   - keptpus is wanrpus
   - bizrpus is nejrpus
   - soxhpus is bizrpus
   - wanrpus is widhpus and xesypus and loxmpus
   - nictpus is fosnpus and mexbpus
   - soxhpus is babbpus and baccpus and bokgpus
   - muqcpus is varxpus
   - fosnpus is keptpus
   - widhpus is soxhpus
   - x is fosnpus
   - widhpus is babbpus and baccpus
   - joslpus is nictpus
   - widhpus is babbpus and baccpus and bokgpus
   - x is kobbpus
   - kobbpus is nakwpus
   - varxpus is soxhpus and xicypus
   - widhpus is muqcpus and sezjpus
   - nictpus is fosnpus
   - joslpus is fosnpus
   - fosnpus is widhpus and xesypus and loxmpus
   - nakwpus is joslpus
   - nakwpus is joslpus and mupgpus
   - joslpus is nictpus and reyjpus
   - x is babbpus and baccpus
   - x is widhpus and xesypus
   - varxpus is soxhpus
   - widhpus is muqcpus
   - widhpus is vambpus
   - soxhpus is bizrpus and tikkpus
   - x is widhpus
   - nejrpus is babbpus and baccpus and bokgpus
   - fosnpus is keptpus and wikdpus
   - keptpus is widhpus and xesypus and loxmpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus and baccpus (第7层)
   节点Coverage: 45/45 = 100.00%
   前提条件Coverage: 16/29 = 55.17%
   各推理层点亮比例:
     第1层: 16/16 = 100.00%
     第2层: 13/13 = 100.00%
     第3层: 7/7 = 100.00%
     第4层: 4/4 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 2/2 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/17 = 0.00%
   可推导节点: 17/17
   Strict Error Rate: 0/17 = 0.00%
   严格有效节点: 17/17

   详细分析:
     完美推理: 17 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 42/50
================================================================================
记录索引: 41
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_41.json
✅ 使用缓存结果:
   - 句子数: 34
   - 提取的语句数: 42
   - 初始条件数: 26

=== Statement提取完成 ===
总句子数: 34
成功提取: 34
失败提取: 0
总statements数: 42

=== 开始清洗Statement格式 ===
原始statements数: 42
清洗后statements数: 36
过滤掉的statements数: 6
清洗后的statements:
  1. [planning] x is babbpus
  2. [planning] x is baccpus
  3. [planning] x is bachpus
  4. [actual] x is babbpus
  5. [actual] x is pasxpus
  6. [actual] pasxpus is toljpus
  7. [actual] toljpus is xutfpus
  8. [actual] xutfpus is cectpus
  9. [actual] cectpus is wojrpus
  10. [actual] wojrpus is vegmpus
  11. [actual] vegmpus is zujfpus
  12. [actual] zujfpus is fijxpus
  13. [actual] fijxpus is raxfpus
  14. [actual] raxfpus is vekwpus
  15. [actual] vekwpus is babbpus
  16. [actual] x is babbpus
  17. [actual] x is baccpus
  18. [actual] x is malwpus
  19. [actual] malwpus is xeyjpus
  20. [actual] xeyjpus is wegrpus
  21. [actual] wegrpus is gumlpus
  22. [actual] gumlpus is rivypus
  23. [actual] rivypus is lehbpus
  24. [actual] lehbpus is keptpus
  25. [actual] keptpus is baccpus
  26. [actual] x is baccpus
  27. [actual] x is bachpus
  28. [actual] x is malwpus
  29. [actual] malwpus is xeyjpus
  30. [actual] xeyjpus is wegrpus
  31. [actual] wegrpus is gumlpus
  32. [actual] gumlpus is boscpus
  33. [actual] boscpus is mukypus
  34. [actual] mukypus is riktpus
  35. [actual] riktpus is bachpus
  36. [actual] x is all three categories

=== 开始标准化和解析节点 ===
清洗后statements数: 36
标准化后节点数: 35
过滤掉的无效实体数: 1
标准化后的节点:
  1. [planning] x → babbpus (原始: x is babbpus)
  2. [planning] x → baccpus (原始: x is baccpus)
  3. [planning] x → bachpus (原始: x is bachpus)
  4. [actual] x → babbpus (原始: x is babbpus)
  5. [actual] x → pasxpus (原始: x is pasxpus)
  6. [actual] pasxpus → toljpus (原始: pasxpus is toljpus)
  7. [actual] toljpus → xutfpus (原始: toljpus is xutfpus)
  8. [actual] xutfpus → cectpus (原始: xutfpus is cectpus)
  9. [actual] cectpus → wojrpus (原始: cectpus is wojrpus)
  10. [actual] wojrpus → vegmpus (原始: wojrpus is vegmpus)
  11. [actual] vegmpus → zujfpus (原始: vegmpus is zujfpus)
  12. [actual] zujfpus → fijxpus (原始: zujfpus is fijxpus)
  13. [actual] fijxpus → raxfpus (原始: fijxpus is raxfpus)
  14. [actual] raxfpus → vekwpus (原始: raxfpus is vekwpus)
  15. [actual] vekwpus → babbpus (原始: vekwpus is babbpus)
  16. [actual] x → babbpus (原始: x is babbpus)
  17. [actual] x → baccpus (原始: x is baccpus)
  18. [actual] x → malwpus (原始: x is malwpus)
  19. [actual] malwpus → xeyjpus (原始: malwpus is xeyjpus)
  20. [actual] xeyjpus → wegrpus (原始: xeyjpus is wegrpus)
  21. [actual] wegrpus → gumlpus (原始: wegrpus is gumlpus)
  22. [actual] gumlpus → rivypus (原始: gumlpus is rivypus)
  23. [actual] rivypus → lehbpus (原始: rivypus is lehbpus)
  24. [actual] lehbpus → keptpus (原始: lehbpus is keptpus)
  25. [actual] keptpus → baccpus (原始: keptpus is baccpus)
  26. [actual] x → baccpus (原始: x is baccpus)
  27. [actual] x → bachpus (原始: x is bachpus)
  28. [actual] x → malwpus (原始: x is malwpus)
  29. [actual] malwpus → xeyjpus (原始: malwpus is xeyjpus)
  30. [actual] xeyjpus → wegrpus (原始: xeyjpus is wegrpus)
  31. [actual] wegrpus → gumlpus (原始: wegrpus is gumlpus)
  32. [actual] gumlpus → boscpus (原始: gumlpus is boscpus)
  33. [actual] boscpus → mukypus (原始: boscpus is mukypus)
  34. [actual] mukypus → riktpus (原始: mukypus is riktpus)
  35. [actual] riktpus → bachpus (原始: riktpus is bachpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 38
[后处理] 加载LoG图，包含 38 个节点
  LoG节点 0: x is babbpus and baccpus and bachpus (规则: CI, 深度: 1)
  LoG节点 1: x is babbpus (规则: CE, 深度: 2)
  LoG节点 2: x is baccpus and bachpus (规则: CE, 深度: 2)
  LoG节点 3: x is babbpus and sacypus (规则: MP, 深度: 3)
  LoG节点 4: x is baccpus and bachpus and paxfpus (规则: MP, 深度: 3)
  LoG节点 5: x is vegmpus (规则: CE, 深度: 4)
  LoG节点 6: vegmpus is babbpus and sacypus (规则: CE, 深度: 4)
  LoG节点 7: x is gumlpus (规则: CE, 深度: 4)
  LoG节点 8: gumlpus is baccpus and bachpus and paxfpus (规则: CI, 深度: 4)
  LoG节点 9: x is vegmpus and qigjpus (规则: MP, 深度: 5)
  LoG节点 10: vegmpus is babbpus and sacypus and vakwpus (规则: MP, 深度: 5)
  LoG节点 11: x is gumlpus and gohzpus (规则: MP, 深度: 5)
  LoG节点 12: gumlpus is baccpus (规则: CE, 深度: 5)
  LoG节点 13: gumlpus is bachpus and paxfpus (规则: MP, 深度: 5)
  LoG节点 14: x is cectpus (规则: MP, 深度: 6)
  LoG节点 15: cectpus is vegmpus and qigjpus (规则: MP, 深度: 6)
  LoG节点 16: vegmpus is raxfpus (规则: MP, 深度: 6)
  LoG节点 17: raxfpus is babbpus and sacypus and vakwpus (规则: CI, 深度: 6)
  LoG节点 18: x is xeyjpus (规则: CE, 深度: 6)
  LoG节点 19: xeyjpus is gumlpus and gohzpus (规则: CE, 深度: 6)
  LoG节点 20: gumlpus is baccpus and cuyzpus (规则: MP, 深度: 6)
  LoG节点 21: gumlpus is mukypus (规则: CE, 深度: 6)
  LoG节点 22: mukypus is bachpus and paxfpus (规则: CI, 深度: 6)
  LoG节点 23: x is toljpus (规则: MP, 深度: 7)
  LoG节点 24: toljpus is cectpus (规则: MP, 深度: 7)
  LoG节点 25: cectpus is wojrpus (规则: CE, 深度: 7)
  LoG节点 26: wojrpus is vegmpus and qigjpus (规则: CE, 深度: 7)
  LoG节点 27: vegmpus is zujfpus (规则: CE, 深度: 7)
  LoG节点 28: zujfpus is raxfpus (规则: MP, 深度: 7)
  LoG节点 29: raxfpus is babbpus (规则: MP, 深度: 7)
  LoG节点 30: raxfpus is sacypus and vakwpus (规则: CI, 深度: 7)
  LoG节点 31: x is xeyjpus and guzjpus (规则: MP, 深度: 7)
  LoG节点 32: xeyjpus is gumlpus and gohzpus and yubrpus (规则: MP, 深度: 7)
  LoG节点 33: gumlpus is lehbpus (规则: MP, 深度: 7)
  LoG节点 34: lehbpus is baccpus and cuyzpus (规则: MP, 深度: 7)
  LoG节点 35: gumlpus is mukypus and vowbpus (规则: MP, 深度: 7)
  LoG节点 36: mukypus is bachpus (规则: MP, 深度: 7)
  LoG节点 37: mukypus is paxfpus (规则: CE, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 35
   - 初始条件数: 26
   - LoG图节点数: 38

📋 初始条件列表:
    1. lehbpus is keptpus
    2. pasxpus is toljpus
    3. vegmpus is zujfpus and bidvpus
    4. malwpus is xeyjpus and guzjpus
    5. boscpus is mukypus and vowbpus
    6. vekwpus is babbpus
    7. x is malwpus
    8. cectpus is wojrpus and mowjpus
    9. toljpus is xutfpus
   10. rivypus is lehbpus
   11. raxfpus is sacypus
   12. gumlpus is boscpus
   13. xutfpus is cectpus
   14. gumlpus is rivypus
   15. wojrpus is vegmpus and qigjpus and feljpus
   16. wegrpus is gumlpus and gohzpus and yubrpus
   17. xeyjpus is wegrpus
   18. keptpus is baccpus and cuyzpus
   19. mukypus is riktpus
   20. fijxpus is raxfpus
   21. zujfpus is fijxpus
   22. mukypus is paxfpus and takzpus
   23. raxfpus is vakwpus
   24. raxfpus is vekwpus
   25. riktpus is bachpus
   26. x is pasxpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 26 个前提节点

🔍 开始处理actual节点...

   节点 1: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is babbpus and sacypus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is vegmpus (深度4)
[子树点亮]     └─ 点亮依赖节点: vegmpus is babbpus and sacypus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is vegmpus and qigjpus (深度5)
[子树点亮]     └─ 点亮依赖节点: vegmpus is babbpus and sacypus and vakwpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is cectpus (深度6)
[子树点亮]     └─ 点亮依赖节点: cectpus is vegmpus and qigjpus (深度6)
[子树点亮]     └─ 点亮依赖节点: vegmpus is raxfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: raxfpus is babbpus and sacypus and vakwpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is toljpus (深度7)
[子树点亮]     └─ 点亮依赖节点: toljpus is cectpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cectpus is wojrpus (深度7)
[子树点亮]     └─ 点亮依赖节点: wojrpus is vegmpus and qigjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: vegmpus is zujfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: zujfpus is raxfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: raxfpus is babbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: raxfpus is sacypus and vakwpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 17 个节点
      ✅ 验证成功 + LoG匹配

   节点 2: x is pasxpus
      ↻ 重复节点，计数: 2

   节点 3: pasxpus is toljpus
      ↻ 重复节点，计数: 2

   节点 4: toljpus is xutfpus
      ↻ 重复节点，计数: 2

   节点 5: xutfpus is cectpus
      ↻ 重复节点，计数: 2

   节点 6: cectpus is wojrpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 7: wojrpus is vegmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wojrpus is vegmpus and qigjpus and feljpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wojrpus is vegmpus and qigjpus and feljpus

   节点 8: vegmpus is zujfpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 9: zujfpus is fijxpus
      ↻ 重复节点，计数: 2

   节点 10: fijxpus is raxfpus
      ↻ 重复节点，计数: 2

   节点 11: raxfpus is vekwpus
      ↻ 重复节点，计数: 2

   节点 12: vekwpus is babbpus
      ↻ 重复节点，计数: 2

   节点 13: x is babbpus
      ↻ 重复节点，计数: 2

   节点 14: x is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is malwpus → malwpus is baccpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is malwpus
  - 前提: malwpus is xeyjpus and guzjpus
  - 前提: xeyjpus is wegrpus
  - 前提: wegrpus is gumlpus and gohzpus and yubrpus
  - 前提: gumlpus is rivypus
  - 前提: rivypus is lehbpus
  - 前提: lehbpus is keptpus
  - 前提: keptpus is baccpus and cuyzpus
  ✓ 点亮LoG节点: x is gumlpus
[子树点亮]     └─ 点亮依赖节点: x is gumlpus and gohzpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is xeyjpus (深度6)
[子树点亮]     └─ 点亮依赖节点: xeyjpus is gumlpus and gohzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is xeyjpus and guzjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xeyjpus is gumlpus and gohzpus and yubrpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
  ✓ 点亮LoG节点: gumlpus is baccpus
[子树点亮]     └─ 点亮依赖节点: gumlpus is baccpus and cuyzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: gumlpus is lehbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: lehbpus is baccpus and cuyzpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
[后处理] 通过推理轨迹额外点亮了 2 个LoG节点

   节点 15: x is malwpus
      ↻ 重复节点，计数: 2

   节点 16: malwpus is xeyjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: malwpus is xeyjpus and guzjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: malwpus is xeyjpus and guzjpus

   节点 17: xeyjpus is wegrpus
      ↻ 重复节点，计数: 2

   节点 18: wegrpus is gumlpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wegrpus is gumlpus and gohzpus and yubrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wegrpus is gumlpus and gohzpus and yubrpus

   节点 19: gumlpus is rivypus
      ↻ 重复节点，计数: 2

   节点 20: rivypus is lehbpus
      ↻ 重复节点，计数: 2

   节点 21: lehbpus is keptpus
      ↻ 重复节点，计数: 2

   节点 22: keptpus is baccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: keptpus is baccpus and cuyzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: keptpus is baccpus and cuyzpus

   节点 23: x is baccpus
      ↻ 重复节点，计数: 2

   节点 24: x is bachpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is malwpus → malwpus is bachpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is malwpus
  - 前提: malwpus is xeyjpus
  - 前提: xeyjpus is wegrpus
  - 前提: wegrpus is gumlpus
  - 前提: gumlpus is boscpus
  - 前提: boscpus is mukypus and vowbpus
  - 前提: mukypus is riktpus
  - 前提: riktpus is bachpus
  ✓ 点亮LoG节点: gumlpus is mukypus
[子树点亮]     └─ 点亮依赖节点: gumlpus is mukypus and vowbpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
  ✓ 点亮LoG节点: mukypus is bachpus
[后处理] 通过推理轨迹额外点亮了 2 个LoG节点

   节点 25: x is malwpus
      ↻ 重复节点，计数: 3

   节点 26: malwpus is xeyjpus
      ↻ 重复节点，计数: 2

   节点 27: xeyjpus is wegrpus
      ↻ 重复节点，计数: 3

   节点 28: wegrpus is gumlpus
      ↻ 重复节点，计数: 2

   节点 29: gumlpus is boscpus
      ↻ 重复节点，计数: 2

   节点 30: boscpus is mukypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: boscpus is mukypus and vowbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: boscpus is mukypus and vowbpus

   节点 31: mukypus is riktpus
      ↻ 重复节点，计数: 2

   节点 32: riktpus is bachpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 32
   - 新增节点: 10
   - 更新已存在节点: 22
   - 点亮的LoG节点: 31

🎯 推理质量统计:
   - 完美推理: 10 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 38节点, 26前提, 复杂度1-26

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 36
   - 前提节点: 26
   - 推理节点: 10
   - 幻觉节点: 0
   - 点亮LoG节点: 31

✅ 推理节点详情:
   🟢 x is babbpus (出现2次, 质量:perfect)
   🟢 cectpus is wojrpus (出现1次, 质量:perfect)
   🟢 wojrpus is vegmpus (出现1次, 质量:perfect)
   🟢 vegmpus is zujfpus (出现1次, 质量:perfect)
   🟢 x is baccpus (出现2次, 质量:perfect)
   🟢 malwpus is xeyjpus (出现2次, 质量:perfect)
   🟢 wegrpus is gumlpus (出现2次, 质量:perfect)
   🟢 keptpus is baccpus (出现1次, 质量:perfect)
   🟢 x is bachpus (出现1次, 质量:perfect)
   🟢 boscpus is mukypus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - vegmpus is raxfpus
   - cectpus is vegmpus and qigjpus
   - vegmpus is babbpus and sacypus
   - wojrpus is vegmpus and qigjpus
   - gumlpus is baccpus and cuyzpus
   - x is babbpus and sacypus
   - x is xeyjpus
   - mukypus is bachpus
   - x is vegmpus
   - x is xeyjpus and guzjpus
   - x is cectpus
   - gumlpus is mukypus and vowbpus
   - toljpus is cectpus
   - gumlpus is mukypus
   - x is vegmpus and qigjpus
   - raxfpus is sacypus and vakwpus
   - gumlpus is lehbpus
   - x is toljpus
   - vegmpus is zujfpus
   - x is gumlpus and gohzpus
   - x is gumlpus
   - vegmpus is babbpus and sacypus and vakwpus
   - raxfpus is babbpus
   - cectpus is wojrpus
   - gumlpus is baccpus
   - lehbpus is baccpus and cuyzpus
   - raxfpus is babbpus and sacypus and vakwpus
   - xeyjpus is gumlpus and gohzpus
   - xeyjpus is gumlpus and gohzpus and yubrpus
   - x is babbpus
   - zujfpus is raxfpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 6/7 = 85.71%
   最深点亮节点: x is babbpus (第6层)
   节点Coverage: 31/38 = 81.58%
   前提条件Coverage: 16/26 = 61.54%
   各推理层点亮比例:
     第1层: 14/15 = 93.33%
     第2层: 8/9 = 88.89%
     第3层: 4/5 = 80.00%
     第4层: 3/4 = 75.00%
     第5层: 1/2 = 50.00%
     第6层: 1/2 = 50.00%
     第7层: 0/1 = 0.00%

🎯 计算Precision指标...
   Error Rate: 0/10 = 0.00%
   可推导节点: 10/10
   Strict Error Rate: 0/10 = 0.00%
   严格有效节点: 10/10

   详细分析:
     完美推理: 10 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 43/50
================================================================================
记录索引: 42
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_42.json
✅ 使用缓存结果:
   - 句子数: 5
   - 提取的语句数: 30
   - 初始条件数: 34

=== Statement提取完成 ===
总句子数: 5
成功提取: 5
失败提取: 0
总statements数: 30

=== 开始清洗Statement格式 ===
原始statements数: 30
清洗后statements数: 30
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 30
标准化后节点数: 30
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → relxpus (原始: x is relxpus)
  2. [actual] relxpus → lisgpus (原始: relxpus is lisgpus)
  3. [actual] lisgpus → nedcpus (原始: lisgpus is nedcpus)
  4. [actual] nedcpus → kijvpus (原始: nedcpus is kijvpus)
  5. [actual] kijvpus → jopzpus (原始: kijvpus is jopzpus)
  6. [actual] jopzpus → yopbpus (原始: jopzpus is yopbpus)
  7. [actual] yopbpus → dohgpus (原始: yopbpus is dohgpus)
  8. [actual] dohgpus → xorrpus (原始: dohgpus is xorrpus)
  9. [actual] xorrpus → jejxpus (原始: xorrpus is jejxpus)
  10. [actual] jejxpus → qifmpus (原始: jejxpus is qifmpus)
  11. [actual] qifmpus → vidbpus (原始: qifmpus is vidbpus)
  12. [actual] vidbpus → daqppus (原始: vidbpus is daqppus)
  13. [actual] daqppus → tegwpus (原始: daqppus is tegwpus)
  14. [actual] tegwpus → halrpus (原始: tegwpus is halrpus)
  15. [actual] halrpus → gecppus (原始: halrpus is gecppus)
  16. [actual] gecppus → jaggpus (原始: gecppus is jaggpus)
  17. [actual] jaggpus → koyfpus (原始: jaggpus is koyfpus)
  18. [actual] koyfpus → wobtpus (原始: koyfpus is wobtpus)
  19. [actual] wobtpus → roygpus (原始: wobtpus is roygpus)
  20. [actual] roygpus → cikfpus (原始: roygpus is cikfpus)
  21. [actual] cikfpus → pexgpus (原始: cikfpus is pexgpus)
  22. [actual] pexgpus → nusypus (原始: pexgpus is nusypus)
  23. [actual] nusypus → vuxrpus (原始: nusypus is vuxrpus)
  24. [actual] vuxrpus → yecxpus (原始: vuxrpus is yecxpus)
  25. [actual] yecxpus → gihlpus (原始: yecxpus is gihlpus)
  26. [actual] gihlpus → vetjpus (原始: gihlpus is vetjpus)
  27. [actual] vetjpus → liqfpus (原始: vetjpus is liqfpus)
  28. [actual] liqfpus → qirjpus (原始: liqfpus is qirjpus)
  29. [actual] qirjpus → babbpus (原始: qirjpus is babbpus)
  30. [actual] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 55
[后处理] 加载LoG图，包含 55 个节点
  LoG节点 0: x is babbpus (规则: MP, 深度: 1)
  LoG节点 1: x is nusypus (规则: MP, 深度: 2)
  LoG节点 2: nusypus is babbpus (规则: CE, 深度: 2)
  LoG节点 3: x is jopzpus (规则: CE, 深度: 3)
  LoG节点 4: jopzpus is nusypus (规则: MP, 深度: 3)
  LoG节点 5: nusypus is babbpus and kexlpus (规则: MP, 深度: 3)
  LoG节点 6: x is jopzpus and racxpus (规则: MP, 深度: 4)
  LoG节点 7: jopzpus is halrpus (规则: MP, 深度: 4)
  LoG节点 8: halrpus is nusypus (规则: MP, 深度: 4)
  LoG节点 9: nusypus is vetjpus (规则: CE, 深度: 4)
  LoG节点 10: vetjpus is babbpus and kexlpus (规则: CI, 深度: 4)
  LoG节点 11: x is nedcpus (规则: CE, 深度: 5)
  LoG节点 12: nedcpus is jopzpus and racxpus (规则: CE, 深度: 5)
  LoG节点 13: jopzpus is qifmpus (规则: MP, 深度: 5)
  LoG节点 14: qifmpus is halrpus (规则: CE, 深度: 5)
  LoG节点 15: halrpus is wobtpus (规则: MP, 深度: 5)
  LoG节点 16: wobtpus is nusypus (规则: MP, 深度: 5)
  LoG节点 17: nusypus is vetjpus and hufkpus (规则: MP, 深度: 5)
  LoG节点 18: vetjpus is babbpus (规则: CE, 深度: 5)
  LoG节点 19: vetjpus is kexlpus (规则: CE, 深度: 5)
  LoG节点 20: x is nedcpus and ciqjpus (规则: MP, 深度: 6)
  LoG节点 21: nedcpus is jopzpus and racxpus and xefnpus (规则: MP, 深度: 6)
  LoG节点 22: jopzpus is dohgpus (规则: CE, 深度: 6)
  LoG节点 23: dohgpus is qifmpus (规则: MP, 深度: 6)
  LoG节点 24: qifmpus is halrpus and qecppus (规则: MP, 深度: 6)
  LoG节点 25: halrpus is jaggpus (规则: CE, 深度: 6)
  LoG节点 26: jaggpus is wobtpus (规则: MP, 深度: 6)
  LoG节点 27: wobtpus is cikfpus (规则: CE, 深度: 6)
  LoG节点 28: cikfpus is nusypus (规则: CE, 深度: 6)
  LoG节点 29: nusypus is yecxpus (规则: MP, 深度: 6)
  LoG节点 30: yecxpus is vetjpus and hufkpus (规则: CI, 深度: 6)
  LoG节点 31: vetjpus is babbpus and xetgpus (规则: MP, 深度: 6)
  LoG节点 32: vetjpus is kexlpus and bepspus (规则: MP, 深度: 6)
  LoG节点 33: x is lisgpus (规则: MP, 深度: 7)
  LoG节点 34: lisgpus is nedcpus and ciqjpus (规则: CI, 深度: 7)
  LoG节点 35: nedcpus is kijvpus (规则: CE, 深度: 7)
  LoG节点 36: kijvpus is jopzpus and racxpus and xefnpus (规则: CE, 深度: 7)
  LoG节点 37: jopzpus is dohgpus and votxpus (规则: MP, 深度: 7)
  LoG节点 38: dohgpus is xorrpus (规则: CE, 深度: 7)
  LoG节点 39: xorrpus is qifmpus (规则: MP, 深度: 7)
  LoG节点 40: qifmpus is daqppus (规则: MP, 深度: 7)
  LoG节点 41: daqppus is halrpus and qecppus (规则: MP, 深度: 7)
  LoG节点 42: halrpus is jaggpus and wahppus (规则: MP, 深度: 7)
  LoG节点 43: jaggpus is koyfpus (规则: CE, 深度: 7)
  LoG节点 44: koyfpus is wobtpus (规则: CE, 深度: 7)
  LoG节点 45: wobtpus is cikfpus and sehwpus (规则: MP, 深度: 7)
  LoG节点 46: cikfpus is nusypus and tawcpus (规则: MP, 深度: 7)
  LoG节点 47: nusypus is vuxrpus (规则: CE, 深度: 7)
  LoG节点 48: vuxrpus is yecxpus (规则: CE, 深度: 7)
  LoG节点 49: yecxpus is vetjpus (规则: MP, 深度: 7)
  LoG节点 50: yecxpus is hufkpus (规则: MP, 深度: 7)
  LoG节点 51: vetjpus is liqfpus (规则: CE, 深度: 7)
  LoG节点 52: liqfpus is babbpus and xetgpus (规则: MP, 深度: 7)
  LoG节点 53: vetjpus is tugdpus (规则: CE, 深度: 7)
  LoG节点 54: tugdpus is kexlpus and bepspus (规则: CE, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 30
   - 初始条件数: 34
   - LoG图节点数: 55

📋 初始条件列表:
    1. cikfpus is pexgpus
    2. wobtpus is roygpus
    3. kijvpus is jopzpus and racxpus and xefnpus and hicppus
    4. vuxrpus is yecxpus and mijdpus
    5. x is relxpus
    6. vetjpus is tugdpus and kutmpus
    7. yecxpus is yitcpus
    8. halrpus is gecppus
    9. vidbpus is daqppus
   10. qirjpus is babbpus and xetgpus
   11. yitcpus is hufkpus
   12. lisgpus is ciqjpus
   13. jopzpus is yopbpus
   14. vetjpus is liqfpus and demkpus
   15. tegwpus is halrpus and qecppus
   16. nusypus is vuxrpus and nobnpus
   17. jaggpus is koyfpus and jepxpus
   18. koyfpus is wobtpus and nestpus
   19. tugdpus is kexlpus and bepspus and pugppus
   20. jejxpus is qifmpus
   21. liqfpus is qirjpus
   22. gihlpus is vetjpus
   23. yopbpus is dohgpus and votxpus
   24. dohgpus is xorrpus and joslpus
   25. pexgpus is nusypus and tawcpus
   26. gecppus is jaggpus and wahppus
   27. xorrpus is jejxpus
   28. yecxpus is gihlpus
   29. roygpus is cikfpus and sehwpus
   30. relxpus is lisgpus
   31. daqppus is tegwpus
   32. qifmpus is vidbpus
   33. lisgpus is nedcpus
   34. nedcpus is kijvpus and nuxnpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 34 个前提节点

🔍 开始处理actual节点...

   节点 1: x is relxpus
      ↻ 重复节点，计数: 2

   节点 2: relxpus is lisgpus
      ↻ 重复节点，计数: 2

   节点 3: lisgpus is nedcpus
      ↻ 重复节点，计数: 2

   节点 4: nedcpus is kijvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: nedcpus is kijvpus
      ✅ 验证成功 + LoG匹配

   节点 5: kijvpus is jopzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kijvpus is jopzpus and racxpus and xefnpus and hicppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kijvpus is jopzpus and racxpus and xefnpus and hicppus
  ✓ 点亮LoG节点: kijvpus is jopzpus and racxpus and xefnpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 6: jopzpus is yopbpus
      ↻ 重复节点，计数: 2

   节点 7: yopbpus is dohgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yopbpus is dohgpus and votxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yopbpus is dohgpus and votxpus

   节点 8: dohgpus is xorrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: dohgpus is xorrpus
      ✅ 验证成功 + LoG匹配

   节点 9: xorrpus is jejxpus
      ↻ 重复节点，计数: 2

   节点 10: jejxpus is qifmpus
      ↻ 重复节点，计数: 2

   节点 11: qifmpus is vidbpus
      ↻ 重复节点，计数: 2

   节点 12: vidbpus is daqppus
      ↻ 重复节点，计数: 2

   节点 13: daqppus is tegwpus
      ↻ 重复节点，计数: 2

   节点 14: tegwpus is halrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: tegwpus is halrpus and qecppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: tegwpus is halrpus and qecppus

   节点 15: halrpus is gecppus
      ↻ 重复节点，计数: 2

   节点 16: gecppus is jaggpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gecppus is jaggpus and wahppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gecppus is jaggpus and wahppus

   节点 17: jaggpus is koyfpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: jaggpus is koyfpus
      ✅ 验证成功 + LoG匹配

   节点 18: koyfpus is wobtpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: koyfpus is wobtpus
      ✅ 验证成功 + LoG匹配

   节点 19: wobtpus is roygpus
      ↻ 重复节点，计数: 2

   节点 20: roygpus is cikfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: roygpus is cikfpus and sehwpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: roygpus is cikfpus and sehwpus

   节点 21: cikfpus is pexgpus
      ↻ 重复节点，计数: 2

   节点 22: pexgpus is nusypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: pexgpus is nusypus and tawcpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: pexgpus is nusypus and tawcpus

   节点 23: nusypus is vuxrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: nusypus is vuxrpus
      ✅ 验证成功 + LoG匹配

   节点 24: vuxrpus is yecxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: vuxrpus is yecxpus
      ✅ 验证成功 + LoG匹配

   节点 25: yecxpus is gihlpus
      ↻ 重复节点，计数: 2

   节点 26: gihlpus is vetjpus
      ↻ 重复节点，计数: 2

   节点 27: vetjpus is liqfpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: vetjpus is liqfpus
      ✅ 验证成功 + LoG匹配

   节点 28: liqfpus is qirjpus
      ↻ 重复节点，计数: 2

   节点 29: qirjpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qirjpus is babbpus and xetgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qirjpus is babbpus and xetgpus

   节点 30: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is nusypus (深度2)
[子树点亮]     └─ 点亮依赖节点: nusypus is babbpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is jopzpus (深度3)
[子树点亮]     └─ 点亮依赖节点: jopzpus is nusypus (深度3)
[子树点亮]     └─ 点亮依赖节点: nusypus is babbpus and kexlpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is jopzpus and racxpus (深度4)
[子树点亮]     └─ 点亮依赖节点: jopzpus is halrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: halrpus is nusypus (深度4)
[子树点亮]     └─ 点亮依赖节点: nusypus is vetjpus (深度4)
[子树点亮]     └─ 点亮依赖节点: vetjpus is babbpus and kexlpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is nedcpus (深度5)
[子树点亮]     └─ 点亮依赖节点: nedcpus is jopzpus and racxpus (深度5)
[子树点亮]     └─ 点亮依赖节点: jopzpus is qifmpus (深度5)
[子树点亮]     └─ 点亮依赖节点: qifmpus is halrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: halrpus is wobtpus (深度5)
[子树点亮]     └─ 点亮依赖节点: wobtpus is nusypus (深度5)
[子树点亮]     └─ 点亮依赖节点: nusypus is vetjpus and hufkpus (深度5)
[子树点亮]     └─ 点亮依赖节点: vetjpus is babbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: vetjpus is kexlpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is nedcpus and ciqjpus (深度6)
[子树点亮]     └─ 点亮依赖节点: nedcpus is jopzpus and racxpus and xefnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jopzpus is dohgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: dohgpus is qifmpus (深度6)
[子树点亮]     └─ 点亮依赖节点: qifmpus is halrpus and qecppus (深度6)
[子树点亮]     └─ 点亮依赖节点: halrpus is jaggpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jaggpus is wobtpus (深度6)
[子树点亮]     └─ 点亮依赖节点: wobtpus is cikfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: cikfpus is nusypus (深度6)
[子树点亮]     └─ 点亮依赖节点: nusypus is yecxpus (深度6)
[子树点亮]     └─ 点亮依赖节点: yecxpus is vetjpus and hufkpus (深度6)
[子树点亮]     └─ 点亮依赖节点: vetjpus is babbpus and xetgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: vetjpus is kexlpus and bepspus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is lisgpus (深度7)
[子树点亮]     └─ 点亮依赖节点: lisgpus is nedcpus and ciqjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jopzpus is dohgpus and votxpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xorrpus is qifmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qifmpus is daqppus (深度7)
[子树点亮]     └─ 点亮依赖节点: daqppus is halrpus and qecppus (深度7)
[子树点亮]     └─ 点亮依赖节点: halrpus is jaggpus and wahppus (深度7)
[子树点亮]     └─ 点亮依赖节点: wobtpus is cikfpus and sehwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: cikfpus is nusypus and tawcpus (深度7)
[子树点亮]     └─ 点亮依赖节点: yecxpus is vetjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: yecxpus is hufkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: liqfpus is babbpus and xetgpus (深度7)
[子树点亮]     └─ 点亮依赖节点: vetjpus is tugdpus (深度7)
[子树点亮]     └─ 点亮依赖节点: tugdpus is kexlpus and bepspus (深度7)
[后处理]   └─ 自动点亮依赖子树: 46 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 30
   - 新增节点: 15
   - 更新已存在节点: 15
   - 点亮的LoG节点: 55

🎯 推理质量统计:
   - 完美推理: 15 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 55节点, 34前提, 复杂度1-34

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 49
   - 前提节点: 34
   - 推理节点: 15
   - 幻觉节点: 0
   - 点亮LoG节点: 55

✅ 推理节点详情:
   🟢 nedcpus is kijvpus (出现1次, 质量:perfect)
   🟢 kijvpus is jopzpus (出现1次, 质量:perfect)
   🟢 yopbpus is dohgpus (出现1次, 质量:perfect)
   🟢 dohgpus is xorrpus (出现1次, 质量:perfect)
   🟢 tegwpus is halrpus (出现1次, 质量:perfect)
   🟢 gecppus is jaggpus (出现1次, 质量:perfect)
   🟢 jaggpus is koyfpus (出现1次, 质量:perfect)
   🟢 koyfpus is wobtpus (出现1次, 质量:perfect)
   🟢 roygpus is cikfpus (出现1次, 质量:perfect)
   🟢 pexgpus is nusypus (出现1次, 质量:perfect)
   🟢 nusypus is vuxrpus (出现1次, 质量:perfect)
   🟢 vuxrpus is yecxpus (出现1次, 质量:perfect)
   🟢 vetjpus is liqfpus (出现1次, 质量:perfect)
   🟢 qirjpus is babbpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - nedcpus is jopzpus and racxpus and xefnpus
   - qifmpus is daqppus
   - nusypus is yecxpus
   - halrpus is jaggpus
   - jaggpus is wobtpus
   - cikfpus is nusypus
   - jopzpus is nusypus
   - jopzpus is qifmpus
   - jaggpus is koyfpus
   - nedcpus is kijvpus
   - jopzpus is dohgpus
   - vetjpus is kexlpus and bepspus
   - koyfpus is wobtpus
   - wobtpus is nusypus
   - xorrpus is qifmpus
   - jopzpus is dohgpus and votxpus
   - qifmpus is halrpus
   - vuxrpus is yecxpus
   - wobtpus is cikfpus and sehwpus
   - vetjpus is tugdpus
   - halrpus is wobtpus
   - halrpus is jaggpus and wahppus
   - x is jopzpus and racxpus
   - kijvpus is jopzpus and racxpus and xefnpus
   - nusypus is vetjpus
   - wobtpus is cikfpus
   - yecxpus is vetjpus and hufkpus
   - x is nusypus
   - tugdpus is kexlpus and bepspus
   - dohgpus is xorrpus
   - nusypus is vuxrpus
   - vetjpus is babbpus and kexlpus
   - nusypus is babbpus
   - x is nedcpus and ciqjpus
   - dohgpus is qifmpus
   - vetjpus is kexlpus
   - cikfpus is nusypus and tawcpus
   - vetjpus is liqfpus
   - qifmpus is halrpus and qecppus
   - lisgpus is nedcpus and ciqjpus
   - x is lisgpus
   - daqppus is halrpus and qecppus
   - nusypus is babbpus and kexlpus
   - liqfpus is babbpus and xetgpus
   - jopzpus is halrpus
   - halrpus is nusypus
   - nusypus is vetjpus and hufkpus
   - nedcpus is jopzpus and racxpus
   - yecxpus is vetjpus
   - yecxpus is hufkpus
   - x is jopzpus
   - vetjpus is babbpus and xetgpus
   - x is babbpus
   - x is nedcpus
   - vetjpus is babbpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus (第7层)
   节点Coverage: 55/55 = 100.00%
   前提条件Coverage: 15/34 = 44.12%
   各推理层点亮比例:
     第1层: 22/22 = 100.00%
     第2层: 13/13 = 100.00%
     第3层: 9/9 = 100.00%
     第4层: 5/5 = 100.00%
     第5层: 3/3 = 100.00%
     第6层: 2/2 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/15 = 0.00%
   可推导节点: 15/15
   Strict Error Rate: 0/15 = 0.00%
   严格有效节点: 15/15

   详细分析:
     完美推理: 15 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 44/50
================================================================================
记录索引: 43
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_43.json
✅ 使用缓存结果:
   - 句子数: 30
   - 提取的语句数: 32
   - 初始条件数: 25

=== Statement提取完成 ===
总句子数: 30
成功提取: 30
失败提取: 0
总statements数: 32

=== 开始清洗Statement格式 ===
原始statements数: 32
清洗后statements数: 32
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 32
标准化后节点数: 32
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babbpus (原始: x is babbpus)
  2. [actual] x → zimlpus (原始: x is zimlpus)
  3. [planning] zimlpus → babbpus (原始: zimlpus is babbpus)
  4. [actual] x → zimlpus (原始: x is zimlpus)
  5. [actual] zimlpus → xadbpus (原始: zimlpus is xadbpus)
  6. [actual] xadbpus → bupnpus (原始: xadbpus is bupnpus)
  7. [actual] bupnpus → mahkpus (原始: bupnpus is mahkpus)
  8. [actual] mahkpus → nagzpus (原始: mahkpus is nagzpus)
  9. [actual] nagzpus → tilhpus (原始: nagzpus is tilhpus)
  10. [actual] tilhpus → rirjpus (原始: tilhpus is rirjpus)
  11. [actual] rirjpus → mefjpus (原始: rirjpus is mefjpus)
  12. [actual] mefjpus → quhnpus (原始: mefjpus is quhnpus)
  13. [actual] quhnpus → lovwpus (原始: quhnpus is lovwpus)
  14. [actual] lovwpus → wadmpus (原始: lovwpus is wadmpus)
  15. [actual] wadmpus → xubvpus (原始: wadmpus is xubvpus)
  16. [actual] xubvpus → tobjpus (原始: xubvpus is tobjpus)
  17. [actual] tobjpus → kilwpus (原始: tobjpus is kilwpus)
  18. [actual] kilwpus → zevwpus (原始: kilwpus is zevwpus)
  19. [actual] zevwpus → nirnpus (原始: zevwpus is nirnpus)
  20. [actual] nirnpus → torppus (原始: nirnpus is torppus)
  21. [actual] torppus → foggpus (原始: torppus is foggpus)
  22. [actual] foggpus → sabppus (原始: foggpus is sabppus)
  23. [actual] sabppus → xoxkpus (原始: sabppus is xoxkpus)
  24. [actual] xoxkpus → bewqpus (原始: xoxkpus is bewqpus)
  25. [actual] bewqpus → yenkpus (原始: bewqpus is yenkpus)
  26. [actual] yenkpus → babbpus (原始: yenkpus is babbpus)
  27. [actual] zimlpus → yenkpus (原始: zimlpus is yenkpus)
  28. [actual] yenkpus → babbpus (原始: yenkpus is babbpus)
  29. [actual] zimlpus → yenkpus (原始: zimlpus is yenkpus)
  30. [actual] yenkpus → babbpus (原始: yenkpus is babbpus)
  31. [actual] zimlpus → babbpus (原始: zimlpus is babbpus)
  32. [actual] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 42
[后处理] 加载LoG图，包含 42 个节点
  LoG节点 0: x is babbpus (规则: MP, 深度: 1)
  LoG节点 1: x is quhnpus (规则: CE, 深度: 2)
  LoG节点 2: quhnpus is babbpus (规则: MP, 深度: 2)
  LoG节点 3: x is quhnpus and huykpus (规则: MP, 深度: 3)
  LoG节点 4: quhnpus is torppus (规则: CE, 深度: 3)
  LoG节点 5: torppus is babbpus (规则: CE, 深度: 3)
  LoG节点 6: x is mahkpus (规则: CE, 深度: 4)
  LoG节点 7: mahkpus is quhnpus and huykpus (规则: CE, 深度: 4)
  LoG节点 8: quhnpus is torppus and jasjpus (规则: MP, 深度: 4)
  LoG节点 9: torppus is babbpus and qogfpus (规则: MP, 深度: 4)
  LoG节点 10: x is mahkpus and wezypus (规则: MP, 深度: 5)
  LoG节点 11: mahkpus is quhnpus and huykpus and hucwpus (规则: MP, 深度: 5)
  LoG节点 12: quhnpus is zevwpus (规则: MP, 深度: 5)
  LoG节点 13: zevwpus is torppus and jasjpus (规则: CI, 深度: 5)
  LoG节点 14: torppus is xoxkpus (规则: CE, 深度: 5)
  LoG节点 15: xoxkpus is babbpus and qogfpus (规则: CE, 深度: 5)
  LoG节点 16: x is xadbpus (规则: CE, 深度: 6)
  LoG节点 17: xadbpus is mahkpus and wezypus (规则: CE, 深度: 6)
  LoG节点 18: mahkpus is rirjpus (规则: MP, 深度: 6)
  LoG节点 19: rirjpus is quhnpus and huykpus and hucwpus (规则: CE, 深度: 6)
  LoG节点 20: quhnpus is tobjpus (规则: MP, 深度: 6)
  LoG节点 21: tobjpus is zevwpus (规则: MP, 深度: 6)
  LoG节点 22: zevwpus is torppus (规则: MP, 深度: 6)
  LoG节点 23: zevwpus is jasjpus (规则: CE, 深度: 6)
  LoG节点 24: torppus is xoxkpus and yeqtpus (规则: MP, 深度: 6)
  LoG节点 25: xoxkpus is babbpus and qogfpus and pezvpus (规则: MP, 深度: 6)
  LoG节点 26: x is xadbpus and hubvpus (规则: MP, 深度: 7)
  LoG节点 27: xadbpus is mahkpus and wezypus and kixmpus (规则: MP, 深度: 7)
  LoG节点 28: mahkpus is nagzpus (规则: CE, 深度: 7)
  LoG节点 29: nagzpus is rirjpus (规则: MP, 深度: 7)
  LoG节点 30: rirjpus is quhnpus and huykpus and hucwpus and yazzpus (规则: MP, 深度: 7)
  LoG节点 31: quhnpus is wadmpus (规则: MP, 深度: 7)
  LoG节点 32: wadmpus is tobjpus (规则: MP, 深度: 7)
  LoG节点 33: tobjpus is kilwpus (规则: CE, 深度: 7)
  LoG节点 34: kilwpus is zevwpus (规则: CE, 深度: 7)
  LoG节点 35: zevwpus is nirnpus (规则: CE, 深度: 7)
  LoG节点 36: nirnpus is torppus (规则: CE, 深度: 7)
  LoG节点 37: zevwpus is jasjpus and votmpus (规则: MP, 深度: 7)
  LoG节点 38: torppus is sabppus (规则: MP, 深度: 7)
  LoG节点 39: sabppus is xoxkpus and yeqtpus (规则: CE, 深度: 7)
  LoG节点 40: xoxkpus is yenkpus (规则: MP, 深度: 7)
  LoG节点 41: yenkpus is babbpus and qogfpus and pezvpus (规则: CE, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 32
   - 初始条件数: 25
   - LoG图节点数: 42

📋 初始条件列表:
    1. zimlpus is xadbpus and hubvpus
    2. foggpus is sabppus
    3. kilwpus is zevwpus and tonrpus
    4. zevwpus is nirnpus and yevlpus
    5. zevwpus is cupkpus
    6. mefjpus is quhnpus and huykpus and hucwpus and yazzpus
    7. x is zimlpus
    8. wadmpus is xubvpus
    9. quhnpus is lovwpus
   10. bupnpus is mahkpus and wezypus and kixmpus
   11. nirnpus is torppus and doztpus
   12. yenkpus is babbpus and qogfpus and pezvpus and vesdpus
   13. xubvpus is tobjpus
   14. sabppus is xoxkpus and yeqtpus and finbpus
   15. xadbpus is bupnpus
   16. cupkpus is jasjpus and votmpus
   17. torppus is foggpus
   18. tobjpus is kilwpus and cosbpus
   19. xoxkpus is bewqpus
   20. tilhpus is rirjpus
   21. lovwpus is wadmpus
   22. nagzpus is tilhpus
   23. bewqpus is yenkpus
   24. rirjpus is mefjpus
   25. mahkpus is nagzpus and noyjpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 25 个前提节点

🔍 开始处理actual节点...

   节点 1: x is zimlpus
      ↻ 重复节点，计数: 2

   节点 2: x is zimlpus
      ↻ 重复节点，计数: 3

   节点 3: zimlpus is xadbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zimlpus is xadbpus and hubvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zimlpus is xadbpus and hubvpus

   节点 4: xadbpus is bupnpus
      ↻ 重复节点，计数: 2

   节点 5: bupnpus is mahkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: bupnpus is mahkpus and wezypus and kixmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: bupnpus is mahkpus and wezypus and kixmpus

   节点 6: mahkpus is nagzpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: mahkpus is nagzpus
      ✅ 验证成功 + LoG匹配

   节点 7: nagzpus is tilhpus
      ↻ 重复节点，计数: 2

   节点 8: tilhpus is rirjpus
      ↻ 重复节点，计数: 2

   节点 9: rirjpus is mefjpus
      ↻ 重复节点，计数: 2

   节点 10: mefjpus is quhnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: mefjpus is quhnpus and huykpus and hucwpus and yazzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: mefjpus is quhnpus and huykpus and hucwpus and yazzpus

   节点 11: quhnpus is lovwpus
      ↻ 重复节点，计数: 2

   节点 12: lovwpus is wadmpus
      ↻ 重复节点，计数: 2

   节点 13: wadmpus is xubvpus
      ↻ 重复节点，计数: 2

   节点 14: xubvpus is tobjpus
      ↻ 重复节点，计数: 2

   节点 15: tobjpus is kilwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: tobjpus is kilwpus
      ✅ 验证成功 + LoG匹配

   节点 16: kilwpus is zevwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: kilwpus is zevwpus
      ✅ 验证成功 + LoG匹配

   节点 17: zevwpus is nirnpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: zevwpus is nirnpus
      ✅ 验证成功 + LoG匹配

   节点 18: nirnpus is torppus
      🔍 验证新节点...
[后处理] 点亮LoG节点: nirnpus is torppus
      ✅ 验证成功 + LoG匹配

   节点 19: torppus is foggpus
      ↻ 重复节点，计数: 2

   节点 20: foggpus is sabppus
      ↻ 重复节点，计数: 2

   节点 21: sabppus is xoxkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: sabppus is xoxkpus and yeqtpus and finbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: sabppus is xoxkpus and yeqtpus and finbpus
  ✓ 点亮LoG节点: sabppus is xoxkpus and yeqtpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 22: xoxkpus is bewqpus
      ↻ 重复节点，计数: 2

   节点 23: bewqpus is yenkpus
      ↻ 重复节点，计数: 2

   节点 24: yenkpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yenkpus is babbpus and qogfpus and pezvpus and vesdpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yenkpus is babbpus and qogfpus and pezvpus and vesdpus
  ✓ 点亮LoG节点: yenkpus is babbpus and qogfpus and pezvpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 25: zimlpus is yenkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: zimlpus is xadbpus → xadbpus is yenkpus
[后处理] 基于推理轨迹点亮节点，使用了 21 个前提条件:
  - 前提: zimlpus is xadbpus
  - 前提: xadbpus is bupnpus
  - 前提: bupnpus is mahkpus
  - 前提: mahkpus is nagzpus
  - 前提: nagzpus is tilhpus
  - 前提: tilhpus is rirjpus
  - 前提: rirjpus is mefjpus
  - 前提: mefjpus is quhnpus
  - 前提: quhnpus is lovwpus
  - 前提: lovwpus is wadmpus
  - 前提: wadmpus is xubvpus
  - 前提: xubvpus is tobjpus
  - 前提: tobjpus is kilwpus
  - 前提: kilwpus is zevwpus
  - 前提: zevwpus is nirnpus
  - 前提: nirnpus is torppus
  - 前提: torppus is foggpus
  - 前提: foggpus is sabppus
  - 前提: sabppus is xoxkpus
  - 前提: xoxkpus is bewqpus
  - 前提: bewqpus is yenkpus
  ✓ 点亮LoG节点: quhnpus is torppus
[子树点亮]     └─ 点亮依赖节点: quhnpus is torppus and jasjpus (深度4)
[子树点亮]     └─ 点亮依赖节点: quhnpus is zevwpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zevwpus is torppus and jasjpus (深度5)
[子树点亮]     └─ 点亮依赖节点: quhnpus is tobjpus (深度6)
[子树点亮]     └─ 点亮依赖节点: tobjpus is zevwpus (深度6)
[子树点亮]     └─ 点亮依赖节点: zevwpus is torppus (深度6)
[子树点亮]     └─ 点亮依赖节点: zevwpus is jasjpus (深度6)
[子树点亮]     └─ 点亮依赖节点: quhnpus is wadmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: wadmpus is tobjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: zevwpus is jasjpus and votmpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 10 个节点
  ✓ 点亮LoG节点: torppus is xoxkpus
[子树点亮]     └─ 点亮依赖节点: torppus is xoxkpus and yeqtpus (深度6)
[子树点亮]     └─ 点亮依赖节点: torppus is sabppus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
  ✓ 点亮LoG节点: mahkpus is rirjpus
[子树点亮]     └─ 点亮依赖节点: nagzpus is rirjpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
  ✓ 点亮LoG节点: xoxkpus is yenkpus
[后处理] 通过推理轨迹额外点亮了 4 个LoG节点

   节点 26: yenkpus is babbpus
      ↻ 重复节点，计数: 2

   节点 27: zimlpus is yenkpus
      ↻ 重复节点，计数: 2

   节点 28: yenkpus is babbpus
      ↻ 重复节点，计数: 3

   节点 29: zimlpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: zimlpus is xadbpus → xadbpus is babbpus
[后处理] 基于推理轨迹点亮节点，使用了 22 个前提条件:
  - 前提: zimlpus is xadbpus
  - 前提: xadbpus is bupnpus
  - 前提: bupnpus is mahkpus
  - 前提: mahkpus is nagzpus
  - 前提: nagzpus is tilhpus
  - 前提: tilhpus is rirjpus
  - 前提: rirjpus is mefjpus
  - 前提: mefjpus is quhnpus
  - 前提: quhnpus is lovwpus
  - 前提: lovwpus is wadmpus
  - 前提: wadmpus is xubvpus
  - 前提: xubvpus is tobjpus
  - 前提: tobjpus is kilwpus
  - 前提: kilwpus is zevwpus
  - 前提: zevwpus is nirnpus
  - 前提: nirnpus is torppus
  - 前提: torppus is foggpus
  - 前提: foggpus is sabppus
  - 前提: sabppus is xoxkpus
  - 前提: xoxkpus is bewqpus
  - 前提: bewqpus is yenkpus
  - 前提: yenkpus is babbpus
  ✓ 点亮LoG节点: quhnpus is babbpus
[子树点亮]     └─ 点亮依赖节点: torppus is babbpus (深度3)
[子树点亮]     └─ 点亮依赖节点: torppus is babbpus and qogfpus (深度4)
[子树点亮]     └─ 点亮依赖节点: xoxkpus is babbpus and qogfpus (深度5)
[子树点亮]     └─ 点亮依赖节点: xoxkpus is babbpus and qogfpus and pezvpus (深度6)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 30: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is quhnpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is quhnpus and huykpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is mahkpus (深度4)
[子树点亮]     └─ 点亮依赖节点: mahkpus is quhnpus and huykpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is mahkpus and wezypus (深度5)
[子树点亮]     └─ 点亮依赖节点: mahkpus is quhnpus and huykpus and hucwpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is xadbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: xadbpus is mahkpus and wezypus (深度6)
[子树点亮]     └─ 点亮依赖节点: rirjpus is quhnpus and huykpus and hucwpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is xadbpus and hubvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: xadbpus is mahkpus and wezypus and kixmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: rirjpus is quhnpus and huykpus and hucwpus and yazzpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 12 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 30
   - 新增节点: 13
   - 更新已存在节点: 17
   - 点亮的LoG节点: 42

🎯 推理质量统计:
   - 完美推理: 13 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 42节点, 25前提, 复杂度1-25

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 38
   - 前提节点: 25
   - 推理节点: 13
   - 幻觉节点: 0
   - 点亮LoG节点: 42

✅ 推理节点详情:
   🟢 zimlpus is xadbpus (出现1次, 质量:perfect)
   🟢 bupnpus is mahkpus (出现1次, 质量:perfect)
   🟢 mahkpus is nagzpus (出现1次, 质量:perfect)
   🟢 mefjpus is quhnpus (出现1次, 质量:perfect)
   🟢 tobjpus is kilwpus (出现1次, 质量:perfect)
   🟢 kilwpus is zevwpus (出现1次, 质量:perfect)
   🟢 zevwpus is nirnpus (出现1次, 质量:perfect)
   🟢 nirnpus is torppus (出现1次, 质量:perfect)
   🟢 sabppus is xoxkpus (出现1次, 质量:perfect)
   🟢 yenkpus is babbpus (出现3次, 质量:perfect)
   🟢 zimlpus is yenkpus (出现2次, 质量:perfect)
   🟢 zimlpus is babbpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - mahkpus is nagzpus
   - zevwpus is jasjpus
   - torppus is xoxkpus
   - xoxkpus is babbpus and qogfpus and pezvpus
   - yenkpus is babbpus and qogfpus and pezvpus
   - quhnpus is wadmpus
   - torppus is babbpus and qogfpus
   - zevwpus is jasjpus and votmpus
   - x is mahkpus
   - nagzpus is rirjpus
   - mahkpus is quhnpus and huykpus
   - zevwpus is torppus and jasjpus
   - zevwpus is nirnpus
   - torppus is xoxkpus and yeqtpus
   - zevwpus is torppus
   - x is xadbpus
   - x is quhnpus
   - tobjpus is zevwpus
   - xoxkpus is yenkpus
   - rirjpus is quhnpus and huykpus and hucwpus and yazzpus
   - x is mahkpus and wezypus
   - torppus is babbpus
   - quhnpus is torppus
   - tobjpus is kilwpus
   - rirjpus is quhnpus and huykpus and hucwpus
   - xoxkpus is babbpus and qogfpus
   - sabppus is xoxkpus and yeqtpus
   - x is quhnpus and huykpus
   - quhnpus is zevwpus
   - wadmpus is tobjpus
   - quhnpus is tobjpus
   - quhnpus is babbpus
   - mahkpus is quhnpus and huykpus and hucwpus
   - xadbpus is mahkpus and wezypus
   - xadbpus is mahkpus and wezypus and kixmpus
   - x is xadbpus and hubvpus
   - torppus is sabppus
   - mahkpus is rirjpus
   - quhnpus is torppus and jasjpus
   - x is babbpus
   - kilwpus is zevwpus
   - nirnpus is torppus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus (第7层)
   节点Coverage: 42/42 = 100.00%
   前提条件Coverage: 13/25 = 52.00%
   各推理层点亮比例:
     第1层: 16/16 = 100.00%
     第2层: 10/10 = 100.00%
     第3层: 6/6 = 100.00%
     第4层: 4/4 = 100.00%
     第5层: 3/3 = 100.00%
     第6层: 2/2 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/13 = 0.00%
   可推导节点: 13/13
   Strict Error Rate: 0/13 = 0.00%
   严格有效节点: 13/13

   详细分析:
     完美推理: 13 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 45/50
================================================================================
记录索引: 44
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_44.json
✅ 使用缓存结果:
   - 句子数: 5
   - 提取的语句数: 28
   - 初始条件数: 22

=== Statement提取完成 ===
总句子数: 5
成功提取: 5
失败提取: 0
总statements数: 28

=== 开始清洗Statement格式 ===
原始statements数: 28
清洗后statements数: 28
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 28
标准化后节点数: 28
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → hedbpus (原始: x is hedbpus)
  2. [actual] hedbpus → fajkpus (原始: hedbpus is fajkpus)
  3. [actual] fajkpus → tifqpus (原始: fajkpus is tifqpus)
  4. [actual] tifqpus → qakzpus (原始: tifqpus is qakzpus)
  5. [actual] qakzpus → xexrpus (原始: qakzpus is xexrpus)
  6. [actual] xexrpus → gifrpus (原始: xexrpus is gifrpus)
  7. [actual] gifrpus → sefypus (原始: gifrpus is sefypus)
  8. [actual] sefypus → decxpus (原始: sefypus is decxpus)
  9. [actual] decxpus → ruqfpus (原始: decxpus is ruqfpus)
  10. [actual] ruqfpus → kevdpus (原始: ruqfpus is kevdpus)
  11. [actual] kevdpus → wofvpus (原始: kevdpus is wofvpus)
  12. [actual] wofvpus → kitfpus (原始: wofvpus is kitfpus)
  13. [actual] kitfpus → xoyxpus (原始: kitfpus is xoyxpus)
  14. [actual] xoyxpus → babbpus (原始: xoyxpus is babbpus)
  15. [planning] x → fajkpus (原始: x is fajkpus)
  16. [planning] x → tifqpus (原始: x is tifqpus)
  17. [planning] x → qakzpus (原始: x is qakzpus)
  18. [planning] x → xexrpus (原始: x is xexrpus)
  19. [planning] x → gifrpus (原始: x is gifrpus)
  20. [planning] x → sefypus (原始: x is sefypus)
  21. [planning] x → decxpus (原始: x is decxpus)
  22. [planning] x → ruqfpus (原始: x is ruqfpus)
  23. [planning] x → kevdpus (原始: x is kevdpus)
  24. [planning] x → wofvpus (原始: x is wofvpus)
  25. [planning] x → kitfpus (原始: x is kitfpus)
  26. [planning] x → xoyxpus (原始: x is xoyxpus)
  27. [planning] x → babbpus (原始: x is babbpus)
  28. [actual] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 32
[后处理] 加载LoG图，包含 32 个节点
  LoG节点 0: x is babbpus (规则: CE, 深度: 1)
  LoG节点 1: x is babbpus and gayjpus (规则: MP, 深度: 2)
  LoG节点 2: x is decxpus (规则: CE, 深度: 3)
  LoG节点 3: decxpus is babbpus and gayjpus (规则: CI, 深度: 3)
  LoG节点 4: x is decxpus and jomfpus (规则: MP, 深度: 4)
  LoG节点 5: decxpus is babbpus (规则: MP, 深度: 4)
  LoG节点 6: decxpus is gayjpus (规则: CE, 深度: 4)
  LoG节点 7: x is gifrpus (规则: MP, 深度: 5)
  LoG节点 8: gifrpus is decxpus and jomfpus (规则: CE, 深度: 5)
  LoG节点 9: decxpus is kevdpus (规则: CE, 深度: 5)
  LoG节点 10: kevdpus is babbpus (规则: MP, 深度: 5)
  LoG节点 11: decxpus is gayjpus and zibxpus (规则: MP, 深度: 5)
  LoG节点 12: x is qakzpus (规则: MP, 深度: 6)
  LoG节点 13: qakzpus is gifrpus (规则: CE, 深度: 6)
  LoG节点 14: gifrpus is decxpus and jomfpus and kijvpus (规则: MP, 深度: 6)
  LoG节点 15: decxpus is kevdpus and jorvpus (规则: MP, 深度: 6)
  LoG节点 16: kevdpus is kitfpus (规则: CE, 深度: 6)
  LoG节点 17: kitfpus is babbpus (规则: CE, 深度: 6)
  LoG节点 18: decxpus is qetspus (规则: CE, 深度: 6)
  LoG节点 19: qetspus is gayjpus and zibxpus (规则: CI, 深度: 6)
  LoG节点 20: x is fajkpus (规则: MP, 深度: 7)
  LoG节点 21: fajkpus is qakzpus (规则: MP, 深度: 7)
  LoG节点 22: qakzpus is gifrpus and catfpus (规则: MP, 深度: 7)
  LoG节点 23: gifrpus is sefypus (规则: CE, 深度: 7)
  LoG节点 24: sefypus is decxpus and jomfpus and kijvpus (规则: CI, 深度: 7)
  LoG节点 25: decxpus is ruqfpus (规则: CE, 深度: 7)
  LoG节点 26: ruqfpus is kevdpus and jorvpus (规则: CI, 深度: 7)
  LoG节点 27: kevdpus is kitfpus and datjpus (规则: MP, 深度: 7)
  LoG节点 28: kitfpus is babbpus and lislpus (规则: MP, 深度: 7)
  LoG节点 29: decxpus is qetspus and vobtpus (规则: MP, 深度: 7)
  LoG节点 30: qetspus is gayjpus (规则: MP, 深度: 7)
  LoG节点 31: qetspus is zibxpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 28
   - 初始条件数: 22
   - LoG图节点数: 32

📋 初始条件列表:
    1. qetspus is pirhpus
    2. kevdpus is wofvpus
    3. qetspus is hanxpus
    4. tifqpus is qakzpus
    5. decxpus is ruqfpus and tocxpus
    6. gifrpus is sefypus and nipjpus
    7. qakzpus is xexrpus
    8. xexrpus is gifrpus and catfpus
    9. dirxpus is qetspus and vobtpus
   10. sefypus is decxpus and jomfpus
   11. hedbpus is fajkpus
   12. decxpus is dirxpus
   13. wofvpus is kitfpus and datjpus
   14. ruqfpus is jorvpus
   15. fajkpus is tifqpus
   16. hanxpus is gayjpus
   17. pirhpus is zibxpus
   18. x is hedbpus
   19. kitfpus is xoyxpus
   20. ruqfpus is kevdpus
   21. xoyxpus is babbpus and lislpus
   22. sefypus is kijvpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 22 个前提节点

🔍 开始处理actual节点...

   节点 1: x is hedbpus
      ↻ 重复节点，计数: 2

   节点 2: hedbpus is fajkpus
      ↻ 重复节点，计数: 2

   节点 3: fajkpus is tifqpus
      ↻ 重复节点，计数: 2

   节点 4: tifqpus is qakzpus
      ↻ 重复节点，计数: 2

   节点 5: qakzpus is xexrpus
      ↻ 重复节点，计数: 2

   节点 6: xexrpus is gifrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: xexrpus is gifrpus and catfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: xexrpus is gifrpus and catfpus

   节点 7: gifrpus is sefypus
      🔍 验证新节点...
[后处理] 点亮LoG节点: gifrpus is sefypus
      ✅ 验证成功 + LoG匹配

   节点 8: sefypus is decxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: sefypus is decxpus and jomfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: sefypus is decxpus and jomfpus

   节点 9: decxpus is ruqfpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: decxpus is ruqfpus
      ✅ 验证成功 + LoG匹配

   节点 10: ruqfpus is kevdpus
      ↻ 重复节点，计数: 2

   节点 11: kevdpus is wofvpus
      ↻ 重复节点，计数: 2

   节点 12: wofvpus is kitfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wofvpus is kitfpus and datjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wofvpus is kitfpus and datjpus

   节点 13: kitfpus is xoyxpus
      ↻ 重复节点，计数: 2

   节点 14: xoyxpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: xoyxpus is babbpus and lislpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: xoyxpus is babbpus and lislpus

   节点 15: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is babbpus and gayjpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is decxpus (深度3)
[子树点亮]     └─ 点亮依赖节点: decxpus is babbpus and gayjpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is decxpus and jomfpus (深度4)
[子树点亮]     └─ 点亮依赖节点: decxpus is babbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: decxpus is gayjpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is gifrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: gifrpus is decxpus and jomfpus (深度5)
[子树点亮]     └─ 点亮依赖节点: decxpus is kevdpus (深度5)
[子树点亮]     └─ 点亮依赖节点: kevdpus is babbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: decxpus is gayjpus and zibxpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is qakzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: qakzpus is gifrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: gifrpus is decxpus and jomfpus and kijvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: decxpus is kevdpus and jorvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: kevdpus is kitfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: kitfpus is babbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: decxpus is qetspus (深度6)
[子树点亮]     └─ 点亮依赖节点: qetspus is gayjpus and zibxpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is fajkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: fajkpus is qakzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qakzpus is gifrpus and catfpus (深度7)
[子树点亮]     └─ 点亮依赖节点: sefypus is decxpus and jomfpus and kijvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: ruqfpus is kevdpus and jorvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kevdpus is kitfpus and datjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kitfpus is babbpus and lislpus (深度7)
[子树点亮]     └─ 点亮依赖节点: decxpus is qetspus and vobtpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qetspus is gayjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qetspus is zibxpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 29 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 15
   - 新增节点: 7
   - 更新已存在节点: 8
   - 点亮的LoG节点: 32

🎯 推理质量统计:
   - 完美推理: 7 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 32节点, 22前提, 复杂度1-22

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 29
   - 前提节点: 22
   - 推理节点: 7
   - 幻觉节点: 0
   - 点亮LoG节点: 32

✅ 推理节点详情:
   🟢 xexrpus is gifrpus (出现1次, 质量:perfect)
   🟢 gifrpus is sefypus (出现1次, 质量:perfect)
   🟢 sefypus is decxpus (出现1次, 质量:perfect)
   🟢 decxpus is ruqfpus (出现1次, 质量:perfect)
   🟢 wofvpus is kitfpus (出现1次, 质量:perfect)
   🟢 xoyxpus is babbpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - decxpus is kevdpus and jorvpus
   - sefypus is decxpus and jomfpus and kijvpus
   - x is qakzpus
   - qakzpus is gifrpus
   - gifrpus is decxpus and jomfpus
   - decxpus is babbpus
   - decxpus is ruqfpus
   - decxpus is gayjpus and zibxpus
   - kitfpus is babbpus and lislpus
   - x is gifrpus
   - decxpus is babbpus and gayjpus
   - decxpus is gayjpus
   - decxpus is kevdpus
   - gifrpus is decxpus and jomfpus and kijvpus
   - kitfpus is babbpus
   - qetspus is gayjpus
   - fajkpus is qakzpus
   - qetspus is gayjpus and zibxpus
   - decxpus is qetspus
   - gifrpus is sefypus
   - x is babbpus and gayjpus
   - x is decxpus
   - kevdpus is babbpus
   - kevdpus is kitfpus and datjpus
   - kevdpus is kitfpus
   - qakzpus is gifrpus and catfpus
   - x is fajkpus
   - ruqfpus is kevdpus and jorvpus
   - qetspus is zibxpus
   - x is decxpus and jomfpus
   - x is babbpus
   - decxpus is qetspus and vobtpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus (第7层)
   节点Coverage: 32/32 = 100.00%
   前提条件Coverage: 8/22 = 36.36%
   各推理层点亮比例:
     第1层: 12/12 = 100.00%
     第2层: 8/8 = 100.00%
     第3层: 5/5 = 100.00%
     第4层: 3/3 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/7 = 0.00%
   可推导节点: 7/7
   Strict Error Rate: 0/7 = 0.00%
   严格有效节点: 7/7

   详细分析:
     完美推理: 7 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 46/50
================================================================================
记录索引: 45
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_45.json
✅ 使用缓存结果:
   - 句子数: 26
   - 提取的语句数: 24
   - 初始条件数: 24

=== Statement提取完成 ===
总句子数: 26
成功提取: 26
失败提取: 0
总statements数: 24

=== 开始清洗Statement格式 ===
原始statements数: 24
清洗后statements数: 24
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 24
标准化后节点数: 24
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → veqlpus (原始: x is veqlpus)
  2. [actual] veqlpus → rejspus (原始: veqlpus is rejspus)
  3. [actual] rejspus → podlpus (原始: rejspus is podlpus)
  4. [actual] podlpus → zovcpus (原始: podlpus is zovcpus)
  5. [actual] zovcpus → pafvpus (原始: zovcpus is pafvpus)
  6. [actual] pafvpus → hicspus (原始: pafvpus is hicspus)
  7. [actual] hicspus → nehgpus (原始: hicspus is nehgpus)
  8. [actual] nehgpus → nikrpus (原始: nehgpus is nikrpus)
  9. [actual] nikrpus → vuhgpus (原始: nikrpus is vuhgpus)
  10. [actual] vuhgpus → piwzpus (原始: vuhgpus is piwzpus)
  11. [actual] piwzpus → lejkpus (原始: piwzpus is lejkpus)
  12. [actual] lejkpus → qohjpus (原始: lejkpus is qohjpus)
  13. [actual] qohjpus → suvzpus (原始: qohjpus is suvzpus)
  14. [actual] suvzpus → dolnpus (原始: suvzpus is dolnpus)
  15. [actual] dolnpus → zeslpus (原始: dolnpus is zeslpus)
  16. [actual] zeslpus → miycpus (原始: zeslpus is miycpus)
  17. [actual] miycpus → wefrpus (原始: miycpus is wefrpus)
  18. [actual] wefrpus → zujmpus (原始: wefrpus is zujmpus)
  19. [actual] zujmpus → dewcpus (原始: zujmpus is dewcpus)
  20. [actual] dewcpus → viqkpus (原始: dewcpus is viqkpus)
  21. [actual] viqkpus → kabvpus (原始: viqkpus is kabvpus)
  22. [actual] kabvpus → babbpus (原始: kabvpus is babbpus)
  23. [actual] x → babbpus (原始: x is babbpus)
  24. [actual] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 39
[后处理] 加载LoG图，包含 39 个节点
  LoG节点 0: x is babbpus (规则: MP, 深度: 1)
  LoG节点 1: x is suvzpus (规则: CE, 深度: 2)
  LoG节点 2: suvzpus is babbpus (规则: CE, 深度: 2)
  LoG节点 3: x is suvzpus and cagkpus (规则: MP, 深度: 3)
  LoG节点 4: suvzpus is babbpus and zakcpus (规则: MP, 深度: 3)
  LoG节点 5: x is nikrpus (规则: MP, 深度: 4)
  LoG节点 6: nikrpus is suvzpus and cagkpus (规则: CE, 深度: 4)
  LoG节点 7: suvzpus is wefrpus (规则: CE, 深度: 4)
  LoG节点 8: wefrpus is babbpus and zakcpus (规则: MP, 深度: 4)
  LoG节点 9: x is hicspus (规则: MP, 深度: 5)
  LoG节点 10: hicspus is nikrpus (规则: CE, 深度: 5)
  LoG节点 11: nikrpus is suvzpus and cagkpus and baxqpus (规则: MP, 深度: 5)
  LoG节点 12: suvzpus is wefrpus and xanqpus (规则: MP, 深度: 5)
  LoG节点 13: wefrpus is viqkpus (规则: CE, 深度: 5)
  LoG节点 14: viqkpus is babbpus and zakcpus (规则: CI, 深度: 5)
  LoG节点 15: x is zovcpus (规则: MP, 深度: 6)
  LoG节点 16: zovcpus is hicspus (规则: CE, 深度: 6)
  LoG节点 17: hicspus is nikrpus and wadlpus (规则: MP, 深度: 6)
  LoG节点 18: nikrpus is lejkpus (规则: MP, 深度: 6)
  LoG节点 19: lejkpus is suvzpus and cagkpus and baxqpus (规则: CE, 深度: 6)
  LoG节点 20: suvzpus is zeslpus (规则: CE, 深度: 6)
  LoG节点 21: zeslpus is wefrpus and xanqpus (规则: CE, 深度: 6)
  LoG节点 22: wefrpus is viqkpus and velgpus (规则: MP, 深度: 6)
  LoG节点 23: viqkpus is babbpus (规则: CE, 深度: 6)
  LoG节点 24: viqkpus is zakcpus (规则: CE, 深度: 6)
  LoG节点 25: x is rejspus (规则: MP, 深度: 7)
  LoG节点 26: rejspus is zovcpus (规则: MP, 深度: 7)
  LoG节点 27: zovcpus is hicspus and tutbpus (规则: MP, 深度: 7)
  LoG节点 28: hicspus is nehgpus (规则: CE, 深度: 7)
  LoG节点 29: nehgpus is nikrpus and wadlpus (规则: CE, 深度: 7)
  LoG节点 30: nikrpus is vuhgpus (规则: CE, 深度: 7)
  LoG节点 31: vuhgpus is lejkpus (规则: MP, 深度: 7)
  LoG节点 32: lejkpus is suvzpus and cagkpus and baxqpus and ciddpus (规则: MP, 深度: 7)
  LoG节点 33: suvzpus is zeslpus and winkpus (规则: MP, 深度: 7)
  LoG节点 34: zeslpus is wefrpus and xanqpus and yagzpus (规则: MP, 深度: 7)
  LoG节点 35: wefrpus is dewcpus (规则: MP, 深度: 7)
  LoG节点 36: dewcpus is viqkpus and velgpus (规则: CE, 深度: 7)
  LoG节点 37: viqkpus is babbpus and caxypus (规则: MP, 深度: 7)
  LoG节点 38: viqkpus is zakcpus and ziwxpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 24
   - 初始条件数: 24
   - LoG图节点数: 39

📋 初始条件列表:
    1. lejkpus is qohjpus
    2. pafvpus is hicspus and tutbpus
    3. zujmpus is dewcpus
    4. dewcpus is viqkpus and velgpus and vubqpus
    5. piwzpus is lejkpus
    6. dolnpus is zeslpus and winkpus
    7. miycpus is wefrpus and xanqpus and yagzpus
    8. nikrpus is vuhgpus and supxpus
    9. qohjpus is suvzpus and cagkpus and baxqpus and ciddpus
   10. zovcpus is pafvpus
   11. vuhgpus is piwzpus
   12. kabvpus is babbpus and caxypus
   13. suvzpus is dolnpus
   14. viqkpus is hicppus
   15. hicppus is zakcpus and ziwxpus
   16. hicspus is nehgpus and riygpus
   17. x is veqlpus
   18. rejspus is podlpus
   19. zeslpus is miycpus
   20. viqkpus is kabvpus
   21. podlpus is zovcpus
   22. nehgpus is nikrpus and wadlpus and biympus
   23. veqlpus is rejspus
   24. wefrpus is zujmpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 24 个前提节点

🔍 开始处理actual节点...

   节点 1: x is veqlpus
      ↻ 重复节点，计数: 2

   节点 2: veqlpus is rejspus
      ↻ 重复节点，计数: 2

   节点 3: rejspus is podlpus
      ↻ 重复节点，计数: 2

   节点 4: podlpus is zovcpus
      ↻ 重复节点，计数: 2

   节点 5: zovcpus is pafvpus
      ↻ 重复节点，计数: 2

   节点 6: pafvpus is hicspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: pafvpus is hicspus and tutbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: pafvpus is hicspus and tutbpus

   节点 7: hicspus is nehgpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: hicspus is nehgpus
      ✅ 验证成功 + LoG匹配

   节点 8: nehgpus is nikrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: nehgpus is nikrpus and wadlpus and biympus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: nehgpus is nikrpus and wadlpus and biympus
  ✓ 点亮LoG节点: nehgpus is nikrpus and wadlpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 9: nikrpus is vuhgpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: nikrpus is vuhgpus
      ✅ 验证成功 + LoG匹配

   节点 10: vuhgpus is piwzpus
      ↻ 重复节点，计数: 2

   节点 11: piwzpus is lejkpus
      ↻ 重复节点，计数: 2

   节点 12: lejkpus is qohjpus
      ↻ 重复节点，计数: 2

   节点 13: qohjpus is suvzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qohjpus is suvzpus and cagkpus and baxqpus and ciddpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qohjpus is suvzpus and cagkpus and baxqpus and ciddpus

   节点 14: suvzpus is dolnpus
      ↻ 重复节点，计数: 2

   节点 15: dolnpus is zeslpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: dolnpus is zeslpus and winkpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: dolnpus is zeslpus and winkpus

   节点 16: zeslpus is miycpus
      ↻ 重复节点，计数: 2

   节点 17: miycpus is wefrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: miycpus is wefrpus and xanqpus and yagzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: miycpus is wefrpus and xanqpus and yagzpus

   节点 18: wefrpus is zujmpus
      ↻ 重复节点，计数: 2

   节点 19: zujmpus is dewcpus
      ↻ 重复节点，计数: 2

   节点 20: dewcpus is viqkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: dewcpus is viqkpus and velgpus and vubqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: dewcpus is viqkpus and velgpus and vubqpus
  ✓ 点亮LoG节点: dewcpus is viqkpus and velgpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 21: viqkpus is kabvpus
      ↻ 重复节点，计数: 2

   节点 22: kabvpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kabvpus is babbpus and caxypus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kabvpus is babbpus and caxypus

   节点 23: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is suvzpus (深度2)
[子树点亮]     └─ 点亮依赖节点: suvzpus is babbpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is suvzpus and cagkpus (深度3)
[子树点亮]     └─ 点亮依赖节点: suvzpus is babbpus and zakcpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is nikrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: nikrpus is suvzpus and cagkpus (深度4)
[子树点亮]     └─ 点亮依赖节点: suvzpus is wefrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: wefrpus is babbpus and zakcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is hicspus (深度5)
[子树点亮]     └─ 点亮依赖节点: hicspus is nikrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: nikrpus is suvzpus and cagkpus and baxqpus (深度5)
[子树点亮]     └─ 点亮依赖节点: suvzpus is wefrpus and xanqpus (深度5)
[子树点亮]     └─ 点亮依赖节点: wefrpus is viqkpus (深度5)
[子树点亮]     └─ 点亮依赖节点: viqkpus is babbpus and zakcpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is zovcpus (深度6)
[子树点亮]     └─ 点亮依赖节点: zovcpus is hicspus (深度6)
[子树点亮]     └─ 点亮依赖节点: hicspus is nikrpus and wadlpus (深度6)
[子树点亮]     └─ 点亮依赖节点: nikrpus is lejkpus (深度6)
[子树点亮]     └─ 点亮依赖节点: lejkpus is suvzpus and cagkpus and baxqpus (深度6)
[子树点亮]     └─ 点亮依赖节点: suvzpus is zeslpus (深度6)
[子树点亮]     └─ 点亮依赖节点: zeslpus is wefrpus and xanqpus (深度6)
[子树点亮]     └─ 点亮依赖节点: wefrpus is viqkpus and velgpus (深度6)
[子树点亮]     └─ 点亮依赖节点: viqkpus is babbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: viqkpus is zakcpus (深度6)
[子树点亮]     └─ 点亮依赖节点: x is rejspus (深度7)
[子树点亮]     └─ 点亮依赖节点: rejspus is zovcpus (深度7)
[子树点亮]     └─ 点亮依赖节点: zovcpus is hicspus and tutbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: vuhgpus is lejkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: lejkpus is suvzpus and cagkpus and baxqpus and ciddpus (深度7)
[子树点亮]     └─ 点亮依赖节点: suvzpus is zeslpus and winkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: zeslpus is wefrpus and xanqpus and yagzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: wefrpus is dewcpus (深度7)
[子树点亮]     └─ 点亮依赖节点: viqkpus is babbpus and caxypus (深度7)
[子树点亮]     └─ 点亮依赖节点: viqkpus is zakcpus and ziwxpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 34 个节点
      ✅ 验证成功 + LoG匹配

   节点 24: x is babbpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 24
   - 新增节点: 10
   - 更新已存在节点: 14
   - 点亮的LoG节点: 39

🎯 推理质量统计:
   - 完美推理: 10 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 39节点, 24前提, 复杂度1-24

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 34
   - 前提节点: 24
   - 推理节点: 10
   - 幻觉节点: 0
   - 点亮LoG节点: 39

✅ 推理节点详情:
   🟢 pafvpus is hicspus (出现1次, 质量:perfect)
   🟢 hicspus is nehgpus (出现1次, 质量:perfect)
   🟢 nehgpus is nikrpus (出现1次, 质量:perfect)
   🟢 nikrpus is vuhgpus (出现1次, 质量:perfect)
   🟢 qohjpus is suvzpus (出现1次, 质量:perfect)
   🟢 dolnpus is zeslpus (出现1次, 质量:perfect)
   🟢 miycpus is wefrpus (出现1次, 质量:perfect)
   🟢 dewcpus is viqkpus (出现1次, 质量:perfect)
   🟢 kabvpus is babbpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现2次, 质量:perfect)

🔥 点亮的LoG节点:
   - suvzpus is babbpus
   - nikrpus is suvzpus and cagkpus
   - x is suvzpus and cagkpus
   - nehgpus is nikrpus and wadlpus
   - zovcpus is hicspus and tutbpus
   - vuhgpus is lejkpus
   - viqkpus is babbpus and caxypus
   - viqkpus is zakcpus
   - hicspus is nehgpus
   - suvzpus is wefrpus and xanqpus
   - wefrpus is viqkpus
   - viqkpus is babbpus and zakcpus
   - hicspus is nikrpus
   - dewcpus is viqkpus and velgpus
   - lejkpus is suvzpus and cagkpus and baxqpus
   - zeslpus is wefrpus and xanqpus and yagzpus
   - suvzpus is zeslpus
   - viqkpus is babbpus
   - x is hicspus
   - x is zovcpus
   - x is nikrpus
   - rejspus is zovcpus
   - x is suvzpus
   - wefrpus is babbpus and zakcpus
   - viqkpus is zakcpus and ziwxpus
   - hicspus is nikrpus and wadlpus
   - suvzpus is wefrpus
   - nikrpus is suvzpus and cagkpus and baxqpus
   - nikrpus is lejkpus
   - lejkpus is suvzpus and cagkpus and baxqpus and ciddpus
   - suvzpus is babbpus and zakcpus
   - zovcpus is hicspus
   - wefrpus is viqkpus and velgpus
   - wefrpus is dewcpus
   - nikrpus is vuhgpus
   - x is rejspus
   - zeslpus is wefrpus and xanqpus
   - x is babbpus
   - suvzpus is zeslpus and winkpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus (第7层)
   节点Coverage: 39/39 = 100.00%
   前提条件Coverage: 13/24 = 54.17%
   各推理层点亮比例:
     第1层: 14/14 = 100.00%
     第2层: 10/10 = 100.00%
     第3层: 6/6 = 100.00%
     第4层: 4/4 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 2/2 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/10 = 0.00%
   可推导节点: 10/10
   Strict Error Rate: 0/10 = 0.00%
   严格有效节点: 10/10

   详细分析:
     完美推理: 10 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 47/50
================================================================================
记录索引: 46
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_46.json
✅ 使用缓存结果:
   - 句子数: 18
   - 提取的语句数: 16
   - 初始条件数: 22

=== Statement提取完成 ===
总句子数: 18
成功提取: 18
失败提取: 0
总statements数: 16

=== 开始清洗Statement格式 ===
原始statements数: 16
清洗后statements数: 16
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 16
标准化后节点数: 16
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → nikppus (原始: x is nikppus)
  2. [actual] nikppus → wocspus (原始: nikppus is wocspus)
  3. [actual] wocspus → dawzpus (原始: wocspus is dawzpus)
  4. [actual] dawzpus → pujjpus (原始: dawzpus is pujjpus)
  5. [actual] pujjpus → hoygpus (原始: pujjpus is hoygpus)
  6. [actual] hoygpus → viznpus (原始: hoygpus is viznpus)
  7. [actual] viznpus → hebjpus (原始: viznpus is hebjpus)
  8. [actual] hebjpus → tejkpus (原始: hebjpus is tejkpus)
  9. [actual] tejkpus → zogwpus (原始: tejkpus is zogwpus)
  10. [actual] zogwpus → purxpus (原始: zogwpus is purxpus)
  11. [actual] purxpus → kolbpus (原始: purxpus is kolbpus)
  12. [actual] kolbpus → niwkpus (原始: kolbpus is niwkpus)
  13. [actual] niwkpus → bohrpus (原始: niwkpus is bohrpus)
  14. [actual] bohrpus → nirlpus (原始: bohrpus is nirlpus)
  15. [actual] nirlpus → babbpus (原始: nirlpus is babbpus)
  16. [actual] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 34
[后处理] 加载LoG图，包含 34 个节点
  LoG节点 0: x is babbpus (规则: CE, 深度: 1)
  LoG节点 1: x is babbpus and vigkpus (规则: MP, 深度: 2)
  LoG节点 2: x is purxpus (规则: MP, 深度: 3)
  LoG节点 3: purxpus is babbpus and vigkpus (规则: CI, 深度: 3)
  LoG节点 4: x is viznpus (规则: MP, 深度: 4)
  LoG节点 5: viznpus is purxpus (规则: CE, 深度: 4)
  LoG节点 6: purxpus is babbpus (规则: CE, 深度: 4)
  LoG节点 7: purxpus is vigkpus (规则: CE, 深度: 4)
  LoG节点 8: x is wocspus (规则: CE, 深度: 5)
  LoG节点 9: wocspus is viznpus (规则: CE, 深度: 5)
  LoG节点 10: viznpus is purxpus and wopypus (规则: MP, 深度: 5)
  LoG节点 11: purxpus is babbpus and casqpus (规则: MP, 深度: 5)
  LoG节点 12: purxpus is vigkpus and durypus (规则: MP, 深度: 5)
  LoG节点 13: x is wocspus and mewnpus (规则: MP, 深度: 6)
  LoG节点 14: wocspus is viznpus and lifmpus (规则: MP, 深度: 6)
  LoG节点 15: viznpus is tejkpus (规则: CE, 深度: 6)
  LoG节点 16: tejkpus is purxpus and wopypus (规则: CE, 深度: 6)
  LoG节点 17: purxpus is nirlpus (规则: MP, 深度: 6)
  LoG节点 18: nirlpus is babbpus and casqpus (规则: CI, 深度: 6)
  LoG节点 19: purxpus is dufwpus (规则: CE, 深度: 6)
  LoG节点 20: dufwpus is vigkpus and durypus (规则: CI, 深度: 6)
  LoG节点 21: x is nikppus (规则: CE, 深度: 7)
  LoG节点 22: nikppus is wocspus and mewnpus (规则: CE, 深度: 7)
  LoG节点 23: wocspus is pujjpus (规则: MP, 深度: 7)
  LoG节点 24: pujjpus is viznpus and lifmpus (规则: MP, 深度: 7)
  LoG节点 25: viznpus is tejkpus and mobdpus (规则: MP, 深度: 7)
  LoG节点 26: tejkpus is purxpus and wopypus and pebbpus (规则: MP, 深度: 7)
  LoG节点 27: purxpus is niwkpus (规则: MP, 深度: 7)
  LoG节点 28: niwkpus is nirlpus (规则: MP, 深度: 7)
  LoG节点 29: nirlpus is babbpus (规则: CE, 深度: 7)
  LoG节点 30: nirlpus is casqpus (规则: MP, 深度: 7)
  LoG节点 31: purxpus is dufwpus and mudzpus (规则: MP, 深度: 7)
  LoG节点 32: dufwpus is vigkpus (规则: MP, 深度: 7)
  LoG节点 33: dufwpus is durypus (规则: CE, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 16
   - 初始条件数: 22
   - LoG图节点数: 34

📋 初始条件列表:
    1. purxpus is kolbpus
    2. nirlpus is luqmpus
    3. dawzpus is pujjpus
    4. hoygpus is viznpus and lifmpus
    5. luqmpus is casqpus
    6. bohrpus is nirlpus
    7. hebjpus is tejkpus and mobdpus
    8. dufwpus is durypus and zeqzpus
    9. tejkpus is zogwpus
   10. nirlpus is babbpus and topxpus
   11. pujjpus is hoygpus
   12. nikppus is wocspus and mewnpus and sanrpus
   13. zogwpus is purxpus and wopypus and pebbpus
   14. purxpus is yaxzpus
   15. dufwpus is nedppus
   16. kolbpus is niwkpus
   17. yaxzpus is dufwpus and mudzpus
   18. nedppus is vigkpus
   19. niwkpus is bohrpus
   20. viznpus is hebjpus
   21. x is nikppus and pugppus
   22. wocspus is dawzpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 22 个前提节点

🔍 开始处理actual节点...

   节点 1: x is nikppus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is nikppus
      ✅ 验证成功 + LoG匹配

   节点 2: nikppus is wocspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: nikppus is wocspus and mewnpus and sanrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: nikppus is wocspus and mewnpus and sanrpus
  ✓ 点亮LoG节点: nikppus is wocspus and mewnpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 3: wocspus is dawzpus
      ↻ 重复节点，计数: 2

   节点 4: dawzpus is pujjpus
      ↻ 重复节点，计数: 2

   节点 5: pujjpus is hoygpus
      ↻ 重复节点，计数: 2

   节点 6: hoygpus is viznpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: hoygpus is viznpus and lifmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: hoygpus is viznpus and lifmpus

   节点 7: viznpus is hebjpus
      ↻ 重复节点，计数: 2

   节点 8: hebjpus is tejkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: hebjpus is tejkpus and mobdpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: hebjpus is tejkpus and mobdpus

   节点 9: tejkpus is zogwpus
      ↻ 重复节点，计数: 2

   节点 10: zogwpus is purxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zogwpus is purxpus and wopypus and pebbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zogwpus is purxpus and wopypus and pebbpus

   节点 11: purxpus is kolbpus
      ↻ 重复节点，计数: 2

   节点 12: kolbpus is niwkpus
      ↻ 重复节点，计数: 2

   节点 13: niwkpus is bohrpus
      ↻ 重复节点，计数: 2

   节点 14: bohrpus is nirlpus
      ↻ 重复节点，计数: 2

   节点 15: nirlpus is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: nirlpus is babbpus
      ✅ 验证成功 + LoG匹配

   节点 16: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is babbpus and vigkpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is purxpus (深度3)
[子树点亮]     └─ 点亮依赖节点: purxpus is babbpus and vigkpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is viznpus (深度4)
[子树点亮]     └─ 点亮依赖节点: viznpus is purxpus (深度4)
[子树点亮]     └─ 点亮依赖节点: purxpus is babbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: purxpus is vigkpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is wocspus (深度5)
[子树点亮]     └─ 点亮依赖节点: wocspus is viznpus (深度5)
[子树点亮]     └─ 点亮依赖节点: viznpus is purxpus and wopypus (深度5)
[子树点亮]     └─ 点亮依赖节点: purxpus is babbpus and casqpus (深度5)
[子树点亮]     └─ 点亮依赖节点: purxpus is vigkpus and durypus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is wocspus and mewnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: wocspus is viznpus and lifmpus (深度6)
[子树点亮]     └─ 点亮依赖节点: viznpus is tejkpus (深度6)
[子树点亮]     └─ 点亮依赖节点: tejkpus is purxpus and wopypus (深度6)
[子树点亮]     └─ 点亮依赖节点: purxpus is nirlpus (深度6)
[子树点亮]     └─ 点亮依赖节点: nirlpus is babbpus and casqpus (深度6)
[子树点亮]     └─ 点亮依赖节点: purxpus is dufwpus (深度6)
[子树点亮]     └─ 点亮依赖节点: dufwpus is vigkpus and durypus (深度6)
[子树点亮]     └─ 点亮依赖节点: wocspus is pujjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: pujjpus is viznpus and lifmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: viznpus is tejkpus and mobdpus (深度7)
[子树点亮]     └─ 点亮依赖节点: tejkpus is purxpus and wopypus and pebbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: purxpus is niwkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: niwkpus is nirlpus (深度7)
[子树点亮]     └─ 点亮依赖节点: nirlpus is casqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: purxpus is dufwpus and mudzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: dufwpus is vigkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: dufwpus is durypus (深度7)
[后处理]   └─ 自动点亮依赖子树: 30 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 16
   - 新增节点: 7
   - 更新已存在节点: 9
   - 点亮的LoG节点: 34

🎯 推理质量统计:
   - 完美推理: 7 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 34节点, 22前提, 复杂度1-22

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 29
   - 前提节点: 22
   - 推理节点: 7
   - 幻觉节点: 0
   - 点亮LoG节点: 34

✅ 推理节点详情:
   🟢 x is nikppus (出现1次, 质量:perfect)
   🟢 nikppus is wocspus (出现1次, 质量:perfect)
   🟢 hoygpus is viznpus (出现1次, 质量:perfect)
   🟢 hebjpus is tejkpus (出现1次, 质量:perfect)
   🟢 zogwpus is purxpus (出现1次, 质量:perfect)
   🟢 nirlpus is babbpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is wocspus
   - purxpus is babbpus and vigkpus
   - dufwpus is durypus
   - x is wocspus and mewnpus
   - x is babbpus and vigkpus
   - viznpus is tejkpus and mobdpus
   - purxpus is dufwpus and mudzpus
   - x is viznpus
   - tejkpus is purxpus and wopypus and pebbpus
   - niwkpus is nirlpus
   - nirlpus is babbpus and casqpus
   - pujjpus is viznpus and lifmpus
   - viznpus is purxpus and wopypus
   - purxpus is vigkpus
   - purxpus is dufwpus
   - nikppus is wocspus and mewnpus
   - x is nikppus
   - x is purxpus
   - purxpus is nirlpus
   - nirlpus is babbpus
   - viznpus is tejkpus
   - dufwpus is vigkpus and durypus
   - purxpus is niwkpus
   - viznpus is purxpus
   - wocspus is viznpus
   - tejkpus is purxpus and wopypus
   - purxpus is babbpus
   - wocspus is pujjpus
   - purxpus is babbpus and casqpus
   - purxpus is vigkpus and durypus
   - dufwpus is vigkpus
   - x is babbpus
   - nirlpus is casqpus
   - wocspus is viznpus and lifmpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus (第7层)
   节点Coverage: 34/34 = 100.00%
   前提条件Coverage: 9/22 = 40.91%
   各推理层点亮比例:
     第1层: 13/13 = 100.00%
     第2层: 8/8 = 100.00%
     第3层: 5/5 = 100.00%
     第4层: 4/4 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/7 = 0.00%
   可推导节点: 7/7
   Strict Error Rate: 0/7 = 0.00%
   严格有效节点: 7/7

   详细分析:
     完美推理: 7 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 48/50
================================================================================
记录索引: 47
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_47.json
✅ 使用缓存结果:
   - 句子数: 11
   - 提取的语句数: 53
   - 初始条件数: 23

=== Statement提取完成 ===
总句子数: 11
成功提取: 11
失败提取: 0
总statements数: 53

=== 开始清洗Statement格式 ===
原始statements数: 53
清洗后statements数: 29
过滤掉的statements数: 24
清洗后的statements:
  1. [planning] x is babbpus
  2. [actual] x is vumhpus and sazfpus
  3. [actual] x is vumhpus
  4. [planning] vumhpus is babbpus
  5. [actual] vumhpus is nulkpus and cimdpus
  6. [actual] nulkpus is jeclpus
  7. [actual] jeclpus is liqzpus
  8. [actual] liqzpus is hernpus
  9. [actual] hernpus is wicbpus
  10. [actual] wicbpus is kiqhpus and tuscpus
  11. [actual] kiqhpus is gaxmpus and xezmpus and raqzpus and lukdpus
  12. [actual] gaxmpus is qepnpus
  13. [actual] qepnpus is duckpus
  14. [actual] duckpus is miqnpus
  15. [actual] miqnpus is nedmpus
  16. [actual] nedmpus is xowvpus
  17. [actual] xowvpus is rihbpus and naxjpus
  18. [actual] rihbpus is joslpus
  19. [actual] joslpus is dawjpus
  20. [actual] dawjpus is dawdpus
  21. [actual] dawdpus is leyppus and doxnpus
  22. [actual] leyppus is gixbpus
  23. [actual] gixbpus is jozvpus and joblpus
  24. [actual] jozvpus is babbpus and golcpus and bufjpus
  25. [actual] vumhpus is babbpus
  26. [actual] x is vumhpus
  27. [actual] x is babbpus
  28. [planning] x is babbpus
  29. [actual] x is babbpus

=== 开始标准化和解析节点 ===
清洗后statements数: 29
标准化后节点数: 29
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babbpus (原始: x is babbpus)
  2. [actual] x → vumhpus and sazfpus (原始: x is vumhpus and sazfpus)
  3. [actual] x → vumhpus (原始: x is vumhpus)
  4. [planning] vumhpus → babbpus (原始: vumhpus is babbpus)
  5. [actual] vumhpus → nulkpus and cimdpus (原始: vumhpus is nulkpus and cimdpus)
  6. [actual] nulkpus → jeclpus (原始: nulkpus is jeclpus)
  7. [actual] jeclpus → liqzpus (原始: jeclpus is liqzpus)
  8. [actual] liqzpus → hernpus (原始: liqzpus is hernpus)
  9. [actual] hernpus → wicbpus (原始: hernpus is wicbpus)
  10. [actual] wicbpus → kiqhpus and tuscpus (原始: wicbpus is kiqhpus and tuscpus)
  11. [actual] kiqhpus → gaxmpus and xezmpus and raqzpus and lukdpus (原始: kiqhpus is gaxmpus and xezmpus and raqzpus and lukdpus)
  12. [actual] gaxmpus → qepnpus (原始: gaxmpus is qepnpus)
  13. [actual] qepnpus → duckpus (原始: qepnpus is duckpus)
  14. [actual] duckpus → miqnpus (原始: duckpus is miqnpus)
  15. [actual] miqnpus → nedmpus (原始: miqnpus is nedmpus)
  16. [actual] nedmpus → xowvpus (原始: nedmpus is xowvpus)
  17. [actual] xowvpus → rihbpus and naxjpus (原始: xowvpus is rihbpus and naxjpus)
  18. [actual] rihbpus → joslpus (原始: rihbpus is joslpus)
  19. [actual] joslpus → dawjpus (原始: joslpus is dawjpus)
  20. [actual] dawjpus → dawdpus (原始: dawjpus is dawdpus)
  21. [actual] dawdpus → leyppus and doxnpus (原始: dawdpus is leyppus and doxnpus)
  22. [actual] leyppus → gixbpus (原始: leyppus is gixbpus)
  23. [actual] gixbpus → jozvpus and joblpus (原始: gixbpus is jozvpus and joblpus)
  24. [actual] jozvpus → babbpus and golcpus and bufjpus (原始: jozvpus is babbpus and golcpus and bufjpus)
  25. [actual] vumhpus → babbpus (原始: vumhpus is babbpus)
  26. [actual] x → vumhpus (原始: x is vumhpus)
  27. [actual] x → babbpus (原始: x is babbpus)
  28. [planning] x → babbpus (原始: x is babbpus)
  29. [actual] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 34
[后处理] 加载LoG图，包含 34 个节点
  LoG节点 0: x is babbpus (规则: CE, 深度: 1)
  LoG节点 1: x is babbpus and golcpus (规则: MP, 深度: 2)
  LoG节点 2: x is gaxmpus (规则: CE, 深度: 3)
  LoG节点 3: gaxmpus is babbpus and golcpus (规则: MP, 深度: 3)
  LoG节点 4: x is gaxmpus and xezmpus (规则: MP, 深度: 4)
  LoG节点 5: gaxmpus is leyppus (规则: MP, 深度: 4)
  LoG节点 6: leyppus is babbpus and golcpus (规则: CE, 深度: 4)
  LoG节点 7: x is wicbpus (规则: MP, 深度: 5)
  LoG节点 8: wicbpus is gaxmpus and xezmpus (规则: CE, 深度: 5)
  LoG节点 9: gaxmpus is rihbpus (规则: MP, 深度: 5)
  LoG节点 10: rihbpus is leyppus (规则: CE, 深度: 5)
  LoG节点 11: leyppus is babbpus and golcpus and mogppus (规则: MP, 深度: 5)
  LoG节点 12: x is nulkpus (规则: MP, 深度: 6)
  LoG节点 13: nulkpus is wicbpus (规则: MP, 深度: 6)
  LoG节点 14: wicbpus is gaxmpus and xezmpus and raqzpus (规则: MP, 深度: 6)
  LoG节点 15: gaxmpus is nedmpus (规则: MP, 深度: 6)
  LoG节点 16: nedmpus is rihbpus (规则: CE, 深度: 6)
  LoG节点 17: rihbpus is leyppus and doxnpus (规则: MP, 深度: 6)
  LoG节点 18: leyppus is jozvpus (规则: CE, 深度: 6)
  LoG节点 19: jozvpus is babbpus and golcpus and mogppus (规则: CI, 深度: 6)
  LoG节点 20: x is vumhpus (规则: CE, 深度: 7)
  LoG节点 21: vumhpus is nulkpus (规则: CE, 深度: 7)
  LoG节点 22: nulkpus is liqzpus (规则: MP, 深度: 7)
  LoG节点 23: liqzpus is wicbpus (规则: MP, 深度: 7)
  LoG节点 24: wicbpus is kiqhpus (规则: CE, 深度: 7)
  LoG节点 25: kiqhpus is gaxmpus and xezmpus and raqzpus (规则: CE, 深度: 7)
  LoG节点 26: gaxmpus is duckpus (规则: MP, 深度: 7)
  LoG节点 27: duckpus is nedmpus (规则: MP, 深度: 7)
  LoG节点 28: nedmpus is rihbpus and naxjpus (规则: MP, 深度: 7)
  LoG节点 29: rihbpus is dawjpus (规则: MP, 深度: 7)
  LoG节点 30: dawjpus is leyppus and doxnpus (规则: MP, 深度: 7)
  LoG节点 31: leyppus is jozvpus and joblpus (规则: MP, 深度: 7)
  LoG节点 32: jozvpus is babbpus and golcpus (规则: CE, 深度: 7)
  LoG节点 33: jozvpus is mogppus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 29
   - 初始条件数: 23
   - LoG图节点数: 34

📋 初始条件列表:
    1. liqzpus is hernpus
    2. wicbpus is kiqhpus and tuscpus
    3. leyppus is gixbpus
    4. xowvpus is rihbpus and naxjpus
    5. jeclpus is liqzpus
    6. hernpus is wicbpus
    7. dawdpus is leyppus and doxnpus
    8. vumhpus is nulkpus and cimdpus
    9. qepnpus is duckpus
   10. jozvpus is muyvpus
   11. dawjpus is dawdpus
   12. x is vumhpus and sazfpus
   13. nulkpus is jeclpus
   14. nedmpus is xowvpus
   15. muyvpus is mogppus
   16. joslpus is dawjpus
   17. miqnpus is nedmpus
   18. rihbpus is joslpus
   19. gixbpus is jozvpus and joblpus
   20. jozvpus is babbpus and golcpus and bufjpus
   21. gaxmpus is qepnpus
   22. kiqhpus is gaxmpus and xezmpus and raqzpus and lukdpus
   23. duckpus is miqnpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 23 个前提节点

🔍 开始处理actual节点...

   节点 1: x is vumhpus and sazfpus
      ↻ 重复节点，计数: 2

   节点 2: x is vumhpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is vumhpus
      ✅ 验证成功 + LoG匹配

   节点 3: vumhpus is nulkpus and cimdpus
      ↻ 重复节点，计数: 2

   节点 4: nulkpus is jeclpus
      ↻ 重复节点，计数: 2

   节点 5: jeclpus is liqzpus
      ↻ 重复节点，计数: 2

   节点 6: liqzpus is hernpus
      ↻ 重复节点，计数: 2

   节点 7: hernpus is wicbpus
      ↻ 重复节点，计数: 2

   节点 8: wicbpus is kiqhpus and tuscpus
      ↻ 重复节点，计数: 2

   节点 9: kiqhpus is gaxmpus and xezmpus and raqzpus and lukdpus
      ↻ 重复节点，计数: 2

   节点 10: gaxmpus is qepnpus
      ↻ 重复节点，计数: 2

   节点 11: qepnpus is duckpus
      ↻ 重复节点，计数: 2

   节点 12: duckpus is miqnpus
      ↻ 重复节点，计数: 2

   节点 13: miqnpus is nedmpus
      ↻ 重复节点，计数: 2

   节点 14: nedmpus is xowvpus
      ↻ 重复节点，计数: 2

   节点 15: xowvpus is rihbpus and naxjpus
      ↻ 重复节点，计数: 2

   节点 16: rihbpus is joslpus
      ↻ 重复节点，计数: 2

   节点 17: joslpus is dawjpus
      ↻ 重复节点，计数: 2

   节点 18: dawjpus is dawdpus
      ↻ 重复节点，计数: 2

   节点 19: dawdpus is leyppus and doxnpus
      ↻ 重复节点，计数: 2

   节点 20: leyppus is gixbpus
      ↻ 重复节点，计数: 2

   节点 21: gixbpus is jozvpus and joblpus
      ↻ 重复节点，计数: 2

   节点 22: jozvpus is babbpus and golcpus and bufjpus
      ↻ 重复节点，计数: 2

   节点 23: vumhpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP+CE
      📋 推理路径: MP+CE规则: vumhpus is nulkpus → nulkpus is babbpus
[后处理] 基于推理轨迹点亮节点，使用了 20 个前提条件:
  - 前提: vumhpus is nulkpus and cimdpus
  - 前提: nulkpus is jeclpus
  - 前提: jeclpus is liqzpus
  - 前提: liqzpus is hernpus
  - 前提: hernpus is wicbpus
  - 前提: wicbpus is kiqhpus and tuscpus
  - 前提: kiqhpus is gaxmpus and xezmpus and raqzpus and lukdpus
  - 前提: gaxmpus is qepnpus
  - 前提: qepnpus is duckpus
  - 前提: duckpus is miqnpus
  - 前提: miqnpus is nedmpus
  - 前提: nedmpus is xowvpus
  - 前提: xowvpus is rihbpus and naxjpus
  - 前提: rihbpus is joslpus
  - 前提: joslpus is dawjpus
  - 前提: dawjpus is dawdpus
  - 前提: dawdpus is leyppus and doxnpus
  - 前提: leyppus is gixbpus
  - 前提: gixbpus is jozvpus and joblpus
  - 前提: jozvpus is babbpus and golcpus and bufjpus
  ✓ 点亮LoG节点: gaxmpus is babbpus and golcpus
[子树点亮]     └─ 点亮依赖节点: gaxmpus is leyppus (深度4)
[子树点亮]     └─ 点亮依赖节点: leyppus is babbpus and golcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: gaxmpus is rihbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: rihbpus is leyppus (深度5)
[子树点亮]     └─ 点亮依赖节点: leyppus is babbpus and golcpus and mogppus (深度5)
[子树点亮]     └─ 点亮依赖节点: gaxmpus is nedmpus (深度6)
[子树点亮]     └─ 点亮依赖节点: nedmpus is rihbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: rihbpus is leyppus and doxnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: leyppus is jozvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: jozvpus is babbpus and golcpus and mogppus (深度6)
[子树点亮]     └─ 点亮依赖节点: gaxmpus is duckpus (深度7)
[子树点亮]     └─ 点亮依赖节点: duckpus is nedmpus (深度7)
[子树点亮]     └─ 点亮依赖节点: nedmpus is rihbpus and naxjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: rihbpus is dawjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: dawjpus is leyppus and doxnpus (深度7)
[子树点亮]     └─ 点亮依赖节点: leyppus is jozvpus and joblpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jozvpus is babbpus and golcpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jozvpus is mogppus (深度7)
[后处理]   └─ 自动点亮依赖子树: 18 个节点
  ✓ 点亮LoG节点: wicbpus is gaxmpus and xezmpus
[子树点亮]     └─ 点亮依赖节点: wicbpus is gaxmpus and xezmpus and raqzpus (深度6)
[子树点亮]     └─ 点亮依赖节点: wicbpus is kiqhpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kiqhpus is gaxmpus and xezmpus and raqzpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
  ✓ 点亮LoG节点: nulkpus is wicbpus
[子树点亮]     └─ 点亮依赖节点: nulkpus is liqzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: liqzpus is wicbpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
  ✓ 点亮LoG节点: vumhpus is nulkpus
[后处理] 通过推理轨迹额外点亮了 4 个LoG节点

   节点 24: x is vumhpus
      ↻ 重复节点，计数: 2

   节点 25: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is babbpus and golcpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is gaxmpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is gaxmpus and xezmpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is wicbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is nulkpus (深度6)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
      ✅ 验证成功 + LoG匹配

   节点 26: x is babbpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 26
   - 新增节点: 3
   - 更新已存在节点: 23
   - 点亮的LoG节点: 34

🎯 推理质量统计:
   - 完美推理: 3 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 34节点, 23前提, 复杂度1-23

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 26
   - 前提节点: 23
   - 推理节点: 3
   - 幻觉节点: 0
   - 点亮LoG节点: 34

✅ 推理节点详情:
   🟢 x is vumhpus (出现2次, 质量:perfect)
   🟢 vumhpus is babbpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现2次, 质量:perfect)

🔥 点亮的LoG节点:
   - gaxmpus is babbpus and golcpus
   - x is vumhpus
   - rihbpus is leyppus and doxnpus
   - wicbpus is gaxmpus and xezmpus and raqzpus
   - kiqhpus is gaxmpus and xezmpus and raqzpus
   - rihbpus is dawjpus
   - nulkpus is wicbpus
   - leyppus is babbpus and golcpus and mogppus
   - x is nulkpus
   - gaxmpus is duckpus
   - x is gaxmpus and xezmpus
   - gaxmpus is leyppus
   - wicbpus is kiqhpus
   - leyppus is babbpus and golcpus
   - jozvpus is mogppus
   - vumhpus is nulkpus
   - leyppus is jozvpus
   - jozvpus is babbpus and golcpus
   - x is babbpus and golcpus
   - gaxmpus is nedmpus
   - rihbpus is leyppus
   - duckpus is nedmpus
   - gaxmpus is rihbpus
   - x is gaxmpus
   - nedmpus is rihbpus
   - dawjpus is leyppus and doxnpus
   - leyppus is jozvpus and joblpus
   - x is wicbpus
   - liqzpus is wicbpus
   - wicbpus is gaxmpus and xezmpus
   - nulkpus is liqzpus
   - x is babbpus
   - jozvpus is babbpus and golcpus and mogppus
   - nedmpus is rihbpus and naxjpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 7/7 = 100.00%
   最深点亮节点: x is babbpus (第7层)
   节点Coverage: 34/34 = 100.00%
   前提条件Coverage: 21/23 = 91.30%
   各推理层点亮比例:
     第1层: 14/14 = 100.00%
     第2层: 8/8 = 100.00%
     第3层: 5/5 = 100.00%
     第4层: 3/3 = 100.00%
     第5层: 2/2 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/3 = 0.00%
   可推导节点: 3/3
   Strict Error Rate: 0/3 = 0.00%
   严格有效节点: 3/3

   详细分析:
     完美推理: 3 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 49/50
================================================================================
记录索引: 48
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_48.json
✅ 使用缓存结果:
   - 句子数: 5
   - 提取的语句数: 41
   - 初始条件数: 42

=== Statement提取完成 ===
总句子数: 5
成功提取: 5
失败提取: 0
总statements数: 41

=== 开始清洗Statement格式 ===
原始statements数: 41
清洗后statements数: 41
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 41
标准化后节点数: 40
过滤掉的无效实体数: 1
标准化后的节点:
  1. [actual] x → cifqpus (原始: x is cifqpus)
  2. [actual] cifqpus → babbpus (原始: cifqpus is babbpus)
  3. [actual] cifqpus → kucfpus (原始: cifqpus is kucfpus)
  4. [actual] kucfpus → jojrpus (原始: kucfpus is jojrpus)
  5. [actual] jojrpus → siqqpus (原始: jojrpus is siqqpus)
  6. [actual] siqqpus → gugtpus (原始: siqqpus is gugtpus)
  7. [actual] gugtpus → kavvpus (原始: gugtpus is kavvpus)
  8. [actual] kavvpus → patrpus (原始: kavvpus is patrpus)
  9. [actual] patrpus → sipwpus (原始: patrpus is sipwpus)
  10. [actual] sipwpus → qixtpus (原始: sipwpus is qixtpus)
  11. [actual] qixtpus → zunhpus (原始: qixtpus is zunhpus)
  12. [actual] zunhpus → goylpus (原始: zunhpus is goylpus)
  13. [actual] goylpus → levgpus (原始: goylpus is levgpus)
  14. [actual] levgpus → nadkpus (原始: levgpus is nadkpus)
  15. [actual] nadkpus → zevlpus (原始: nadkpus is zevlpus)
  16. [actual] zevlpus → tocxpus (原始: zevlpus is tocxpus)
  17. [actual] tocxpus → wijgpus (原始: tocxpus is wijgpus)
  18. [actual] wijgpus → maslpus (原始: wijgpus is maslpus)
  19. [actual] maslpus → fevdpus (原始: maslpus is fevdpus)
  20. [actual] fevdpus → ciyhpus (原始: fevdpus is ciyhpus)
  21. [actual] ciyhpus → gixqpus (原始: ciyhpus is gixqpus)
  22. [actual] gixqpus → taxbpus (原始: gixqpus is taxbpus)
  23. [actual] taxbpus → yaffpus (原始: taxbpus is yaffpus)
  24. [actual] yaffpus → naxgpus (原始: yaffpus is naxgpus)
  25. [actual] naxgpus → wutppus (原始: naxgpus is wutppus)
  26. [actual] wutppus → caflpus (原始: wutppus is caflpus)
  27. [actual] caflpus → raqdpus (原始: caflpus is raqdpus)
  28. [actual] raqdpus → hacwpus (原始: raqdpus is hacwpus)
  29. [actual] hacwpus → henfpus (原始: hacwpus is henfpus)
  30. [actual] henfpus → woycpus (原始: henfpus is woycpus)
  31. [actual] woycpus → kejvpus (原始: woycpus is kejvpus)
  32. [actual] kejvpus → lomtpus (原始: kejvpus is lomtpus)
  33. [actual] lomtpus → cobkpus (原始: lomtpus is cobkpus)
  34. [actual] cobkpus → gegjpus (原始: cobkpus is gegjpus)
  35. [actual] gegjpus → ladspus (原始: gegjpus is ladspus)
  36. [actual] ladspus → vuqzpus (原始: ladspus is vuqzpus)
  37. [actual] vuqzpus → kaqxpus (原始: vuqzpus is kaqxpus)
  38. [actual] kaqxpus → siqbpus (原始: kaqxpus is siqbpus)
  39. [actual] siqbpus → babbpus (原始: siqbpus is babbpus)
  40. [planning] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 64
[后处理] 加载LoG图，包含 64 个节点
  LoG节点 0: x is babbpus (规则: MP, 深度: 1)
  LoG节点 1: x is wutppus (规则: MP, 深度: 2)
  LoG节点 2: wutppus is babbpus (规则: MP, 深度: 2)
  LoG节点 3: x is tocxpus (规则: MP, 深度: 3)
  LoG节点 4: tocxpus is wutppus (规则: CE, 深度: 3)
  LoG节点 5: wutppus is lomtpus (规则: CE, 深度: 3)
  LoG节点 6: lomtpus is babbpus (规则: CE, 深度: 3)
  LoG节点 7: x is goylpus (规则: MP, 深度: 4)
  LoG节点 8: goylpus is tocxpus (规则: CE, 深度: 4)
  LoG节点 9: tocxpus is wutppus and zazbpus (规则: MP, 深度: 4)
  LoG节点 10: wutppus is lomtpus and hovqpus (规则: MP, 深度: 4)
  LoG节点 11: lomtpus is babbpus and malvpus (规则: MP, 深度: 4)
  LoG节点 12: x is gugtpus (规则: MP, 深度: 5)
  LoG节点 13: gugtpus is goylpus (规则: MP, 深度: 5)
  LoG节点 14: goylpus is tocxpus and cikfpus (规则: MP, 深度: 5)
  LoG节点 15: tocxpus is ciyhpus (规则: CE, 深度: 5)
  LoG节点 16: ciyhpus is wutppus and zazbpus (规则: MP, 深度: 5)
  LoG节点 17: wutppus is henfpus (规则: MP, 深度: 5)
  LoG节点 18: henfpus is lomtpus and hovqpus (规则: CE, 深度: 5)
  LoG节点 19: lomtpus is kaqxpus (规则: MP, 深度: 5)
  LoG节点 20: kaqxpus is babbpus and malvpus (规则: CI, 深度: 5)
  LoG节点 21: x is kucfpus (规则: CE, 深度: 6)
  LoG节点 22: kucfpus is gugtpus (规则: MP, 深度: 6)
  LoG节点 23: gugtpus is sipwpus (规则: MP, 深度: 6)
  LoG节点 24: sipwpus is goylpus (规则: MP, 深度: 6)
  LoG节点 25: goylpus is zevlpus (规则: MP, 深度: 6)
  LoG节点 26: zevlpus is tocxpus and cikfpus (规则: CI, 深度: 6)
  LoG节点 27: tocxpus is ciyhpus and kigbpus (规则: MP, 深度: 6)
  LoG节点 28: ciyhpus is yaffpus (规则: MP, 深度: 6)
  LoG节点 29: yaffpus is wutppus and zazbpus (规则: MP, 深度: 6)
  LoG节点 30: wutppus is raqdpus (规则: CE, 深度: 6)
  LoG节点 31: raqdpus is henfpus (规则: CE, 深度: 6)
  LoG节点 32: henfpus is lomtpus and hovqpus and gilrpus (规则: MP, 深度: 6)
  LoG节点 33: lomtpus is ladspus (规则: MP, 深度: 6)
  LoG节点 34: ladspus is kaqxpus (规则: CE, 深度: 6)
  LoG节点 35: kaqxpus is babbpus (规则: CE, 深度: 6)
  LoG节点 36: kaqxpus is malvpus (规则: MP, 深度: 6)
  LoG节点 37: x is kucfpus and tiftpus (规则: MP, 深度: 7)
  LoG节点 38: kucfpus is jojrpus (规则: CE, 深度: 7)
  LoG节点 39: jojrpus is gugtpus (规则: MP, 深度: 7)
  LoG节点 40: gugtpus is kavvpus (规则: CE, 深度: 7)
  LoG节点 41: kavvpus is sipwpus (规则: MP, 深度: 7)
  LoG节点 42: sipwpus is qixtpus (规则: CE, 深度: 7)
  LoG节点 43: qixtpus is goylpus (规则: MP, 深度: 7)
  LoG节点 44: goylpus is nadkpus (规则: MP, 深度: 7)
  LoG节点 45: nadkpus is zevlpus (规则: CE, 深度: 7)
  LoG节点 46: zevlpus is tocxpus (规则: CE, 深度: 7)
  LoG节点 47: zevlpus is cikfpus (规则: CE, 深度: 7)
  LoG节点 48: tocxpus is maslpus (规则: MP, 深度: 7)
  LoG节点 49: maslpus is ciyhpus and kigbpus (规则: MP, 深度: 7)
  LoG节点 50: ciyhpus is gixqpus (规则: CE, 深度: 7)
  LoG节点 51: gixqpus is yaffpus (规则: MP, 深度: 7)
  LoG节点 52: yaffpus is naxgpus (规则: CE, 深度: 7)
  LoG节点 53: naxgpus is wutppus and zazbpus (规则: CE, 深度: 7)
  LoG节点 54: wutppus is raqdpus and keydpus (规则: MP, 深度: 7)
  LoG节点 55: raqdpus is henfpus and burvpus (规则: MP, 深度: 7)
  LoG节点 56: henfpus is kejvpus (规则: MP, 深度: 7)
  LoG节点 57: kejvpus is lomtpus and hovqpus and gilrpus (规则: CE, 深度: 7)
  LoG节点 58: lomtpus is gegjpus (规则: MP, 深度: 7)
  LoG节点 59: gegjpus is ladspus (规则: CE, 深度: 7)
  LoG节点 60: ladspus is kaqxpus and xojzpus (规则: MP, 深度: 7)
  LoG节点 61: kaqxpus is babbpus and kajzpus (规则: MP, 深度: 7)
  LoG节点 62: kaqxpus is fexnpus (规则: MP, 深度: 7)
  LoG节点 63: fexnpus is malvpus (规则: CE, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 40
   - 初始条件数: 42
   - LoG图节点数: 64

📋 初始条件列表:
    1. yaffpus is naxgpus and zaxgpus
    2. cifqpus is kucfpus and tiftpus
    3. siqqpus is gugtpus
    4. taxbpus is yaffpus
    5. fexnpus is malvpus and vagkpus
    6. woycpus is kejvpus
    7. goylpus is levgpus
    8. raqdpus is hacwpus
    9. ciyhpus is gixqpus and kebspus
   10. gixqpus is taxbpus
   11. caflpus is raqdpus and keydpus
   12. ladspus is vuqzpus
   13. sipwpus is qixtpus and junbpus
   14. jojrpus is siqqpus
   15. kavvpus is patrpus
   16. vuqzpus is kaqxpus and xojzpus
   17. x is cifqpus
   18. wijgpus is maslpus
   19. henfpus is woycpus
   20. fevdpus is ciyhpus and kigbpus
   21. nadkpus is zevlpus and zuptpus
   22. patrpus is sipwpus
   23. zevlpus is tocxpus and lixgpus
   24. gugtpus is kavvpus and tubtpus
   25. hacwpus is henfpus and burvpus
   26. maslpus is fevdpus
   27. gegjpus is ladspus and yopkpus
   28. duxfpus is fexnpus
   29. zunhpus is goylpus
   30. kaqxpus is siqbpus
   31. wutppus is caflpus
   32. lomtpus is cobkpus
   33. kucfpus is jojrpus and liyvpus
   34. naxgpus is wutppus and zazbpus and nusdpus
   35. kaqxpus is duxfpus
   36. levgpus is nadkpus
   37. zevlpus is cikfpus and hucxpus
   38. tocxpus is wijgpus
   39. siqbpus is babbpus and kajzpus
   40. cobkpus is gegjpus
   41. qixtpus is zunhpus
   42. kejvpus is lomtpus and hovqpus and gilrpus and tuctpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 42 个前提节点

🔍 开始处理actual节点...

   节点 1: x is cifqpus
      ↻ 重复节点，计数: 2

   节点 2: cifqpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP+CE
      📋 推理路径: MP+CE规则: cifqpus is kucfpus → kucfpus is babbpus
[后处理] 基于推理轨迹点亮节点，使用了 37 个前提条件:
  - 前提: cifqpus is kucfpus and tiftpus
  - 前提: kucfpus is jojrpus and liyvpus
  - 前提: jojrpus is siqqpus
  - 前提: siqqpus is gugtpus
  - 前提: gugtpus is kavvpus and tubtpus
  - 前提: kavvpus is patrpus
  - 前提: patrpus is sipwpus
  - 前提: sipwpus is qixtpus and junbpus
  - 前提: qixtpus is zunhpus
  - 前提: zunhpus is goylpus
  - 前提: goylpus is levgpus
  - 前提: levgpus is nadkpus
  - 前提: nadkpus is zevlpus and zuptpus
  - 前提: zevlpus is tocxpus and lixgpus
  - 前提: tocxpus is wijgpus
  - 前提: wijgpus is maslpus
  - 前提: maslpus is fevdpus
  - 前提: fevdpus is ciyhpus and kigbpus
  - 前提: ciyhpus is gixqpus and kebspus
  - 前提: gixqpus is taxbpus
  - 前提: taxbpus is yaffpus
  - 前提: yaffpus is naxgpus and zaxgpus
  - 前提: naxgpus is wutppus and zazbpus and nusdpus
  - 前提: wutppus is caflpus
  - 前提: caflpus is raqdpus and keydpus
  - 前提: raqdpus is hacwpus
  - 前提: hacwpus is henfpus and burvpus
  - 前提: henfpus is woycpus
  - 前提: woycpus is kejvpus
  - 前提: kejvpus is lomtpus and hovqpus and gilrpus and tuctpus
  - 前提: lomtpus is cobkpus
  - 前提: cobkpus is gegjpus
  - 前提: gegjpus is ladspus and yopkpus
  - 前提: ladspus is vuqzpus
  - 前提: vuqzpus is kaqxpus and xojzpus
  - 前提: kaqxpus is siqbpus
  - 前提: siqbpus is babbpus and kajzpus
  ✓ 点亮LoG节点: wutppus is babbpus
[子树点亮]     └─ 点亮依赖节点: wutppus is lomtpus (深度3)
[子树点亮]     └─ 点亮依赖节点: lomtpus is babbpus (深度3)
[子树点亮]     └─ 点亮依赖节点: wutppus is lomtpus and hovqpus (深度4)
[子树点亮]     └─ 点亮依赖节点: lomtpus is babbpus and malvpus (深度4)
[子树点亮]     └─ 点亮依赖节点: wutppus is henfpus (深度5)
[子树点亮]     └─ 点亮依赖节点: henfpus is lomtpus and hovqpus (深度5)
[子树点亮]     └─ 点亮依赖节点: lomtpus is kaqxpus (深度5)
[子树点亮]     └─ 点亮依赖节点: kaqxpus is babbpus and malvpus (深度5)
[子树点亮]     └─ 点亮依赖节点: wutppus is raqdpus (深度6)
[子树点亮]     └─ 点亮依赖节点: raqdpus is henfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: henfpus is lomtpus and hovqpus and gilrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: lomtpus is ladspus (深度6)
[子树点亮]     └─ 点亮依赖节点: ladspus is kaqxpus (深度6)
[子树点亮]     └─ 点亮依赖节点: kaqxpus is babbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: kaqxpus is malvpus (深度6)
[子树点亮]     └─ 点亮依赖节点: wutppus is raqdpus and keydpus (深度7)
[子树点亮]     └─ 点亮依赖节点: raqdpus is henfpus and burvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: henfpus is kejvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kejvpus is lomtpus and hovqpus and gilrpus (深度7)
[子树点亮]     └─ 点亮依赖节点: lomtpus is gegjpus (深度7)
[子树点亮]     └─ 点亮依赖节点: gegjpus is ladspus (深度7)
[子树点亮]     └─ 点亮依赖节点: ladspus is kaqxpus and xojzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kaqxpus is babbpus and kajzpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kaqxpus is fexnpus (深度7)
[子树点亮]     └─ 点亮依赖节点: fexnpus is malvpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 25 个节点
  ✓ 点亮LoG节点: tocxpus is wutppus
[子树点亮]     └─ 点亮依赖节点: tocxpus is wutppus and zazbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: tocxpus is ciyhpus (深度5)
[子树点亮]     └─ 点亮依赖节点: ciyhpus is wutppus and zazbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: tocxpus is ciyhpus and kigbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: ciyhpus is yaffpus (深度6)
[子树点亮]     └─ 点亮依赖节点: yaffpus is wutppus and zazbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: tocxpus is maslpus (深度7)
[子树点亮]     └─ 点亮依赖节点: maslpus is ciyhpus and kigbpus (深度7)
[子树点亮]     └─ 点亮依赖节点: ciyhpus is gixqpus (深度7)
[子树点亮]     └─ 点亮依赖节点: gixqpus is yaffpus (深度7)
[子树点亮]     └─ 点亮依赖节点: yaffpus is naxgpus (深度7)
[子树点亮]     └─ 点亮依赖节点: naxgpus is wutppus and zazbpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 12 个节点
  ✓ 点亮LoG节点: goylpus is tocxpus
[子树点亮]     └─ 点亮依赖节点: goylpus is tocxpus and cikfpus (深度5)
[子树点亮]     └─ 点亮依赖节点: goylpus is zevlpus (深度6)
[子树点亮]     └─ 点亮依赖节点: zevlpus is tocxpus and cikfpus (深度6)
[子树点亮]     └─ 点亮依赖节点: goylpus is nadkpus (深度7)
[子树点亮]     └─ 点亮依赖节点: nadkpus is zevlpus (深度7)
[子树点亮]     └─ 点亮依赖节点: zevlpus is tocxpus (深度7)
[子树点亮]     └─ 点亮依赖节点: zevlpus is cikfpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 7 个节点
  ✓ 点亮LoG节点: gugtpus is goylpus
[子树点亮]     └─ 点亮依赖节点: gugtpus is sipwpus (深度6)
[子树点亮]     └─ 点亮依赖节点: sipwpus is goylpus (深度6)
[子树点亮]     └─ 点亮依赖节点: gugtpus is kavvpus (深度7)
[子树点亮]     └─ 点亮依赖节点: kavvpus is sipwpus (深度7)
[子树点亮]     └─ 点亮依赖节点: sipwpus is qixtpus (深度7)
[子树点亮]     └─ 点亮依赖节点: qixtpus is goylpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 6 个节点
  ✓ 点亮LoG节点: kucfpus is gugtpus
[子树点亮]     └─ 点亮依赖节点: kucfpus is jojrpus (深度7)
[子树点亮]     └─ 点亮依赖节点: jojrpus is gugtpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 5 个LoG节点

   节点 3: cifqpus is kucfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: cifqpus is kucfpus and tiftpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: cifqpus is kucfpus and tiftpus

   节点 4: kucfpus is jojrpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 5: jojrpus is siqqpus
      ↻ 重复节点，计数: 2

   节点 6: siqqpus is gugtpus
      ↻ 重复节点，计数: 2

   节点 7: gugtpus is kavvpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 8: kavvpus is patrpus
      ↻ 重复节点，计数: 2

   节点 9: patrpus is sipwpus
      ↻ 重复节点，计数: 2

   节点 10: sipwpus is qixtpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 11: qixtpus is zunhpus
      ↻ 重复节点，计数: 2

   节点 12: zunhpus is goylpus
      ↻ 重复节点，计数: 2

   节点 13: goylpus is levgpus
      ↻ 重复节点，计数: 2

   节点 14: levgpus is nadkpus
      ↻ 重复节点，计数: 2

   节点 15: nadkpus is zevlpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 16: zevlpus is tocxpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 17: tocxpus is wijgpus
      ↻ 重复节点，计数: 2

   节点 18: wijgpus is maslpus
      ↻ 重复节点，计数: 2

   节点 19: maslpus is fevdpus
      ↻ 重复节点，计数: 2

   节点 20: fevdpus is ciyhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: fevdpus is ciyhpus and kigbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: fevdpus is ciyhpus and kigbpus

   节点 21: ciyhpus is gixqpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 22: gixqpus is taxbpus
      ↻ 重复节点，计数: 2

   节点 23: taxbpus is yaffpus
      ↻ 重复节点，计数: 2

   节点 24: yaffpus is naxgpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 25: naxgpus is wutppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: naxgpus is wutppus and zazbpus and nusdpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: naxgpus is wutppus and zazbpus and nusdpus

   节点 26: wutppus is caflpus
      ↻ 重复节点，计数: 2

   节点 27: caflpus is raqdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: caflpus is raqdpus and keydpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: caflpus is raqdpus and keydpus

   节点 28: raqdpus is hacwpus
      ↻ 重复节点，计数: 2

   节点 29: hacwpus is henfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: hacwpus is henfpus and burvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: hacwpus is henfpus and burvpus

   节点 30: henfpus is woycpus
      ↻ 重复节点，计数: 2

   节点 31: woycpus is kejvpus
      ↻ 重复节点，计数: 2

   节点 32: kejvpus is lomtpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kejvpus is lomtpus and hovqpus and gilrpus and tuctpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kejvpus is lomtpus and hovqpus and gilrpus and tuctpus

   节点 33: lomtpus is cobkpus
      ↻ 重复节点，计数: 2

   节点 34: cobkpus is gegjpus
      ↻ 重复节点，计数: 2

   节点 35: gegjpus is ladspus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 36: ladspus is vuqzpus
      ↻ 重复节点，计数: 2

   节点 37: vuqzpus is kaqxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: vuqzpus is kaqxpus and xojzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: vuqzpus is kaqxpus and xojzpus

   节点 38: kaqxpus is siqbpus
      ↻ 重复节点，计数: 2

   节点 39: siqbpus is babbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: siqbpus is babbpus and kajzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: siqbpus is babbpus and kajzpus

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 39
   - 新增节点: 17
   - 更新已存在节点: 22
   - 点亮的LoG节点: 57

🎯 推理质量统计:
   - 完美推理: 17 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 64节点, 42前提, 复杂度1-42

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 59
   - 前提节点: 42
   - 推理节点: 17
   - 幻觉节点: 0
   - 点亮LoG节点: 57

✅ 推理节点详情:
   🟢 cifqpus is babbpus (出现1次, 质量:perfect)
   🟢 cifqpus is kucfpus (出现1次, 质量:perfect)
   🟢 kucfpus is jojrpus (出现1次, 质量:perfect)
   🟢 gugtpus is kavvpus (出现1次, 质量:perfect)
   🟢 sipwpus is qixtpus (出现1次, 质量:perfect)
   🟢 nadkpus is zevlpus (出现1次, 质量:perfect)
   🟢 zevlpus is tocxpus (出现1次, 质量:perfect)
   🟢 fevdpus is ciyhpus (出现1次, 质量:perfect)
   🟢 ciyhpus is gixqpus (出现1次, 质量:perfect)
   🟢 yaffpus is naxgpus (出现1次, 质量:perfect)
   🟢 naxgpus is wutppus (出现1次, 质量:perfect)
   🟢 caflpus is raqdpus (出现1次, 质量:perfect)
   🟢 hacwpus is henfpus (出现1次, 质量:perfect)
   🟢 kejvpus is lomtpus (出现1次, 质量:perfect)
   🟢 gegjpus is ladspus (出现1次, 质量:perfect)
   🟢 vuqzpus is kaqxpus (出现1次, 质量:perfect)
   🟢 siqbpus is babbpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - ciyhpus is yaffpus
   - gugtpus is goylpus
   - wutppus is babbpus
   - zevlpus is cikfpus
   - lomtpus is ladspus
   - wutppus is raqdpus and keydpus
   - kejvpus is lomtpus and hovqpus and gilrpus
   - tocxpus is wutppus
   - kaqxpus is babbpus and kajzpus
   - tocxpus is wutppus and zazbpus
   - lomtpus is babbpus and malvpus
   - kaqxpus is babbpus and malvpus
   - lomtpus is kaqxpus
   - ladspus is kaqxpus and xojzpus
   - kaqxpus is fexnpus
   - yaffpus is naxgpus
   - kucfpus is gugtpus
   - tocxpus is maslpus
   - wutppus is lomtpus
   - sipwpus is qixtpus
   - fexnpus is malvpus
   - gugtpus is sipwpus
   - raqdpus is henfpus and burvpus
   - sipwpus is goylpus
   - lomtpus is babbpus
   - ciyhpus is gixqpus
   - naxgpus is wutppus and zazbpus
   - ciyhpus is wutppus and zazbpus
   - zevlpus is tocxpus and cikfpus
   - kavvpus is sipwpus
   - wutppus is henfpus
   - gugtpus is kavvpus
   - gixqpus is yaffpus
   - goylpus is tocxpus
   - qixtpus is goylpus
   - henfpus is lomtpus and hovqpus and gilrpus
   - kaqxpus is malvpus
   - wutppus is raqdpus
   - goylpus is tocxpus and cikfpus
   - kucfpus is jojrpus
   - raqdpus is henfpus
   - henfpus is lomtpus and hovqpus
   - ladspus is kaqxpus
   - goylpus is nadkpus
   - tocxpus is ciyhpus
   - yaffpus is wutppus and zazbpus
   - lomtpus is gegjpus
   - henfpus is kejvpus
   - tocxpus is ciyhpus and kigbpus
   - nadkpus is zevlpus
   - wutppus is lomtpus and hovqpus
   - jojrpus is gugtpus
   - goylpus is zevlpus
   - gegjpus is ladspus
   - maslpus is ciyhpus and kigbpus
   - zevlpus is tocxpus
   - kaqxpus is babbpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 6/7 = 85.71%
   最深点亮节点: wutppus is babbpus (第6层)
   节点Coverage: 57/64 = 89.06%
   前提条件Coverage: 22/42 = 52.38%
   各推理层点亮比例:
     第1层: 26/27 = 96.30%
     第2层: 15/16 = 93.75%
     第3层: 8/9 = 88.89%
     第4层: 4/5 = 80.00%
     第5层: 3/4 = 75.00%
     第6层: 1/2 = 50.00%
     第7层: 0/1 = 0.00%

🎯 计算Precision指标...
   Error Rate: 0/17 = 0.00%
   可推导节点: 17/17
   Strict Error Rate: 0/17 = 0.00%
   严格有效节点: 17/17

   详细分析:
     完美推理: 17 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 50/50
================================================================================
记录索引: 49
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_7.deepseek-reasoner_record_49.json
✅ 使用缓存结果:
   - 句子数: 7
   - 提取的语句数: 15
   - 初始条件数: 13

=== Statement提取完成 ===
总句子数: 7
成功提取: 7
失败提取: 0
总statements数: 15

=== 开始清洗Statement格式 ===
原始statements数: 15
清洗后statements数: 15
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 15
标准化后节点数: 15
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → domnpus (原始: x is domnpus)
  2. [actual] domnpus → volgpus (原始: domnpus is volgpus)
  3. [actual] volgpus → gesypus (原始: volgpus is gesypus)
  4. [actual] gesypus → navnpus (原始: gesypus is navnpus)
  5. [actual] navnpus → kefbpus (原始: navnpus is kefbpus)
  6. [actual] kefbpus → tugdpus (原始: kefbpus is tugdpus)
  7. [actual] tugdpus → bilqpus (原始: tugdpus is bilqpus)
  8. [actual] bilocpus → zuvfpus (原始: bilocpus is zuvfpus)
  9. [actual] zuvfpus → kudtpus (原始: zuvfpus is kudtpus)
  10. [actual] kudtpus → babbpus (原始: kudtpus is babbpus)
  11. [planning] x → babbpus (原始: x is babbpus)
  12. [actual] x → babbpus (原始: x is babbpus)
  13. [planning] x → babbpus (原始: x is babbpus)
  14. [planning] x → baccpus (原始: x is baccpus)
  15. [actual] x → babbpus (原始: x is babbpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 25
[后处理] 加载LoG图，包含 25 个节点
  LoG节点 0: x is babbpus or baccpus (规则: DI, 深度: 1)
  LoG节点 1: x is babbpus (规则: CE, 深度: 2)
  LoG节点 2: x is babbpus and telspus (规则: MP, 深度: 3)
  LoG节点 3: x is tugdpus (规则: MP, 深度: 4)
  LoG节点 4: tugdpus is babbpus and telspus (规则: MP, 深度: 4)
  LoG节点 5: x is volgpus (规则: CE, 深度: 5)
  LoG节点 6: volgpus is tugdpus (规则: MP, 深度: 5)
  LoG节点 7: tugdpus is zuvfpus (规则: CE, 深度: 5)
  LoG节点 8: zuvfpus is babbpus and telspus (规则: CI, 深度: 5)
  LoG节点 9: x is volgpus and jasrpus (规则: MP, 深度: 6)
  LoG节点 10: volgpus is navnpus (规则: CE, 深度: 6)
  LoG节点 11: navnpus is tugdpus (规则: MP, 深度: 6)
  LoG节点 12: tugdpus is zuvfpus and xunppus (规则: MP, 深度: 6)
  LoG节点 13: zuvfpus is babbpus (规则: MP, 深度: 6)
  LoG节点 14: zuvfpus is telspus (规则: CE, 深度: 6)
  LoG节点 15: x is domnpus (规则: CE, 深度: 7)
  LoG节点 16: domnpus is volgpus and jasrpus (规则: CI, 深度: 7)
  LoG节点 17: volgpus is navnpus and wazdpus (规则: MP, 深度: 7)
  LoG节点 18: navnpus is kefbpus (规则: CE, 深度: 7)
  LoG节点 19: kefbpus is tugdpus (规则: CE, 深度: 7)
  LoG节点 20: tugdpus is bilqpus (规则: CE, 深度: 7)
  LoG节点 21: bilqpus is zuvfpus and xunppus (规则: CE, 深度: 7)
  LoG节点 22: zuvfpus is kudtpus (规则: CE, 深度: 7)
  LoG节点 23: kudtpus is babbpus (规则: CE, 深度: 7)
  LoG节点 24: zuvfpus is telspus and zuqkpus (规则: MP, 深度: 7)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 15
   - 初始条件数: 13
   - LoG图节点数: 25

📋 初始条件列表:
    1. zuvfpus is cosdpus
    2. domnpus is jasrpus
    3. kefbpus is tugdpus and nirjpus
    4. gesypus is navnpus and wazdpus
    5. navnpus is kefbpus and wodqpus
    6. domnpus is volgpus
    7. tugdpus is bilqpus and jefqpus
    8. zuvfpus is kudtpus and lijmpus
    9. cosdpus is telspus and zuqkpus
   10. x is domnpus and gorrpus
   11. volgpus is gesypus
   12. kudtpus is babbpus and yudypus
   13. bilqpus is zuvfpus and xunppus and hozvpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 13 个前提节点

🔍 开始处理actual节点...

   节点 1: x is domnpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is domnpus
      ✅ 验证成功 + LoG匹配

   节点 2: domnpus is volgpus
      ↻ 重复节点，计数: 2

   节点 3: volgpus is gesypus
      ↻ 重复节点，计数: 2

   节点 4: gesypus is navnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gesypus is navnpus and wazdpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gesypus is navnpus and wazdpus

   节点 5: navnpus is kefbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: navnpus is kefbpus
      ✅ 验证成功 + LoG匹配

   节点 6: kefbpus is tugdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: kefbpus is tugdpus
      ✅ 验证成功 + LoG匹配

   节点 7: tugdpus is bilqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: tugdpus is bilqpus
      ✅ 验证成功 + LoG匹配

   节点 8: bilocpus is zuvfpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 9: zuvfpus is kudtpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: zuvfpus is kudtpus
      ✅ 验证成功 + LoG匹配

   节点 10: kudtpus is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: kudtpus is babbpus
      ✅ 验证成功 + LoG匹配

   节点 11: x is babbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babbpus
[子树点亮]     └─ 点亮依赖节点: x is babbpus and telspus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is tugdpus (深度4)
[子树点亮]     └─ 点亮依赖节点: tugdpus is babbpus and telspus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is volgpus (深度5)
[子树点亮]     └─ 点亮依赖节点: volgpus is tugdpus (深度5)
[子树点亮]     └─ 点亮依赖节点: tugdpus is zuvfpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zuvfpus is babbpus and telspus (深度5)
[子树点亮]     └─ 点亮依赖节点: x is volgpus and jasrpus (深度6)
[子树点亮]     └─ 点亮依赖节点: volgpus is navnpus (深度6)
[子树点亮]     └─ 点亮依赖节点: navnpus is tugdpus (深度6)
[子树点亮]     └─ 点亮依赖节点: tugdpus is zuvfpus and xunppus (深度6)
[子树点亮]     └─ 点亮依赖节点: zuvfpus is babbpus (深度6)
[子树点亮]     └─ 点亮依赖节点: zuvfpus is telspus (深度6)
[子树点亮]     └─ 点亮依赖节点: domnpus is volgpus and jasrpus (深度7)
[子树点亮]     └─ 点亮依赖节点: volgpus is navnpus and wazdpus (深度7)
[子树点亮]     └─ 点亮依赖节点: bilqpus is zuvfpus and xunppus (深度7)
[子树点亮]     └─ 点亮依赖节点: zuvfpus is telspus and zuqkpus (深度7)
[后处理]   └─ 自动点亮依赖子树: 17 个节点
      ✅ 验证成功 + LoG匹配

   节点 12: x is babbpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 12
   - 新增节点: 9
   - 更新已存在节点: 3
   - 点亮的LoG节点: 24

🎯 推理质量统计:
   - 完美推理: 9 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 25节点, 13前提, 复杂度1-13

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 22
   - 前提节点: 13
   - 推理节点: 8
   - 幻觉节点: 1
   - 点亮LoG节点: 24

❌ 幻觉节点详情:
   - bilocpus is zuvfpus (出现1次)

✅ 推理节点详情:
   🟢 x is domnpus (出现1次, 质量:perfect)
   🟢 gesypus is navnpus (出现1次, 质量:perfect)
   🟢 navnpus is kefbpus (出现1次, 质量:perfect)
   🟢 kefbpus is tugdpus (出现1次, 质量:perfect)
   🟢 tugdpus is bilqpus (出现1次, 质量:perfect)
   🟢 zuvfpus is kudtpus (出现1次, 质量:perfect)
   🟢 kudtpus is babbpus (出现1次, 质量:perfect)
   🟢 x is babbpus (出现2次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is volgpus
   - volgpus is navnpus and wazdpus
   - zuvfpus is babbpus
   - zuvfpus is kudtpus
   - tugdpus is bilqpus
   - navnpus is tugdpus
   - volgpus is navnpus
   - domnpus is volgpus and jasrpus
   - x is domnpus
   - zuvfpus is telspus and zuqkpus
   - navnpus is kefbpus
   - tugdpus is zuvfpus
   - bilqpus is zuvfpus and xunppus
   - tugdpus is babbpus and telspus
   - x is tugdpus
   - x is babbpus and telspus
   - tugdpus is zuvfpus and xunppus
   - x is volgpus and jasrpus
   - volgpus is tugdpus
   - kefbpus is tugdpus
   - zuvfpus is telspus
   - kudtpus is babbpus
   - x is babbpus
   - zuvfpus is babbpus and telspus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 6/7 = 85.71%
   最深点亮节点: x is babbpus (第6层)
   节点Coverage: 24/25 = 96.00%
   前提条件Coverage: 2/13 = 15.38%
   各推理层点亮比例:
     第1层: 10/10 = 100.00%
     第2层: 6/6 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%
     第6层: 1/1 = 100.00%
     第7层: 0/1 = 0.00%

🎯 计算Precision指标...
   Error Rate: 1/9 = 11.11%
   可推导节点: 8/9
   Strict Error Rate: 1/9 = 11.11%
   严格有效节点: 8/9

   详细分析:
     完美推理: 9 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
📊 平均指标摘要 (基于 50 条记录)
================================================================================

🎯 Coverage指标 (召回率):
   深度Coverage: 90.00% (平均最深层级: 6.3)
   节点Coverage: 90.88% (总体: 92.34%)
     - 总点亮节点: 1942
     - 总LoG节点: 2103
   前提Coverage: 54.05%
   各推理层平均点亮比例:
     第1层: 平均92.87%, 总体793/840=94.40% (50条记录)
     第2层: 平均92.22%, 总体484/517=93.62% (50条记录)
     第3层: 平均91.69%, 总体292/314=92.99% (50条记录)
     第4层: 平均89.57%, 总体175/194=90.21% (50条记录)
     第5层: 平均87.67%, 总体101/115=87.83% (50条记录)
     第6层: 平均81.00%, 总体61/73=83.56% (50条记录)
     第7层: 平均72.00%, 总体36/50=72.00% (50条记录)

🎯 Precision指标 (精确率):
   Error Rate: 3.24% (总体: 3.19%)
     - 可推导节点: 485
     - 总推理节点: 501
   Strict Error Rate: 3.55%
   推理质量分布:
     - 完美推理: 485 (96.81%)
     - 部分推理: 16 (3.19%)
     - 无效推理: 0 (0.00%)

📈 数据统计:
   总statements: 1897 (平均: 37.9/记录)
   前提statements: 1396
   推理statements: 501 (平均: 10.0/记录)
结果已保存到: step_by_step_evaluation_2_evaluation_results.LoG_7.deepseek-reasoner.json

评估成功完成！
