开始评估推理过程（版本2.0）...
日志文件: ./evaluation_log/evaluation_results.LoG_5.deepseek-reasoner.json
LLM调试模式: False
找到 100 条记录
检测到input_file: ./generated_data/LoG_5.jsonl
从 ./generated_data/LoG_5.jsonl 加载了 100 个例子的图数据

处理前 50 条记录（总共 100 条）...

================================================================================
处理记录 1/50
================================================================================
记录索引: 0
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_0.json
✅ 使用缓存结果:
   - 句子数: 50
   - 提取的语句数: 49
   - 初始条件数: 9

=== Statement提取完成 ===
总句子数: 50
成功提取: 50
失败提取: 0
总statements数: 49

=== 开始清洗Statement格式 ===
原始statements数: 49
清洗后statements数: 47
过滤掉的statements数: 2
清洗后的statements:
  1. [actual] vegwpus is ganfpus
  2. [actual] kirypus is xizrpus and robspus
  3. [actual] ganfpus is yuxbpus
  4. [actual] juqspus is babcpus and vibwpus and petbpus
  5. [actual] yuxbpus is juqspus
  6. [actual] x is relmpus and muqcpus
  7. [actual] xizrpus is vegwpus and jiqjpus
  8. [actual] relmpus is peshpus and tiltpus
  9. [actual] peshpus is kirypus and poxgpus
  10. [actual] x is relmpus and muqcpus
  11. [actual] x is relmpus and muqcpus
  12. [actual] relmpus is peshpus and tiltpus
  13. [actual] relmpus is peshpus and tiltpus
  14. [actual] relmpus is peshpus and tiltpus
  15. [actual] x is peshpus
  16. [actual] relmpus is peshpus
  17. [actual] x is tiltpus
  18. [actual] relmpus is tiltpus
  19. [actual] peshpus is kirypus
  20. [actual] peshpus is poxgpus
  21. [actual] peshpus is kirypus and poxgpus
  22. [actual] x is peshpus
  23. [actual] x is kirypus
  24. [actual] x is poxgpus
  25. [actual] kirypus is xizrpus and robspus
  26. [actual] kirypus is xizrpus and robspus
  27. [actual] x is xizrpus and robspus
  28. [actual] xizrpus is vegwpus and jiqjpus
  29. [actual] xizrpus is vegwpus and jiqjpus
  30. [actual] x is vegwpus and jiqjpus
  31. [actual] vegwpus is ganfpus
  32. [actual] vegwpus is ganfpus
  33. [actual] x is ganfpus
  34. [actual] ganfpus is yuxbpus
  35. [actual] ganfpus is yuxbpus
  36. [actual] x is yuxbpus
  37. [actual] yuxbpus is juqspus
  38. [actual] yuxbpus is juqspus
  39. [actual] x is juqspus
  40. [actual] juqspus is babcpus and vibwpus and petbpus
  41. [actual] juqspus is babcpus and vibwpus and petbpus
  42. [actual] x is juqspus
  43. [actual] x is babcpus
  44. [actual] x is babcpus
  45. [actual] juqspus is babcpus
  46. [actual] x is juqspus
  47. [actual] x is babcpus

=== 开始标准化和解析节点 ===
清洗后statements数: 47
标准化后节点数: 47
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] vegwpus → ganfpus (原始: vegwpus is ganfpus)
  2. [actual] kirypus → xizrpus and robspus (原始: kirypus is xizrpus and robspus)
  3. [actual] ganfpus → yuxbpus (原始: ganfpus is yuxbpus)
  4. [actual] juqspus → babcpus and vibwpus and petbpus (原始: juqspus is babcpus and vibwpus and petbpus)
  5. [actual] yuxbpus → juqspus (原始: yuxbpus is juqspus)
  6. [actual] x → relmpus and muqcpus (原始: x is relmpus and muqcpus)
  7. [actual] xizrpus → vegwpus and jiqjpus (原始: xizrpus is vegwpus and jiqjpus)
  8. [actual] relmpus → peshpus and tiltpus (原始: relmpus is peshpus and tiltpus)
  9. [actual] peshpus → kirypus and poxgpus (原始: peshpus is kirypus and poxgpus)
  10. [actual] x → relmpus and muqcpus (原始: x is relmpus and muqcpus)
  11. [actual] x → relmpus and muqcpus (原始: x is relmpus and muqcpus)
  12. [actual] relmpus → peshpus and tiltpus (原始: relmpus is peshpus and tiltpus)
  13. [actual] relmpus → peshpus and tiltpus (原始: relmpus is peshpus and tiltpus)
  14. [actual] relmpus → peshpus and tiltpus (原始: relmpus is peshpus and tiltpus)
  15. [actual] x → peshpus (原始: x is peshpus)
  16. [actual] relmpus → peshpus (原始: relmpus is peshpus)
  17. [actual] x → tiltpus (原始: x is tiltpus)
  18. [actual] relmpus → tiltpus (原始: relmpus is tiltpus)
  19. [actual] peshpus → kirypus (原始: peshpus is kirypus)
  20. [actual] peshpus → poxgpus (原始: peshpus is poxgpus)
  21. [actual] peshpus → kirypus and poxgpus (原始: peshpus is kirypus and poxgpus)
  22. [actual] x → peshpus (原始: x is peshpus)
  23. [actual] x → kirypus (原始: x is kirypus)
  24. [actual] x → poxgpus (原始: x is poxgpus)
  25. [actual] kirypus → xizrpus and robspus (原始: kirypus is xizrpus and robspus)
  26. [actual] kirypus → xizrpus and robspus (原始: kirypus is xizrpus and robspus)
  27. [actual] x → xizrpus and robspus (原始: x is xizrpus and robspus)
  28. [actual] xizrpus → vegwpus and jiqjpus (原始: xizrpus is vegwpus and jiqjpus)
  29. [actual] xizrpus → vegwpus and jiqjpus (原始: xizrpus is vegwpus and jiqjpus)
  30. [actual] x → vegwpus and jiqjpus (原始: x is vegwpus and jiqjpus)
  31. [actual] vegwpus → ganfpus (原始: vegwpus is ganfpus)
  32. [actual] vegwpus → ganfpus (原始: vegwpus is ganfpus)
  33. [actual] x → ganfpus (原始: x is ganfpus)
  34. [actual] ganfpus → yuxbpus (原始: ganfpus is yuxbpus)
  35. [actual] ganfpus → yuxbpus (原始: ganfpus is yuxbpus)
  36. [actual] x → yuxbpus (原始: x is yuxbpus)
  37. [actual] yuxbpus → juqspus (原始: yuxbpus is juqspus)
  38. [actual] yuxbpus → juqspus (原始: yuxbpus is juqspus)
  39. [actual] x → juqspus (原始: x is juqspus)
  40. [actual] juqspus → babcpus and vibwpus and petbpus (原始: juqspus is babcpus and vibwpus and petbpus)
  41. [actual] juqspus → babcpus and vibwpus and petbpus (原始: juqspus is babcpus and vibwpus and petbpus)
  42. [actual] x → juqspus (原始: x is juqspus)
  43. [actual] x → babcpus (原始: x is babcpus)
  44. [actual] x → babcpus (原始: x is babcpus)
  45. [actual] juqspus → babcpus (原始: juqspus is babcpus)
  46. [actual] x → juqspus (原始: x is juqspus)
  47. [actual] x → babcpus (原始: x is babcpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 15
[后处理] 加载LoG图，包含 15 个节点
  LoG节点 0: x is babcpus (规则: CE, 深度: 1)
  LoG节点 1: x is babcpus and vibwpus (规则: MP, 深度: 2)
  LoG节点 2: x is xizrpus (规则: MP, 深度: 3)
  LoG节点 3: xizrpus is babcpus and vibwpus (规则: MP, 深度: 3)
  LoG节点 4: x is peshpus (规则: MP, 深度: 4)
  LoG节点 5: peshpus is xizrpus (规则: MP, 深度: 4)
  LoG节点 6: xizrpus is yuxbpus (规则: MP, 深度: 4)
  LoG节点 7: yuxbpus is babcpus and vibwpus (规则: CE, 深度: 4)
  LoG节点 8: x is relmpus (规则: CE, 深度: 5)
  LoG节点 9: relmpus is peshpus (规则: CE, 深度: 5)
  LoG节点 10: peshpus is kirypus (规则: CE, 深度: 5)
  LoG节点 11: kirypus is xizrpus (规则: CE, 深度: 5)
  LoG节点 12: xizrpus is vegwpus (规则: CE, 深度: 5)
  LoG节点 13: vegwpus is yuxbpus (规则: MP, 深度: 5)
  LoG节点 14: yuxbpus is babcpus and vibwpus and petbpus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 47
   - 初始条件数: 9
   - LoG图节点数: 15

📋 初始条件列表:
    1. vegwpus is ganfpus
    2. kirypus is xizrpus and robspus
    3. ganfpus is yuxbpus
    4. juqspus is babcpus and vibwpus and petbpus
    5. yuxbpus is juqspus
    6. x is relmpus and muqcpus
    7. xizrpus is vegwpus and jiqjpus
    8. relmpus is peshpus and tiltpus
    9. peshpus is kirypus and poxgpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 9 个前提节点

🔍 开始处理actual节点...

   节点 1: vegwpus is ganfpus
      ↻ 重复节点，计数: 2

   节点 2: kirypus is xizrpus and robspus
      ↻ 重复节点，计数: 2

   节点 3: ganfpus is yuxbpus
      ↻ 重复节点，计数: 2

   节点 4: juqspus is babcpus and vibwpus and petbpus
      ↻ 重复节点，计数: 2

   节点 5: yuxbpus is juqspus
      ↻ 重复节点，计数: 2

   节点 6: x is relmpus and muqcpus
      ↻ 重复节点，计数: 2

   节点 7: xizrpus is vegwpus and jiqjpus
      ↻ 重复节点，计数: 2

   节点 8: relmpus is peshpus and tiltpus
      ↻ 重复节点，计数: 2

   节点 9: peshpus is kirypus and poxgpus
      ↻ 重复节点，计数: 2

   节点 10: x is relmpus and muqcpus
      ↻ 重复节点，计数: 3

   节点 11: x is relmpus and muqcpus
      ↻ 重复节点，计数: 4

   节点 12: relmpus is peshpus and tiltpus
      ↻ 重复节点，计数: 3

   节点 13: relmpus is peshpus and tiltpus
      ↻ 重复节点，计数: 4

   节点 14: relmpus is peshpus and tiltpus
      ↻ 重复节点，计数: 5

   节点 15: x is peshpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is peshpus
[子树点亮]     └─ 点亮依赖节点: x is relmpus (深度5)
[子树点亮]     └─ 点亮依赖节点: relmpus is peshpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 16: relmpus is peshpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 17: x is tiltpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP+CE
      📋 推理路径: MP+CE规则: x is relmpus → relmpus is tiltpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is relmpus and muqcpus
  - 前提: relmpus is peshpus and tiltpus

   节点 18: relmpus is tiltpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: relmpus is peshpus and tiltpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: relmpus is peshpus and tiltpus

   节点 19: peshpus is kirypus
      🔍 验证新节点...
[后处理] 点亮LoG节点: peshpus is kirypus
      ✅ 验证成功 + LoG匹配

   节点 20: peshpus is poxgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: peshpus is kirypus and poxgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: peshpus is kirypus and poxgpus

   节点 21: peshpus is kirypus and poxgpus
      ↻ 重复节点，计数: 3

   节点 22: x is peshpus
      ↻ 重复节点，计数: 2

   节点 23: x is kirypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is peshpus → peshpus is kirypus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is peshpus
  - 前提: peshpus is kirypus

   节点 24: x is poxgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is peshpus → peshpus is poxgpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is peshpus
  - 前提: peshpus is poxgpus

   节点 25: kirypus is xizrpus and robspus
      ↻ 重复节点，计数: 3

   节点 26: kirypus is xizrpus and robspus
      ↻ 重复节点，计数: 4

   节点 27: x is xizrpus and robspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is peshpus → peshpus is xizrpus and robspus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is peshpus
  - 前提: peshpus is kirypus
  - 前提: kirypus is xizrpus and robspus
  ✓ 点亮LoG节点: x is xizrpus
[子树点亮]     └─ 点亮依赖节点: peshpus is xizrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: kirypus is xizrpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 28: xizrpus is vegwpus and jiqjpus
      ↻ 重复节点，计数: 3

   节点 29: xizrpus is vegwpus and jiqjpus
      ↻ 重复节点，计数: 4

   节点 30: x is vegwpus and jiqjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is peshpus → peshpus is vegwpus and jiqjpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is peshpus
  - 前提: peshpus is kirypus
  - 前提: kirypus is xizrpus and robspus
  - 前提: xizrpus is vegwpus and jiqjpus
  ✓ 点亮LoG节点: xizrpus is vegwpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 31: vegwpus is ganfpus
      ↻ 重复节点，计数: 3

   节点 32: vegwpus is ganfpus
      ↻ 重复节点，计数: 4

   节点 33: x is ganfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is peshpus → peshpus is ganfpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is peshpus
  - 前提: peshpus is kirypus
  - 前提: kirypus is xizrpus and robspus
  - 前提: xizrpus is vegwpus and jiqjpus
  - 前提: vegwpus is ganfpus

   节点 34: ganfpus is yuxbpus
      ↻ 重复节点，计数: 3

   节点 35: ganfpus is yuxbpus
      ↻ 重复节点，计数: 4

   节点 36: x is yuxbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is peshpus → peshpus is yuxbpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is peshpus
  - 前提: peshpus is kirypus
  - 前提: kirypus is xizrpus and robspus
  - 前提: xizrpus is vegwpus and jiqjpus
  - 前提: vegwpus is ganfpus
  - 前提: ganfpus is yuxbpus
  ✓ 点亮LoG节点: xizrpus is yuxbpus
[子树点亮]     └─ 点亮依赖节点: vegwpus is yuxbpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 37: yuxbpus is juqspus
      ↻ 重复节点，计数: 3

   节点 38: yuxbpus is juqspus
      ↻ 重复节点，计数: 4

   节点 39: x is juqspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is peshpus → peshpus is juqspus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is peshpus
  - 前提: peshpus is kirypus
  - 前提: kirypus is xizrpus and robspus
  - 前提: xizrpus is vegwpus and jiqjpus
  - 前提: vegwpus is ganfpus
  - 前提: ganfpus is yuxbpus
  - 前提: yuxbpus is juqspus

   节点 40: juqspus is babcpus and vibwpus and petbpus
      ↻ 重复节点，计数: 3

   节点 41: juqspus is babcpus and vibwpus and petbpus
      ↻ 重复节点，计数: 4

   节点 42: x is juqspus
      ↻ 重复节点，计数: 2

   节点 43: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: x is babcpus and vibwpus (深度2)
[子树点亮]     └─ 点亮依赖节点: xizrpus is babcpus and vibwpus (深度3)
[子树点亮]     └─ 点亮依赖节点: yuxbpus is babcpus and vibwpus (深度4)
[子树点亮]     └─ 点亮依赖节点: yuxbpus is babcpus and vibwpus and petbpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
      ✅ 验证成功 + LoG匹配

   节点 44: x is babcpus
      ↻ 重复节点，计数: 2

   节点 45: juqspus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: juqspus is babcpus and vibwpus and petbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: juqspus is babcpus and vibwpus and petbpus

   节点 46: x is juqspus
      ↻ 重复节点，计数: 3

   节点 47: x is babcpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 47
   - 新增节点: 15
   - 更新已存在节点: 32
   - 点亮的LoG节点: 15

🎯 推理质量统计:
   - 完美推理: 15 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 15节点, 9前提, 复杂度1-9

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 24
   - 前提节点: 9
   - 推理节点: 15
   - 幻觉节点: 0
   - 点亮LoG节点: 15

✅ 推理节点详情:
   🟢 x is peshpus (出现2次, 质量:perfect)
   🟢 relmpus is peshpus (出现1次, 质量:perfect)
   🟢 x is tiltpus (出现1次, 质量:perfect)
   🟢 relmpus is tiltpus (出现1次, 质量:perfect)
   🟢 peshpus is kirypus (出现1次, 质量:perfect)
   🟢 peshpus is poxgpus (出现1次, 质量:perfect)
   🟢 x is kirypus (出现1次, 质量:perfect)
   🟢 x is poxgpus (出现1次, 质量:perfect)
   🟢 x is xizrpus and robspus (出现1次, 质量:perfect)
   🟢 x is vegwpus and jiqjpus (出现1次, 质量:perfect)
   🟢 x is ganfpus (出现1次, 质量:perfect)
   🟢 x is yuxbpus (出现1次, 质量:perfect)
   🟢 x is juqspus (出现3次, 质量:perfect)
   🟢 x is babcpus (出现3次, 质量:perfect)
   🟢 juqspus is babcpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - yuxbpus is babcpus and vibwpus and petbpus
   - x is babcpus
   - xizrpus is yuxbpus
   - kirypus is xizrpus
   - x is babcpus and vibwpus
   - xizrpus is babcpus and vibwpus
   - vegwpus is yuxbpus
   - peshpus is xizrpus
   - x is relmpus
   - relmpus is peshpus
   - x is peshpus
   - yuxbpus is babcpus and vibwpus
   - xizrpus is vegwpus
   - peshpus is kirypus
   - x is xizrpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus (第5层)
   节点Coverage: 15/15 = 100.00%
   前提条件Coverage: 9/9 = 100.00%
   各推理层点亮比例:
     第1层: 7/7 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/15 = 0.00%
   可推导节点: 15/15
   Strict Error Rate: 0/15 = 0.00%
   严格有效节点: 15/15

   详细分析:
     完美推理: 15 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 2/50
================================================================================
记录索引: 1
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_1.json
✅ 使用缓存结果:
   - 句子数: 351
   - 提取的语句数: 373
   - 初始条件数: 17

=== Statement提取完成 ===
总句子数: 351
成功提取: 351
失败提取: 0
总statements数: 373

=== 开始清洗Statement格式 ===
原始statements数: 373
清洗后statements数: 343
过滤掉的statements数: 30
清洗后的statements:
  1. [planning] x is babcpus
  2. [planning] x is babcpus
  3. [actual] puwppus is babcpus
  4. [actual] xifwpus is jupkpus
  5. [actual] noshpus is neccpus and nuprpus
  6. [planning] noshpus is neccpus and nuprpus
  7. [planning] neccpus is categories for noshpus
  8. [planning] nuprpus is categories for noshpus
  9. [actual] noshpus is neccpus and nuprpus
  10. [actual] lincpus is mumhpus
  11. [actual] pecypus is xifwpus and nabbpus
  12. [actual] pecypus is xifwpus and nabbpus
  13. [actual] toxkpus is lincpus and vaskpus
  14. [actual] waxqpus is jivbpus and vevlpus
  15. [actual] jivbpus is toxkpus
  16. [actual] mumhpus is sesxpus and puqypus
  17. [actual] givwpus is razbpus
  18. [actual] x is waxqpus and texwpus
  19. [actual] x is waxqpus and texwpus
  20. [actual] qobmpus is noshpus and yixmpus
  21. [actual] xikdpus is puwppus
  22. [actual] sesxpus is qobmpus
  23. [actual] neccpus is givwpus and humypus and dalbpus
  24. [planning] neccpus is givwpus
  25. [planning] neccpus is humypus
  26. [planning] neccpus is dalbpus
  27. [planning] neccpus is a category that contains givwpus
  28. [actual] neccpus is givwpus and humypus and dalbpus
  29. [actual] neccpus is givwpus
  30. [actual] givwpus is a larger category containing neccpus
  31. [planning] neccpus is givwpus
  32. [planning] neccpus is givwpus
  33. [actual] neccpus is humypus and dalbpus
  34. [actual] neccpus is givwpus and humypus and dalbpus
  35. [actual] noshpus is neccpus and nuprpus
  36. [planning] x is babcpus
  37. [planning] x is babcpus
  38. [actual] x is waxqpus and texwpus
  39. [actual] x is waxqpus and texwpus
  40. [actual] babcpus is mentioned in statement 1: puwppus is babcpus
  41. [actual] puwppus is babcpus
  42. [actual] xikdpus is puwppus
  43. [actual] xikdpus is puwppus
  44. [actual] puwppus is babcpus
  45. [actual] xikdpus is babcpus
  46. [actual] x is waxqpus
  47. [actual] waxqpus is jivbpus and vevlpus
  48. [actual] waxqpus is jivbpus and vevlpus
  49. [actual] jivbpus is toxkpus
  50. [actual] jivbpus is toxkpus
  51. [actual] toxkpus is lincpus and vaskpus
  52. [actual] toxkpus is lincpus and vaskpus
  53. [actual] lincpus is mumhpus
  54. [actual] lincpus is mumhpus
  55. [actual] mumhpus is sesxpus and puqypus
  56. [actual] mumhpus is sesxpus and puqypus
  57. [actual] sesxpus is qobmpus
  58. [actual] sesxpus is qobmpus
  59. [actual] qobmpus is noshpus and yixmpus
  60. [actual] qobmpus is noshpus and yixmpus
  61. [actual] noshpus is neccpus and nuprpus
  62. [actual] noshpus is neccpus and nuprpus
  63. [actual] neccpus is givwpus and humypus and dalbpus
  64. [actual] neccpus is givwpus and humypus and dalbpus
  65. [actual] givwpus is razbpus
  66. [actual] givwpus is razbpus
  67. [actual] pecypus is xifwpus and nabbpus
  68. [actual] givwpus is razbpus
  69. [actual] neccpus is givwpus
  70. [actual] neccpus is razbpus
  71. [actual] xifwpus is jupkpus
  72. [actual] pecypus is xifwpus
  73. [actual] pecypus is xifwpus
  74. [actual] xifwpus is jupkpus
  75. [planning] pecypus is jupkpus
  76. [actual] pecypus is xifwpus
  77. [actual] pecypus is xifwpus
  78. [actual] xifwpus is jupkpus
  79. [actual] xifwpus is jupkpus
  80. [actual] pecypus is jupkpus
  81. [actual] givwpus is razbpus
  82. [actual] neccpus is givwpus
  83. [actual] neccpus is razbpus
  84. [actual] pecypus is xifwpus and nabbpus
  85. [actual] givwpus is razbpus
  86. [planning] razbpus is something else
  87. [actual] neccpus is givwpus
  88. [actual] neccpus is razbpus
  89. [actual] noshpus is neccpus
  90. [actual] noshpus is neccpus
  91. [actual] noshpus is razbpus
  92. [actual] qobmpus is noshpus
  93. [actual] qobmpus is razbpus
  94. [actual] sesxpus is qobmpus
  95. [actual] sesxpus is qobmpus
  96. [actual] sesxpus is razbpus
  97. [actual] mumhpus is sesxpus
  98. [actual] mumhpus is razbpus
  99. [actual] lincpus is mumhpus
  100. [actual] lincpus is mumhpus
  101. [actual] lincpus is razbpus
  102. [actual] toxkpus is lincpus
  103. [actual] toxkpus is lincpus
  104. [actual] toxkpus is razbpus
  105. [actual] jivbpus is toxkpus
  106. [actual] jivbpus is toxkpus
  107. [actual] jivbpus is razbpus
  108. [actual] waxqpus is jivbpus
  109. [actual] waxqpus is razbpus
  110. [actual] x is waxqpus
  111. [actual] x is razbpus
  112. [actual] x is razbpus
  113. [planning] x is babcpus
  114. [actual] razbpus is givwpus
  115. [planning] razbpus is babcpus
  116. [actual] pecypus is xifwpus and nabbpus
  117. [planning] razbpus is pecypus
  118. [actual] givwpus is razbpus
  119. [actual] neccpus is givwpus
  120. [actual] neccpus is razbpus
  121. [actual] noshpus is neccpus
  122. [actual] noshpus is neccpus
  123. [actual] noshpus is razbpus
  124. [actual] pecypus is xifwpus and nabbpus
  125. [planning] razbpus is pecypus
  126. [actual] neccpus is givwpus and humypus and dalbpus
  127. [actual] neccpus is a category
  128. [actual] xifwpus is jupkpus
  129. [actual] xikdpus is puwppus
  130. [actual] puwppus is babcpus
  131. [planning] jupkpus is xikdpus
  132. [actual] xifwpus is jupkpus
  133. [actual] xikdpus is puwppus
  134. [actual] pecypus is xifwpus
  135. [actual] pecypus is xifwpus
  136. [actual] xifwpus is jupkpus
  137. [planning] pecypus is jupkpus
  138. [actual] xifwpus is jupkpus
  139. [planning] jupkpus is a category
  140. [actual] xikdpus is puwppus
  141. [actual] puwppus is babcpus
  142. [actual] xikdpus is babcpus
  143. [planning] jupkpus is xikdpus
  144. [actual] xifwpus is jupkpus
  145. [actual] pecypus is xifwpus
  146. [actual] pecypus is jupkpus
  147. [actual] givwpus is razbpus
  148. [actual] neccpus is givwpus
  149. [actual] neccpus is razbpus
  150. [actual] noshpus is neccpus
  151. [actual] noshpus is neccpus
  152. [actual] noshpus is razbpus
  153. [actual] x is razbpus
  154. [planning] razbpus is babcpus
  155. [actual] givwpus is razbpus
  156. [actual] neccpus is givwpus
  157. [actual] neccpus is razbpus
  158. [actual] noshpus is neccpus
  159. [actual] noshpus is neccpus
  160. [actual] noshpus is razbpus
  161. [actual] pecypus is xifwpus and nabbpus
  162. [planning] neccpus is pecypus
  163. [actual] xifwpus is jupkpus
  164. [actual] pecypus is xifwpus
  165. [actual] pecypus is jupkpus
  166. [actual] xikdpus is puwppus
  167. [actual] puwppus is babcpus
  168. [actual] xikdpus is babcpus
  169. [planning] jupkpus is xikdpus
  170. [actual] xifwpus is jupkpus
  171. [actual] x is waxqpus
  172. [actual] waxqpus is jivbpus
  173. [actual] jivbpus is toxkpus
  174. [actual] toxkpus is lincpus
  175. [actual] lincpus is mumhpus
  176. [actual] mumhpus is sesxpus
  177. [actual] sesxpus is qobmpus
  178. [actual] qobmpus is noshpus
  179. [actual] noshpus is neccpus
  180. [actual] neccpus is givwpus
  181. [actual] givwpus is razbpus
  182. [actual] x is razbpus
  183. [actual] givwpus is razbpus
  184. [actual] pecypus is xifwpus and nabbpus
  185. [actual] xifwpus is jupkpus
  186. [actual] xikdpus is puwppus
  187. [actual] puwppus is babcpus
  188. [actual] babcpus is puwppus
  189. [actual] puwppus is xikdpus
  190. [planning] razbpus is babcpus
  191. [actual] neccpus is humypus and dalbpus
  192. [actual] mumhpus is sesxpus and puqypus
  193. [actual] sesxpus is qobmpus
  194. [actual] qobmpus is noshpus and yixmpus
  195. [actual] noshpus is neccpus and nuprpus
  196. [actual] neccpus is givwpus and humypus and dalbpus
  197. [actual] givwpus is razbpus
  198. [actual] pecypus is xifwpus and nabbpus
  199. [actual] xifwpus is jupkpus
  200. [actual] xikdpus is puwppus
  201. [actual] puwppus is babcpus
  202. [planning] jupkpus is xikdpus
  203. [actual] xifwpus is jupkpus
  204. [planning] xifwpus is xikdpus
  205. [planning] pecypus is xifwpus
  206. [actual] pecypus is xifwpus
  207. [actual] xifwpus is jupkpus
  208. [planning] jupkpus is something else
  209. [actual] x is waxqpus and texwpus
  210. [actual] x is waxqpus
  211. [actual] toxkpus is lincpus and vaskpus
  212. [planning] vaskpus is another path
  213. [planning] razbpus is babcpus
  214. [actual] givwpus is razbpus
  215. [actual] razbpus is a category that contains givwpus
  216. [actual] neccpus is givwpus
  217. [actual] neccpus is givwpus
  218. [actual] neccpus is razbpus
  219. [actual] noshpus is neccpus
  220. [actual] noshpus is neccpus
  221. [actual] noshpus is razbpus
  222. [actual] pecypus is xifwpus and nabbpus
  223. [actual] xifwpus is jupkpus
  224. [planning] jupkpus is razbpus
  225. [actual] lincpus is mumhpus
  226. [actual] mumhpus is sesxpus and puqypus
  227. [planning] puqypus is used
  228. [planning] mumhpus is sesxpus
  229. [actual] noshpus is nuprpus
  230. [actual] neccpus is humypus and dalbpus
  231. [planning] x is babcpus
  232. [planning] razbpus is babcpus
  233. [actual] givwpus is razbpus
  234. [actual] neccpus is givwpus
  235. [actual] noshpus is neccpus
  236. [actual] qobmpus is noshpus
  237. [actual] sesxpus is qobmpus
  238. [actual] mumhpus is sesxpus
  239. [actual] lincpus is mumhpus
  240. [actual] toxkpus is lincpus
  241. [actual] jivbpus is toxkpus
  242. [actual] waxqpus is jivbpus
  243. [actual] x is waxqpus
  244. [actual] x is razbpus
  245. [actual] puwppus is babcpus
  246. [actual] xikdpus is puwppus
  247. [actual] xikdpus is babcpus
  248. [planning] x is xikdpus
  249. [actual] xifwpus is jupkpus
  250. [actual] pecypus is xifwpus
  251. [planning] jupkpus is xikdpus
  252. [actual] xifwpus is jupkpus
  253. [actual] xikdpus is puwppus
  254. [actual] puwppus is babcpus
  255. [actual] xifwpus is jupkpus
  256. [actual] pecypus is xifwpus
  257. [actual] pecypus is jupkpus
  258. [planning] jupkpus is xikdpus
  259. [actual] lincpus is mumhpus
  260. [actual] mumhpus is sesxpus and puqypus
  261. [actual] sesxpus is qobmpus
  262. [actual] qobmpus is noshpus and yixmpus
  263. [actual] noshpus is neccpus and nuprpus
  264. [actual] neccpus is givwpus and humypus and dalbpus
  265. [actual] givwpus is razbpus
  266. [actual] pecypus is xifwpus and nabbpus
  267. [actual] toxkpus is lincpus and vaskpus
  268. [actual] waxqpus is jivbpus and vevlpus
  269. [actual] jivbpus is toxkpus
  270. [actual] x is waxqpus and texwpus
  271. [actual] xikdpus is puwppus
  272. [actual] puwppus is babcpus
  273. [actual] xifwpus is jupkpus
  274. [planning] jupkpus is xikdpus
  275. [planning] jupkpus is xikdpus
  276. [actual] puwppus is babcpus
  277. [actual] xifwpus is jupkpus
  278. [actual] noshpus is neccpus and nuprpus
  279. [actual] lincpus is mumhpus
  280. [actual] pecypus is xifwpus and nabbpus
  281. [actual] toxkpus is lincpus and vaskpus
  282. [actual] waxqpus is jivbpus and vevlpus
  283. [actual] jivbpus is toxkpus
  284. [actual] mumhpus is sesxpus and puqypus
  285. [actual] givwpus is razbpus
  286. [actual] x is waxqpus and texwpus
  287. [actual] qobmpus is noshpus and yixmpus
  288. [actual] xikdpus is puwppus
  289. [actual] sesxpus is qobmpus
  290. [actual] neccpus is givwpus and humypus and dalbpus
  291. [actual] jupkpus is xikdpus
  292. [actual] razbpus is pecypus
  293. [actual] neccpus is givwpus and humypus and dalbpus
  294. [actual] razbpus is pecypus
  295. [actual] jupkpus is xikdpus
  296. [actual] razbpus is pecypus
  297. [planning] jupkpus is xikdpus
  298. [actual] xifwpus is jupkpus
  299. [actual] jupkpus is xikdpus
  300. [planning] xifwpus is jupkpus
  301. [planning] jupkpus is xikdpus
  302. [actual] jupkpus is xikdpus
  303. [actual] razbpus is pecypus
  304. [actual] x is razbpus
  305. [planning] razbpus is pecypus
  306. [planning] x is pecypus
  307. [actual] jupkpus is xikdpus
  308. [actual] xikdpus is puwppus
  309. [actual] puwppus is babcpus
  310. [actual] puwppus is babcpus
  311. [actual] jupkpus is xikdpus
  312. [actual] xikdpus is puwppus
  313. [actual] puwppus is babcpus
  314. [actual] jupkpus is babcpus
  315. [actual] xifwpus is jupkpus
  316. [actual] xifwpus is babcpus
  317. [actual] pecypus is xifwpus
  318. [actual] pecypus is xifwpus
  319. [actual] pecypus is babcpus
  320. [actual] razbpus is pecypus
  321. [actual] razbpus is babcpus
  322. [actual] x is razbpus
  323. [actual] x is babcpus
  324. [actual] x is babcpus
  325. [actual] x is waxqpus
  326. [actual] waxqpus is jivbpus
  327. [actual] jivbpus is toxkpus
  328. [actual] toxkpus is lincpus
  329. [actual] lincpus is mumhpus
  330. [actual] mumhpus is sesxpus
  331. [actual] sesxpus is qobmpus
  332. [actual] qobmpus is noshpus
  333. [actual] noshpus is neccpus
  334. [actual] neccpus is givwpus
  335. [actual] givwpus is razbpus
  336. [actual] x is razbpus
  337. [actual] razbpus is pecypus
  338. [actual] pecypus is xifwpus
  339. [actual] xifwpus is jupkpus
  340. [actual] jupkpus is xikdpus
  341. [actual] xikdpus is puwppus
  342. [actual] puwppus is babcpus
  343. [actual] x is babcpus

=== 开始标准化和解析节点 ===
清洗后statements数: 343
标准化后节点数: 331
过滤掉的无效实体数: 12
标准化后的节点:
  1. [planning] x → babcpus (原始: x is babcpus)
  2. [planning] x → babcpus (原始: x is babcpus)
  3. [actual] puwppus → babcpus (原始: puwppus is babcpus)
  4. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  5. [actual] noshpus → neccpus and nuprpus (原始: noshpus is neccpus and nuprpus)
  6. [planning] noshpus → neccpus and nuprpus (原始: noshpus is neccpus and nuprpus)
  7. [actual] noshpus → neccpus and nuprpus (原始: noshpus is neccpus and nuprpus)
  8. [actual] lincpus → mumhpus (原始: lincpus is mumhpus)
  9. [actual] pecypus → xifwpus and nabbpus (原始: pecypus is xifwpus and nabbpus)
  10. [actual] pecypus → xifwpus and nabbpus (原始: pecypus is xifwpus and nabbpus)
  11. [actual] toxkpus → lincpus and vaskpus (原始: toxkpus is lincpus and vaskpus)
  12. [actual] waxqpus → jivbpus and vevlpus (原始: waxqpus is jivbpus and vevlpus)
  13. [actual] jivbpus → toxkpus (原始: jivbpus is toxkpus)
  14. [actual] mumhpus → sesxpus and puqypus (原始: mumhpus is sesxpus and puqypus)
  15. [actual] givwpus → razbpus (原始: givwpus is razbpus)
  16. [actual] x → waxqpus and texwpus (原始: x is waxqpus and texwpus)
  17. [actual] x → waxqpus and texwpus (原始: x is waxqpus and texwpus)
  18. [actual] qobmpus → noshpus and yixmpus (原始: qobmpus is noshpus and yixmpus)
  19. [actual] xikdpus → puwppus (原始: xikdpus is puwppus)
  20. [actual] sesxpus → qobmpus (原始: sesxpus is qobmpus)
  21. [actual] neccpus → givwpus and humypus and dalbpus (原始: neccpus is givwpus and humypus and dalbpus)
  22. [planning] neccpus → givwpus (原始: neccpus is givwpus)
  23. [planning] neccpus → humypus (原始: neccpus is humypus)
  24. [planning] neccpus → dalbpus (原始: neccpus is dalbpus)
  25. [actual] neccpus → givwpus and humypus and dalbpus (原始: neccpus is givwpus and humypus and dalbpus)
  26. [actual] neccpus → givwpus (原始: neccpus is givwpus)
  27. [planning] neccpus → givwpus (原始: neccpus is givwpus)
  28. [planning] neccpus → givwpus (原始: neccpus is givwpus)
  29. [actual] neccpus → humypus and dalbpus (原始: neccpus is humypus and dalbpus)
  30. [actual] neccpus → givwpus and humypus and dalbpus (原始: neccpus is givwpus and humypus and dalbpus)
  31. [actual] noshpus → neccpus and nuprpus (原始: noshpus is neccpus and nuprpus)
  32. [planning] x → babcpus (原始: x is babcpus)
  33. [planning] x → babcpus (原始: x is babcpus)
  34. [actual] x → waxqpus and texwpus (原始: x is waxqpus and texwpus)
  35. [actual] x → waxqpus and texwpus (原始: x is waxqpus and texwpus)
  36. [actual] puwppus → babcpus (原始: puwppus is babcpus)
  37. [actual] xikdpus → puwppus (原始: xikdpus is puwppus)
  38. [actual] xikdpus → puwppus (原始: xikdpus is puwppus)
  39. [actual] puwppus → babcpus (原始: puwppus is babcpus)
  40. [actual] xikdpus → babcpus (原始: xikdpus is babcpus)
  41. [actual] x → waxqpus (原始: x is waxqpus)
  42. [actual] waxqpus → jivbpus and vevlpus (原始: waxqpus is jivbpus and vevlpus)
  43. [actual] waxqpus → jivbpus and vevlpus (原始: waxqpus is jivbpus and vevlpus)
  44. [actual] jivbpus → toxkpus (原始: jivbpus is toxkpus)
  45. [actual] jivbpus → toxkpus (原始: jivbpus is toxkpus)
  46. [actual] toxkpus → lincpus and vaskpus (原始: toxkpus is lincpus and vaskpus)
  47. [actual] toxkpus → lincpus and vaskpus (原始: toxkpus is lincpus and vaskpus)
  48. [actual] lincpus → mumhpus (原始: lincpus is mumhpus)
  49. [actual] lincpus → mumhpus (原始: lincpus is mumhpus)
  50. [actual] mumhpus → sesxpus and puqypus (原始: mumhpus is sesxpus and puqypus)
  51. [actual] mumhpus → sesxpus and puqypus (原始: mumhpus is sesxpus and puqypus)
  52. [actual] sesxpus → qobmpus (原始: sesxpus is qobmpus)
  53. [actual] sesxpus → qobmpus (原始: sesxpus is qobmpus)
  54. [actual] qobmpus → noshpus and yixmpus (原始: qobmpus is noshpus and yixmpus)
  55. [actual] qobmpus → noshpus and yixmpus (原始: qobmpus is noshpus and yixmpus)
  56. [actual] noshpus → neccpus and nuprpus (原始: noshpus is neccpus and nuprpus)
  57. [actual] noshpus → neccpus and nuprpus (原始: noshpus is neccpus and nuprpus)
  58. [actual] neccpus → givwpus and humypus and dalbpus (原始: neccpus is givwpus and humypus and dalbpus)
  59. [actual] neccpus → givwpus and humypus and dalbpus (原始: neccpus is givwpus and humypus and dalbpus)
  60. [actual] givwpus → razbpus (原始: givwpus is razbpus)
  61. [actual] givwpus → razbpus (原始: givwpus is razbpus)
  62. [actual] pecypus → xifwpus and nabbpus (原始: pecypus is xifwpus and nabbpus)
  63. [actual] givwpus → razbpus (原始: givwpus is razbpus)
  64. [actual] neccpus → givwpus (原始: neccpus is givwpus)
  65. [actual] neccpus → razbpus (原始: neccpus is razbpus)
  66. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  67. [actual] pecypus → xifwpus (原始: pecypus is xifwpus)
  68. [actual] pecypus → xifwpus (原始: pecypus is xifwpus)
  69. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  70. [planning] pecypus → jupkpus (原始: pecypus is jupkpus)
  71. [actual] pecypus → xifwpus (原始: pecypus is xifwpus)
  72. [actual] pecypus → xifwpus (原始: pecypus is xifwpus)
  73. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  74. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  75. [actual] pecypus → jupkpus (原始: pecypus is jupkpus)
  76. [actual] givwpus → razbpus (原始: givwpus is razbpus)
  77. [actual] neccpus → givwpus (原始: neccpus is givwpus)
  78. [actual] neccpus → razbpus (原始: neccpus is razbpus)
  79. [actual] pecypus → xifwpus and nabbpus (原始: pecypus is xifwpus and nabbpus)
  80. [actual] givwpus → razbpus (原始: givwpus is razbpus)
  81. [actual] neccpus → givwpus (原始: neccpus is givwpus)
  82. [actual] neccpus → razbpus (原始: neccpus is razbpus)
  83. [actual] noshpus → neccpus (原始: noshpus is neccpus)
  84. [actual] noshpus → neccpus (原始: noshpus is neccpus)
  85. [actual] noshpus → razbpus (原始: noshpus is razbpus)
  86. [actual] qobmpus → noshpus (原始: qobmpus is noshpus)
  87. [actual] qobmpus → razbpus (原始: qobmpus is razbpus)
  88. [actual] sesxpus → qobmpus (原始: sesxpus is qobmpus)
  89. [actual] sesxpus → qobmpus (原始: sesxpus is qobmpus)
  90. [actual] sesxpus → razbpus (原始: sesxpus is razbpus)
  91. [actual] mumhpus → sesxpus (原始: mumhpus is sesxpus)
  92. [actual] mumhpus → razbpus (原始: mumhpus is razbpus)
  93. [actual] lincpus → mumhpus (原始: lincpus is mumhpus)
  94. [actual] lincpus → mumhpus (原始: lincpus is mumhpus)
  95. [actual] lincpus → razbpus (原始: lincpus is razbpus)
  96. [actual] toxkpus → lincpus (原始: toxkpus is lincpus)
  97. [actual] toxkpus → lincpus (原始: toxkpus is lincpus)
  98. [actual] toxkpus → razbpus (原始: toxkpus is razbpus)
  99. [actual] jivbpus → toxkpus (原始: jivbpus is toxkpus)
  100. [actual] jivbpus → toxkpus (原始: jivbpus is toxkpus)
  101. [actual] jivbpus → razbpus (原始: jivbpus is razbpus)
  102. [actual] waxqpus → jivbpus (原始: waxqpus is jivbpus)
  103. [actual] waxqpus → razbpus (原始: waxqpus is razbpus)
  104. [actual] x → waxqpus (原始: x is waxqpus)
  105. [actual] x → razbpus (原始: x is razbpus)
  106. [actual] x → razbpus (原始: x is razbpus)
  107. [planning] x → babcpus (原始: x is babcpus)
  108. [actual] razbpus → givwpus (原始: razbpus is givwpus)
  109. [planning] razbpus → babcpus (原始: razbpus is babcpus)
  110. [actual] pecypus → xifwpus and nabbpus (原始: pecypus is xifwpus and nabbpus)
  111. [planning] razbpus → pecypus (原始: razbpus is pecypus)
  112. [actual] givwpus → razbpus (原始: givwpus is razbpus)
  113. [actual] neccpus → givwpus (原始: neccpus is givwpus)
  114. [actual] neccpus → razbpus (原始: neccpus is razbpus)
  115. [actual] noshpus → neccpus (原始: noshpus is neccpus)
  116. [actual] noshpus → neccpus (原始: noshpus is neccpus)
  117. [actual] noshpus → razbpus (原始: noshpus is razbpus)
  118. [actual] pecypus → xifwpus and nabbpus (原始: pecypus is xifwpus and nabbpus)
  119. [planning] razbpus → pecypus (原始: razbpus is pecypus)
  120. [actual] neccpus → givwpus and humypus and dalbpus (原始: neccpus is givwpus and humypus and dalbpus)
  121. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  122. [actual] xikdpus → puwppus (原始: xikdpus is puwppus)
  123. [actual] puwppus → babcpus (原始: puwppus is babcpus)
  124. [planning] jupkpus → xikdpus (原始: jupkpus is xikdpus)
  125. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  126. [actual] xikdpus → puwppus (原始: xikdpus is puwppus)
  127. [actual] pecypus → xifwpus (原始: pecypus is xifwpus)
  128. [actual] pecypus → xifwpus (原始: pecypus is xifwpus)
  129. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  130. [planning] pecypus → jupkpus (原始: pecypus is jupkpus)
  131. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  132. [actual] xikdpus → puwppus (原始: xikdpus is puwppus)
  133. [actual] puwppus → babcpus (原始: puwppus is babcpus)
  134. [actual] xikdpus → babcpus (原始: xikdpus is babcpus)
  135. [planning] jupkpus → xikdpus (原始: jupkpus is xikdpus)
  136. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  137. [actual] pecypus → xifwpus (原始: pecypus is xifwpus)
  138. [actual] pecypus → jupkpus (原始: pecypus is jupkpus)
  139. [actual] givwpus → razbpus (原始: givwpus is razbpus)
  140. [actual] neccpus → givwpus (原始: neccpus is givwpus)
  141. [actual] neccpus → razbpus (原始: neccpus is razbpus)
  142. [actual] noshpus → neccpus (原始: noshpus is neccpus)
  143. [actual] noshpus → neccpus (原始: noshpus is neccpus)
  144. [actual] noshpus → razbpus (原始: noshpus is razbpus)
  145. [actual] x → razbpus (原始: x is razbpus)
  146. [planning] razbpus → babcpus (原始: razbpus is babcpus)
  147. [actual] givwpus → razbpus (原始: givwpus is razbpus)
  148. [actual] neccpus → givwpus (原始: neccpus is givwpus)
  149. [actual] neccpus → razbpus (原始: neccpus is razbpus)
  150. [actual] noshpus → neccpus (原始: noshpus is neccpus)
  151. [actual] noshpus → neccpus (原始: noshpus is neccpus)
  152. [actual] noshpus → razbpus (原始: noshpus is razbpus)
  153. [actual] pecypus → xifwpus and nabbpus (原始: pecypus is xifwpus and nabbpus)
  154. [planning] neccpus → pecypus (原始: neccpus is pecypus)
  155. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  156. [actual] pecypus → xifwpus (原始: pecypus is xifwpus)
  157. [actual] pecypus → jupkpus (原始: pecypus is jupkpus)
  158. [actual] xikdpus → puwppus (原始: xikdpus is puwppus)
  159. [actual] puwppus → babcpus (原始: puwppus is babcpus)
  160. [actual] xikdpus → babcpus (原始: xikdpus is babcpus)
  161. [planning] jupkpus → xikdpus (原始: jupkpus is xikdpus)
  162. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  163. [actual] x → waxqpus (原始: x is waxqpus)
  164. [actual] waxqpus → jivbpus (原始: waxqpus is jivbpus)
  165. [actual] jivbpus → toxkpus (原始: jivbpus is toxkpus)
  166. [actual] toxkpus → lincpus (原始: toxkpus is lincpus)
  167. [actual] lincpus → mumhpus (原始: lincpus is mumhpus)
  168. [actual] mumhpus → sesxpus (原始: mumhpus is sesxpus)
  169. [actual] sesxpus → qobmpus (原始: sesxpus is qobmpus)
  170. [actual] qobmpus → noshpus (原始: qobmpus is noshpus)
  171. [actual] noshpus → neccpus (原始: noshpus is neccpus)
  172. [actual] neccpus → givwpus (原始: neccpus is givwpus)
  173. [actual] givwpus → razbpus (原始: givwpus is razbpus)
  174. [actual] x → razbpus (原始: x is razbpus)
  175. [actual] givwpus → razbpus (原始: givwpus is razbpus)
  176. [actual] pecypus → xifwpus and nabbpus (原始: pecypus is xifwpus and nabbpus)
  177. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  178. [actual] xikdpus → puwppus (原始: xikdpus is puwppus)
  179. [actual] puwppus → babcpus (原始: puwppus is babcpus)
  180. [actual] babcpus → puwppus (原始: babcpus is puwppus)
  181. [actual] puwppus → xikdpus (原始: puwppus is xikdpus)
  182. [planning] razbpus → babcpus (原始: razbpus is babcpus)
  183. [actual] neccpus → humypus and dalbpus (原始: neccpus is humypus and dalbpus)
  184. [actual] mumhpus → sesxpus and puqypus (原始: mumhpus is sesxpus and puqypus)
  185. [actual] sesxpus → qobmpus (原始: sesxpus is qobmpus)
  186. [actual] qobmpus → noshpus and yixmpus (原始: qobmpus is noshpus and yixmpus)
  187. [actual] noshpus → neccpus and nuprpus (原始: noshpus is neccpus and nuprpus)
  188. [actual] neccpus → givwpus and humypus and dalbpus (原始: neccpus is givwpus and humypus and dalbpus)
  189. [actual] givwpus → razbpus (原始: givwpus is razbpus)
  190. [actual] pecypus → xifwpus and nabbpus (原始: pecypus is xifwpus and nabbpus)
  191. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  192. [actual] xikdpus → puwppus (原始: xikdpus is puwppus)
  193. [actual] puwppus → babcpus (原始: puwppus is babcpus)
  194. [planning] jupkpus → xikdpus (原始: jupkpus is xikdpus)
  195. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  196. [planning] xifwpus → xikdpus (原始: xifwpus is xikdpus)
  197. [planning] pecypus → xifwpus (原始: pecypus is xifwpus)
  198. [actual] pecypus → xifwpus (原始: pecypus is xifwpus)
  199. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  200. [actual] x → waxqpus and texwpus (原始: x is waxqpus and texwpus)
  201. [actual] x → waxqpus (原始: x is waxqpus)
  202. [actual] toxkpus → lincpus and vaskpus (原始: toxkpus is lincpus and vaskpus)
  203. [planning] razbpus → babcpus (原始: razbpus is babcpus)
  204. [actual] givwpus → razbpus (原始: givwpus is razbpus)
  205. [actual] neccpus → givwpus (原始: neccpus is givwpus)
  206. [actual] neccpus → givwpus (原始: neccpus is givwpus)
  207. [actual] neccpus → razbpus (原始: neccpus is razbpus)
  208. [actual] noshpus → neccpus (原始: noshpus is neccpus)
  209. [actual] noshpus → neccpus (原始: noshpus is neccpus)
  210. [actual] noshpus → razbpus (原始: noshpus is razbpus)
  211. [actual] pecypus → xifwpus and nabbpus (原始: pecypus is xifwpus and nabbpus)
  212. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  213. [planning] jupkpus → razbpus (原始: jupkpus is razbpus)
  214. [actual] lincpus → mumhpus (原始: lincpus is mumhpus)
  215. [actual] mumhpus → sesxpus and puqypus (原始: mumhpus is sesxpus and puqypus)
  216. [planning] mumhpus → sesxpus (原始: mumhpus is sesxpus)
  217. [actual] noshpus → nuprpus (原始: noshpus is nuprpus)
  218. [actual] neccpus → humypus and dalbpus (原始: neccpus is humypus and dalbpus)
  219. [planning] x → babcpus (原始: x is babcpus)
  220. [planning] razbpus → babcpus (原始: razbpus is babcpus)
  221. [actual] givwpus → razbpus (原始: givwpus is razbpus)
  222. [actual] neccpus → givwpus (原始: neccpus is givwpus)
  223. [actual] noshpus → neccpus (原始: noshpus is neccpus)
  224. [actual] qobmpus → noshpus (原始: qobmpus is noshpus)
  225. [actual] sesxpus → qobmpus (原始: sesxpus is qobmpus)
  226. [actual] mumhpus → sesxpus (原始: mumhpus is sesxpus)
  227. [actual] lincpus → mumhpus (原始: lincpus is mumhpus)
  228. [actual] toxkpus → lincpus (原始: toxkpus is lincpus)
  229. [actual] jivbpus → toxkpus (原始: jivbpus is toxkpus)
  230. [actual] waxqpus → jivbpus (原始: waxqpus is jivbpus)
  231. [actual] x → waxqpus (原始: x is waxqpus)
  232. [actual] x → razbpus (原始: x is razbpus)
  233. [actual] puwppus → babcpus (原始: puwppus is babcpus)
  234. [actual] xikdpus → puwppus (原始: xikdpus is puwppus)
  235. [actual] xikdpus → babcpus (原始: xikdpus is babcpus)
  236. [planning] x → xikdpus (原始: x is xikdpus)
  237. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  238. [actual] pecypus → xifwpus (原始: pecypus is xifwpus)
  239. [planning] jupkpus → xikdpus (原始: jupkpus is xikdpus)
  240. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  241. [actual] xikdpus → puwppus (原始: xikdpus is puwppus)
  242. [actual] puwppus → babcpus (原始: puwppus is babcpus)
  243. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  244. [actual] pecypus → xifwpus (原始: pecypus is xifwpus)
  245. [actual] pecypus → jupkpus (原始: pecypus is jupkpus)
  246. [planning] jupkpus → xikdpus (原始: jupkpus is xikdpus)
  247. [actual] lincpus → mumhpus (原始: lincpus is mumhpus)
  248. [actual] mumhpus → sesxpus and puqypus (原始: mumhpus is sesxpus and puqypus)
  249. [actual] sesxpus → qobmpus (原始: sesxpus is qobmpus)
  250. [actual] qobmpus → noshpus and yixmpus (原始: qobmpus is noshpus and yixmpus)
  251. [actual] noshpus → neccpus and nuprpus (原始: noshpus is neccpus and nuprpus)
  252. [actual] neccpus → givwpus and humypus and dalbpus (原始: neccpus is givwpus and humypus and dalbpus)
  253. [actual] givwpus → razbpus (原始: givwpus is razbpus)
  254. [actual] pecypus → xifwpus and nabbpus (原始: pecypus is xifwpus and nabbpus)
  255. [actual] toxkpus → lincpus and vaskpus (原始: toxkpus is lincpus and vaskpus)
  256. [actual] waxqpus → jivbpus and vevlpus (原始: waxqpus is jivbpus and vevlpus)
  257. [actual] jivbpus → toxkpus (原始: jivbpus is toxkpus)
  258. [actual] x → waxqpus and texwpus (原始: x is waxqpus and texwpus)
  259. [actual] xikdpus → puwppus (原始: xikdpus is puwppus)
  260. [actual] puwppus → babcpus (原始: puwppus is babcpus)
  261. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  262. [planning] jupkpus → xikdpus (原始: jupkpus is xikdpus)
  263. [planning] jupkpus → xikdpus (原始: jupkpus is xikdpus)
  264. [actual] puwppus → babcpus (原始: puwppus is babcpus)
  265. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  266. [actual] noshpus → neccpus and nuprpus (原始: noshpus is neccpus and nuprpus)
  267. [actual] lincpus → mumhpus (原始: lincpus is mumhpus)
  268. [actual] pecypus → xifwpus and nabbpus (原始: pecypus is xifwpus and nabbpus)
  269. [actual] toxkpus → lincpus and vaskpus (原始: toxkpus is lincpus and vaskpus)
  270. [actual] waxqpus → jivbpus and vevlpus (原始: waxqpus is jivbpus and vevlpus)
  271. [actual] jivbpus → toxkpus (原始: jivbpus is toxkpus)
  272. [actual] mumhpus → sesxpus and puqypus (原始: mumhpus is sesxpus and puqypus)
  273. [actual] givwpus → razbpus (原始: givwpus is razbpus)
  274. [actual] x → waxqpus and texwpus (原始: x is waxqpus and texwpus)
  275. [actual] qobmpus → noshpus and yixmpus (原始: qobmpus is noshpus and yixmpus)
  276. [actual] xikdpus → puwppus (原始: xikdpus is puwppus)
  277. [actual] sesxpus → qobmpus (原始: sesxpus is qobmpus)
  278. [actual] neccpus → givwpus and humypus and dalbpus (原始: neccpus is givwpus and humypus and dalbpus)
  279. [actual] jupkpus → xikdpus (原始: jupkpus is xikdpus)
  280. [actual] razbpus → pecypus (原始: razbpus is pecypus)
  281. [actual] neccpus → givwpus and humypus and dalbpus (原始: neccpus is givwpus and humypus and dalbpus)
  282. [actual] razbpus → pecypus (原始: razbpus is pecypus)
  283. [actual] jupkpus → xikdpus (原始: jupkpus is xikdpus)
  284. [actual] razbpus → pecypus (原始: razbpus is pecypus)
  285. [planning] jupkpus → xikdpus (原始: jupkpus is xikdpus)
  286. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  287. [actual] jupkpus → xikdpus (原始: jupkpus is xikdpus)
  288. [planning] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  289. [planning] jupkpus → xikdpus (原始: jupkpus is xikdpus)
  290. [actual] jupkpus → xikdpus (原始: jupkpus is xikdpus)
  291. [actual] razbpus → pecypus (原始: razbpus is pecypus)
  292. [actual] x → razbpus (原始: x is razbpus)
  293. [planning] razbpus → pecypus (原始: razbpus is pecypus)
  294. [planning] x → pecypus (原始: x is pecypus)
  295. [actual] jupkpus → xikdpus (原始: jupkpus is xikdpus)
  296. [actual] xikdpus → puwppus (原始: xikdpus is puwppus)
  297. [actual] puwppus → babcpus (原始: puwppus is babcpus)
  298. [actual] puwppus → babcpus (原始: puwppus is babcpus)
  299. [actual] jupkpus → xikdpus (原始: jupkpus is xikdpus)
  300. [actual] xikdpus → puwppus (原始: xikdpus is puwppus)
  301. [actual] puwppus → babcpus (原始: puwppus is babcpus)
  302. [actual] jupkpus → babcpus (原始: jupkpus is babcpus)
  303. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  304. [actual] xifwpus → babcpus (原始: xifwpus is babcpus)
  305. [actual] pecypus → xifwpus (原始: pecypus is xifwpus)
  306. [actual] pecypus → xifwpus (原始: pecypus is xifwpus)
  307. [actual] pecypus → babcpus (原始: pecypus is babcpus)
  308. [actual] razbpus → pecypus (原始: razbpus is pecypus)
  309. [actual] razbpus → babcpus (原始: razbpus is babcpus)
  310. [actual] x → razbpus (原始: x is razbpus)
  311. [actual] x → babcpus (原始: x is babcpus)
  312. [actual] x → babcpus (原始: x is babcpus)
  313. [actual] x → waxqpus (原始: x is waxqpus)
  314. [actual] waxqpus → jivbpus (原始: waxqpus is jivbpus)
  315. [actual] jivbpus → toxkpus (原始: jivbpus is toxkpus)
  316. [actual] toxkpus → lincpus (原始: toxkpus is lincpus)
  317. [actual] lincpus → mumhpus (原始: lincpus is mumhpus)
  318. [actual] mumhpus → sesxpus (原始: mumhpus is sesxpus)
  319. [actual] sesxpus → qobmpus (原始: sesxpus is qobmpus)
  320. [actual] qobmpus → noshpus (原始: qobmpus is noshpus)
  321. [actual] noshpus → neccpus (原始: noshpus is neccpus)
  322. [actual] neccpus → givwpus (原始: neccpus is givwpus)
  323. [actual] givwpus → razbpus (原始: givwpus is razbpus)
  324. [actual] x → razbpus (原始: x is razbpus)
  325. [actual] razbpus → pecypus (原始: razbpus is pecypus)
  326. [actual] pecypus → xifwpus (原始: pecypus is xifwpus)
  327. [actual] xifwpus → jupkpus (原始: xifwpus is jupkpus)
  328. [actual] jupkpus → xikdpus (原始: jupkpus is xikdpus)
  329. [actual] xikdpus → puwppus (原始: xikdpus is puwppus)
  330. [actual] puwppus → babcpus (原始: puwppus is babcpus)
  331. [actual] x → babcpus (原始: x is babcpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 25
[后处理] 加载LoG图，包含 25 个节点
  LoG节点 0: x is babcpus (规则: MP, 深度: 1)
  LoG节点 1: x is noshpus (规则: MP, 深度: 2)
  LoG节点 2: noshpus is babcpus (规则: MP, 深度: 2)
  LoG节点 3: x is lincpus (规则: MP, 深度: 3)
  LoG节点 4: lincpus is noshpus (规则: MP, 深度: 3)
  LoG节点 5: noshpus is givwpus (规则: CE, 深度: 3)
  LoG节点 6: givwpus is babcpus (规则: MP, 深度: 3)
  LoG节点 7: x is jivbpus (规则: MP, 深度: 4)
  LoG节点 8: jivbpus is lincpus (规则: CE, 深度: 4)
  LoG节点 9: lincpus is sesxpus (规则: CE, 深度: 4)
  LoG节点 10: sesxpus is noshpus (规则: CE, 深度: 4)
  LoG节点 11: noshpus is givwpus and humypus (规则: MP, 深度: 4)
  LoG节点 12: givwpus is xifwpus (规则: MP, 深度: 4)
  LoG节点 13: xifwpus is babcpus (规则: MP, 深度: 4)
  LoG节点 14: x is waxqpus (规则: CE, 深度: 5)
  LoG节点 15: waxqpus is jivbpus (规则: CE, 深度: 5)
  LoG节点 16: jivbpus is lincpus and vaskpus (规则: MP, 深度: 5)
  LoG节点 17: lincpus is sesxpus and puqypus (规则: MP, 深度: 5)
  LoG节点 18: sesxpus is noshpus and yixmpus (规则: MP, 深度: 5)
  LoG节点 19: noshpus is neccpus (规则: CE, 深度: 5)
  LoG节点 20: neccpus is givwpus and humypus (规则: CE, 深度: 5)
  LoG节点 21: givwpus is pecypus (规则: MP, 深度: 5)
  LoG节点 22: pecypus is xifwpus (规则: CE, 深度: 5)
  LoG节点 23: xifwpus is xikdpus (规则: MP, 深度: 5)
  LoG节点 24: xikdpus is babcpus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 331
   - 初始条件数: 17
   - LoG图节点数: 25

📋 初始条件列表:
    1. puwppus is babcpus
    2. xifwpus is jupkpus
    3. noshpus is neccpus and nuprpus
    4. lincpus is mumhpus
    5. pecypus is xifwpus and nabbpus
    6. toxkpus is lincpus and vaskpus
    7. waxqpus is jivbpus and vevlpus
    8. jivbpus is toxkpus
    9. mumhpus is sesxpus and puqypus
   10. givwpus is razbpus
   11. x is waxqpus and texwpus
   12. qobmpus is noshpus and yixmpus
   13. xikdpus is puwppus
   14. sesxpus is qobmpus
   15. neccpus is givwpus and humypus and dalbpus
   16. jupkpus is xikdpus
   17. razbpus is pecypus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 17 个前提节点

🔍 开始处理actual节点...

   节点 1: puwppus is babcpus
      ↻ 重复节点，计数: 2

   节点 2: xifwpus is jupkpus
      ↻ 重复节点，计数: 2

   节点 3: noshpus is neccpus and nuprpus
      ↻ 重复节点，计数: 2

   节点 4: noshpus is neccpus and nuprpus
      ↻ 重复节点，计数: 3

   节点 5: lincpus is mumhpus
      ↻ 重复节点，计数: 2

   节点 6: pecypus is xifwpus and nabbpus
      ↻ 重复节点，计数: 2

   节点 7: pecypus is xifwpus and nabbpus
      ↻ 重复节点，计数: 3

   节点 8: toxkpus is lincpus and vaskpus
      ↻ 重复节点，计数: 2

   节点 9: waxqpus is jivbpus and vevlpus
      ↻ 重复节点，计数: 2

   节点 10: jivbpus is toxkpus
      ↻ 重复节点，计数: 2

   节点 11: mumhpus is sesxpus and puqypus
      ↻ 重复节点，计数: 2

   节点 12: givwpus is razbpus
      ↻ 重复节点，计数: 2

   节点 13: x is waxqpus and texwpus
      ↻ 重复节点，计数: 2

   节点 14: x is waxqpus and texwpus
      ↻ 重复节点，计数: 3

   节点 15: qobmpus is noshpus and yixmpus
      ↻ 重复节点，计数: 2

   节点 16: xikdpus is puwppus
      ↻ 重复节点，计数: 2

   节点 17: sesxpus is qobmpus
      ↻ 重复节点，计数: 2

   节点 18: neccpus is givwpus and humypus and dalbpus
      ↻ 重复节点，计数: 2

   节点 19: neccpus is givwpus and humypus and dalbpus
      ↻ 重复节点，计数: 3

   节点 20: neccpus is givwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: neccpus is givwpus and humypus and dalbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: neccpus is givwpus and humypus and dalbpus
  ✓ 点亮LoG节点: neccpus is givwpus and humypus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 21: neccpus is humypus and dalbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: neccpus is humypus → neccpus is dalbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: neccpus is givwpus and humypus and dalbpus

   节点 22: neccpus is givwpus and humypus and dalbpus
      ↻ 重复节点，计数: 4

   节点 23: noshpus is neccpus and nuprpus
      ↻ 重复节点，计数: 4

   节点 24: x is waxqpus and texwpus
      ↻ 重复节点，计数: 4

   节点 25: x is waxqpus and texwpus
      ↻ 重复节点，计数: 5

   节点 26: puwppus is babcpus
      ↻ 重复节点，计数: 3

   节点 27: xikdpus is puwppus
      ↻ 重复节点，计数: 3

   节点 28: xikdpus is puwppus
      ↻ 重复节点，计数: 4

   节点 29: puwppus is babcpus
      ↻ 重复节点，计数: 4

   节点 30: xikdpus is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: xikdpus is babcpus
      ✅ 验证成功 + LoG匹配

   节点 31: x is waxqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is waxqpus
      ✅ 验证成功 + LoG匹配

   节点 32: waxqpus is jivbpus and vevlpus
      ↻ 重复节点，计数: 3

   节点 33: waxqpus is jivbpus and vevlpus
      ↻ 重复节点，计数: 4

   节点 34: jivbpus is toxkpus
      ↻ 重复节点，计数: 3

   节点 35: jivbpus is toxkpus
      ↻ 重复节点，计数: 4

   节点 36: toxkpus is lincpus and vaskpus
      ↻ 重复节点，计数: 3

   节点 37: toxkpus is lincpus and vaskpus
      ↻ 重复节点，计数: 4

   节点 38: lincpus is mumhpus
      ↻ 重复节点，计数: 3

   节点 39: lincpus is mumhpus
      ↻ 重复节点，计数: 4

   节点 40: mumhpus is sesxpus and puqypus
      ↻ 重复节点，计数: 3

   节点 41: mumhpus is sesxpus and puqypus
      ↻ 重复节点，计数: 4

   节点 42: sesxpus is qobmpus
      ↻ 重复节点，计数: 3

   节点 43: sesxpus is qobmpus
      ↻ 重复节点，计数: 4

   节点 44: qobmpus is noshpus and yixmpus
      ↻ 重复节点，计数: 3

   节点 45: qobmpus is noshpus and yixmpus
      ↻ 重复节点，计数: 4

   节点 46: noshpus is neccpus and nuprpus
      ↻ 重复节点，计数: 5

   节点 47: noshpus is neccpus and nuprpus
      ↻ 重复节点，计数: 6

   节点 48: neccpus is givwpus and humypus and dalbpus
      ↻ 重复节点，计数: 5

   节点 49: neccpus is givwpus and humypus and dalbpus
      ↻ 重复节点，计数: 6

   节点 50: givwpus is razbpus
      ↻ 重复节点，计数: 3

   节点 51: givwpus is razbpus
      ↻ 重复节点，计数: 4

   节点 52: pecypus is xifwpus and nabbpus
      ↻ 重复节点，计数: 4

   节点 53: givwpus is razbpus
      ↻ 重复节点，计数: 5

   节点 54: neccpus is givwpus
      ↻ 重复节点，计数: 2

   节点 55: neccpus is razbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: neccpus is givwpus → givwpus is razbpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: neccpus is givwpus
  - 前提: givwpus is razbpus

   节点 56: xifwpus is jupkpus
      ↻ 重复节点，计数: 3

   节点 57: pecypus is xifwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: pecypus is xifwpus
      ✅ 验证成功 + LoG匹配

   节点 58: pecypus is xifwpus
      ↻ 重复节点，计数: 2

   节点 59: xifwpus is jupkpus
      ↻ 重复节点，计数: 4

   节点 60: pecypus is xifwpus
      ↻ 重复节点，计数: 3

   节点 61: pecypus is xifwpus
      ↻ 重复节点，计数: 4

   节点 62: xifwpus is jupkpus
      ↻ 重复节点，计数: 5

   节点 63: xifwpus is jupkpus
      ↻ 重复节点，计数: 6

   节点 64: pecypus is jupkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: pecypus is xifwpus → xifwpus is jupkpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: pecypus is xifwpus
  - 前提: xifwpus is jupkpus

   节点 65: givwpus is razbpus
      ↻ 重复节点，计数: 6

   节点 66: neccpus is givwpus
      ↻ 重复节点，计数: 3

   节点 67: neccpus is razbpus
      ↻ 重复节点，计数: 2

   节点 68: pecypus is xifwpus and nabbpus
      ↻ 重复节点，计数: 5

   节点 69: givwpus is razbpus
      ↻ 重复节点，计数: 7

   节点 70: neccpus is givwpus
      ↻ 重复节点，计数: 4

   节点 71: neccpus is razbpus
      ↻ 重复节点，计数: 3

   节点 72: noshpus is neccpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: noshpus is neccpus
      ✅ 验证成功 + LoG匹配

   节点 73: noshpus is neccpus
      ↻ 重复节点，计数: 2

   节点 74: noshpus is razbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: noshpus is neccpus → neccpus is razbpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: noshpus is neccpus
  - 前提: neccpus is razbpus

   节点 75: qobmpus is noshpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qobmpus is noshpus and yixmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qobmpus is noshpus and yixmpus

   节点 76: qobmpus is razbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: qobmpus is noshpus → noshpus is razbpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: qobmpus is noshpus
  - 前提: noshpus is razbpus

   节点 77: sesxpus is qobmpus
      ↻ 重复节点，计数: 5

   节点 78: sesxpus is qobmpus
      ↻ 重复节点，计数: 6

   节点 79: sesxpus is razbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: sesxpus is qobmpus → qobmpus is razbpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: sesxpus is qobmpus
  - 前提: qobmpus is razbpus

   节点 80: mumhpus is sesxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: mumhpus is sesxpus and puqypus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: mumhpus is sesxpus and puqypus

   节点 81: mumhpus is razbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: mumhpus is sesxpus → sesxpus is razbpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: mumhpus is sesxpus
  - 前提: sesxpus is razbpus

   节点 82: lincpus is mumhpus
      ↻ 重复节点，计数: 5

   节点 83: lincpus is mumhpus
      ↻ 重复节点，计数: 6

   节点 84: lincpus is razbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: lincpus is mumhpus → mumhpus is razbpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: lincpus is mumhpus
  - 前提: mumhpus is razbpus

   节点 85: toxkpus is lincpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: toxkpus is lincpus and vaskpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: toxkpus is lincpus and vaskpus

   节点 86: toxkpus is lincpus
      ↻ 重复节点，计数: 2

   节点 87: toxkpus is razbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: toxkpus is lincpus → lincpus is razbpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: toxkpus is lincpus
  - 前提: lincpus is razbpus

   节点 88: jivbpus is toxkpus
      ↻ 重复节点，计数: 5

   节点 89: jivbpus is toxkpus
      ↻ 重复节点，计数: 6

   节点 90: jivbpus is razbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: jivbpus is toxkpus → toxkpus is razbpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: jivbpus is toxkpus
  - 前提: toxkpus is razbpus

   节点 91: waxqpus is jivbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: waxqpus is jivbpus
      ✅ 验证成功 + LoG匹配

   节点 92: waxqpus is razbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: waxqpus is jivbpus → jivbpus is razbpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: waxqpus is jivbpus
  - 前提: jivbpus is razbpus

   节点 93: x is waxqpus
      ↻ 重复节点，计数: 2

   节点 94: x is razbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is waxqpus → waxqpus is razbpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is waxqpus
  - 前提: waxqpus is razbpus

   节点 95: x is razbpus
      ↻ 重复节点，计数: 2

   节点 96: razbpus is givwpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 97: pecypus is xifwpus and nabbpus
      ↻ 重复节点，计数: 6

   节点 98: givwpus is razbpus
      ↻ 重复节点，计数: 8

   节点 99: neccpus is givwpus
      ↻ 重复节点，计数: 5

   节点 100: neccpus is razbpus
      ↻ 重复节点，计数: 4

   节点 101: noshpus is neccpus
      ↻ 重复节点，计数: 3

   节点 102: noshpus is neccpus
      ↻ 重复节点，计数: 4

   节点 103: noshpus is razbpus
      ↻ 重复节点，计数: 2

   节点 104: pecypus is xifwpus and nabbpus
      ↻ 重复节点，计数: 7

   节点 105: neccpus is givwpus and humypus and dalbpus
      ↻ 重复节点，计数: 7

   节点 106: xifwpus is jupkpus
      ↻ 重复节点，计数: 7

   节点 107: xikdpus is puwppus
      ↻ 重复节点，计数: 5

   节点 108: puwppus is babcpus
      ↻ 重复节点，计数: 5

   节点 109: xifwpus is jupkpus
      ↻ 重复节点，计数: 8

   节点 110: xikdpus is puwppus
      ↻ 重复节点，计数: 6

   节点 111: pecypus is xifwpus
      ↻ 重复节点，计数: 5

   节点 112: pecypus is xifwpus
      ↻ 重复节点，计数: 6

   节点 113: xifwpus is jupkpus
      ↻ 重复节点，计数: 9

   节点 114: xifwpus is jupkpus
      ↻ 重复节点，计数: 10

   节点 115: xikdpus is puwppus
      ↻ 重复节点，计数: 7

   节点 116: puwppus is babcpus
      ↻ 重复节点，计数: 6

   节点 117: xikdpus is babcpus
      ↻ 重复节点，计数: 2

   节点 118: xifwpus is jupkpus
      ↻ 重复节点，计数: 11

   节点 119: pecypus is xifwpus
      ↻ 重复节点，计数: 7

   节点 120: pecypus is jupkpus
      ↻ 重复节点，计数: 2

   节点 121: givwpus is razbpus
      ↻ 重复节点，计数: 9

   节点 122: neccpus is givwpus
      ↻ 重复节点，计数: 6

   节点 123: neccpus is razbpus
      ↻ 重复节点，计数: 5

   节点 124: noshpus is neccpus
      ↻ 重复节点，计数: 5

   节点 125: noshpus is neccpus
      ↻ 重复节点，计数: 6

   节点 126: noshpus is razbpus
      ↻ 重复节点，计数: 3

   节点 127: x is razbpus
      ↻ 重复节点，计数: 3

   节点 128: givwpus is razbpus
      ↻ 重复节点，计数: 10

   节点 129: neccpus is givwpus
      ↻ 重复节点，计数: 7

   节点 130: neccpus is razbpus
      ↻ 重复节点，计数: 6

   节点 131: noshpus is neccpus
      ↻ 重复节点，计数: 7

   节点 132: noshpus is neccpus
      ↻ 重复节点，计数: 8

   节点 133: noshpus is razbpus
      ↻ 重复节点，计数: 4

   节点 134: pecypus is xifwpus and nabbpus
      ↻ 重复节点，计数: 8

   节点 135: xifwpus is jupkpus
      ↻ 重复节点，计数: 12

   节点 136: pecypus is xifwpus
      ↻ 重复节点，计数: 8

   节点 137: pecypus is jupkpus
      ↻ 重复节点，计数: 3

   节点 138: xikdpus is puwppus
      ↻ 重复节点，计数: 8

   节点 139: puwppus is babcpus
      ↻ 重复节点，计数: 7

   节点 140: xikdpus is babcpus
      ↻ 重复节点，计数: 3

   节点 141: xifwpus is jupkpus
      ↻ 重复节点，计数: 13

   节点 142: x is waxqpus
      ↻ 重复节点，计数: 3

   节点 143: waxqpus is jivbpus
      ↻ 重复节点，计数: 2

   节点 144: jivbpus is toxkpus
      ↻ 重复节点，计数: 7

   节点 145: toxkpus is lincpus
      ↻ 重复节点，计数: 3

   节点 146: lincpus is mumhpus
      ↻ 重复节点，计数: 7

   节点 147: mumhpus is sesxpus
      ↻ 重复节点，计数: 2

   节点 148: sesxpus is qobmpus
      ↻ 重复节点，计数: 7

   节点 149: qobmpus is noshpus
      ↻ 重复节点，计数: 2

   节点 150: noshpus is neccpus
      ↻ 重复节点，计数: 9

   节点 151: neccpus is givwpus
      ↻ 重复节点，计数: 8

   节点 152: givwpus is razbpus
      ↻ 重复节点，计数: 11

   节点 153: x is razbpus
      ↻ 重复节点，计数: 4

   节点 154: givwpus is razbpus
      ↻ 重复节点，计数: 12

   节点 155: pecypus is xifwpus and nabbpus
      ↻ 重复节点，计数: 9

   节点 156: xifwpus is jupkpus
      ↻ 重复节点，计数: 14

   节点 157: xikdpus is puwppus
      ↻ 重复节点，计数: 9

   节点 158: puwppus is babcpus
      ↻ 重复节点，计数: 8

   节点 159: babcpus is puwppus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 160: puwppus is xikdpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 161: neccpus is humypus and dalbpus
      ↻ 重复节点，计数: 2

   节点 162: mumhpus is sesxpus and puqypus
      ↻ 重复节点，计数: 5

   节点 163: sesxpus is qobmpus
      ↻ 重复节点，计数: 8

   节点 164: qobmpus is noshpus and yixmpus
      ↻ 重复节点，计数: 5

   节点 165: noshpus is neccpus and nuprpus
      ↻ 重复节点，计数: 7

   节点 166: neccpus is givwpus and humypus and dalbpus
      ↻ 重复节点，计数: 8

   节点 167: givwpus is razbpus
      ↻ 重复节点，计数: 13

   节点 168: pecypus is xifwpus and nabbpus
      ↻ 重复节点，计数: 10

   节点 169: xifwpus is jupkpus
      ↻ 重复节点，计数: 15

   节点 170: xikdpus is puwppus
      ↻ 重复节点，计数: 10

   节点 171: puwppus is babcpus
      ↻ 重复节点，计数: 9

   节点 172: xifwpus is jupkpus
      ↻ 重复节点，计数: 16

   节点 173: pecypus is xifwpus
      ↻ 重复节点，计数: 9

   节点 174: xifwpus is jupkpus
      ↻ 重复节点，计数: 17

   节点 175: x is waxqpus and texwpus
      ↻ 重复节点，计数: 6

   节点 176: x is waxqpus
      ↻ 重复节点，计数: 4

   节点 177: toxkpus is lincpus and vaskpus
      ↻ 重复节点，计数: 5

   节点 178: givwpus is razbpus
      ↻ 重复节点，计数: 14

   节点 179: neccpus is givwpus
      ↻ 重复节点，计数: 9

   节点 180: neccpus is givwpus
      ↻ 重复节点，计数: 10

   节点 181: neccpus is razbpus
      ↻ 重复节点，计数: 7

   节点 182: noshpus is neccpus
      ↻ 重复节点，计数: 10

   节点 183: noshpus is neccpus
      ↻ 重复节点，计数: 11

   节点 184: noshpus is razbpus
      ↻ 重复节点，计数: 5

   节点 185: pecypus is xifwpus and nabbpus
      ↻ 重复节点，计数: 11

   节点 186: xifwpus is jupkpus
      ↻ 重复节点，计数: 18

   节点 187: lincpus is mumhpus
      ↻ 重复节点，计数: 8

   节点 188: mumhpus is sesxpus and puqypus
      ↻ 重复节点，计数: 6

   节点 189: noshpus is nuprpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: noshpus is neccpus and nuprpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: noshpus is neccpus and nuprpus

   节点 190: neccpus is humypus and dalbpus
      ↻ 重复节点，计数: 3

   节点 191: givwpus is razbpus
      ↻ 重复节点，计数: 15

   节点 192: neccpus is givwpus
      ↻ 重复节点，计数: 11

   节点 193: noshpus is neccpus
      ↻ 重复节点，计数: 12

   节点 194: qobmpus is noshpus
      ↻ 重复节点，计数: 3

   节点 195: sesxpus is qobmpus
      ↻ 重复节点，计数: 9

   节点 196: mumhpus is sesxpus
      ↻ 重复节点，计数: 3

   节点 197: lincpus is mumhpus
      ↻ 重复节点，计数: 9

   节点 198: toxkpus is lincpus
      ↻ 重复节点，计数: 4

   节点 199: jivbpus is toxkpus
      ↻ 重复节点，计数: 8

   节点 200: waxqpus is jivbpus
      ↻ 重复节点，计数: 3

   节点 201: x is waxqpus
      ↻ 重复节点，计数: 5

   节点 202: x is razbpus
      ↻ 重复节点，计数: 5

   节点 203: puwppus is babcpus
      ↻ 重复节点，计数: 10

   节点 204: xikdpus is puwppus
      ↻ 重复节点，计数: 11

   节点 205: xikdpus is babcpus
      ↻ 重复节点，计数: 4

   节点 206: xifwpus is jupkpus
      ↻ 重复节点，计数: 19

   节点 207: pecypus is xifwpus
      ↻ 重复节点，计数: 10

   节点 208: xifwpus is jupkpus
      ↻ 重复节点，计数: 20

   节点 209: xikdpus is puwppus
      ↻ 重复节点，计数: 12

   节点 210: puwppus is babcpus
      ↻ 重复节点，计数: 11

   节点 211: xifwpus is jupkpus
      ↻ 重复节点，计数: 21

   节点 212: pecypus is xifwpus
      ↻ 重复节点，计数: 11

   节点 213: pecypus is jupkpus
      ↻ 重复节点，计数: 4

   节点 214: lincpus is mumhpus
      ↻ 重复节点，计数: 10

   节点 215: mumhpus is sesxpus and puqypus
      ↻ 重复节点，计数: 7

   节点 216: sesxpus is qobmpus
      ↻ 重复节点，计数: 10

   节点 217: qobmpus is noshpus and yixmpus
      ↻ 重复节点，计数: 6

   节点 218: noshpus is neccpus and nuprpus
      ↻ 重复节点，计数: 8

   节点 219: neccpus is givwpus and humypus and dalbpus
      ↻ 重复节点，计数: 9

   节点 220: givwpus is razbpus
      ↻ 重复节点，计数: 16

   节点 221: pecypus is xifwpus and nabbpus
      ↻ 重复节点，计数: 12

   节点 222: toxkpus is lincpus and vaskpus
      ↻ 重复节点，计数: 6

   节点 223: waxqpus is jivbpus and vevlpus
      ↻ 重复节点，计数: 5

   节点 224: jivbpus is toxkpus
      ↻ 重复节点，计数: 9

   节点 225: x is waxqpus and texwpus
      ↻ 重复节点，计数: 7

   节点 226: xikdpus is puwppus
      ↻ 重复节点，计数: 13

   节点 227: puwppus is babcpus
      ↻ 重复节点，计数: 12

   节点 228: xifwpus is jupkpus
      ↻ 重复节点，计数: 22

   节点 229: puwppus is babcpus
      ↻ 重复节点，计数: 13

   节点 230: xifwpus is jupkpus
      ↻ 重复节点，计数: 23

   节点 231: noshpus is neccpus and nuprpus
      ↻ 重复节点，计数: 9

   节点 232: lincpus is mumhpus
      ↻ 重复节点，计数: 11

   节点 233: pecypus is xifwpus and nabbpus
      ↻ 重复节点，计数: 13

   节点 234: toxkpus is lincpus and vaskpus
      ↻ 重复节点，计数: 7

   节点 235: waxqpus is jivbpus and vevlpus
      ↻ 重复节点，计数: 6

   节点 236: jivbpus is toxkpus
      ↻ 重复节点，计数: 10

   节点 237: mumhpus is sesxpus and puqypus
      ↻ 重复节点，计数: 8

   节点 238: givwpus is razbpus
      ↻ 重复节点，计数: 17

   节点 239: x is waxqpus and texwpus
      ↻ 重复节点，计数: 8

   节点 240: qobmpus is noshpus and yixmpus
      ↻ 重复节点，计数: 7

   节点 241: xikdpus is puwppus
      ↻ 重复节点，计数: 14

   节点 242: sesxpus is qobmpus
      ↻ 重复节点，计数: 11

   节点 243: neccpus is givwpus and humypus and dalbpus
      ↻ 重复节点，计数: 10

   节点 244: jupkpus is xikdpus
      ↻ 重复节点，计数: 2

   节点 245: razbpus is pecypus
      ↻ 重复节点，计数: 2

   节点 246: neccpus is givwpus and humypus and dalbpus
      ↻ 重复节点，计数: 11

   节点 247: razbpus is pecypus
      ↻ 重复节点，计数: 3

   节点 248: jupkpus is xikdpus
      ↻ 重复节点，计数: 3

   节点 249: razbpus is pecypus
      ↻ 重复节点，计数: 4

   节点 250: xifwpus is jupkpus
      ↻ 重复节点，计数: 24

   节点 251: jupkpus is xikdpus
      ↻ 重复节点，计数: 4

   节点 252: jupkpus is xikdpus
      ↻ 重复节点，计数: 5

   节点 253: razbpus is pecypus
      ↻ 重复节点，计数: 5

   节点 254: x is razbpus
      ↻ 重复节点，计数: 6

   节点 255: jupkpus is xikdpus
      ↻ 重复节点，计数: 6

   节点 256: xikdpus is puwppus
      ↻ 重复节点，计数: 15

   节点 257: puwppus is babcpus
      ↻ 重复节点，计数: 14

   节点 258: puwppus is babcpus
      ↻ 重复节点，计数: 15

   节点 259: jupkpus is xikdpus
      ↻ 重复节点，计数: 7

   节点 260: xikdpus is puwppus
      ↻ 重复节点，计数: 16

   节点 261: puwppus is babcpus
      ↻ 重复节点，计数: 16

   节点 262: jupkpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: jupkpus is xikdpus → xikdpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: jupkpus is xikdpus
  - 前提: xikdpus is babcpus

   节点 263: xifwpus is jupkpus
      ↻ 重复节点，计数: 25

   节点 264: xifwpus is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: xifwpus is babcpus
[子树点亮]     └─ 点亮依赖节点: xifwpus is xikdpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 265: pecypus is xifwpus
      ↻ 重复节点，计数: 12

   节点 266: pecypus is xifwpus
      ↻ 重复节点，计数: 13

   节点 267: pecypus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: pecypus is xifwpus → xifwpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: pecypus is xifwpus
  - 前提: xifwpus is babcpus

   节点 268: razbpus is pecypus
      ↻ 重复节点，计数: 6

   节点 269: razbpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: razbpus is pecypus → pecypus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: razbpus is pecypus
  - 前提: pecypus is babcpus

   节点 270: x is razbpus
      ↻ 重复节点，计数: 7

   节点 271: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: x is noshpus (深度2)
[子树点亮]     └─ 点亮依赖节点: noshpus is babcpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is lincpus (深度3)
[子树点亮]     └─ 点亮依赖节点: lincpus is noshpus (深度3)
[子树点亮]     └─ 点亮依赖节点: noshpus is givwpus (深度3)
[子树点亮]     └─ 点亮依赖节点: givwpus is babcpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is jivbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: jivbpus is lincpus (深度4)
[子树点亮]     └─ 点亮依赖节点: lincpus is sesxpus (深度4)
[子树点亮]     └─ 点亮依赖节点: sesxpus is noshpus (深度4)
[子树点亮]     └─ 点亮依赖节点: noshpus is givwpus and humypus (深度4)
[子树点亮]     └─ 点亮依赖节点: givwpus is xifwpus (深度4)
[子树点亮]     └─ 点亮依赖节点: jivbpus is lincpus and vaskpus (深度5)
[子树点亮]     └─ 点亮依赖节点: lincpus is sesxpus and puqypus (深度5)
[子树点亮]     └─ 点亮依赖节点: sesxpus is noshpus and yixmpus (深度5)
[子树点亮]     └─ 点亮依赖节点: givwpus is pecypus (深度5)
[后处理]   └─ 自动点亮依赖子树: 16 个节点
      ✅ 验证成功 + LoG匹配

   节点 272: x is babcpus
      ↻ 重复节点，计数: 2

   节点 273: x is waxqpus
      ↻ 重复节点，计数: 6

   节点 274: waxqpus is jivbpus
      ↻ 重复节点，计数: 4

   节点 275: jivbpus is toxkpus
      ↻ 重复节点，计数: 11

   节点 276: toxkpus is lincpus
      ↻ 重复节点，计数: 5

   节点 277: lincpus is mumhpus
      ↻ 重复节点，计数: 12

   节点 278: mumhpus is sesxpus
      ↻ 重复节点，计数: 4

   节点 279: sesxpus is qobmpus
      ↻ 重复节点，计数: 12

   节点 280: qobmpus is noshpus
      ↻ 重复节点，计数: 4

   节点 281: noshpus is neccpus
      ↻ 重复节点，计数: 13

   节点 282: neccpus is givwpus
      ↻ 重复节点，计数: 12

   节点 283: givwpus is razbpus
      ↻ 重复节点，计数: 18

   节点 284: x is razbpus
      ↻ 重复节点，计数: 8

   节点 285: razbpus is pecypus
      ↻ 重复节点，计数: 7

   节点 286: pecypus is xifwpus
      ↻ 重复节点，计数: 14

   节点 287: xifwpus is jupkpus
      ↻ 重复节点，计数: 26

   节点 288: jupkpus is xikdpus
      ↻ 重复节点，计数: 8

   节点 289: xikdpus is puwppus
      ↻ 重复节点，计数: 17

   节点 290: puwppus is babcpus
      ↻ 重复节点，计数: 17

   节点 291: x is babcpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 291
   - 新增节点: 30
   - 更新已存在节点: 261
   - 点亮的LoG节点: 25

🎯 推理质量统计:
   - 完美推理: 28 (节点正确 + 路径正确)
   - 部分推理: 2 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 25节点, 17前提, 复杂度1-17

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 47
   - 前提节点: 17
   - 推理节点: 27
   - 幻觉节点: 3
   - 点亮LoG节点: 25

❌ 幻觉节点详情:
   - razbpus is givwpus (出现1次)
   - babcpus is puwppus (出现1次)
   - puwppus is xikdpus (出现1次)

✅ 推理节点详情:
   🟡 neccpus is givwpus (出现12次, 质量:partial)
      ⚠️  无效依赖: ['razbpus is givwpus']
   🟢 neccpus is humypus and dalbpus (出现3次, 质量:perfect)
   🟢 xikdpus is babcpus (出现4次, 质量:perfect)
   🟢 x is waxqpus (出现6次, 质量:perfect)
   🟢 neccpus is razbpus (出现7次, 质量:perfect)
   🟢 pecypus is xifwpus (出现14次, 质量:perfect)
   🟢 pecypus is jupkpus (出现4次, 质量:perfect)
   🟢 noshpus is neccpus (出现13次, 质量:perfect)
   🟢 noshpus is razbpus (出现5次, 质量:perfect)
   🟢 qobmpus is noshpus (出现4次, 质量:perfect)
   🟢 qobmpus is razbpus (出现1次, 质量:perfect)
   🟢 sesxpus is razbpus (出现1次, 质量:perfect)
   🟢 mumhpus is sesxpus (出现4次, 质量:perfect)
   🟢 mumhpus is razbpus (出现1次, 质量:perfect)
   🟢 lincpus is razbpus (出现1次, 质量:perfect)
   🟢 toxkpus is lincpus (出现5次, 质量:perfect)
   🟢 toxkpus is razbpus (出现1次, 质量:perfect)
   🟢 jivbpus is razbpus (出现1次, 质量:perfect)
   🟢 waxqpus is jivbpus (出现4次, 质量:perfect)
   🟢 waxqpus is razbpus (出现1次, 质量:perfect)
   🟢 x is razbpus (出现8次, 质量:perfect)
   🟢 noshpus is nuprpus (出现1次, 质量:perfect)
   🟢 jupkpus is babcpus (出现1次, 质量:perfect)
   🟢 xifwpus is babcpus (出现1次, 质量:perfect)
   🟢 pecypus is babcpus (出现1次, 质量:perfect)
   🟡 razbpus is babcpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['razbpus is givwpus']
   🟢 x is babcpus (出现3次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is noshpus
   - jivbpus is lincpus
   - noshpus is givwpus and humypus
   - givwpus is xifwpus
   - neccpus is givwpus and humypus
   - noshpus is neccpus
   - sesxpus is noshpus
   - x is lincpus
   - xifwpus is babcpus
   - lincpus is sesxpus
   - lincpus is sesxpus and puqypus
   - lincpus is noshpus
   - noshpus is babcpus
   - givwpus is babcpus
   - givwpus is pecypus
   - waxqpus is jivbpus
   - xifwpus is xikdpus
   - x is babcpus
   - noshpus is givwpus
   - x is jivbpus
   - sesxpus is noshpus and yixmpus
   - xikdpus is babcpus
   - pecypus is xifwpus
   - x is waxqpus
   - jivbpus is lincpus and vaskpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus (第5层)
   节点Coverage: 25/25 = 100.00%
   前提条件Coverage: 17/17 = 100.00%
   各推理层点亮比例:
     第1层: 11/11 = 100.00%
     第2层: 7/7 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 3/30 = 10.00%
   可推导节点: 27/30
   Strict Error Rate: 5/30 = 16.67%
   严格有效节点: 25/30

   详细分析:
     完美推理: 28 (93.33%)
     部分推理: 2 (6.67%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 3/50
================================================================================
记录索引: 2
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_2.json
✅ 使用缓存结果:
   - 句子数: 83
   - 提取的语句数: 94
   - 初始条件数: 14

=== Statement提取完成 ===
总句子数: 83
成功提取: 83
失败提取: 0
总statements数: 94

=== 开始清洗Statement格式 ===
原始statements数: 94
清洗后statements数: 93
过滤掉的statements数: 1
清洗后的statements:
  1. [planning] x is babcpus
  2. [planning] x is babrpus
  3. [planning] x is babspus
  4. [planning] x is A
  5. [actual] x is fuhbpus
  6. [actual] x is fuhbpus
  7. [actual] fuhbpus is negcpus and sesnpus
  8. [actual] fuhbpus is negcpus and sesnpus
  9. [actual] negcpus is rurspus
  10. [actual] negcpus is rurspus
  11. [actual] rurspus is wuvwpus and nixdpus
  12. [actual] rurspus is wuvwpus and nixdpus
  13. [actual] wuvwpus is boscpus
  14. [actual] wuvwpus is boscpus
  15. [actual] boscpus is zuxqpus
  16. [actual] boscpus is zuxqpus
  17. [actual] zuxqpus is dinypus
  18. [actual] zuxqpus is dinypus
  19. [actual] dinypus is zavwpus
  20. [actual] dinypus is zavwpus
  21. [actual] zavwpus is lahvpus
  22. [actual] zavwpus is lahvpus
  23. [actual] lahvpus is luhvpus and qermpus
  24. [actual] lahvpus is luhvpus and qermpus
  25. [actual] luhvpus is yofrpus
  26. [actual] luhvpus is yofrpus
  27. [actual] yofrpus is jarvpus and vuqrpus
  28. [actual] yofrpus is jarvpus and vuqrpus
  29. [actual] jarvpus is vughpus
  30. [actual] jarvpus is vughpus
  31. [actual] vughpus is babrpus
  32. [actual] vughpus is babrpus
  33. [actual] yofrpus is jarvpus
  34. [actual] jarvpus is vughpus
  35. [actual] vughpus is babrpus
  36. [actual] yofrpus is babrpus
  37. [planning] x is babrpus
  38. [actual] x is fuhbpus
  39. [actual] fuhbpus is negcpus
  40. [actual] negcpus is rurspus
  41. [actual] rurspus is wuvwpus
  42. [actual] wuvwpus is boscpus
  43. [actual] boscpus is zuxqpus
  44. [actual] zuxqpus is dinypus
  45. [actual] dinypus is zavwpus
  46. [actual] zavwpus is lahvpus
  47. [actual] lahvpus is luhvpus
  48. [actual] luhvpus is yofrpus
  49. [actual] yofrpus is jarvpus
  50. [actual] jarvpus is vughpus
  51. [actual] vughpus is babrpus
  52. [actual] x is babrpus
  53. [actual] x is fuhbpus
  54. [actual] fuhbpus is negcpus
  55. [actual] x is negcpus
  56. [actual] negcpus is rurspus
  57. [planning] x is rurspus
  58. [actual] rurspus is wuvwpus
  59. [planning] x is wuvwpus
  60. [actual] wuvwpus is boscpus
  61. [actual] x is boscpus
  62. [actual] boscpus is zuxqpus
  63. [planning] x is zuxqpus
  64. [actual] zuxqpus is dinypus
  65. [planning] x is dinypus
  66. [actual] dinypus is zavwpus
  67. [planning] x is zavwpus
  68. [actual] zavwpus is lahvpus
  69. [planning] x is lahvpus
  70. [actual] lahvpus is luhvpus
  71. [actual] x is luhvpus
  72. [planning] x is luhvpus
  73. [actual] luhvpus is yofrpus
  74. [planning] x is yofrpus
  75. [actual] yofrpus is jarvpus
  76. [planning] x is jarvpus
  77. [actual] jarvpus is vughpus
  78. [planning] x is vughpus
  79. [actual] vughpus is babrpus
  80. [actual] x is babrpus
  81. [actual] x is babrpus
  82. [planning] x is babcpus
  83. [planning] x is babrpus
  84. [planning] x is babspus
  85. [actual] x is babrpus
  86. [actual] vughpus is babrpus
  87. [actual] x is babrpus
  88. [actual] x is babcpus or babrpus or babspus
  89. [planning] x is babcpus or babrpus or babspus
  90. [actual] x is babrpus
  91. [actual] fuhbpus is sesnpus
  92. [actual] rurspus is nixdpus
  93. [actual] x is babrpus

=== 开始标准化和解析节点 ===
清洗后statements数: 93
标准化后节点数: 92
过滤掉的无效实体数: 1
标准化后的节点:
  1. [planning] x → babcpus (原始: x is babcpus)
  2. [planning] x → babrpus (原始: x is babrpus)
  3. [planning] x → babspus (原始: x is babspus)
  4. [actual] x → fuhbpus (原始: x is fuhbpus)
  5. [actual] x → fuhbpus (原始: x is fuhbpus)
  6. [actual] fuhbpus → negcpus and sesnpus (原始: fuhbpus is negcpus and sesnpus)
  7. [actual] fuhbpus → negcpus and sesnpus (原始: fuhbpus is negcpus and sesnpus)
  8. [actual] negcpus → rurspus (原始: negcpus is rurspus)
  9. [actual] negcpus → rurspus (原始: negcpus is rurspus)
  10. [actual] rurspus → wuvwpus and nixdpus (原始: rurspus is wuvwpus and nixdpus)
  11. [actual] rurspus → wuvwpus and nixdpus (原始: rurspus is wuvwpus and nixdpus)
  12. [actual] wuvwpus → boscpus (原始: wuvwpus is boscpus)
  13. [actual] wuvwpus → boscpus (原始: wuvwpus is boscpus)
  14. [actual] boscpus → zuxqpus (原始: boscpus is zuxqpus)
  15. [actual] boscpus → zuxqpus (原始: boscpus is zuxqpus)
  16. [actual] zuxqpus → dinypus (原始: zuxqpus is dinypus)
  17. [actual] zuxqpus → dinypus (原始: zuxqpus is dinypus)
  18. [actual] dinypus → zavwpus (原始: dinypus is zavwpus)
  19. [actual] dinypus → zavwpus (原始: dinypus is zavwpus)
  20. [actual] zavwpus → lahvpus (原始: zavwpus is lahvpus)
  21. [actual] zavwpus → lahvpus (原始: zavwpus is lahvpus)
  22. [actual] lahvpus → luhvpus and qermpus (原始: lahvpus is luhvpus and qermpus)
  23. [actual] lahvpus → luhvpus and qermpus (原始: lahvpus is luhvpus and qermpus)
  24. [actual] luhvpus → yofrpus (原始: luhvpus is yofrpus)
  25. [actual] luhvpus → yofrpus (原始: luhvpus is yofrpus)
  26. [actual] yofrpus → jarvpus and vuqrpus (原始: yofrpus is jarvpus and vuqrpus)
  27. [actual] yofrpus → jarvpus and vuqrpus (原始: yofrpus is jarvpus and vuqrpus)
  28. [actual] jarvpus → vughpus (原始: jarvpus is vughpus)
  29. [actual] jarvpus → vughpus (原始: jarvpus is vughpus)
  30. [actual] vughpus → babrpus (原始: vughpus is babrpus)
  31. [actual] vughpus → babrpus (原始: vughpus is babrpus)
  32. [actual] yofrpus → jarvpus (原始: yofrpus is jarvpus)
  33. [actual] jarvpus → vughpus (原始: jarvpus is vughpus)
  34. [actual] vughpus → babrpus (原始: vughpus is babrpus)
  35. [actual] yofrpus → babrpus (原始: yofrpus is babrpus)
  36. [planning] x → babrpus (原始: x is babrpus)
  37. [actual] x → fuhbpus (原始: x is fuhbpus)
  38. [actual] fuhbpus → negcpus (原始: fuhbpus is negcpus)
  39. [actual] negcpus → rurspus (原始: negcpus is rurspus)
  40. [actual] rurspus → wuvwpus (原始: rurspus is wuvwpus)
  41. [actual] wuvwpus → boscpus (原始: wuvwpus is boscpus)
  42. [actual] boscpus → zuxqpus (原始: boscpus is zuxqpus)
  43. [actual] zuxqpus → dinypus (原始: zuxqpus is dinypus)
  44. [actual] dinypus → zavwpus (原始: dinypus is zavwpus)
  45. [actual] zavwpus → lahvpus (原始: zavwpus is lahvpus)
  46. [actual] lahvpus → luhvpus (原始: lahvpus is luhvpus)
  47. [actual] luhvpus → yofrpus (原始: luhvpus is yofrpus)
  48. [actual] yofrpus → jarvpus (原始: yofrpus is jarvpus)
  49. [actual] jarvpus → vughpus (原始: jarvpus is vughpus)
  50. [actual] vughpus → babrpus (原始: vughpus is babrpus)
  51. [actual] x → babrpus (原始: x is babrpus)
  52. [actual] x → fuhbpus (原始: x is fuhbpus)
  53. [actual] fuhbpus → negcpus (原始: fuhbpus is negcpus)
  54. [actual] x → negcpus (原始: x is negcpus)
  55. [actual] negcpus → rurspus (原始: negcpus is rurspus)
  56. [planning] x → rurspus (原始: x is rurspus)
  57. [actual] rurspus → wuvwpus (原始: rurspus is wuvwpus)
  58. [planning] x → wuvwpus (原始: x is wuvwpus)
  59. [actual] wuvwpus → boscpus (原始: wuvwpus is boscpus)
  60. [actual] x → boscpus (原始: x is boscpus)
  61. [actual] boscpus → zuxqpus (原始: boscpus is zuxqpus)
  62. [planning] x → zuxqpus (原始: x is zuxqpus)
  63. [actual] zuxqpus → dinypus (原始: zuxqpus is dinypus)
  64. [planning] x → dinypus (原始: x is dinypus)
  65. [actual] dinypus → zavwpus (原始: dinypus is zavwpus)
  66. [planning] x → zavwpus (原始: x is zavwpus)
  67. [actual] zavwpus → lahvpus (原始: zavwpus is lahvpus)
  68. [planning] x → lahvpus (原始: x is lahvpus)
  69. [actual] lahvpus → luhvpus (原始: lahvpus is luhvpus)
  70. [actual] x → luhvpus (原始: x is luhvpus)
  71. [planning] x → luhvpus (原始: x is luhvpus)
  72. [actual] luhvpus → yofrpus (原始: luhvpus is yofrpus)
  73. [planning] x → yofrpus (原始: x is yofrpus)
  74. [actual] yofrpus → jarvpus (原始: yofrpus is jarvpus)
  75. [planning] x → jarvpus (原始: x is jarvpus)
  76. [actual] jarvpus → vughpus (原始: jarvpus is vughpus)
  77. [planning] x → vughpus (原始: x is vughpus)
  78. [actual] vughpus → babrpus (原始: vughpus is babrpus)
  79. [actual] x → babrpus (原始: x is babrpus)
  80. [actual] x → babrpus (原始: x is babrpus)
  81. [planning] x → babcpus (原始: x is babcpus)
  82. [planning] x → babrpus (原始: x is babrpus)
  83. [planning] x → babspus (原始: x is babspus)
  84. [actual] x → babrpus (原始: x is babrpus)
  85. [actual] vughpus → babrpus (原始: vughpus is babrpus)
  86. [actual] x → babrpus (原始: x is babrpus)
  87. [actual] x → babcpus or babrpus or babspus (原始: x is babcpus or babrpus or babspus)
  88. [planning] x → babcpus or babrpus or babspus (原始: x is babcpus or babrpus or babspus)
  89. [actual] x → babrpus (原始: x is babrpus)
  90. [actual] fuhbpus → sesnpus (原始: fuhbpus is sesnpus)
  91. [actual] rurspus → nixdpus (原始: rurspus is nixdpus)
  92. [actual] x → babrpus (原始: x is babrpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 19
[后处理] 加载LoG图，包含 19 个节点
  LoG节点 0: x is babcpus or babrpus or babspus (规则: MP, 深度: 1)
  LoG节点 1: x is luhvpus (规则: MP, 深度: 2)
  LoG节点 2: luhvpus is babcpus or babrpus or babspus (规则: DI, 深度: 2)
  LoG节点 3: x is wuvwpus (规则: MP, 深度: 3)
  LoG节点 4: wuvwpus is luhvpus (规则: MP, 深度: 3)
  LoG节点 5: luhvpus is babrpus or babcpus (规则: MP, 深度: 3)
  LoG节点 6: x is negcpus (规则: CE, 深度: 4)
  LoG节点 7: negcpus is wuvwpus (规则: CE, 深度: 4)
  LoG节点 8: wuvwpus is zavwpus (规则: MP, 深度: 4)
  LoG节点 9: zavwpus is luhvpus (规则: CE, 深度: 4)
  LoG节点 10: luhvpus is jarvpus (规则: CE, 深度: 4)
  LoG节点 11: jarvpus is babrpus or babcpus (规则: DI, 深度: 4)
  LoG节点 12: x is negcpus and sesnpus (规则: MP, 深度: 5)
  LoG节点 13: negcpus is wuvwpus and nixdpus (规则: MP, 深度: 5)
  LoG节点 14: wuvwpus is zuxqpus (规则: MP, 深度: 5)
  LoG节点 15: zuxqpus is zavwpus (规则: MP, 深度: 5)
  LoG节点 16: zavwpus is luhvpus and qermpus (规则: MP, 深度: 5)
  LoG节点 17: luhvpus is jarvpus and vuqrpus (规则: MP, 深度: 5)
  LoG节点 18: jarvpus is babrpus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 92
   - 初始条件数: 14
   - LoG图节点数: 19

📋 初始条件列表:
    1. zuxqpus is dinypus
    2. dinypus is zavwpus
    3. vughpus is babrpus
    4. yofrpus is jarvpus and vuqrpus
    5. negcpus is rurspus
    6. x is fuhbpus
    7. lahvpus is luhvpus and qermpus
    8. wuvwpus is boscpus
    9. jarvpus is vughpus
   10. luhvpus is yofrpus
   11. boscpus is zuxqpus
   12. zavwpus is lahvpus
   13. fuhbpus is negcpus and sesnpus
   14. rurspus is wuvwpus and nixdpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 14 个前提节点

🔍 开始处理actual节点...

   节点 1: x is fuhbpus
      ↻ 重复节点，计数: 2

   节点 2: x is fuhbpus
      ↻ 重复节点，计数: 3

   节点 3: fuhbpus is negcpus and sesnpus
      ↻ 重复节点，计数: 2

   节点 4: fuhbpus is negcpus and sesnpus
      ↻ 重复节点，计数: 3

   节点 5: negcpus is rurspus
      ↻ 重复节点，计数: 2

   节点 6: negcpus is rurspus
      ↻ 重复节点，计数: 3

   节点 7: rurspus is wuvwpus and nixdpus
      ↻ 重复节点，计数: 2

   节点 8: rurspus is wuvwpus and nixdpus
      ↻ 重复节点，计数: 3

   节点 9: wuvwpus is boscpus
      ↻ 重复节点，计数: 2

   节点 10: wuvwpus is boscpus
      ↻ 重复节点，计数: 3

   节点 11: boscpus is zuxqpus
      ↻ 重复节点，计数: 2

   节点 12: boscpus is zuxqpus
      ↻ 重复节点，计数: 3

   节点 13: zuxqpus is dinypus
      ↻ 重复节点，计数: 2

   节点 14: zuxqpus is dinypus
      ↻ 重复节点，计数: 3

   节点 15: dinypus is zavwpus
      ↻ 重复节点，计数: 2

   节点 16: dinypus is zavwpus
      ↻ 重复节点，计数: 3

   节点 17: zavwpus is lahvpus
      ↻ 重复节点，计数: 2

   节点 18: zavwpus is lahvpus
      ↻ 重复节点，计数: 3

   节点 19: lahvpus is luhvpus and qermpus
      ↻ 重复节点，计数: 2

   节点 20: lahvpus is luhvpus and qermpus
      ↻ 重复节点，计数: 3

   节点 21: luhvpus is yofrpus
      ↻ 重复节点，计数: 2

   节点 22: luhvpus is yofrpus
      ↻ 重复节点，计数: 3

   节点 23: yofrpus is jarvpus and vuqrpus
      ↻ 重复节点，计数: 2

   节点 24: yofrpus is jarvpus and vuqrpus
      ↻ 重复节点，计数: 3

   节点 25: jarvpus is vughpus
      ↻ 重复节点，计数: 2

   节点 26: jarvpus is vughpus
      ↻ 重复节点，计数: 3

   节点 27: vughpus is babrpus
      ↻ 重复节点，计数: 2

   节点 28: vughpus is babrpus
      ↻ 重复节点，计数: 3

   节点 29: yofrpus is jarvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yofrpus is jarvpus and vuqrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yofrpus is jarvpus and vuqrpus

   节点 30: jarvpus is vughpus
      ↻ 重复节点，计数: 4

   节点 31: vughpus is babrpus
      ↻ 重复节点，计数: 4

   节点 32: yofrpus is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: yofrpus is jarvpus → jarvpus is babrpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: yofrpus is jarvpus
  - 前提: jarvpus is vughpus
  - 前提: vughpus is babrpus
  ✓ 点亮LoG节点: jarvpus is babrpus or babcpus
[子树点亮]     └─ 点亮依赖节点: jarvpus is babrpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 33: x is fuhbpus
      ↻ 重复节点，计数: 4

   节点 34: fuhbpus is negcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: fuhbpus is negcpus and sesnpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: fuhbpus is negcpus and sesnpus

   节点 35: negcpus is rurspus
      ↻ 重复节点，计数: 4

   节点 36: rurspus is wuvwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: rurspus is wuvwpus and nixdpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: rurspus is wuvwpus and nixdpus

   节点 37: wuvwpus is boscpus
      ↻ 重复节点，计数: 4

   节点 38: boscpus is zuxqpus
      ↻ 重复节点，计数: 4

   节点 39: zuxqpus is dinypus
      ↻ 重复节点，计数: 4

   节点 40: dinypus is zavwpus
      ↻ 重复节点，计数: 4

   节点 41: zavwpus is lahvpus
      ↻ 重复节点，计数: 4

   节点 42: lahvpus is luhvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: lahvpus is luhvpus and qermpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: lahvpus is luhvpus and qermpus

   节点 43: luhvpus is yofrpus
      ↻ 重复节点，计数: 4

   节点 44: yofrpus is jarvpus
      ↻ 重复节点，计数: 2

   节点 45: jarvpus is vughpus
      ↻ 重复节点，计数: 5

   节点 46: vughpus is babrpus
      ↻ 重复节点，计数: 5

   节点 47: x is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fuhbpus → fuhbpus is babrpus
[后处理] 基于推理轨迹点亮节点，使用了 12 个前提条件:
  - 前提: x is fuhbpus
  - 前提: fuhbpus is negcpus
  - 前提: negcpus is rurspus
  - 前提: rurspus is wuvwpus
  - 前提: wuvwpus is boscpus
  - 前提: boscpus is zuxqpus
  - 前提: zuxqpus is dinypus
  - 前提: dinypus is zavwpus
  - 前提: zavwpus is lahvpus
  - 前提: lahvpus is luhvpus
  - 前提: luhvpus is yofrpus
  - 前提: yofrpus is babrpus
  ✓ 点亮LoG节点: x is babcpus or babrpus or babspus
[子树点亮]     └─ 点亮依赖节点: x is luhvpus (深度2)
[子树点亮]     └─ 点亮依赖节点: luhvpus is babcpus or babrpus or babspus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is wuvwpus (深度3)
[子树点亮]     └─ 点亮依赖节点: wuvwpus is luhvpus (深度3)
[子树点亮]     └─ 点亮依赖节点: luhvpus is babrpus or babcpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is negcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: negcpus is wuvwpus (深度4)
[子树点亮]     └─ 点亮依赖节点: wuvwpus is zavwpus (深度4)
[子树点亮]     └─ 点亮依赖节点: zavwpus is luhvpus (深度4)
[子树点亮]     └─ 点亮依赖节点: luhvpus is jarvpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is negcpus and sesnpus (深度5)
[子树点亮]     └─ 点亮依赖节点: negcpus is wuvwpus and nixdpus (深度5)
[子树点亮]     └─ 点亮依赖节点: wuvwpus is zuxqpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zuxqpus is zavwpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zavwpus is luhvpus and qermpus (深度5)
[子树点亮]     └─ 点亮依赖节点: luhvpus is jarvpus and vuqrpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 16 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 48: x is fuhbpus
      ↻ 重复节点，计数: 5

   节点 49: fuhbpus is negcpus
      ↻ 重复节点，计数: 2

   节点 50: x is negcpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 51: negcpus is rurspus
      ↻ 重复节点，计数: 5

   节点 52: rurspus is wuvwpus
      ↻ 重复节点，计数: 2

   节点 53: wuvwpus is boscpus
      ↻ 重复节点，计数: 5

   节点 54: x is boscpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fuhbpus → fuhbpus is boscpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is fuhbpus
  - 前提: fuhbpus is negcpus
  - 前提: negcpus is rurspus
  - 前提: rurspus is wuvwpus
  - 前提: wuvwpus is boscpus

   节点 55: boscpus is zuxqpus
      ↻ 重复节点，计数: 5

   节点 56: zuxqpus is dinypus
      ↻ 重复节点，计数: 5

   节点 57: dinypus is zavwpus
      ↻ 重复节点，计数: 5

   节点 58: zavwpus is lahvpus
      ↻ 重复节点，计数: 5

   节点 59: lahvpus is luhvpus
      ↻ 重复节点，计数: 2

   节点 60: x is luhvpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 61: luhvpus is yofrpus
      ↻ 重复节点，计数: 5

   节点 62: yofrpus is jarvpus
      ↻ 重复节点，计数: 3

   节点 63: jarvpus is vughpus
      ↻ 重复节点，计数: 6

   节点 64: vughpus is babrpus
      ↻ 重复节点，计数: 6

   节点 65: x is babrpus
      ↻ 重复节点，计数: 2

   节点 66: x is babrpus
      ↻ 重复节点，计数: 3

   节点 67: x is babrpus
      ↻ 重复节点，计数: 4

   节点 68: vughpus is babrpus
      ↻ 重复节点，计数: 7

   节点 69: x is babrpus
      ↻ 重复节点，计数: 5

   节点 70: x is babcpus or babrpus or babspus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 71: x is babrpus
      ↻ 重复节点，计数: 6

   节点 72: fuhbpus is sesnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: fuhbpus is negcpus and sesnpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: fuhbpus is negcpus and sesnpus

   节点 73: rurspus is nixdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: rurspus is wuvwpus and nixdpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: rurspus is wuvwpus and nixdpus

   节点 74: x is babrpus
      ↻ 重复节点，计数: 7

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 74
   - 新增节点: 12
   - 更新已存在节点: 62
   - 点亮的LoG节点: 19

🎯 推理质量统计:
   - 完美推理: 12 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 19节点, 14前提, 复杂度1-14

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 26
   - 前提节点: 14
   - 推理节点: 12
   - 幻觉节点: 0
   - 点亮LoG节点: 19

✅ 推理节点详情:
   🟢 yofrpus is jarvpus (出现3次, 质量:perfect)
   🟢 yofrpus is babrpus (出现1次, 质量:perfect)
   🟢 fuhbpus is negcpus (出现2次, 质量:perfect)
   🟢 rurspus is wuvwpus (出现2次, 质量:perfect)
   🟢 lahvpus is luhvpus (出现2次, 质量:perfect)
   🟢 x is babrpus (出现7次, 质量:perfect)
   🟢 x is negcpus (出现1次, 质量:perfect)
   🟢 x is boscpus (出现1次, 质量:perfect)
   🟢 x is luhvpus (出现1次, 质量:perfect)
   🟢 x is babcpus or babrpus or babspus (出现1次, 质量:perfect)
   🟢 fuhbpus is sesnpus (出现1次, 质量:perfect)
   🟢 rurspus is nixdpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is luhvpus
   - x is negcpus and sesnpus
   - jarvpus is babrpus or babcpus
   - negcpus is wuvwpus and nixdpus
   - zuxqpus is zavwpus
   - luhvpus is babrpus or babcpus
   - zavwpus is luhvpus and qermpus
   - jarvpus is babrpus
   - wuvwpus is zavwpus
   - negcpus is wuvwpus
   - x is negcpus
   - wuvwpus is luhvpus
   - wuvwpus is zuxqpus
   - x is wuvwpus
   - luhvpus is jarvpus
   - x is babcpus or babrpus or babspus
   - luhvpus is jarvpus and vuqrpus
   - luhvpus is babcpus or babrpus or babspus
   - zavwpus is luhvpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus or babrpus or babspus (第5层)
   节点Coverage: 19/19 = 100.00%
   前提条件Coverage: 14/14 = 100.00%
   各推理层点亮比例:
     第1层: 7/7 = 100.00%
     第2层: 6/6 = 100.00%
     第3层: 3/3 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/12 = 0.00%
   可推导节点: 12/12
   Strict Error Rate: 0/12 = 0.00%
   严格有效节点: 12/12

   详细分析:
     完美推理: 12 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 4/50
================================================================================
记录索引: 3
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_3.json
✅ 使用缓存结果:
   - 句子数: 119
   - 提取的语句数: 134
   - 初始条件数: 6

=== Statement提取完成 ===
总句子数: 119
成功提取: 119
失败提取: 0
总statements数: 134

=== 开始清洗Statement格式 ===
原始statements数: 134
清洗后statements数: 82
过滤掉的statements数: 52
清洗后的statements:
  1. [actual] wughpus is vusqpus
  2. [actual] wughpus is vusqpus
  3. [actual] kaftpus is jidzpus
  4. [actual] kaftpus is jidzpus
  5. [actual] vusqpus is kaftpus
  6. [actual] vusqpus is kaftpus
  7. [actual] jidzpus is babrpus and qabkpus and yevvpus
  8. [actual] jidzpus is babrpus
  9. [actual] jidzpus is qabkpus
  10. [actual] jidzpus is yevvpus
  11. [actual] x is leszpus
  12. [actual] leszpus is wughpus
  13. [actual] leszpus is wughpus
  14. [planning] x is babcpus or babrpus
  15. [planning] x is babcpus or babrpus
  16. [actual] x is an element
  17. [actual] x is leszpus
  18. [actual] leszpus is wughpus
  19. [actual] x is wughpus
  20. [planning] x is wughpus
  21. [actual] leszpus is wughpus
  22. [actual] x is leszpus
  23. [planning] x is wughpus
  24. [planning] x is babrpus
  25. [planning] x is babcpus
  26. [actual] wughpus is vusqpus
  27. [actual] vusqpus is kaftpus
  28. [actual] kaftpus is jidzpus
  29. [actual] kaftpus is jidzpus
  30. [actual] jidzpus is babrpus
  31. [actual] x is wughpus
  32. [actual] wughpus is vusqpus
  33. [planning] x is vusqpus
  34. [planning] wughpus is vusqpus
  35. [actual] jidzpus is babrpus and qabkpus and yevvpus
  36. [actual] wughpus is vusqpus
  37. [planning] wughpus is a category
  38. [planning] wughpus is vusqpus category
  39. [planning] vusqpus is a broader category
  40. [actual] x is leszpus
  41. [planning] x is A
  42. [planning] x is B
  43. [actual] wughpus is vusqpus
  44. [actual] kaftpus is jidzpus
  45. [actual] vusqpus is kaftpus
  46. [actual] jidzpus is babrpus
  47. [actual] jidzpus is qabkpus
  48. [actual] jidzpus is yevvpus
  49. [actual] x is leszpus
  50. [actual] leszpus is wughpus
  51. [actual] x is wughpus
  52. [actual] wughpus is vusqpus
  53. [actual] x is vusqpus
  54. [actual] vusqpus is kaftpus
  55. [actual] x is kaftpus
  56. [actual] kaftpus is jidzpus
  57. [actual] x is jidzpus
  58. [actual] jidzpus is babrpus
  59. [actual] x is babrpus
  60. [actual] x is babrpus
  61. [planning] x is babcpus or babrpus
  62. [actual] x is babrpus
  63. [planning] x is babcpus or babrpus
  64. [actual] x is babrpus
  65. [actual] x is babcpus or babrpus
  66. [planning] babcpus is a typo or something
  67. [actual] x is babrpus
  68. [planning] x is babcpus
  69. [actual] vusqpus is kaftpus
  70. [actual] kaftpus is jidzpus
  71. [actual] wughpus is vusqpus
  72. [actual] wughpus is jidzpus
  73. [actual] x is wughpus
  74. [actual] x is jidzpus
  75. [actual] x is babrpus
  76. [actual] wughpus is vusqpus
  77. [actual] vusqpus is kaftpus
  78. [planning] wughpus is kaftpus
  79. [actual] jidzpus is babrpus
  80. [actual] x is leszpus
  81. [actual] x is babrpus
  82. [actual] x is babcpus or babrpus

=== 开始标准化和解析节点 ===
清洗后statements数: 82
标准化后节点数: 75
过滤掉的无效实体数: 7
标准化后的节点:
  1. [actual] wughpus → vusqpus (原始: wughpus is vusqpus)
  2. [actual] wughpus → vusqpus (原始: wughpus is vusqpus)
  3. [actual] kaftpus → jidzpus (原始: kaftpus is jidzpus)
  4. [actual] kaftpus → jidzpus (原始: kaftpus is jidzpus)
  5. [actual] vusqpus → kaftpus (原始: vusqpus is kaftpus)
  6. [actual] vusqpus → kaftpus (原始: vusqpus is kaftpus)
  7. [actual] jidzpus → babrpus and qabkpus and yevvpus (原始: jidzpus is babrpus and qabkpus and yevvpus)
  8. [actual] jidzpus → babrpus (原始: jidzpus is babrpus)
  9. [actual] jidzpus → qabkpus (原始: jidzpus is qabkpus)
  10. [actual] jidzpus → yevvpus (原始: jidzpus is yevvpus)
  11. [actual] x → leszpus (原始: x is leszpus)
  12. [actual] leszpus → wughpus (原始: leszpus is wughpus)
  13. [actual] leszpus → wughpus (原始: leszpus is wughpus)
  14. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  15. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  16. [actual] x → leszpus (原始: x is leszpus)
  17. [actual] leszpus → wughpus (原始: leszpus is wughpus)
  18. [actual] x → wughpus (原始: x is wughpus)
  19. [planning] x → wughpus (原始: x is wughpus)
  20. [actual] leszpus → wughpus (原始: leszpus is wughpus)
  21. [actual] x → leszpus (原始: x is leszpus)
  22. [planning] x → wughpus (原始: x is wughpus)
  23. [planning] x → babrpus (原始: x is babrpus)
  24. [planning] x → babcpus (原始: x is babcpus)
  25. [actual] wughpus → vusqpus (原始: wughpus is vusqpus)
  26. [actual] vusqpus → kaftpus (原始: vusqpus is kaftpus)
  27. [actual] kaftpus → jidzpus (原始: kaftpus is jidzpus)
  28. [actual] kaftpus → jidzpus (原始: kaftpus is jidzpus)
  29. [actual] jidzpus → babrpus (原始: jidzpus is babrpus)
  30. [actual] x → wughpus (原始: x is wughpus)
  31. [actual] wughpus → vusqpus (原始: wughpus is vusqpus)
  32. [planning] x → vusqpus (原始: x is vusqpus)
  33. [planning] wughpus → vusqpus (原始: wughpus is vusqpus)
  34. [actual] jidzpus → babrpus and qabkpus and yevvpus (原始: jidzpus is babrpus and qabkpus and yevvpus)
  35. [actual] wughpus → vusqpus (原始: wughpus is vusqpus)
  36. [actual] x → leszpus (原始: x is leszpus)
  37. [actual] wughpus → vusqpus (原始: wughpus is vusqpus)
  38. [actual] kaftpus → jidzpus (原始: kaftpus is jidzpus)
  39. [actual] vusqpus → kaftpus (原始: vusqpus is kaftpus)
  40. [actual] jidzpus → babrpus (原始: jidzpus is babrpus)
  41. [actual] jidzpus → qabkpus (原始: jidzpus is qabkpus)
  42. [actual] jidzpus → yevvpus (原始: jidzpus is yevvpus)
  43. [actual] x → leszpus (原始: x is leszpus)
  44. [actual] leszpus → wughpus (原始: leszpus is wughpus)
  45. [actual] x → wughpus (原始: x is wughpus)
  46. [actual] wughpus → vusqpus (原始: wughpus is vusqpus)
  47. [actual] x → vusqpus (原始: x is vusqpus)
  48. [actual] vusqpus → kaftpus (原始: vusqpus is kaftpus)
  49. [actual] x → kaftpus (原始: x is kaftpus)
  50. [actual] kaftpus → jidzpus (原始: kaftpus is jidzpus)
  51. [actual] x → jidzpus (原始: x is jidzpus)
  52. [actual] jidzpus → babrpus (原始: jidzpus is babrpus)
  53. [actual] x → babrpus (原始: x is babrpus)
  54. [actual] x → babrpus (原始: x is babrpus)
  55. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  56. [actual] x → babrpus (原始: x is babrpus)
  57. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  58. [actual] x → babrpus (原始: x is babrpus)
  59. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  60. [actual] x → babrpus (原始: x is babrpus)
  61. [planning] x → babcpus (原始: x is babcpus)
  62. [actual] vusqpus → kaftpus (原始: vusqpus is kaftpus)
  63. [actual] kaftpus → jidzpus (原始: kaftpus is jidzpus)
  64. [actual] wughpus → vusqpus (原始: wughpus is vusqpus)
  65. [actual] wughpus → jidzpus (原始: wughpus is jidzpus)
  66. [actual] x → wughpus (原始: x is wughpus)
  67. [actual] x → jidzpus (原始: x is jidzpus)
  68. [actual] x → babrpus (原始: x is babrpus)
  69. [actual] wughpus → vusqpus (原始: wughpus is vusqpus)
  70. [actual] vusqpus → kaftpus (原始: vusqpus is kaftpus)
  71. [planning] wughpus → kaftpus (原始: wughpus is kaftpus)
  72. [actual] jidzpus → babrpus (原始: jidzpus is babrpus)
  73. [actual] x → leszpus (原始: x is leszpus)
  74. [actual] x → babrpus (原始: x is babrpus)
  75. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 8
[后处理] 加载LoG图，包含 8 个节点
  LoG节点 0: x is babcpus or babrpus (规则: DI, 深度: 1)
  LoG节点 1: x is babrpus (规则: CE, 深度: 2)
  LoG节点 2: x is babrpus and qabkpus (规则: MP, 深度: 3)
  LoG节点 3: x is kaftpus (规则: MP, 深度: 4)
  LoG节点 4: kaftpus is babrpus and qabkpus (规则: CE, 深度: 4)
  LoG节点 5: x is wughpus (规则: MP, 深度: 5)
  LoG节点 6: wughpus is kaftpus (规则: MP, 深度: 5)
  LoG节点 7: kaftpus is babrpus and qabkpus and yevvpus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 75
   - 初始条件数: 6
   - LoG图节点数: 8

📋 初始条件列表:
    1. wughpus is vusqpus
    2. kaftpus is jidzpus
    3. vusqpus is kaftpus
    4. jidzpus is babrpus and qabkpus and yevvpus
    5. x is leszpus
    6. leszpus is wughpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 6 个前提节点

🔍 开始处理actual节点...

   节点 1: wughpus is vusqpus
      ↻ 重复节点，计数: 2

   节点 2: wughpus is vusqpus
      ↻ 重复节点，计数: 3

   节点 3: kaftpus is jidzpus
      ↻ 重复节点，计数: 2

   节点 4: kaftpus is jidzpus
      ↻ 重复节点，计数: 3

   节点 5: vusqpus is kaftpus
      ↻ 重复节点，计数: 2

   节点 6: vusqpus is kaftpus
      ↻ 重复节点，计数: 3

   节点 7: jidzpus is babrpus and qabkpus and yevvpus
      ↻ 重复节点，计数: 2

   节点 8: jidzpus is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: jidzpus is babrpus and qabkpus and yevvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: jidzpus is babrpus and qabkpus and yevvpus

   节点 9: jidzpus is qabkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: jidzpus is babrpus and qabkpus and yevvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: jidzpus is babrpus and qabkpus and yevvpus

   节点 10: jidzpus is yevvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: jidzpus is babrpus and qabkpus and yevvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: jidzpus is babrpus and qabkpus and yevvpus

   节点 11: x is leszpus
      ↻ 重复节点，计数: 2

   节点 12: leszpus is wughpus
      ↻ 重复节点，计数: 2

   节点 13: leszpus is wughpus
      ↻ 重复节点，计数: 3

   节点 14: x is leszpus
      ↻ 重复节点，计数: 3

   节点 15: leszpus is wughpus
      ↻ 重复节点，计数: 4

   节点 16: x is wughpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is wughpus
      ✅ 验证成功 + LoG匹配

   节点 17: leszpus is wughpus
      ↻ 重复节点，计数: 5

   节点 18: x is leszpus
      ↻ 重复节点，计数: 4

   节点 19: wughpus is vusqpus
      ↻ 重复节点，计数: 4

   节点 20: vusqpus is kaftpus
      ↻ 重复节点，计数: 4

   节点 21: kaftpus is jidzpus
      ↻ 重复节点，计数: 4

   节点 22: kaftpus is jidzpus
      ↻ 重复节点，计数: 5

   节点 23: jidzpus is babrpus
      ↻ 重复节点，计数: 2

   节点 24: x is wughpus
      ↻ 重复节点，计数: 2

   节点 25: wughpus is vusqpus
      ↻ 重复节点，计数: 5

   节点 26: jidzpus is babrpus and qabkpus and yevvpus
      ↻ 重复节点，计数: 3

   节点 27: wughpus is vusqpus
      ↻ 重复节点，计数: 6

   节点 28: x is leszpus
      ↻ 重复节点，计数: 5

   节点 29: wughpus is vusqpus
      ↻ 重复节点，计数: 7

   节点 30: kaftpus is jidzpus
      ↻ 重复节点，计数: 6

   节点 31: vusqpus is kaftpus
      ↻ 重复节点，计数: 5

   节点 32: jidzpus is babrpus
      ↻ 重复节点，计数: 3

   节点 33: jidzpus is qabkpus
      ↻ 重复节点，计数: 2

   节点 34: jidzpus is yevvpus
      ↻ 重复节点，计数: 2

   节点 35: x is leszpus
      ↻ 重复节点，计数: 6

   节点 36: leszpus is wughpus
      ↻ 重复节点，计数: 6

   节点 37: x is wughpus
      ↻ 重复节点，计数: 3

   节点 38: wughpus is vusqpus
      ↻ 重复节点，计数: 8

   节点 39: x is vusqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is leszpus → leszpus is vusqpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is leszpus
  - 前提: leszpus is wughpus
  - 前提: wughpus is vusqpus

   节点 40: vusqpus is kaftpus
      ↻ 重复节点，计数: 6

   节点 41: x is kaftpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is kaftpus
[子树点亮]     └─ 点亮依赖节点: wughpus is kaftpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 42: kaftpus is jidzpus
      ↻ 重复节点，计数: 7

   节点 43: x is jidzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is leszpus → leszpus is jidzpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is leszpus
  - 前提: leszpus is wughpus
  - 前提: wughpus is vusqpus
  - 前提: vusqpus is kaftpus
  - 前提: kaftpus is jidzpus

   节点 44: jidzpus is babrpus
      ↻ 重复节点，计数: 4

   节点 45: x is babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babrpus
[子树点亮]     └─ 点亮依赖节点: x is babrpus and qabkpus (深度3)
[子树点亮]     └─ 点亮依赖节点: kaftpus is babrpus and qabkpus (深度4)
[子树点亮]     └─ 点亮依赖节点: kaftpus is babrpus and qabkpus and yevvpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 46: x is babrpus
      ↻ 重复节点，计数: 2

   节点 47: x is babrpus
      ↻ 重复节点，计数: 3

   节点 48: x is babrpus
      ↻ 重复节点，计数: 4

   节点 49: x is babcpus or babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus or babrpus
      ✅ 验证成功 + LoG匹配

   节点 50: x is babrpus
      ↻ 重复节点，计数: 5

   节点 51: vusqpus is kaftpus
      ↻ 重复节点，计数: 7

   节点 52: kaftpus is jidzpus
      ↻ 重复节点，计数: 8

   节点 53: wughpus is vusqpus
      ↻ 重复节点，计数: 9

   节点 54: wughpus is jidzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: wughpus is vusqpus → vusqpus is jidzpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: wughpus is vusqpus
  - 前提: vusqpus is kaftpus
  - 前提: kaftpus is jidzpus

   节点 55: x is wughpus
      ↻ 重复节点，计数: 4

   节点 56: x is jidzpus
      ↻ 重复节点，计数: 2

   节点 57: x is babrpus
      ↻ 重复节点，计数: 6

   节点 58: wughpus is vusqpus
      ↻ 重复节点，计数: 10

   节点 59: vusqpus is kaftpus
      ↻ 重复节点，计数: 8

   节点 60: jidzpus is babrpus
      ↻ 重复节点，计数: 5

   节点 61: x is leszpus
      ↻ 重复节点，计数: 7

   节点 62: x is babrpus
      ↻ 重复节点，计数: 7

   节点 63: x is babcpus or babrpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 63
   - 新增节点: 10
   - 更新已存在节点: 53
   - 点亮的LoG节点: 8

🎯 推理质量统计:
   - 完美推理: 10 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 8节点, 6前提, 复杂度1-6

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 16
   - 前提节点: 6
   - 推理节点: 10
   - 幻觉节点: 0
   - 点亮LoG节点: 8

✅ 推理节点详情:
   🟢 jidzpus is babrpus (出现5次, 质量:perfect)
   🟢 jidzpus is qabkpus (出现2次, 质量:perfect)
   🟢 jidzpus is yevvpus (出现2次, 质量:perfect)
   🟢 x is wughpus (出现4次, 质量:perfect)
   🟢 x is vusqpus (出现1次, 质量:perfect)
   🟢 x is kaftpus (出现1次, 质量:perfect)
   🟢 x is jidzpus (出现2次, 质量:perfect)
   🟢 x is babrpus (出现7次, 质量:perfect)
   🟢 x is babcpus or babrpus (出现2次, 质量:perfect)
   🟢 wughpus is jidzpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - kaftpus is babrpus and qabkpus and yevvpus
   - x is babcpus or babrpus
   - kaftpus is babrpus and qabkpus
   - x is wughpus
   - x is babrpus and qabkpus
   - x is babrpus
   - x is kaftpus
   - wughpus is kaftpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus or babrpus (第5层)
   节点Coverage: 8/8 = 100.00%
   前提条件Coverage: 6/6 = 100.00%
   各推理层点亮比例:
     第1层: 3/3 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/10 = 0.00%
   可推导节点: 10/10
   Strict Error Rate: 0/10 = 0.00%
   严格有效节点: 10/10

   详细分析:
     完美推理: 10 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 5/50
================================================================================
记录索引: 4
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_4.json
✅ 使用缓存结果:
   - 句子数: 83
   - 提取的语句数: 84
   - 初始条件数: 15

=== Statement提取完成 ===
总句子数: 83
成功提取: 83
失败提取: 0
总statements数: 84

=== 开始清洗Statement格式 ===
原始statements数: 84
清洗后statements数: 81
过滤掉的statements数: 3
清洗后的statements:
  1. [planning] x is babcpus
  2. [actual] tengpus is ridspus and kixlpus
  3. [actual] x is fobvpus
  4. [actual] zipmpus is cawypus and nafgpus
  5. [actual] ridspus is vigdpus
  6. [actual] kagkpus is roqvpus
  7. [actual] qactpus is tengpus
  8. [actual] cawypus is babcpus and galqpus and xilppus
  9. [actual] lesfpus is goxfpus
  10. [actual] goxfpus is malcpus and yinzpus
  11. [actual] vigdpus is qiflpus
  12. [actual] roqvpus is lesfpus
  13. [actual] malcpus is cotwpus
  14. [actual] qiflpus is kagkpus
  15. [actual] cotwpus is zipmpus and kuvspus
  16. [actual] fobvpus is qactpus and lirkpus
  17. [planning] x is babcpus
  18. [actual] x is fobvpus
  19. [actual] fobvpus is qactpus and lirkpus
  20. [actual] x is fobvpus
  21. [actual] x is qactpus and lirkpus
  22. [actual] qactpus is tengpus
  23. [actual] x is qactpus
  24. [actual] qactpus is tengpus
  25. [actual] x is tengpus
  26. [actual] tengpus is ridspus and kixlpus
  27. [actual] x is ridspus and kixlpus
  28. [actual] ridspus is vigdpus
  29. [actual] x is vigdpus
  30. [actual] vigdpus is qiflpus
  31. [actual] x is qiflpus
  32. [actual] qiflpus is kagkpus
  33. [actual] x is kagkpus
  34. [actual] kagkpus is roqvpus
  35. [actual] x is roqvpus
  36. [actual] roqvpus is lesfpus
  37. [actual] x is lesfpus
  38. [actual] lesfpus is goxfpus
  39. [actual] x is goxfpus
  40. [actual] goxfpus is malcpus and yinzpus
  41. [actual] x is malcpus and yinzpus
  42. [actual] malcpus is cotwpus
  43. [actual] x is cotwpus
  44. [actual] cotwpus is zipmpus and kuvspus
  45. [actual] x is zipmpus and kuvspus
  46. [actual] zipmpus is cawypus and nafgpus
  47. [actual] x is cawypus and nafgpus
  48. [actual] cawypus is babcpus and galqpus and xilppus
  49. [actual] x is cawypus
  50. [actual] x is babcpus
  51. [actual] x is babcpus
  52. [actual] x is babcpus
  53. [actual] x is fobvpus
  54. [actual] fobvpus is qactpus and lirkpus
  55. [actual] x is qactpus
  56. [actual] qactpus is tengpus
  57. [planning] x is tengpus
  58. [actual] tengpus is ridspus and kixlpus
  59. [actual] x is ridspus
  60. [actual] ridspus is vigdpus
  61. [planning] x is vigdpus
  62. [actual] vigdpus is qiflpus
  63. [planning] x is qiflpus
  64. [actual] qiflpus is kagkpus
  65. [planning] x is kagkpus
  66. [actual] kagkpus is roqvpus
  67. [planning] x is roqvpus
  68. [actual] roqvpus is lesfpus
  69. [actual] x is lesfpus
  70. [actual] lesfpus is goxfpus
  71. [actual] x is goxfpus
  72. [actual] goxfpus is malcpus and yinzpus
  73. [actual] x is malcpus
  74. [actual] malcpus is cotwpus
  75. [planning] x is cotwpus
  76. [actual] cotwpus is zipmpus and kuvspus
  77. [actual] x is zipmpus
  78. [actual] zipmpus is cawypus and nafgpus
  79. [actual] x is cawypus
  80. [actual] cawypus is babcpus and galqpus and xilppus
  81. [actual] x is babcpus

=== 开始标准化和解析节点 ===
清洗后statements数: 81
标准化后节点数: 81
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babcpus (原始: x is babcpus)
  2. [actual] tengpus → ridspus and kixlpus (原始: tengpus is ridspus and kixlpus)
  3. [actual] x → fobvpus (原始: x is fobvpus)
  4. [actual] zipmpus → cawypus and nafgpus (原始: zipmpus is cawypus and nafgpus)
  5. [actual] ridspus → vigdpus (原始: ridspus is vigdpus)
  6. [actual] kagkpus → roqvpus (原始: kagkpus is roqvpus)
  7. [actual] qactpus → tengpus (原始: qactpus is tengpus)
  8. [actual] cawypus → babcpus and galqpus and xilppus (原始: cawypus is babcpus and galqpus and xilppus)
  9. [actual] lesfpus → goxfpus (原始: lesfpus is goxfpus)
  10. [actual] goxfpus → malcpus and yinzpus (原始: goxfpus is malcpus and yinzpus)
  11. [actual] vigdpus → qiflpus (原始: vigdpus is qiflpus)
  12. [actual] roqvpus → lesfpus (原始: roqvpus is lesfpus)
  13. [actual] malcpus → cotwpus (原始: malcpus is cotwpus)
  14. [actual] qiflpus → kagkpus (原始: qiflpus is kagkpus)
  15. [actual] cotwpus → zipmpus and kuvspus (原始: cotwpus is zipmpus and kuvspus)
  16. [actual] fobvpus → qactpus and lirkpus (原始: fobvpus is qactpus and lirkpus)
  17. [planning] x → babcpus (原始: x is babcpus)
  18. [actual] x → fobvpus (原始: x is fobvpus)
  19. [actual] fobvpus → qactpus and lirkpus (原始: fobvpus is qactpus and lirkpus)
  20. [actual] x → fobvpus (原始: x is fobvpus)
  21. [actual] x → qactpus and lirkpus (原始: x is qactpus and lirkpus)
  22. [actual] qactpus → tengpus (原始: qactpus is tengpus)
  23. [actual] x → qactpus (原始: x is qactpus)
  24. [actual] qactpus → tengpus (原始: qactpus is tengpus)
  25. [actual] x → tengpus (原始: x is tengpus)
  26. [actual] tengpus → ridspus and kixlpus (原始: tengpus is ridspus and kixlpus)
  27. [actual] x → ridspus and kixlpus (原始: x is ridspus and kixlpus)
  28. [actual] ridspus → vigdpus (原始: ridspus is vigdpus)
  29. [actual] x → vigdpus (原始: x is vigdpus)
  30. [actual] vigdpus → qiflpus (原始: vigdpus is qiflpus)
  31. [actual] x → qiflpus (原始: x is qiflpus)
  32. [actual] qiflpus → kagkpus (原始: qiflpus is kagkpus)
  33. [actual] x → kagkpus (原始: x is kagkpus)
  34. [actual] kagkpus → roqvpus (原始: kagkpus is roqvpus)
  35. [actual] x → roqvpus (原始: x is roqvpus)
  36. [actual] roqvpus → lesfpus (原始: roqvpus is lesfpus)
  37. [actual] x → lesfpus (原始: x is lesfpus)
  38. [actual] lesfpus → goxfpus (原始: lesfpus is goxfpus)
  39. [actual] x → goxfpus (原始: x is goxfpus)
  40. [actual] goxfpus → malcpus and yinzpus (原始: goxfpus is malcpus and yinzpus)
  41. [actual] x → malcpus and yinzpus (原始: x is malcpus and yinzpus)
  42. [actual] malcpus → cotwpus (原始: malcpus is cotwpus)
  43. [actual] x → cotwpus (原始: x is cotwpus)
  44. [actual] cotwpus → zipmpus and kuvspus (原始: cotwpus is zipmpus and kuvspus)
  45. [actual] x → zipmpus and kuvspus (原始: x is zipmpus and kuvspus)
  46. [actual] zipmpus → cawypus and nafgpus (原始: zipmpus is cawypus and nafgpus)
  47. [actual] x → cawypus and nafgpus (原始: x is cawypus and nafgpus)
  48. [actual] cawypus → babcpus and galqpus and xilppus (原始: cawypus is babcpus and galqpus and xilppus)
  49. [actual] x → cawypus (原始: x is cawypus)
  50. [actual] x → babcpus (原始: x is babcpus)
  51. [actual] x → babcpus (原始: x is babcpus)
  52. [actual] x → babcpus (原始: x is babcpus)
  53. [actual] x → fobvpus (原始: x is fobvpus)
  54. [actual] fobvpus → qactpus and lirkpus (原始: fobvpus is qactpus and lirkpus)
  55. [actual] x → qactpus (原始: x is qactpus)
  56. [actual] qactpus → tengpus (原始: qactpus is tengpus)
  57. [planning] x → tengpus (原始: x is tengpus)
  58. [actual] tengpus → ridspus and kixlpus (原始: tengpus is ridspus and kixlpus)
  59. [actual] x → ridspus (原始: x is ridspus)
  60. [actual] ridspus → vigdpus (原始: ridspus is vigdpus)
  61. [planning] x → vigdpus (原始: x is vigdpus)
  62. [actual] vigdpus → qiflpus (原始: vigdpus is qiflpus)
  63. [planning] x → qiflpus (原始: x is qiflpus)
  64. [actual] qiflpus → kagkpus (原始: qiflpus is kagkpus)
  65. [planning] x → kagkpus (原始: x is kagkpus)
  66. [actual] kagkpus → roqvpus (原始: kagkpus is roqvpus)
  67. [planning] x → roqvpus (原始: x is roqvpus)
  68. [actual] roqvpus → lesfpus (原始: roqvpus is lesfpus)
  69. [actual] x → lesfpus (原始: x is lesfpus)
  70. [actual] lesfpus → goxfpus (原始: lesfpus is goxfpus)
  71. [actual] x → goxfpus (原始: x is goxfpus)
  72. [actual] goxfpus → malcpus and yinzpus (原始: goxfpus is malcpus and yinzpus)
  73. [actual] x → malcpus (原始: x is malcpus)
  74. [actual] malcpus → cotwpus (原始: malcpus is cotwpus)
  75. [planning] x → cotwpus (原始: x is cotwpus)
  76. [actual] cotwpus → zipmpus and kuvspus (原始: cotwpus is zipmpus and kuvspus)
  77. [actual] x → zipmpus (原始: x is zipmpus)
  78. [actual] zipmpus → cawypus and nafgpus (原始: zipmpus is cawypus and nafgpus)
  79. [actual] x → cawypus (原始: x is cawypus)
  80. [actual] cawypus → babcpus and galqpus and xilppus (原始: cawypus is babcpus and galqpus and xilppus)
  81. [actual] x → babcpus (原始: x is babcpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 21
[后处理] 加载LoG图，包含 21 个节点
  LoG节点 0: x is babcpus (规则: MP, 深度: 1)
  LoG节点 1: x is malcpus (规则: MP, 深度: 2)
  LoG节点 2: malcpus is babcpus (规则: CE, 深度: 2)
  LoG节点 3: x is ridspus (规则: MP, 深度: 3)
  LoG节点 4: ridspus is malcpus (规则: MP, 深度: 3)
  LoG节点 5: malcpus is babcpus and galqpus (规则: MP, 深度: 3)
  LoG节点 6: x is qactpus (规则: CE, 深度: 4)
  LoG节点 7: qactpus is ridspus (规则: CE, 深度: 4)
  LoG节点 8: ridspus is roqvpus (规则: MP, 深度: 4)
  LoG节点 9: roqvpus is malcpus (规则: MP, 深度: 4)
  LoG节点 10: malcpus is zipmpus (规则: CE, 深度: 4)
  LoG节点 11: zipmpus is babcpus and galqpus (规则: MP, 深度: 4)
  LoG节点 12: x is qactpus and lirkpus (规则: MP, 深度: 5)
  LoG节点 13: qactpus is ridspus and kixlpus (规则: MP, 深度: 5)
  LoG节点 14: ridspus is qiflpus (规则: MP, 深度: 5)
  LoG节点 15: qiflpus is roqvpus (规则: MP, 深度: 5)
  LoG节点 16: roqvpus is goxfpus (规则: MP, 深度: 5)
  LoG节点 17: goxfpus is malcpus (规则: CE, 深度: 5)
  LoG节点 18: malcpus is zipmpus and kuvspus (规则: MP, 深度: 5)
  LoG节点 19: zipmpus is cawypus (规则: CE, 深度: 5)
  LoG节点 20: cawypus is babcpus and galqpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 81
   - 初始条件数: 15
   - LoG图节点数: 21

📋 初始条件列表:
    1. tengpus is ridspus and kixlpus
    2. x is fobvpus
    3. zipmpus is cawypus and nafgpus
    4. ridspus is vigdpus
    5. kagkpus is roqvpus
    6. qactpus is tengpus
    7. cawypus is babcpus and galqpus and xilppus
    8. lesfpus is goxfpus
    9. goxfpus is malcpus and yinzpus
   10. vigdpus is qiflpus
   11. roqvpus is lesfpus
   12. malcpus is cotwpus
   13. qiflpus is kagkpus
   14. cotwpus is zipmpus and kuvspus
   15. fobvpus is qactpus and lirkpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 15 个前提节点

🔍 开始处理actual节点...

   节点 1: tengpus is ridspus and kixlpus
      ↻ 重复节点，计数: 2

   节点 2: x is fobvpus
      ↻ 重复节点，计数: 2

   节点 3: zipmpus is cawypus and nafgpus
      ↻ 重复节点，计数: 2

   节点 4: ridspus is vigdpus
      ↻ 重复节点，计数: 2

   节点 5: kagkpus is roqvpus
      ↻ 重复节点，计数: 2

   节点 6: qactpus is tengpus
      ↻ 重复节点，计数: 2

   节点 7: cawypus is babcpus and galqpus and xilppus
      ↻ 重复节点，计数: 2

   节点 8: lesfpus is goxfpus
      ↻ 重复节点，计数: 2

   节点 9: goxfpus is malcpus and yinzpus
      ↻ 重复节点，计数: 2

   节点 10: vigdpus is qiflpus
      ↻ 重复节点，计数: 2

   节点 11: roqvpus is lesfpus
      ↻ 重复节点，计数: 2

   节点 12: malcpus is cotwpus
      ↻ 重复节点，计数: 2

   节点 13: qiflpus is kagkpus
      ↻ 重复节点，计数: 2

   节点 14: cotwpus is zipmpus and kuvspus
      ↻ 重复节点，计数: 2

   节点 15: fobvpus is qactpus and lirkpus
      ↻ 重复节点，计数: 2

   节点 16: x is fobvpus
      ↻ 重复节点，计数: 3

   节点 17: fobvpus is qactpus and lirkpus
      ↻ 重复节点，计数: 3

   节点 18: x is fobvpus
      ↻ 重复节点，计数: 4

   节点 19: x is qactpus and lirkpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is qactpus and lirkpus
      ✅ 验证成功 + LoG匹配

   节点 20: qactpus is tengpus
      ↻ 重复节点，计数: 3

   节点 21: x is qactpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is qactpus
      ✅ 验证成功 + LoG匹配

   节点 22: qactpus is tengpus
      ↻ 重复节点，计数: 4

   节点 23: x is tengpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fobvpus → fobvpus is tengpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is fobvpus
  - 前提: fobvpus is qactpus and lirkpus
  - 前提: qactpus is tengpus

   节点 24: tengpus is ridspus and kixlpus
      ↻ 重复节点，计数: 3

   节点 25: x is ridspus and kixlpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fobvpus → fobvpus is ridspus and kixlpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is fobvpus
  - 前提: fobvpus is qactpus and lirkpus
  - 前提: qactpus is tengpus
  - 前提: tengpus is ridspus and kixlpus
  ✓ 点亮LoG节点: x is ridspus
[子树点亮]     └─ 点亮依赖节点: qactpus is ridspus (深度4)
[子树点亮]     └─ 点亮依赖节点: qactpus is ridspus and kixlpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 26: ridspus is vigdpus
      ↻ 重复节点，计数: 3

   节点 27: x is vigdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fobvpus → fobvpus is vigdpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is fobvpus
  - 前提: fobvpus is qactpus and lirkpus
  - 前提: qactpus is tengpus
  - 前提: tengpus is ridspus and kixlpus
  - 前提: ridspus is vigdpus

   节点 28: vigdpus is qiflpus
      ↻ 重复节点，计数: 3

   节点 29: x is qiflpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fobvpus → fobvpus is qiflpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is fobvpus
  - 前提: fobvpus is qactpus and lirkpus
  - 前提: qactpus is tengpus
  - 前提: tengpus is ridspus and kixlpus
  - 前提: ridspus is vigdpus
  - 前提: vigdpus is qiflpus
  ✓ 点亮LoG节点: ridspus is qiflpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 30: qiflpus is kagkpus
      ↻ 重复节点，计数: 3

   节点 31: x is kagkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fobvpus → fobvpus is kagkpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is fobvpus
  - 前提: fobvpus is qactpus and lirkpus
  - 前提: qactpus is tengpus
  - 前提: tengpus is ridspus and kixlpus
  - 前提: ridspus is vigdpus
  - 前提: vigdpus is qiflpus
  - 前提: qiflpus is kagkpus

   节点 32: kagkpus is roqvpus
      ↻ 重复节点，计数: 3

   节点 33: x is roqvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fobvpus → fobvpus is roqvpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is fobvpus
  - 前提: fobvpus is qactpus and lirkpus
  - 前提: qactpus is tengpus
  - 前提: tengpus is ridspus and kixlpus
  - 前提: ridspus is vigdpus
  - 前提: vigdpus is qiflpus
  - 前提: qiflpus is kagkpus
  - 前提: kagkpus is roqvpus
  ✓ 点亮LoG节点: ridspus is roqvpus
[子树点亮]     └─ 点亮依赖节点: qiflpus is roqvpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 34: roqvpus is lesfpus
      ↻ 重复节点，计数: 3

   节点 35: x is lesfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fobvpus → fobvpus is lesfpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is fobvpus
  - 前提: fobvpus is qactpus and lirkpus
  - 前提: qactpus is tengpus
  - 前提: tengpus is ridspus and kixlpus
  - 前提: ridspus is vigdpus
  - 前提: vigdpus is qiflpus
  - 前提: qiflpus is kagkpus
  - 前提: kagkpus is roqvpus
  - 前提: roqvpus is lesfpus

   节点 36: lesfpus is goxfpus
      ↻ 重复节点，计数: 3

   节点 37: x is goxfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fobvpus → fobvpus is goxfpus
[后处理] 基于推理轨迹点亮节点，使用了 10 个前提条件:
  - 前提: x is fobvpus
  - 前提: fobvpus is qactpus and lirkpus
  - 前提: qactpus is tengpus
  - 前提: tengpus is ridspus and kixlpus
  - 前提: ridspus is vigdpus
  - 前提: vigdpus is qiflpus
  - 前提: qiflpus is kagkpus
  - 前提: kagkpus is roqvpus
  - 前提: roqvpus is lesfpus
  - 前提: lesfpus is goxfpus
  ✓ 点亮LoG节点: roqvpus is goxfpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 38: goxfpus is malcpus and yinzpus
      ↻ 重复节点，计数: 3

   节点 39: x is malcpus and yinzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fobvpus → fobvpus is malcpus and yinzpus
[后处理] 基于推理轨迹点亮节点，使用了 11 个前提条件:
  - 前提: x is fobvpus
  - 前提: fobvpus is qactpus and lirkpus
  - 前提: qactpus is tengpus
  - 前提: tengpus is ridspus and kixlpus
  - 前提: ridspus is vigdpus
  - 前提: vigdpus is qiflpus
  - 前提: qiflpus is kagkpus
  - 前提: kagkpus is roqvpus
  - 前提: roqvpus is lesfpus
  - 前提: lesfpus is goxfpus
  - 前提: goxfpus is malcpus and yinzpus
  ✓ 点亮LoG节点: x is malcpus
[子树点亮]     └─ 点亮依赖节点: ridspus is malcpus (深度3)
[子树点亮]     └─ 点亮依赖节点: roqvpus is malcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: goxfpus is malcpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 40: malcpus is cotwpus
      ↻ 重复节点，计数: 3

   节点 41: x is cotwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fobvpus → fobvpus is cotwpus
[后处理] 基于推理轨迹点亮节点，使用了 12 个前提条件:
  - 前提: x is fobvpus
  - 前提: fobvpus is qactpus and lirkpus
  - 前提: qactpus is tengpus
  - 前提: tengpus is ridspus and kixlpus
  - 前提: ridspus is vigdpus
  - 前提: vigdpus is qiflpus
  - 前提: qiflpus is kagkpus
  - 前提: kagkpus is roqvpus
  - 前提: roqvpus is lesfpus
  - 前提: lesfpus is goxfpus
  - 前提: goxfpus is malcpus and yinzpus
  - 前提: malcpus is cotwpus

   节点 42: cotwpus is zipmpus and kuvspus
      ↻ 重复节点，计数: 3

   节点 43: x is zipmpus and kuvspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fobvpus → fobvpus is zipmpus and kuvspus
[后处理] 基于推理轨迹点亮节点，使用了 13 个前提条件:
  - 前提: x is fobvpus
  - 前提: fobvpus is qactpus and lirkpus
  - 前提: qactpus is tengpus
  - 前提: tengpus is ridspus and kixlpus
  - 前提: ridspus is vigdpus
  - 前提: vigdpus is qiflpus
  - 前提: qiflpus is kagkpus
  - 前提: kagkpus is roqvpus
  - 前提: roqvpus is lesfpus
  - 前提: lesfpus is goxfpus
  - 前提: goxfpus is malcpus and yinzpus
  - 前提: malcpus is cotwpus
  - 前提: cotwpus is zipmpus and kuvspus
  ✓ 点亮LoG节点: malcpus is zipmpus
[子树点亮]     └─ 点亮依赖节点: malcpus is zipmpus and kuvspus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 44: zipmpus is cawypus and nafgpus
      ↻ 重复节点，计数: 3

   节点 45: x is cawypus and nafgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fobvpus → fobvpus is cawypus and nafgpus
[后处理] 基于推理轨迹点亮节点，使用了 14 个前提条件:
  - 前提: x is fobvpus
  - 前提: fobvpus is qactpus and lirkpus
  - 前提: qactpus is tengpus
  - 前提: tengpus is ridspus and kixlpus
  - 前提: ridspus is vigdpus
  - 前提: vigdpus is qiflpus
  - 前提: qiflpus is kagkpus
  - 前提: kagkpus is roqvpus
  - 前提: roqvpus is lesfpus
  - 前提: lesfpus is goxfpus
  - 前提: goxfpus is malcpus and yinzpus
  - 前提: malcpus is cotwpus
  - 前提: cotwpus is zipmpus and kuvspus
  - 前提: zipmpus is cawypus and nafgpus
  ✓ 点亮LoG节点: zipmpus is cawypus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 46: cawypus is babcpus and galqpus and xilppus
      ↻ 重复节点，计数: 3

   节点 47: x is cawypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is cawypus and nafgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is cawypus and nafgpus

   节点 48: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: malcpus is babcpus (深度2)
[子树点亮]     └─ 点亮依赖节点: malcpus is babcpus and galqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: zipmpus is babcpus and galqpus (深度4)
[子树点亮]     └─ 点亮依赖节点: cawypus is babcpus and galqpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
      ✅ 验证成功 + LoG匹配

   节点 49: x is babcpus
      ↻ 重复节点，计数: 2

   节点 50: x is babcpus
      ↻ 重复节点，计数: 3

   节点 51: x is fobvpus
      ↻ 重复节点，计数: 5

   节点 52: fobvpus is qactpus and lirkpus
      ↻ 重复节点，计数: 4

   节点 53: x is qactpus
      ↻ 重复节点，计数: 2

   节点 54: qactpus is tengpus
      ↻ 重复节点，计数: 5

   节点 55: tengpus is ridspus and kixlpus
      ↻ 重复节点，计数: 4

   节点 56: x is ridspus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 57: ridspus is vigdpus
      ↻ 重复节点，计数: 4

   节点 58: vigdpus is qiflpus
      ↻ 重复节点，计数: 4

   节点 59: qiflpus is kagkpus
      ↻ 重复节点，计数: 4

   节点 60: kagkpus is roqvpus
      ↻ 重复节点，计数: 4

   节点 61: roqvpus is lesfpus
      ↻ 重复节点，计数: 4

   节点 62: x is lesfpus
      ↻ 重复节点，计数: 2

   节点 63: lesfpus is goxfpus
      ↻ 重复节点，计数: 4

   节点 64: x is goxfpus
      ↻ 重复节点，计数: 2

   节点 65: goxfpus is malcpus and yinzpus
      ↻ 重复节点，计数: 4

   节点 66: x is malcpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 67: malcpus is cotwpus
      ↻ 重复节点，计数: 4

   节点 68: cotwpus is zipmpus and kuvspus
      ↻ 重复节点，计数: 4

   节点 69: x is zipmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is zipmpus and kuvspus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is zipmpus and kuvspus

   节点 70: zipmpus is cawypus and nafgpus
      ↻ 重复节点，计数: 4

   节点 71: x is cawypus
      ↻ 重复节点，计数: 2

   节点 72: cawypus is babcpus and galqpus and xilppus
      ↻ 重复节点，计数: 4

   节点 73: x is babcpus
      ↻ 重复节点，计数: 4

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 73
   - 新增节点: 19
   - 更新已存在节点: 54
   - 点亮的LoG节点: 21

🎯 推理质量统计:
   - 完美推理: 19 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 21节点, 15前提, 复杂度1-15

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 34
   - 前提节点: 15
   - 推理节点: 19
   - 幻觉节点: 0
   - 点亮LoG节点: 21

✅ 推理节点详情:
   🟢 x is qactpus and lirkpus (出现1次, 质量:perfect)
   🟢 x is qactpus (出现2次, 质量:perfect)
   🟢 x is tengpus (出现1次, 质量:perfect)
   🟢 x is ridspus and kixlpus (出现1次, 质量:perfect)
   🟢 x is vigdpus (出现1次, 质量:perfect)
   🟢 x is qiflpus (出现1次, 质量:perfect)
   🟢 x is kagkpus (出现1次, 质量:perfect)
   🟢 x is roqvpus (出现1次, 质量:perfect)
   🟢 x is lesfpus (出现2次, 质量:perfect)
   🟢 x is goxfpus (出现2次, 质量:perfect)
   🟢 x is malcpus and yinzpus (出现1次, 质量:perfect)
   🟢 x is cotwpus (出现1次, 质量:perfect)
   🟢 x is zipmpus and kuvspus (出现1次, 质量:perfect)
   🟢 x is cawypus and nafgpus (出现1次, 质量:perfect)
   🟢 x is cawypus (出现2次, 质量:perfect)
   🟢 x is babcpus (出现4次, 质量:perfect)
   🟢 x is ridspus (出现1次, 质量:perfect)
   🟢 x is malcpus (出现1次, 质量:perfect)
   🟢 x is zipmpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - roqvpus is goxfpus
   - roqvpus is malcpus
   - ridspus is malcpus
   - cawypus is babcpus and galqpus
   - qiflpus is roqvpus
   - malcpus is zipmpus
   - malcpus is zipmpus and kuvspus
   - x is malcpus
   - qactpus is ridspus and kixlpus
   - qactpus is ridspus
   - zipmpus is babcpus and galqpus
   - x is qactpus and lirkpus
   - goxfpus is malcpus
   - ridspus is roqvpus
   - x is ridspus
   - ridspus is qiflpus
   - malcpus is babcpus and galqpus
   - x is qactpus
   - malcpus is babcpus
   - x is babcpus
   - zipmpus is cawypus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus (第5层)
   节点Coverage: 21/21 = 100.00%
   前提条件Coverage: 15/15 = 100.00%
   各推理层点亮比例:
     第1层: 9/9 = 100.00%
     第2层: 6/6 = 100.00%
     第3层: 3/3 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/19 = 0.00%
   可推导节点: 19/19
   Strict Error Rate: 0/19 = 0.00%
   严格有效节点: 19/19

   详细分析:
     完美推理: 19 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 6/50
================================================================================
记录索引: 5
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_5.json
✅ 使用缓存结果:
   - 句子数: 86
   - 提取的语句数: 90
   - 初始条件数: 9

=== Statement提取完成 ===
总句子数: 86
成功提取: 86
失败提取: 0
总statements数: 90

=== 开始清洗Statement格式 ===
原始statements数: 90
清洗后statements数: 72
过滤掉的statements数: 18
清洗后的statements:
  1. [planning] x is babcpus
  2. [planning] x is babrpus
  3. [actual] x is relmpus
  4. [actual] relmpus is babgpus
  5. [actual] x is babgpus
  6. [planning] x is babgpus
  7. [actual] puctpus is deqspus
  8. [actual] cefypus is hajcpus
  9. [actual] pedqpus is fackpus
  10. [actual] deqspus is babrpus and surypus
  11. [actual] deqspus is babrpus and surypus
  12. [actual] hajcpus is muxdpus
  13. [actual] fackpus is ducypus and lonppus
  14. [actual] fackpus is ducypus and lonppus
  15. [actual] ducypus is puctpus and sibrpus
  16. [actual] ducypus is puctpus and sibrpus
  17. [actual] muxdpus is pedqpus
  18. [actual] x is cefypus
  19. [actual] cefypus is hajcpus
  20. [actual] hajcpus is muxdpus
  21. [actual] muxdpus is pedqpus
  22. [actual] pedqpus is fackpus
  23. [actual] fackpus is ducypus and lonppus
  24. [actual] ducypus is puctpus and sibrpus
  25. [actual] puctpus is deqspus
  26. [actual] deqspus is babrpus and surypus
  27. [actual] x is cefypus
  28. [actual] x is cefypus
  29. [actual] cefypus is hajcpus
  30. [actual] hajcpus is muxdpus
  31. [actual] muxdpus is pedqpus
  32. [actual] pedqpus is fackpus
  33. [actual] fackpus is ducypus
  34. [actual] ducypus is puctpus
  35. [actual] puctpus is deqspus
  36. [actual] deqspus is babrpus
  37. [actual] x is babrpus
  38. [planning] x is babcpus or babrpus
  39. [actual] x is babrpus
  40. [actual] x is babrpus
  41. [actual] x is babrpus
  42. [planning] x is babcpus or babrpus
  43. [planning] x is babcpus or babrpus
  44. [actual] x is babcpus or babrpus
  45. [planning] x is babrpus
  46. [actual] cefypus is hajcpus
  47. [planning] x is hajcpus
  48. [actual] hajcpus is muxdpus
  49. [planning] x is muxdpus
  50. [actual] muxdpus is pedqpus
  51. [planning] x is pedqpus
  52. [actual] pedqpus is fackpus
  53. [planning] x is fackpus
  54. [actual] fackpus is ducypus
  55. [planning] x is ducypus
  56. [actual] ducypus is puctpus
  57. [planning] x is puctpus
  58. [actual] ducypus is puctpus
  59. [actual] ducypus is puctpus
  60. [actual] x is puctpus
  61. [actual] puctpus is deqspus
  62. [actual] x is deqspus
  63. [actual] deqspus is babrpus
  64. [planning] x is babrpus
  65. [actual] x is babrpus
  66. [actual] x is babrpus
  67. [planning] x is babcpus
  68. [planning] babrpus is true
  69. [actual] x is babrpus
  70. [actual] deqspus is babrpus and surypus
  71. [actual] deqspus is babrpus and surypus
  72. [actual] deqspus is both

=== 开始标准化和解析节点 ===
清洗后statements数: 72
标准化后节点数: 70
过滤掉的无效实体数: 2
标准化后的节点:
  1. [planning] x → babcpus (原始: x is babcpus)
  2. [planning] x → babrpus (原始: x is babrpus)
  3. [actual] x → relmpus (原始: x is relmpus)
  4. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  5. [actual] x → babgpus (原始: x is babgpus)
  6. [planning] x → babgpus (原始: x is babgpus)
  7. [actual] puctpus → deqspus (原始: puctpus is deqspus)
  8. [actual] cefypus → hajcpus (原始: cefypus is hajcpus)
  9. [actual] pedqpus → fackpus (原始: pedqpus is fackpus)
  10. [actual] deqspus → babrpus and surypus (原始: deqspus is babrpus and surypus)
  11. [actual] deqspus → babrpus and surypus (原始: deqspus is babrpus and surypus)
  12. [actual] hajcpus → muxdpus (原始: hajcpus is muxdpus)
  13. [actual] fackpus → ducypus and lonppus (原始: fackpus is ducypus and lonppus)
  14. [actual] fackpus → ducypus and lonppus (原始: fackpus is ducypus and lonppus)
  15. [actual] ducypus → puctpus and sibrpus (原始: ducypus is puctpus and sibrpus)
  16. [actual] ducypus → puctpus and sibrpus (原始: ducypus is puctpus and sibrpus)
  17. [actual] muxdpus → pedqpus (原始: muxdpus is pedqpus)
  18. [actual] x → cefypus (原始: x is cefypus)
  19. [actual] cefypus → hajcpus (原始: cefypus is hajcpus)
  20. [actual] hajcpus → muxdpus (原始: hajcpus is muxdpus)
  21. [actual] muxdpus → pedqpus (原始: muxdpus is pedqpus)
  22. [actual] pedqpus → fackpus (原始: pedqpus is fackpus)
  23. [actual] fackpus → ducypus and lonppus (原始: fackpus is ducypus and lonppus)
  24. [actual] ducypus → puctpus and sibrpus (原始: ducypus is puctpus and sibrpus)
  25. [actual] puctpus → deqspus (原始: puctpus is deqspus)
  26. [actual] deqspus → babrpus and surypus (原始: deqspus is babrpus and surypus)
  27. [actual] x → cefypus (原始: x is cefypus)
  28. [actual] x → cefypus (原始: x is cefypus)
  29. [actual] cefypus → hajcpus (原始: cefypus is hajcpus)
  30. [actual] hajcpus → muxdpus (原始: hajcpus is muxdpus)
  31. [actual] muxdpus → pedqpus (原始: muxdpus is pedqpus)
  32. [actual] pedqpus → fackpus (原始: pedqpus is fackpus)
  33. [actual] fackpus → ducypus (原始: fackpus is ducypus)
  34. [actual] ducypus → puctpus (原始: ducypus is puctpus)
  35. [actual] puctpus → deqspus (原始: puctpus is deqspus)
  36. [actual] deqspus → babrpus (原始: deqspus is babrpus)
  37. [actual] x → babrpus (原始: x is babrpus)
  38. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  39. [actual] x → babrpus (原始: x is babrpus)
  40. [actual] x → babrpus (原始: x is babrpus)
  41. [actual] x → babrpus (原始: x is babrpus)
  42. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  43. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  44. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  45. [planning] x → babrpus (原始: x is babrpus)
  46. [actual] cefypus → hajcpus (原始: cefypus is hajcpus)
  47. [planning] x → hajcpus (原始: x is hajcpus)
  48. [actual] hajcpus → muxdpus (原始: hajcpus is muxdpus)
  49. [planning] x → muxdpus (原始: x is muxdpus)
  50. [actual] muxdpus → pedqpus (原始: muxdpus is pedqpus)
  51. [planning] x → pedqpus (原始: x is pedqpus)
  52. [actual] pedqpus → fackpus (原始: pedqpus is fackpus)
  53. [planning] x → fackpus (原始: x is fackpus)
  54. [actual] fackpus → ducypus (原始: fackpus is ducypus)
  55. [planning] x → ducypus (原始: x is ducypus)
  56. [actual] ducypus → puctpus (原始: ducypus is puctpus)
  57. [planning] x → puctpus (原始: x is puctpus)
  58. [actual] ducypus → puctpus (原始: ducypus is puctpus)
  59. [actual] ducypus → puctpus (原始: ducypus is puctpus)
  60. [actual] x → puctpus (原始: x is puctpus)
  61. [actual] puctpus → deqspus (原始: puctpus is deqspus)
  62. [actual] x → deqspus (原始: x is deqspus)
  63. [actual] deqspus → babrpus (原始: deqspus is babrpus)
  64. [planning] x → babrpus (原始: x is babrpus)
  65. [actual] x → babrpus (原始: x is babrpus)
  66. [actual] x → babrpus (原始: x is babrpus)
  67. [planning] x → babcpus (原始: x is babcpus)
  68. [actual] x → babrpus (原始: x is babrpus)
  69. [actual] deqspus → babrpus and surypus (原始: deqspus is babrpus and surypus)
  70. [actual] deqspus → babrpus and surypus (原始: deqspus is babrpus and surypus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 12
[后处理] 加载LoG图，包含 12 个节点
  LoG节点 0: x is babcpus or babrpus (规则: DI, 深度: 1)
  LoG节点 1: x is babrpus (规则: MP, 深度: 2)
  LoG节点 2: x is ducypus (规则: MP, 深度: 3)
  LoG节点 3: ducypus is babrpus (规则: CE, 深度: 3)
  LoG节点 4: x is pedqpus (规则: MP, 深度: 4)
  LoG节点 5: pedqpus is ducypus (规则: CE, 深度: 4)
  LoG节点 6: ducypus is babrpus and surypus (规则: MP, 深度: 4)
  LoG节点 7: x is hajcpus (规则: MP, 深度: 5)
  LoG节点 8: hajcpus is pedqpus (规则: MP, 深度: 5)
  LoG节点 9: pedqpus is ducypus and lonppus (规则: MP, 深度: 5)
  LoG节点 10: ducypus is puctpus (规则: CE, 深度: 5)
  LoG节点 11: puctpus is babrpus and surypus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 70
   - 初始条件数: 9
   - LoG图节点数: 12

📋 初始条件列表:
    1. puctpus is deqspus
    2. cefypus is hajcpus
    3. pedqpus is fackpus
    4. deqspus is babrpus and surypus
    5. hajcpus is muxdpus
    6. fackpus is ducypus and lonppus
    7. ducypus is puctpus and sibrpus
    8. muxdpus is pedqpus
    9. x is cefypus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 9 个前提节点

🔍 开始处理actual节点...

   节点 1: x is relmpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 2: relmpus is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 3: x is babgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is relmpus → relmpus is babgpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is relmpus
  - 前提: relmpus is babgpus

   节点 4: puctpus is deqspus
      ↻ 重复节点，计数: 2

   节点 5: cefypus is hajcpus
      ↻ 重复节点，计数: 2

   节点 6: pedqpus is fackpus
      ↻ 重复节点，计数: 2

   节点 7: deqspus is babrpus and surypus
      ↻ 重复节点，计数: 2

   节点 8: deqspus is babrpus and surypus
      ↻ 重复节点，计数: 3

   节点 9: hajcpus is muxdpus
      ↻ 重复节点，计数: 2

   节点 10: fackpus is ducypus and lonppus
      ↻ 重复节点，计数: 2

   节点 11: fackpus is ducypus and lonppus
      ↻ 重复节点，计数: 3

   节点 12: ducypus is puctpus and sibrpus
      ↻ 重复节点，计数: 2

   节点 13: ducypus is puctpus and sibrpus
      ↻ 重复节点，计数: 3

   节点 14: muxdpus is pedqpus
      ↻ 重复节点，计数: 2

   节点 15: x is cefypus
      ↻ 重复节点，计数: 2

   节点 16: cefypus is hajcpus
      ↻ 重复节点，计数: 3

   节点 17: hajcpus is muxdpus
      ↻ 重复节点，计数: 3

   节点 18: muxdpus is pedqpus
      ↻ 重复节点，计数: 3

   节点 19: pedqpus is fackpus
      ↻ 重复节点，计数: 3

   节点 20: fackpus is ducypus and lonppus
      ↻ 重复节点，计数: 4

   节点 21: ducypus is puctpus and sibrpus
      ↻ 重复节点，计数: 4

   节点 22: puctpus is deqspus
      ↻ 重复节点，计数: 3

   节点 23: deqspus is babrpus and surypus
      ↻ 重复节点，计数: 4

   节点 24: x is cefypus
      ↻ 重复节点，计数: 3

   节点 25: x is cefypus
      ↻ 重复节点，计数: 4

   节点 26: cefypus is hajcpus
      ↻ 重复节点，计数: 4

   节点 27: hajcpus is muxdpus
      ↻ 重复节点，计数: 4

   节点 28: muxdpus is pedqpus
      ↻ 重复节点，计数: 4

   节点 29: pedqpus is fackpus
      ↻ 重复节点，计数: 4

   节点 30: fackpus is ducypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: fackpus is ducypus and lonppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: fackpus is ducypus and lonppus

   节点 31: ducypus is puctpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: ducypus is puctpus
      ✅ 验证成功 + LoG匹配

   节点 32: puctpus is deqspus
      ↻ 重复节点，计数: 4

   节点 33: deqspus is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: deqspus is babrpus and surypus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: deqspus is babrpus and surypus

   节点 34: x is babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babrpus
[子树点亮]     └─ 点亮依赖节点: x is ducypus (深度3)
[子树点亮]     └─ 点亮依赖节点: ducypus is babrpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is pedqpus (深度4)
[子树点亮]     └─ 点亮依赖节点: pedqpus is ducypus (深度4)
[子树点亮]     └─ 点亮依赖节点: ducypus is babrpus and surypus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is hajcpus (深度5)
[子树点亮]     └─ 点亮依赖节点: hajcpus is pedqpus (深度5)
[子树点亮]     └─ 点亮依赖节点: pedqpus is ducypus and lonppus (深度5)
[子树点亮]     └─ 点亮依赖节点: puctpus is babrpus and surypus (深度5)
[后处理]   └─ 自动点亮依赖子树: 9 个节点
      ✅ 验证成功 + LoG匹配

   节点 35: x is babrpus
      ↻ 重复节点，计数: 2

   节点 36: x is babrpus
      ↻ 重复节点，计数: 3

   节点 37: x is babrpus
      ↻ 重复节点，计数: 4

   节点 38: x is babcpus or babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus or babrpus
      ✅ 验证成功 + LoG匹配

   节点 39: cefypus is hajcpus
      ↻ 重复节点，计数: 5

   节点 40: hajcpus is muxdpus
      ↻ 重复节点，计数: 5

   节点 41: muxdpus is pedqpus
      ↻ 重复节点，计数: 5

   节点 42: pedqpus is fackpus
      ↻ 重复节点，计数: 5

   节点 43: fackpus is ducypus
      ↻ 重复节点，计数: 2

   节点 44: ducypus is puctpus
      ↻ 重复节点，计数: 2

   节点 45: ducypus is puctpus
      ↻ 重复节点，计数: 3

   节点 46: ducypus is puctpus
      ↻ 重复节点，计数: 4

   节点 47: x is puctpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is cefypus → cefypus is puctpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is cefypus
  - 前提: cefypus is hajcpus
  - 前提: hajcpus is muxdpus
  - 前提: muxdpus is pedqpus
  - 前提: pedqpus is fackpus
  - 前提: fackpus is ducypus
  - 前提: ducypus is puctpus

   节点 48: puctpus is deqspus
      ↻ 重复节点，计数: 5

   节点 49: x is deqspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is cefypus → cefypus is deqspus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is cefypus
  - 前提: cefypus is hajcpus
  - 前提: hajcpus is muxdpus
  - 前提: muxdpus is pedqpus
  - 前提: pedqpus is fackpus
  - 前提: fackpus is ducypus
  - 前提: ducypus is puctpus
  - 前提: puctpus is deqspus

   节点 50: deqspus is babrpus
      ↻ 重复节点，计数: 2

   节点 51: x is babrpus
      ↻ 重复节点，计数: 5

   节点 52: x is babrpus
      ↻ 重复节点，计数: 6

   节点 53: x is babrpus
      ↻ 重复节点，计数: 7

   节点 54: deqspus is babrpus and surypus
      ↻ 重复节点，计数: 5

   节点 55: deqspus is babrpus and surypus
      ↻ 重复节点，计数: 6

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 55
   - 新增节点: 10
   - 更新已存在节点: 45
   - 点亮的LoG节点: 12

🎯 推理质量统计:
   - 完美推理: 5 (节点正确 + 路径正确)
   - 部分推理: 5 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 12节点, 9前提, 复杂度1-9

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 19
   - 前提节点: 9
   - 推理节点: 8
   - 幻觉节点: 2
   - 点亮LoG节点: 12

❌ 幻觉节点详情:
   - x is relmpus (出现1次)
   - relmpus is babgpus (出现1次)

✅ 推理节点详情:
   🟡 x is babgpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus', 'relmpus is babgpus']
   🟢 fackpus is ducypus (出现2次, 质量:perfect)
   🟢 ducypus is puctpus (出现4次, 质量:perfect)
   🟢 deqspus is babrpus (出现2次, 质量:perfect)
   🟡 x is babrpus (出现7次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟡 x is babcpus or babrpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟡 x is puctpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟡 x is deqspus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']

🔥 点亮的LoG节点:
   - ducypus is babrpus and surypus
   - hajcpus is pedqpus
   - x is babcpus or babrpus
   - ducypus is puctpus
   - x is hajcpus
   - pedqpus is ducypus
   - x is pedqpus
   - pedqpus is ducypus and lonppus
   - x is ducypus
   - x is babrpus
   - puctpus is babrpus and surypus
   - ducypus is babrpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus or babrpus (第5层)
   节点Coverage: 12/12 = 100.00%
   前提条件Coverage: 9/9 = 100.00%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 2/10 = 20.00%
   可推导节点: 8/10
   Strict Error Rate: 7/10 = 70.00%
   严格有效节点: 3/10

   详细分析:
     完美推理: 5 (50.00%)
     部分推理: 5 (50.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 7/50
================================================================================
记录索引: 6
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_6.json
✅ 使用缓存结果:
   - 句子数: 121
   - 提取的语句数: 130
   - 初始条件数: 13

=== Statement提取完成 ===
总句子数: 121
成功提取: 120
失败提取: 1
总statements数: 130

=== 开始清洗Statement格式 ===
原始statements数: 130
清洗后statements数: 122
过滤掉的statements数: 8
清洗后的statements:
  1. [planning] x is babcpus and babrpus and babspus
  2. [planning] x is babcpus
  3. [planning] x is babrpus
  4. [planning] x is babspus
  5. [actual] hahkpus is vodwpus and wepfpus
  6. [actual] hahkpus is coyxpus
  7. [actual] hahkpus is babspus and rowmpus
  8. [actual] tolvpus is hahkpus and tokwpus
  9. [actual] x is najcpus
  10. [actual] najcpus is xayxpus and jescpus
  11. [actual] vipmpus is puywpus
  12. [actual] coyxpus is babcpus
  13. [actual] hahkpus is babrpus and padmpus
  14. [actual] xayxpus is magjpus and rafdpus
  15. [actual] puywpus is fapmpus
  16. [actual] magjpus is vipmpus
  17. [actual] fapmpus is tolvpus
  18. [planning] x is babcpus
  19. [planning] x is babrpus
  20. [planning] x is babspus
  21. [actual] x is najcpus
  22. [actual] najcpus is xayxpus and jescpus
  23. [actual] x is xayxpus and jescpus
  24. [actual] coyxpus is babcpus
  25. [planning] x is coyxpus
  26. [actual] tolvpus is hahkpus and tokwpus
  27. [actual] tolvpus is hahkpus
  28. [actual] fapmpus is tolvpus
  29. [actual] puywpus is fapmpus
  30. [actual] vipmpus is puywpus
  31. [actual] magjpus is vipmpus
  32. [actual] xayxpus is magjpus and rafdpus
  33. [actual] x is xayxpus
  34. [actual] x is magjpus
  35. [actual] magjpus is vipmpus
  36. [actual] vipmpus is puywpus
  37. [actual] puywpus is fapmpus
  38. [actual] fapmpus is tolvpus
  39. [actual] tolvpus is hahkpus
  40. [actual] hahkpus is coyxpus
  41. [actual] coyxpus is babcpus
  42. [actual] xayxpus is magjpus
  43. [actual] magjpus is vipmpus
  44. [actual] vipmpus is puywpus
  45. [actual] puywpus is fapmpus
  46. [actual] fapmpus is tolvpus
  47. [actual] tolvpus is hahkpus
  48. [actual] hahkpus is coyxpus
  49. [actual] coyxpus is babcpus
  50. [actual] x is babcpus
  51. [actual] hahkpus is babrpus and padmpus
  52. [actual] x is hahkpus
  53. [actual] hahkpus is babrpus
  54. [planning] x is babrpus
  55. [actual] x is tolvpus
  56. [actual] fapmpus is tolvpus
  57. [planning] x is tolvpus
  58. [planning] x is fapmpus
  59. [actual] x is xayxpus
  60. [actual] xayxpus is magjpus
  61. [actual] magjpus is vipmpus
  62. [actual] vipmpus is puywpus
  63. [actual] puywpus is fapmpus
  64. [actual] fapmpus is tolvpus
  65. [actual] tolvpus is hahkpus
  66. [actual] tolvpus is hahkpus
  67. [actual] fapmpus is tolvpus
  68. [planning] fapmpus is hahkpus
  69. [planning] xayxpus is magjpus
  70. [planning] x is magjpus
  71. [actual] x is tolvpus
  72. [actual] x is fapmpus
  73. [planning] x is tolvpus
  74. [actual] x is xayxpus
  75. [actual] xayxpus is magjpus
  76. [actual] x is magjpus
  77. [actual] magjpus is vipmpus
  78. [planning] x is vipmpus
  79. [actual] vipmpus is puywpus
  80. [actual] x is puywpus
  81. [actual] puywpus is fapmpus
  82. [planning] x is fapmpus
  83. [actual] fapmpus is tolvpus
  84. [actual] x is tolvpus
  85. [actual] tolvpus is hahkpus
  86. [planning] x is hahkpus
  87. [actual] hahkpus is babrpus
  88. [actual] x is babrpus
  89. [actual] x is babrpus
  90. [actual] hahkpus is babspus and rowmpus
  91. [actual] x is hahkpus
  92. [actual] x is babspus
  93. [actual] x is babcpus and babrpus and babspus
  94. [actual] x is hahkpus
  95. [actual] hahkpus is coyxpus
  96. [actual] hahkpus is babcpus
  97. [actual] coyxpus is babcpus
  98. [actual] x is hahkpus
  99. [actual] x is babcpus
  100. [planning] x is babcpus and babrpus and babspus
  101. [actual] tolvpus is hahkpus and tokwpus
  102. [planning] tolvpus is hahkpus and tokwpus
  103. [planning] tolvpus is hahkpus and tokwpus
  104. [actual] tolvpus is hahkpus
  105. [actual] tolvpus is hahkpus
  106. [actual] tolvpus is tokwpus
  107. [actual] tolvpus is hahkpus and tokwpus
  108. [planning] tolvpus is hahkpus
  109. [planning] tolvpus is tokwpus
  110. [actual] tolvpus is hahkpus
  111. [actual] tolvpus is tokwpus
  112. [actual] x is tolvpus
  113. [actual] tolvpus is hahkpus
  114. [actual] x is hahkpus
  115. [actual] hahkpus is coyxpus
  116. [actual] x is coyxpus
  117. [actual] coyxpus is babcpus
  118. [actual] x is babcpus
  119. [actual] hahkpus is babrpus
  120. [actual] x is babrpus
  121. [actual] hahkpus is babspus
  122. [actual] x is babspus

=== 开始标准化和解析节点 ===
清洗后statements数: 122
标准化后节点数: 122
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babcpus and babrpus and babspus (原始: x is babcpus and babrpus and babspus)
  2. [planning] x → babcpus (原始: x is babcpus)
  3. [planning] x → babrpus (原始: x is babrpus)
  4. [planning] x → babspus (原始: x is babspus)
  5. [actual] hahkpus → vodwpus and wepfpus (原始: hahkpus is vodwpus and wepfpus)
  6. [actual] hahkpus → coyxpus (原始: hahkpus is coyxpus)
  7. [actual] hahkpus → babspus and rowmpus (原始: hahkpus is babspus and rowmpus)
  8. [actual] tolvpus → hahkpus and tokwpus (原始: tolvpus is hahkpus and tokwpus)
  9. [actual] x → najcpus (原始: x is najcpus)
  10. [actual] najcpus → xayxpus and jescpus (原始: najcpus is xayxpus and jescpus)
  11. [actual] vipmpus → puywpus (原始: vipmpus is puywpus)
  12. [actual] coyxpus → babcpus (原始: coyxpus is babcpus)
  13. [actual] hahkpus → babrpus and padmpus (原始: hahkpus is babrpus and padmpus)
  14. [actual] xayxpus → magjpus and rafdpus (原始: xayxpus is magjpus and rafdpus)
  15. [actual] puywpus → fapmpus (原始: puywpus is fapmpus)
  16. [actual] magjpus → vipmpus (原始: magjpus is vipmpus)
  17. [actual] fapmpus → tolvpus (原始: fapmpus is tolvpus)
  18. [planning] x → babcpus (原始: x is babcpus)
  19. [planning] x → babrpus (原始: x is babrpus)
  20. [planning] x → babspus (原始: x is babspus)
  21. [actual] x → najcpus (原始: x is najcpus)
  22. [actual] najcpus → xayxpus and jescpus (原始: najcpus is xayxpus and jescpus)
  23. [actual] x → xayxpus and jescpus (原始: x is xayxpus and jescpus)
  24. [actual] coyxpus → babcpus (原始: coyxpus is babcpus)
  25. [planning] x → coyxpus (原始: x is coyxpus)
  26. [actual] tolvpus → hahkpus and tokwpus (原始: tolvpus is hahkpus and tokwpus)
  27. [actual] tolvpus → hahkpus (原始: tolvpus is hahkpus)
  28. [actual] fapmpus → tolvpus (原始: fapmpus is tolvpus)
  29. [actual] puywpus → fapmpus (原始: puywpus is fapmpus)
  30. [actual] vipmpus → puywpus (原始: vipmpus is puywpus)
  31. [actual] magjpus → vipmpus (原始: magjpus is vipmpus)
  32. [actual] xayxpus → magjpus and rafdpus (原始: xayxpus is magjpus and rafdpus)
  33. [actual] x → xayxpus (原始: x is xayxpus)
  34. [actual] x → magjpus (原始: x is magjpus)
  35. [actual] magjpus → vipmpus (原始: magjpus is vipmpus)
  36. [actual] vipmpus → puywpus (原始: vipmpus is puywpus)
  37. [actual] puywpus → fapmpus (原始: puywpus is fapmpus)
  38. [actual] fapmpus → tolvpus (原始: fapmpus is tolvpus)
  39. [actual] tolvpus → hahkpus (原始: tolvpus is hahkpus)
  40. [actual] hahkpus → coyxpus (原始: hahkpus is coyxpus)
  41. [actual] coyxpus → babcpus (原始: coyxpus is babcpus)
  42. [actual] xayxpus → magjpus (原始: xayxpus is magjpus)
  43. [actual] magjpus → vipmpus (原始: magjpus is vipmpus)
  44. [actual] vipmpus → puywpus (原始: vipmpus is puywpus)
  45. [actual] puywpus → fapmpus (原始: puywpus is fapmpus)
  46. [actual] fapmpus → tolvpus (原始: fapmpus is tolvpus)
  47. [actual] tolvpus → hahkpus (原始: tolvpus is hahkpus)
  48. [actual] hahkpus → coyxpus (原始: hahkpus is coyxpus)
  49. [actual] coyxpus → babcpus (原始: coyxpus is babcpus)
  50. [actual] x → babcpus (原始: x is babcpus)
  51. [actual] hahkpus → babrpus and padmpus (原始: hahkpus is babrpus and padmpus)
  52. [actual] x → hahkpus (原始: x is hahkpus)
  53. [actual] hahkpus → babrpus (原始: hahkpus is babrpus)
  54. [planning] x → babrpus (原始: x is babrpus)
  55. [actual] x → tolvpus (原始: x is tolvpus)
  56. [actual] fapmpus → tolvpus (原始: fapmpus is tolvpus)
  57. [planning] x → tolvpus (原始: x is tolvpus)
  58. [planning] x → fapmpus (原始: x is fapmpus)
  59. [actual] x → xayxpus (原始: x is xayxpus)
  60. [actual] xayxpus → magjpus (原始: xayxpus is magjpus)
  61. [actual] magjpus → vipmpus (原始: magjpus is vipmpus)
  62. [actual] vipmpus → puywpus (原始: vipmpus is puywpus)
  63. [actual] puywpus → fapmpus (原始: puywpus is fapmpus)
  64. [actual] fapmpus → tolvpus (原始: fapmpus is tolvpus)
  65. [actual] tolvpus → hahkpus (原始: tolvpus is hahkpus)
  66. [actual] tolvpus → hahkpus (原始: tolvpus is hahkpus)
  67. [actual] fapmpus → tolvpus (原始: fapmpus is tolvpus)
  68. [planning] fapmpus → hahkpus (原始: fapmpus is hahkpus)
  69. [planning] xayxpus → magjpus (原始: xayxpus is magjpus)
  70. [planning] x → magjpus (原始: x is magjpus)
  71. [actual] x → tolvpus (原始: x is tolvpus)
  72. [actual] x → fapmpus (原始: x is fapmpus)
  73. [planning] x → tolvpus (原始: x is tolvpus)
  74. [actual] x → xayxpus (原始: x is xayxpus)
  75. [actual] xayxpus → magjpus (原始: xayxpus is magjpus)
  76. [actual] x → magjpus (原始: x is magjpus)
  77. [actual] magjpus → vipmpus (原始: magjpus is vipmpus)
  78. [planning] x → vipmpus (原始: x is vipmpus)
  79. [actual] vipmpus → puywpus (原始: vipmpus is puywpus)
  80. [actual] x → puywpus (原始: x is puywpus)
  81. [actual] puywpus → fapmpus (原始: puywpus is fapmpus)
  82. [planning] x → fapmpus (原始: x is fapmpus)
  83. [actual] fapmpus → tolvpus (原始: fapmpus is tolvpus)
  84. [actual] x → tolvpus (原始: x is tolvpus)
  85. [actual] tolvpus → hahkpus (原始: tolvpus is hahkpus)
  86. [planning] x → hahkpus (原始: x is hahkpus)
  87. [actual] hahkpus → babrpus (原始: hahkpus is babrpus)
  88. [actual] x → babrpus (原始: x is babrpus)
  89. [actual] x → babrpus (原始: x is babrpus)
  90. [actual] hahkpus → babspus and rowmpus (原始: hahkpus is babspus and rowmpus)
  91. [actual] x → hahkpus (原始: x is hahkpus)
  92. [actual] x → babspus (原始: x is babspus)
  93. [actual] x → babcpus and babrpus and babspus (原始: x is babcpus and babrpus and babspus)
  94. [actual] x → hahkpus (原始: x is hahkpus)
  95. [actual] hahkpus → coyxpus (原始: hahkpus is coyxpus)
  96. [actual] hahkpus → babcpus (原始: hahkpus is babcpus)
  97. [actual] coyxpus → babcpus (原始: coyxpus is babcpus)
  98. [actual] x → hahkpus (原始: x is hahkpus)
  99. [actual] x → babcpus (原始: x is babcpus)
  100. [planning] x → babcpus and babrpus and babspus (原始: x is babcpus and babrpus and babspus)
  101. [actual] tolvpus → hahkpus and tokwpus (原始: tolvpus is hahkpus and tokwpus)
  102. [planning] tolvpus → hahkpus and tokwpus (原始: tolvpus is hahkpus and tokwpus)
  103. [planning] tolvpus → hahkpus and tokwpus (原始: tolvpus is hahkpus and tokwpus)
  104. [actual] tolvpus → hahkpus (原始: tolvpus is hahkpus)
  105. [actual] tolvpus → hahkpus (原始: tolvpus is hahkpus)
  106. [actual] tolvpus → tokwpus (原始: tolvpus is tokwpus)
  107. [actual] tolvpus → hahkpus and tokwpus (原始: tolvpus is hahkpus and tokwpus)
  108. [planning] tolvpus → hahkpus (原始: tolvpus is hahkpus)
  109. [planning] tolvpus → tokwpus (原始: tolvpus is tokwpus)
  110. [actual] tolvpus → hahkpus (原始: tolvpus is hahkpus)
  111. [actual] tolvpus → tokwpus (原始: tolvpus is tokwpus)
  112. [actual] x → tolvpus (原始: x is tolvpus)
  113. [actual] tolvpus → hahkpus (原始: tolvpus is hahkpus)
  114. [actual] x → hahkpus (原始: x is hahkpus)
  115. [actual] hahkpus → coyxpus (原始: hahkpus is coyxpus)
  116. [actual] x → coyxpus (原始: x is coyxpus)
  117. [actual] coyxpus → babcpus (原始: coyxpus is babcpus)
  118. [actual] x → babcpus (原始: x is babcpus)
  119. [actual] hahkpus → babrpus (原始: hahkpus is babrpus)
  120. [actual] x → babrpus (原始: x is babrpus)
  121. [actual] hahkpus → babspus (原始: hahkpus is babspus)
  122. [actual] x → babspus (原始: x is babspus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 17
[后处理] 加载LoG图，包含 17 个节点
  LoG节点 0: x is babcpus and babrpus and babspus (规则: CE, 深度: 1)
  LoG节点 1: x is babcpus and babrpus and babspus and vodwpus (规则: MP, 深度: 2)
  LoG节点 2: x is puywpus (规则: MP, 深度: 3)
  LoG节点 3: puywpus is babcpus and babrpus and babspus and vodwpus (规则: MP, 深度: 3)
  LoG节点 4: x is xayxpus (规则: CE, 深度: 4)
  LoG节点 5: xayxpus is puywpus (规则: MP, 深度: 4)
  LoG节点 6: puywpus is hahkpus (规则: MP, 深度: 4)
  LoG节点 7: hahkpus is babcpus and babrpus and babspus and vodwpus (规则: CI, 深度: 4)
  LoG节点 8: x is xayxpus and jescpus (规则: MP, 深度: 5)
  LoG节点 9: xayxpus is magjpus (规则: CE, 深度: 5)
  LoG节点 10: magjpus is puywpus (规则: MP, 深度: 5)
  LoG节点 11: puywpus is tolvpus (规则: MP, 深度: 5)
  LoG节点 12: tolvpus is hahkpus (规则: CE, 深度: 5)
  LoG节点 13: hahkpus is babcpus (规则: MP, 深度: 5)
  LoG节点 14: hahkpus is babrpus (规则: CE, 深度: 5)
  LoG节点 15: hahkpus is babspus (规则: CE, 深度: 5)
  LoG节点 16: hahkpus is vodwpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 122
   - 初始条件数: 13
   - LoG图节点数: 17

📋 初始条件列表:
    1. hahkpus is vodwpus and wepfpus
    2. hahkpus is coyxpus
    3. hahkpus is babspus and rowmpus
    4. tolvpus is hahkpus and tokwpus
    5. x is najcpus
    6. najcpus is xayxpus and jescpus
    7. vipmpus is puywpus
    8. coyxpus is babcpus
    9. hahkpus is babrpus and padmpus
   10. xayxpus is magjpus and rafdpus
   11. puywpus is fapmpus
   12. magjpus is vipmpus
   13. fapmpus is tolvpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 13 个前提节点

🔍 开始处理actual节点...

   节点 1: hahkpus is vodwpus and wepfpus
      ↻ 重复节点，计数: 2

   节点 2: hahkpus is coyxpus
      ↻ 重复节点，计数: 2

   节点 3: hahkpus is babspus and rowmpus
      ↻ 重复节点，计数: 2

   节点 4: tolvpus is hahkpus and tokwpus
      ↻ 重复节点，计数: 2

   节点 5: x is najcpus
      ↻ 重复节点，计数: 2

   节点 6: najcpus is xayxpus and jescpus
      ↻ 重复节点，计数: 2

   节点 7: vipmpus is puywpus
      ↻ 重复节点，计数: 2

   节点 8: coyxpus is babcpus
      ↻ 重复节点，计数: 2

   节点 9: hahkpus is babrpus and padmpus
      ↻ 重复节点，计数: 2

   节点 10: xayxpus is magjpus and rafdpus
      ↻ 重复节点，计数: 2

   节点 11: puywpus is fapmpus
      ↻ 重复节点，计数: 2

   节点 12: magjpus is vipmpus
      ↻ 重复节点，计数: 2

   节点 13: fapmpus is tolvpus
      ↻ 重复节点，计数: 2

   节点 14: x is najcpus
      ↻ 重复节点，计数: 3

   节点 15: najcpus is xayxpus and jescpus
      ↻ 重复节点，计数: 3

   节点 16: x is xayxpus and jescpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is xayxpus and jescpus
      ✅ 验证成功 + LoG匹配

   节点 17: coyxpus is babcpus
      ↻ 重复节点，计数: 3

   节点 18: tolvpus is hahkpus and tokwpus
      ↻ 重复节点，计数: 3

   节点 19: tolvpus is hahkpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: tolvpus is hahkpus
      ✅ 验证成功 + LoG匹配

   节点 20: fapmpus is tolvpus
      ↻ 重复节点，计数: 3

   节点 21: puywpus is fapmpus
      ↻ 重复节点，计数: 3

   节点 22: vipmpus is puywpus
      ↻ 重复节点，计数: 3

   节点 23: magjpus is vipmpus
      ↻ 重复节点，计数: 3

   节点 24: xayxpus is magjpus and rafdpus
      ↻ 重复节点，计数: 3

   节点 25: x is xayxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is xayxpus
      ✅ 验证成功 + LoG匹配

   节点 26: x is magjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is najcpus → najcpus is magjpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is najcpus
  - 前提: najcpus is xayxpus and jescpus
  - 前提: xayxpus is magjpus and rafdpus
  ✓ 点亮LoG节点: xayxpus is magjpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 27: magjpus is vipmpus
      ↻ 重复节点，计数: 4

   节点 28: vipmpus is puywpus
      ↻ 重复节点，计数: 4

   节点 29: puywpus is fapmpus
      ↻ 重复节点，计数: 4

   节点 30: fapmpus is tolvpus
      ↻ 重复节点，计数: 4

   节点 31: tolvpus is hahkpus
      ↻ 重复节点，计数: 2

   节点 32: hahkpus is coyxpus
      ↻ 重复节点，计数: 3

   节点 33: coyxpus is babcpus
      ↻ 重复节点，计数: 4

   节点 34: xayxpus is magjpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 35: magjpus is vipmpus
      ↻ 重复节点，计数: 5

   节点 36: vipmpus is puywpus
      ↻ 重复节点，计数: 5

   节点 37: puywpus is fapmpus
      ↻ 重复节点，计数: 5

   节点 38: fapmpus is tolvpus
      ↻ 重复节点，计数: 5

   节点 39: tolvpus is hahkpus
      ↻ 重复节点，计数: 3

   节点 40: hahkpus is coyxpus
      ↻ 重复节点，计数: 4

   节点 41: coyxpus is babcpus
      ↻ 重复节点，计数: 5

   节点 42: x is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is najcpus → najcpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 10 个前提条件:
  - 前提: x is najcpus
  - 前提: najcpus is xayxpus and jescpus
  - 前提: xayxpus is magjpus
  - 前提: magjpus is vipmpus
  - 前提: vipmpus is puywpus
  - 前提: puywpus is fapmpus
  - 前提: fapmpus is tolvpus
  - 前提: tolvpus is hahkpus
  - 前提: hahkpus is coyxpus
  - 前提: coyxpus is babcpus
  ✓ 点亮LoG节点: x is puywpus
[子树点亮]     └─ 点亮依赖节点: xayxpus is puywpus (深度4)
[子树点亮]     └─ 点亮依赖节点: magjpus is puywpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
  ✓ 点亮LoG节点: puywpus is hahkpus
[子树点亮]     └─ 点亮依赖节点: puywpus is tolvpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
  ✓ 点亮LoG节点: hahkpus is babcpus
[后处理] 通过推理轨迹额外点亮了 3 个LoG节点

   节点 43: hahkpus is babrpus and padmpus
      ↻ 重复节点，计数: 3

   节点 44: x is hahkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is najcpus → najcpus is hahkpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is najcpus
  - 前提: najcpus is xayxpus and jescpus
  - 前提: xayxpus is magjpus
  - 前提: magjpus is vipmpus
  - 前提: vipmpus is puywpus
  - 前提: puywpus is fapmpus
  - 前提: fapmpus is tolvpus
  - 前提: tolvpus is hahkpus

   节点 45: hahkpus is babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: hahkpus is babrpus
      ✅ 验证成功 + LoG匹配

   节点 46: x is tolvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is najcpus → najcpus is tolvpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is najcpus
  - 前提: najcpus is xayxpus and jescpus
  - 前提: xayxpus is magjpus
  - 前提: magjpus is vipmpus
  - 前提: vipmpus is puywpus
  - 前提: puywpus is fapmpus
  - 前提: fapmpus is tolvpus

   节点 47: fapmpus is tolvpus
      ↻ 重复节点，计数: 6

   节点 48: x is xayxpus
      ↻ 重复节点，计数: 2

   节点 49: xayxpus is magjpus
      ↻ 重复节点，计数: 2

   节点 50: magjpus is vipmpus
      ↻ 重复节点，计数: 6

   节点 51: vipmpus is puywpus
      ↻ 重复节点，计数: 6

   节点 52: puywpus is fapmpus
      ↻ 重复节点，计数: 6

   节点 53: fapmpus is tolvpus
      ↻ 重复节点，计数: 7

   节点 54: tolvpus is hahkpus
      ↻ 重复节点，计数: 4

   节点 55: tolvpus is hahkpus
      ↻ 重复节点，计数: 5

   节点 56: fapmpus is tolvpus
      ↻ 重复节点，计数: 8

   节点 57: x is tolvpus
      ↻ 重复节点，计数: 2

   节点 58: x is fapmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is najcpus → najcpus is fapmpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is najcpus
  - 前提: najcpus is xayxpus and jescpus
  - 前提: xayxpus is magjpus
  - 前提: magjpus is vipmpus
  - 前提: vipmpus is puywpus
  - 前提: puywpus is fapmpus

   节点 59: x is xayxpus
      ↻ 重复节点，计数: 3

   节点 60: xayxpus is magjpus
      ↻ 重复节点，计数: 3

   节点 61: x is magjpus
      ↻ 重复节点，计数: 2

   节点 62: magjpus is vipmpus
      ↻ 重复节点，计数: 7

   节点 63: vipmpus is puywpus
      ↻ 重复节点，计数: 7

   节点 64: x is puywpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 65: puywpus is fapmpus
      ↻ 重复节点，计数: 7

   节点 66: fapmpus is tolvpus
      ↻ 重复节点，计数: 9

   节点 67: x is tolvpus
      ↻ 重复节点，计数: 3

   节点 68: tolvpus is hahkpus
      ↻ 重复节点，计数: 6

   节点 69: hahkpus is babrpus
      ↻ 重复节点，计数: 2

   节点 70: x is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is najcpus → najcpus is babrpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is najcpus
  - 前提: najcpus is xayxpus and jescpus
  - 前提: xayxpus is magjpus
  - 前提: magjpus is vipmpus
  - 前提: vipmpus is puywpus
  - 前提: puywpus is fapmpus
  - 前提: fapmpus is tolvpus
  - 前提: tolvpus is hahkpus
  - 前提: hahkpus is babrpus

   节点 71: x is babrpus
      ↻ 重复节点，计数: 2

   节点 72: hahkpus is babspus and rowmpus
      ↻ 重复节点，计数: 3

   节点 73: x is hahkpus
      ↻ 重复节点，计数: 2

   节点 74: x is babspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is najcpus → najcpus is babspus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is najcpus
  - 前提: najcpus is xayxpus and jescpus
  - 前提: xayxpus is magjpus
  - 前提: magjpus is vipmpus
  - 前提: vipmpus is puywpus
  - 前提: puywpus is fapmpus
  - 前提: fapmpus is tolvpus
  - 前提: tolvpus is hahkpus
  - 前提: hahkpus is babspus and rowmpus
  ✓ 点亮LoG节点: hahkpus is babspus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 75: x is babcpus and babrpus and babspus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus and babrpus and babspus
[子树点亮]     └─ 点亮依赖节点: x is babcpus and babrpus and babspus and vodwpus (深度2)
[子树点亮]     └─ 点亮依赖节点: puywpus is babcpus and babrpus and babspus and vodwpus (深度3)
[子树点亮]     └─ 点亮依赖节点: hahkpus is babcpus and babrpus and babspus and vodwpus (深度4)
[子树点亮]     └─ 点亮依赖节点: hahkpus is vodwpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
      ✅ 验证成功 + LoG匹配

   节点 76: x is hahkpus
      ↻ 重复节点，计数: 3

   节点 77: hahkpus is coyxpus
      ↻ 重复节点，计数: 5

   节点 78: hahkpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 79: coyxpus is babcpus
      ↻ 重复节点，计数: 6

   节点 80: x is hahkpus
      ↻ 重复节点，计数: 4

   节点 81: x is babcpus
      ↻ 重复节点，计数: 2

   节点 82: tolvpus is hahkpus and tokwpus
      ↻ 重复节点，计数: 4

   节点 83: tolvpus is hahkpus
      ↻ 重复节点，计数: 7

   节点 84: tolvpus is hahkpus
      ↻ 重复节点，计数: 8

   节点 85: tolvpus is tokwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: tolvpus is hahkpus and tokwpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: tolvpus is hahkpus and tokwpus

   节点 86: tolvpus is hahkpus and tokwpus
      ↻ 重复节点，计数: 5

   节点 87: tolvpus is hahkpus
      ↻ 重复节点，计数: 9

   节点 88: tolvpus is tokwpus
      ↻ 重复节点，计数: 2

   节点 89: x is tolvpus
      ↻ 重复节点，计数: 4

   节点 90: tolvpus is hahkpus
      ↻ 重复节点，计数: 10

   节点 91: x is hahkpus
      ↻ 重复节点，计数: 5

   节点 92: hahkpus is coyxpus
      ↻ 重复节点，计数: 6

   节点 93: x is coyxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is najcpus → najcpus is coyxpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is najcpus
  - 前提: najcpus is xayxpus and jescpus
  - 前提: xayxpus is magjpus
  - 前提: magjpus is vipmpus
  - 前提: vipmpus is puywpus
  - 前提: puywpus is fapmpus
  - 前提: fapmpus is tolvpus
  - 前提: tolvpus is hahkpus
  - 前提: hahkpus is coyxpus

   节点 94: coyxpus is babcpus
      ↻ 重复节点，计数: 7

   节点 95: x is babcpus
      ↻ 重复节点，计数: 3

   节点 96: hahkpus is babrpus
      ↻ 重复节点，计数: 3

   节点 97: x is babrpus
      ↻ 重复节点，计数: 3

   节点 98: hahkpus is babspus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 99: x is babspus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 99
   - 新增节点: 18
   - 更新已存在节点: 81
   - 点亮的LoG节点: 17

🎯 推理质量统计:
   - 完美推理: 18 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 17节点, 13前提, 复杂度1-13

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 31
   - 前提节点: 13
   - 推理节点: 18
   - 幻觉节点: 0
   - 点亮LoG节点: 17

✅ 推理节点详情:
   🟢 x is xayxpus and jescpus (出现1次, 质量:perfect)
   🟢 tolvpus is hahkpus (出现10次, 质量:perfect)
   🟢 x is xayxpus (出现3次, 质量:perfect)
   🟢 x is magjpus (出现2次, 质量:perfect)
   🟢 xayxpus is magjpus (出现3次, 质量:perfect)
   🟢 x is babcpus (出现3次, 质量:perfect)
   🟢 x is hahkpus (出现5次, 质量:perfect)
   🟢 hahkpus is babrpus (出现3次, 质量:perfect)
   🟢 x is tolvpus (出现4次, 质量:perfect)
   🟢 x is fapmpus (出现1次, 质量:perfect)
   🟢 x is puywpus (出现1次, 质量:perfect)
   🟢 x is babrpus (出现3次, 质量:perfect)
   🟢 x is babspus (出现2次, 质量:perfect)
   🟢 x is babcpus and babrpus and babspus (出现1次, 质量:perfect)
   🟢 hahkpus is babcpus (出现1次, 质量:perfect)
   🟢 tolvpus is tokwpus (出现2次, 质量:perfect)
   🟢 x is coyxpus (出现1次, 质量:perfect)
   🟢 hahkpus is babspus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - hahkpus is babspus
   - hahkpus is babcpus
   - x is puywpus
   - puywpus is hahkpus
   - xayxpus is puywpus
   - tolvpus is hahkpus
   - magjpus is puywpus
   - x is babcpus and babrpus and babspus and vodwpus
   - x is babcpus and babrpus and babspus
   - x is xayxpus
   - xayxpus is magjpus
   - puywpus is tolvpus
   - puywpus is babcpus and babrpus and babspus and vodwpus
   - hahkpus is vodwpus
   - hahkpus is babrpus
   - hahkpus is babcpus and babrpus and babspus and vodwpus
   - x is xayxpus and jescpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus and babrpus and babspus (第5层)
   节点Coverage: 17/17 = 100.00%
   前提条件Coverage: 13/13 = 100.00%
   各推理层点亮比例:
     第1层: 9/9 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/18 = 0.00%
   可推导节点: 18/18
   Strict Error Rate: 0/18 = 0.00%
   严格有效节点: 18/18

   详细分析:
     完美推理: 18 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 8/50
================================================================================
记录索引: 7
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_7.json
✅ 使用缓存结果:
   - 句子数: 148
   - 提取的语句数: 249
   - 初始条件数: 6

=== Statement提取完成 ===
总句子数: 148
成功提取: 148
失败提取: 0
总statements数: 249

=== 开始清洗Statement格式 ===
原始statements数: 249
清洗后statements数: 155
过滤掉的statements数: 94
清洗后的statements:
  1. [actual] saxzpus is lalqpus
  2. [actual] saxzpus is nifcpus
  3. [actual] lalqpus is xatppus and bihwpus
  4. [actual] x is fownpus
  5. [actual] fownpus is saxzpus
  6. [actual] xatppus is babcpus and wunspus and tujfpus and xaxzpus
  7. [planning] x is babcpus
  8. [planning] x is babcpus
  9. [actual] x is fownpus
  10. [actual] fownpus is saxzpus
  11. [planning] fownpus is saxzpus
  12. [actual] fownpus is saxzpus
  13. [planning] saxzpus is lalqpus
  14. [actual] lalqpus is xatppus and bihwpus
  15. [planning] xatppus is lalqpus
  16. [planning] bihwpus is lalqpus
  17. [actual] lalqpus is the union of xatppus and bihwpus
  18. [actual] xatppus is babcpus and wunspus and tujfpus and xaxzpus
  19. [planning] xatppus is a container for babcpus and wunspus and tujfpus and xaxzpus
  20. [actual] babcpus is xatppus is a category that
  21. [actual] babcpus is a subset of xatppus
  22. [actual] x is fownpus
  23. [planning] x is an instance of fownpus
  24. [actual] fownpus is saxzpus
  25. [actual] fownpus is a subset of saxzpus
  26. [actual] saxzpus is lalqpus
  27. [planning] x is babcpus
  28. [planning] x is babcpus
  29. [actual] x is fownpus
  30. [actual] fownpus is saxzpus
  31. [planning] fownpus is saxzpus
  32. [planning] fownpus is saxzpus
  33. [planning] fownpus is saxzpus
  34. [planning] x is fownpus
  35. [planning] x is saxzpus
  36. [planning] saxzpus is a set that contains fownpus
  37. [planning] x is fownpus
  38. [planning] x is saxzpus
  39. [planning] saxzpus is a set of sets
  40. [planning] saxzpus is something
  41. [actual] saxzpus is lalqpus
  42. [planning] saxzpus is lalqpus
  43. [actual] x is fownpus
  44. [actual] x is a fownpus
  45. [actual] fownpus is saxzpus
  46. [actual] x is saxzpus
  47. [actual] saxzpus is lalqpus
  48. [actual] x is lalqpus
  49. [actual] lalqpus is xatppus and bihwpus
  50. [planning] lalqpus is xatppus and bihwpus
  51. [planning] xatppus is lalqpus
  52. [planning] bihwpus is lalqpus
  53. [planning] lalqpus is xatppus
  54. [planning] lalqpus is xatppus
  55. [actual] lalqpus is xatppus and bihwpus
  56. [actual] xatppus is babcpus
  57. [planning] x is babcpus
  58. [planning] x is babcpus
  59. [actual] lalqpus is xatppus and bihwpus
  60. [planning] xatppus is lalqpus
  61. [planning] bihwpus is lalqpus
  62. [actual] lalqpus is xatppus and bihwpus
  63. [actual] babcpus is a type of xatppus
  64. [actual] saxzpus is lalqpus
  65. [actual] saxzpus is nifcpus
  66. [actual] x is fownpus
  67. [actual] fownpus is saxzpus
  68. [actual] x is saxzpus
  69. [actual] saxzpus is lalqpus
  70. [actual] x is lalqpus
  71. [actual] xatppus is lalqpus
  72. [actual] bihwpus is lalqpus
  73. [actual] x is lalqpus
  74. [planning] x is xatppus or bihwpus
  75. [planning] x is another part of lalqpus
  76. [actual] xatppus is subset of lalqpus
  77. [actual] bihwpus is subset of lalqpus
  78. [planning] x is babcpus
  79. [actual] xatppus is babcpus and wunspus and tujfpus and xaxzpus
  80. [actual] babcpus is xatppus
  81. [actual] wunspus is xatppus
  82. [planning] xatppus is these
  83. [planning] xatppus is babcpus
  84. [planning] babcpus is xatppus
  85. [actual] lalqpus is xatppus and bihwpus
  86. [actual] lalqpus is a type of xatppus
  87. [actual] lalqpus is a type of bihwpus
  88. [actual] xatppus is babcpus
  89. [planning] lalqpus is babcpus
  90. [planning] x is babcpus
  91. [actual] saxzpus is lalqpus
  92. [planning] lalqpus is xatppus
  93. [planning] saxzpus is xatppus
  94. [actual] xatppus is babcpus
  95. [actual] x is babcpus
  96. [actual] xatppus is wunspus
  97. [actual] xatppus is babcpus and wunspus and tujfpus and xaxzpus
  98. [planning] xatppus is babcpus
  99. [planning] xatppus is wunspus
  100. [planning] xatppus is tujfpus
  101. [planning] xatppus is xaxzpus
  102. [planning] xatppus is babcpus and wunspus
  103. [planning] xatppus is babcpus and tujfpus
  104. [planning] xatppus is babcpus and xaxzpus
  105. [planning] xatppus is wunspus and tujfpus
  106. [planning] xatppus is wunspus and xaxzpus
  107. [planning] xatppus is tujfpus and xaxzpus
  108. [planning] xatppus is babcpus and wunspus and tujfpus
  109. [planning] xatppus is babcpus and wunspus and xaxzpus
  110. [planning] xatppus is babcpus and tujfpus and xaxzpus
  111. [planning] xatppus is wunspus and tujfpus and xaxzpus
  112. [planning] xatppus is babcpus and wunspus and tujfpus and xaxzpus
  113. [actual] xatppus is a subset of babcpus
  114. [actual] babcpus is a broader category containing xatppus
  115. [actual] lalqpus is xatppus and bihwpus
  116. [actual] saxzpus is lalqpus
  117. [actual] fownpus is saxzpus
  118. [actual] x is fownpus
  119. [actual] x is xatppus
  120. [actual] xatppus is babcpus
  121. [actual] x is babcpus
  122. [actual] x is babcpus
  123. [actual] x is fownpus
  124. [actual] fownpus is saxzpus
  125. [actual] fownpus is a subset of saxzpus
  126. [actual] saxzpus is lalqpus
  127. [actual] lalqpus is xatppus and bihwpus
  128. [actual] lalqpus is xatppus and bihwpus
  129. [actual] xatppus is babcpus and wunspus and tujfpus and xaxzpus
  130. [actual] x is babcpus
  131. [actual] x is fownpus
  132. [actual] fownpus is saxzpus
  133. [actual] saxzpus is lalqpus
  134. [actual] lalqpus is xatppus and bihwpus
  135. [planning] x is xatppus
  136. [actual] x is babcpus
  137. [planning] fownpus is saxzpus
  138. [planning] x is fownpus
  139. [planning] x is saxzpus
  140. [actual] saxzpus is lalqpus
  141. [planning] saxzpus is lalqpus
  142. [planning] lalqpus is a set of categories
  143. [planning] x is babcpus
  144. [planning] x is babcpus
  145. [actual] x is fownpus
  146. [actual] fownpus is a member of saxzpus
  147. [actual] x is inside fownpus
  148. [actual] fownpus is inside saxzpus
  149. [planning] x is babgpus
  150. [planning] saxzpus is a set that contains sets
  151. [planning] x is an element of saxzpus
  152. [planning] saxzpus is a transitive set
  153. [actual] saxzpus is lalqpus
  154. [planning] lalqpus is saxzpus
  155. [actual] x is babcpus

=== 开始标准化和解析节点 ===
清洗后statements数: 155
标准化后节点数: 128
过滤掉的无效实体数: 27
标准化后的节点:
  1. [actual] saxzpus → lalqpus (原始: saxzpus is lalqpus)
  2. [actual] saxzpus → nifcpus (原始: saxzpus is nifcpus)
  3. [actual] lalqpus → xatppus and bihwpus (原始: lalqpus is xatppus and bihwpus)
  4. [actual] x → fownpus (原始: x is fownpus)
  5. [actual] fownpus → saxzpus (原始: fownpus is saxzpus)
  6. [actual] xatppus → babcpus and wunspus and tujfpus and xaxzpus (原始: xatppus is babcpus and wunspus and tujfpus and xaxzpus)
  7. [planning] x → babcpus (原始: x is babcpus)
  8. [planning] x → babcpus (原始: x is babcpus)
  9. [actual] x → fownpus (原始: x is fownpus)
  10. [actual] fownpus → saxzpus (原始: fownpus is saxzpus)
  11. [planning] fownpus → saxzpus (原始: fownpus is saxzpus)
  12. [actual] fownpus → saxzpus (原始: fownpus is saxzpus)
  13. [planning] saxzpus → lalqpus (原始: saxzpus is lalqpus)
  14. [actual] lalqpus → xatppus and bihwpus (原始: lalqpus is xatppus and bihwpus)
  15. [planning] xatppus → lalqpus (原始: xatppus is lalqpus)
  16. [planning] bihwpus → lalqpus (原始: bihwpus is lalqpus)
  17. [actual] xatppus → babcpus and wunspus and tujfpus and xaxzpus (原始: xatppus is babcpus and wunspus and tujfpus and xaxzpus)
  18. [actual] x → fownpus (原始: x is fownpus)
  19. [actual] fownpus → saxzpus (原始: fownpus is saxzpus)
  20. [actual] saxzpus → lalqpus (原始: saxzpus is lalqpus)
  21. [planning] x → babcpus (原始: x is babcpus)
  22. [planning] x → babcpus (原始: x is babcpus)
  23. [actual] x → fownpus (原始: x is fownpus)
  24. [actual] fownpus → saxzpus (原始: fownpus is saxzpus)
  25. [planning] fownpus → saxzpus (原始: fownpus is saxzpus)
  26. [planning] fownpus → saxzpus (原始: fownpus is saxzpus)
  27. [planning] fownpus → saxzpus (原始: fownpus is saxzpus)
  28. [planning] x → fownpus (原始: x is fownpus)
  29. [planning] x → saxzpus (原始: x is saxzpus)
  30. [planning] x → fownpus (原始: x is fownpus)
  31. [planning] x → saxzpus (原始: x is saxzpus)
  32. [actual] saxzpus → lalqpus (原始: saxzpus is lalqpus)
  33. [planning] saxzpus → lalqpus (原始: saxzpus is lalqpus)
  34. [actual] x → fownpus (原始: x is fownpus)
  35. [actual] fownpus → saxzpus (原始: fownpus is saxzpus)
  36. [actual] x → saxzpus (原始: x is saxzpus)
  37. [actual] saxzpus → lalqpus (原始: saxzpus is lalqpus)
  38. [actual] x → lalqpus (原始: x is lalqpus)
  39. [actual] lalqpus → xatppus and bihwpus (原始: lalqpus is xatppus and bihwpus)
  40. [planning] lalqpus → xatppus and bihwpus (原始: lalqpus is xatppus and bihwpus)
  41. [planning] xatppus → lalqpus (原始: xatppus is lalqpus)
  42. [planning] bihwpus → lalqpus (原始: bihwpus is lalqpus)
  43. [planning] lalqpus → xatppus (原始: lalqpus is xatppus)
  44. [planning] lalqpus → xatppus (原始: lalqpus is xatppus)
  45. [actual] lalqpus → xatppus and bihwpus (原始: lalqpus is xatppus and bihwpus)
  46. [actual] xatppus → babcpus (原始: xatppus is babcpus)
  47. [planning] x → babcpus (原始: x is babcpus)
  48. [planning] x → babcpus (原始: x is babcpus)
  49. [actual] lalqpus → xatppus and bihwpus (原始: lalqpus is xatppus and bihwpus)
  50. [planning] xatppus → lalqpus (原始: xatppus is lalqpus)
  51. [planning] bihwpus → lalqpus (原始: bihwpus is lalqpus)
  52. [actual] lalqpus → xatppus and bihwpus (原始: lalqpus is xatppus and bihwpus)
  53. [actual] saxzpus → lalqpus (原始: saxzpus is lalqpus)
  54. [actual] saxzpus → nifcpus (原始: saxzpus is nifcpus)
  55. [actual] x → fownpus (原始: x is fownpus)
  56. [actual] fownpus → saxzpus (原始: fownpus is saxzpus)
  57. [actual] x → saxzpus (原始: x is saxzpus)
  58. [actual] saxzpus → lalqpus (原始: saxzpus is lalqpus)
  59. [actual] x → lalqpus (原始: x is lalqpus)
  60. [actual] xatppus → lalqpus (原始: xatppus is lalqpus)
  61. [actual] bihwpus → lalqpus (原始: bihwpus is lalqpus)
  62. [actual] x → lalqpus (原始: x is lalqpus)
  63. [planning] x → xatppus or bihwpus (原始: x is xatppus or bihwpus)
  64. [planning] x → babcpus (原始: x is babcpus)
  65. [actual] xatppus → babcpus and wunspus and tujfpus and xaxzpus (原始: xatppus is babcpus and wunspus and tujfpus and xaxzpus)
  66. [actual] babcpus → xatppus (原始: babcpus is xatppus)
  67. [actual] wunspus → xatppus (原始: wunspus is xatppus)
  68. [planning] xatppus → babcpus (原始: xatppus is babcpus)
  69. [planning] babcpus → xatppus (原始: babcpus is xatppus)
  70. [actual] lalqpus → xatppus and bihwpus (原始: lalqpus is xatppus and bihwpus)
  71. [actual] xatppus → babcpus (原始: xatppus is babcpus)
  72. [planning] lalqpus → babcpus (原始: lalqpus is babcpus)
  73. [planning] x → babcpus (原始: x is babcpus)
  74. [actual] saxzpus → lalqpus (原始: saxzpus is lalqpus)
  75. [planning] lalqpus → xatppus (原始: lalqpus is xatppus)
  76. [planning] saxzpus → xatppus (原始: saxzpus is xatppus)
  77. [actual] xatppus → babcpus (原始: xatppus is babcpus)
  78. [actual] x → babcpus (原始: x is babcpus)
  79. [actual] xatppus → wunspus (原始: xatppus is wunspus)
  80. [actual] xatppus → babcpus and wunspus and tujfpus and xaxzpus (原始: xatppus is babcpus and wunspus and tujfpus and xaxzpus)
  81. [planning] xatppus → babcpus (原始: xatppus is babcpus)
  82. [planning] xatppus → wunspus (原始: xatppus is wunspus)
  83. [planning] xatppus → tujfpus (原始: xatppus is tujfpus)
  84. [planning] xatppus → xaxzpus (原始: xatppus is xaxzpus)
  85. [planning] xatppus → babcpus and wunspus (原始: xatppus is babcpus and wunspus)
  86. [planning] xatppus → babcpus and tujfpus (原始: xatppus is babcpus and tujfpus)
  87. [planning] xatppus → babcpus and xaxzpus (原始: xatppus is babcpus and xaxzpus)
  88. [planning] xatppus → wunspus and tujfpus (原始: xatppus is wunspus and tujfpus)
  89. [planning] xatppus → wunspus and xaxzpus (原始: xatppus is wunspus and xaxzpus)
  90. [planning] xatppus → tujfpus and xaxzpus (原始: xatppus is tujfpus and xaxzpus)
  91. [planning] xatppus → babcpus and wunspus and tujfpus (原始: xatppus is babcpus and wunspus and tujfpus)
  92. [planning] xatppus → babcpus and wunspus and xaxzpus (原始: xatppus is babcpus and wunspus and xaxzpus)
  93. [planning] xatppus → babcpus and tujfpus and xaxzpus (原始: xatppus is babcpus and tujfpus and xaxzpus)
  94. [planning] xatppus → wunspus and tujfpus and xaxzpus (原始: xatppus is wunspus and tujfpus and xaxzpus)
  95. [planning] xatppus → babcpus and wunspus and tujfpus and xaxzpus (原始: xatppus is babcpus and wunspus and tujfpus and xaxzpus)
  96. [actual] lalqpus → xatppus and bihwpus (原始: lalqpus is xatppus and bihwpus)
  97. [actual] saxzpus → lalqpus (原始: saxzpus is lalqpus)
  98. [actual] fownpus → saxzpus (原始: fownpus is saxzpus)
  99. [actual] x → fownpus (原始: x is fownpus)
  100. [actual] x → xatppus (原始: x is xatppus)
  101. [actual] xatppus → babcpus (原始: xatppus is babcpus)
  102. [actual] x → babcpus (原始: x is babcpus)
  103. [actual] x → babcpus (原始: x is babcpus)
  104. [actual] x → fownpus (原始: x is fownpus)
  105. [actual] fownpus → saxzpus (原始: fownpus is saxzpus)
  106. [actual] saxzpus → lalqpus (原始: saxzpus is lalqpus)
  107. [actual] lalqpus → xatppus and bihwpus (原始: lalqpus is xatppus and bihwpus)
  108. [actual] lalqpus → xatppus and bihwpus (原始: lalqpus is xatppus and bihwpus)
  109. [actual] xatppus → babcpus and wunspus and tujfpus and xaxzpus (原始: xatppus is babcpus and wunspus and tujfpus and xaxzpus)
  110. [actual] x → babcpus (原始: x is babcpus)
  111. [actual] x → fownpus (原始: x is fownpus)
  112. [actual] fownpus → saxzpus (原始: fownpus is saxzpus)
  113. [actual] saxzpus → lalqpus (原始: saxzpus is lalqpus)
  114. [actual] lalqpus → xatppus and bihwpus (原始: lalqpus is xatppus and bihwpus)
  115. [planning] x → xatppus (原始: x is xatppus)
  116. [actual] x → babcpus (原始: x is babcpus)
  117. [planning] fownpus → saxzpus (原始: fownpus is saxzpus)
  118. [planning] x → fownpus (原始: x is fownpus)
  119. [planning] x → saxzpus (原始: x is saxzpus)
  120. [actual] saxzpus → lalqpus (原始: saxzpus is lalqpus)
  121. [planning] saxzpus → lalqpus (原始: saxzpus is lalqpus)
  122. [planning] x → babcpus (原始: x is babcpus)
  123. [planning] x → babcpus (原始: x is babcpus)
  124. [actual] x → fownpus (原始: x is fownpus)
  125. [planning] x → babgpus (原始: x is babgpus)
  126. [actual] saxzpus → lalqpus (原始: saxzpus is lalqpus)
  127. [planning] lalqpus → saxzpus (原始: lalqpus is saxzpus)
  128. [actual] x → babcpus (原始: x is babcpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 10
[后处理] 加载LoG图，包含 10 个节点
  LoG节点 0: x is babcpus (规则: CE, 深度: 1)
  LoG节点 1: x is babcpus and wunspus (规则: MP, 深度: 2)
  LoG节点 2: x is lalqpus (规则: CE, 深度: 3)
  LoG节点 3: lalqpus is babcpus and wunspus (规则: CE, 深度: 3)
  LoG节点 4: x is lalqpus and nifcpus (规则: MP, 深度: 4)
  LoG节点 5: lalqpus is babcpus and wunspus and tujfpus (规则: MP, 深度: 4)
  LoG节点 6: x is saxzpus (规则: MP, 深度: 5)
  LoG节点 7: saxzpus is lalqpus and nifcpus (规则: CI, 深度: 5)
  LoG节点 8: lalqpus is xatppus (规则: CE, 深度: 5)
  LoG节点 9: xatppus is babcpus and wunspus and tujfpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 128
   - 初始条件数: 6
   - LoG图节点数: 10

📋 初始条件列表:
    1. saxzpus is lalqpus
    2. saxzpus is nifcpus
    3. lalqpus is xatppus and bihwpus
    4. x is fownpus
    5. fownpus is saxzpus
    6. xatppus is babcpus and wunspus and tujfpus and xaxzpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 6 个前提节点

🔍 开始处理actual节点...

   节点 1: saxzpus is lalqpus
      ↻ 重复节点，计数: 2

   节点 2: saxzpus is nifcpus
      ↻ 重复节点，计数: 2

   节点 3: lalqpus is xatppus and bihwpus
      ↻ 重复节点，计数: 2

   节点 4: x is fownpus
      ↻ 重复节点，计数: 2

   节点 5: fownpus is saxzpus
      ↻ 重复节点，计数: 2

   节点 6: xatppus is babcpus and wunspus and tujfpus and xaxzpus
      ↻ 重复节点，计数: 2

   节点 7: x is fownpus
      ↻ 重复节点，计数: 3

   节点 8: fownpus is saxzpus
      ↻ 重复节点，计数: 3

   节点 9: fownpus is saxzpus
      ↻ 重复节点，计数: 4

   节点 10: lalqpus is xatppus and bihwpus
      ↻ 重复节点，计数: 3

   节点 11: xatppus is babcpus and wunspus and tujfpus and xaxzpus
      ↻ 重复节点，计数: 3

   节点 12: x is fownpus
      ↻ 重复节点，计数: 4

   节点 13: fownpus is saxzpus
      ↻ 重复节点，计数: 5

   节点 14: saxzpus is lalqpus
      ↻ 重复节点，计数: 3

   节点 15: x is fownpus
      ↻ 重复节点，计数: 5

   节点 16: fownpus is saxzpus
      ↻ 重复节点，计数: 6

   节点 17: saxzpus is lalqpus
      ↻ 重复节点，计数: 4

   节点 18: x is fownpus
      ↻ 重复节点，计数: 6

   节点 19: fownpus is saxzpus
      ↻ 重复节点，计数: 7

   节点 20: x is saxzpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is saxzpus
      ✅ 验证成功 + LoG匹配

   节点 21: saxzpus is lalqpus
      ↻ 重复节点，计数: 5

   节点 22: x is lalqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is lalqpus
[子树点亮]     └─ 点亮依赖节点: x is lalqpus and nifcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: saxzpus is lalqpus and nifcpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 23: lalqpus is xatppus and bihwpus
      ↻ 重复节点，计数: 4

   节点 24: lalqpus is xatppus and bihwpus
      ↻ 重复节点，计数: 5

   节点 25: xatppus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: xatppus is babcpus and wunspus and tujfpus and xaxzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: xatppus is babcpus and wunspus and tujfpus and xaxzpus
  ✓ 点亮LoG节点: xatppus is babcpus and wunspus and tujfpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 26: lalqpus is xatppus and bihwpus
      ↻ 重复节点，计数: 6

   节点 27: lalqpus is xatppus and bihwpus
      ↻ 重复节点，计数: 7

   节点 28: saxzpus is lalqpus
      ↻ 重复节点，计数: 6

   节点 29: saxzpus is nifcpus
      ↻ 重复节点，计数: 3

   节点 30: x is fownpus
      ↻ 重复节点，计数: 7

   节点 31: fownpus is saxzpus
      ↻ 重复节点，计数: 8

   节点 32: x is saxzpus
      ↻ 重复节点，计数: 2

   节点 33: saxzpus is lalqpus
      ↻ 重复节点，计数: 7

   节点 34: x is lalqpus
      ↻ 重复节点，计数: 2

   节点 35: xatppus is lalqpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 36: bihwpus is lalqpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 37: x is lalqpus
      ↻ 重复节点，计数: 3

   节点 38: xatppus is babcpus and wunspus and tujfpus and xaxzpus
      ↻ 重复节点，计数: 4

   节点 39: babcpus is xatppus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 40: wunspus is xatppus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 41: lalqpus is xatppus and bihwpus
      ↻ 重复节点，计数: 8

   节点 42: xatppus is babcpus
      ↻ 重复节点，计数: 2

   节点 43: saxzpus is lalqpus
      ↻ 重复节点，计数: 8

   节点 44: xatppus is babcpus
      ↻ 重复节点，计数: 3

   节点 45: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: x is babcpus and wunspus (深度2)
[子树点亮]     └─ 点亮依赖节点: lalqpus is babcpus and wunspus (深度3)
[子树点亮]     └─ 点亮依赖节点: lalqpus is babcpus and wunspus and tujfpus (深度4)
[子树点亮]     └─ 点亮依赖节点: lalqpus is xatppus (深度5)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
      ✅ 验证成功 + LoG匹配

   节点 46: xatppus is wunspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: xatppus is babcpus and wunspus and tujfpus and xaxzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: xatppus is babcpus and wunspus and tujfpus and xaxzpus

   节点 47: xatppus is babcpus and wunspus and tujfpus and xaxzpus
      ↻ 重复节点，计数: 5

   节点 48: lalqpus is xatppus and bihwpus
      ↻ 重复节点，计数: 9

   节点 49: saxzpus is lalqpus
      ↻ 重复节点，计数: 9

   节点 50: fownpus is saxzpus
      ↻ 重复节点，计数: 9

   节点 51: x is fownpus
      ↻ 重复节点，计数: 8

   节点 52: x is xatppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fownpus → fownpus is xatppus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is fownpus
  - 前提: fownpus is saxzpus
  - 前提: saxzpus is lalqpus
  - 前提: lalqpus is xatppus and bihwpus

   节点 53: xatppus is babcpus
      ↻ 重复节点，计数: 4

   节点 54: x is babcpus
      ↻ 重复节点，计数: 2

   节点 55: x is babcpus
      ↻ 重复节点，计数: 3

   节点 56: x is fownpus
      ↻ 重复节点，计数: 9

   节点 57: fownpus is saxzpus
      ↻ 重复节点，计数: 10

   节点 58: saxzpus is lalqpus
      ↻ 重复节点，计数: 10

   节点 59: lalqpus is xatppus and bihwpus
      ↻ 重复节点，计数: 10

   节点 60: lalqpus is xatppus and bihwpus
      ↻ 重复节点，计数: 11

   节点 61: xatppus is babcpus and wunspus and tujfpus and xaxzpus
      ↻ 重复节点，计数: 6

   节点 62: x is babcpus
      ↻ 重复节点，计数: 4

   节点 63: x is fownpus
      ↻ 重复节点，计数: 10

   节点 64: fownpus is saxzpus
      ↻ 重复节点，计数: 11

   节点 65: saxzpus is lalqpus
      ↻ 重复节点，计数: 11

   节点 66: lalqpus is xatppus and bihwpus
      ↻ 重复节点，计数: 12

   节点 67: x is babcpus
      ↻ 重复节点，计数: 5

   节点 68: saxzpus is lalqpus
      ↻ 重复节点，计数: 12

   节点 69: x is fownpus
      ↻ 重复节点，计数: 11

   节点 70: saxzpus is lalqpus
      ↻ 重复节点，计数: 13

   节点 71: x is babcpus
      ↻ 重复节点，计数: 6

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 71
   - 新增节点: 10
   - 更新已存在节点: 61
   - 点亮的LoG节点: 10

🎯 推理质量统计:
   - 完美推理: 2 (节点正确 + 路径正确)
   - 部分推理: 8 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 10节点, 6前提, 复杂度1-6

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 16
   - 前提节点: 6
   - 推理节点: 6
   - 幻觉节点: 4
   - 点亮LoG节点: 10

❌ 幻觉节点详情:
   - xatppus is lalqpus (出现1次)
   - bihwpus is lalqpus (出现1次)
   - babcpus is xatppus (出现1次)
   - wunspus is xatppus (出现1次)

✅ 推理节点详情:
   🟢 x is saxzpus (出现2次, 质量:perfect)
   🟡 x is lalqpus (出现3次, 质量:partial)
      ⚠️  无效依赖: ['xatppus is lalqpus', 'bihwpus is lalqpus']
   🟡 xatppus is babcpus (出现4次, 质量:partial)
      ⚠️  无效依赖: ['xatppus is lalqpus']
   🟢 x is babcpus (出现6次, 质量:perfect)
   🟡 xatppus is wunspus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['xatppus is lalqpus']
   🟡 x is xatppus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['babcpus is xatppus', 'wunspus is xatppus']

🔥 点亮的LoG节点:
   - x is babcpus and wunspus
   - lalqpus is babcpus and wunspus and tujfpus
   - x is babcpus
   - saxzpus is lalqpus and nifcpus
   - x is lalqpus and nifcpus
   - lalqpus is xatppus
   - xatppus is babcpus and wunspus and tujfpus
   - x is lalqpus
   - lalqpus is babcpus and wunspus
   - x is saxzpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus (第5层)
   节点Coverage: 10/10 = 100.00%
   前提条件Coverage: 6/6 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 4/10 = 40.00%
   可推导节点: 6/10
   Strict Error Rate: 8/10 = 80.00%
   严格有效节点: 2/10

   详细分析:
     完美推理: 2 (20.00%)
     部分推理: 8 (80.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 9/50
================================================================================
记录索引: 8
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_8.json
✅ 使用缓存结果:
   - 句子数: 45
   - 提取的语句数: 43
   - 初始条件数: 10

=== Statement提取完成 ===
总句子数: 45
成功提取: 45
失败提取: 0
总statements数: 43

=== 开始清洗Statement格式 ===
原始statements数: 43
清洗后statements数: 42
过滤掉的statements数: 1
清洗后的statements:
  1. [planning] x is babcpus
  2. [actual] gotrpus is vakkpus and razspus
  3. [actual] sawrpus is xidqpus
  4. [actual] lecypus is gotrpus
  5. [actual] vakkpus is tobhpus
  6. [actual] vakkpus is sawrpus and jeljpus
  7. [actual] tobhpus is madcpus
  8. [actual] xidqpus is recqpus
  9. [actual] x is diktpus
  10. [actual] diktpus is lecypus
  11. [actual] madcpus is babcpus and hufhpus
  12. [planning] x is babcpus
  13. [actual] x is diktpus
  14. [actual] diktpus is lecypus
  15. [actual] x is diktpus
  16. [actual] diktpus is lecypus
  17. [actual] x is lecypus
  18. [actual] lecypus is gotrpus
  19. [actual] x is lecypus
  20. [actual] lecypus is gotrpus
  21. [actual] x is gotrpus
  22. [actual] gotrpus is vakkpus and razspus
  23. [actual] x is gotrpus
  24. [actual] x is vakkpus
  25. [actual] vakkpus is tobhpus
  26. [actual] x is vakkpus
  27. [actual] vakkpus is tobhpus
  28. [actual] x is tobhpus
  29. [actual] tobhpus is madcpus
  30. [actual] x is tobhpus
  31. [actual] tobhpus is madcpus
  32. [actual] x is madcpus
  33. [actual] madcpus is babcpus and hufhpus
  34. [actual] x is madcpus
  35. [actual] madcpus is babcpus
  36. [actual] x is babcpus
  37. [actual] x is babcpus
  38. [actual] vakkpus is sawrpus and jeljpus
  39. [actual] vakkpus is tobhpus
  40. [actual] tobhpus is madcpus and babcpus
  41. [planning] vakkpus is tobhpus
  42. [actual] x is babcpus

=== 开始标准化和解析节点 ===
清洗后statements数: 42
标准化后节点数: 42
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babcpus (原始: x is babcpus)
  2. [actual] gotrpus → vakkpus and razspus (原始: gotrpus is vakkpus and razspus)
  3. [actual] sawrpus → xidqpus (原始: sawrpus is xidqpus)
  4. [actual] lecypus → gotrpus (原始: lecypus is gotrpus)
  5. [actual] vakkpus → tobhpus (原始: vakkpus is tobhpus)
  6. [actual] vakkpus → sawrpus and jeljpus (原始: vakkpus is sawrpus and jeljpus)
  7. [actual] tobhpus → madcpus (原始: tobhpus is madcpus)
  8. [actual] xidqpus → recqpus (原始: xidqpus is recqpus)
  9. [actual] x → diktpus (原始: x is diktpus)
  10. [actual] diktpus → lecypus (原始: diktpus is lecypus)
  11. [actual] madcpus → babcpus and hufhpus (原始: madcpus is babcpus and hufhpus)
  12. [planning] x → babcpus (原始: x is babcpus)
  13. [actual] x → diktpus (原始: x is diktpus)
  14. [actual] diktpus → lecypus (原始: diktpus is lecypus)
  15. [actual] x → diktpus (原始: x is diktpus)
  16. [actual] diktpus → lecypus (原始: diktpus is lecypus)
  17. [actual] x → lecypus (原始: x is lecypus)
  18. [actual] lecypus → gotrpus (原始: lecypus is gotrpus)
  19. [actual] x → lecypus (原始: x is lecypus)
  20. [actual] lecypus → gotrpus (原始: lecypus is gotrpus)
  21. [actual] x → gotrpus (原始: x is gotrpus)
  22. [actual] gotrpus → vakkpus and razspus (原始: gotrpus is vakkpus and razspus)
  23. [actual] x → gotrpus (原始: x is gotrpus)
  24. [actual] x → vakkpus (原始: x is vakkpus)
  25. [actual] vakkpus → tobhpus (原始: vakkpus is tobhpus)
  26. [actual] x → vakkpus (原始: x is vakkpus)
  27. [actual] vakkpus → tobhpus (原始: vakkpus is tobhpus)
  28. [actual] x → tobhpus (原始: x is tobhpus)
  29. [actual] tobhpus → madcpus (原始: tobhpus is madcpus)
  30. [actual] x → tobhpus (原始: x is tobhpus)
  31. [actual] tobhpus → madcpus (原始: tobhpus is madcpus)
  32. [actual] x → madcpus (原始: x is madcpus)
  33. [actual] madcpus → babcpus and hufhpus (原始: madcpus is babcpus and hufhpus)
  34. [actual] x → madcpus (原始: x is madcpus)
  35. [actual] madcpus → babcpus (原始: madcpus is babcpus)
  36. [actual] x → babcpus (原始: x is babcpus)
  37. [actual] x → babcpus (原始: x is babcpus)
  38. [actual] vakkpus → sawrpus and jeljpus (原始: vakkpus is sawrpus and jeljpus)
  39. [actual] vakkpus → tobhpus (原始: vakkpus is tobhpus)
  40. [actual] tobhpus → madcpus and babcpus (原始: tobhpus is madcpus and babcpus)
  41. [planning] vakkpus → tobhpus (原始: vakkpus is tobhpus)
  42. [actual] x → babcpus (原始: x is babcpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 13
[后处理] 加载LoG图，包含 13 个节点
  LoG节点 0: x is babcpus (规则: CE, 深度: 1)
  LoG节点 1: x is babcpus and recqpus (规则: MP, 深度: 2)
  LoG节点 2: x is vakkpus (规则: CE, 深度: 3)
  LoG节点 3: vakkpus is babcpus and recqpus (规则: CI, 深度: 3)
  LoG节点 4: x is vakkpus and razspus (规则: MP, 深度: 4)
  LoG节点 5: vakkpus is babcpus (规则: MP, 深度: 4)
  LoG节点 6: vakkpus is recqpus (规则: MP, 深度: 4)
  LoG节点 7: x is lecypus (规则: MP, 深度: 5)
  LoG节点 8: lecypus is vakkpus and razspus (规则: MP, 深度: 5)
  LoG节点 9: vakkpus is madcpus (规则: MP, 深度: 5)
  LoG节点 10: madcpus is babcpus (规则: CE, 深度: 5)
  LoG节点 11: vakkpus is sawrpus (规则: CE, 深度: 5)
  LoG节点 12: sawrpus is recqpus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 42
   - 初始条件数: 10
   - LoG图节点数: 13

📋 初始条件列表:
    1. gotrpus is vakkpus and razspus
    2. sawrpus is xidqpus
    3. lecypus is gotrpus
    4. vakkpus is tobhpus
    5. vakkpus is sawrpus and jeljpus
    6. tobhpus is madcpus
    7. xidqpus is recqpus
    8. x is diktpus
    9. diktpus is lecypus
   10. madcpus is babcpus and hufhpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 10 个前提节点

🔍 开始处理actual节点...

   节点 1: gotrpus is vakkpus and razspus
      ↻ 重复节点，计数: 2

   节点 2: sawrpus is xidqpus
      ↻ 重复节点，计数: 2

   节点 3: lecypus is gotrpus
      ↻ 重复节点，计数: 2

   节点 4: vakkpus is tobhpus
      ↻ 重复节点，计数: 2

   节点 5: vakkpus is sawrpus and jeljpus
      ↻ 重复节点，计数: 2

   节点 6: tobhpus is madcpus
      ↻ 重复节点，计数: 2

   节点 7: xidqpus is recqpus
      ↻ 重复节点，计数: 2

   节点 8: x is diktpus
      ↻ 重复节点，计数: 2

   节点 9: diktpus is lecypus
      ↻ 重复节点，计数: 2

   节点 10: madcpus is babcpus and hufhpus
      ↻ 重复节点，计数: 2

   节点 11: x is diktpus
      ↻ 重复节点，计数: 3

   节点 12: diktpus is lecypus
      ↻ 重复节点，计数: 3

   节点 13: x is diktpus
      ↻ 重复节点，计数: 4

   节点 14: diktpus is lecypus
      ↻ 重复节点，计数: 4

   节点 15: x is lecypus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is lecypus
      ✅ 验证成功 + LoG匹配

   节点 16: lecypus is gotrpus
      ↻ 重复节点，计数: 3

   节点 17: x is lecypus
      ↻ 重复节点，计数: 2

   节点 18: lecypus is gotrpus
      ↻ 重复节点，计数: 4

   节点 19: x is gotrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is diktpus → diktpus is gotrpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is diktpus
  - 前提: diktpus is lecypus
  - 前提: lecypus is gotrpus

   节点 20: gotrpus is vakkpus and razspus
      ↻ 重复节点，计数: 3

   节点 21: x is gotrpus
      ↻ 重复节点，计数: 2

   节点 22: x is vakkpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is vakkpus
[子树点亮]     └─ 点亮依赖节点: x is vakkpus and razspus (深度4)
[子树点亮]     └─ 点亮依赖节点: lecypus is vakkpus and razspus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 23: vakkpus is tobhpus
      ↻ 重复节点，计数: 3

   节点 24: x is vakkpus
      ↻ 重复节点，计数: 2

   节点 25: vakkpus is tobhpus
      ↻ 重复节点，计数: 4

   节点 26: x is tobhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is diktpus → diktpus is tobhpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is diktpus
  - 前提: diktpus is lecypus
  - 前提: lecypus is gotrpus
  - 前提: gotrpus is vakkpus and razspus
  - 前提: vakkpus is tobhpus

   节点 27: tobhpus is madcpus
      ↻ 重复节点，计数: 3

   节点 28: x is tobhpus
      ↻ 重复节点，计数: 2

   节点 29: tobhpus is madcpus
      ↻ 重复节点，计数: 4

   节点 30: x is madcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is diktpus → diktpus is madcpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is diktpus
  - 前提: diktpus is lecypus
  - 前提: lecypus is gotrpus
  - 前提: gotrpus is vakkpus and razspus
  - 前提: vakkpus is tobhpus
  - 前提: tobhpus is madcpus
  ✓ 点亮LoG节点: vakkpus is madcpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 31: madcpus is babcpus and hufhpus
      ↻ 重复节点，计数: 3

   节点 32: x is madcpus
      ↻ 重复节点，计数: 2

   节点 33: madcpus is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: madcpus is babcpus
      ✅ 验证成功 + LoG匹配

   节点 34: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: x is babcpus and recqpus (深度2)
[子树点亮]     └─ 点亮依赖节点: vakkpus is babcpus and recqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: vakkpus is babcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: vakkpus is recqpus (深度4)
[子树点亮]     └─ 点亮依赖节点: vakkpus is sawrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: sawrpus is recqpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 6 个节点
      ✅ 验证成功 + LoG匹配

   节点 35: x is babcpus
      ↻ 重复节点，计数: 2

   节点 36: vakkpus is sawrpus and jeljpus
      ↻ 重复节点，计数: 3

   节点 37: vakkpus is tobhpus
      ↻ 重复节点，计数: 5

   节点 38: tobhpus is madcpus and babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: tobhpus is madcpus → tobhpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: tobhpus is madcpus
  - 前提: madcpus is babcpus

   节点 39: x is babcpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 39
   - 新增节点: 8
   - 更新已存在节点: 31
   - 点亮的LoG节点: 13

🎯 推理质量统计:
   - 完美推理: 8 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 13节点, 10前提, 复杂度1-10

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 18
   - 前提节点: 10
   - 推理节点: 8
   - 幻觉节点: 0
   - 点亮LoG节点: 13

✅ 推理节点详情:
   🟢 x is lecypus (出现2次, 质量:perfect)
   🟢 x is gotrpus (出现2次, 质量:perfect)
   🟢 x is vakkpus (出现2次, 质量:perfect)
   🟢 x is tobhpus (出现2次, 质量:perfect)
   🟢 x is madcpus (出现2次, 质量:perfect)
   🟢 madcpus is babcpus (出现1次, 质量:perfect)
   🟢 x is babcpus (出现3次, 质量:perfect)
   🟢 tobhpus is madcpus and babcpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - vakkpus is recqpus
   - vakkpus is babcpus
   - x is babcpus
   - x is vakkpus and razspus
   - x is vakkpus
   - lecypus is vakkpus and razspus
   - vakkpus is madcpus
   - vakkpus is sawrpus
   - x is babcpus and recqpus
   - sawrpus is recqpus
   - vakkpus is babcpus and recqpus
   - x is lecypus
   - madcpus is babcpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus (第5层)
   节点Coverage: 13/13 = 100.00%
   前提条件Coverage: 10/10 = 100.00%
   各推理层点亮比例:
     第1层: 6/6 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/8 = 0.00%
   可推导节点: 8/8
   Strict Error Rate: 0/8 = 0.00%
   严格有效节点: 8/8

   详细分析:
     完美推理: 8 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 10/50
================================================================================
记录索引: 9
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_9.json
✅ 使用缓存结果:
   - 句子数: 101
   - 提取的语句数: 122
   - 初始条件数: 14

=== Statement提取完成 ===
总句子数: 101
成功提取: 100
失败提取: 1
总statements数: 122

=== 开始清洗Statement格式 ===
原始statements数: 122
清洗后statements数: 113
过滤掉的statements数: 9
清洗后的statements:
  1. [planning] x is babcpus or babrpus
  2. [actual] hojhpus is befzpus and nokppus
  3. [actual] x is yayppus
  4. [actual] defrpus is saztpus and fimjpus
  5. [actual] jimvpus is nocfpus
  6. [actual] saztpus is lecbpus
  7. [actual] befzpus is paxtpus and wugfpus
  8. [actual] lecbpus is xoxcpus
  9. [actual] paxtpus is jimvpus
  10. [actual] zottpus is defrpus
  11. [actual] yayppus is hojhpus and jetrpus
  12. [actual] xoxcpus is qemhpus and xakhpus
  13. [actual] helwpus is babcpus and dunxpus
  14. [actual] nocfpus is zottpus and xeyfpus and xotjpus
  15. [actual] qemhpus is helwpus and vicqpus
  16. [planning] x is babcpus or babrpus
  17. [planning] x is babcpus
  18. [actual] x is yayppus
  19. [actual] yayppus is hojhpus and jetrpus
  20. [actual] yayppus is hojhpus and jetrpus
  21. [actual] x is yayppus
  22. [planning] x is hojhpus
  23. [planning] x is jetrpus
  24. [actual] x is yayppus
  25. [actual] yayppus is hojhpus and jetrpus
  26. [actual] yayppus is hojhpus and jetrpus
  27. [planning] yayppus is hojhpus
  28. [planning] yayppus is jetrpus
  29. [actual] x is yayppus
  30. [actual] yayppus is a subset of hojhpus and jetrpus
  31. [actual] x is hojhpus and jetrpus
  32. [actual] babcpus is mentioned in statement 12
  33. [actual] helwpus is babcpus and dunxpus
  34. [actual] helwpus is a subset of babcpus
  35. [actual] helwpus is a subset of dunxpus
  36. [planning] helwpus is babcpus and dunxpus
  37. [planning] helwpus is babcpus and dunxpus
  38. [actual] helwpus is babcpus
  39. [planning] helwpus is a type of babcpus
  40. [actual] qemhpus is helwpus and vicqpus
  41. [actual] qemhpus is a type of helwpus
  42. [actual] qemhpus is a type of vicqpus
  43. [actual] xoxcpus is qemhpus and xakhpus
  44. [planning] xoxcpus is a type of qemhpus
  45. [planning] xoxcpus is a type of xakhpus
  46. [actual] lecbpus is xoxcpus
  47. [actual] saztpus is lecbpus
  48. [planning] saztpus is a type of lecbpus
  49. [actual] defrpus is saztpus and fimjpus
  50. [actual] defrpus is a type of saztpus and fimjpus
  51. [actual] zottpus is defrpus
  52. [actual] nocfpus is zottpus and xeyfpus and xotjpus
  53. [actual] nocfpus is a type of zottpus and xeyfpus and xotjpus
  54. [actual] jimvpus is nocfpus
  55. [actual] jimvpus is a type of nocfpus
  56. [actual] paxtpus is jimvpus
  57. [actual] befzpus is paxtpus and wugfpus
  58. [actual] befzpus is a type of paxtpus and wugfpus
  59. [actual] hojhpus is befzpus and nokppus
  60. [actual] hojhpus is a type of befzpus and nokppus
  61. [actual] yayppus is hojhpus and jetrpus
  62. [actual] x is yayppus
  63. [actual] x is a type of yayppus
  64. [actual] x is a type of hojhpus
  65. [actual] x is a type of jetrpus
  66. [planning] x is a type of hojhpus and jetrpus
  67. [planning] x is babcpus
  68. [actual] babcpus is helwpus
  69. [actual] helwpus is qemhpus
  70. [actual] x is yayppus
  71. [actual] yayppus is hojhpus
  72. [actual] hojhpus is befzpus and nokppus
  73. [actual] befzpus is paxtpus and wugfpus
  74. [actual] paxtpus is jimvpus
  75. [actual] jimvpus is nocfpus
  76. [actual] nocfpus is zottpus and xeyfpus and xotjpus
  77. [actual] zottpus is defrpus
  78. [actual] defrpus is saztpus and fimjpus
  79. [actual] saztpus is lecbpus
  80. [actual] lecbpus is xoxcpus
  81. [actual] xoxcpus is qemhpus and xakhpus
  82. [actual] qemhpus is helwpus and vicqpus
  83. [actual] helwpus is babcpus and dunxpus
  84. [actual] helwpus is babcpus
  85. [planning] x is helwpus
  86. [actual] x is yayppus
  87. [actual] yayppus is hojhpus
  88. [actual] hojhpus is befzpus
  89. [actual] befzpus is paxtpus
  90. [actual] paxtpus is jimvpus
  91. [actual] jimvpus is nocfpus
  92. [actual] nocfpus is zottpus
  93. [actual] zottpus is defrpus
  94. [actual] defrpus is saztpus
  95. [actual] saztpus is lecbpus
  96. [actual] lecbpus is xoxcpus
  97. [actual] xoxcpus is qemhpus
  98. [actual] qemhpus is helwpus
  99. [actual] x is a type of helwpus
  100. [actual] helwpus is a type of babcpus
  101. [actual] x is a type of babcpus
  102. [actual] x is babcpus
  103. [planning] x is babcpus or babrpus
  104. [actual] x is babcpus
  105. [actual] x is babcpus or babrpus
  106. [actual] x is yayppus
  107. [actual] yayppus is hojhpus
  108. [actual] x is hojhpus
  109. [actual] hojhpus is befzpus
  110. [actual] x is befzpus
  111. [actual] x is babcpus
  112. [planning] x is babcpus or babrpus
  113. [planning] x is babrpus

=== 开始标准化和解析节点 ===
清洗后statements数: 113
标准化后节点数: 91
过滤掉的无效实体数: 22
标准化后的节点:
  1. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  2. [actual] hojhpus → befzpus and nokppus (原始: hojhpus is befzpus and nokppus)
  3. [actual] x → yayppus (原始: x is yayppus)
  4. [actual] defrpus → saztpus and fimjpus (原始: defrpus is saztpus and fimjpus)
  5. [actual] jimvpus → nocfpus (原始: jimvpus is nocfpus)
  6. [actual] saztpus → lecbpus (原始: saztpus is lecbpus)
  7. [actual] befzpus → paxtpus and wugfpus (原始: befzpus is paxtpus and wugfpus)
  8. [actual] lecbpus → xoxcpus (原始: lecbpus is xoxcpus)
  9. [actual] paxtpus → jimvpus (原始: paxtpus is jimvpus)
  10. [actual] zottpus → defrpus (原始: zottpus is defrpus)
  11. [actual] yayppus → hojhpus and jetrpus (原始: yayppus is hojhpus and jetrpus)
  12. [actual] xoxcpus → qemhpus and xakhpus (原始: xoxcpus is qemhpus and xakhpus)
  13. [actual] helwpus → babcpus and dunxpus (原始: helwpus is babcpus and dunxpus)
  14. [actual] nocfpus → zottpus and xeyfpus and xotjpus (原始: nocfpus is zottpus and xeyfpus and xotjpus)
  15. [actual] qemhpus → helwpus and vicqpus (原始: qemhpus is helwpus and vicqpus)
  16. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  17. [planning] x → babcpus (原始: x is babcpus)
  18. [actual] x → yayppus (原始: x is yayppus)
  19. [actual] yayppus → hojhpus and jetrpus (原始: yayppus is hojhpus and jetrpus)
  20. [actual] yayppus → hojhpus and jetrpus (原始: yayppus is hojhpus and jetrpus)
  21. [actual] x → yayppus (原始: x is yayppus)
  22. [planning] x → hojhpus (原始: x is hojhpus)
  23. [planning] x → jetrpus (原始: x is jetrpus)
  24. [actual] x → yayppus (原始: x is yayppus)
  25. [actual] yayppus → hojhpus and jetrpus (原始: yayppus is hojhpus and jetrpus)
  26. [actual] yayppus → hojhpus and jetrpus (原始: yayppus is hojhpus and jetrpus)
  27. [planning] yayppus → hojhpus (原始: yayppus is hojhpus)
  28. [planning] yayppus → jetrpus (原始: yayppus is jetrpus)
  29. [actual] x → yayppus (原始: x is yayppus)
  30. [actual] x → hojhpus and jetrpus (原始: x is hojhpus and jetrpus)
  31. [actual] helwpus → babcpus and dunxpus (原始: helwpus is babcpus and dunxpus)
  32. [planning] helwpus → babcpus and dunxpus (原始: helwpus is babcpus and dunxpus)
  33. [planning] helwpus → babcpus and dunxpus (原始: helwpus is babcpus and dunxpus)
  34. [actual] helwpus → babcpus (原始: helwpus is babcpus)
  35. [actual] qemhpus → helwpus and vicqpus (原始: qemhpus is helwpus and vicqpus)
  36. [actual] xoxcpus → qemhpus and xakhpus (原始: xoxcpus is qemhpus and xakhpus)
  37. [actual] lecbpus → xoxcpus (原始: lecbpus is xoxcpus)
  38. [actual] saztpus → lecbpus (原始: saztpus is lecbpus)
  39. [actual] defrpus → saztpus and fimjpus (原始: defrpus is saztpus and fimjpus)
  40. [actual] zottpus → defrpus (原始: zottpus is defrpus)
  41. [actual] nocfpus → zottpus and xeyfpus and xotjpus (原始: nocfpus is zottpus and xeyfpus and xotjpus)
  42. [actual] jimvpus → nocfpus (原始: jimvpus is nocfpus)
  43. [actual] paxtpus → jimvpus (原始: paxtpus is jimvpus)
  44. [actual] befzpus → paxtpus and wugfpus (原始: befzpus is paxtpus and wugfpus)
  45. [actual] hojhpus → befzpus and nokppus (原始: hojhpus is befzpus and nokppus)
  46. [actual] yayppus → hojhpus and jetrpus (原始: yayppus is hojhpus and jetrpus)
  47. [actual] x → yayppus (原始: x is yayppus)
  48. [planning] x → babcpus (原始: x is babcpus)
  49. [actual] babcpus → helwpus (原始: babcpus is helwpus)
  50. [actual] helwpus → qemhpus (原始: helwpus is qemhpus)
  51. [actual] x → yayppus (原始: x is yayppus)
  52. [actual] yayppus → hojhpus (原始: yayppus is hojhpus)
  53. [actual] hojhpus → befzpus and nokppus (原始: hojhpus is befzpus and nokppus)
  54. [actual] befzpus → paxtpus and wugfpus (原始: befzpus is paxtpus and wugfpus)
  55. [actual] paxtpus → jimvpus (原始: paxtpus is jimvpus)
  56. [actual] jimvpus → nocfpus (原始: jimvpus is nocfpus)
  57. [actual] nocfpus → zottpus and xeyfpus and xotjpus (原始: nocfpus is zottpus and xeyfpus and xotjpus)
  58. [actual] zottpus → defrpus (原始: zottpus is defrpus)
  59. [actual] defrpus → saztpus and fimjpus (原始: defrpus is saztpus and fimjpus)
  60. [actual] saztpus → lecbpus (原始: saztpus is lecbpus)
  61. [actual] lecbpus → xoxcpus (原始: lecbpus is xoxcpus)
  62. [actual] xoxcpus → qemhpus and xakhpus (原始: xoxcpus is qemhpus and xakhpus)
  63. [actual] qemhpus → helwpus and vicqpus (原始: qemhpus is helwpus and vicqpus)
  64. [actual] helwpus → babcpus and dunxpus (原始: helwpus is babcpus and dunxpus)
  65. [actual] helwpus → babcpus (原始: helwpus is babcpus)
  66. [planning] x → helwpus (原始: x is helwpus)
  67. [actual] x → yayppus (原始: x is yayppus)
  68. [actual] yayppus → hojhpus (原始: yayppus is hojhpus)
  69. [actual] hojhpus → befzpus (原始: hojhpus is befzpus)
  70. [actual] befzpus → paxtpus (原始: befzpus is paxtpus)
  71. [actual] paxtpus → jimvpus (原始: paxtpus is jimvpus)
  72. [actual] jimvpus → nocfpus (原始: jimvpus is nocfpus)
  73. [actual] nocfpus → zottpus (原始: nocfpus is zottpus)
  74. [actual] zottpus → defrpus (原始: zottpus is defrpus)
  75. [actual] defrpus → saztpus (原始: defrpus is saztpus)
  76. [actual] saztpus → lecbpus (原始: saztpus is lecbpus)
  77. [actual] lecbpus → xoxcpus (原始: lecbpus is xoxcpus)
  78. [actual] xoxcpus → qemhpus (原始: xoxcpus is qemhpus)
  79. [actual] qemhpus → helwpus (原始: qemhpus is helwpus)
  80. [actual] x → babcpus (原始: x is babcpus)
  81. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  82. [actual] x → babcpus (原始: x is babcpus)
  83. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  84. [actual] x → yayppus (原始: x is yayppus)
  85. [actual] yayppus → hojhpus (原始: yayppus is hojhpus)
  86. [actual] x → hojhpus (原始: x is hojhpus)
  87. [actual] hojhpus → befzpus (原始: hojhpus is befzpus)
  88. [actual] x → befzpus (原始: x is befzpus)
  89. [actual] x → babcpus (原始: x is babcpus)
  90. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  91. [planning] x → babrpus (原始: x is babrpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 23
[后处理] 加载LoG图，包含 23 个节点
  LoG节点 0: x is babcpus or babrpus (规则: MP, 深度: 1)
  LoG节点 1: x is zottpus (规则: MP, 深度: 2)
  LoG节点 2: zottpus is babcpus or babrpus (规则: MP, 深度: 2)
  LoG节点 3: x is paxtpus (规则: MP, 深度: 3)
  LoG节点 4: paxtpus is zottpus (规则: CE, 深度: 3)
  LoG节点 5: zottpus is qemhpus (规则: MP, 深度: 3)
  LoG节点 6: qemhpus is babcpus or babrpus (规则: DI, 深度: 3)
  LoG节点 7: x is hojhpus (规则: CE, 深度: 4)
  LoG节点 8: hojhpus is paxtpus (规则: MP, 深度: 4)
  LoG节点 9: paxtpus is zottpus and xeyfpus (规则: MP, 深度: 4)
  LoG节点 10: zottpus is saztpus (规则: CE, 深度: 4)
  LoG节点 11: saztpus is qemhpus (规则: MP, 深度: 4)
  LoG节点 12: qemhpus is babcpus (规则: MP, 深度: 4)
  LoG节点 13: x is hojhpus and jetrpus (规则: MP, 深度: 5)
  LoG节点 14: hojhpus is befzpus (规则: CE, 深度: 5)
  LoG节点 15: befzpus is paxtpus (规则: CE, 深度: 5)
  LoG节点 16: paxtpus is nocfpus (规则: MP, 深度: 5)
  LoG节点 17: nocfpus is zottpus and xeyfpus (规则: CE, 深度: 5)
  LoG节点 18: zottpus is saztpus and fimjpus (规则: MP, 深度: 5)
  LoG节点 19: saztpus is xoxcpus (规则: MP, 深度: 5)
  LoG节点 20: xoxcpus is qemhpus (规则: CE, 深度: 5)
  LoG节点 21: qemhpus is helwpus (规则: CE, 深度: 5)
  LoG节点 22: helwpus is babcpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 91
   - 初始条件数: 14
   - LoG图节点数: 23

📋 初始条件列表:
    1. hojhpus is befzpus and nokppus
    2. x is yayppus
    3. defrpus is saztpus and fimjpus
    4. jimvpus is nocfpus
    5. saztpus is lecbpus
    6. befzpus is paxtpus and wugfpus
    7. lecbpus is xoxcpus
    8. paxtpus is jimvpus
    9. zottpus is defrpus
   10. yayppus is hojhpus and jetrpus
   11. xoxcpus is qemhpus and xakhpus
   12. helwpus is babcpus and dunxpus
   13. nocfpus is zottpus and xeyfpus and xotjpus
   14. qemhpus is helwpus and vicqpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 14 个前提节点

🔍 开始处理actual节点...

   节点 1: hojhpus is befzpus and nokppus
      ↻ 重复节点，计数: 2

   节点 2: x is yayppus
      ↻ 重复节点，计数: 2

   节点 3: defrpus is saztpus and fimjpus
      ↻ 重复节点，计数: 2

   节点 4: jimvpus is nocfpus
      ↻ 重复节点，计数: 2

   节点 5: saztpus is lecbpus
      ↻ 重复节点，计数: 2

   节点 6: befzpus is paxtpus and wugfpus
      ↻ 重复节点，计数: 2

   节点 7: lecbpus is xoxcpus
      ↻ 重复节点，计数: 2

   节点 8: paxtpus is jimvpus
      ↻ 重复节点，计数: 2

   节点 9: zottpus is defrpus
      ↻ 重复节点，计数: 2

   节点 10: yayppus is hojhpus and jetrpus
      ↻ 重复节点，计数: 2

   节点 11: xoxcpus is qemhpus and xakhpus
      ↻ 重复节点，计数: 2

   节点 12: helwpus is babcpus and dunxpus
      ↻ 重复节点，计数: 2

   节点 13: nocfpus is zottpus and xeyfpus and xotjpus
      ↻ 重复节点，计数: 2

   节点 14: qemhpus is helwpus and vicqpus
      ↻ 重复节点，计数: 2

   节点 15: x is yayppus
      ↻ 重复节点，计数: 3

   节点 16: yayppus is hojhpus and jetrpus
      ↻ 重复节点，计数: 3

   节点 17: yayppus is hojhpus and jetrpus
      ↻ 重复节点，计数: 4

   节点 18: x is yayppus
      ↻ 重复节点，计数: 4

   节点 19: x is yayppus
      ↻ 重复节点，计数: 5

   节点 20: yayppus is hojhpus and jetrpus
      ↻ 重复节点，计数: 5

   节点 21: yayppus is hojhpus and jetrpus
      ↻ 重复节点，计数: 6

   节点 22: x is yayppus
      ↻ 重复节点，计数: 6

   节点 23: x is hojhpus and jetrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is hojhpus and jetrpus
      ✅ 验证成功 + LoG匹配

   节点 24: helwpus is babcpus and dunxpus
      ↻ 重复节点，计数: 3

   节点 25: helwpus is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: helwpus is babcpus
      ✅ 验证成功 + LoG匹配

   节点 26: qemhpus is helwpus and vicqpus
      ↻ 重复节点，计数: 3

   节点 27: xoxcpus is qemhpus and xakhpus
      ↻ 重复节点，计数: 3

   节点 28: lecbpus is xoxcpus
      ↻ 重复节点，计数: 3

   节点 29: saztpus is lecbpus
      ↻ 重复节点，计数: 3

   节点 30: defrpus is saztpus and fimjpus
      ↻ 重复节点，计数: 3

   节点 31: zottpus is defrpus
      ↻ 重复节点，计数: 3

   节点 32: nocfpus is zottpus and xeyfpus and xotjpus
      ↻ 重复节点，计数: 3

   节点 33: jimvpus is nocfpus
      ↻ 重复节点，计数: 3

   节点 34: paxtpus is jimvpus
      ↻ 重复节点，计数: 3

   节点 35: befzpus is paxtpus and wugfpus
      ↻ 重复节点，计数: 3

   节点 36: hojhpus is befzpus and nokppus
      ↻ 重复节点，计数: 3

   节点 37: yayppus is hojhpus and jetrpus
      ↻ 重复节点，计数: 7

   节点 38: x is yayppus
      ↻ 重复节点，计数: 7

   节点 39: babcpus is helwpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 40: helwpus is qemhpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 41: x is yayppus
      ↻ 重复节点，计数: 8

   节点 42: yayppus is hojhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yayppus is hojhpus and jetrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yayppus is hojhpus and jetrpus

   节点 43: hojhpus is befzpus and nokppus
      ↻ 重复节点，计数: 4

   节点 44: befzpus is paxtpus and wugfpus
      ↻ 重复节点，计数: 4

   节点 45: paxtpus is jimvpus
      ↻ 重复节点，计数: 4

   节点 46: jimvpus is nocfpus
      ↻ 重复节点，计数: 4

   节点 47: nocfpus is zottpus and xeyfpus and xotjpus
      ↻ 重复节点，计数: 4

   节点 48: zottpus is defrpus
      ↻ 重复节点，计数: 4

   节点 49: defrpus is saztpus and fimjpus
      ↻ 重复节点，计数: 4

   节点 50: saztpus is lecbpus
      ↻ 重复节点，计数: 4

   节点 51: lecbpus is xoxcpus
      ↻ 重复节点，计数: 4

   节点 52: xoxcpus is qemhpus and xakhpus
      ↻ 重复节点，计数: 4

   节点 53: qemhpus is helwpus and vicqpus
      ↻ 重复节点，计数: 4

   节点 54: helwpus is babcpus and dunxpus
      ↻ 重复节点，计数: 4

   节点 55: helwpus is babcpus
      ↻ 重复节点，计数: 2

   节点 56: x is yayppus
      ↻ 重复节点，计数: 9

   节点 57: yayppus is hojhpus
      ↻ 重复节点，计数: 2

   节点 58: hojhpus is befzpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: hojhpus is befzpus
      ✅ 验证成功 + LoG匹配

   节点 59: befzpus is paxtpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: befzpus is paxtpus
      ✅ 验证成功 + LoG匹配

   节点 60: paxtpus is jimvpus
      ↻ 重复节点，计数: 5

   节点 61: jimvpus is nocfpus
      ↻ 重复节点，计数: 5

   节点 62: nocfpus is zottpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: nocfpus is zottpus and xeyfpus and xotjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: nocfpus is zottpus and xeyfpus and xotjpus
  ✓ 点亮LoG节点: nocfpus is zottpus and xeyfpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 63: zottpus is defrpus
      ↻ 重复节点，计数: 5

   节点 64: defrpus is saztpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: defrpus is saztpus and fimjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: defrpus is saztpus and fimjpus

   节点 65: saztpus is lecbpus
      ↻ 重复节点，计数: 5

   节点 66: lecbpus is xoxcpus
      ↻ 重复节点，计数: 5

   节点 67: xoxcpus is qemhpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: xoxcpus is qemhpus
      ✅ 验证成功 + LoG匹配

   节点 68: qemhpus is helwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: qemhpus is helwpus
      ✅ 验证成功 + LoG匹配

   节点 69: x is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is yayppus → yayppus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 14 个前提条件:
  - 前提: x is yayppus
  - 前提: yayppus is hojhpus
  - 前提: hojhpus is befzpus
  - 前提: befzpus is paxtpus
  - 前提: paxtpus is jimvpus
  - 前提: jimvpus is nocfpus
  - 前提: nocfpus is zottpus
  - 前提: zottpus is defrpus
  - 前提: defrpus is saztpus
  - 前提: saztpus is lecbpus
  - 前提: lecbpus is xoxcpus
  - 前提: xoxcpus is qemhpus
  - 前提: qemhpus is helwpus
  - 前提: helwpus is babcpus
  ✓ 点亮LoG节点: x is babcpus or babrpus
[子树点亮]     └─ 点亮依赖节点: x is zottpus (深度2)
[子树点亮]     └─ 点亮依赖节点: zottpus is babcpus or babrpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is paxtpus (深度3)
[子树点亮]     └─ 点亮依赖节点: paxtpus is zottpus (深度3)
[子树点亮]     └─ 点亮依赖节点: zottpus is qemhpus (深度3)
[子树点亮]     └─ 点亮依赖节点: qemhpus is babcpus or babrpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is hojhpus (深度4)
[子树点亮]     └─ 点亮依赖节点: hojhpus is paxtpus (深度4)
[子树点亮]     └─ 点亮依赖节点: paxtpus is zottpus and xeyfpus (深度4)
[子树点亮]     └─ 点亮依赖节点: zottpus is saztpus (深度4)
[子树点亮]     └─ 点亮依赖节点: saztpus is qemhpus (深度4)
[子树点亮]     └─ 点亮依赖节点: qemhpus is babcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: paxtpus is nocfpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zottpus is saztpus and fimjpus (深度5)
[子树点亮]     └─ 点亮依赖节点: saztpus is xoxcpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 15 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 70: x is babcpus
      ↻ 重复节点，计数: 2

   节点 71: x is babcpus or babrpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 72: x is yayppus
      ↻ 重复节点，计数: 10

   节点 73: yayppus is hojhpus
      ↻ 重复节点，计数: 3

   节点 74: x is hojhpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 75: hojhpus is befzpus
      ↻ 重复节点，计数: 2

   节点 76: x is befzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is yayppus → yayppus is befzpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is yayppus
  - 前提: yayppus is hojhpus
  - 前提: hojhpus is befzpus

   节点 77: x is babcpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 77
   - 新增节点: 15
   - 更新已存在节点: 62
   - 点亮的LoG节点: 23

🎯 推理质量统计:
   - 完美推理: 12 (节点正确 + 路径正确)
   - 部分推理: 3 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 23节点, 14前提, 复杂度1-14

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 29
   - 前提节点: 14
   - 推理节点: 13
   - 幻觉节点: 2
   - 点亮LoG节点: 23

❌ 幻觉节点详情:
   - babcpus is helwpus (出现1次)
   - helwpus is qemhpus (出现1次)

✅ 推理节点详情:
   🟢 x is hojhpus and jetrpus (出现1次, 质量:perfect)
   🟡 helwpus is babcpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['helwpus is qemhpus']
   🟢 yayppus is hojhpus (出现3次, 质量:perfect)
   🟢 hojhpus is befzpus (出现2次, 质量:perfect)
   🟢 befzpus is paxtpus (出现1次, 质量:perfect)
   🟢 nocfpus is zottpus (出现1次, 质量:perfect)
   🟢 defrpus is saztpus (出现1次, 质量:perfect)
   🟡 xoxcpus is qemhpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['helwpus is qemhpus']
   🟡 qemhpus is helwpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['babcpus is helwpus']
   🟢 x is babcpus (出现3次, 质量:perfect)
   🟢 x is babcpus or babrpus (出现1次, 质量:perfect)
   🟢 x is hojhpus (出现1次, 质量:perfect)
   🟢 x is befzpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - paxtpus is zottpus
   - hojhpus is paxtpus
   - saztpus is qemhpus
   - x is paxtpus
   - hojhpus is befzpus
   - zottpus is babcpus or babrpus
   - zottpus is saztpus and fimjpus
   - zottpus is saztpus
   - qemhpus is babcpus
   - x is babcpus or babrpus
   - xoxcpus is qemhpus
   - paxtpus is nocfpus
   - helwpus is babcpus
   - nocfpus is zottpus and xeyfpus
   - x is hojhpus
   - paxtpus is zottpus and xeyfpus
   - qemhpus is helwpus
   - x is zottpus
   - qemhpus is babcpus or babrpus
   - x is hojhpus and jetrpus
   - befzpus is paxtpus
   - saztpus is xoxcpus
   - zottpus is qemhpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus or babrpus (第5层)
   节点Coverage: 23/23 = 100.00%
   前提条件Coverage: 14/14 = 100.00%
   各推理层点亮比例:
     第1层: 10/10 = 100.00%
     第2层: 6/6 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 2/15 = 13.33%
   可推导节点: 13/15
   Strict Error Rate: 5/15 = 33.33%
   严格有效节点: 10/15

   详细分析:
     完美推理: 12 (80.00%)
     部分推理: 3 (20.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 11/50
================================================================================
记录索引: 10
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_10.json
✅ 使用缓存结果:
   - 句子数: 44
   - 提取的语句数: 61
   - 初始条件数: 13

=== Statement提取完成 ===
总句子数: 44
成功提取: 44
失败提取: 0
总statements数: 61

=== 开始清洗Statement格式 ===
原始statements数: 61
清洗后statements数: 58
过滤掉的statements数: 3
清洗后的statements:
  1. [planning] x is babcpus
  2. [planning] x is babrpus
  3. [planning] x is babspus
  4. [planning] x is babcpus
  5. [actual] tigvpus is sixppus
  6. [actual] yiptpus is mufcpus and guvhpus
  7. [actual] guzlpus is filgpus
  8. [actual] x is movtpus
  9. [actual] nedgpus is guzlpus
  10. [actual] mufcpus is babcpus and zasnpus
  11. [actual] giwvpus is betcpus
  12. [actual] sixppus is nedgpus and dithpus
  13. [actual] foylpus is giwvpus and meqdpus
  14. [actual] movtpus is yozxpus
  15. [actual] filgpus is yiptpus and havypus
  16. [actual] yozxpus is foylpus
  17. [actual] betcpus is tigvpus
  18. [actual] x is movtpus
  19. [actual] movtpus is yozxpus
  20. [actual] yozxpus is foylpus
  21. [actual] x is foylpus
  22. [actual] x is movtpus
  23. [actual] movtpus is yozxpus
  24. [actual] x is yozxpus
  25. [actual] yozxpus is foylpus
  26. [actual] x is foylpus
  27. [actual] foylpus is giwvpus and meqdpus
  28. [actual] x is giwvpus and meqdpus
  29. [actual] giwvpus is betcpus
  30. [planning] x is betcpus
  31. [actual] betcpus is tigvpus
  32. [planning] x is tigvpus
  33. [actual] tigvpus is sixppus
  34. [planning] x is sixppus
  35. [actual] sixppus is nedgpus and dithpus
  36. [actual] x is nedgpus and dithpus
  37. [actual] nedgpus is guzlpus
  38. [planning] x is guzlpus
  39. [actual] guzlpus is filgpus
  40. [planning] x is filgpus
  41. [actual] filgpus is yiptpus and havypus
  42. [actual] x is yiptpus and havypus
  43. [actual] yiptpus is mufcpus and guvhpus
  44. [actual] x is mufcpus and guvhpus
  45. [actual] mufcpus is babcpus and zasnpus
  46. [actual] x is babcpus and zasnpus
  47. [actual] x is babcpus
  48. [planning] x is babcpus
  49. [planning] x is babrpus
  50. [planning] x is babspus
  51. [actual] x is babcpus
  52. [planning] x is babcpus
  53. [planning] x is babcpus or babrpus or babspus
  54. [actual] x is babcpus
  55. [actual] x is babcpus
  56. [planning] x is babcpus
  57. [actual] x is babcpus
  58. [planning] x is babcpus or babrpus or babspus

=== 开始标准化和解析节点 ===
清洗后statements数: 58
标准化后节点数: 58
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babcpus (原始: x is babcpus)
  2. [planning] x → babrpus (原始: x is babrpus)
  3. [planning] x → babspus (原始: x is babspus)
  4. [planning] x → babcpus (原始: x is babcpus)
  5. [actual] tigvpus → sixppus (原始: tigvpus is sixppus)
  6. [actual] yiptpus → mufcpus and guvhpus (原始: yiptpus is mufcpus and guvhpus)
  7. [actual] guzlpus → filgpus (原始: guzlpus is filgpus)
  8. [actual] x → movtpus (原始: x is movtpus)
  9. [actual] nedgpus → guzlpus (原始: nedgpus is guzlpus)
  10. [actual] mufcpus → babcpus and zasnpus (原始: mufcpus is babcpus and zasnpus)
  11. [actual] giwvpus → betcpus (原始: giwvpus is betcpus)
  12. [actual] sixppus → nedgpus and dithpus (原始: sixppus is nedgpus and dithpus)
  13. [actual] foylpus → giwvpus and meqdpus (原始: foylpus is giwvpus and meqdpus)
  14. [actual] movtpus → yozxpus (原始: movtpus is yozxpus)
  15. [actual] filgpus → yiptpus and havypus (原始: filgpus is yiptpus and havypus)
  16. [actual] yozxpus → foylpus (原始: yozxpus is foylpus)
  17. [actual] betcpus → tigvpus (原始: betcpus is tigvpus)
  18. [actual] x → movtpus (原始: x is movtpus)
  19. [actual] movtpus → yozxpus (原始: movtpus is yozxpus)
  20. [actual] yozxpus → foylpus (原始: yozxpus is foylpus)
  21. [actual] x → foylpus (原始: x is foylpus)
  22. [actual] x → movtpus (原始: x is movtpus)
  23. [actual] movtpus → yozxpus (原始: movtpus is yozxpus)
  24. [actual] x → yozxpus (原始: x is yozxpus)
  25. [actual] yozxpus → foylpus (原始: yozxpus is foylpus)
  26. [actual] x → foylpus (原始: x is foylpus)
  27. [actual] foylpus → giwvpus and meqdpus (原始: foylpus is giwvpus and meqdpus)
  28. [actual] x → giwvpus and meqdpus (原始: x is giwvpus and meqdpus)
  29. [actual] giwvpus → betcpus (原始: giwvpus is betcpus)
  30. [planning] x → betcpus (原始: x is betcpus)
  31. [actual] betcpus → tigvpus (原始: betcpus is tigvpus)
  32. [planning] x → tigvpus (原始: x is tigvpus)
  33. [actual] tigvpus → sixppus (原始: tigvpus is sixppus)
  34. [planning] x → sixppus (原始: x is sixppus)
  35. [actual] sixppus → nedgpus and dithpus (原始: sixppus is nedgpus and dithpus)
  36. [actual] x → nedgpus and dithpus (原始: x is nedgpus and dithpus)
  37. [actual] nedgpus → guzlpus (原始: nedgpus is guzlpus)
  38. [planning] x → guzlpus (原始: x is guzlpus)
  39. [actual] guzlpus → filgpus (原始: guzlpus is filgpus)
  40. [planning] x → filgpus (原始: x is filgpus)
  41. [actual] filgpus → yiptpus and havypus (原始: filgpus is yiptpus and havypus)
  42. [actual] x → yiptpus and havypus (原始: x is yiptpus and havypus)
  43. [actual] yiptpus → mufcpus and guvhpus (原始: yiptpus is mufcpus and guvhpus)
  44. [actual] x → mufcpus and guvhpus (原始: x is mufcpus and guvhpus)
  45. [actual] mufcpus → babcpus and zasnpus (原始: mufcpus is babcpus and zasnpus)
  46. [actual] x → babcpus and zasnpus (原始: x is babcpus and zasnpus)
  47. [actual] x → babcpus (原始: x is babcpus)
  48. [planning] x → babcpus (原始: x is babcpus)
  49. [planning] x → babrpus (原始: x is babrpus)
  50. [planning] x → babspus (原始: x is babspus)
  51. [actual] x → babcpus (原始: x is babcpus)
  52. [planning] x → babcpus (原始: x is babcpus)
  53. [planning] x → babcpus or babrpus or babspus (原始: x is babcpus or babrpus or babspus)
  54. [actual] x → babcpus (原始: x is babcpus)
  55. [actual] x → babcpus (原始: x is babcpus)
  56. [planning] x → babcpus (原始: x is babcpus)
  57. [actual] x → babcpus (原始: x is babcpus)
  58. [planning] x → babcpus or babrpus or babspus (原始: x is babcpus or babrpus or babspus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 18
[后处理] 加载LoG图，包含 18 个节点
  LoG节点 0: x is babcpus or babrpus or babspus (规则: MP, 深度: 1)
  LoG节点 1: x is nedgpus (规则: MP, 深度: 2)
  LoG节点 2: nedgpus is babcpus or babrpus or babspus (规则: DI, 深度: 2)
  LoG节点 3: x is giwvpus (规则: CE, 深度: 3)
  LoG节点 4: giwvpus is nedgpus (规则: CE, 深度: 3)
  LoG节点 5: nedgpus is babcpus (规则: MP, 深度: 3)
  LoG节点 6: x is giwvpus and meqdpus (规则: MP, 深度: 4)
  LoG节点 7: giwvpus is nedgpus and dithpus (规则: MP, 深度: 4)
  LoG节点 8: nedgpus is yiptpus (规则: MP, 深度: 4)
  LoG节点 9: yiptpus is babcpus (规则: MP, 深度: 4)
  LoG节点 10: x is yozxpus (规则: MP, 深度: 5)
  LoG节点 11: yozxpus is giwvpus and meqdpus (规则: MP, 深度: 5)
  LoG节点 12: giwvpus is tigvpus (规则: MP, 深度: 5)
  LoG节点 13: tigvpus is nedgpus and dithpus (规则: MP, 深度: 5)
  LoG节点 14: nedgpus is filgpus (规则: MP, 深度: 5)
  LoG节点 15: filgpus is yiptpus (规则: CE, 深度: 5)
  LoG节点 16: yiptpus is mufcpus (规则: CE, 深度: 5)
  LoG节点 17: mufcpus is babcpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 58
   - 初始条件数: 13
   - LoG图节点数: 18

📋 初始条件列表:
    1. tigvpus is sixppus
    2. yiptpus is mufcpus and guvhpus
    3. guzlpus is filgpus
    4. x is movtpus
    5. nedgpus is guzlpus
    6. mufcpus is babcpus and zasnpus
    7. giwvpus is betcpus
    8. sixppus is nedgpus and dithpus
    9. foylpus is giwvpus and meqdpus
   10. movtpus is yozxpus
   11. filgpus is yiptpus and havypus
   12. yozxpus is foylpus
   13. betcpus is tigvpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 13 个前提节点

🔍 开始处理actual节点...

   节点 1: tigvpus is sixppus
      ↻ 重复节点，计数: 2

   节点 2: yiptpus is mufcpus and guvhpus
      ↻ 重复节点，计数: 2

   节点 3: guzlpus is filgpus
      ↻ 重复节点，计数: 2

   节点 4: x is movtpus
      ↻ 重复节点，计数: 2

   节点 5: nedgpus is guzlpus
      ↻ 重复节点，计数: 2

   节点 6: mufcpus is babcpus and zasnpus
      ↻ 重复节点，计数: 2

   节点 7: giwvpus is betcpus
      ↻ 重复节点，计数: 2

   节点 8: sixppus is nedgpus and dithpus
      ↻ 重复节点，计数: 2

   节点 9: foylpus is giwvpus and meqdpus
      ↻ 重复节点，计数: 2

   节点 10: movtpus is yozxpus
      ↻ 重复节点，计数: 2

   节点 11: filgpus is yiptpus and havypus
      ↻ 重复节点，计数: 2

   节点 12: yozxpus is foylpus
      ↻ 重复节点，计数: 2

   节点 13: betcpus is tigvpus
      ↻ 重复节点，计数: 2

   节点 14: x is movtpus
      ↻ 重复节点，计数: 3

   节点 15: movtpus is yozxpus
      ↻ 重复节点，计数: 3

   节点 16: yozxpus is foylpus
      ↻ 重复节点，计数: 3

   节点 17: x is foylpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is movtpus → movtpus is foylpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is movtpus
  - 前提: movtpus is yozxpus
  - 前提: yozxpus is foylpus
  ✓ 点亮LoG节点: x is yozxpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 18: x is movtpus
      ↻ 重复节点，计数: 4

   节点 19: movtpus is yozxpus
      ↻ 重复节点，计数: 4

   节点 20: x is yozxpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 21: yozxpus is foylpus
      ↻ 重复节点，计数: 4

   节点 22: x is foylpus
      ↻ 重复节点，计数: 2

   节点 23: foylpus is giwvpus and meqdpus
      ↻ 重复节点，计数: 3

   节点 24: x is giwvpus and meqdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is giwvpus and meqdpus
[子树点亮]     └─ 点亮依赖节点: yozxpus is giwvpus and meqdpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 25: giwvpus is betcpus
      ↻ 重复节点，计数: 3

   节点 26: betcpus is tigvpus
      ↻ 重复节点，计数: 3

   节点 27: tigvpus is sixppus
      ↻ 重复节点，计数: 3

   节点 28: sixppus is nedgpus and dithpus
      ↻ 重复节点，计数: 3

   节点 29: x is nedgpus and dithpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is movtpus → movtpus is nedgpus and dithpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is movtpus
  - 前提: movtpus is yozxpus
  - 前提: yozxpus is foylpus
  - 前提: foylpus is giwvpus and meqdpus
  - 前提: giwvpus is betcpus
  - 前提: betcpus is tigvpus
  - 前提: tigvpus is sixppus
  - 前提: sixppus is nedgpus and dithpus
  ✓ 点亮LoG节点: x is nedgpus
[子树点亮]     └─ 点亮依赖节点: x is giwvpus (深度3)
[子树点亮]     └─ 点亮依赖节点: giwvpus is nedgpus (深度3)
[子树点亮]     └─ 点亮依赖节点: giwvpus is nedgpus and dithpus (深度4)
[子树点亮]     └─ 点亮依赖节点: giwvpus is tigvpus (深度5)
[子树点亮]     └─ 点亮依赖节点: tigvpus is nedgpus and dithpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 30: nedgpus is guzlpus
      ↻ 重复节点，计数: 3

   节点 31: guzlpus is filgpus
      ↻ 重复节点，计数: 3

   节点 32: filgpus is yiptpus and havypus
      ↻ 重复节点，计数: 3

   节点 33: x is yiptpus and havypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is movtpus → movtpus is yiptpus and havypus
[后处理] 基于推理轨迹点亮节点，使用了 11 个前提条件:
  - 前提: x is movtpus
  - 前提: movtpus is yozxpus
  - 前提: yozxpus is foylpus
  - 前提: foylpus is giwvpus and meqdpus
  - 前提: giwvpus is betcpus
  - 前提: betcpus is tigvpus
  - 前提: tigvpus is sixppus
  - 前提: sixppus is nedgpus and dithpus
  - 前提: nedgpus is guzlpus
  - 前提: guzlpus is filgpus
  - 前提: filgpus is yiptpus and havypus
  ✓ 点亮LoG节点: nedgpus is yiptpus
[子树点亮]     └─ 点亮依赖节点: nedgpus is filgpus (深度5)
[子树点亮]     └─ 点亮依赖节点: filgpus is yiptpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 34: yiptpus is mufcpus and guvhpus
      ↻ 重复节点，计数: 3

   节点 35: x is mufcpus and guvhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is movtpus → movtpus is mufcpus and guvhpus
[后处理] 基于推理轨迹点亮节点，使用了 12 个前提条件:
  - 前提: x is movtpus
  - 前提: movtpus is yozxpus
  - 前提: yozxpus is foylpus
  - 前提: foylpus is giwvpus and meqdpus
  - 前提: giwvpus is betcpus
  - 前提: betcpus is tigvpus
  - 前提: tigvpus is sixppus
  - 前提: sixppus is nedgpus and dithpus
  - 前提: nedgpus is guzlpus
  - 前提: guzlpus is filgpus
  - 前提: filgpus is yiptpus and havypus
  - 前提: yiptpus is mufcpus and guvhpus
  ✓ 点亮LoG节点: yiptpus is mufcpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 36: mufcpus is babcpus and zasnpus
      ↻ 重复节点，计数: 3

   节点 37: x is babcpus and zasnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is movtpus → movtpus is babcpus and zasnpus
[后处理] 基于推理轨迹点亮节点，使用了 13 个前提条件:
  - 前提: x is movtpus
  - 前提: movtpus is yozxpus
  - 前提: yozxpus is foylpus
  - 前提: foylpus is giwvpus and meqdpus
  - 前提: giwvpus is betcpus
  - 前提: betcpus is tigvpus
  - 前提: tigvpus is sixppus
  - 前提: sixppus is nedgpus and dithpus
  - 前提: nedgpus is guzlpus
  - 前提: guzlpus is filgpus
  - 前提: filgpus is yiptpus and havypus
  - 前提: yiptpus is mufcpus and guvhpus
  - 前提: mufcpus is babcpus and zasnpus
  ✓ 点亮LoG节点: x is babcpus or babrpus or babspus
[子树点亮]     └─ 点亮依赖节点: nedgpus is babcpus or babrpus or babspus (深度2)
[子树点亮]     └─ 点亮依赖节点: nedgpus is babcpus (深度3)
[子树点亮]     └─ 点亮依赖节点: yiptpus is babcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: mufcpus is babcpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 38: x is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is babcpus and zasnpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is babcpus and zasnpus

   节点 39: x is babcpus
      ↻ 重复节点，计数: 2

   节点 40: x is babcpus
      ↻ 重复节点，计数: 3

   节点 41: x is babcpus
      ↻ 重复节点，计数: 4

   节点 42: x is babcpus
      ↻ 重复节点，计数: 5

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 42
   - 新增节点: 8
   - 更新已存在节点: 34
   - 点亮的LoG节点: 18

🎯 推理质量统计:
   - 完美推理: 8 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 18节点, 13前提, 复杂度1-13

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 21
   - 前提节点: 13
   - 推理节点: 8
   - 幻觉节点: 0
   - 点亮LoG节点: 18

✅ 推理节点详情:
   🟢 x is foylpus (出现2次, 质量:perfect)
   🟢 x is yozxpus (出现1次, 质量:perfect)
   🟢 x is giwvpus and meqdpus (出现1次, 质量:perfect)
   🟢 x is nedgpus and dithpus (出现1次, 质量:perfect)
   🟢 x is yiptpus and havypus (出现1次, 质量:perfect)
   🟢 x is mufcpus and guvhpus (出现1次, 质量:perfect)
   🟢 x is babcpus and zasnpus (出现1次, 质量:perfect)
   🟢 x is babcpus (出现5次, 质量:perfect)

🔥 点亮的LoG节点:
   - nedgpus is yiptpus
   - x is giwvpus and meqdpus
   - x is giwvpus
   - x is yozxpus
   - giwvpus is tigvpus
   - tigvpus is nedgpus and dithpus
   - nedgpus is babcpus
   - yiptpus is mufcpus
   - nedgpus is babcpus or babrpus or babspus
   - yiptpus is babcpus
   - mufcpus is babcpus
   - nedgpus is filgpus
   - yozxpus is giwvpus and meqdpus
   - x is babcpus or babrpus or babspus
   - filgpus is yiptpus
   - giwvpus is nedgpus
   - x is nedgpus
   - giwvpus is nedgpus and dithpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus or babrpus or babspus (第5层)
   节点Coverage: 18/18 = 100.00%
   前提条件Coverage: 13/13 = 100.00%
   各推理层点亮比例:
     第1层: 8/8 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 3/3 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/8 = 0.00%
   可推导节点: 8/8
   Strict Error Rate: 0/8 = 0.00%
   严格有效节点: 8/8

   详细分析:
     完美推理: 8 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 12/50
================================================================================
记录索引: 11
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_11.json
✅ 使用缓存结果:
   - 句子数: 65
   - 提取的语句数: 103
   - 初始条件数: 8

=== Statement提取完成 ===
总句子数: 65
成功提取: 65
失败提取: 0
总statements数: 103

=== 开始清洗Statement格式 ===
原始statements数: 103
清洗后statements数: 94
过滤掉的statements数: 9
清洗后的statements:
  1. [actual] vegwpus is ganfpus
  2. [actual] lerwpus is babgpus and rayspus
  3. [actual] x is relmpus and muqcpus
  4. [planning] x is babgpus
  5. [planning] x is babgpus
  6. [actual] lerwpus is yexbpus
  7. [actual] yexbpus is lerwpus and pazjpus
  8. [actual] x is relmpus
  9. [actual] relmpus is babgpus
  10. [actual] x is babgpus
  11. [actual] x is relmpus
  12. [actual] relmpus is babgpus
  13. [actual] x is babgpus
  14. [planning] x is babgpus and babkpus and babmpus
  15. [planning] x is babgpus
  16. [planning] x is relmpus
  17. [planning] x is babgpus
  18. [planning] x is babgpus
  19. [actual] vitwpus is pencpus and yeywpus
  20. [actual] qobqpus is pergpus
  21. [actual] bomqpus is vitwpus and qimgpus
  22. [actual] pencpus is zisdpus
  23. [actual] zisdpus is qobqpus
  24. [actual] pencpus is xafwpus
  25. [actual] pergpus is babcpus and tuqxpus
  26. [actual] x is bomqpus
  27. [planning] x is babcpus
  28. [planning] x is babrpus
  29. [planning] x is babspus
  30. [planning] x is babcpus
  31. [actual] x is bomqpus
  32. [actual] x is bomqpus
  33. [actual] bomqpus is vitwpus and qimgpus
  34. [actual] bomqpus is a subset of vitwpus
  35. [actual] bomqpus is a subset of qimgpus
  36. [actual] x is bomqpus
  37. [actual] bomqpus is vitwpus
  38. [planning] x is vitwpus
  39. [planning] x is A
  40. [planning] x is B
  41. [actual] x is bomqpus
  42. [actual] bomqpus is vitwpus
  43. [actual] x is vitwpus
  44. [actual] bomqpus is qimgpus
  45. [planning] x is qimgpus
  46. [actual] vitwpus is pencpus
  47. [actual] vitwpus is yeywpus
  48. [actual] x is vitwpus
  49. [actual] x is pencpus and yeywpus
  50. [actual] pencpus is zisdpus
  51. [actual] x is pencpus
  52. [actual] x is zisdpus
  53. [actual] pencpus is xafwpus
  54. [actual] x is xafwpus
  55. [actual] zisdpus is qobqpus
  56. [actual] x is zisdpus
  57. [actual] x is qobqpus
  58. [actual] qobqpus is pergpus
  59. [actual] x is qobqpus
  60. [actual] x is pergpus
  61. [actual] pergpus is babcpus and tuqxpus
  62. [actual] x is pergpus
  63. [actual] x is babcpus and tuqxpus
  64. [actual] x is babcpus
  65. [planning] x is babcpus
  66. [planning] x is babrpus
  67. [planning] x is babspus
  68. [actual] x is babcpus
  69. [actual] x is babcpus
  70. [actual] x is babcpus
  71. [actual] x is babcpus or babrpus or babspus
  72. [planning] x is babcpus
  73. [planning] x is babrpus
  74. [planning] x is babspus
  75. [actual] pergpus is babcpus and tuqxpus
  76. [actual] x is pergpus
  77. [actual] x is babcpus
  78. [planning] x is babcpus
  79. [actual] x is bomqpus
  80. [actual] bomqpus is vitwpus
  81. [planning] x is vitwpus
  82. [actual] vitwpus is pencpus
  83. [actual] x is pencpus
  84. [actual] pencpus is zisdpus
  85. [actual] x is zisdpus
  86. [actual] zisdpus is qobqpus
  87. [actual] x is qobqpus
  88. [actual] qobqpus is pergpus
  89. [planning] x is pergpus
  90. [actual] pergpus is babcpus
  91. [planning] x is babcpus
  92. [actual] x is babcpus
  93. [actual] x is babcpus
  94. [actual] x is babcpus or babrpus or babspus

=== 开始标准化和解析节点 ===
清洗后statements数: 94
标准化后节点数: 90
过滤掉的无效实体数: 4
标准化后的节点:
  1. [actual] vegwpus → ganfpus (原始: vegwpus is ganfpus)
  2. [actual] lerwpus → babgpus and rayspus (原始: lerwpus is babgpus and rayspus)
  3. [actual] x → relmpus and muqcpus (原始: x is relmpus and muqcpus)
  4. [planning] x → babgpus (原始: x is babgpus)
  5. [planning] x → babgpus (原始: x is babgpus)
  6. [actual] lerwpus → yexbpus (原始: lerwpus is yexbpus)
  7. [actual] yexbpus → lerwpus and pazjpus (原始: yexbpus is lerwpus and pazjpus)
  8. [actual] x → relmpus (原始: x is relmpus)
  9. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  10. [actual] x → babgpus (原始: x is babgpus)
  11. [actual] x → relmpus (原始: x is relmpus)
  12. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  13. [actual] x → babgpus (原始: x is babgpus)
  14. [planning] x → babgpus and babkpus and babmpus (原始: x is babgpus and babkpus and babmpus)
  15. [planning] x → babgpus (原始: x is babgpus)
  16. [planning] x → relmpus (原始: x is relmpus)
  17. [planning] x → babgpus (原始: x is babgpus)
  18. [planning] x → babgpus (原始: x is babgpus)
  19. [actual] vitwpus → pencpus and yeywpus (原始: vitwpus is pencpus and yeywpus)
  20. [actual] qobqpus → pergpus (原始: qobqpus is pergpus)
  21. [actual] bomqpus → vitwpus and qimgpus (原始: bomqpus is vitwpus and qimgpus)
  22. [actual] pencpus → zisdpus (原始: pencpus is zisdpus)
  23. [actual] zisdpus → qobqpus (原始: zisdpus is qobqpus)
  24. [actual] pencpus → xafwpus (原始: pencpus is xafwpus)
  25. [actual] pergpus → babcpus and tuqxpus (原始: pergpus is babcpus and tuqxpus)
  26. [actual] x → bomqpus (原始: x is bomqpus)
  27. [planning] x → babcpus (原始: x is babcpus)
  28. [planning] x → babrpus (原始: x is babrpus)
  29. [planning] x → babspus (原始: x is babspus)
  30. [planning] x → babcpus (原始: x is babcpus)
  31. [actual] x → bomqpus (原始: x is bomqpus)
  32. [actual] x → bomqpus (原始: x is bomqpus)
  33. [actual] bomqpus → vitwpus and qimgpus (原始: bomqpus is vitwpus and qimgpus)
  34. [actual] x → bomqpus (原始: x is bomqpus)
  35. [actual] bomqpus → vitwpus (原始: bomqpus is vitwpus)
  36. [planning] x → vitwpus (原始: x is vitwpus)
  37. [actual] x → bomqpus (原始: x is bomqpus)
  38. [actual] bomqpus → vitwpus (原始: bomqpus is vitwpus)
  39. [actual] x → vitwpus (原始: x is vitwpus)
  40. [actual] bomqpus → qimgpus (原始: bomqpus is qimgpus)
  41. [planning] x → qimgpus (原始: x is qimgpus)
  42. [actual] vitwpus → pencpus (原始: vitwpus is pencpus)
  43. [actual] vitwpus → yeywpus (原始: vitwpus is yeywpus)
  44. [actual] x → vitwpus (原始: x is vitwpus)
  45. [actual] x → pencpus and yeywpus (原始: x is pencpus and yeywpus)
  46. [actual] pencpus → zisdpus (原始: pencpus is zisdpus)
  47. [actual] x → pencpus (原始: x is pencpus)
  48. [actual] x → zisdpus (原始: x is zisdpus)
  49. [actual] pencpus → xafwpus (原始: pencpus is xafwpus)
  50. [actual] x → xafwpus (原始: x is xafwpus)
  51. [actual] zisdpus → qobqpus (原始: zisdpus is qobqpus)
  52. [actual] x → zisdpus (原始: x is zisdpus)
  53. [actual] x → qobqpus (原始: x is qobqpus)
  54. [actual] qobqpus → pergpus (原始: qobqpus is pergpus)
  55. [actual] x → qobqpus (原始: x is qobqpus)
  56. [actual] x → pergpus (原始: x is pergpus)
  57. [actual] pergpus → babcpus and tuqxpus (原始: pergpus is babcpus and tuqxpus)
  58. [actual] x → pergpus (原始: x is pergpus)
  59. [actual] x → babcpus and tuqxpus (原始: x is babcpus and tuqxpus)
  60. [actual] x → babcpus (原始: x is babcpus)
  61. [planning] x → babcpus (原始: x is babcpus)
  62. [planning] x → babrpus (原始: x is babrpus)
  63. [planning] x → babspus (原始: x is babspus)
  64. [actual] x → babcpus (原始: x is babcpus)
  65. [actual] x → babcpus (原始: x is babcpus)
  66. [actual] x → babcpus (原始: x is babcpus)
  67. [actual] x → babcpus or babrpus or babspus (原始: x is babcpus or babrpus or babspus)
  68. [planning] x → babcpus (原始: x is babcpus)
  69. [planning] x → babrpus (原始: x is babrpus)
  70. [planning] x → babspus (原始: x is babspus)
  71. [actual] pergpus → babcpus and tuqxpus (原始: pergpus is babcpus and tuqxpus)
  72. [actual] x → pergpus (原始: x is pergpus)
  73. [actual] x → babcpus (原始: x is babcpus)
  74. [planning] x → babcpus (原始: x is babcpus)
  75. [actual] x → bomqpus (原始: x is bomqpus)
  76. [actual] bomqpus → vitwpus (原始: bomqpus is vitwpus)
  77. [planning] x → vitwpus (原始: x is vitwpus)
  78. [actual] vitwpus → pencpus (原始: vitwpus is pencpus)
  79. [actual] x → pencpus (原始: x is pencpus)
  80. [actual] pencpus → zisdpus (原始: pencpus is zisdpus)
  81. [actual] x → zisdpus (原始: x is zisdpus)
  82. [actual] zisdpus → qobqpus (原始: zisdpus is qobqpus)
  83. [actual] x → qobqpus (原始: x is qobqpus)
  84. [actual] qobqpus → pergpus (原始: qobqpus is pergpus)
  85. [planning] x → pergpus (原始: x is pergpus)
  86. [actual] pergpus → babcpus (原始: pergpus is babcpus)
  87. [planning] x → babcpus (原始: x is babcpus)
  88. [actual] x → babcpus (原始: x is babcpus)
  89. [actual] x → babcpus (原始: x is babcpus)
  90. [actual] x → babcpus or babrpus or babspus (原始: x is babcpus or babrpus or babspus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 13
[后处理] 加载LoG图，包含 13 个节点
  LoG节点 0: x is babcpus or babrpus or babspus (规则: MP, 深度: 1)
  LoG节点 1: x is zisdpus (规则: CE, 深度: 2)
  LoG节点 2: zisdpus is babcpus or babrpus or babspus (规则: DI, 深度: 2)
  LoG节点 3: x is zisdpus and xafwpus (规则: MP, 深度: 3)
  LoG节点 4: zisdpus is babspus or babcpus (规则: DI, 深度: 3)
  LoG节点 5: x is vitwpus (规则: CE, 深度: 4)
  LoG节点 6: vitwpus is zisdpus and xafwpus (规则: MP, 深度: 4)
  LoG节点 7: zisdpus is babcpus (规则: MP, 深度: 4)
  LoG节点 8: x is vitwpus and qimgpus (规则: MP, 深度: 5)
  LoG节点 9: vitwpus is pencpus (规则: CE, 深度: 5)
  LoG节点 10: pencpus is zisdpus and xafwpus (规则: CI, 深度: 5)
  LoG节点 11: zisdpus is pergpus (规则: MP, 深度: 5)
  LoG节点 12: pergpus is babcpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 90
   - 初始条件数: 8
   - LoG图节点数: 13

📋 初始条件列表:
    1. vitwpus is pencpus and yeywpus
    2. qobqpus is pergpus
    3. bomqpus is vitwpus and qimgpus
    4. pencpus is zisdpus
    5. zisdpus is qobqpus
    6. pencpus is xafwpus
    7. pergpus is babcpus and tuqxpus
    8. x is bomqpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 8 个前提节点

🔍 开始处理actual节点...

   节点 1: vegwpus is ganfpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 2: lerwpus is babgpus and rayspus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 3: x is relmpus and muqcpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 4: lerwpus is yexbpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 5: yexbpus is lerwpus and pazjpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 6: x is relmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is relmpus and muqcpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is relmpus and muqcpus

   节点 7: relmpus is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 8: x is babgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is relmpus → relmpus is babgpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is relmpus
  - 前提: relmpus is babgpus

   节点 9: x is relmpus
      ↻ 重复节点，计数: 2

   节点 10: relmpus is babgpus
      ↻ 重复节点，计数: 2

   节点 11: x is babgpus
      ↻ 重复节点，计数: 2

   节点 12: vitwpus is pencpus and yeywpus
      ↻ 重复节点，计数: 2

   节点 13: qobqpus is pergpus
      ↻ 重复节点，计数: 2

   节点 14: bomqpus is vitwpus and qimgpus
      ↻ 重复节点，计数: 2

   节点 15: pencpus is zisdpus
      ↻ 重复节点，计数: 2

   节点 16: zisdpus is qobqpus
      ↻ 重复节点，计数: 2

   节点 17: pencpus is xafwpus
      ↻ 重复节点，计数: 2

   节点 18: pergpus is babcpus and tuqxpus
      ↻ 重复节点，计数: 2

   节点 19: x is bomqpus
      ↻ 重复节点，计数: 2

   节点 20: x is bomqpus
      ↻ 重复节点，计数: 3

   节点 21: x is bomqpus
      ↻ 重复节点，计数: 4

   节点 22: bomqpus is vitwpus and qimgpus
      ↻ 重复节点，计数: 3

   节点 23: x is bomqpus
      ↻ 重复节点，计数: 5

   节点 24: bomqpus is vitwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: bomqpus is vitwpus and qimgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: bomqpus is vitwpus and qimgpus

   节点 25: x is bomqpus
      ↻ 重复节点，计数: 6

   节点 26: bomqpus is vitwpus
      ↻ 重复节点，计数: 2

   节点 27: x is vitwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is vitwpus
[子树点亮]     └─ 点亮依赖节点: x is vitwpus and qimgpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 28: bomqpus is qimgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: bomqpus is vitwpus and qimgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: bomqpus is vitwpus and qimgpus

   节点 29: vitwpus is pencpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: vitwpus is pencpus
      ✅ 验证成功 + LoG匹配

   节点 30: vitwpus is yeywpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: vitwpus is pencpus and yeywpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: vitwpus is pencpus and yeywpus

   节点 31: x is vitwpus
      ↻ 重复节点，计数: 2

   节点 32: x is pencpus and yeywpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is bomqpus → bomqpus is pencpus and yeywpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is bomqpus
  - 前提: bomqpus is vitwpus
  - 前提: vitwpus is pencpus and yeywpus

   节点 33: pencpus is zisdpus
      ↻ 重复节点，计数: 3

   节点 34: x is pencpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is pencpus and yeywpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is pencpus and yeywpus

   节点 35: x is zisdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is zisdpus
[子树点亮]     └─ 点亮依赖节点: x is zisdpus and xafwpus (深度3)
[子树点亮]     └─ 点亮依赖节点: vitwpus is zisdpus and xafwpus (深度4)
[子树点亮]     └─ 点亮依赖节点: pencpus is zisdpus and xafwpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 36: pencpus is xafwpus
      ↻ 重复节点，计数: 3

   节点 37: x is xafwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is bomqpus → bomqpus is xafwpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is bomqpus
  - 前提: bomqpus is vitwpus
  - 前提: vitwpus is pencpus
  - 前提: pencpus is xafwpus

   节点 38: zisdpus is qobqpus
      ↻ 重复节点，计数: 3

   节点 39: x is zisdpus
      ↻ 重复节点，计数: 2

   节点 40: x is qobqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is bomqpus → bomqpus is qobqpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is bomqpus
  - 前提: bomqpus is vitwpus
  - 前提: vitwpus is pencpus
  - 前提: pencpus is zisdpus
  - 前提: zisdpus is qobqpus

   节点 41: qobqpus is pergpus
      ↻ 重复节点，计数: 3

   节点 42: x is qobqpus
      ↻ 重复节点，计数: 2

   节点 43: x is pergpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is bomqpus → bomqpus is pergpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is bomqpus
  - 前提: bomqpus is vitwpus
  - 前提: vitwpus is pencpus
  - 前提: pencpus is zisdpus
  - 前提: zisdpus is qobqpus
  - 前提: qobqpus is pergpus
  ✓ 点亮LoG节点: zisdpus is pergpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 44: pergpus is babcpus and tuqxpus
      ↻ 重复节点，计数: 3

   节点 45: x is pergpus
      ↻ 重复节点，计数: 2

   节点 46: x is babcpus and tuqxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is bomqpus → bomqpus is babcpus and tuqxpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is bomqpus
  - 前提: bomqpus is vitwpus
  - 前提: vitwpus is pencpus
  - 前提: pencpus is zisdpus
  - 前提: zisdpus is qobqpus
  - 前提: qobqpus is pergpus
  - 前提: pergpus is babcpus and tuqxpus
  ✓ 点亮LoG节点: x is babcpus or babrpus or babspus
[子树点亮]     └─ 点亮依赖节点: zisdpus is babcpus or babrpus or babspus (深度2)
[子树点亮]     └─ 点亮依赖节点: zisdpus is babspus or babcpus (深度3)
[子树点亮]     └─ 点亮依赖节点: zisdpus is babcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: pergpus is babcpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 47: x is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is babcpus and tuqxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is babcpus and tuqxpus

   节点 48: x is babcpus
      ↻ 重复节点，计数: 2

   节点 49: x is babcpus
      ↻ 重复节点，计数: 3

   节点 50: x is babcpus
      ↻ 重复节点，计数: 4

   节点 51: x is babcpus or babrpus or babspus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 52: pergpus is babcpus and tuqxpus
      ↻ 重复节点，计数: 4

   节点 53: x is pergpus
      ↻ 重复节点，计数: 3

   节点 54: x is babcpus
      ↻ 重复节点，计数: 5

   节点 55: x is bomqpus
      ↻ 重复节点，计数: 7

   节点 56: bomqpus is vitwpus
      ↻ 重复节点，计数: 3

   节点 57: vitwpus is pencpus
      ↻ 重复节点，计数: 2

   节点 58: x is pencpus
      ↻ 重复节点，计数: 2

   节点 59: pencpus is zisdpus
      ↻ 重复节点，计数: 4

   节点 60: x is zisdpus
      ↻ 重复节点，计数: 3

   节点 61: zisdpus is qobqpus
      ↻ 重复节点，计数: 4

   节点 62: x is qobqpus
      ↻ 重复节点，计数: 3

   节点 63: qobqpus is pergpus
      ↻ 重复节点，计数: 4

   节点 64: pergpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 65: x is babcpus
      ↻ 重复节点，计数: 6

   节点 66: x is babcpus
      ↻ 重复节点，计数: 7

   节点 67: x is babcpus or babrpus or babspus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 67
   - 新增节点: 23
   - 更新已存在节点: 44
   - 点亮的LoG节点: 13

🎯 推理质量统计:
   - 完美推理: 9 (节点正确 + 路径正确)
   - 部分推理: 12 (节点正确 + 路径部分错误)
   - 无效推理: 2 (节点错误或路径完全错误)
[LoG分析] LoG图: 13节点, 8前提, 复杂度1-8

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 31
   - 前提节点: 8
   - 推理节点: 17
   - 幻觉节点: 6
   - 点亮LoG节点: 13

❌ 幻觉节点详情:
   - vegwpus is ganfpus (出现1次)
   - lerwpus is babgpus and rayspus (出现1次)
   - x is relmpus and muqcpus (出现1次)
   - lerwpus is yexbpus (出现1次)
   - yexbpus is lerwpus and pazjpus (出现1次)
   - relmpus is babgpus (出现2次)

✅ 推理节点详情:
   🟡 x is relmpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is babgpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus', 'relmpus is babgpus']
   🟢 bomqpus is vitwpus (出现3次, 质量:perfect)
   🟡 x is vitwpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟢 bomqpus is qimgpus (出现1次, 质量:perfect)
   🟢 vitwpus is pencpus (出现2次, 质量:perfect)
   🟢 vitwpus is yeywpus (出现1次, 质量:perfect)
   🟡 x is pencpus and yeywpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is pencpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is zisdpus (出现3次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is xafwpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is qobqpus (出现3次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is pergpus (出现3次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is babcpus and tuqxpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is babcpus (出现7次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is babcpus or babrpus or babspus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟢 pergpus is babcpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is zisdpus
   - vitwpus is pencpus
   - zisdpus is babcpus
   - x is vitwpus and qimgpus
   - zisdpus is babspus or babcpus
   - zisdpus is pergpus
   - x is vitwpus
   - zisdpus is babcpus or babrpus or babspus
   - x is babcpus or babrpus or babspus
   - pencpus is zisdpus and xafwpus
   - x is zisdpus and xafwpus
   - pergpus is babcpus
   - vitwpus is zisdpus and xafwpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus or babrpus or babspus (第5层)
   节点Coverage: 13/13 = 100.00%
   前提条件Coverage: 8/8 = 100.00%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 6/23 = 26.09%
   可推导节点: 17/23
   Strict Error Rate: 18/23 = 78.26%
   严格有效节点: 5/23

   详细分析:
     完美推理: 9 (39.13%)
     部分推理: 12 (52.17%)
     无效推理: 2 (8.70%)

================================================================================
处理记录 13/50
================================================================================
记录索引: 12
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_12.json
✅ 使用缓存结果:
   - 句子数: 67
   - 提取的语句数: 76
   - 初始条件数: 9

=== Statement提取完成 ===
总句子数: 67
成功提取: 67
失败提取: 0
总statements数: 76

=== 开始清洗Statement格式 ===
原始statements数: 76
清洗后statements数: 71
过滤掉的statements数: 5
清洗后的statements:
  1. [planning] x is babcpus
  2. [planning] x is babrpus
  3. [planning] x is babspus
  4. [actual] husbpus is babcpus and jugwpus
  5. [actual] husbpus is babcpus and jugwpus
  6. [actual] x is taprpus
  7. [planning] taprpus is babcpus
  8. [planning] taprpus is the others
  9. [actual] x is taprpus
  10. [actual] x is taprpus
  11. [actual] zusvpus is bowtpus
  12. [actual] focnpus is lomzpus
  13. [actual] hodbpus is zusvpus
  14. [actual] husbpus is babcpus and jugwpus
  15. [actual] lomzpus is hodbpus and luplpus
  16. [actual] taprpus is focnpus and yiptpus
  17. [actual] vowdpus is husbpus
  18. [actual] bowtpus is vowdpus
  19. [planning] x is babcpus
  20. [planning] x is babrpus
  21. [planning] x is babspus
  22. [actual] x is taprpus
  23. [actual] taprpus is focnpus and yiptpus
  24. [actual] x is focnpus and yiptpus
  25. [actual] focnpus is lomzpus
  26. [actual] x is lomzpus
  27. [planning] x is lomzpus
  28. [actual] lomzpus is hodbpus and luplpus
  29. [actual] x is hodbpus and luplpus
  30. [actual] hodbpus is zusvpus
  31. [planning] x is zusvpus
  32. [actual] zusvpus is bowtpus
  33. [planning] x is bowtpus
  34. [actual] bowtpus is vowdpus
  35. [planning] x is vowdpus
  36. [actual] vowdpus is husbpus
  37. [planning] x is husbpus
  38. [actual] husbpus is babcpus and jugwpus
  39. [planning] x is babcpus and jugwpus
  40. [actual] x is babcpus
  41. [planning] x is babcpus
  42. [planning] x is babrpus
  43. [planning] x is babspus
  44. [actual] x is babcpus
  45. [planning] x is babcpus
  46. [planning] x is babcpus or babrpus or babspus
  47. [actual] x is babcpus
  48. [actual] x is babcpus
  49. [actual] x is taprpus
  50. [actual] taprpus is focnpus
  51. [planning] x is focnpus
  52. [actual] focnpus is lomzpus
  53. [planning] x is lomzpus
  54. [actual] lomzpus is hodbpus and luplpus
  55. [planning] x is hodbpus
  56. [actual] hodbpus is zusvpus
  57. [planning] x is zusvpus
  58. [actual] zusvpus is bowtpus
  59. [planning] x is bowtpus
  60. [actual] bowtpus is vowdpus
  61. [actual] x is vowdpus
  62. [actual] vowdpus is husbpus
  63. [actual] x is husbpus
  64. [actual] husbpus is babcpus
  65. [actual] x is babcpus
  66. [actual] x is babcpus
  67. [planning] x is babcpus or babrpus or babspus
  68. [actual] x is babcpus
  69. [planning] x is babcpus
  70. [actual] x is babcpus
  71. [planning] x is babrpus and babspus

=== 开始标准化和解析节点 ===
清洗后statements数: 71
标准化后节点数: 70
过滤掉的无效实体数: 1
标准化后的节点:
  1. [planning] x → babcpus (原始: x is babcpus)
  2. [planning] x → babrpus (原始: x is babrpus)
  3. [planning] x → babspus (原始: x is babspus)
  4. [actual] husbpus → babcpus and jugwpus (原始: husbpus is babcpus and jugwpus)
  5. [actual] husbpus → babcpus and jugwpus (原始: husbpus is babcpus and jugwpus)
  6. [actual] x → taprpus (原始: x is taprpus)
  7. [planning] taprpus → babcpus (原始: taprpus is babcpus)
  8. [actual] x → taprpus (原始: x is taprpus)
  9. [actual] x → taprpus (原始: x is taprpus)
  10. [actual] zusvpus → bowtpus (原始: zusvpus is bowtpus)
  11. [actual] focnpus → lomzpus (原始: focnpus is lomzpus)
  12. [actual] hodbpus → zusvpus (原始: hodbpus is zusvpus)
  13. [actual] husbpus → babcpus and jugwpus (原始: husbpus is babcpus and jugwpus)
  14. [actual] lomzpus → hodbpus and luplpus (原始: lomzpus is hodbpus and luplpus)
  15. [actual] taprpus → focnpus and yiptpus (原始: taprpus is focnpus and yiptpus)
  16. [actual] vowdpus → husbpus (原始: vowdpus is husbpus)
  17. [actual] bowtpus → vowdpus (原始: bowtpus is vowdpus)
  18. [planning] x → babcpus (原始: x is babcpus)
  19. [planning] x → babrpus (原始: x is babrpus)
  20. [planning] x → babspus (原始: x is babspus)
  21. [actual] x → taprpus (原始: x is taprpus)
  22. [actual] taprpus → focnpus and yiptpus (原始: taprpus is focnpus and yiptpus)
  23. [actual] x → focnpus and yiptpus (原始: x is focnpus and yiptpus)
  24. [actual] focnpus → lomzpus (原始: focnpus is lomzpus)
  25. [actual] x → lomzpus (原始: x is lomzpus)
  26. [planning] x → lomzpus (原始: x is lomzpus)
  27. [actual] lomzpus → hodbpus and luplpus (原始: lomzpus is hodbpus and luplpus)
  28. [actual] x → hodbpus and luplpus (原始: x is hodbpus and luplpus)
  29. [actual] hodbpus → zusvpus (原始: hodbpus is zusvpus)
  30. [planning] x → zusvpus (原始: x is zusvpus)
  31. [actual] zusvpus → bowtpus (原始: zusvpus is bowtpus)
  32. [planning] x → bowtpus (原始: x is bowtpus)
  33. [actual] bowtpus → vowdpus (原始: bowtpus is vowdpus)
  34. [planning] x → vowdpus (原始: x is vowdpus)
  35. [actual] vowdpus → husbpus (原始: vowdpus is husbpus)
  36. [planning] x → husbpus (原始: x is husbpus)
  37. [actual] husbpus → babcpus and jugwpus (原始: husbpus is babcpus and jugwpus)
  38. [planning] x → babcpus and jugwpus (原始: x is babcpus and jugwpus)
  39. [actual] x → babcpus (原始: x is babcpus)
  40. [planning] x → babcpus (原始: x is babcpus)
  41. [planning] x → babrpus (原始: x is babrpus)
  42. [planning] x → babspus (原始: x is babspus)
  43. [actual] x → babcpus (原始: x is babcpus)
  44. [planning] x → babcpus (原始: x is babcpus)
  45. [planning] x → babcpus or babrpus or babspus (原始: x is babcpus or babrpus or babspus)
  46. [actual] x → babcpus (原始: x is babcpus)
  47. [actual] x → babcpus (原始: x is babcpus)
  48. [actual] x → taprpus (原始: x is taprpus)
  49. [actual] taprpus → focnpus (原始: taprpus is focnpus)
  50. [planning] x → focnpus (原始: x is focnpus)
  51. [actual] focnpus → lomzpus (原始: focnpus is lomzpus)
  52. [planning] x → lomzpus (原始: x is lomzpus)
  53. [actual] lomzpus → hodbpus and luplpus (原始: lomzpus is hodbpus and luplpus)
  54. [planning] x → hodbpus (原始: x is hodbpus)
  55. [actual] hodbpus → zusvpus (原始: hodbpus is zusvpus)
  56. [planning] x → zusvpus (原始: x is zusvpus)
  57. [actual] zusvpus → bowtpus (原始: zusvpus is bowtpus)
  58. [planning] x → bowtpus (原始: x is bowtpus)
  59. [actual] bowtpus → vowdpus (原始: bowtpus is vowdpus)
  60. [actual] x → vowdpus (原始: x is vowdpus)
  61. [actual] vowdpus → husbpus (原始: vowdpus is husbpus)
  62. [actual] x → husbpus (原始: x is husbpus)
  63. [actual] husbpus → babcpus (原始: husbpus is babcpus)
  64. [actual] x → babcpus (原始: x is babcpus)
  65. [actual] x → babcpus (原始: x is babcpus)
  66. [planning] x → babcpus or babrpus or babspus (原始: x is babcpus or babrpus or babspus)
  67. [actual] x → babcpus (原始: x is babcpus)
  68. [planning] x → babcpus (原始: x is babcpus)
  69. [actual] x → babcpus (原始: x is babcpus)
  70. [planning] x → babrpus and babspus (原始: x is babrpus and babspus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 13
[后处理] 加载LoG图，包含 13 个节点
  LoG节点 0: x is babcpus or babrpus or babspus (规则: DI, 深度: 1)
  LoG节点 1: x is babrpus or babcpus (规则: MP, 深度: 2)
  LoG节点 2: x is hodbpus (规则: MP, 深度: 3)
  LoG节点 3: hodbpus is babrpus or babcpus (规则: MP, 深度: 3)
  LoG节点 4: x is focnpus (规则: CE, 深度: 4)
  LoG节点 5: focnpus is hodbpus (规则: CE, 深度: 4)
  LoG节点 6: hodbpus is husbpus (规则: MP, 深度: 4)
  LoG节点 7: husbpus is babrpus or babcpus (规则: DI, 深度: 4)
  LoG节点 8: x is focnpus and yiptpus (规则: MP, 深度: 5)
  LoG节点 9: focnpus is hodbpus and luplpus (规则: MP, 深度: 5)
  LoG节点 10: hodbpus is bowtpus (规则: MP, 深度: 5)
  LoG节点 11: bowtpus is husbpus (规则: MP, 深度: 5)
  LoG节点 12: husbpus is babcpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 70
   - 初始条件数: 9
   - LoG图节点数: 13

📋 初始条件列表:
    1. x is taprpus
    2. zusvpus is bowtpus
    3. focnpus is lomzpus
    4. hodbpus is zusvpus
    5. husbpus is babcpus and jugwpus
    6. lomzpus is hodbpus and luplpus
    7. taprpus is focnpus and yiptpus
    8. vowdpus is husbpus
    9. bowtpus is vowdpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 9 个前提节点

🔍 开始处理actual节点...

   节点 1: husbpus is babcpus and jugwpus
      ↻ 重复节点，计数: 2

   节点 2: husbpus is babcpus and jugwpus
      ↻ 重复节点，计数: 3

   节点 3: x is taprpus
      ↻ 重复节点，计数: 2

   节点 4: x is taprpus
      ↻ 重复节点，计数: 3

   节点 5: x is taprpus
      ↻ 重复节点，计数: 4

   节点 6: zusvpus is bowtpus
      ↻ 重复节点，计数: 2

   节点 7: focnpus is lomzpus
      ↻ 重复节点，计数: 2

   节点 8: hodbpus is zusvpus
      ↻ 重复节点，计数: 2

   节点 9: husbpus is babcpus and jugwpus
      ↻ 重复节点，计数: 4

   节点 10: lomzpus is hodbpus and luplpus
      ↻ 重复节点，计数: 2

   节点 11: taprpus is focnpus and yiptpus
      ↻ 重复节点，计数: 2

   节点 12: vowdpus is husbpus
      ↻ 重复节点，计数: 2

   节点 13: bowtpus is vowdpus
      ↻ 重复节点，计数: 2

   节点 14: x is taprpus
      ↻ 重复节点，计数: 5

   节点 15: taprpus is focnpus and yiptpus
      ↻ 重复节点，计数: 3

   节点 16: x is focnpus and yiptpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is focnpus and yiptpus
      ✅ 验证成功 + LoG匹配

   节点 17: focnpus is lomzpus
      ↻ 重复节点，计数: 3

   节点 18: x is lomzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is taprpus → taprpus is lomzpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is taprpus
  - 前提: taprpus is focnpus and yiptpus
  - 前提: focnpus is lomzpus
  ✓ 点亮LoG节点: x is focnpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 19: lomzpus is hodbpus and luplpus
      ↻ 重复节点，计数: 3

   节点 20: x is hodbpus and luplpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is taprpus → taprpus is hodbpus and luplpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is taprpus
  - 前提: taprpus is focnpus and yiptpus
  - 前提: focnpus is lomzpus
  - 前提: lomzpus is hodbpus and luplpus
  ✓ 点亮LoG节点: x is hodbpus
[子树点亮]     └─ 点亮依赖节点: focnpus is hodbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: focnpus is hodbpus and luplpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 21: hodbpus is zusvpus
      ↻ 重复节点，计数: 3

   节点 22: zusvpus is bowtpus
      ↻ 重复节点，计数: 3

   节点 23: bowtpus is vowdpus
      ↻ 重复节点，计数: 3

   节点 24: vowdpus is husbpus
      ↻ 重复节点，计数: 3

   节点 25: husbpus is babcpus and jugwpus
      ↻ 重复节点，计数: 5

   节点 26: x is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is taprpus → taprpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is taprpus
  - 前提: taprpus is focnpus and yiptpus
  - 前提: focnpus is lomzpus
  - 前提: lomzpus is hodbpus and luplpus
  - 前提: hodbpus is zusvpus
  - 前提: zusvpus is bowtpus
  - 前提: bowtpus is vowdpus
  - 前提: vowdpus is husbpus
  - 前提: husbpus is babcpus and jugwpus
  ✓ 点亮LoG节点: x is babcpus or babrpus or babspus
[子树点亮]     └─ 点亮依赖节点: x is babrpus or babcpus (深度2)
[子树点亮]     └─ 点亮依赖节点: hodbpus is babrpus or babcpus (深度3)
[子树点亮]     └─ 点亮依赖节点: hodbpus is husbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: husbpus is babrpus or babcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: hodbpus is bowtpus (深度5)
[子树点亮]     └─ 点亮依赖节点: bowtpus is husbpus (深度5)
[子树点亮]     └─ 点亮依赖节点: husbpus is babcpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 7 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 27: x is babcpus
      ↻ 重复节点，计数: 2

   节点 28: x is babcpus
      ↻ 重复节点，计数: 3

   节点 29: x is babcpus
      ↻ 重复节点，计数: 4

   节点 30: x is taprpus
      ↻ 重复节点，计数: 6

   节点 31: taprpus is focnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: taprpus is focnpus and yiptpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: taprpus is focnpus and yiptpus

   节点 32: focnpus is lomzpus
      ↻ 重复节点，计数: 4

   节点 33: lomzpus is hodbpus and luplpus
      ↻ 重复节点，计数: 4

   节点 34: hodbpus is zusvpus
      ↻ 重复节点，计数: 4

   节点 35: zusvpus is bowtpus
      ↻ 重复节点，计数: 4

   节点 36: bowtpus is vowdpus
      ↻ 重复节点，计数: 4

   节点 37: x is vowdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is taprpus → taprpus is vowdpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is taprpus
  - 前提: taprpus is focnpus
  - 前提: focnpus is lomzpus
  - 前提: lomzpus is hodbpus and luplpus
  - 前提: hodbpus is zusvpus
  - 前提: zusvpus is bowtpus
  - 前提: bowtpus is vowdpus

   节点 38: vowdpus is husbpus
      ↻ 重复节点，计数: 4

   节点 39: x is husbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is taprpus → taprpus is husbpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is taprpus
  - 前提: taprpus is focnpus
  - 前提: focnpus is lomzpus
  - 前提: lomzpus is hodbpus and luplpus
  - 前提: hodbpus is zusvpus
  - 前提: zusvpus is bowtpus
  - 前提: bowtpus is vowdpus
  - 前提: vowdpus is husbpus

   节点 40: husbpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 41: x is babcpus
      ↻ 重复节点，计数: 5

   节点 42: x is babcpus
      ↻ 重复节点，计数: 6

   节点 43: x is babcpus
      ↻ 重复节点，计数: 7

   节点 44: x is babcpus
      ↻ 重复节点，计数: 8

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 44
   - 新增节点: 8
   - 更新已存在节点: 36
   - 点亮的LoG节点: 13

🎯 推理质量统计:
   - 完美推理: 8 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 13节点, 9前提, 复杂度1-9

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 17
   - 前提节点: 9
   - 推理节点: 8
   - 幻觉节点: 0
   - 点亮LoG节点: 13

✅ 推理节点详情:
   🟢 x is focnpus and yiptpus (出现1次, 质量:perfect)
   🟢 x is lomzpus (出现1次, 质量:perfect)
   🟢 x is hodbpus and luplpus (出现1次, 质量:perfect)
   🟢 x is babcpus (出现8次, 质量:perfect)
   🟢 taprpus is focnpus (出现1次, 质量:perfect)
   🟢 x is vowdpus (出现1次, 质量:perfect)
   🟢 x is husbpus (出现1次, 质量:perfect)
   🟢 husbpus is babcpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is focnpus and yiptpus
   - x is babcpus or babrpus or babspus
   - husbpus is babrpus or babcpus
   - focnpus is hodbpus
   - hodbpus is bowtpus
   - bowtpus is husbpus
   - hodbpus is babrpus or babcpus
   - x is focnpus
   - x is hodbpus
   - husbpus is babcpus
   - x is babrpus or babcpus
   - hodbpus is husbpus
   - focnpus is hodbpus and luplpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus or babrpus or babspus (第5层)
   节点Coverage: 13/13 = 100.00%
   前提条件Coverage: 9/9 = 100.00%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/8 = 0.00%
   可推导节点: 8/8
   Strict Error Rate: 0/8 = 0.00%
   严格有效节点: 8/8

   详细分析:
     完美推理: 8 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 14/50
================================================================================
记录索引: 13
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_13.json
✅ 使用缓存结果:
   - 句子数: 84
   - 提取的语句数: 86
   - 初始条件数: 5

=== Statement提取完成 ===
总句子数: 84
成功提取: 84
失败提取: 0
总statements数: 86

=== 开始清洗Statement格式 ===
原始statements数: 86
清洗后statements数: 61
过滤掉的statements数: 25
清洗后的statements:
  1. [planning] x is babcpus or babrpus
  2. [actual] x is fibcpus
  3. [actual] nivtpus is zipmpus and vuynpus
  4. [actual] nivtpus is zipmpus and vuynpus
  5. [actual] boffpus is babrpus and ruvjpus and juztpus
  6. [actual] boffpus is babrpus and ruvjpus and juztpus
  7. [actual] zipmpus is boffpus
  8. [actual] zipmpus is boffpus
  9. [actual] fibcpus is nivtpus
  10. [actual] fibcpus is nivtpus
  11. [planning] x is babcpus or babrpus
  12. [planning] x is babcpus or babrpus
  13. [actual] boffpus is babrpus and ruvjpus and juztpus
  14. [actual] boffpus is a category
  15. [actual] x is fibcpus
  16. [actual] fibcpus is nivtpus
  17. [actual] nivtpus is zipmpus and vuynpus
  18. [actual] zipmpus is boffpus
  19. [actual] boffpus is babrpus and ruvjpus and juztpus
  20. [actual] x is fibcpus
  21. [actual] fibcpus is nivtpus
  22. [actual] x is nivtpus
  23. [actual] nivtpus is zipmpus and vuynpus
  24. [planning] x is zipmpus
  25. [planning] x is vuynpus
  26. [actual] zipmpus is boffpus
  27. [planning] x is boffpus
  28. [actual] boffpus is babrpus
  29. [actual] x is boffpus
  30. [actual] x is babrpus
  31. [actual] x is babrpus
  32. [planning] x is babcpus
  33. [planning] x is babrpus
  34. [actual] x is babrpus
  35. [planning] x is babcpus
  36. [planning] x is babcpus or babrpus
  37. [actual] x is babrpus
  38. [actual] x is babcpus or babrpus
  39. [actual] x is babrpus
  40. [actual] x is babrpus
  41. [actual] x is babcpus or babrpus
  42. [planning] babcpus is related
  43. [planning] x is babrpus
  44. [actual] x is babrpus
  45. [planning] x is babrpus
  46. [planning] x is babrpus
  47. [actual] fibcpus is nivtpus
  48. [actual] fibcpus is nivtpus
  49. [planning] nivtpus is zipmpus
  50. [actual] x is fibcpus
  51. [actual] fibcpus is nivtpus
  52. [actual] nivtpus is zipmpus
  53. [actual] zipmpus is boffpus
  54. [actual] boffpus is babrpus
  55. [actual] x is babrpus
  56. [actual] x is babrpus
  57. [planning] x is babcpus or x is babrpus
  58. [planning] x is babcpus or babrpus
  59. [planning] x is babcpus or babrpus
  60. [actual] x is babrpus
  61. [planning] x is the union

=== 开始标准化和解析节点 ===
清洗后statements数: 61
标准化后节点数: 57
过滤掉的无效实体数: 4
标准化后的节点:
  1. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  2. [actual] x → fibcpus (原始: x is fibcpus)
  3. [actual] nivtpus → zipmpus and vuynpus (原始: nivtpus is zipmpus and vuynpus)
  4. [actual] nivtpus → zipmpus and vuynpus (原始: nivtpus is zipmpus and vuynpus)
  5. [actual] boffpus → babrpus and ruvjpus and juztpus (原始: boffpus is babrpus and ruvjpus and juztpus)
  6. [actual] boffpus → babrpus and ruvjpus and juztpus (原始: boffpus is babrpus and ruvjpus and juztpus)
  7. [actual] zipmpus → boffpus (原始: zipmpus is boffpus)
  8. [actual] zipmpus → boffpus (原始: zipmpus is boffpus)
  9. [actual] fibcpus → nivtpus (原始: fibcpus is nivtpus)
  10. [actual] fibcpus → nivtpus (原始: fibcpus is nivtpus)
  11. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  12. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  13. [actual] boffpus → babrpus and ruvjpus and juztpus (原始: boffpus is babrpus and ruvjpus and juztpus)
  14. [actual] x → fibcpus (原始: x is fibcpus)
  15. [actual] fibcpus → nivtpus (原始: fibcpus is nivtpus)
  16. [actual] nivtpus → zipmpus and vuynpus (原始: nivtpus is zipmpus and vuynpus)
  17. [actual] zipmpus → boffpus (原始: zipmpus is boffpus)
  18. [actual] boffpus → babrpus and ruvjpus and juztpus (原始: boffpus is babrpus and ruvjpus and juztpus)
  19. [actual] x → fibcpus (原始: x is fibcpus)
  20. [actual] fibcpus → nivtpus (原始: fibcpus is nivtpus)
  21. [actual] x → nivtpus (原始: x is nivtpus)
  22. [actual] nivtpus → zipmpus and vuynpus (原始: nivtpus is zipmpus and vuynpus)
  23. [planning] x → zipmpus (原始: x is zipmpus)
  24. [planning] x → vuynpus (原始: x is vuynpus)
  25. [actual] zipmpus → boffpus (原始: zipmpus is boffpus)
  26. [planning] x → boffpus (原始: x is boffpus)
  27. [actual] boffpus → babrpus (原始: boffpus is babrpus)
  28. [actual] x → boffpus (原始: x is boffpus)
  29. [actual] x → babrpus (原始: x is babrpus)
  30. [actual] x → babrpus (原始: x is babrpus)
  31. [planning] x → babcpus (原始: x is babcpus)
  32. [planning] x → babrpus (原始: x is babrpus)
  33. [actual] x → babrpus (原始: x is babrpus)
  34. [planning] x → babcpus (原始: x is babcpus)
  35. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  36. [actual] x → babrpus (原始: x is babrpus)
  37. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  38. [actual] x → babrpus (原始: x is babrpus)
  39. [actual] x → babrpus (原始: x is babrpus)
  40. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  41. [planning] x → babrpus (原始: x is babrpus)
  42. [actual] x → babrpus (原始: x is babrpus)
  43. [planning] x → babrpus (原始: x is babrpus)
  44. [planning] x → babrpus (原始: x is babrpus)
  45. [actual] fibcpus → nivtpus (原始: fibcpus is nivtpus)
  46. [actual] fibcpus → nivtpus (原始: fibcpus is nivtpus)
  47. [planning] nivtpus → zipmpus (原始: nivtpus is zipmpus)
  48. [actual] x → fibcpus (原始: x is fibcpus)
  49. [actual] fibcpus → nivtpus (原始: fibcpus is nivtpus)
  50. [actual] nivtpus → zipmpus (原始: nivtpus is zipmpus)
  51. [actual] zipmpus → boffpus (原始: zipmpus is boffpus)
  52. [actual] boffpus → babrpus (原始: boffpus is babrpus)
  53. [actual] x → babrpus (原始: x is babrpus)
  54. [actual] x → babrpus (原始: x is babrpus)
  55. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  56. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  57. [actual] x → babrpus (原始: x is babrpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 8
[后处理] 加载LoG图，包含 8 个节点
  LoG节点 0: x is babcpus or babrpus (规则: DI, 深度: 1)
  LoG节点 1: x is babrpus (规则: CE, 深度: 2)
  LoG节点 2: x is babrpus and ruvjpus (规则: MP, 深度: 3)
  LoG节点 3: x is zipmpus (规则: MP, 深度: 4)
  LoG节点 4: zipmpus is babrpus and ruvjpus (规则: CE, 深度: 4)
  LoG节点 5: x is nivtpus (规则: MP, 深度: 5)
  LoG节点 6: nivtpus is zipmpus (规则: CE, 深度: 5)
  LoG节点 7: zipmpus is babrpus and ruvjpus and juztpus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 57
   - 初始条件数: 5
   - LoG图节点数: 8

📋 初始条件列表:
    1. x is fibcpus
    2. nivtpus is zipmpus and vuynpus
    3. boffpus is babrpus and ruvjpus and juztpus
    4. zipmpus is boffpus
    5. fibcpus is nivtpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 5 个前提节点

🔍 开始处理actual节点...

   节点 1: x is fibcpus
      ↻ 重复节点，计数: 2

   节点 2: nivtpus is zipmpus and vuynpus
      ↻ 重复节点，计数: 2

   节点 3: nivtpus is zipmpus and vuynpus
      ↻ 重复节点，计数: 3

   节点 4: boffpus is babrpus and ruvjpus and juztpus
      ↻ 重复节点，计数: 2

   节点 5: boffpus is babrpus and ruvjpus and juztpus
      ↻ 重复节点，计数: 3

   节点 6: zipmpus is boffpus
      ↻ 重复节点，计数: 2

   节点 7: zipmpus is boffpus
      ↻ 重复节点，计数: 3

   节点 8: fibcpus is nivtpus
      ↻ 重复节点，计数: 2

   节点 9: fibcpus is nivtpus
      ↻ 重复节点，计数: 3

   节点 10: boffpus is babrpus and ruvjpus and juztpus
      ↻ 重复节点，计数: 4

   节点 11: x is fibcpus
      ↻ 重复节点，计数: 3

   节点 12: fibcpus is nivtpus
      ↻ 重复节点，计数: 4

   节点 13: nivtpus is zipmpus and vuynpus
      ↻ 重复节点，计数: 4

   节点 14: zipmpus is boffpus
      ↻ 重复节点，计数: 4

   节点 15: boffpus is babrpus and ruvjpus and juztpus
      ↻ 重复节点，计数: 5

   节点 16: x is fibcpus
      ↻ 重复节点，计数: 4

   节点 17: fibcpus is nivtpus
      ↻ 重复节点，计数: 5

   节点 18: x is nivtpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is nivtpus
      ✅ 验证成功 + LoG匹配

   节点 19: nivtpus is zipmpus and vuynpus
      ↻ 重复节点，计数: 5

   节点 20: zipmpus is boffpus
      ↻ 重复节点，计数: 5

   节点 21: boffpus is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: boffpus is babrpus and ruvjpus and juztpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: boffpus is babrpus and ruvjpus and juztpus

   节点 22: x is boffpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fibcpus → fibcpus is boffpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is fibcpus
  - 前提: fibcpus is nivtpus
  - 前提: nivtpus is zipmpus and vuynpus
  - 前提: zipmpus is boffpus
  ✓ 点亮LoG节点: x is zipmpus
[子树点亮]     └─ 点亮依赖节点: nivtpus is zipmpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 23: x is babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babrpus
[子树点亮]     └─ 点亮依赖节点: x is babrpus and ruvjpus (深度3)
[子树点亮]     └─ 点亮依赖节点: zipmpus is babrpus and ruvjpus (深度4)
[子树点亮]     └─ 点亮依赖节点: zipmpus is babrpus and ruvjpus and juztpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 24: x is babrpus
      ↻ 重复节点，计数: 2

   节点 25: x is babrpus
      ↻ 重复节点，计数: 3

   节点 26: x is babrpus
      ↻ 重复节点，计数: 4

   节点 27: x is babcpus or babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus or babrpus
      ✅ 验证成功 + LoG匹配

   节点 28: x is babrpus
      ↻ 重复节点，计数: 5

   节点 29: x is babrpus
      ↻ 重复节点，计数: 6

   节点 30: x is babcpus or babrpus
      ↻ 重复节点，计数: 2

   节点 31: x is babrpus
      ↻ 重复节点，计数: 7

   节点 32: fibcpus is nivtpus
      ↻ 重复节点，计数: 6

   节点 33: fibcpus is nivtpus
      ↻ 重复节点，计数: 7

   节点 34: x is fibcpus
      ↻ 重复节点，计数: 5

   节点 35: fibcpus is nivtpus
      ↻ 重复节点，计数: 8

   节点 36: nivtpus is zipmpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 37: zipmpus is boffpus
      ↻ 重复节点，计数: 6

   节点 38: boffpus is babrpus
      ↻ 重复节点，计数: 2

   节点 39: x is babrpus
      ↻ 重复节点，计数: 8

   节点 40: x is babrpus
      ↻ 重复节点，计数: 9

   节点 41: x is babrpus
      ↻ 重复节点，计数: 10

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 41
   - 新增节点: 6
   - 更新已存在节点: 35
   - 点亮的LoG节点: 8

🎯 推理质量统计:
   - 完美推理: 6 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 8节点, 5前提, 复杂度1-5

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 11
   - 前提节点: 5
   - 推理节点: 6
   - 幻觉节点: 0
   - 点亮LoG节点: 8

✅ 推理节点详情:
   🟢 x is nivtpus (出现1次, 质量:perfect)
   🟢 boffpus is babrpus (出现2次, 质量:perfect)
   🟢 x is boffpus (出现1次, 质量:perfect)
   🟢 x is babrpus (出现10次, 质量:perfect)
   🟢 x is babcpus or babrpus (出现2次, 质量:perfect)
   🟢 nivtpus is zipmpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - zipmpus is babrpus and ruvjpus and juztpus
   - zipmpus is babrpus and ruvjpus
   - x is babcpus or babrpus
   - x is nivtpus
   - x is zipmpus
   - x is babrpus and ruvjpus
   - x is babrpus
   - nivtpus is zipmpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus or babrpus (第5层)
   节点Coverage: 8/8 = 100.00%
   前提条件Coverage: 5/5 = 100.00%
   各推理层点亮比例:
     第1层: 3/3 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/6 = 0.00%
   可推导节点: 6/6
   Strict Error Rate: 0/6 = 0.00%
   严格有效节点: 6/6

   详细分析:
     完美推理: 6 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 15/50
================================================================================
记录索引: 14
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_14.json
✅ 使用缓存结果:
   - 句子数: 211
   - 提取的语句数: 249
   - 初始条件数: 19

=== Statement提取完成 ===
总句子数: 211
成功提取: 210
失败提取: 1
总statements数: 249

=== 开始清洗Statement格式 ===
原始statements数: 249
清洗后statements数: 194
过滤掉的statements数: 55
清洗后的statements:
  1. [actual] juyrpus is babcpus or babrpus
  2. [actual] tokvpus is yozkpus and fablpus
  3. [planning] x is babcpus or babrpus
  4. [actual] x is vorqpus
  5. [planning] x is babcpus
  6. [planning] x is babrpus
  7. [planning] x is babgpus
  8. [planning] x is babkpus
  9. [planning] x is babmpus
  10. [actual] juyrpus is babcpus or babrpus
  11. [actual] tokvpus is yozkpus and fablpus
  12. [actual] gozrpus is xusvpus
  13. [actual] suyqpus is tirqpus
  14. [actual] juqspus is tolzpus
  15. [actual] yozkpus is jofqpus and ketxpus
  16. [actual] pohqpus is sobjpus
  17. [actual] sugvpus is gozrpus
  18. [actual] x is vorqpus
  19. [actual] rivgpus is tokvpus
  20. [actual] suyqpus is pohqpus
  21. [actual] suyqpus is pohqpus
  22. [actual] suyqpus is tirqpus
  23. [actual] suyqpus is tirqpus
  24. [actual] suyqpus is pohqpus
  25. [planning] suyqpus is tirqpus and pohqpus
  26. [actual] vorqpus is suyqpus
  27. [actual] sobjpus is juqspus
  28. [actual] rupvpus is sugvpus
  29. [actual] behkpus is rivgpus and xujcpus and qufxpus
  30. [actual] xusvpus is behkpus and firtpus
  31. [actual] jofqpus is juyrpus
  32. [actual] x is vorqpus
  33. [planning] x is babcpus
  34. [planning] x is babrpus
  35. [actual] x is vorqpus
  36. [planning] vorqpus is babcpus
  37. [planning] vorqpus is babrpus
  38. [actual] vorqpus is suyqpus
  39. [actual] vorqpus is suyqpus
  40. [actual] suyqpus is tirqpus
  41. [actual] suyqpus is pohqpus
  42. [actual] suyqpus is tirqpus and pohqpus
  43. [actual] juyrpus is babcpus or babrpus
  44. [actual] jofqpus is juyrpus
  45. [actual] jofqpus is babcpus or babrpus
  46. [planning] jofqpus is babcpus or babrpus
  47. [planning] jofqpus is juyrpus
  48. [planning] juyrpus is babcpus or babrpus
  49. [planning] jofqpus is the same category
  50. [actual] x is vorqpus
  51. [actual] vorqpus is suyqpus
  52. [actual] vorqpus is suyqpus
  53. [actual] suyqpus is pohqpus
  54. [actual] suyqpus is pohqpus
  55. [actual] pohqpus is sobjpus
  56. [actual] pohqpus is sobjpus
  57. [actual] sobjpus is juqspus
  58. [actual] sobjpus is juqspus
  59. [actual] juqspus is tolzpus
  60. [actual] juqspus is tolzpus
  61. [actual] tolzpus is surrpus
  62. [actual] tolzpus is surrpus
  63. [actual] surrpus is rupvpus
  64. [actual] surrpus is rupvpus
  65. [actual] rupvpus is sugvpus
  66. [actual] rupvpus is sugvpus
  67. [actual] sugvpus is gozrpus
  68. [actual] sugvpus is gozrpus
  69. [actual] gozrpus is xusvpus
  70. [actual] gozrpus is xusvpus
  71. [actual] xusvpus is behkpus and firtpus
  72. [actual] xusvpus is behkpus and firtpus
  73. [actual] behkpus is rivgpus and xujcpus and qufxpus
  74. [actual] behkpus is rivgpus and xujcpus and qufxpus
  75. [actual] rivgpus is tokvpus
  76. [actual] rivgpus is tokvpus
  77. [actual] tokvpus is yozkpus and fablpus
  78. [actual] tokvpus is yozkpus
  79. [actual] tokvpus is fablpus
  80. [actual] yozkpus is jofqpus and ketxpus
  81. [actual] yozkpus is jofqpus and ketxpus
  82. [actual] jofqpus is juyrpus
  83. [actual] jofqpus is juyrpus
  84. [actual] juyrpus is babcpus or babrpus
  85. [actual] juyrpus is babcpus or babrpus
  86. [actual] juyrpus is babcpus or babrpus
  87. [planning] x is babcpus or babrpus
  88. [actual] x is vorqpus
  89. [actual] vorqpus is juyrpus
  90. [planning] vorqpus is babcpus
  91. [planning] vorqpus is babrpus
  92. [actual] vorqpus is suyqpus
  93. [actual] suyqpus is pohqpus
  94. [planning] vorqpus is suyqpus
  95. [planning] suyqpus is pohqpus
  96. [actual] pohqpus is sobjpus
  97. [actual] juyrpus is babcpus or babrpus
  98. [actual] tokvpus is yozkpus and fablpus
  99. [actual] tokvpus is yozkpus
  100. [actual] tokvpus is fablpus
  101. [planning] tokvpus is yozkpus
  102. [planning] tokvpus is fablpus
  103. [actual] yozkpus is jofqpus and ketxpus
  104. [planning] yozkpus is jofqpus
  105. [planning] yozkpus is ketxpus
  106. [planning] yozkpus is subset of jofqpus
  107. [planning] yozkpus is subset of ketxpus
  108. [planning] jofqpus is broader category
  109. [planning] ketxpus is broader category
  110. [planning] juyrpus is babcpus
  111. [planning] juyrpus is babrpus
  112. [actual] tokvpus is yozkpus and fablpus
  113. [planning] x is subset of babcpus or babrpus
  114. [actual] x is vorqpus
  115. [planning] vorqpus is subset of babcpus
  116. [planning] vorqpus is subset of babrpus
  117. [actual] vorqpus is suyqpus
  118. [actual] suyqpus is pohqpus
  119. [actual] pohqpus is sobjpus
  120. [actual] pohqpus is sobjpus
  121. [actual] sobjpus is juqspus
  122. [actual] vorqpus is juqspus
  123. [actual] juqspus is tolzpus
  124. [actual] juqspus is tolzpus
  125. [actual] tolzpus is surrpus
  126. [actual] tolzpus is surrpus
  127. [actual] vorqpus is surrpus
  128. [actual] surrpus is rupvpus
  129. [actual] vorqpus is rupvpus
  130. [actual] rupvpus is sugvpus
  131. [actual] rupvpus is sugvpus
  132. [actual] vorqpus is sugvpus
  133. [actual] sugvpus is gozrpus
  134. [actual] sugvpus is gozrpus
  135. [actual] vorqpus is gozrpus
  136. [actual] gozrpus is xusvpus
  137. [actual] vorqpus is xusvpus
  138. [actual] xusvpus is behkpus and firtpus
  139. [actual] xusvpus is behkpus and firtpus
  140. [actual] vorqpus is behkpus
  141. [actual] behkpus is rivgpus and xujcpus and qufxpus
  142. [actual] behkpus is rivgpus
  143. [actual] behkpus is xujcpus
  144. [actual] behkpus is qufxpus
  145. [actual] vorqpus is rivgpus
  146. [actual] rivgpus is tokvpus
  147. [actual] tokvpus is yozkpus and fablpus
  148. [actual] tokvpus is yozkpus and fablpus
  149. [actual] yozkpus is jofqpus and ketxpus
  150. [actual] yozkpus is jofqpus and ketxpus
  151. [actual] vorqpus is jofqpus
  152. [actual] jofqpus is juyrpus
  153. [actual] juyrpus is babcpus or babrpus
  154. [actual] juyrpus is babcpus or juyrpus is babrpus
  155. [actual] vorqpus is subset of either babcpus or babrpus
  156. [actual] x is vorqpus
  157. [planning] x is subset of vorqpus
  158. [actual] x is vorqpus
  159. [planning] x is vorqpus
  160. [planning] x is an element
  161. [planning] x is vorqpus
  162. [planning] x is vorqpus
  163. [planning] x is an instance of vorqpus
  164. [planning] x is the category vorqpus
  165. [actual] x is vorqpus
  166. [planning] x is babcpus or babrpus
  167. [planning] x is vorqpus
  168. [planning] vorqpus is a category
  169. [planning] x is babcpus or babrpus
  170. [actual] vorqpus is a subset of babcpus or babrpus
  171. [actual] x is vorqpus
  172. [planning] x is vorqpus
  173. [planning] x is vorqpus
  174. [planning] x is vorqpus
  175. [planning] x is vorqpus
  176. [actual] x is vorqpus
  177. [actual] x is babcpus or babrpus
  178. [actual] vorqpus is a subset of babcpus or babrpus
  179. [planning] vorqpus is a subset of babcpus
  180. [planning] x is an element of vorqpus
  181. [planning] x is an element of babcpus
  182. [actual] vorqpus is subset of babrpus
  183. [planning] vorqpus is subset of babcpus or babrpus
  184. [planning] x is vorqpus
  185. [planning] x is an element of vorqpus
  186. [actual] vorqpus is babcpus or babrpus
  187. [planning] x is babcpus
  188. [planning] x is babrpus
  189. [actual] x is babcpus or babrpus
  190. [actual] juyrpus is babcpus or babrpus
  191. [actual] x is vorqpus
  192. [actual] x is babcpus or in babrpus
  193. [actual] yozkpus is jofqpus and ketxpus
  194. [actual] x is babcpus or babrpus

=== 开始标准化和解析节点 ===
清洗后statements数: 194
标准化后节点数: 170
过滤掉的无效实体数: 24
标准化后的节点:
  1. [actual] juyrpus → babcpus or babrpus (原始: juyrpus is babcpus or babrpus)
  2. [actual] tokvpus → yozkpus and fablpus (原始: tokvpus is yozkpus and fablpus)
  3. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  4. [actual] x → vorqpus (原始: x is vorqpus)
  5. [planning] x → babcpus (原始: x is babcpus)
  6. [planning] x → babrpus (原始: x is babrpus)
  7. [planning] x → babgpus (原始: x is babgpus)
  8. [planning] x → babkpus (原始: x is babkpus)
  9. [planning] x → babmpus (原始: x is babmpus)
  10. [actual] juyrpus → babcpus or babrpus (原始: juyrpus is babcpus or babrpus)
  11. [actual] tokvpus → yozkpus and fablpus (原始: tokvpus is yozkpus and fablpus)
  12. [actual] gozrpus → xusvpus (原始: gozrpus is xusvpus)
  13. [actual] suyqpus → tirqpus (原始: suyqpus is tirqpus)
  14. [actual] juqspus → tolzpus (原始: juqspus is tolzpus)
  15. [actual] yozkpus → jofqpus and ketxpus (原始: yozkpus is jofqpus and ketxpus)
  16. [actual] pohqpus → sobjpus (原始: pohqpus is sobjpus)
  17. [actual] sugvpus → gozrpus (原始: sugvpus is gozrpus)
  18. [actual] x → vorqpus (原始: x is vorqpus)
  19. [actual] rivgpus → tokvpus (原始: rivgpus is tokvpus)
  20. [actual] suyqpus → pohqpus (原始: suyqpus is pohqpus)
  21. [actual] suyqpus → pohqpus (原始: suyqpus is pohqpus)
  22. [actual] suyqpus → tirqpus (原始: suyqpus is tirqpus)
  23. [actual] suyqpus → tirqpus (原始: suyqpus is tirqpus)
  24. [actual] suyqpus → pohqpus (原始: suyqpus is pohqpus)
  25. [planning] suyqpus → tirqpus and pohqpus (原始: suyqpus is tirqpus and pohqpus)
  26. [actual] vorqpus → suyqpus (原始: vorqpus is suyqpus)
  27. [actual] sobjpus → juqspus (原始: sobjpus is juqspus)
  28. [actual] rupvpus → sugvpus (原始: rupvpus is sugvpus)
  29. [actual] behkpus → rivgpus and xujcpus and qufxpus (原始: behkpus is rivgpus and xujcpus and qufxpus)
  30. [actual] xusvpus → behkpus and firtpus (原始: xusvpus is behkpus and firtpus)
  31. [actual] jofqpus → juyrpus (原始: jofqpus is juyrpus)
  32. [actual] x → vorqpus (原始: x is vorqpus)
  33. [planning] x → babcpus (原始: x is babcpus)
  34. [planning] x → babrpus (原始: x is babrpus)
  35. [actual] x → vorqpus (原始: x is vorqpus)
  36. [planning] vorqpus → babcpus (原始: vorqpus is babcpus)
  37. [planning] vorqpus → babrpus (原始: vorqpus is babrpus)
  38. [actual] vorqpus → suyqpus (原始: vorqpus is suyqpus)
  39. [actual] vorqpus → suyqpus (原始: vorqpus is suyqpus)
  40. [actual] suyqpus → tirqpus (原始: suyqpus is tirqpus)
  41. [actual] suyqpus → pohqpus (原始: suyqpus is pohqpus)
  42. [actual] suyqpus → tirqpus and pohqpus (原始: suyqpus is tirqpus and pohqpus)
  43. [actual] juyrpus → babcpus or babrpus (原始: juyrpus is babcpus or babrpus)
  44. [actual] jofqpus → juyrpus (原始: jofqpus is juyrpus)
  45. [actual] jofqpus → babcpus or babrpus (原始: jofqpus is babcpus or babrpus)
  46. [planning] jofqpus → babcpus or babrpus (原始: jofqpus is babcpus or babrpus)
  47. [planning] jofqpus → juyrpus (原始: jofqpus is juyrpus)
  48. [planning] juyrpus → babcpus or babrpus (原始: juyrpus is babcpus or babrpus)
  49. [actual] x → vorqpus (原始: x is vorqpus)
  50. [actual] vorqpus → suyqpus (原始: vorqpus is suyqpus)
  51. [actual] vorqpus → suyqpus (原始: vorqpus is suyqpus)
  52. [actual] suyqpus → pohqpus (原始: suyqpus is pohqpus)
  53. [actual] suyqpus → pohqpus (原始: suyqpus is pohqpus)
  54. [actual] pohqpus → sobjpus (原始: pohqpus is sobjpus)
  55. [actual] pohqpus → sobjpus (原始: pohqpus is sobjpus)
  56. [actual] sobjpus → juqspus (原始: sobjpus is juqspus)
  57. [actual] sobjpus → juqspus (原始: sobjpus is juqspus)
  58. [actual] juqspus → tolzpus (原始: juqspus is tolzpus)
  59. [actual] juqspus → tolzpus (原始: juqspus is tolzpus)
  60. [actual] tolzpus → surrpus (原始: tolzpus is surrpus)
  61. [actual] tolzpus → surrpus (原始: tolzpus is surrpus)
  62. [actual] surrpus → rupvpus (原始: surrpus is rupvpus)
  63. [actual] surrpus → rupvpus (原始: surrpus is rupvpus)
  64. [actual] rupvpus → sugvpus (原始: rupvpus is sugvpus)
  65. [actual] rupvpus → sugvpus (原始: rupvpus is sugvpus)
  66. [actual] sugvpus → gozrpus (原始: sugvpus is gozrpus)
  67. [actual] sugvpus → gozrpus (原始: sugvpus is gozrpus)
  68. [actual] gozrpus → xusvpus (原始: gozrpus is xusvpus)
  69. [actual] gozrpus → xusvpus (原始: gozrpus is xusvpus)
  70. [actual] xusvpus → behkpus and firtpus (原始: xusvpus is behkpus and firtpus)
  71. [actual] xusvpus → behkpus and firtpus (原始: xusvpus is behkpus and firtpus)
  72. [actual] behkpus → rivgpus and xujcpus and qufxpus (原始: behkpus is rivgpus and xujcpus and qufxpus)
  73. [actual] behkpus → rivgpus and xujcpus and qufxpus (原始: behkpus is rivgpus and xujcpus and qufxpus)
  74. [actual] rivgpus → tokvpus (原始: rivgpus is tokvpus)
  75. [actual] rivgpus → tokvpus (原始: rivgpus is tokvpus)
  76. [actual] tokvpus → yozkpus and fablpus (原始: tokvpus is yozkpus and fablpus)
  77. [actual] tokvpus → yozkpus (原始: tokvpus is yozkpus)
  78. [actual] tokvpus → fablpus (原始: tokvpus is fablpus)
  79. [actual] yozkpus → jofqpus and ketxpus (原始: yozkpus is jofqpus and ketxpus)
  80. [actual] yozkpus → jofqpus and ketxpus (原始: yozkpus is jofqpus and ketxpus)
  81. [actual] jofqpus → juyrpus (原始: jofqpus is juyrpus)
  82. [actual] jofqpus → juyrpus (原始: jofqpus is juyrpus)
  83. [actual] juyrpus → babcpus or babrpus (原始: juyrpus is babcpus or babrpus)
  84. [actual] juyrpus → babcpus or babrpus (原始: juyrpus is babcpus or babrpus)
  85. [actual] juyrpus → babcpus or babrpus (原始: juyrpus is babcpus or babrpus)
  86. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  87. [actual] x → vorqpus (原始: x is vorqpus)
  88. [actual] vorqpus → juyrpus (原始: vorqpus is juyrpus)
  89. [planning] vorqpus → babcpus (原始: vorqpus is babcpus)
  90. [planning] vorqpus → babrpus (原始: vorqpus is babrpus)
  91. [actual] vorqpus → suyqpus (原始: vorqpus is suyqpus)
  92. [actual] suyqpus → pohqpus (原始: suyqpus is pohqpus)
  93. [planning] vorqpus → suyqpus (原始: vorqpus is suyqpus)
  94. [planning] suyqpus → pohqpus (原始: suyqpus is pohqpus)
  95. [actual] pohqpus → sobjpus (原始: pohqpus is sobjpus)
  96. [actual] juyrpus → babcpus or babrpus (原始: juyrpus is babcpus or babrpus)
  97. [actual] tokvpus → yozkpus and fablpus (原始: tokvpus is yozkpus and fablpus)
  98. [actual] tokvpus → yozkpus (原始: tokvpus is yozkpus)
  99. [actual] tokvpus → fablpus (原始: tokvpus is fablpus)
  100. [planning] tokvpus → yozkpus (原始: tokvpus is yozkpus)
  101. [planning] tokvpus → fablpus (原始: tokvpus is fablpus)
  102. [actual] yozkpus → jofqpus and ketxpus (原始: yozkpus is jofqpus and ketxpus)
  103. [planning] yozkpus → jofqpus (原始: yozkpus is jofqpus)
  104. [planning] yozkpus → ketxpus (原始: yozkpus is ketxpus)
  105. [planning] juyrpus → babcpus (原始: juyrpus is babcpus)
  106. [planning] juyrpus → babrpus (原始: juyrpus is babrpus)
  107. [actual] tokvpus → yozkpus and fablpus (原始: tokvpus is yozkpus and fablpus)
  108. [actual] x → vorqpus (原始: x is vorqpus)
  109. [actual] vorqpus → suyqpus (原始: vorqpus is suyqpus)
  110. [actual] suyqpus → pohqpus (原始: suyqpus is pohqpus)
  111. [actual] pohqpus → sobjpus (原始: pohqpus is sobjpus)
  112. [actual] pohqpus → sobjpus (原始: pohqpus is sobjpus)
  113. [actual] sobjpus → juqspus (原始: sobjpus is juqspus)
  114. [actual] vorqpus → juqspus (原始: vorqpus is juqspus)
  115. [actual] juqspus → tolzpus (原始: juqspus is tolzpus)
  116. [actual] juqspus → tolzpus (原始: juqspus is tolzpus)
  117. [actual] tolzpus → surrpus (原始: tolzpus is surrpus)
  118. [actual] tolzpus → surrpus (原始: tolzpus is surrpus)
  119. [actual] vorqpus → surrpus (原始: vorqpus is surrpus)
  120. [actual] surrpus → rupvpus (原始: surrpus is rupvpus)
  121. [actual] vorqpus → rupvpus (原始: vorqpus is rupvpus)
  122. [actual] rupvpus → sugvpus (原始: rupvpus is sugvpus)
  123. [actual] rupvpus → sugvpus (原始: rupvpus is sugvpus)
  124. [actual] vorqpus → sugvpus (原始: vorqpus is sugvpus)
  125. [actual] sugvpus → gozrpus (原始: sugvpus is gozrpus)
  126. [actual] sugvpus → gozrpus (原始: sugvpus is gozrpus)
  127. [actual] vorqpus → gozrpus (原始: vorqpus is gozrpus)
  128. [actual] gozrpus → xusvpus (原始: gozrpus is xusvpus)
  129. [actual] vorqpus → xusvpus (原始: vorqpus is xusvpus)
  130. [actual] xusvpus → behkpus and firtpus (原始: xusvpus is behkpus and firtpus)
  131. [actual] xusvpus → behkpus and firtpus (原始: xusvpus is behkpus and firtpus)
  132. [actual] vorqpus → behkpus (原始: vorqpus is behkpus)
  133. [actual] behkpus → rivgpus and xujcpus and qufxpus (原始: behkpus is rivgpus and xujcpus and qufxpus)
  134. [actual] behkpus → rivgpus (原始: behkpus is rivgpus)
  135. [actual] behkpus → xujcpus (原始: behkpus is xujcpus)
  136. [actual] behkpus → qufxpus (原始: behkpus is qufxpus)
  137. [actual] vorqpus → rivgpus (原始: vorqpus is rivgpus)
  138. [actual] rivgpus → tokvpus (原始: rivgpus is tokvpus)
  139. [actual] tokvpus → yozkpus and fablpus (原始: tokvpus is yozkpus and fablpus)
  140. [actual] tokvpus → yozkpus and fablpus (原始: tokvpus is yozkpus and fablpus)
  141. [actual] yozkpus → jofqpus and ketxpus (原始: yozkpus is jofqpus and ketxpus)
  142. [actual] yozkpus → jofqpus and ketxpus (原始: yozkpus is jofqpus and ketxpus)
  143. [actual] vorqpus → jofqpus (原始: vorqpus is jofqpus)
  144. [actual] jofqpus → juyrpus (原始: jofqpus is juyrpus)
  145. [actual] juyrpus → babcpus or babrpus (原始: juyrpus is babcpus or babrpus)
  146. [actual] x → vorqpus (原始: x is vorqpus)
  147. [actual] x → vorqpus (原始: x is vorqpus)
  148. [planning] x → vorqpus (原始: x is vorqpus)
  149. [planning] x → vorqpus (原始: x is vorqpus)
  150. [planning] x → vorqpus (原始: x is vorqpus)
  151. [actual] x → vorqpus (原始: x is vorqpus)
  152. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  153. [planning] x → vorqpus (原始: x is vorqpus)
  154. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  155. [actual] x → vorqpus (原始: x is vorqpus)
  156. [planning] x → vorqpus (原始: x is vorqpus)
  157. [planning] x → vorqpus (原始: x is vorqpus)
  158. [planning] x → vorqpus (原始: x is vorqpus)
  159. [planning] x → vorqpus (原始: x is vorqpus)
  160. [actual] x → vorqpus (原始: x is vorqpus)
  161. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  162. [planning] x → vorqpus (原始: x is vorqpus)
  163. [actual] vorqpus → babcpus or babrpus (原始: vorqpus is babcpus or babrpus)
  164. [planning] x → babcpus (原始: x is babcpus)
  165. [planning] x → babrpus (原始: x is babrpus)
  166. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  167. [actual] juyrpus → babcpus or babrpus (原始: juyrpus is babcpus or babrpus)
  168. [actual] x → vorqpus (原始: x is vorqpus)
  169. [actual] yozkpus → jofqpus and ketxpus (原始: yozkpus is jofqpus and ketxpus)
  170. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 24
[后处理] 加载LoG图，包含 24 个节点
  LoG节点 0: x is babcpus or babrpus (规则: MP, 深度: 1)
  LoG节点 1: x is xusvpus (规则: MP, 深度: 2)
  LoG节点 2: xusvpus is babcpus or babrpus (规则: MP, 深度: 2)
  LoG节点 3: x is pohqpus (规则: CE, 深度: 3)
  LoG节点 4: pohqpus is xusvpus (规则: MP, 深度: 3)
  LoG节点 5: xusvpus is rivgpus (规则: CE, 深度: 3)
  LoG节点 6: rivgpus is babcpus or babrpus (规则: MP, 深度: 3)
  LoG节点 7: x is pohqpus and tirqpus (规则: MP, 深度: 4)
  LoG节点 8: pohqpus is surrpus (规则: MP, 深度: 4)
  LoG节点 9: surrpus is xusvpus (规则: MP, 深度: 4)
  LoG节点 10: xusvpus is rivgpus and xujcpus (规则: MP, 深度: 4)
  LoG节点 11: rivgpus is yozkpus (规则: CE, 深度: 4)
  LoG节点 12: yozkpus is babcpus or babrpus (规则: MP, 深度: 4)
  LoG节点 13: x is suyqpus (规则: MP, 深度: 5)
  LoG节点 14: suyqpus is pohqpus and tirqpus (规则: CI, 深度: 5)
  LoG节点 15: pohqpus is juqspus (规则: MP, 深度: 5)
  LoG节点 16: juqspus is surrpus (规则: MP, 深度: 5)
  LoG节点 17: surrpus is sugvpus (规则: MP, 深度: 5)
  LoG节点 18: sugvpus is xusvpus (规则: MP, 深度: 5)
  LoG节点 19: xusvpus is behkpus (规则: CE, 深度: 5)
  LoG节点 20: behkpus is rivgpus and xujcpus (规则: CE, 深度: 5)
  LoG节点 21: rivgpus is yozkpus and fablpus (规则: MP, 深度: 5)
  LoG节点 22: yozkpus is jofqpus (规则: CE, 深度: 5)
  LoG节点 23: jofqpus is babcpus or babrpus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 170
   - 初始条件数: 19
   - LoG图节点数: 24

📋 初始条件列表:
    1. juyrpus is babcpus or babrpus
    2. tokvpus is yozkpus and fablpus
    3. gozrpus is xusvpus
    4. suyqpus is tirqpus
    5. juqspus is tolzpus
    6. yozkpus is jofqpus and ketxpus
    7. pohqpus is sobjpus
    8. sugvpus is gozrpus
    9. x is vorqpus
   10. rivgpus is tokvpus
   11. suyqpus is pohqpus
   12. tolzpus is surrpus
   13. surrpus is rupvpus
   14. vorqpus is suyqpus
   15. sobjpus is juqspus
   16. rupvpus is sugvpus
   17. behkpus is rivgpus and xujcpus and qufxpus
   18. xusvpus is behkpus and firtpus
   19. jofqpus is juyrpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 19 个前提节点

🔍 开始处理actual节点...

   节点 1: juyrpus is babcpus or babrpus
      ↻ 重复节点，计数: 2

   节点 2: tokvpus is yozkpus and fablpus
      ↻ 重复节点，计数: 2

   节点 3: x is vorqpus
      ↻ 重复节点，计数: 2

   节点 4: juyrpus is babcpus or babrpus
      ↻ 重复节点，计数: 3

   节点 5: tokvpus is yozkpus and fablpus
      ↻ 重复节点，计数: 3

   节点 6: gozrpus is xusvpus
      ↻ 重复节点，计数: 2

   节点 7: suyqpus is tirqpus
      ↻ 重复节点，计数: 2

   节点 8: juqspus is tolzpus
      ↻ 重复节点，计数: 2

   节点 9: yozkpus is jofqpus and ketxpus
      ↻ 重复节点，计数: 2

   节点 10: pohqpus is sobjpus
      ↻ 重复节点，计数: 2

   节点 11: sugvpus is gozrpus
      ↻ 重复节点，计数: 2

   节点 12: x is vorqpus
      ↻ 重复节点，计数: 3

   节点 13: rivgpus is tokvpus
      ↻ 重复节点，计数: 2

   节点 14: suyqpus is pohqpus
      ↻ 重复节点，计数: 2

   节点 15: suyqpus is pohqpus
      ↻ 重复节点，计数: 3

   节点 16: suyqpus is tirqpus
      ↻ 重复节点，计数: 3

   节点 17: suyqpus is tirqpus
      ↻ 重复节点，计数: 4

   节点 18: suyqpus is pohqpus
      ↻ 重复节点，计数: 4

   节点 19: vorqpus is suyqpus
      ↻ 重复节点，计数: 2

   节点 20: sobjpus is juqspus
      ↻ 重复节点，计数: 2

   节点 21: rupvpus is sugvpus
      ↻ 重复节点，计数: 2

   节点 22: behkpus is rivgpus and xujcpus and qufxpus
      ↻ 重复节点，计数: 2

   节点 23: xusvpus is behkpus and firtpus
      ↻ 重复节点，计数: 2

   节点 24: jofqpus is juyrpus
      ↻ 重复节点，计数: 2

   节点 25: x is vorqpus
      ↻ 重复节点，计数: 4

   节点 26: x is vorqpus
      ↻ 重复节点，计数: 5

   节点 27: vorqpus is suyqpus
      ↻ 重复节点，计数: 3

   节点 28: vorqpus is suyqpus
      ↻ 重复节点，计数: 4

   节点 29: suyqpus is tirqpus
      ↻ 重复节点，计数: 5

   节点 30: suyqpus is pohqpus
      ↻ 重复节点，计数: 5

   节点 31: suyqpus is tirqpus and pohqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: suyqpus is tirqpus → suyqpus is pohqpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: suyqpus is tirqpus
  - 前提: suyqpus is pohqpus
  ✓ 点亮LoG节点: suyqpus is pohqpus and tirqpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 32: juyrpus is babcpus or babrpus
      ↻ 重复节点，计数: 4

   节点 33: jofqpus is juyrpus
      ↻ 重复节点，计数: 3

   节点 34: jofqpus is babcpus or babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: jofqpus is babcpus or babrpus
      ✅ 验证成功 + LoG匹配

   节点 35: x is vorqpus
      ↻ 重复节点，计数: 6

   节点 36: vorqpus is suyqpus
      ↻ 重复节点，计数: 5

   节点 37: vorqpus is suyqpus
      ↻ 重复节点，计数: 6

   节点 38: suyqpus is pohqpus
      ↻ 重复节点，计数: 6

   节点 39: suyqpus is pohqpus
      ↻ 重复节点，计数: 7

   节点 40: pohqpus is sobjpus
      ↻ 重复节点，计数: 3

   节点 41: pohqpus is sobjpus
      ↻ 重复节点，计数: 4

   节点 42: sobjpus is juqspus
      ↻ 重复节点，计数: 3

   节点 43: sobjpus is juqspus
      ↻ 重复节点，计数: 4

   节点 44: juqspus is tolzpus
      ↻ 重复节点，计数: 3

   节点 45: juqspus is tolzpus
      ↻ 重复节点，计数: 4

   节点 46: tolzpus is surrpus
      ↻ 重复节点，计数: 2

   节点 47: tolzpus is surrpus
      ↻ 重复节点，计数: 3

   节点 48: surrpus is rupvpus
      ↻ 重复节点，计数: 2

   节点 49: surrpus is rupvpus
      ↻ 重复节点，计数: 3

   节点 50: rupvpus is sugvpus
      ↻ 重复节点，计数: 3

   节点 51: rupvpus is sugvpus
      ↻ 重复节点，计数: 4

   节点 52: sugvpus is gozrpus
      ↻ 重复节点，计数: 3

   节点 53: sugvpus is gozrpus
      ↻ 重复节点，计数: 4

   节点 54: gozrpus is xusvpus
      ↻ 重复节点，计数: 3

   节点 55: gozrpus is xusvpus
      ↻ 重复节点，计数: 4

   节点 56: xusvpus is behkpus and firtpus
      ↻ 重复节点，计数: 3

   节点 57: xusvpus is behkpus and firtpus
      ↻ 重复节点，计数: 4

   节点 58: behkpus is rivgpus and xujcpus and qufxpus
      ↻ 重复节点，计数: 3

   节点 59: behkpus is rivgpus and xujcpus and qufxpus
      ↻ 重复节点，计数: 4

   节点 60: rivgpus is tokvpus
      ↻ 重复节点，计数: 3

   节点 61: rivgpus is tokvpus
      ↻ 重复节点，计数: 4

   节点 62: tokvpus is yozkpus and fablpus
      ↻ 重复节点，计数: 4

   节点 63: tokvpus is yozkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: tokvpus is yozkpus and fablpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: tokvpus is yozkpus and fablpus

   节点 64: tokvpus is fablpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: tokvpus is yozkpus and fablpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: tokvpus is yozkpus and fablpus

   节点 65: yozkpus is jofqpus and ketxpus
      ↻ 重复节点，计数: 3

   节点 66: yozkpus is jofqpus and ketxpus
      ↻ 重复节点，计数: 4

   节点 67: jofqpus is juyrpus
      ↻ 重复节点，计数: 4

   节点 68: jofqpus is juyrpus
      ↻ 重复节点，计数: 5

   节点 69: juyrpus is babcpus or babrpus
      ↻ 重复节点，计数: 5

   节点 70: juyrpus is babcpus or babrpus
      ↻ 重复节点，计数: 6

   节点 71: juyrpus is babcpus or babrpus
      ↻ 重复节点，计数: 7

   节点 72: x is vorqpus
      ↻ 重复节点，计数: 7

   节点 73: vorqpus is juyrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: vorqpus is suyqpus → suyqpus is juyrpus
[后处理] 基于推理轨迹点亮节点，使用了 16 个前提条件:
  - 前提: vorqpus is suyqpus
  - 前提: suyqpus is pohqpus
  - 前提: pohqpus is sobjpus
  - 前提: sobjpus is juqspus
  - 前提: juqspus is tolzpus
  - 前提: tolzpus is surrpus
  - 前提: surrpus is rupvpus
  - 前提: rupvpus is sugvpus
  - 前提: sugvpus is gozrpus
  - 前提: gozrpus is xusvpus
  - 前提: xusvpus is behkpus and firtpus
  - 前提: behkpus is rivgpus and xujcpus and qufxpus
  - 前提: rivgpus is tokvpus
  - 前提: tokvpus is yozkpus
  - 前提: yozkpus is jofqpus and ketxpus
  - 前提: jofqpus is juyrpus
  ✓ 点亮LoG节点: pohqpus is xusvpus
[子树点亮]     └─ 点亮依赖节点: pohqpus is surrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: surrpus is xusvpus (深度4)
[子树点亮]     └─ 点亮依赖节点: pohqpus is juqspus (深度5)
[子树点亮]     └─ 点亮依赖节点: juqspus is surrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: surrpus is sugvpus (深度5)
[子树点亮]     └─ 点亮依赖节点: sugvpus is xusvpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 6 个节点
  ✓ 点亮LoG节点: xusvpus is rivgpus
[子树点亮]     └─ 点亮依赖节点: xusvpus is rivgpus and xujcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: xusvpus is behkpus (深度5)
[子树点亮]     └─ 点亮依赖节点: behkpus is rivgpus and xujcpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
  ✓ 点亮LoG节点: rivgpus is yozkpus
[子树点亮]     └─ 点亮依赖节点: rivgpus is yozkpus and fablpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
  ✓ 点亮LoG节点: yozkpus is jofqpus
[后处理] 通过推理轨迹额外点亮了 4 个LoG节点

   节点 74: vorqpus is suyqpus
      ↻ 重复节点，计数: 7

   节点 75: suyqpus is pohqpus
      ↻ 重复节点，计数: 8

   节点 76: pohqpus is sobjpus
      ↻ 重复节点，计数: 5

   节点 77: juyrpus is babcpus or babrpus
      ↻ 重复节点，计数: 8

   节点 78: tokvpus is yozkpus and fablpus
      ↻ 重复节点，计数: 5

   节点 79: tokvpus is yozkpus
      ↻ 重复节点，计数: 2

   节点 80: tokvpus is fablpus
      ↻ 重复节点，计数: 2

   节点 81: yozkpus is jofqpus and ketxpus
      ↻ 重复节点，计数: 5

   节点 82: tokvpus is yozkpus and fablpus
      ↻ 重复节点，计数: 6

   节点 83: x is vorqpus
      ↻ 重复节点，计数: 8

   节点 84: vorqpus is suyqpus
      ↻ 重复节点，计数: 8

   节点 85: suyqpus is pohqpus
      ↻ 重复节点，计数: 9

   节点 86: pohqpus is sobjpus
      ↻ 重复节点，计数: 6

   节点 87: pohqpus is sobjpus
      ↻ 重复节点，计数: 7

   节点 88: sobjpus is juqspus
      ↻ 重复节点，计数: 5

   节点 89: vorqpus is juqspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: vorqpus is suyqpus → suyqpus is juqspus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: vorqpus is suyqpus
  - 前提: suyqpus is pohqpus
  - 前提: pohqpus is sobjpus
  - 前提: sobjpus is juqspus

   节点 90: juqspus is tolzpus
      ↻ 重复节点，计数: 5

   节点 91: juqspus is tolzpus
      ↻ 重复节点，计数: 6

   节点 92: tolzpus is surrpus
      ↻ 重复节点，计数: 4

   节点 93: tolzpus is surrpus
      ↻ 重复节点，计数: 5

   节点 94: vorqpus is surrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: vorqpus is suyqpus → suyqpus is surrpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: vorqpus is suyqpus
  - 前提: suyqpus is pohqpus
  - 前提: pohqpus is sobjpus
  - 前提: sobjpus is juqspus
  - 前提: juqspus is tolzpus
  - 前提: tolzpus is surrpus

   节点 95: surrpus is rupvpus
      ↻ 重复节点，计数: 4

   节点 96: vorqpus is rupvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: vorqpus is suyqpus → suyqpus is rupvpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: vorqpus is suyqpus
  - 前提: suyqpus is pohqpus
  - 前提: pohqpus is sobjpus
  - 前提: sobjpus is juqspus
  - 前提: juqspus is tolzpus
  - 前提: tolzpus is surrpus
  - 前提: surrpus is rupvpus

   节点 97: rupvpus is sugvpus
      ↻ 重复节点，计数: 5

   节点 98: rupvpus is sugvpus
      ↻ 重复节点，计数: 6

   节点 99: vorqpus is sugvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: vorqpus is suyqpus → suyqpus is sugvpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: vorqpus is suyqpus
  - 前提: suyqpus is pohqpus
  - 前提: pohqpus is sobjpus
  - 前提: sobjpus is juqspus
  - 前提: juqspus is tolzpus
  - 前提: tolzpus is surrpus
  - 前提: surrpus is rupvpus
  - 前提: rupvpus is sugvpus

   节点 100: sugvpus is gozrpus
      ↻ 重复节点，计数: 5

   节点 101: sugvpus is gozrpus
      ↻ 重复节点，计数: 6

   节点 102: vorqpus is gozrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: vorqpus is suyqpus → suyqpus is gozrpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: vorqpus is suyqpus
  - 前提: suyqpus is pohqpus
  - 前提: pohqpus is sobjpus
  - 前提: sobjpus is juqspus
  - 前提: juqspus is tolzpus
  - 前提: tolzpus is surrpus
  - 前提: surrpus is rupvpus
  - 前提: rupvpus is sugvpus
  - 前提: sugvpus is gozrpus

   节点 103: gozrpus is xusvpus
      ↻ 重复节点，计数: 5

   节点 104: vorqpus is xusvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: vorqpus is suyqpus → suyqpus is xusvpus
[后处理] 基于推理轨迹点亮节点，使用了 10 个前提条件:
  - 前提: vorqpus is suyqpus
  - 前提: suyqpus is pohqpus
  - 前提: pohqpus is sobjpus
  - 前提: sobjpus is juqspus
  - 前提: juqspus is tolzpus
  - 前提: tolzpus is surrpus
  - 前提: surrpus is rupvpus
  - 前提: rupvpus is sugvpus
  - 前提: sugvpus is gozrpus
  - 前提: gozrpus is xusvpus

   节点 105: xusvpus is behkpus and firtpus
      ↻ 重复节点，计数: 5

   节点 106: xusvpus is behkpus and firtpus
      ↻ 重复节点，计数: 6

   节点 107: vorqpus is behkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: vorqpus is suyqpus → suyqpus is behkpus
[后处理] 基于推理轨迹点亮节点，使用了 11 个前提条件:
  - 前提: vorqpus is suyqpus
  - 前提: suyqpus is pohqpus
  - 前提: pohqpus is sobjpus
  - 前提: sobjpus is juqspus
  - 前提: juqspus is tolzpus
  - 前提: tolzpus is surrpus
  - 前提: surrpus is rupvpus
  - 前提: rupvpus is sugvpus
  - 前提: sugvpus is gozrpus
  - 前提: gozrpus is xusvpus
  - 前提: xusvpus is behkpus and firtpus

   节点 108: behkpus is rivgpus and xujcpus and qufxpus
      ↻ 重复节点，计数: 5

   节点 109: behkpus is rivgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: behkpus is rivgpus and xujcpus and qufxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: behkpus is rivgpus and xujcpus and qufxpus

   节点 110: behkpus is xujcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: behkpus is rivgpus and xujcpus and qufxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: behkpus is rivgpus and xujcpus and qufxpus

   节点 111: behkpus is qufxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: behkpus is rivgpus and xujcpus and qufxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: behkpus is rivgpus and xujcpus and qufxpus

   节点 112: vorqpus is rivgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: vorqpus is suyqpus → suyqpus is rivgpus
[后处理] 基于推理轨迹点亮节点，使用了 12 个前提条件:
  - 前提: vorqpus is suyqpus
  - 前提: suyqpus is pohqpus
  - 前提: pohqpus is sobjpus
  - 前提: sobjpus is juqspus
  - 前提: juqspus is tolzpus
  - 前提: tolzpus is surrpus
  - 前提: surrpus is rupvpus
  - 前提: rupvpus is sugvpus
  - 前提: sugvpus is gozrpus
  - 前提: gozrpus is xusvpus
  - 前提: xusvpus is behkpus and firtpus
  - 前提: behkpus is rivgpus

   节点 113: rivgpus is tokvpus
      ↻ 重复节点，计数: 5

   节点 114: tokvpus is yozkpus and fablpus
      ↻ 重复节点，计数: 7

   节点 115: tokvpus is yozkpus and fablpus
      ↻ 重复节点，计数: 8

   节点 116: yozkpus is jofqpus and ketxpus
      ↻ 重复节点，计数: 6

   节点 117: yozkpus is jofqpus and ketxpus
      ↻ 重复节点，计数: 7

   节点 118: vorqpus is jofqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: vorqpus is suyqpus → suyqpus is jofqpus
[后处理] 基于推理轨迹点亮节点，使用了 15 个前提条件:
  - 前提: vorqpus is suyqpus
  - 前提: suyqpus is pohqpus
  - 前提: pohqpus is sobjpus
  - 前提: sobjpus is juqspus
  - 前提: juqspus is tolzpus
  - 前提: tolzpus is surrpus
  - 前提: surrpus is rupvpus
  - 前提: rupvpus is sugvpus
  - 前提: sugvpus is gozrpus
  - 前提: gozrpus is xusvpus
  - 前提: xusvpus is behkpus and firtpus
  - 前提: behkpus is rivgpus
  - 前提: rivgpus is tokvpus
  - 前提: tokvpus is yozkpus
  - 前提: yozkpus is jofqpus and ketxpus

   节点 119: jofqpus is juyrpus
      ↻ 重复节点，计数: 6

   节点 120: juyrpus is babcpus or babrpus
      ↻ 重复节点，计数: 9

   节点 121: x is vorqpus
      ↻ 重复节点，计数: 9

   节点 122: x is vorqpus
      ↻ 重复节点，计数: 10

   节点 123: x is vorqpus
      ↻ 重复节点，计数: 11

   节点 124: x is vorqpus
      ↻ 重复节点，计数: 12

   节点 125: x is vorqpus
      ↻ 重复节点，计数: 13

   节点 126: x is babcpus or babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus or babrpus
[子树点亮]     └─ 点亮依赖节点: x is xusvpus (深度2)
[子树点亮]     └─ 点亮依赖节点: xusvpus is babcpus or babrpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is pohqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: rivgpus is babcpus or babrpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is pohqpus and tirqpus (深度4)
[子树点亮]     └─ 点亮依赖节点: yozkpus is babcpus or babrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is suyqpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 7 个节点
      ✅ 验证成功 + LoG匹配

   节点 127: vorqpus is babcpus or babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: vorqpus is suyqpus → suyqpus is babcpus or babrpus
[后处理] 基于推理轨迹点亮节点，使用了 16 个前提条件:
  - 前提: vorqpus is suyqpus
  - 前提: suyqpus is pohqpus
  - 前提: pohqpus is sobjpus
  - 前提: sobjpus is juqspus
  - 前提: juqspus is tolzpus
  - 前提: tolzpus is surrpus
  - 前提: surrpus is rupvpus
  - 前提: rupvpus is sugvpus
  - 前提: sugvpus is gozrpus
  - 前提: gozrpus is xusvpus
  - 前提: xusvpus is behkpus and firtpus
  - 前提: behkpus is rivgpus
  - 前提: rivgpus is tokvpus
  - 前提: tokvpus is yozkpus
  - 前提: yozkpus is jofqpus and ketxpus
  - 前提: jofqpus is babcpus or babrpus

   节点 128: x is babcpus or babrpus
      ↻ 重复节点，计数: 2

   节点 129: juyrpus is babcpus or babrpus
      ↻ 重复节点，计数: 10

   节点 130: x is vorqpus
      ↻ 重复节点，计数: 14

   节点 131: yozkpus is jofqpus and ketxpus
      ↻ 重复节点，计数: 8

   节点 132: x is babcpus or babrpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 132
   - 新增节点: 19
   - 更新已存在节点: 113
   - 点亮的LoG节点: 24

🎯 推理质量统计:
   - 完美推理: 19 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 24节点, 19前提, 复杂度1-19

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 38
   - 前提节点: 19
   - 推理节点: 19
   - 幻觉节点: 0
   - 点亮LoG节点: 24

✅ 推理节点详情:
   🟢 suyqpus is tirqpus and pohqpus (出现1次, 质量:perfect)
   🟢 jofqpus is babcpus or babrpus (出现1次, 质量:perfect)
   🟢 tokvpus is yozkpus (出现2次, 质量:perfect)
   🟢 tokvpus is fablpus (出现2次, 质量:perfect)
   🟢 vorqpus is juyrpus (出现1次, 质量:perfect)
   🟢 vorqpus is juqspus (出现1次, 质量:perfect)
   🟢 vorqpus is surrpus (出现1次, 质量:perfect)
   🟢 vorqpus is rupvpus (出现1次, 质量:perfect)
   🟢 vorqpus is sugvpus (出现1次, 质量:perfect)
   🟢 vorqpus is gozrpus (出现1次, 质量:perfect)
   🟢 vorqpus is xusvpus (出现1次, 质量:perfect)
   🟢 vorqpus is behkpus (出现1次, 质量:perfect)
   🟢 behkpus is rivgpus (出现1次, 质量:perfect)
   🟢 behkpus is xujcpus (出现1次, 质量:perfect)
   🟢 behkpus is qufxpus (出现1次, 质量:perfect)
   🟢 vorqpus is rivgpus (出现1次, 质量:perfect)
   🟢 vorqpus is jofqpus (出现1次, 质量:perfect)
   🟢 x is babcpus or babrpus (出现3次, 质量:perfect)
   🟢 vorqpus is babcpus or babrpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - jofqpus is babcpus or babrpus
   - pohqpus is xusvpus
   - yozkpus is babcpus or babrpus
   - xusvpus is behkpus
   - surrpus is sugvpus
   - x is babcpus or babrpus
   - rivgpus is yozkpus and fablpus
   - pohqpus is surrpus
   - x is suyqpus
   - rivgpus is yozkpus
   - xusvpus is babcpus or babrpus
   - sugvpus is xusvpus
   - pohqpus is juqspus
   - x is pohqpus and tirqpus
   - behkpus is rivgpus and xujcpus
   - xusvpus is rivgpus and xujcpus
   - surrpus is xusvpus
   - x is pohqpus
   - juqspus is surrpus
   - suyqpus is pohqpus and tirqpus
   - x is xusvpus
   - yozkpus is jofqpus
   - xusvpus is rivgpus
   - rivgpus is babcpus or babrpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus or babrpus (第5层)
   节点Coverage: 24/24 = 100.00%
   前提条件Coverage: 19/19 = 100.00%
   各推理层点亮比例:
     第1层: 11/11 = 100.00%
     第2层: 6/6 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/19 = 0.00%
   可推导节点: 19/19
   Strict Error Rate: 0/19 = 0.00%
   严格有效节点: 19/19

   详细分析:
     完美推理: 19 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 16/50
================================================================================
记录索引: 15
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_15.json
✅ 使用缓存结果:
   - 句子数: 55
   - 提取的语句数: 66
   - 初始条件数: 9

=== Statement提取完成 ===
总句子数: 55
成功提取: 55
失败提取: 0
总statements数: 66

=== 开始清洗Statement格式 ===
原始statements数: 66
清洗后statements数: 63
过滤掉的statements数: 3
清洗后的statements:
  1. [actual] tecwpus is forypus and qethpus
  2. [planning] x is babcpus
  3. [planning] x is babrpus
  4. [planning] x is babspus
  5. [actual] forypus is babrpus
  6. [actual] forypus is dagspus
  7. [planning] x is these categories
  8. [actual] x is cilfpus
  9. [actual] x is cilfpus
  10. [actual] cilfpus is watmpus
  11. [actual] watmpus is rengpus and dayvpus and vudlpus
  12. [actual] cilfpus is watmpus
  13. [actual] cilfpus is watmpus
  14. [actual] watmpus is rengpus and dayvpus and vudlpus
  15. [actual] cilfpus is rengpus
  16. [actual] cilfpus is dayvpus
  17. [actual] cilfpus is vudlpus
  18. [actual] rengpus is turjpus
  19. [actual] turjpus is mumhpus
  20. [actual] rengpus is turjpus
  21. [actual] turjpus is mumhpus
  22. [actual] rengpus is mumhpus
  23. [actual] cilfpus is rengpus
  24. [actual] cilfpus is mumhpus indirectly
  25. [actual] mumhpus is xetkpus
  26. [actual] xetkpus is tecwpus and qawhpus
  27. [actual] mumhpus is xetkpus
  28. [actual] xetkpus is tecwpus and qawhpus
  29. [actual] tecwpus is forypus and qethpus
  30. [actual] forypus is babrpus and dagspus
  31. [actual] forypus is babrpus and dagspus
  32. [actual] x is cilfpus
  33. [actual] cilfpus is watmpus
  34. [actual] watmpus is rengpus
  35. [actual] rengpus is turjpus
  36. [actual] turjpus is mumhpus
  37. [actual] mumhpus is xetkpus
  38. [actual] xetkpus is tecwpus
  39. [actual] tecwpus is forypus
  40. [actual] forypus is babrpus
  41. [actual] x is babrpus
  42. [actual] forypus is babrpus
  43. [planning] x is babcpus
  44. [planning] x is babrpus
  45. [planning] x is babspus
  46. [planning] x is babcpus or babrpus or babspus
  47. [planning] x is babrpus
  48. [actual] x is babrpus
  49. [actual] x is babcpus or babrpus or babspus
  50. [planning] x is babrpus
  51. [actual] x is cilfpus→watmpus→rengpus→turjpus→mumhpus→xetkpus→tecwpus→forypus→babrpus
  52. [actual] x is babrpus
  53. [actual] x is babrpus
  54. [actual] tecwpus is forypus and qethpus
  55. [actual] xetkpus is tecwpus and qawhpus
  56. [actual] mumhpus is xetkpus
  57. [actual] cilfpus is watmpus
  58. [actual] watmpus is rengpus and dayvpus and vudlpus
  59. [actual] rengpus is turjpus
  60. [actual] forypus is babrpus and dagspus
  61. [actual] x is cilfpus
  62. [actual] turjpus is mumhpus
  63. [actual] x is babrpus

=== 开始标准化和解析节点 ===
清洗后statements数: 63
标准化后节点数: 67
过滤掉的无效实体数: -4
标准化后的节点:
  1. [actual] tecwpus → forypus and qethpus (原始: tecwpus is forypus and qethpus)
  2. [planning] x → babcpus (原始: x is babcpus)
  3. [planning] x → babrpus (原始: x is babrpus)
  4. [planning] x → babspus (原始: x is babspus)
  5. [actual] forypus → babrpus (原始: forypus is babrpus)
  6. [actual] forypus → dagspus (原始: forypus is dagspus)
  7. [actual] x → cilfpus (原始: x is cilfpus)
  8. [actual] x → cilfpus (原始: x is cilfpus)
  9. [actual] cilfpus → watmpus (原始: cilfpus is watmpus)
  10. [actual] watmpus → rengpus and dayvpus and vudlpus (原始: watmpus is rengpus and dayvpus and vudlpus)
  11. [actual] cilfpus → watmpus (原始: cilfpus is watmpus)
  12. [actual] cilfpus → watmpus (原始: cilfpus is watmpus)
  13. [actual] watmpus → rengpus and dayvpus and vudlpus (原始: watmpus is rengpus and dayvpus and vudlpus)
  14. [actual] cilfpus → rengpus (原始: cilfpus is rengpus)
  15. [actual] cilfpus → dayvpus (原始: cilfpus is dayvpus)
  16. [actual] cilfpus → vudlpus (原始: cilfpus is vudlpus)
  17. [actual] rengpus → turjpus (原始: rengpus is turjpus)
  18. [actual] turjpus → mumhpus (原始: turjpus is mumhpus)
  19. [actual] rengpus → turjpus (原始: rengpus is turjpus)
  20. [actual] turjpus → mumhpus (原始: turjpus is mumhpus)
  21. [actual] rengpus → mumhpus (原始: rengpus is mumhpus)
  22. [actual] cilfpus → rengpus (原始: cilfpus is rengpus)
  23. [actual] mumhpus → xetkpus (原始: mumhpus is xetkpus)
  24. [actual] xetkpus → tecwpus and qawhpus (原始: xetkpus is tecwpus and qawhpus)
  25. [actual] mumhpus → xetkpus (原始: mumhpus is xetkpus)
  26. [actual] xetkpus → tecwpus and qawhpus (原始: xetkpus is tecwpus and qawhpus)
  27. [actual] tecwpus → forypus and qethpus (原始: tecwpus is forypus and qethpus)
  28. [actual] forypus → babrpus and dagspus (原始: forypus is babrpus and dagspus)
  29. [actual] forypus → babrpus and dagspus (原始: forypus is babrpus and dagspus)
  30. [actual] x → cilfpus (原始: x is cilfpus)
  31. [actual] cilfpus → watmpus (原始: cilfpus is watmpus)
  32. [actual] watmpus → rengpus (原始: watmpus is rengpus)
  33. [actual] rengpus → turjpus (原始: rengpus is turjpus)
  34. [actual] turjpus → mumhpus (原始: turjpus is mumhpus)
  35. [actual] mumhpus → xetkpus (原始: mumhpus is xetkpus)
  36. [actual] xetkpus → tecwpus (原始: xetkpus is tecwpus)
  37. [actual] tecwpus → forypus (原始: tecwpus is forypus)
  38. [actual] forypus → babrpus (原始: forypus is babrpus)
  39. [actual] x → babrpus (原始: x is babrpus)
  40. [actual] forypus → babrpus (原始: forypus is babrpus)
  41. [planning] x → babcpus (原始: x is babcpus)
  42. [planning] x → babrpus (原始: x is babrpus)
  43. [planning] x → babspus (原始: x is babspus)
  44. [planning] x → babcpus or babrpus or babspus (原始: x is babcpus or babrpus or babspus)
  45. [planning] x → babrpus (原始: x is babrpus)
  46. [actual] x → babrpus (原始: x is babrpus)
  47. [actual] x → babcpus or babrpus or babspus (原始: x is babcpus or babrpus or babspus)
  48. [planning] x → babrpus (原始: x is babrpus)
  49. [actual] watmpus → rengpus (原始: watmpus is rengpus)
  50. [actual] rengpus → turjpus (原始: rengpus is turjpus)
  51. [actual] turjpus → mumhpus (原始: turjpus is mumhpus)
  52. [actual] mumhpus → xetkpus (原始: mumhpus is xetkpus)
  53. [actual] xetkpus → tecwpus (原始: xetkpus is tecwpus)
  54. [actual] tecwpus → forypus (原始: tecwpus is forypus)
  55. [actual] forypus → babrpus (原始: forypus is babrpus)
  56. [actual] x → babrpus (原始: x is babrpus)
  57. [actual] x → babrpus (原始: x is babrpus)
  58. [actual] tecwpus → forypus and qethpus (原始: tecwpus is forypus and qethpus)
  59. [actual] xetkpus → tecwpus and qawhpus (原始: xetkpus is tecwpus and qawhpus)
  60. [actual] mumhpus → xetkpus (原始: mumhpus is xetkpus)
  61. [actual] cilfpus → watmpus (原始: cilfpus is watmpus)
  62. [actual] watmpus → rengpus and dayvpus and vudlpus (原始: watmpus is rengpus and dayvpus and vudlpus)
  63. [actual] rengpus → turjpus (原始: rengpus is turjpus)
  64. [actual] forypus → babrpus and dagspus (原始: forypus is babrpus and dagspus)
  65. [actual] x → cilfpus (原始: x is cilfpus)
  66. [actual] turjpus → mumhpus (原始: turjpus is mumhpus)
  67. [actual] x → babrpus (原始: x is babrpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 15
[后处理] 加载LoG图，包含 15 个节点
  LoG节点 0: x is babcpus or babrpus or babspus (规则: MP, 深度: 1)
  LoG节点 1: x is tecwpus (规则: MP, 深度: 2)
  LoG节点 2: tecwpus is babcpus or babrpus or babspus (规则: DI, 深度: 2)
  LoG节点 3: x is rengpus (规则: CE, 深度: 3)
  LoG节点 4: rengpus is tecwpus (规则: CE, 深度: 3)
  LoG节点 5: tecwpus is babspus or babrpus (规则: DI, 深度: 3)
  LoG节点 6: x is rengpus and dayvpus (规则: MP, 深度: 4)
  LoG节点 7: rengpus is tecwpus and qawhpus (规则: MP, 深度: 4)
  LoG节点 8: tecwpus is babrpus (规则: MP, 深度: 4)
  LoG节点 9: x is watmpus (规则: MP, 深度: 5)
  LoG节点 10: watmpus is rengpus and dayvpus (规则: CE, 深度: 5)
  LoG节点 11: rengpus is mumhpus (规则: MP, 深度: 5)
  LoG节点 12: mumhpus is tecwpus and qawhpus (规则: MP, 深度: 5)
  LoG节点 13: tecwpus is forypus (规则: CE, 深度: 5)
  LoG节点 14: forypus is babrpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 67
   - 初始条件数: 9
   - LoG图节点数: 15

📋 初始条件列表:
    1. tecwpus is forypus and qethpus
    2. xetkpus is tecwpus and qawhpus
    3. mumhpus is xetkpus
    4. cilfpus is watmpus
    5. watmpus is rengpus and dayvpus and vudlpus
    6. rengpus is turjpus
    7. forypus is babrpus and dagspus
    8. x is cilfpus
    9. turjpus is mumhpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 9 个前提节点

🔍 开始处理actual节点...

   节点 1: tecwpus is forypus and qethpus
      ↻ 重复节点，计数: 2

   节点 2: forypus is babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: forypus is babrpus
      ✅ 验证成功 + LoG匹配

   节点 3: forypus is dagspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: forypus is babrpus and dagspus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: forypus is babrpus and dagspus

   节点 4: x is cilfpus
      ↻ 重复节点，计数: 2

   节点 5: x is cilfpus
      ↻ 重复节点，计数: 3

   节点 6: cilfpus is watmpus
      ↻ 重复节点，计数: 2

   节点 7: watmpus is rengpus and dayvpus and vudlpus
      ↻ 重复节点，计数: 2

   节点 8: cilfpus is watmpus
      ↻ 重复节点，计数: 3

   节点 9: cilfpus is watmpus
      ↻ 重复节点，计数: 4

   节点 10: watmpus is rengpus and dayvpus and vudlpus
      ↻ 重复节点，计数: 3

   节点 11: cilfpus is rengpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: cilfpus is watmpus → watmpus is rengpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: cilfpus is watmpus
  - 前提: watmpus is rengpus and dayvpus and vudlpus
  ✓ 点亮LoG节点: watmpus is rengpus and dayvpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 12: cilfpus is dayvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: cilfpus is watmpus → watmpus is dayvpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: cilfpus is watmpus
  - 前提: watmpus is rengpus and dayvpus and vudlpus

   节点 13: cilfpus is vudlpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: cilfpus is watmpus → watmpus is vudlpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: cilfpus is watmpus
  - 前提: watmpus is rengpus and dayvpus and vudlpus

   节点 14: rengpus is turjpus
      ↻ 重复节点，计数: 2

   节点 15: turjpus is mumhpus
      ↻ 重复节点，计数: 2

   节点 16: rengpus is turjpus
      ↻ 重复节点，计数: 3

   节点 17: turjpus is mumhpus
      ↻ 重复节点，计数: 3

   节点 18: rengpus is mumhpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: rengpus is mumhpus
      ✅ 验证成功 + LoG匹配

   节点 19: cilfpus is rengpus
      ↻ 重复节点，计数: 2

   节点 20: mumhpus is xetkpus
      ↻ 重复节点，计数: 2

   节点 21: xetkpus is tecwpus and qawhpus
      ↻ 重复节点，计数: 2

   节点 22: mumhpus is xetkpus
      ↻ 重复节点，计数: 3

   节点 23: xetkpus is tecwpus and qawhpus
      ↻ 重复节点，计数: 3

   节点 24: tecwpus is forypus and qethpus
      ↻ 重复节点，计数: 3

   节点 25: forypus is babrpus and dagspus
      ↻ 重复节点，计数: 2

   节点 26: forypus is babrpus and dagspus
      ↻ 重复节点，计数: 3

   节点 27: x is cilfpus
      ↻ 重复节点，计数: 4

   节点 28: cilfpus is watmpus
      ↻ 重复节点，计数: 5

   节点 29: watmpus is rengpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: watmpus is rengpus and dayvpus and vudlpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: watmpus is rengpus and dayvpus and vudlpus

   节点 30: rengpus is turjpus
      ↻ 重复节点，计数: 4

   节点 31: turjpus is mumhpus
      ↻ 重复节点，计数: 4

   节点 32: mumhpus is xetkpus
      ↻ 重复节点，计数: 4

   节点 33: xetkpus is tecwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: xetkpus is tecwpus and qawhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: xetkpus is tecwpus and qawhpus

   节点 34: tecwpus is forypus
      🔍 验证新节点...
[后处理] 点亮LoG节点: tecwpus is forypus
      ✅ 验证成功 + LoG匹配

   节点 35: forypus is babrpus
      ↻ 重复节点，计数: 2

   节点 36: x is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is cilfpus → cilfpus is babrpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is cilfpus
  - 前提: cilfpus is watmpus
  - 前提: watmpus is rengpus
  - 前提: rengpus is turjpus
  - 前提: turjpus is mumhpus
  - 前提: mumhpus is xetkpus
  - 前提: xetkpus is tecwpus
  - 前提: tecwpus is forypus
  - 前提: forypus is babrpus
  ✓ 点亮LoG节点: x is babcpus or babrpus or babspus
[子树点亮]     └─ 点亮依赖节点: x is tecwpus (深度2)
[子树点亮]     └─ 点亮依赖节点: tecwpus is babcpus or babrpus or babspus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is rengpus (深度3)
[子树点亮]     └─ 点亮依赖节点: rengpus is tecwpus (深度3)
[子树点亮]     └─ 点亮依赖节点: tecwpus is babspus or babrpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is rengpus and dayvpus (深度4)
[子树点亮]     └─ 点亮依赖节点: rengpus is tecwpus and qawhpus (深度4)
[子树点亮]     └─ 点亮依赖节点: tecwpus is babrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is watmpus (深度5)
[子树点亮]     └─ 点亮依赖节点: mumhpus is tecwpus and qawhpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 10 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 37: forypus is babrpus
      ↻ 重复节点，计数: 3

   节点 38: x is babrpus
      ↻ 重复节点，计数: 2

   节点 39: x is babcpus or babrpus or babspus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 40: watmpus is rengpus
      ↻ 重复节点，计数: 2

   节点 41: rengpus is turjpus
      ↻ 重复节点，计数: 5

   节点 42: turjpus is mumhpus
      ↻ 重复节点，计数: 5

   节点 43: mumhpus is xetkpus
      ↻ 重复节点，计数: 5

   节点 44: xetkpus is tecwpus
      ↻ 重复节点，计数: 2

   节点 45: tecwpus is forypus
      ↻ 重复节点，计数: 2

   节点 46: forypus is babrpus
      ↻ 重复节点，计数: 4

   节点 47: x is babrpus
      ↻ 重复节点，计数: 3

   节点 48: x is babrpus
      ↻ 重复节点，计数: 4

   节点 49: tecwpus is forypus and qethpus
      ↻ 重复节点，计数: 4

   节点 50: xetkpus is tecwpus and qawhpus
      ↻ 重复节点，计数: 4

   节点 51: mumhpus is xetkpus
      ↻ 重复节点，计数: 6

   节点 52: cilfpus is watmpus
      ↻ 重复节点，计数: 6

   节点 53: watmpus is rengpus and dayvpus and vudlpus
      ↻ 重复节点，计数: 4

   节点 54: rengpus is turjpus
      ↻ 重复节点，计数: 6

   节点 55: forypus is babrpus and dagspus
      ↻ 重复节点，计数: 4

   节点 56: x is cilfpus
      ↻ 重复节点，计数: 5

   节点 57: turjpus is mumhpus
      ↻ 重复节点，计数: 6

   节点 58: x is babrpus
      ↻ 重复节点，计数: 5

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 58
   - 新增节点: 11
   - 更新已存在节点: 47
   - 点亮的LoG节点: 15

🎯 推理质量统计:
   - 完美推理: 11 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 15节点, 9前提, 复杂度1-9

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 20
   - 前提节点: 9
   - 推理节点: 11
   - 幻觉节点: 0
   - 点亮LoG节点: 15

✅ 推理节点详情:
   🟢 forypus is babrpus (出现4次, 质量:perfect)
   🟢 forypus is dagspus (出现1次, 质量:perfect)
   🟢 cilfpus is rengpus (出现2次, 质量:perfect)
   🟢 cilfpus is dayvpus (出现1次, 质量:perfect)
   🟢 cilfpus is vudlpus (出现1次, 质量:perfect)
   🟢 rengpus is mumhpus (出现1次, 质量:perfect)
   🟢 watmpus is rengpus (出现2次, 质量:perfect)
   🟢 xetkpus is tecwpus (出现2次, 质量:perfect)
   🟢 tecwpus is forypus (出现2次, 质量:perfect)
   🟢 x is babrpus (出现5次, 质量:perfect)
   🟢 x is babcpus or babrpus or babspus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - tecwpus is babrpus
   - x is watmpus
   - forypus is babrpus
   - tecwpus is forypus
   - tecwpus is babspus or babrpus
   - rengpus is mumhpus
   - watmpus is rengpus and dayvpus
   - rengpus is tecwpus
   - tecwpus is babcpus or babrpus or babspus
   - x is tecwpus
   - x is rengpus
   - x is rengpus and dayvpus
   - mumhpus is tecwpus and qawhpus
   - x is babcpus or babrpus or babspus
   - rengpus is tecwpus and qawhpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus or babrpus or babspus (第5层)
   节点Coverage: 15/15 = 100.00%
   前提条件Coverage: 9/9 = 100.00%
   各推理层点亮比例:
     第1层: 6/6 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 3/3 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/11 = 0.00%
   可推导节点: 11/11
   Strict Error Rate: 0/11 = 0.00%
   严格有效节点: 11/11

   详细分析:
     完美推理: 11 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 17/50
================================================================================
记录索引: 16
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_16.json
✅ 使用缓存结果:
   - 句子数: 131
   - 提取的语句数: 126
   - 初始条件数: 19

=== Statement提取完成 ===
总句子数: 131
成功提取: 131
失败提取: 0
总statements数: 126

=== 开始清洗Statement格式 ===
原始statements数: 126
清洗后statements数: 112
过滤掉的statements数: 14
清洗后的statements:
  1. [planning] x is babcpus and babrpus
  2. [actual] x is jowqpus and jozdpus
  3. [actual] x is jowqpus and jozdpus
  4. [planning] x is babcpus and babrpus
  5. [planning] jowqpus is babcpus or babrpus
  6. [planning] jozdpus is babcpus or babrpus
  7. [actual] lerwpus is babgpus and rayspus
  8. [actual] x is relmpus and muqcpus
  9. [planning] x is babgpus
  10. [planning] x is babgpus
  11. [actual] lerwpus is yexbpus
  12. [actual] yexbpus is lerwpus and pazjpus
  13. [actual] x is relmpus
  14. [actual] relmpus is babgpus
  15. [actual] x is babgpus
  16. [planning] x is babgpus and babkpus and babmpus
  17. [planning] x is babgpus
  18. [planning] x is relmpus
  19. [planning] x is babgpus
  20. [actual] defspus is xoszpus
  21. [actual] luchpus is nolnpus and qojlpus
  22. [actual] perdpus is nikypus
  23. [actual] nolnpus is dirppus and vivxpus
  24. [actual] bafvpus is defspus
  25. [actual] nikypus is luchpus
  26. [actual] doygpus is bafvpus and hevnpus
  27. [actual] jowqpus is qonrpus
  28. [actual] x is jowqpus and jozdpus
  29. [actual] huylpus is suqrpus and roxkpus
  30. [actual] dirppus is doygpus
  31. [actual] nolnpus is dirppus
  32. [actual] dirppus is a category
  33. [actual] wehwpus is huylpus
  34. [actual] xoszpus is babcpus and werdpus
  35. [actual] suqrpus is babrpus and gokgpus
  36. [actual] dirppus is quwppus
  37. [actual] xutxpus is wehwpus
  38. [actual] quwppus is xutxpus
  39. [actual] jowqpus is kamwpus
  40. [actual] jowqpus is qonrpus
  41. [actual] jowqpus is kamwpus
  42. [actual] kamwpus is perdpus and lafdpus
  43. [actual] x is jowqpus and jozdpus
  44. [planning] x is babcpus and babrpus
  45. [actual] babcpus is mentioned in point 13
  46. [actual] xoszpus is babcpus and werdpus
  47. [actual] babrpus is mentioned in point 14
  48. [actual] suqrpus is babrpus and gokgpus
  49. [planning] x is xoszpus or suqrpus
  50. [actual] x is jowqpus
  51. [actual] jowqpus is kamwpus
  52. [actual] kamwpus is perdpus and lafdpus
  53. [actual] perdpus is nikypus
  54. [actual] nikypus is luchpus
  55. [actual] luchpus is nolnpus and qojlpus
  56. [actual] nolnpus is dirppus and vivxpus
  57. [actual] dirppus is doygpus
  58. [actual] dirppus is doygpus
  59. [actual] nolnpus is dirppus
  60. [actual] nolnpus is doygpus
  61. [actual] doygpus is bafvpus and hevnpus
  62. [actual] bafvpus is defspus
  63. [actual] defspus is xoszpus
  64. [actual] xoszpus is babcpus and werdpus
  65. [actual] jowqpus is babcpus
  66. [actual] x is jowqpus
  67. [actual] jowqpus is kamwpus
  68. [actual] kamwpus is perdpus
  69. [actual] perdpus is nikypus
  70. [actual] nikypus is luchpus
  71. [actual] luchpus is nolnpus
  72. [actual] nolnpus is dirppus
  73. [actual] dirppus is doygpus
  74. [actual] doygpus is bafvpus
  75. [actual] bafvpus is defspus
  76. [actual] xoszpus is babcpus
  77. [actual] x is jowqpus
  78. [actual] jowqpus is babcpus
  79. [actual] x is babcpus
  80. [planning] x is babcpus
  81. [planning] x is babrpus
  82. [actual] babrpus is suqrpus
  83. [actual] suqrpus is huylpus
  84. [actual] luchpus is nolnpus and qojlpus
  85. [planning] x is jozdpus
  86. [planning] jozdpus is what
  87. [actual] x is jowqpus
  88. [actual] luchpus is the chain
  89. [actual] luchpus is nolnpus and qojlpus
  90. [actual] huylpus is suqrpus and roxkpus
  91. [actual] wehwpus is huylpus
  92. [actual] xutxpus is wehwpus
  93. [actual] quwppus is xutxpus
  94. [actual] dirppus is quwppus
  95. [actual] nolnpus is dirppus
  96. [actual] dirppus is quwppus
  97. [actual] dirppus is quwppus
  98. [actual] quwppus is xutxpus
  99. [actual] xutxpus is wehwpus
  100. [actual] wehwpus is huylpus
  101. [actual] huylpus is suqrpus
  102. [actual] suqrpus is babrpus
  103. [actual] dirppus is babrpus
  104. [actual] dirppus is the chainjowqpus
  105. [planning] jowqpus is babrpus
  106. [actual] x is jowqpus
  107. [actual] x is babrpus
  108. [actual] x is babcpus and babrpus
  109. [planning] x is babcpus and babrpus
  110. [actual] x is jowqpus and jozdpus
  111. [planning] x is babcpus
  112. [planning] x is babrpus

=== 开始标准化和解析节点 ===
清洗后statements数: 112
标准化后节点数: 106
过滤掉的无效实体数: 6
标准化后的节点:
  1. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  2. [actual] x → jowqpus and jozdpus (原始: x is jowqpus and jozdpus)
  3. [actual] x → jowqpus and jozdpus (原始: x is jowqpus and jozdpus)
  4. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  5. [planning] jowqpus → babcpus or babrpus (原始: jowqpus is babcpus or babrpus)
  6. [planning] jozdpus → babcpus or babrpus (原始: jozdpus is babcpus or babrpus)
  7. [actual] lerwpus → babgpus and rayspus (原始: lerwpus is babgpus and rayspus)
  8. [actual] x → relmpus and muqcpus (原始: x is relmpus and muqcpus)
  9. [planning] x → babgpus (原始: x is babgpus)
  10. [planning] x → babgpus (原始: x is babgpus)
  11. [actual] lerwpus → yexbpus (原始: lerwpus is yexbpus)
  12. [actual] yexbpus → lerwpus and pazjpus (原始: yexbpus is lerwpus and pazjpus)
  13. [actual] x → relmpus (原始: x is relmpus)
  14. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  15. [actual] x → babgpus (原始: x is babgpus)
  16. [planning] x → babgpus and babkpus and babmpus (原始: x is babgpus and babkpus and babmpus)
  17. [planning] x → babgpus (原始: x is babgpus)
  18. [planning] x → relmpus (原始: x is relmpus)
  19. [planning] x → babgpus (原始: x is babgpus)
  20. [actual] defspus → xoszpus (原始: defspus is xoszpus)
  21. [actual] luchpus → nolnpus and qojlpus (原始: luchpus is nolnpus and qojlpus)
  22. [actual] perdpus → nikypus (原始: perdpus is nikypus)
  23. [actual] nolnpus → dirppus and vivxpus (原始: nolnpus is dirppus and vivxpus)
  24. [actual] bafvpus → defspus (原始: bafvpus is defspus)
  25. [actual] nikypus → luchpus (原始: nikypus is luchpus)
  26. [actual] doygpus → bafvpus and hevnpus (原始: doygpus is bafvpus and hevnpus)
  27. [actual] jowqpus → qonrpus (原始: jowqpus is qonrpus)
  28. [actual] x → jowqpus and jozdpus (原始: x is jowqpus and jozdpus)
  29. [actual] huylpus → suqrpus and roxkpus (原始: huylpus is suqrpus and roxkpus)
  30. [actual] dirppus → doygpus (原始: dirppus is doygpus)
  31. [actual] nolnpus → dirppus (原始: nolnpus is dirppus)
  32. [actual] wehwpus → huylpus (原始: wehwpus is huylpus)
  33. [actual] xoszpus → babcpus and werdpus (原始: xoszpus is babcpus and werdpus)
  34. [actual] suqrpus → babrpus and gokgpus (原始: suqrpus is babrpus and gokgpus)
  35. [actual] dirppus → quwppus (原始: dirppus is quwppus)
  36. [actual] xutxpus → wehwpus (原始: xutxpus is wehwpus)
  37. [actual] quwppus → xutxpus (原始: quwppus is xutxpus)
  38. [actual] jowqpus → kamwpus (原始: jowqpus is kamwpus)
  39. [actual] jowqpus → qonrpus (原始: jowqpus is qonrpus)
  40. [actual] jowqpus → kamwpus (原始: jowqpus is kamwpus)
  41. [actual] kamwpus → perdpus and lafdpus (原始: kamwpus is perdpus and lafdpus)
  42. [actual] x → jowqpus and jozdpus (原始: x is jowqpus and jozdpus)
  43. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  44. [actual] xoszpus → babcpus and werdpus (原始: xoszpus is babcpus and werdpus)
  45. [actual] suqrpus → babrpus and gokgpus (原始: suqrpus is babrpus and gokgpus)
  46. [planning] x → xoszpus or suqrpus (原始: x is xoszpus or suqrpus)
  47. [actual] x → jowqpus (原始: x is jowqpus)
  48. [actual] jowqpus → kamwpus (原始: jowqpus is kamwpus)
  49. [actual] kamwpus → perdpus and lafdpus (原始: kamwpus is perdpus and lafdpus)
  50. [actual] perdpus → nikypus (原始: perdpus is nikypus)
  51. [actual] nikypus → luchpus (原始: nikypus is luchpus)
  52. [actual] luchpus → nolnpus and qojlpus (原始: luchpus is nolnpus and qojlpus)
  53. [actual] nolnpus → dirppus and vivxpus (原始: nolnpus is dirppus and vivxpus)
  54. [actual] dirppus → doygpus (原始: dirppus is doygpus)
  55. [actual] dirppus → doygpus (原始: dirppus is doygpus)
  56. [actual] nolnpus → dirppus (原始: nolnpus is dirppus)
  57. [actual] nolnpus → doygpus (原始: nolnpus is doygpus)
  58. [actual] doygpus → bafvpus and hevnpus (原始: doygpus is bafvpus and hevnpus)
  59. [actual] bafvpus → defspus (原始: bafvpus is defspus)
  60. [actual] defspus → xoszpus (原始: defspus is xoszpus)
  61. [actual] xoszpus → babcpus and werdpus (原始: xoszpus is babcpus and werdpus)
  62. [actual] jowqpus → babcpus (原始: jowqpus is babcpus)
  63. [actual] x → jowqpus (原始: x is jowqpus)
  64. [actual] jowqpus → kamwpus (原始: jowqpus is kamwpus)
  65. [actual] kamwpus → perdpus (原始: kamwpus is perdpus)
  66. [actual] perdpus → nikypus (原始: perdpus is nikypus)
  67. [actual] nikypus → luchpus (原始: nikypus is luchpus)
  68. [actual] luchpus → nolnpus (原始: luchpus is nolnpus)
  69. [actual] nolnpus → dirppus (原始: nolnpus is dirppus)
  70. [actual] dirppus → doygpus (原始: dirppus is doygpus)
  71. [actual] doygpus → bafvpus (原始: doygpus is bafvpus)
  72. [actual] bafvpus → defspus (原始: bafvpus is defspus)
  73. [actual] xoszpus → babcpus (原始: xoszpus is babcpus)
  74. [actual] x → jowqpus (原始: x is jowqpus)
  75. [actual] jowqpus → babcpus (原始: jowqpus is babcpus)
  76. [actual] x → babcpus (原始: x is babcpus)
  77. [planning] x → babcpus (原始: x is babcpus)
  78. [planning] x → babrpus (原始: x is babrpus)
  79. [actual] babrpus → suqrpus (原始: babrpus is suqrpus)
  80. [actual] suqrpus → huylpus (原始: suqrpus is huylpus)
  81. [actual] luchpus → nolnpus and qojlpus (原始: luchpus is nolnpus and qojlpus)
  82. [planning] x → jozdpus (原始: x is jozdpus)
  83. [actual] x → jowqpus (原始: x is jowqpus)
  84. [actual] luchpus → nolnpus and qojlpus (原始: luchpus is nolnpus and qojlpus)
  85. [actual] huylpus → suqrpus and roxkpus (原始: huylpus is suqrpus and roxkpus)
  86. [actual] wehwpus → huylpus (原始: wehwpus is huylpus)
  87. [actual] xutxpus → wehwpus (原始: xutxpus is wehwpus)
  88. [actual] quwppus → xutxpus (原始: quwppus is xutxpus)
  89. [actual] dirppus → quwppus (原始: dirppus is quwppus)
  90. [actual] nolnpus → dirppus (原始: nolnpus is dirppus)
  91. [actual] dirppus → quwppus (原始: dirppus is quwppus)
  92. [actual] dirppus → quwppus (原始: dirppus is quwppus)
  93. [actual] quwppus → xutxpus (原始: quwppus is xutxpus)
  94. [actual] xutxpus → wehwpus (原始: xutxpus is wehwpus)
  95. [actual] wehwpus → huylpus (原始: wehwpus is huylpus)
  96. [actual] huylpus → suqrpus (原始: huylpus is suqrpus)
  97. [actual] suqrpus → babrpus (原始: suqrpus is babrpus)
  98. [actual] dirppus → babrpus (原始: dirppus is babrpus)
  99. [planning] jowqpus → babrpus (原始: jowqpus is babrpus)
  100. [actual] x → jowqpus (原始: x is jowqpus)
  101. [actual] x → babrpus (原始: x is babrpus)
  102. [actual] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  103. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  104. [actual] x → jowqpus and jozdpus (原始: x is jowqpus and jozdpus)
  105. [planning] x → babcpus (原始: x is babcpus)
  106. [planning] x → babrpus (原始: x is babrpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 27
[后处理] 加载LoG图，包含 27 个节点
  LoG节点 0: x is babcpus and babrpus (规则: MP, 深度: 1)
  LoG节点 1: x is dirppus (规则: MP, 深度: 2)
  LoG节点 2: dirppus is babcpus and babrpus (规则: CI, 深度: 2)
  LoG节点 3: x is kamwpus (规则: CE, 深度: 3)
  LoG节点 4: kamwpus is dirppus (规则: MP, 深度: 3)
  LoG节点 5: dirppus is babcpus (规则: MP, 深度: 3)
  LoG节点 6: dirppus is babrpus (规则: MP, 深度: 3)
  LoG节点 7: x is kamwpus and qonrpus (规则: MP, 深度: 4)
  LoG节点 8: kamwpus is luchpus (规则: MP, 深度: 4)
  LoG节点 9: luchpus is dirppus (规则: MP, 深度: 4)
  LoG节点 10: dirppus is bafvpus (规则: CE, 深度: 4)
  LoG节点 11: bafvpus is babcpus (规则: MP, 深度: 4)
  LoG节点 12: dirppus is huylpus (规则: MP, 深度: 4)
  LoG节点 13: huylpus is babrpus (规则: MP, 深度: 4)
  LoG节点 14: x is jowqpus (规则: CE, 深度: 5)
  LoG节点 15: jowqpus is kamwpus and qonrpus (规则: CI, 深度: 5)
  LoG节点 16: kamwpus is perdpus (规则: CE, 深度: 5)
  LoG节点 17: perdpus is luchpus (规则: MP, 深度: 5)
  LoG节点 18: luchpus is nolnpus (规则: CE, 深度: 5)
  LoG节点 19: nolnpus is dirppus (规则: CE, 深度: 5)
  LoG节点 20: dirppus is bafvpus and hevnpus (规则: MP, 深度: 5)
  LoG节点 21: bafvpus is xoszpus (规则: MP, 深度: 5)
  LoG节点 22: xoszpus is babcpus (规则: CE, 深度: 5)
  LoG节点 23: dirppus is xutxpus (规则: MP, 深度: 5)
  LoG节点 24: xutxpus is huylpus (规则: MP, 深度: 5)
  LoG节点 25: huylpus is suqrpus (规则: CE, 深度: 5)
  LoG节点 26: suqrpus is babrpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 106
   - 初始条件数: 19
   - LoG图节点数: 27

📋 初始条件列表:
    1. defspus is xoszpus
    2. luchpus is nolnpus and qojlpus
    3. perdpus is nikypus
    4. nolnpus is dirppus and vivxpus
    5. bafvpus is defspus
    6. nikypus is luchpus
    7. doygpus is bafvpus and hevnpus
    8. jowqpus is qonrpus
    9. x is jowqpus and jozdpus
   10. huylpus is suqrpus and roxkpus
   11. dirppus is doygpus
   12. wehwpus is huylpus
   13. xoszpus is babcpus and werdpus
   14. suqrpus is babrpus and gokgpus
   15. dirppus is quwppus
   16. xutxpus is wehwpus
   17. quwppus is xutxpus
   18. jowqpus is kamwpus
   19. kamwpus is perdpus and lafdpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 19 个前提节点

🔍 开始处理actual节点...

   节点 1: x is jowqpus and jozdpus
      ↻ 重复节点，计数: 2

   节点 2: x is jowqpus and jozdpus
      ↻ 重复节点，计数: 3

   节点 3: lerwpus is babgpus and rayspus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 4: x is relmpus and muqcpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 5: lerwpus is yexbpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 6: yexbpus is lerwpus and pazjpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 7: x is relmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is relmpus and muqcpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is relmpus and muqcpus

   节点 8: relmpus is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 9: x is babgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is relmpus → relmpus is babgpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is relmpus
  - 前提: relmpus is babgpus

   节点 10: defspus is xoszpus
      ↻ 重复节点，计数: 2

   节点 11: luchpus is nolnpus and qojlpus
      ↻ 重复节点，计数: 2

   节点 12: perdpus is nikypus
      ↻ 重复节点，计数: 2

   节点 13: nolnpus is dirppus and vivxpus
      ↻ 重复节点，计数: 2

   节点 14: bafvpus is defspus
      ↻ 重复节点，计数: 2

   节点 15: nikypus is luchpus
      ↻ 重复节点，计数: 2

   节点 16: doygpus is bafvpus and hevnpus
      ↻ 重复节点，计数: 2

   节点 17: jowqpus is qonrpus
      ↻ 重复节点，计数: 2

   节点 18: x is jowqpus and jozdpus
      ↻ 重复节点，计数: 4

   节点 19: huylpus is suqrpus and roxkpus
      ↻ 重复节点，计数: 2

   节点 20: dirppus is doygpus
      ↻ 重复节点，计数: 2

   节点 21: nolnpus is dirppus
      🔍 验证新节点...
[后处理] 点亮LoG节点: nolnpus is dirppus
      ✅ 验证成功 + LoG匹配

   节点 22: wehwpus is huylpus
      ↻ 重复节点，计数: 2

   节点 23: xoszpus is babcpus and werdpus
      ↻ 重复节点，计数: 2

   节点 24: suqrpus is babrpus and gokgpus
      ↻ 重复节点，计数: 2

   节点 25: dirppus is quwppus
      ↻ 重复节点，计数: 2

   节点 26: xutxpus is wehwpus
      ↻ 重复节点，计数: 2

   节点 27: quwppus is xutxpus
      ↻ 重复节点，计数: 2

   节点 28: jowqpus is kamwpus
      ↻ 重复节点，计数: 2

   节点 29: jowqpus is qonrpus
      ↻ 重复节点，计数: 3

   节点 30: jowqpus is kamwpus
      ↻ 重复节点，计数: 3

   节点 31: kamwpus is perdpus and lafdpus
      ↻ 重复节点，计数: 2

   节点 32: x is jowqpus and jozdpus
      ↻ 重复节点，计数: 5

   节点 33: xoszpus is babcpus and werdpus
      ↻ 重复节点，计数: 3

   节点 34: suqrpus is babrpus and gokgpus
      ↻ 重复节点，计数: 3

   节点 35: x is jowqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is jowqpus
      ✅ 验证成功 + LoG匹配

   节点 36: jowqpus is kamwpus
      ↻ 重复节点，计数: 4

   节点 37: kamwpus is perdpus and lafdpus
      ↻ 重复节点，计数: 3

   节点 38: perdpus is nikypus
      ↻ 重复节点，计数: 3

   节点 39: nikypus is luchpus
      ↻ 重复节点，计数: 3

   节点 40: luchpus is nolnpus and qojlpus
      ↻ 重复节点，计数: 3

   节点 41: nolnpus is dirppus and vivxpus
      ↻ 重复节点，计数: 3

   节点 42: dirppus is doygpus
      ↻ 重复节点，计数: 3

   节点 43: dirppus is doygpus
      ↻ 重复节点，计数: 4

   节点 44: nolnpus is dirppus
      ↻ 重复节点，计数: 2

   节点 45: nolnpus is doygpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: nolnpus is dirppus → dirppus is doygpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: nolnpus is dirppus
  - 前提: dirppus is doygpus

   节点 46: doygpus is bafvpus and hevnpus
      ↻ 重复节点，计数: 3

   节点 47: bafvpus is defspus
      ↻ 重复节点，计数: 3

   节点 48: defspus is xoszpus
      ↻ 重复节点，计数: 3

   节点 49: xoszpus is babcpus and werdpus
      ↻ 重复节点，计数: 4

   节点 50: jowqpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: jowqpus is kamwpus → kamwpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 11 个前提条件:
  - 前提: jowqpus is kamwpus
  - 前提: kamwpus is perdpus and lafdpus
  - 前提: perdpus is nikypus
  - 前提: nikypus is luchpus
  - 前提: luchpus is nolnpus and qojlpus
  - 前提: nolnpus is dirppus
  - 前提: dirppus is doygpus
  - 前提: doygpus is bafvpus and hevnpus
  - 前提: bafvpus is defspus
  - 前提: defspus is xoszpus
  - 前提: xoszpus is babcpus and werdpus
  ✓ 点亮LoG节点: kamwpus is dirppus
[子树点亮]     └─ 点亮依赖节点: kamwpus is luchpus (深度4)
[子树点亮]     └─ 点亮依赖节点: luchpus is dirppus (深度4)
[子树点亮]     └─ 点亮依赖节点: kamwpus is perdpus (深度5)
[子树点亮]     └─ 点亮依赖节点: perdpus is luchpus (深度5)
[子树点亮]     └─ 点亮依赖节点: luchpus is nolnpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
  ✓ 点亮LoG节点: dirppus is babcpus
[子树点亮]     └─ 点亮依赖节点: dirppus is bafvpus (深度4)
[子树点亮]     └─ 点亮依赖节点: bafvpus is babcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: dirppus is bafvpus and hevnpus (深度5)
[子树点亮]     └─ 点亮依赖节点: bafvpus is xoszpus (深度5)
[子树点亮]     └─ 点亮依赖节点: xoszpus is babcpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
[后处理] 通过推理轨迹额外点亮了 2 个LoG节点

   节点 51: x is jowqpus
      ↻ 重复节点，计数: 2

   节点 52: jowqpus is kamwpus
      ↻ 重复节点，计数: 5

   节点 53: kamwpus is perdpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 54: perdpus is nikypus
      ↻ 重复节点，计数: 4

   节点 55: nikypus is luchpus
      ↻ 重复节点，计数: 4

   节点 56: luchpus is nolnpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 57: nolnpus is dirppus
      ↻ 重复节点，计数: 3

   节点 58: dirppus is doygpus
      ↻ 重复节点，计数: 5

   节点 59: doygpus is bafvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: doygpus is bafvpus and hevnpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: doygpus is bafvpus and hevnpus

   节点 60: bafvpus is defspus
      ↻ 重复节点，计数: 4

   节点 61: xoszpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 62: x is jowqpus
      ↻ 重复节点，计数: 3

   节点 63: jowqpus is babcpus
      ↻ 重复节点，计数: 2

   节点 64: x is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is jowqpus → jowqpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is jowqpus
  - 前提: jowqpus is babcpus

   节点 65: babrpus is suqrpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 66: suqrpus is huylpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 67: luchpus is nolnpus and qojlpus
      ↻ 重复节点，计数: 4

   节点 68: x is jowqpus
      ↻ 重复节点，计数: 4

   节点 69: luchpus is nolnpus and qojlpus
      ↻ 重复节点，计数: 5

   节点 70: huylpus is suqrpus and roxkpus
      ↻ 重复节点，计数: 3

   节点 71: wehwpus is huylpus
      ↻ 重复节点，计数: 3

   节点 72: xutxpus is wehwpus
      ↻ 重复节点，计数: 3

   节点 73: quwppus is xutxpus
      ↻ 重复节点，计数: 3

   节点 74: dirppus is quwppus
      ↻ 重复节点，计数: 3

   节点 75: nolnpus is dirppus
      ↻ 重复节点，计数: 4

   节点 76: dirppus is quwppus
      ↻ 重复节点，计数: 4

   节点 77: dirppus is quwppus
      ↻ 重复节点，计数: 5

   节点 78: quwppus is xutxpus
      ↻ 重复节点，计数: 4

   节点 79: xutxpus is wehwpus
      ↻ 重复节点，计数: 4

   节点 80: wehwpus is huylpus
      ↻ 重复节点，计数: 4

   节点 81: huylpus is suqrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: huylpus is suqrpus
      ✅ 验证成功 + LoG匹配

   节点 82: suqrpus is babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: suqrpus is babrpus
      ✅ 验证成功 + LoG匹配

   节点 83: dirppus is babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: dirppus is babrpus
[子树点亮]     └─ 点亮依赖节点: dirppus is huylpus (深度4)
[子树点亮]     └─ 点亮依赖节点: huylpus is babrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: dirppus is xutxpus (深度5)
[子树点亮]     └─ 点亮依赖节点: xutxpus is huylpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
      ✅ 验证成功 + LoG匹配

   节点 84: x is jowqpus
      ↻ 重复节点，计数: 5

   节点 85: x is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is jowqpus → jowqpus is babrpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is jowqpus
  - 前提: jowqpus is kamwpus
  - 前提: kamwpus is perdpus
  - 前提: perdpus is nikypus
  - 前提: nikypus is luchpus
  - 前提: luchpus is nolnpus
  - 前提: nolnpus is dirppus
  - 前提: dirppus is babrpus
  ✓ 点亮LoG节点: x is dirppus
[子树点亮]     └─ 点亮依赖节点: x is kamwpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is kamwpus and qonrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: jowqpus is kamwpus and qonrpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 86: x is babcpus and babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus and babrpus
[子树点亮]     └─ 点亮依赖节点: dirppus is babcpus and babrpus (深度2)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 87: x is jowqpus and jozdpus
      ↻ 重复节点，计数: 6

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 87
   - 新增节点: 23
   - 更新已存在节点: 64
   - 点亮的LoG节点: 27

🎯 推理质量统计:
   - 完美推理: 13 (节点正确 + 路径正确)
   - 部分推理: 8 (节点正确 + 路径部分错误)
   - 无效推理: 2 (节点错误或路径完全错误)
[LoG分析] LoG图: 27节点, 19前提, 复杂度1-19

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 42
   - 前提节点: 19
   - 推理节点: 16
   - 幻觉节点: 7
   - 点亮LoG节点: 27

❌ 幻觉节点详情:
   - lerwpus is babgpus and rayspus (出现1次)
   - x is relmpus and muqcpus (出现1次)
   - lerwpus is yexbpus (出现1次)
   - yexbpus is lerwpus and pazjpus (出现1次)
   - relmpus is babgpus (出现1次)
   - babrpus is suqrpus (出现1次)
   - suqrpus is huylpus (出现1次)

✅ 推理节点详情:
   🟡 x is relmpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is babgpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus', 'relmpus is babgpus']
   🟢 nolnpus is dirppus (出现4次, 质量:perfect)
   🟡 x is jowqpus (出现5次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟢 nolnpus is doygpus (出现1次, 质量:perfect)
   🟢 jowqpus is babcpus (出现2次, 质量:perfect)
   🟢 kamwpus is perdpus (出现1次, 质量:perfect)
   🟢 luchpus is nolnpus (出现1次, 质量:perfect)
   🟢 doygpus is bafvpus (出现1次, 质量:perfect)
   🟢 xoszpus is babcpus (出现1次, 质量:perfect)
   🟡 x is babcpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 huylpus is suqrpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['babrpus is suqrpus']
   🟡 suqrpus is babrpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['suqrpus is huylpus']
   🟢 dirppus is babrpus (出现1次, 质量:perfect)
   🟡 x is babrpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is babcpus and babrpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']

🔥 点亮的LoG节点:
   - luchpus is nolnpus
   - suqrpus is babrpus
   - x is kamwpus
   - luchpus is dirppus
   - bafvpus is xoszpus
   - kamwpus is luchpus
   - huylpus is suqrpus
   - huylpus is babrpus
   - jowqpus is kamwpus and qonrpus
   - perdpus is luchpus
   - dirppus is babcpus and babrpus
   - dirppus is babrpus
   - kamwpus is perdpus
   - dirppus is xutxpus
   - dirppus is babcpus
   - nolnpus is dirppus
   - kamwpus is dirppus
   - bafvpus is babcpus
   - x is dirppus
   - xutxpus is huylpus
   - dirppus is huylpus
   - dirppus is bafvpus and hevnpus
   - xoszpus is babcpus
   - dirppus is bafvpus
   - x is kamwpus and qonrpus
   - x is jowqpus
   - x is babcpus and babrpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus and babrpus (第5层)
   节点Coverage: 27/27 = 100.00%
   前提条件Coverage: 19/19 = 100.00%
   各推理层点亮比例:
     第1层: 13/13 = 100.00%
     第2层: 7/7 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 7/23 = 30.43%
   可推导节点: 16/23
   Strict Error Rate: 15/23 = 65.22%
   严格有效节点: 8/23

   详细分析:
     完美推理: 13 (56.52%)
     部分推理: 8 (34.78%)
     无效推理: 2 (8.70%)

================================================================================
处理记录 18/50
================================================================================
记录索引: 17
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_17.json
✅ 使用缓存结果:
   - 句子数: 85
   - 提取的语句数: 90
   - 初始条件数: 20

=== Statement提取完成 ===
总句子数: 85
成功提取: 85
失败提取: 0
总statements数: 90

=== 开始清洗Statement格式 ===
原始statements数: 90
清洗后statements数: 81
过滤掉的statements数: 9
清洗后的statements:
  1. [planning] x is babcpus
  2. [planning] x is babrpus
  3. [planning] x is babspus
  4. [actual] x is dishpus
  5. [planning] dishpus is B
  6. [actual] dishpus is tofgpus
  7. [actual] tofgpus is zokvpus and piygpus
  8. [actual] zokvpus is gaqlpus
  9. [actual] gaqlpus is pacmpus and cahfpus
  10. [actual] pacmpus is rarvpus
  11. [actual] rarvpus is rechpus and kimspus
  12. [actual] rechpus is meywpus and daphpus
  13. [actual] meywpus is xayqpus and xaflpus
  14. [actual] xayqpus is tamdpus
  15. [actual] tamdpus is sibnpus
  16. [actual] sibnpus is vehtpus and cubrpus
  17. [actual] vehtpus is tovypus
  18. [actual] tovypus is cokjpus and mimppus
  19. [actual] cokjpus is zigzpus
  20. [actual] zigzpus is xetxpus
  21. [actual] xetxpus is caxppus and hiqhpus
  22. [actual] caxppus is kekcpus
  23. [actual] kekcpus is zufxpus
  24. [actual] zufxpus is babcpus or babrpus
  25. [actual] x is dishpus
  26. [planning] x is babcpus
  27. [planning] x is babrpus
  28. [planning] x is babspus
  29. [actual] zufxpus is either babcpus or babrpus
  30. [planning] x is zufxpus
  31. [actual] x is dishpus
  32. [actual] tofgpus is zokvpus and piygpus
  33. [planning] zokvpus is gaqlpus
  34. [actual] zokvpus is gaqlpus
  35. [actual] gaqlpus is pacmpus and cahfpus
  36. [actual] pacmpus is rarvpus
  37. [actual] rarvpus is rechpus and kimspus
  38. [actual] rechpus is meywpus and daphpus
  39. [actual] meywpus is xayqpus and xaflpus
  40. [actual] xayqpus is tamdpus
  41. [actual] tamdpus is sibnpus
  42. [actual] sibnpus is vehtpus and cubrpus
  43. [actual] vehtpus is tovypus
  44. [actual] tovypus is cokjpus and mimppus
  45. [actual] cokjpus is zigzpus
  46. [actual] zigzpus is xetxpus
  47. [actual] xetxpus is caxppus and hiqhpus
  48. [actual] caxppus is kekcpus
  49. [actual] kekcpus is zufxpus
  50. [actual] zufxpus is babcpus or babrpus
  51. [actual] dishpus is zufxpus
  52. [actual] zufxpus is either babcpus or babrpus
  53. [planning] zufxpus is babcpus
  54. [planning] zufxpus is babrpus
  55. [actual] x is babcpus or babrpus
  56. [actual] x is dishpus
  57. [actual] dishpus is tofgpus
  58. [actual] tofgpus is zokvpus
  59. [actual] zufxpus is babcpus
  60. [actual] zufxpus is babrpus
  61. [actual] x is babcpus or babrpus
  62. [planning] x is babcpus
  63. [planning] x is babrpus
  64. [planning] x is babspus
  65. [actual] x is babcpus or babrpus
  66. [planning] x is babcpus or babrpus or babspus
  67. [planning] babspus is mentioned
  68. [actual] babcpus is zufxpus
  69. [actual] babrpus is zufxpus
  70. [actual] x is either babcpus or babrpus
  71. [actual] x is babcpus or babrpus or babspus
  72. [planning] x is babcpus
  73. [planning] x is babrpus
  74. [actual] vehtpus is sibnpus
  75. [actual] sibnpus is tamdpus
  76. [actual] tamdpus is xayqpus
  77. [actual] xayqpus is meywpus
  78. [actual] meywpus is rechpus
  79. [actual] x is babcpus or babrpus
  80. [planning] babspus is unknown
  81. [actual] x is one of the others

=== 开始标准化和解析节点 ===
清洗后statements数: 81
标准化后节点数: 74
过滤掉的无效实体数: 7
标准化后的节点:
  1. [planning] x → babcpus (原始: x is babcpus)
  2. [planning] x → babrpus (原始: x is babrpus)
  3. [planning] x → babspus (原始: x is babspus)
  4. [actual] x → dishpus (原始: x is dishpus)
  5. [actual] dishpus → tofgpus (原始: dishpus is tofgpus)
  6. [actual] tofgpus → zokvpus and piygpus (原始: tofgpus is zokvpus and piygpus)
  7. [actual] zokvpus → gaqlpus (原始: zokvpus is gaqlpus)
  8. [actual] gaqlpus → pacmpus and cahfpus (原始: gaqlpus is pacmpus and cahfpus)
  9. [actual] pacmpus → rarvpus (原始: pacmpus is rarvpus)
  10. [actual] rarvpus → rechpus and kimspus (原始: rarvpus is rechpus and kimspus)
  11. [actual] rechpus → meywpus and daphpus (原始: rechpus is meywpus and daphpus)
  12. [actual] meywpus → xayqpus and xaflpus (原始: meywpus is xayqpus and xaflpus)
  13. [actual] xayqpus → tamdpus (原始: xayqpus is tamdpus)
  14. [actual] tamdpus → sibnpus (原始: tamdpus is sibnpus)
  15. [actual] sibnpus → vehtpus and cubrpus (原始: sibnpus is vehtpus and cubrpus)
  16. [actual] vehtpus → tovypus (原始: vehtpus is tovypus)
  17. [actual] tovypus → cokjpus and mimppus (原始: tovypus is cokjpus and mimppus)
  18. [actual] cokjpus → zigzpus (原始: cokjpus is zigzpus)
  19. [actual] zigzpus → xetxpus (原始: zigzpus is xetxpus)
  20. [actual] xetxpus → caxppus and hiqhpus (原始: xetxpus is caxppus and hiqhpus)
  21. [actual] caxppus → kekcpus (原始: caxppus is kekcpus)
  22. [actual] kekcpus → zufxpus (原始: kekcpus is zufxpus)
  23. [actual] zufxpus → babcpus or babrpus (原始: zufxpus is babcpus or babrpus)
  24. [actual] x → dishpus (原始: x is dishpus)
  25. [planning] x → babcpus (原始: x is babcpus)
  26. [planning] x → babrpus (原始: x is babrpus)
  27. [planning] x → babspus (原始: x is babspus)
  28. [planning] x → zufxpus (原始: x is zufxpus)
  29. [actual] x → dishpus (原始: x is dishpus)
  30. [actual] tofgpus → zokvpus and piygpus (原始: tofgpus is zokvpus and piygpus)
  31. [planning] zokvpus → gaqlpus (原始: zokvpus is gaqlpus)
  32. [actual] zokvpus → gaqlpus (原始: zokvpus is gaqlpus)
  33. [actual] gaqlpus → pacmpus and cahfpus (原始: gaqlpus is pacmpus and cahfpus)
  34. [actual] pacmpus → rarvpus (原始: pacmpus is rarvpus)
  35. [actual] rarvpus → rechpus and kimspus (原始: rarvpus is rechpus and kimspus)
  36. [actual] rechpus → meywpus and daphpus (原始: rechpus is meywpus and daphpus)
  37. [actual] meywpus → xayqpus and xaflpus (原始: meywpus is xayqpus and xaflpus)
  38. [actual] xayqpus → tamdpus (原始: xayqpus is tamdpus)
  39. [actual] tamdpus → sibnpus (原始: tamdpus is sibnpus)
  40. [actual] sibnpus → vehtpus and cubrpus (原始: sibnpus is vehtpus and cubrpus)
  41. [actual] vehtpus → tovypus (原始: vehtpus is tovypus)
  42. [actual] tovypus → cokjpus and mimppus (原始: tovypus is cokjpus and mimppus)
  43. [actual] cokjpus → zigzpus (原始: cokjpus is zigzpus)
  44. [actual] zigzpus → xetxpus (原始: zigzpus is xetxpus)
  45. [actual] xetxpus → caxppus and hiqhpus (原始: xetxpus is caxppus and hiqhpus)
  46. [actual] caxppus → kekcpus (原始: caxppus is kekcpus)
  47. [actual] kekcpus → zufxpus (原始: kekcpus is zufxpus)
  48. [actual] zufxpus → babcpus or babrpus (原始: zufxpus is babcpus or babrpus)
  49. [actual] dishpus → zufxpus (原始: dishpus is zufxpus)
  50. [planning] zufxpus → babcpus (原始: zufxpus is babcpus)
  51. [planning] zufxpus → babrpus (原始: zufxpus is babrpus)
  52. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  53. [actual] x → dishpus (原始: x is dishpus)
  54. [actual] dishpus → tofgpus (原始: dishpus is tofgpus)
  55. [actual] tofgpus → zokvpus (原始: tofgpus is zokvpus)
  56. [actual] zufxpus → babcpus (原始: zufxpus is babcpus)
  57. [actual] zufxpus → babrpus (原始: zufxpus is babrpus)
  58. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  59. [planning] x → babcpus (原始: x is babcpus)
  60. [planning] x → babrpus (原始: x is babrpus)
  61. [planning] x → babspus (原始: x is babspus)
  62. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  63. [planning] x → babcpus or babrpus or babspus (原始: x is babcpus or babrpus or babspus)
  64. [actual] babcpus → zufxpus (原始: babcpus is zufxpus)
  65. [actual] babrpus → zufxpus (原始: babrpus is zufxpus)
  66. [actual] x → babcpus or babrpus or babspus (原始: x is babcpus or babrpus or babspus)
  67. [planning] x → babcpus (原始: x is babcpus)
  68. [planning] x → babrpus (原始: x is babrpus)
  69. [actual] vehtpus → sibnpus (原始: vehtpus is sibnpus)
  70. [actual] sibnpus → tamdpus (原始: sibnpus is tamdpus)
  71. [actual] tamdpus → xayqpus (原始: tamdpus is xayqpus)
  72. [actual] xayqpus → meywpus (原始: xayqpus is meywpus)
  73. [actual] meywpus → rechpus (原始: meywpus is rechpus)
  74. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 28
[后处理] 加载LoG图，包含 28 个节点
  LoG节点 0: x is babcpus or babrpus or babspus (规则: MP, 深度: 1)
  LoG节点 1: x is xayqpus (规则: MP, 深度: 2)
  LoG节点 2: xayqpus is babcpus or babrpus or babspus (规则: MP, 深度: 2)
  LoG节点 3: x is pacmpus (规则: MP, 深度: 3)
  LoG节点 4: pacmpus is xayqpus (规则: MP, 深度: 3)
  LoG节点 5: xayqpus is cokjpus (规则: MP, 深度: 3)
  LoG节点 6: cokjpus is babcpus or babrpus or babspus (规则: MP, 深度: 3)
  LoG节点 7: x is zokvpus (规则: MP, 深度: 4)
  LoG节点 8: zokvpus is pacmpus (规则: CE, 深度: 4)
  LoG节点 9: pacmpus is rechpus (规则: CE, 深度: 4)
  LoG节点 10: rechpus is xayqpus (规则: MP, 深度: 4)
  LoG节点 11: xayqpus is vehtpus (规则: MP, 深度: 4)
  LoG节点 12: vehtpus is cokjpus (规则: CE, 深度: 4)
  LoG节点 13: cokjpus is caxppus (规则: MP, 深度: 4)
  LoG节点 14: caxppus is babcpus or babrpus or babspus (规则: MP, 深度: 4)
  LoG节点 15: x is tofgpus (规则: MP, 深度: 5)
  LoG节点 16: tofgpus is zokvpus (规则: CE, 深度: 5)
  LoG节点 17: zokvpus is pacmpus and cahfpus (规则: MP, 深度: 5)
  LoG节点 18: pacmpus is rechpus and kimspus (规则: MP, 深度: 5)
  LoG节点 19: rechpus is meywpus (规则: CE, 深度: 5)
  LoG节点 20: meywpus is xayqpus (规则: CE, 深度: 5)
  LoG节点 21: xayqpus is sibnpus (规则: MP, 深度: 5)
  LoG节点 22: sibnpus is vehtpus (规则: CE, 深度: 5)
  LoG节点 23: vehtpus is cokjpus and mimppus (规则: MP, 深度: 5)
  LoG节点 24: cokjpus is xetxpus (规则: MP, 深度: 5)
  LoG节点 25: xetxpus is caxppus (规则: CE, 深度: 5)
  LoG节点 26: caxppus is zufxpus (规则: MP, 深度: 5)
  LoG节点 27: zufxpus is babcpus or babrpus or babspus (规则: DI, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 74
   - 初始条件数: 20
   - LoG图节点数: 28

📋 初始条件列表:
    1. dishpus is tofgpus
    2. tovypus is cokjpus and mimppus
    3. zokvpus is gaqlpus
    4. rarvpus is rechpus and kimspus
    5. meywpus is xayqpus and xaflpus
    6. gaqlpus is pacmpus and cahfpus
    7. caxppus is kekcpus
    8. x is dishpus
    9. cokjpus is zigzpus
   10. xetxpus is caxppus and hiqhpus
   11. rechpus is meywpus and daphpus
   12. zigzpus is xetxpus
   13. tofgpus is zokvpus and piygpus
   14. xayqpus is tamdpus
   15. sibnpus is vehtpus and cubrpus
   16. tamdpus is sibnpus
   17. zufxpus is babcpus or babrpus
   18. vehtpus is tovypus
   19. pacmpus is rarvpus
   20. kekcpus is zufxpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 20 个前提节点

🔍 开始处理actual节点...

   节点 1: x is dishpus
      ↻ 重复节点，计数: 2

   节点 2: dishpus is tofgpus
      ↻ 重复节点，计数: 2

   节点 3: tofgpus is zokvpus and piygpus
      ↻ 重复节点，计数: 2

   节点 4: zokvpus is gaqlpus
      ↻ 重复节点，计数: 2

   节点 5: gaqlpus is pacmpus and cahfpus
      ↻ 重复节点，计数: 2

   节点 6: pacmpus is rarvpus
      ↻ 重复节点，计数: 2

   节点 7: rarvpus is rechpus and kimspus
      ↻ 重复节点，计数: 2

   节点 8: rechpus is meywpus and daphpus
      ↻ 重复节点，计数: 2

   节点 9: meywpus is xayqpus and xaflpus
      ↻ 重复节点，计数: 2

   节点 10: xayqpus is tamdpus
      ↻ 重复节点，计数: 2

   节点 11: tamdpus is sibnpus
      ↻ 重复节点，计数: 2

   节点 12: sibnpus is vehtpus and cubrpus
      ↻ 重复节点，计数: 2

   节点 13: vehtpus is tovypus
      ↻ 重复节点，计数: 2

   节点 14: tovypus is cokjpus and mimppus
      ↻ 重复节点，计数: 2

   节点 15: cokjpus is zigzpus
      ↻ 重复节点，计数: 2

   节点 16: zigzpus is xetxpus
      ↻ 重复节点，计数: 2

   节点 17: xetxpus is caxppus and hiqhpus
      ↻ 重复节点，计数: 2

   节点 18: caxppus is kekcpus
      ↻ 重复节点，计数: 2

   节点 19: kekcpus is zufxpus
      ↻ 重复节点，计数: 2

   节点 20: zufxpus is babcpus or babrpus
      ↻ 重复节点，计数: 2

   节点 21: x is dishpus
      ↻ 重复节点，计数: 3

   节点 22: x is dishpus
      ↻ 重复节点，计数: 4

   节点 23: tofgpus is zokvpus and piygpus
      ↻ 重复节点，计数: 3

   节点 24: zokvpus is gaqlpus
      ↻ 重复节点，计数: 3

   节点 25: gaqlpus is pacmpus and cahfpus
      ↻ 重复节点，计数: 3

   节点 26: pacmpus is rarvpus
      ↻ 重复节点，计数: 3

   节点 27: rarvpus is rechpus and kimspus
      ↻ 重复节点，计数: 3

   节点 28: rechpus is meywpus and daphpus
      ↻ 重复节点，计数: 3

   节点 29: meywpus is xayqpus and xaflpus
      ↻ 重复节点，计数: 3

   节点 30: xayqpus is tamdpus
      ↻ 重复节点，计数: 3

   节点 31: tamdpus is sibnpus
      ↻ 重复节点，计数: 3

   节点 32: sibnpus is vehtpus and cubrpus
      ↻ 重复节点，计数: 3

   节点 33: vehtpus is tovypus
      ↻ 重复节点，计数: 3

   节点 34: tovypus is cokjpus and mimppus
      ↻ 重复节点，计数: 3

   节点 35: cokjpus is zigzpus
      ↻ 重复节点，计数: 3

   节点 36: zigzpus is xetxpus
      ↻ 重复节点，计数: 3

   节点 37: xetxpus is caxppus and hiqhpus
      ↻ 重复节点，计数: 3

   节点 38: caxppus is kekcpus
      ↻ 重复节点，计数: 3

   节点 39: kekcpus is zufxpus
      ↻ 重复节点，计数: 3

   节点 40: zufxpus is babcpus or babrpus
      ↻ 重复节点，计数: 3

   节点 41: dishpus is zufxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: dishpus is tofgpus → tofgpus is zufxpus
[后处理] 基于推理轨迹点亮节点，使用了 18 个前提条件:
  - 前提: dishpus is tofgpus
  - 前提: tofgpus is zokvpus and piygpus
  - 前提: zokvpus is gaqlpus
  - 前提: gaqlpus is pacmpus and cahfpus
  - 前提: pacmpus is rarvpus
  - 前提: rarvpus is rechpus and kimspus
  - 前提: rechpus is meywpus and daphpus
  - 前提: meywpus is xayqpus and xaflpus
  - 前提: xayqpus is tamdpus
  - 前提: tamdpus is sibnpus
  - 前提: sibnpus is vehtpus and cubrpus
  - 前提: vehtpus is tovypus
  - 前提: tovypus is cokjpus and mimppus
  - 前提: cokjpus is zigzpus
  - 前提: zigzpus is xetxpus
  - 前提: xetxpus is caxppus and hiqhpus
  - 前提: caxppus is kekcpus
  - 前提: kekcpus is zufxpus
  ✓ 点亮LoG节点: pacmpus is xayqpus
[子树点亮]     └─ 点亮依赖节点: pacmpus is rechpus (深度4)
[子树点亮]     └─ 点亮依赖节点: rechpus is xayqpus (深度4)
[子树点亮]     └─ 点亮依赖节点: pacmpus is rechpus and kimspus (深度5)
[子树点亮]     └─ 点亮依赖节点: rechpus is meywpus (深度5)
[子树点亮]     └─ 点亮依赖节点: meywpus is xayqpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
  ✓ 点亮LoG节点: xayqpus is cokjpus
[子树点亮]     └─ 点亮依赖节点: xayqpus is vehtpus (深度4)
[子树点亮]     └─ 点亮依赖节点: vehtpus is cokjpus (深度4)
[子树点亮]     └─ 点亮依赖节点: xayqpus is sibnpus (深度5)
[子树点亮]     └─ 点亮依赖节点: sibnpus is vehtpus (深度5)
[子树点亮]     └─ 点亮依赖节点: vehtpus is cokjpus and mimppus (深度5)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
  ✓ 点亮LoG节点: zokvpus is pacmpus
[子树点亮]     └─ 点亮依赖节点: zokvpus is pacmpus and cahfpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
  ✓ 点亮LoG节点: cokjpus is caxppus
[子树点亮]     └─ 点亮依赖节点: cokjpus is xetxpus (深度5)
[子树点亮]     └─ 点亮依赖节点: xetxpus is caxppus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
  ✓ 点亮LoG节点: tofgpus is zokvpus
  ✓ 点亮LoG节点: caxppus is zufxpus
[后处理] 通过推理轨迹额外点亮了 6 个LoG节点

   节点 42: x is babcpus or babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is dishpus → dishpus is babcpus or babrpus
[后处理] 基于推理轨迹点亮节点，使用了 20 个前提条件:
  - 前提: x is dishpus
  - 前提: dishpus is tofgpus
  - 前提: tofgpus is zokvpus and piygpus
  - 前提: zokvpus is gaqlpus
  - 前提: gaqlpus is pacmpus and cahfpus
  - 前提: pacmpus is rarvpus
  - 前提: rarvpus is rechpus and kimspus
  - 前提: rechpus is meywpus and daphpus
  - 前提: meywpus is xayqpus and xaflpus
  - 前提: xayqpus is tamdpus
  - 前提: tamdpus is sibnpus
  - 前提: sibnpus is vehtpus and cubrpus
  - 前提: vehtpus is tovypus
  - 前提: tovypus is cokjpus and mimppus
  - 前提: cokjpus is zigzpus
  - 前提: zigzpus is xetxpus
  - 前提: xetxpus is caxppus and hiqhpus
  - 前提: caxppus is kekcpus
  - 前提: kekcpus is zufxpus
  - 前提: zufxpus is babcpus or babrpus
  ✓ 点亮LoG节点: x is babcpus or babrpus or babspus
[子树点亮]     └─ 点亮依赖节点: x is xayqpus (深度2)
[子树点亮]     └─ 点亮依赖节点: xayqpus is babcpus or babrpus or babspus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is pacmpus (深度3)
[子树点亮]     └─ 点亮依赖节点: cokjpus is babcpus or babrpus or babspus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is zokvpus (深度4)
[子树点亮]     └─ 点亮依赖节点: caxppus is babcpus or babrpus or babspus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is tofgpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zufxpus is babcpus or babrpus or babspus (深度5)
[后处理]   └─ 自动点亮依赖子树: 8 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 43: x is dishpus
      ↻ 重复节点，计数: 5

   节点 44: dishpus is tofgpus
      ↻ 重复节点，计数: 3

   节点 45: tofgpus is zokvpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 46: zufxpus is babcpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 47: zufxpus is babrpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 48: x is babcpus or babrpus
      ↻ 重复节点，计数: 2

   节点 49: x is babcpus or babrpus
      ↻ 重复节点，计数: 3

   节点 50: babcpus is zufxpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 51: babrpus is zufxpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 52: x is babcpus or babrpus or babspus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 53: vehtpus is sibnpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 54: sibnpus is tamdpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 55: tamdpus is xayqpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 56: xayqpus is meywpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 57: meywpus is rechpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 58: x is babcpus or babrpus
      ↻ 重复节点，计数: 4

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 58
   - 新增节点: 13
   - 更新已存在节点: 45
   - 点亮的LoG节点: 28

🎯 推理质量统计:
   - 完美推理: 8 (节点正确 + 路径正确)
   - 部分推理: 5 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 28节点, 20前提, 复杂度1-20

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 33
   - 前提节点: 20
   - 推理节点: 4
   - 幻觉节点: 9
   - 点亮LoG节点: 28

❌ 幻觉节点详情:
   - zufxpus is babcpus (出现1次)
   - zufxpus is babrpus (出现1次)
   - babcpus is zufxpus (出现1次)
   - babrpus is zufxpus (出现1次)
   - vehtpus is sibnpus (出现1次)
   - sibnpus is tamdpus (出现1次)
   - tamdpus is xayqpus (出现1次)
   - xayqpus is meywpus (出现1次)
   - meywpus is rechpus (出现1次)

✅ 推理节点详情:
   🟡 dishpus is zufxpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['babcpus is zufxpus', 'babrpus is zufxpus']
   🟢 x is babcpus or babrpus (出现4次, 质量:perfect)
   🟢 tofgpus is zokvpus (出现1次, 质量:perfect)
   🟢 x is babcpus or babrpus or babspus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - sibnpus is vehtpus
   - pacmpus is rechpus
   - vehtpus is cokjpus
   - caxppus is zufxpus
   - cokjpus is caxppus
   - rechpus is xayqpus
   - meywpus is xayqpus
   - xayqpus is babcpus or babrpus or babspus
   - cokjpus is babcpus or babrpus or babspus
   - x is tofgpus
   - xayqpus is vehtpus
   - zokvpus is pacmpus
   - caxppus is babcpus or babrpus or babspus
   - xetxpus is caxppus
   - tofgpus is zokvpus
   - zufxpus is babcpus or babrpus or babspus
   - x is pacmpus
   - x is zokvpus
   - rechpus is meywpus
   - cokjpus is xetxpus
   - x is babcpus or babrpus or babspus
   - pacmpus is rechpus and kimspus
   - xayqpus is cokjpus
   - vehtpus is cokjpus and mimppus
   - pacmpus is xayqpus
   - xayqpus is sibnpus
   - zokvpus is pacmpus and cahfpus
   - x is xayqpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus or babrpus or babspus (第5层)
   节点Coverage: 28/28 = 100.00%
   前提条件Coverage: 20/20 = 100.00%
   各推理层点亮比例:
     第1层: 13/13 = 100.00%
     第2层: 8/8 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 9/13 = 69.23%
   可推导节点: 4/13
   Strict Error Rate: 10/13 = 76.92%
   严格有效节点: 3/13

   详细分析:
     完美推理: 8 (61.54%)
     部分推理: 5 (38.46%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 19/50
================================================================================
记录索引: 18
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_18.json
✅ 使用缓存结果:
   - 句子数: 54
   - 提取的语句数: 50
   - 初始条件数: 14

=== Statement提取完成 ===
总句子数: 54
成功提取: 54
失败提取: 0
总statements数: 50

=== 开始清洗Statement格式 ===
原始statements数: 50
清洗后statements数: 47
过滤掉的statements数: 3
清洗后的statements:
  1. [planning] x is babcpus and babrpus
  2. [actual] x is jostpus
  3. [planning] jostpus is babcpus and babrpus
  4. [actual] kednpus is wowrpus
  5. [actual] x is jostpus
  6. [actual] markpus is defspus
  7. [actual] sefmpus is rumxpus
  8. [actual] licppus is sefmpus
  9. [actual] rumxpus is weplpus and nidzpus
  10. [actual] defspus is babcpus and babrpus and nuhvpus and nuslpus
  11. [actual] weplpus is pilfpus
  12. [actual] woqjpus is punnpus
  13. [actual] kednpus is jujkpus
  14. [actual] pilfpus is woqjpus
  15. [actual] jostpus is kednpus
  16. [actual] punnpus is markpus
  17. [actual] jujkpus is licppus
  18. [actual] x is jostpus
  19. [actual] jostpus is kednpus
  20. [actual] x is kednpus
  21. [actual] kednpus is jujkpus
  22. [actual] x is jujkpus
  23. [actual] jujkpus is licppus
  24. [actual] x is licppus
  25. [actual] licppus is sefmpus
  26. [actual] x is sefmpus
  27. [actual] sefmpus is rumxpus
  28. [actual] x is rumxpus
  29. [actual] rumxpus is weplpus and nidzpus
  30. [actual] x is weplpus
  31. [actual] x is nidzpus
  32. [actual] weplpus is pilfpus
  33. [actual] x is pilfpus
  34. [actual] pilfpus is woqjpus
  35. [actual] x is woqjpus
  36. [actual] woqjpus is punnpus
  37. [actual] x is punnpus
  38. [actual] punnpus is markpus
  39. [actual] x is markpus
  40. [actual] markpus is defspus
  41. [actual] x is defspus
  42. [actual] defspus is babcpus and babrpus and nuhvpus and nuslpus
  43. [actual] x is defspus
  44. [actual] defspus is babcpus and babrpus
  45. [actual] x is babcpus
  46. [actual] x is babrpus
  47. [actual] x is babcpus and babrpus

=== 开始标准化和解析节点 ===
清洗后statements数: 47
标准化后节点数: 47
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  2. [actual] x → jostpus (原始: x is jostpus)
  3. [planning] jostpus → babcpus and babrpus (原始: jostpus is babcpus and babrpus)
  4. [actual] kednpus → wowrpus (原始: kednpus is wowrpus)
  5. [actual] x → jostpus (原始: x is jostpus)
  6. [actual] markpus → defspus (原始: markpus is defspus)
  7. [actual] sefmpus → rumxpus (原始: sefmpus is rumxpus)
  8. [actual] licppus → sefmpus (原始: licppus is sefmpus)
  9. [actual] rumxpus → weplpus and nidzpus (原始: rumxpus is weplpus and nidzpus)
  10. [actual] defspus → babcpus and babrpus and nuhvpus and nuslpus (原始: defspus is babcpus and babrpus and nuhvpus and nuslpus)
  11. [actual] weplpus → pilfpus (原始: weplpus is pilfpus)
  12. [actual] woqjpus → punnpus (原始: woqjpus is punnpus)
  13. [actual] kednpus → jujkpus (原始: kednpus is jujkpus)
  14. [actual] pilfpus → woqjpus (原始: pilfpus is woqjpus)
  15. [actual] jostpus → kednpus (原始: jostpus is kednpus)
  16. [actual] punnpus → markpus (原始: punnpus is markpus)
  17. [actual] jujkpus → licppus (原始: jujkpus is licppus)
  18. [actual] x → jostpus (原始: x is jostpus)
  19. [actual] jostpus → kednpus (原始: jostpus is kednpus)
  20. [actual] x → kednpus (原始: x is kednpus)
  21. [actual] kednpus → jujkpus (原始: kednpus is jujkpus)
  22. [actual] x → jujkpus (原始: x is jujkpus)
  23. [actual] jujkpus → licppus (原始: jujkpus is licppus)
  24. [actual] x → licppus (原始: x is licppus)
  25. [actual] licppus → sefmpus (原始: licppus is sefmpus)
  26. [actual] x → sefmpus (原始: x is sefmpus)
  27. [actual] sefmpus → rumxpus (原始: sefmpus is rumxpus)
  28. [actual] x → rumxpus (原始: x is rumxpus)
  29. [actual] rumxpus → weplpus and nidzpus (原始: rumxpus is weplpus and nidzpus)
  30. [actual] x → weplpus (原始: x is weplpus)
  31. [actual] x → nidzpus (原始: x is nidzpus)
  32. [actual] weplpus → pilfpus (原始: weplpus is pilfpus)
  33. [actual] x → pilfpus (原始: x is pilfpus)
  34. [actual] pilfpus → woqjpus (原始: pilfpus is woqjpus)
  35. [actual] x → woqjpus (原始: x is woqjpus)
  36. [actual] woqjpus → punnpus (原始: woqjpus is punnpus)
  37. [actual] x → punnpus (原始: x is punnpus)
  38. [actual] punnpus → markpus (原始: punnpus is markpus)
  39. [actual] x → markpus (原始: x is markpus)
  40. [actual] markpus → defspus (原始: markpus is defspus)
  41. [actual] x → defspus (原始: x is defspus)
  42. [actual] defspus → babcpus and babrpus and nuhvpus and nuslpus (原始: defspus is babcpus and babrpus and nuhvpus and nuslpus)
  43. [actual] x → defspus (原始: x is defspus)
  44. [actual] defspus → babcpus and babrpus (原始: defspus is babcpus and babrpus)
  45. [actual] x → babcpus (原始: x is babcpus)
  46. [actual] x → babrpus (原始: x is babrpus)
  47. [actual] x → babcpus and babrpus (原始: x is babcpus and babrpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 17
[后处理] 加载LoG图，包含 17 个节点
  LoG节点 0: x is babcpus and babrpus (规则: MP, 深度: 1)
  LoG节点 1: x is weplpus (规则: MP, 深度: 2)
  LoG节点 2: weplpus is babcpus and babrpus (规则: CE, 深度: 2)
  LoG节点 3: x is jujkpus (规则: CE, 深度: 3)
  LoG节点 4: jujkpus is weplpus (规则: CE, 深度: 3)
  LoG节点 5: weplpus is babcpus and babrpus and nuhvpus (规则: MP, 深度: 3)
  LoG节点 6: x is jujkpus and wowrpus (规则: MP, 深度: 4)
  LoG节点 7: jujkpus is weplpus and nidzpus (规则: MP, 深度: 4)
  LoG节点 8: weplpus is markpus (规则: MP, 深度: 4)
  LoG节点 9: markpus is babcpus and babrpus and nuhvpus (规则: CE, 深度: 4)
  LoG节点 10: x is kednpus (规则: MP, 深度: 5)
  LoG节点 11: kednpus is jujkpus and wowrpus (规则: CI, 深度: 5)
  LoG节点 12: jujkpus is sefmpus (规则: MP, 深度: 5)
  LoG节点 13: sefmpus is weplpus and nidzpus (规则: MP, 深度: 5)
  LoG节点 14: weplpus is woqjpus (规则: MP, 深度: 5)
  LoG节点 15: woqjpus is markpus (规则: MP, 深度: 5)
  LoG节点 16: markpus is babcpus and babrpus and nuhvpus and nuslpus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 47
   - 初始条件数: 14
   - LoG图节点数: 17

📋 初始条件列表:
    1. kednpus is wowrpus
    2. x is jostpus
    3. markpus is defspus
    4. sefmpus is rumxpus
    5. licppus is sefmpus
    6. rumxpus is weplpus and nidzpus
    7. defspus is babcpus and babrpus and nuhvpus and nuslpus
    8. weplpus is pilfpus
    9. woqjpus is punnpus
   10. kednpus is jujkpus
   11. pilfpus is woqjpus
   12. jostpus is kednpus
   13. punnpus is markpus
   14. jujkpus is licppus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 14 个前提节点

🔍 开始处理actual节点...

   节点 1: x is jostpus
      ↻ 重复节点，计数: 2

   节点 2: kednpus is wowrpus
      ↻ 重复节点，计数: 2

   节点 3: x is jostpus
      ↻ 重复节点，计数: 3

   节点 4: markpus is defspus
      ↻ 重复节点，计数: 2

   节点 5: sefmpus is rumxpus
      ↻ 重复节点，计数: 2

   节点 6: licppus is sefmpus
      ↻ 重复节点，计数: 2

   节点 7: rumxpus is weplpus and nidzpus
      ↻ 重复节点，计数: 2

   节点 8: defspus is babcpus and babrpus and nuhvpus and nuslpus
      ↻ 重复节点，计数: 2

   节点 9: weplpus is pilfpus
      ↻ 重复节点，计数: 2

   节点 10: woqjpus is punnpus
      ↻ 重复节点，计数: 2

   节点 11: kednpus is jujkpus
      ↻ 重复节点，计数: 2

   节点 12: pilfpus is woqjpus
      ↻ 重复节点，计数: 2

   节点 13: jostpus is kednpus
      ↻ 重复节点，计数: 2

   节点 14: punnpus is markpus
      ↻ 重复节点，计数: 2

   节点 15: jujkpus is licppus
      ↻ 重复节点，计数: 2

   节点 16: x is jostpus
      ↻ 重复节点，计数: 4

   节点 17: jostpus is kednpus
      ↻ 重复节点，计数: 3

   节点 18: x is kednpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is kednpus
      ✅ 验证成功 + LoG匹配

   节点 19: kednpus is jujkpus
      ↻ 重复节点，计数: 3

   节点 20: x is jujkpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is jujkpus
[子树点亮]     └─ 点亮依赖节点: x is jujkpus and wowrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: kednpus is jujkpus and wowrpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 21: jujkpus is licppus
      ↻ 重复节点，计数: 3

   节点 22: x is licppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is jostpus → jostpus is licppus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is jostpus
  - 前提: jostpus is kednpus
  - 前提: kednpus is jujkpus
  - 前提: jujkpus is licppus

   节点 23: licppus is sefmpus
      ↻ 重复节点，计数: 3

   节点 24: x is sefmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is jostpus → jostpus is sefmpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is jostpus
  - 前提: jostpus is kednpus
  - 前提: kednpus is jujkpus
  - 前提: jujkpus is licppus
  - 前提: licppus is sefmpus
  ✓ 点亮LoG节点: jujkpus is sefmpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 25: sefmpus is rumxpus
      ↻ 重复节点，计数: 3

   节点 26: x is rumxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is jostpus → jostpus is rumxpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is jostpus
  - 前提: jostpus is kednpus
  - 前提: kednpus is jujkpus
  - 前提: jujkpus is licppus
  - 前提: licppus is sefmpus
  - 前提: sefmpus is rumxpus

   节点 27: rumxpus is weplpus and nidzpus
      ↻ 重复节点，计数: 3

   节点 28: x is weplpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is weplpus
[子树点亮]     └─ 点亮依赖节点: jujkpus is weplpus (深度3)
[子树点亮]     └─ 点亮依赖节点: jujkpus is weplpus and nidzpus (深度4)
[子树点亮]     └─ 点亮依赖节点: sefmpus is weplpus and nidzpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 29: x is nidzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is jostpus → jostpus is nidzpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is jostpus
  - 前提: jostpus is kednpus
  - 前提: kednpus is jujkpus
  - 前提: jujkpus is licppus
  - 前提: licppus is sefmpus
  - 前提: sefmpus is rumxpus
  - 前提: rumxpus is weplpus and nidzpus

   节点 30: weplpus is pilfpus
      ↻ 重复节点，计数: 3

   节点 31: x is pilfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is jostpus → jostpus is pilfpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is jostpus
  - 前提: jostpus is kednpus
  - 前提: kednpus is jujkpus
  - 前提: jujkpus is licppus
  - 前提: licppus is sefmpus
  - 前提: sefmpus is rumxpus
  - 前提: rumxpus is weplpus and nidzpus
  - 前提: weplpus is pilfpus

   节点 32: pilfpus is woqjpus
      ↻ 重复节点，计数: 3

   节点 33: x is woqjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is jostpus → jostpus is woqjpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is jostpus
  - 前提: jostpus is kednpus
  - 前提: kednpus is jujkpus
  - 前提: jujkpus is licppus
  - 前提: licppus is sefmpus
  - 前提: sefmpus is rumxpus
  - 前提: rumxpus is weplpus and nidzpus
  - 前提: weplpus is pilfpus
  - 前提: pilfpus is woqjpus
  ✓ 点亮LoG节点: weplpus is woqjpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 34: woqjpus is punnpus
      ↻ 重复节点，计数: 3

   节点 35: x is punnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is jostpus → jostpus is punnpus
[后处理] 基于推理轨迹点亮节点，使用了 10 个前提条件:
  - 前提: x is jostpus
  - 前提: jostpus is kednpus
  - 前提: kednpus is jujkpus
  - 前提: jujkpus is licppus
  - 前提: licppus is sefmpus
  - 前提: sefmpus is rumxpus
  - 前提: rumxpus is weplpus and nidzpus
  - 前提: weplpus is pilfpus
  - 前提: pilfpus is woqjpus
  - 前提: woqjpus is punnpus

   节点 36: punnpus is markpus
      ↻ 重复节点，计数: 3

   节点 37: x is markpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is jostpus → jostpus is markpus
[后处理] 基于推理轨迹点亮节点，使用了 11 个前提条件:
  - 前提: x is jostpus
  - 前提: jostpus is kednpus
  - 前提: kednpus is jujkpus
  - 前提: jujkpus is licppus
  - 前提: licppus is sefmpus
  - 前提: sefmpus is rumxpus
  - 前提: rumxpus is weplpus and nidzpus
  - 前提: weplpus is pilfpus
  - 前提: pilfpus is woqjpus
  - 前提: woqjpus is punnpus
  - 前提: punnpus is markpus
  ✓ 点亮LoG节点: weplpus is markpus
[子树点亮]     └─ 点亮依赖节点: woqjpus is markpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 38: markpus is defspus
      ↻ 重复节点，计数: 3

   节点 39: x is defspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is jostpus → jostpus is defspus
[后处理] 基于推理轨迹点亮节点，使用了 12 个前提条件:
  - 前提: x is jostpus
  - 前提: jostpus is kednpus
  - 前提: kednpus is jujkpus
  - 前提: jujkpus is licppus
  - 前提: licppus is sefmpus
  - 前提: sefmpus is rumxpus
  - 前提: rumxpus is weplpus and nidzpus
  - 前提: weplpus is pilfpus
  - 前提: pilfpus is woqjpus
  - 前提: woqjpus is punnpus
  - 前提: punnpus is markpus
  - 前提: markpus is defspus

   节点 40: defspus is babcpus and babrpus and nuhvpus and nuslpus
      ↻ 重复节点，计数: 3

   节点 41: x is defspus
      ↻ 重复节点，计数: 2

   节点 42: defspus is babcpus and babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: defspus is babcpus → defspus is babrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: defspus is babcpus and babrpus and nuhvpus and nuslpus

   节点 43: x is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is jostpus → jostpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 13 个前提条件:
  - 前提: x is jostpus
  - 前提: jostpus is kednpus
  - 前提: kednpus is jujkpus
  - 前提: jujkpus is licppus
  - 前提: licppus is sefmpus
  - 前提: sefmpus is rumxpus
  - 前提: rumxpus is weplpus and nidzpus
  - 前提: weplpus is pilfpus
  - 前提: pilfpus is woqjpus
  - 前提: woqjpus is punnpus
  - 前提: punnpus is markpus
  - 前提: markpus is defspus
  - 前提: defspus is babcpus and babrpus and nuhvpus and nuslpus
  ✓ 点亮LoG节点: x is babcpus and babrpus
[子树点亮]     └─ 点亮依赖节点: weplpus is babcpus and babrpus (深度2)
[子树点亮]     └─ 点亮依赖节点: weplpus is babcpus and babrpus and nuhvpus (深度3)
[子树点亮]     └─ 点亮依赖节点: markpus is babcpus and babrpus and nuhvpus (深度4)
[子树点亮]     └─ 点亮依赖节点: markpus is babcpus and babrpus and nuhvpus and nuslpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 44: x is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is jostpus → jostpus is babrpus
[后处理] 基于推理轨迹点亮节点，使用了 13 个前提条件:
  - 前提: x is jostpus
  - 前提: jostpus is kednpus
  - 前提: kednpus is jujkpus
  - 前提: jujkpus is licppus
  - 前提: licppus is sefmpus
  - 前提: sefmpus is rumxpus
  - 前提: rumxpus is weplpus and nidzpus
  - 前提: weplpus is pilfpus
  - 前提: pilfpus is woqjpus
  - 前提: woqjpus is punnpus
  - 前提: punnpus is markpus
  - 前提: markpus is defspus
  - 前提: defspus is babcpus and babrpus and nuhvpus and nuslpus

   节点 45: x is babcpus and babrpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 45
   - 新增节点: 16
   - 更新已存在节点: 29
   - 点亮的LoG节点: 17

🎯 推理质量统计:
   - 完美推理: 16 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 17节点, 14前提, 复杂度1-14

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 30
   - 前提节点: 14
   - 推理节点: 16
   - 幻觉节点: 0
   - 点亮LoG节点: 17

✅ 推理节点详情:
   🟢 x is kednpus (出现1次, 质量:perfect)
   🟢 x is jujkpus (出现1次, 质量:perfect)
   🟢 x is licppus (出现1次, 质量:perfect)
   🟢 x is sefmpus (出现1次, 质量:perfect)
   🟢 x is rumxpus (出现1次, 质量:perfect)
   🟢 x is weplpus (出现1次, 质量:perfect)
   🟢 x is nidzpus (出现1次, 质量:perfect)
   🟢 x is pilfpus (出现1次, 质量:perfect)
   🟢 x is woqjpus (出现1次, 质量:perfect)
   🟢 x is punnpus (出现1次, 质量:perfect)
   🟢 x is markpus (出现1次, 质量:perfect)
   🟢 x is defspus (出现2次, 质量:perfect)
   🟢 defspus is babcpus and babrpus (出现1次, 质量:perfect)
   🟢 x is babcpus (出现1次, 质量:perfect)
   🟢 x is babrpus (出现1次, 质量:perfect)
   🟢 x is babcpus and babrpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is kednpus
   - jujkpus is sefmpus
   - weplpus is babcpus and babrpus and nuhvpus
   - x is weplpus
   - jujkpus is weplpus
   - woqjpus is markpus
   - kednpus is jujkpus and wowrpus
   - markpus is babcpus and babrpus and nuhvpus and nuslpus
   - weplpus is babcpus and babrpus
   - markpus is babcpus and babrpus and nuhvpus
   - jujkpus is weplpus and nidzpus
   - x is jujkpus and wowrpus
   - sefmpus is weplpus and nidzpus
   - weplpus is markpus
   - x is babcpus and babrpus
   - x is jujkpus
   - weplpus is woqjpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus and babrpus (第5层)
   节点Coverage: 17/17 = 100.00%
   前提条件Coverage: 14/14 = 100.00%
   各推理层点亮比例:
     第1层: 7/7 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 3/3 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/16 = 0.00%
   可推导节点: 16/16
   Strict Error Rate: 0/16 = 0.00%
   严格有效节点: 16/16

   详细分析:
     完美推理: 16 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 20/50
================================================================================
记录索引: 19
问题状态: incorrect
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_19.json
✅ 使用缓存结果:
   - 句子数: 84
   - 提取的语句数: 127
   - 初始条件数: 8

=== Statement提取完成 ===
总句子数: 84
成功提取: 84
失败提取: 0
总statements数: 127

=== 开始清洗Statement格式 ===
原始statements数: 127
清洗后statements数: 110
过滤掉的statements数: 17
清洗后的statements:
  1. [planning] x is babcpus and babrpus
  2. [actual] x is puhvpus and racspus
  3. [actual] jixypus is coqmpus and julxpus
  4. [actual] puhvpus is qofmpus
  5. [actual] qofmpus is serspus
  6. [actual] coqmpus is gidkpus
  7. [actual] gidkpus is babcpus and babrpus and qokypus and zovgpus
  8. [actual] serspus is gapgpus
  9. [actual] gapgpus is jixypus and wuygpus
  10. [planning] x is babcpus and babrpus
  11. [actual] babcpus is gidkpus
  12. [actual] babrpus is gidkpus
  13. [planning] x is gidkpus
  14. [actual] x is puhvpus
  15. [actual] x is puhvpus
  16. [actual] puhvpus is qofmpus
  17. [actual] puhvpus is qofmpus
  18. [actual] qofmpus is serspus
  19. [actual] qofmpus is serspus
  20. [actual] serspus is gapgpus
  21. [actual] serspus is gapgpus
  22. [actual] gapgpus is jixypus and wuygpus
  23. [actual] gapgpus is jixypus and wuygpus
  24. [planning] gidkpus is babcpus and babrpus
  25. [actual] gidkpus is coqmpus
  26. [actual] coqmpus is gidkpus
  27. [actual] jixypus is coqmpus
  28. [actual] jixypus is julxpus
  29. [actual] jixypus is coqmpus
  30. [actual] jixypus is coqmpus
  31. [actual] coqmpus is related to gapgpus through jixypus
  32. [actual] jixypus is coqmpus
  33. [actual] coqmpus is gidkpus
  34. [planning] x is gidkpus
  35. [planning] x is babcpus and babrpus
  36. [planning] x is babcpus and babrpus
  37. [actual] x is puhvpus
  38. [actual] puhvpus is qofmpus
  39. [actual] qofmpus is serspus
  40. [actual] serspus is gapgpus
  41. [planning] gapgpus is everything under it
  42. [actual] gapgpus is a category that contains jixypus and wuygpus
  43. [actual] jixypus is a category that contains coqmpus
  44. [planning] jixypus is a category
  45. [actual] gapgpus is jixypus and wuygpus
  46. [actual] jixypus is a subset of gapgpus
  47. [actual] jixypus is coqmpus and julxpus
  48. [actual] coqmpus is a subset of jixypus
  49. [actual] coqmpus is gidkpus
  50. [planning] gidkpus is a subset of coqmpus
  51. [actual] gidkpus is babcpus and babrpus and qokypus and zovgpus
  52. [actual] x is babcpus
  53. [actual] x is gidkpus
  54. [actual] x is coqmpus
  55. [actual] x is jixypus
  56. [actual] x is gapgpus
  57. [actual] x is serspus
  58. [actual] serspus is gapgpus
  59. [planning] x is gapgpus
  60. [actual] serspus is gapgpus
  61. [actual] gapgpus is jixypus and wuygpus
  62. [actual] x is serspus
  63. [actual] x is gapgpus
  64. [actual] gapgpus is jixypus
  65. [planning] x is jixypus
  66. [actual] jixypus is a part of gapgpus
  67. [actual] x is gapgpus
  68. [planning] x is jixypus
  69. [planning] x is wuygpus
  70. [planning] x is jixypus
  71. [planning] jixypus is coqmpus and gidkpus
  72. [actual] lerwpus is babgpus and rayspus
  73. [actual] x is relmpus and muqcpus
  74. [planning] x is babgpus
  75. [planning] x is babgpus
  76. [actual] lerwpus is yexbpus
  77. [actual] yexbpus is lerwpus and pazjpus
  78. [actual] x is relmpus
  79. [actual] relmpus is babgpus
  80. [actual] x is babgpus
  81. [planning] x is babgpus and babkpus and babmpus
  82. [planning] x is babgpus
  83. [planning] x is relmpus
  84. [planning] x is babgpus
  85. [planning] x is babgpus
  86. [actual] puhvpus is qofmpus
  87. [actual] qofmpus is serspus
  88. [actual] serspus is gapgpus
  89. [actual] gapgpus is jixypus and wuygpus
  90. [actual] jixypus is coqmpus and julxpus
  91. [actual] coqmpus is gidkpus
  92. [actual] gidkpus is babcpus
  93. [actual] gidkpus is babrpus
  94. [actual] x is puhvpus
  95. [actual] x is qofmpus
  96. [actual] x is serspus
  97. [actual] x is gapgpus
  98. [planning] x is babcpus and babrpus
  99. [planning] x is gidkpus
  100. [planning] x is racspus
  101. [planning] x is babcpus
  102. [planning] x is babrpus
  103. [planning] serspus is jixypus
  104. [actual] jixypus is gapgpus
  105. [actual] serspus is gapgpus
  106. [planning] serspus is gapgpus and jixypus is gapgpus
  107. [planning] x is babcpus
  108. [planning] x is gidkpus
  109. [planning] x is coqmpus
  110. [planning] x is jixypus

=== 开始标准化和解析节点 ===
清洗后statements数: 110
标准化后节点数: 100
过滤掉的无效实体数: 10
标准化后的节点:
  1. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  2. [actual] x → puhvpus and racspus (原始: x is puhvpus and racspus)
  3. [actual] jixypus → coqmpus and julxpus (原始: jixypus is coqmpus and julxpus)
  4. [actual] puhvpus → qofmpus (原始: puhvpus is qofmpus)
  5. [actual] qofmpus → serspus (原始: qofmpus is serspus)
  6. [actual] coqmpus → gidkpus (原始: coqmpus is gidkpus)
  7. [actual] gidkpus → babcpus and babrpus and qokypus and zovgpus (原始: gidkpus is babcpus and babrpus and qokypus and zovgpus)
  8. [actual] serspus → gapgpus (原始: serspus is gapgpus)
  9. [actual] gapgpus → jixypus and wuygpus (原始: gapgpus is jixypus and wuygpus)
  10. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  11. [actual] babcpus → gidkpus (原始: babcpus is gidkpus)
  12. [actual] babrpus → gidkpus (原始: babrpus is gidkpus)
  13. [planning] x → gidkpus (原始: x is gidkpus)
  14. [actual] x → puhvpus (原始: x is puhvpus)
  15. [actual] x → puhvpus (原始: x is puhvpus)
  16. [actual] puhvpus → qofmpus (原始: puhvpus is qofmpus)
  17. [actual] puhvpus → qofmpus (原始: puhvpus is qofmpus)
  18. [actual] qofmpus → serspus (原始: qofmpus is serspus)
  19. [actual] qofmpus → serspus (原始: qofmpus is serspus)
  20. [actual] serspus → gapgpus (原始: serspus is gapgpus)
  21. [actual] serspus → gapgpus (原始: serspus is gapgpus)
  22. [actual] gapgpus → jixypus and wuygpus (原始: gapgpus is jixypus and wuygpus)
  23. [actual] gapgpus → jixypus and wuygpus (原始: gapgpus is jixypus and wuygpus)
  24. [planning] gidkpus → babcpus and babrpus (原始: gidkpus is babcpus and babrpus)
  25. [actual] gidkpus → coqmpus (原始: gidkpus is coqmpus)
  26. [actual] coqmpus → gidkpus (原始: coqmpus is gidkpus)
  27. [actual] jixypus → coqmpus (原始: jixypus is coqmpus)
  28. [actual] jixypus → julxpus (原始: jixypus is julxpus)
  29. [actual] jixypus → coqmpus (原始: jixypus is coqmpus)
  30. [actual] jixypus → coqmpus (原始: jixypus is coqmpus)
  31. [actual] jixypus → coqmpus (原始: jixypus is coqmpus)
  32. [actual] coqmpus → gidkpus (原始: coqmpus is gidkpus)
  33. [planning] x → gidkpus (原始: x is gidkpus)
  34. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  35. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  36. [actual] x → puhvpus (原始: x is puhvpus)
  37. [actual] puhvpus → qofmpus (原始: puhvpus is qofmpus)
  38. [actual] qofmpus → serspus (原始: qofmpus is serspus)
  39. [actual] serspus → gapgpus (原始: serspus is gapgpus)
  40. [actual] gapgpus → jixypus and wuygpus (原始: gapgpus is jixypus and wuygpus)
  41. [actual] jixypus → coqmpus and julxpus (原始: jixypus is coqmpus and julxpus)
  42. [actual] coqmpus → gidkpus (原始: coqmpus is gidkpus)
  43. [actual] gidkpus → babcpus and babrpus and qokypus and zovgpus (原始: gidkpus is babcpus and babrpus and qokypus and zovgpus)
  44. [actual] x → babcpus (原始: x is babcpus)
  45. [actual] x → gidkpus (原始: x is gidkpus)
  46. [actual] x → coqmpus (原始: x is coqmpus)
  47. [actual] x → jixypus (原始: x is jixypus)
  48. [actual] x → gapgpus (原始: x is gapgpus)
  49. [actual] x → serspus (原始: x is serspus)
  50. [actual] serspus → gapgpus (原始: serspus is gapgpus)
  51. [planning] x → gapgpus (原始: x is gapgpus)
  52. [actual] serspus → gapgpus (原始: serspus is gapgpus)
  53. [actual] gapgpus → jixypus and wuygpus (原始: gapgpus is jixypus and wuygpus)
  54. [actual] x → serspus (原始: x is serspus)
  55. [actual] x → gapgpus (原始: x is gapgpus)
  56. [actual] gapgpus → jixypus (原始: gapgpus is jixypus)
  57. [planning] x → jixypus (原始: x is jixypus)
  58. [actual] x → gapgpus (原始: x is gapgpus)
  59. [planning] x → jixypus (原始: x is jixypus)
  60. [planning] x → wuygpus (原始: x is wuygpus)
  61. [planning] x → jixypus (原始: x is jixypus)
  62. [planning] jixypus → coqmpus and gidkpus (原始: jixypus is coqmpus and gidkpus)
  63. [actual] lerwpus → babgpus and rayspus (原始: lerwpus is babgpus and rayspus)
  64. [actual] x → relmpus and muqcpus (原始: x is relmpus and muqcpus)
  65. [planning] x → babgpus (原始: x is babgpus)
  66. [planning] x → babgpus (原始: x is babgpus)
  67. [actual] lerwpus → yexbpus (原始: lerwpus is yexbpus)
  68. [actual] yexbpus → lerwpus and pazjpus (原始: yexbpus is lerwpus and pazjpus)
  69. [actual] x → relmpus (原始: x is relmpus)
  70. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  71. [actual] x → babgpus (原始: x is babgpus)
  72. [planning] x → babgpus and babkpus and babmpus (原始: x is babgpus and babkpus and babmpus)
  73. [planning] x → babgpus (原始: x is babgpus)
  74. [planning] x → relmpus (原始: x is relmpus)
  75. [planning] x → babgpus (原始: x is babgpus)
  76. [planning] x → babgpus (原始: x is babgpus)
  77. [actual] puhvpus → qofmpus (原始: puhvpus is qofmpus)
  78. [actual] qofmpus → serspus (原始: qofmpus is serspus)
  79. [actual] serspus → gapgpus (原始: serspus is gapgpus)
  80. [actual] gapgpus → jixypus and wuygpus (原始: gapgpus is jixypus and wuygpus)
  81. [actual] jixypus → coqmpus and julxpus (原始: jixypus is coqmpus and julxpus)
  82. [actual] coqmpus → gidkpus (原始: coqmpus is gidkpus)
  83. [actual] gidkpus → babcpus (原始: gidkpus is babcpus)
  84. [actual] gidkpus → babrpus (原始: gidkpus is babrpus)
  85. [actual] x → puhvpus (原始: x is puhvpus)
  86. [actual] x → qofmpus (原始: x is qofmpus)
  87. [actual] x → serspus (原始: x is serspus)
  88. [actual] x → gapgpus (原始: x is gapgpus)
  89. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  90. [planning] x → gidkpus (原始: x is gidkpus)
  91. [planning] x → racspus (原始: x is racspus)
  92. [planning] x → babcpus (原始: x is babcpus)
  93. [planning] x → babrpus (原始: x is babrpus)
  94. [planning] serspus → jixypus (原始: serspus is jixypus)
  95. [actual] jixypus → gapgpus (原始: jixypus is gapgpus)
  96. [actual] serspus → gapgpus (原始: serspus is gapgpus)
  97. [planning] x → babcpus (原始: x is babcpus)
  98. [planning] x → gidkpus (原始: x is gidkpus)
  99. [planning] x → coqmpus (原始: x is coqmpus)
  100. [planning] x → jixypus (原始: x is jixypus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 12
[后处理] 加载LoG图，包含 12 个节点
  LoG节点 0: x is babcpus and babrpus (规则: CE, 深度: 1)
  LoG节点 1: x is babcpus and babrpus and qokypus (规则: MP, 深度: 2)
  LoG节点 2: x is jixypus (规则: MP, 深度: 3)
  LoG节点 3: jixypus is babcpus and babrpus and qokypus (规则: CE, 深度: 3)
  LoG节点 4: x is serspus (规则: MP, 深度: 4)
  LoG节点 5: serspus is jixypus (规则: CE, 深度: 4)
  LoG节点 6: jixypus is babcpus and babrpus and qokypus and zovgpus (规则: MP, 深度: 4)
  LoG节点 7: x is puhvpus (规则: CE, 深度: 5)
  LoG节点 8: puhvpus is serspus (规则: MP, 深度: 5)
  LoG节点 9: serspus is jixypus and wuygpus (规则: MP, 深度: 5)
  LoG节点 10: jixypus is coqmpus (规则: CE, 深度: 5)
  LoG节点 11: coqmpus is babcpus and babrpus and qokypus and zovgpus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 100
   - 初始条件数: 8
   - LoG图节点数: 12

📋 初始条件列表:
    1. x is puhvpus and racspus
    2. jixypus is coqmpus and julxpus
    3. puhvpus is qofmpus
    4. qofmpus is serspus
    5. coqmpus is gidkpus
    6. gidkpus is babcpus and babrpus and qokypus and zovgpus
    7. serspus is gapgpus
    8. gapgpus is jixypus and wuygpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 8 个前提节点

🔍 开始处理actual节点...

   节点 1: x is puhvpus and racspus
      ↻ 重复节点，计数: 2

   节点 2: jixypus is coqmpus and julxpus
      ↻ 重复节点，计数: 2

   节点 3: puhvpus is qofmpus
      ↻ 重复节点，计数: 2

   节点 4: qofmpus is serspus
      ↻ 重复节点，计数: 2

   节点 5: coqmpus is gidkpus
      ↻ 重复节点，计数: 2

   节点 6: gidkpus is babcpus and babrpus and qokypus and zovgpus
      ↻ 重复节点，计数: 2

   节点 7: serspus is gapgpus
      ↻ 重复节点，计数: 2

   节点 8: gapgpus is jixypus and wuygpus
      ↻ 重复节点，计数: 2

   节点 9: babcpus is gidkpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 10: babrpus is gidkpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 11: x is puhvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is puhvpus
      ✅ 验证成功 + LoG匹配

   节点 12: x is puhvpus
      ↻ 重复节点，计数: 2

   节点 13: puhvpus is qofmpus
      ↻ 重复节点，计数: 3

   节点 14: puhvpus is qofmpus
      ↻ 重复节点，计数: 4

   节点 15: qofmpus is serspus
      ↻ 重复节点，计数: 3

   节点 16: qofmpus is serspus
      ↻ 重复节点，计数: 4

   节点 17: serspus is gapgpus
      ↻ 重复节点，计数: 3

   节点 18: serspus is gapgpus
      ↻ 重复节点，计数: 4

   节点 19: gapgpus is jixypus and wuygpus
      ↻ 重复节点，计数: 3

   节点 20: gapgpus is jixypus and wuygpus
      ↻ 重复节点，计数: 4

   节点 21: gidkpus is coqmpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 22: coqmpus is gidkpus
      ↻ 重复节点，计数: 3

   节点 23: jixypus is coqmpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: jixypus is coqmpus
      ✅ 验证成功 + LoG匹配

   节点 24: jixypus is julxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: jixypus is coqmpus and julxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: jixypus is coqmpus and julxpus

   节点 25: jixypus is coqmpus
      ↻ 重复节点，计数: 2

   节点 26: jixypus is coqmpus
      ↻ 重复节点，计数: 3

   节点 27: jixypus is coqmpus
      ↻ 重复节点，计数: 4

   节点 28: coqmpus is gidkpus
      ↻ 重复节点，计数: 4

   节点 29: x is puhvpus
      ↻ 重复节点，计数: 3

   节点 30: puhvpus is qofmpus
      ↻ 重复节点，计数: 5

   节点 31: qofmpus is serspus
      ↻ 重复节点，计数: 5

   节点 32: serspus is gapgpus
      ↻ 重复节点，计数: 5

   节点 33: gapgpus is jixypus and wuygpus
      ↻ 重复节点，计数: 5

   节点 34: jixypus is coqmpus and julxpus
      ↻ 重复节点，计数: 3

   节点 35: coqmpus is gidkpus
      ↻ 重复节点，计数: 5

   节点 36: gidkpus is babcpus and babrpus and qokypus and zovgpus
      ↻ 重复节点，计数: 3

   节点 37: x is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is puhvpus → puhvpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is puhvpus
  - 前提: puhvpus is qofmpus
  - 前提: qofmpus is serspus
  - 前提: serspus is gapgpus
  - 前提: gapgpus is jixypus and wuygpus
  - 前提: jixypus is coqmpus
  - 前提: coqmpus is gidkpus
  - 前提: gidkpus is babcpus and babrpus and qokypus and zovgpus
  ✓ 点亮LoG节点: x is babcpus and babrpus
[子树点亮]     └─ 点亮依赖节点: x is babcpus and babrpus and qokypus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is jixypus (深度3)
[子树点亮]     └─ 点亮依赖节点: jixypus is babcpus and babrpus and qokypus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is serspus (深度4)
[子树点亮]     └─ 点亮依赖节点: serspus is jixypus (深度4)
[子树点亮]     └─ 点亮依赖节点: jixypus is babcpus and babrpus and qokypus and zovgpus (深度4)
[子树点亮]     └─ 点亮依赖节点: puhvpus is serspus (深度5)
[子树点亮]     └─ 点亮依赖节点: serspus is jixypus and wuygpus (深度5)
[子树点亮]     └─ 点亮依赖节点: coqmpus is babcpus and babrpus and qokypus and zovgpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 9 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 38: x is gidkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is puhvpus → puhvpus is gidkpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is puhvpus
  - 前提: puhvpus is qofmpus
  - 前提: qofmpus is serspus
  - 前提: serspus is gapgpus
  - 前提: gapgpus is jixypus and wuygpus
  - 前提: jixypus is coqmpus
  - 前提: coqmpus is gidkpus

   节点 39: x is coqmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is puhvpus → puhvpus is coqmpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is puhvpus
  - 前提: puhvpus is qofmpus
  - 前提: qofmpus is serspus
  - 前提: serspus is gapgpus
  - 前提: gapgpus is jixypus and wuygpus
  - 前提: jixypus is coqmpus

   节点 40: x is jixypus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 41: x is gapgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is puhvpus → puhvpus is gapgpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is puhvpus
  - 前提: puhvpus is qofmpus
  - 前提: qofmpus is serspus
  - 前提: serspus is gapgpus

   节点 42: x is serspus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 43: serspus is gapgpus
      ↻ 重复节点，计数: 6

   节点 44: serspus is gapgpus
      ↻ 重复节点，计数: 7

   节点 45: gapgpus is jixypus and wuygpus
      ↻ 重复节点，计数: 6

   节点 46: x is serspus
      ↻ 重复节点，计数: 2

   节点 47: x is gapgpus
      ↻ 重复节点，计数: 2

   节点 48: gapgpus is jixypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gapgpus is jixypus and wuygpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gapgpus is jixypus and wuygpus

   节点 49: x is gapgpus
      ↻ 重复节点，计数: 3

   节点 50: lerwpus is babgpus and rayspus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 51: x is relmpus and muqcpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 52: lerwpus is yexbpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 53: yexbpus is lerwpus and pazjpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 54: x is relmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is relmpus and muqcpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is relmpus and muqcpus

   节点 55: relmpus is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 56: x is babgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is relmpus → relmpus is babgpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is relmpus
  - 前提: relmpus is babgpus

   节点 57: puhvpus is qofmpus
      ↻ 重复节点，计数: 6

   节点 58: qofmpus is serspus
      ↻ 重复节点，计数: 6

   节点 59: serspus is gapgpus
      ↻ 重复节点，计数: 8

   节点 60: gapgpus is jixypus and wuygpus
      ↻ 重复节点，计数: 7

   节点 61: jixypus is coqmpus and julxpus
      ↻ 重复节点，计数: 4

   节点 62: coqmpus is gidkpus
      ↻ 重复节点，计数: 6

   节点 63: gidkpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gidkpus is babcpus and babrpus and qokypus and zovgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gidkpus is babcpus and babrpus and qokypus and zovgpus

   节点 64: gidkpus is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gidkpus is babcpus and babrpus and qokypus and zovgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gidkpus is babcpus and babrpus and qokypus and zovgpus

   节点 65: x is puhvpus
      ↻ 重复节点，计数: 4

   节点 66: x is qofmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is puhvpus → puhvpus is qofmpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is puhvpus
  - 前提: puhvpus is qofmpus

   节点 67: x is serspus
      ↻ 重复节点，计数: 3

   节点 68: x is gapgpus
      ↻ 重复节点，计数: 4

   节点 69: jixypus is gapgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 70: serspus is gapgpus
      ↻ 重复节点，计数: 9

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 70
   - 新增节点: 24
   - 更新已存在节点: 46
   - 点亮的LoG节点: 12

🎯 推理质量统计:
   - 完美推理: 6 (节点正确 + 路径正确)
   - 部分推理: 16 (节点正确 + 路径部分错误)
   - 无效推理: 2 (节点错误或路径完全错误)
[LoG分析] LoG图: 12节点, 8前提, 复杂度1-8

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 32
   - 前提节点: 8
   - 推理节点: 15
   - 幻觉节点: 9
   - 点亮LoG节点: 12

❌ 幻觉节点详情:
   - babcpus is gidkpus (出现1次)
   - babrpus is gidkpus (出现1次)
   - gidkpus is coqmpus (出现1次)
   - lerwpus is babgpus and rayspus (出现1次)
   - x is relmpus and muqcpus (出现1次)
   - lerwpus is yexbpus (出现1次)
   - yexbpus is lerwpus and pazjpus (出现1次)
   - relmpus is babgpus (出现1次)
   - jixypus is gapgpus (出现1次)

✅ 推理节点详情:
   🟡 x is puhvpus (出现4次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 jixypus is coqmpus (出现4次, 质量:partial)
      ⚠️  无效依赖: ['jixypus is gapgpus', 'gidkpus is coqmpus']
   🟡 jixypus is julxpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['jixypus is gapgpus']
   🟡 x is babcpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is gidkpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus', 'babcpus is gidkpus', 'babrpus is gidkpus']
   🟡 x is coqmpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus', 'gidkpus is coqmpus']
   🟡 x is jixypus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is gapgpus (出现4次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus', 'jixypus is gapgpus']
   🟡 x is serspus (出现3次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟢 gapgpus is jixypus (出现1次, 质量:perfect)
   🟡 x is relmpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is babgpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus', 'relmpus is babgpus']
   🟡 gidkpus is babcpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['gidkpus is coqmpus']
   🟡 gidkpus is babrpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['gidkpus is coqmpus']
   🟡 x is qofmpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']

🔥 点亮的LoG节点:
   - jixypus is babcpus and babrpus and qokypus and zovgpus
   - x is babcpus and babrpus and qokypus
   - x is puhvpus
   - coqmpus is babcpus and babrpus and qokypus and zovgpus
   - serspus is jixypus
   - jixypus is coqmpus
   - serspus is jixypus and wuygpus
   - puhvpus is serspus
   - jixypus is babcpus and babrpus and qokypus
   - x is serspus
   - x is babcpus and babrpus
   - x is jixypus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus and babrpus (第5层)
   节点Coverage: 12/12 = 100.00%
   前提条件Coverage: 8/8 = 100.00%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 9/24 = 37.50%
   可推导节点: 15/24
   Strict Error Rate: 23/24 = 95.83%
   严格有效节点: 1/24

   详细分析:
     完美推理: 6 (25.00%)
     部分推理: 16 (66.67%)
     无效推理: 2 (8.33%)

================================================================================
处理记录 21/50
================================================================================
记录索引: 20
问题状态: incorrect
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_20.json
✅ 使用缓存结果:
   - 句子数: 231
   - 提取的语句数: 375
   - 初始条件数: 9

=== Statement提取完成 ===
总句子数: 231
成功提取: 231
失败提取: 0
总statements数: 375

=== 开始清洗Statement格式 ===
原始statements数: 375
清洗后statements数: 298
过滤掉的statements数: 77
清洗后的statements:
  1. [actual] rikxpus is tasrpus
  2. [actual] gijhpus is babcpus and xozqpus and rezwpus
  3. [actual] rohbpus is gijhpus
  4. [actual] tasrpus is babrpus and lasbpus and rovgpus
  5. [actual] zeghpus is texwpus
  6. [actual] texwpus is rikxpus
  7. [actual] wedgpus is rohbpus and woxspus
  8. [actual] x is zeghpus and xifwpus
  9. [actual] x is wedgpus
  10. [planning] x is babcpus and babrpus
  11. [planning] x is babcpus
  12. [planning] x is babrpus
  13. [planning] x is both babcpus and babrpus
  14. [actual] x is zeghpus and xifwpus
  15. [actual] x is zeghpus and xifwpus
  16. [actual] x is wedgpus
  17. [actual] x is wedgpus
  18. [actual] zeghpus is texwpus
  19. [actual] x is zeghpus
  20. [actual] zeghpus is texwpus
  21. [actual] x is texwpus
  22. [planning] x is texwpus
  23. [actual] x is zeghpus
  24. [actual] zeghpus is texwpus
  25. [planning] x is texwpus
  26. [actual] texwpus is rikxpus
  27. [actual] texwpus is rikxpus
  28. [actual] zeghpus is texwpus
  29. [actual] x is zeghpus
  30. [actual] x is zeghpus
  31. [actual] zeghpus is texwpus
  32. [actual] texwpus is rikxpus
  33. [planning] zeghpus is rikxpus
  34. [actual] gijhpus is babcpus and xozqpus and rezwpus
  35. [actual] gijhpus is babcpus
  36. [actual] gijhpus is xozqpus
  37. [actual] gijhpus is rezwpus
  38. [actual] gijhpus is a member of multiple categories
  39. [actual] tasrpus is babrpus and lasbpus and rovgpus
  40. [actual] tasrpus is a member of those categories
  41. [planning] x is babcpus and babrpus
  42. [planning] x is babcpus and in babrpus
  43. [actual] x is wedgpus
  44. [actual] wedgpus is rohbpus and woxspus
  45. [actual] x is wedgpus
  46. [actual] wedgpus is rohbpus
  47. [actual] x is rohbpus
  48. [planning] x is rohbpus
  49. [actual] wedgpus is rohbpus
  50. [actual] x is wedgpus
  51. [planning] x is rohbpus
  52. [actual] rohbpus is gijhpus
  53. [actual] x is rohbpus
  54. [actual] rohbpus is gijhpus
  55. [actual] x is gijhpus
  56. [actual] gijhpus is babcpus and xozqpus and rezwpus
  57. [actual] x is gijhpus
  58. [actual] gijhpus is babcpus
  59. [actual] x is babcpus
  60. [actual] x is babcpus
  61. [actual] x is babcpus
  62. [planning] x is babrpus
  63. [planning] x is babrpus
  64. [actual] x is gijhpus
  65. [actual] x is zeghpus and xifwpus
  66. [actual] zeghpus is texwpus
  67. [actual] texwpus is rikxpus
  68. [actual] rikxpus is tasrpus
  69. [actual] tasrpus is babrpus and lasbpus and rovgpus
  70. [actual] x is zeghpus
  71. [actual] zeghpus is texwpus
  72. [actual] texwpus is rikxpus
  73. [actual] rikxpus is tasrpus
  74. [actual] tasrpus is babrpus
  75. [actual] x is zeghpus
  76. [actual] zeghpus is texwpus
  77. [actual] x is texwpus
  78. [planning] x is texwpus
  79. [actual] x is zeghpus
  80. [actual] zeghpus is texwpus
  81. [planning] x is zeghpus
  82. [planning] zeghpus is texwpus
  83. [planning] x is texwpus
  84. [planning] x is babgpus
  85. [actual] zeghpus is texwpus
  86. [planning] x is zeghpus
  87. [planning] zeghpus is itself a category
  88. [actual] x is zeghpus and xifwpus
  89. [actual] x is wedgpus
  90. [actual] x is a member of wedgpus category
  91. [actual] zeghpus is texwpus
  92. [planning] texwpus is a category of categories
  93. [planning] x is a member of zeghpus
  94. [planning] zeghpus is a member of texwpus
  95. [planning] x is a member of texwpus
  96. [actual] zeghpus is a set
  97. [actual] x is an element of zeghpus
  98. [actual] zeghpus is an element of texwpus
  99. [actual] texwpus is a set of sets
  100. [planning] texwpus is a category of categories
  101. [planning] x is babrpus
  102. [actual] tasrpus is babrpus
  103. [actual] tasrpus is a category
  104. [actual] rikxpus is tasrpus
  105. [actual] rikxpus is a member of tasrpus category
  106. [actual] texwpus is rikxpus
  107. [actual] texwpus is a member of rikxpus category
  108. [actual] zeghpus is texwpus
  109. [actual] x is zeghpus
  110. [planning] x is a member of babrpus category
  111. [actual] zeghpus is texwpus
  112. [actual] texwpus is rikxpus
  113. [actual] rikxpus is tasrpus
  114. [actual] tasrpus is babrpus
  115. [actual] x is zeghpus
  116. [actual] zeghpus is texwpus
  117. [planning] x is babrpus
  118. [actual] x is at the bottom
  119. [actual] tasrpus is babrpus
  120. [planning] x is babrpus
  121. [actual] x is A
  122. [planning] x is C
  123. [actual] x is a member of zeghpus
  124. [actual] zeghpus is a member of texwpus
  125. [planning] x is babrpus
  126. [actual] x is wedgpus
  127. [actual] wedgpus is rohbpus
  128. [actual] rohbpus is gijhpus
  129. [actual] gijhpus is babcpus
  130. [actual] gijhpus is babcpus
  131. [actual] x is gijhpus
  132. [actual] x is babcpus
  133. [actual] gijhpus is a category
  134. [actual] x is a member of gijhpus
  135. [actual] gijhpus is a member of babcpus
  136. [planning] x is a member of babcpus
  137. [actual] gijhpus is babcpus
  138. [actual] gijhpus is a member of babcpus
  139. [planning] x is a member of gijhpus
  140. [planning] gijhpus is babcpus
  141. [planning] x is babcpus
  142. [planning] babcpus is defined to include all elements of its members
  143. [actual] x is gijhpus
  144. [actual] x is rohbpus
  145. [actual] rohbpus is gijhpus
  146. [actual] x is gijhpus
  147. [planning] x is gijhpus
  148. [actual] x is rohbpus
  149. [actual] rohbpus is gijhpus
  150. [planning] x is rohbpus and rohbpus is gijhpus
  151. [planning] x is gijhpus
  152. [actual] rohbpus is gijhpus
  153. [actual] x is directly a member of gijhpus
  154. [actual] x is rohbpus
  155. [planning] x is gijhpus
  156. [planning] x is babcpus
  157. [actual] gijhpus is babcpus
  158. [actual] rohbpus is gijhpus
  159. [planning] rohbpus is a member of gijhpus
  160. [actual] wedgpus is rohbpus
  161. [planning] wedgpus is a member of rohbpus
  162. [actual] x is wedgpus
  163. [actual] x is a member of wedgpus
  164. [actual] x is wedgpus
  165. [actual] wedgpus is rohbpus
  166. [actual] rohbpus is gijhpus
  167. [actual] gijhpus is babcpus
  168. [actual] x is gijhpus
  169. [actual] gijhpus is babcpus
  170. [actual] x is babcpus
  171. [planning] x is gijhpus
  172. [planning] gijhpus is babcpus
  173. [planning] x is a member of babcpus
  174. [actual] gijhpus is babcpus
  175. [planning] x is a member of gijhpus
  176. [actual] x is wedgpus
  177. [actual] wedgpus is rohbpus
  178. [actual] x is rohbpus
  179. [planning] x is rohbpus
  180. [actual] x is a member of wedgpus
  181. [actual] wedgpus is a member of rohbpus
  182. [planning] x is wedgpus
  183. [planning] x is a member of rohbpus
  184. [planning] x is a member of wedgpus
  185. [planning] wedgpus is a member of rohbpus
  186. [actual] x is wedgpus
  187. [actual] wedgpus is rohbpus
  188. [planning] x is babcpus
  189. [planning] x is a member of babcpus
  190. [planning] x is babcpus and babrpus
  191. [actual] x is zeghpus and xifwpus
  192. [actual] x is zeghpus and xifwpus
  193. [actual] x is wedgpus
  194. [actual] x is wedgpus
  195. [actual] x is directly member of zeghpus and xifwpus and wedgpus
  196. [actual] wedgpus is rohbpus and woxspus
  197. [actual] wedgpus is rohbpus and woxspus
  198. [actual] wedgpus is rohbpus
  199. [actual] x is wedgpus
  200. [planning] x is rohbpus
  201. [planning] x is rohbpus
  202. [actual] rohbpus is gijhpus
  203. [planning] rohbpus is a member of gijhpus
  204. [actual] gijhpus is babcpus
  205. [actual] wedgpus is rohbpus
  206. [actual] rohbpus is gijhpus
  207. [actual] gijhpus is babcpus
  208. [actual] wedgpus is babcpus
  209. [planning] wedgpus is babcpus
  210. [actual] wedgpus is a category
  211. [actual] wedgpus is babcpus
  212. [actual] x is wedgpus
  213. [planning] x is babcpus
  214. [planning] x is babcpus
  215. [actual] x is zeghpus
  216. [actual] x is wedgpus
  217. [actual] wedgpus is related to rohbpus
  218. [planning] x is babcpus
  219. [planning] x is directly a member of babcpus
  220. [actual] wedgpus is rohbpus
  221. [actual] rohbpus is gijhpus
  222. [actual] rohbpus is a member of gijhpus
  223. [actual] gijhpus is babcpus
  224. [actual] wedgpus is member of rohbpus
  225. [actual] rohbpus is member of gijhpus
  226. [actual] gijhpus is member of babcpus
  227. [planning] wedgpus is babcpus
  228. [actual] gijhpus is member of babcpus
  229. [actual] rohbpus is member of gijhpus
  230. [planning] rohbpus is member of babcpus
  231. [actual] wedgpus is member of rohbpus
  232. [planning] wedgpus is member of babcpus
  233. [actual] rohbpus is gijhpus
  234. [actual] gijhpus is an element of babcpus
  235. [planning] x is babgpus
  236. [planning] x is relmpus
  237. [planning] x is babgpus
  238. [actual] gijhpus is babcpus
  239. [actual] rohbpus is gijhpus
  240. [planning] rohbpus is babcpus
  241. [actual] x is wedgpus
  242. [planning] x is babcpus
  243. [actual] x is babcpus
  244. [actual] x is a category
  245. [planning] x is babcpus
  246. [actual] wedgpus is rohbpus
  247. [actual] rohbpus is gijhpus
  248. [actual] gijhpus is babcpus
  249. [planning] wedgpus is babcpus
  250. [actual] x is zeghpus
  251. [actual] zeghpus is texwpus
  252. [actual] texwpus is rikxpus
  253. [actual] rikxpus is tasrpus
  254. [actual] tasrpus is babrpus
  255. [planning] tasrpus is a member of babrpus
  256. [actual] zeghpus is texwpus
  257. [actual] texwpus is rikxpus
  258. [actual] rikxpus is tasrpus
  259. [actual] tasrpus is babrpus
  260. [planning] zeghpus is babrpus
  261. [actual] tasrpus is babrpus
  262. [actual] rikxpus is tasrpus
  263. [planning] rikxpus is babrpus
  264. [actual] texwpus is rikxpus
  265. [planning] texwpus is babrpus
  266. [actual] zeghpus is texwpus
  267. [planning] zeghpus is babrpus
  268. [actual] x is zeghpus
  269. [planning] x is babrpus
  270. [planning] x is babcpus and babrpus
  271. [actual] rohbpus is gijhpus
  272. [actual] wedgpus is rohbpus
  273. [actual] x is wedgpus
  274. [actual] x is wedgpus
  275. [actual] wedgpus is rohbpus
  276. [actual] rohbpus is gijhpus
  277. [planning] x is gijhpus
  278. [actual] gijhpus is a category
  279. [actual] x is wedgpus
  280. [actual] wedgpus is rohbpus
  281. [actual] rohbpus is gijhpus
  282. [planning] x is gijhpus only if gijhpus contains elementsrohbpus
  283. [actual] rohbpus is gijhpus
  284. [planning] x is babcpus and babrpus
  285. [planning] x is babcpus
  286. [planning] x is babrpus
  287. [planning] x is gijhpus
  288. [actual] x is wedgpus
  289. [actual] wedgpus is rohbpus
  290. [actual] rohbpus is gijhpus
  291. [planning] wedgpus is rohbpus
  292. [planning] wedgpus is gijhpus
  293. [planning] x is rikxpus
  294. [actual] x is zeghpus
  295. [actual] zeghpus is texwpus
  296. [actual] texwpus is rikxpus
  297. [actual] zeghpus is rikxpus
  298. [actual] x is zeghpus

=== 开始标准化和解析节点 ===
清洗后statements数: 298
标准化后节点数: 235
过滤掉的无效实体数: 63
标准化后的节点:
  1. [actual] rikxpus → tasrpus (原始: rikxpus is tasrpus)
  2. [actual] gijhpus → babcpus and xozqpus and rezwpus (原始: gijhpus is babcpus and xozqpus and rezwpus)
  3. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  4. [actual] tasrpus → babrpus and lasbpus and rovgpus (原始: tasrpus is babrpus and lasbpus and rovgpus)
  5. [actual] zeghpus → texwpus (原始: zeghpus is texwpus)
  6. [actual] texwpus → rikxpus (原始: texwpus is rikxpus)
  7. [actual] wedgpus → rohbpus and woxspus (原始: wedgpus is rohbpus and woxspus)
  8. [actual] x → zeghpus and xifwpus (原始: x is zeghpus and xifwpus)
  9. [actual] x → wedgpus (原始: x is wedgpus)
  10. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  11. [planning] x → babcpus (原始: x is babcpus)
  12. [planning] x → babrpus (原始: x is babrpus)
  13. [actual] x → zeghpus and xifwpus (原始: x is zeghpus and xifwpus)
  14. [actual] x → zeghpus and xifwpus (原始: x is zeghpus and xifwpus)
  15. [actual] x → wedgpus (原始: x is wedgpus)
  16. [actual] x → wedgpus (原始: x is wedgpus)
  17. [actual] zeghpus → texwpus (原始: zeghpus is texwpus)
  18. [actual] x → zeghpus (原始: x is zeghpus)
  19. [actual] zeghpus → texwpus (原始: zeghpus is texwpus)
  20. [actual] x → texwpus (原始: x is texwpus)
  21. [planning] x → texwpus (原始: x is texwpus)
  22. [actual] x → zeghpus (原始: x is zeghpus)
  23. [actual] zeghpus → texwpus (原始: zeghpus is texwpus)
  24. [planning] x → texwpus (原始: x is texwpus)
  25. [actual] texwpus → rikxpus (原始: texwpus is rikxpus)
  26. [actual] texwpus → rikxpus (原始: texwpus is rikxpus)
  27. [actual] zeghpus → texwpus (原始: zeghpus is texwpus)
  28. [actual] x → zeghpus (原始: x is zeghpus)
  29. [actual] x → zeghpus (原始: x is zeghpus)
  30. [actual] zeghpus → texwpus (原始: zeghpus is texwpus)
  31. [actual] texwpus → rikxpus (原始: texwpus is rikxpus)
  32. [planning] zeghpus → rikxpus (原始: zeghpus is rikxpus)
  33. [actual] gijhpus → babcpus and xozqpus and rezwpus (原始: gijhpus is babcpus and xozqpus and rezwpus)
  34. [actual] gijhpus → babcpus (原始: gijhpus is babcpus)
  35. [actual] gijhpus → xozqpus (原始: gijhpus is xozqpus)
  36. [actual] gijhpus → rezwpus (原始: gijhpus is rezwpus)
  37. [actual] tasrpus → babrpus and lasbpus and rovgpus (原始: tasrpus is babrpus and lasbpus and rovgpus)
  38. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  39. [actual] x → wedgpus (原始: x is wedgpus)
  40. [actual] wedgpus → rohbpus and woxspus (原始: wedgpus is rohbpus and woxspus)
  41. [actual] x → wedgpus (原始: x is wedgpus)
  42. [actual] wedgpus → rohbpus (原始: wedgpus is rohbpus)
  43. [actual] x → rohbpus (原始: x is rohbpus)
  44. [planning] x → rohbpus (原始: x is rohbpus)
  45. [actual] wedgpus → rohbpus (原始: wedgpus is rohbpus)
  46. [actual] x → wedgpus (原始: x is wedgpus)
  47. [planning] x → rohbpus (原始: x is rohbpus)
  48. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  49. [actual] x → rohbpus (原始: x is rohbpus)
  50. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  51. [actual] x → gijhpus (原始: x is gijhpus)
  52. [actual] gijhpus → babcpus and xozqpus and rezwpus (原始: gijhpus is babcpus and xozqpus and rezwpus)
  53. [actual] x → gijhpus (原始: x is gijhpus)
  54. [actual] gijhpus → babcpus (原始: gijhpus is babcpus)
  55. [actual] x → babcpus (原始: x is babcpus)
  56. [actual] x → babcpus (原始: x is babcpus)
  57. [actual] x → babcpus (原始: x is babcpus)
  58. [planning] x → babrpus (原始: x is babrpus)
  59. [planning] x → babrpus (原始: x is babrpus)
  60. [actual] x → gijhpus (原始: x is gijhpus)
  61. [actual] x → zeghpus and xifwpus (原始: x is zeghpus and xifwpus)
  62. [actual] zeghpus → texwpus (原始: zeghpus is texwpus)
  63. [actual] texwpus → rikxpus (原始: texwpus is rikxpus)
  64. [actual] rikxpus → tasrpus (原始: rikxpus is tasrpus)
  65. [actual] tasrpus → babrpus and lasbpus and rovgpus (原始: tasrpus is babrpus and lasbpus and rovgpus)
  66. [actual] x → zeghpus (原始: x is zeghpus)
  67. [actual] zeghpus → texwpus (原始: zeghpus is texwpus)
  68. [actual] texwpus → rikxpus (原始: texwpus is rikxpus)
  69. [actual] rikxpus → tasrpus (原始: rikxpus is tasrpus)
  70. [actual] tasrpus → babrpus (原始: tasrpus is babrpus)
  71. [actual] x → zeghpus (原始: x is zeghpus)
  72. [actual] zeghpus → texwpus (原始: zeghpus is texwpus)
  73. [actual] x → texwpus (原始: x is texwpus)
  74. [planning] x → texwpus (原始: x is texwpus)
  75. [actual] x → zeghpus (原始: x is zeghpus)
  76. [actual] zeghpus → texwpus (原始: zeghpus is texwpus)
  77. [planning] x → zeghpus (原始: x is zeghpus)
  78. [planning] zeghpus → texwpus (原始: zeghpus is texwpus)
  79. [planning] x → texwpus (原始: x is texwpus)
  80. [planning] x → babgpus (原始: x is babgpus)
  81. [actual] zeghpus → texwpus (原始: zeghpus is texwpus)
  82. [planning] x → zeghpus (原始: x is zeghpus)
  83. [actual] x → zeghpus and xifwpus (原始: x is zeghpus and xifwpus)
  84. [actual] x → wedgpus (原始: x is wedgpus)
  85. [actual] zeghpus → texwpus (原始: zeghpus is texwpus)
  86. [planning] x → babrpus (原始: x is babrpus)
  87. [actual] tasrpus → babrpus (原始: tasrpus is babrpus)
  88. [actual] rikxpus → tasrpus (原始: rikxpus is tasrpus)
  89. [actual] texwpus → rikxpus (原始: texwpus is rikxpus)
  90. [actual] zeghpus → texwpus (原始: zeghpus is texwpus)
  91. [actual] x → zeghpus (原始: x is zeghpus)
  92. [actual] zeghpus → texwpus (原始: zeghpus is texwpus)
  93. [actual] texwpus → rikxpus (原始: texwpus is rikxpus)
  94. [actual] rikxpus → tasrpus (原始: rikxpus is tasrpus)
  95. [actual] tasrpus → babrpus (原始: tasrpus is babrpus)
  96. [actual] x → zeghpus (原始: x is zeghpus)
  97. [actual] zeghpus → texwpus (原始: zeghpus is texwpus)
  98. [planning] x → babrpus (原始: x is babrpus)
  99. [actual] tasrpus → babrpus (原始: tasrpus is babrpus)
  100. [planning] x → babrpus (原始: x is babrpus)
  101. [planning] x → babrpus (原始: x is babrpus)
  102. [actual] x → wedgpus (原始: x is wedgpus)
  103. [actual] wedgpus → rohbpus (原始: wedgpus is rohbpus)
  104. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  105. [actual] gijhpus → babcpus (原始: gijhpus is babcpus)
  106. [actual] gijhpus → babcpus (原始: gijhpus is babcpus)
  107. [actual] x → gijhpus (原始: x is gijhpus)
  108. [actual] x → babcpus (原始: x is babcpus)
  109. [actual] gijhpus → babcpus (原始: gijhpus is babcpus)
  110. [planning] gijhpus → babcpus (原始: gijhpus is babcpus)
  111. [planning] x → babcpus (原始: x is babcpus)
  112. [actual] x → gijhpus (原始: x is gijhpus)
  113. [actual] x → rohbpus (原始: x is rohbpus)
  114. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  115. [actual] x → gijhpus (原始: x is gijhpus)
  116. [planning] x → gijhpus (原始: x is gijhpus)
  117. [actual] x → rohbpus (原始: x is rohbpus)
  118. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  119. [planning] x → gijhpus (原始: x is gijhpus)
  120. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  121. [actual] x → rohbpus (原始: x is rohbpus)
  122. [planning] x → gijhpus (原始: x is gijhpus)
  123. [planning] x → babcpus (原始: x is babcpus)
  124. [actual] gijhpus → babcpus (原始: gijhpus is babcpus)
  125. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  126. [actual] wedgpus → rohbpus (原始: wedgpus is rohbpus)
  127. [actual] x → wedgpus (原始: x is wedgpus)
  128. [actual] x → wedgpus (原始: x is wedgpus)
  129. [actual] wedgpus → rohbpus (原始: wedgpus is rohbpus)
  130. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  131. [actual] gijhpus → babcpus (原始: gijhpus is babcpus)
  132. [actual] x → gijhpus (原始: x is gijhpus)
  133. [actual] gijhpus → babcpus (原始: gijhpus is babcpus)
  134. [actual] x → babcpus (原始: x is babcpus)
  135. [planning] x → gijhpus (原始: x is gijhpus)
  136. [planning] gijhpus → babcpus (原始: gijhpus is babcpus)
  137. [actual] gijhpus → babcpus (原始: gijhpus is babcpus)
  138. [actual] x → wedgpus (原始: x is wedgpus)
  139. [actual] wedgpus → rohbpus (原始: wedgpus is rohbpus)
  140. [actual] x → rohbpus (原始: x is rohbpus)
  141. [planning] x → rohbpus (原始: x is rohbpus)
  142. [planning] x → wedgpus (原始: x is wedgpus)
  143. [actual] x → wedgpus (原始: x is wedgpus)
  144. [actual] wedgpus → rohbpus (原始: wedgpus is rohbpus)
  145. [planning] x → babcpus (原始: x is babcpus)
  146. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  147. [actual] x → zeghpus and xifwpus (原始: x is zeghpus and xifwpus)
  148. [actual] x → zeghpus and xifwpus (原始: x is zeghpus and xifwpus)
  149. [actual] x → wedgpus (原始: x is wedgpus)
  150. [actual] x → wedgpus (原始: x is wedgpus)
  151. [actual] wedgpus → rohbpus and woxspus (原始: wedgpus is rohbpus and woxspus)
  152. [actual] wedgpus → rohbpus and woxspus (原始: wedgpus is rohbpus and woxspus)
  153. [actual] wedgpus → rohbpus (原始: wedgpus is rohbpus)
  154. [actual] x → wedgpus (原始: x is wedgpus)
  155. [planning] x → rohbpus (原始: x is rohbpus)
  156. [planning] x → rohbpus (原始: x is rohbpus)
  157. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  158. [actual] gijhpus → babcpus (原始: gijhpus is babcpus)
  159. [actual] wedgpus → rohbpus (原始: wedgpus is rohbpus)
  160. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  161. [actual] gijhpus → babcpus (原始: gijhpus is babcpus)
  162. [actual] wedgpus → babcpus (原始: wedgpus is babcpus)
  163. [planning] wedgpus → babcpus (原始: wedgpus is babcpus)
  164. [actual] wedgpus → babcpus (原始: wedgpus is babcpus)
  165. [actual] x → wedgpus (原始: x is wedgpus)
  166. [planning] x → babcpus (原始: x is babcpus)
  167. [planning] x → babcpus (原始: x is babcpus)
  168. [actual] x → zeghpus (原始: x is zeghpus)
  169. [actual] x → wedgpus (原始: x is wedgpus)
  170. [planning] x → babcpus (原始: x is babcpus)
  171. [actual] wedgpus → rohbpus (原始: wedgpus is rohbpus)
  172. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  173. [actual] gijhpus → babcpus (原始: gijhpus is babcpus)
  174. [planning] wedgpus → babcpus (原始: wedgpus is babcpus)
  175. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  176. [planning] x → babgpus (原始: x is babgpus)
  177. [planning] x → relmpus (原始: x is relmpus)
  178. [planning] x → babgpus (原始: x is babgpus)
  179. [actual] gijhpus → babcpus (原始: gijhpus is babcpus)
  180. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  181. [planning] rohbpus → babcpus (原始: rohbpus is babcpus)
  182. [actual] x → wedgpus (原始: x is wedgpus)
  183. [planning] x → babcpus (原始: x is babcpus)
  184. [actual] x → babcpus (原始: x is babcpus)
  185. [planning] x → babcpus (原始: x is babcpus)
  186. [actual] wedgpus → rohbpus (原始: wedgpus is rohbpus)
  187. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  188. [actual] gijhpus → babcpus (原始: gijhpus is babcpus)
  189. [planning] wedgpus → babcpus (原始: wedgpus is babcpus)
  190. [actual] x → zeghpus (原始: x is zeghpus)
  191. [actual] zeghpus → texwpus (原始: zeghpus is texwpus)
  192. [actual] texwpus → rikxpus (原始: texwpus is rikxpus)
  193. [actual] rikxpus → tasrpus (原始: rikxpus is tasrpus)
  194. [actual] tasrpus → babrpus (原始: tasrpus is babrpus)
  195. [actual] zeghpus → texwpus (原始: zeghpus is texwpus)
  196. [actual] texwpus → rikxpus (原始: texwpus is rikxpus)
  197. [actual] rikxpus → tasrpus (原始: rikxpus is tasrpus)
  198. [actual] tasrpus → babrpus (原始: tasrpus is babrpus)
  199. [planning] zeghpus → babrpus (原始: zeghpus is babrpus)
  200. [actual] tasrpus → babrpus (原始: tasrpus is babrpus)
  201. [actual] rikxpus → tasrpus (原始: rikxpus is tasrpus)
  202. [planning] rikxpus → babrpus (原始: rikxpus is babrpus)
  203. [actual] texwpus → rikxpus (原始: texwpus is rikxpus)
  204. [planning] texwpus → babrpus (原始: texwpus is babrpus)
  205. [actual] zeghpus → texwpus (原始: zeghpus is texwpus)
  206. [planning] zeghpus → babrpus (原始: zeghpus is babrpus)
  207. [actual] x → zeghpus (原始: x is zeghpus)
  208. [planning] x → babrpus (原始: x is babrpus)
  209. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  210. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  211. [actual] wedgpus → rohbpus (原始: wedgpus is rohbpus)
  212. [actual] x → wedgpus (原始: x is wedgpus)
  213. [actual] x → wedgpus (原始: x is wedgpus)
  214. [actual] wedgpus → rohbpus (原始: wedgpus is rohbpus)
  215. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  216. [planning] x → gijhpus (原始: x is gijhpus)
  217. [actual] x → wedgpus (原始: x is wedgpus)
  218. [actual] wedgpus → rohbpus (原始: wedgpus is rohbpus)
  219. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  220. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  221. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  222. [planning] x → babcpus (原始: x is babcpus)
  223. [planning] x → babrpus (原始: x is babrpus)
  224. [planning] x → gijhpus (原始: x is gijhpus)
  225. [actual] x → wedgpus (原始: x is wedgpus)
  226. [actual] wedgpus → rohbpus (原始: wedgpus is rohbpus)
  227. [actual] rohbpus → gijhpus (原始: rohbpus is gijhpus)
  228. [planning] wedgpus → rohbpus (原始: wedgpus is rohbpus)
  229. [planning] wedgpus → gijhpus (原始: wedgpus is gijhpus)
  230. [planning] x → rikxpus (原始: x is rikxpus)
  231. [actual] x → zeghpus (原始: x is zeghpus)
  232. [actual] zeghpus → texwpus (原始: zeghpus is texwpus)
  233. [actual] texwpus → rikxpus (原始: texwpus is rikxpus)
  234. [actual] zeghpus → rikxpus (原始: zeghpus is rikxpus)
  235. [actual] x → zeghpus (原始: x is zeghpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 14
[后处理] 加载LoG图，包含 14 个节点
  LoG节点 0: x is babcpus and babrpus (规则: CI, 深度: 1)
  LoG节点 1: x is babcpus (规则: CE, 深度: 2)
  LoG节点 2: x is babrpus (规则: CE, 深度: 2)
  LoG节点 3: x is babcpus and xozqpus (规则: MP, 深度: 3)
  LoG节点 4: x is babrpus and lasbpus (规则: MP, 深度: 3)
  LoG节点 5: x is rohbpus (规则: CE, 深度: 4)
  LoG节点 6: rohbpus is babcpus and xozqpus (规则: CE, 深度: 4)
  LoG节点 7: x is rikxpus (规则: MP, 深度: 4)
  LoG节点 8: rikxpus is babrpus and lasbpus (规则: CE, 深度: 4)
  LoG节点 9: x is rohbpus and woxspus (规则: MP, 深度: 5)
  LoG节点 10: rohbpus is babcpus and xozqpus and rezwpus (规则: MP, 深度: 5)
  LoG节点 11: x is zeghpus (规则: CE, 深度: 5)
  LoG节点 12: zeghpus is rikxpus (规则: MP, 深度: 5)
  LoG节点 13: rikxpus is babrpus and lasbpus and rovgpus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 235
   - 初始条件数: 9
   - LoG图节点数: 14

📋 初始条件列表:
    1. rikxpus is tasrpus
    2. gijhpus is babcpus and xozqpus and rezwpus
    3. rohbpus is gijhpus
    4. tasrpus is babrpus and lasbpus and rovgpus
    5. zeghpus is texwpus
    6. texwpus is rikxpus
    7. wedgpus is rohbpus and woxspus
    8. x is zeghpus and xifwpus
    9. x is wedgpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 9 个前提节点

🔍 开始处理actual节点...

   节点 1: rikxpus is tasrpus
      ↻ 重复节点，计数: 2

   节点 2: gijhpus is babcpus and xozqpus and rezwpus
      ↻ 重复节点，计数: 2

   节点 3: rohbpus is gijhpus
      ↻ 重复节点，计数: 2

   节点 4: tasrpus is babrpus and lasbpus and rovgpus
      ↻ 重复节点，计数: 2

   节点 5: zeghpus is texwpus
      ↻ 重复节点，计数: 2

   节点 6: texwpus is rikxpus
      ↻ 重复节点，计数: 2

   节点 7: wedgpus is rohbpus and woxspus
      ↻ 重复节点，计数: 2

   节点 8: x is zeghpus and xifwpus
      ↻ 重复节点，计数: 2

   节点 9: x is wedgpus
      ↻ 重复节点，计数: 2

   节点 10: x is zeghpus and xifwpus
      ↻ 重复节点，计数: 3

   节点 11: x is zeghpus and xifwpus
      ↻ 重复节点，计数: 4

   节点 12: x is wedgpus
      ↻ 重复节点，计数: 3

   节点 13: x is wedgpus
      ↻ 重复节点，计数: 4

   节点 14: zeghpus is texwpus
      ↻ 重复节点，计数: 3

   节点 15: x is zeghpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is zeghpus
      ✅ 验证成功 + LoG匹配

   节点 16: zeghpus is texwpus
      ↻ 重复节点，计数: 4

   节点 17: x is texwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zeghpus → zeghpus is texwpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is zeghpus
  - 前提: zeghpus is texwpus

   节点 18: x is zeghpus
      ↻ 重复节点，计数: 2

   节点 19: zeghpus is texwpus
      ↻ 重复节点，计数: 5

   节点 20: texwpus is rikxpus
      ↻ 重复节点，计数: 3

   节点 21: texwpus is rikxpus
      ↻ 重复节点，计数: 4

   节点 22: zeghpus is texwpus
      ↻ 重复节点，计数: 6

   节点 23: x is zeghpus
      ↻ 重复节点，计数: 3

   节点 24: x is zeghpus
      ↻ 重复节点，计数: 4

   节点 25: zeghpus is texwpus
      ↻ 重复节点，计数: 7

   节点 26: texwpus is rikxpus
      ↻ 重复节点，计数: 5

   节点 27: gijhpus is babcpus and xozqpus and rezwpus
      ↻ 重复节点，计数: 3

   节点 28: gijhpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gijhpus is babcpus and xozqpus and rezwpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gijhpus is babcpus and xozqpus and rezwpus

   节点 29: gijhpus is xozqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gijhpus is babcpus and xozqpus and rezwpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gijhpus is babcpus and xozqpus and rezwpus

   节点 30: gijhpus is rezwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gijhpus is babcpus and xozqpus and rezwpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gijhpus is babcpus and xozqpus and rezwpus

   节点 31: tasrpus is babrpus and lasbpus and rovgpus
      ↻ 重复节点，计数: 3

   节点 32: x is wedgpus
      ↻ 重复节点，计数: 5

   节点 33: wedgpus is rohbpus and woxspus
      ↻ 重复节点，计数: 3

   节点 34: x is wedgpus
      ↻ 重复节点，计数: 6

   节点 35: wedgpus is rohbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wedgpus is rohbpus and woxspus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wedgpus is rohbpus and woxspus

   节点 36: x is rohbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is rohbpus
[子树点亮]     └─ 点亮依赖节点: x is rohbpus and woxspus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 37: wedgpus is rohbpus
      ↻ 重复节点，计数: 2

   节点 38: x is wedgpus
      ↻ 重复节点，计数: 7

   节点 39: rohbpus is gijhpus
      ↻ 重复节点，计数: 3

   节点 40: x is rohbpus
      ↻ 重复节点，计数: 2

   节点 41: rohbpus is gijhpus
      ↻ 重复节点，计数: 4

   节点 42: x is gijhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wedgpus → wedgpus is gijhpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is wedgpus
  - 前提: wedgpus is rohbpus
  - 前提: rohbpus is gijhpus

   节点 43: gijhpus is babcpus and xozqpus and rezwpus
      ↻ 重复节点，计数: 4

   节点 44: x is gijhpus
      ↻ 重复节点，计数: 2

   节点 45: gijhpus is babcpus
      ↻ 重复节点，计数: 2

   节点 46: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: x is babcpus and xozqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: rohbpus is babcpus and xozqpus (深度4)
[子树点亮]     └─ 点亮依赖节点: rohbpus is babcpus and xozqpus and rezwpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 47: x is babcpus
      ↻ 重复节点，计数: 2

   节点 48: x is babcpus
      ↻ 重复节点，计数: 3

   节点 49: x is gijhpus
      ↻ 重复节点，计数: 3

   节点 50: x is zeghpus and xifwpus
      ↻ 重复节点，计数: 5

   节点 51: zeghpus is texwpus
      ↻ 重复节点，计数: 8

   节点 52: texwpus is rikxpus
      ↻ 重复节点，计数: 6

   节点 53: rikxpus is tasrpus
      ↻ 重复节点，计数: 3

   节点 54: tasrpus is babrpus and lasbpus and rovgpus
      ↻ 重复节点，计数: 4

   节点 55: x is zeghpus
      ↻ 重复节点，计数: 5

   节点 56: zeghpus is texwpus
      ↻ 重复节点，计数: 9

   节点 57: texwpus is rikxpus
      ↻ 重复节点，计数: 7

   节点 58: rikxpus is tasrpus
      ↻ 重复节点，计数: 4

   节点 59: tasrpus is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: tasrpus is babrpus and lasbpus and rovgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: tasrpus is babrpus and lasbpus and rovgpus

   节点 60: x is zeghpus
      ↻ 重复节点，计数: 6

   节点 61: zeghpus is texwpus
      ↻ 重复节点，计数: 10

   节点 62: x is texwpus
      ↻ 重复节点，计数: 2

   节点 63: x is zeghpus
      ↻ 重复节点，计数: 7

   节点 64: zeghpus is texwpus
      ↻ 重复节点，计数: 11

   节点 65: zeghpus is texwpus
      ↻ 重复节点，计数: 12

   节点 66: x is zeghpus and xifwpus
      ↻ 重复节点，计数: 6

   节点 67: x is wedgpus
      ↻ 重复节点，计数: 8

   节点 68: zeghpus is texwpus
      ↻ 重复节点，计数: 13

   节点 69: tasrpus is babrpus
      ↻ 重复节点，计数: 2

   节点 70: rikxpus is tasrpus
      ↻ 重复节点，计数: 5

   节点 71: texwpus is rikxpus
      ↻ 重复节点，计数: 8

   节点 72: zeghpus is texwpus
      ↻ 重复节点，计数: 14

   节点 73: x is zeghpus
      ↻ 重复节点，计数: 8

   节点 74: zeghpus is texwpus
      ↻ 重复节点，计数: 15

   节点 75: texwpus is rikxpus
      ↻ 重复节点，计数: 9

   节点 76: rikxpus is tasrpus
      ↻ 重复节点，计数: 6

   节点 77: tasrpus is babrpus
      ↻ 重复节点，计数: 3

   节点 78: x is zeghpus
      ↻ 重复节点，计数: 9

   节点 79: zeghpus is texwpus
      ↻ 重复节点，计数: 16

   节点 80: tasrpus is babrpus
      ↻ 重复节点，计数: 4

   节点 81: x is wedgpus
      ↻ 重复节点，计数: 9

   节点 82: wedgpus is rohbpus
      ↻ 重复节点，计数: 3

   节点 83: rohbpus is gijhpus
      ↻ 重复节点，计数: 5

   节点 84: gijhpus is babcpus
      ↻ 重复节点，计数: 3

   节点 85: gijhpus is babcpus
      ↻ 重复节点，计数: 4

   节点 86: x is gijhpus
      ↻ 重复节点，计数: 4

   节点 87: x is babcpus
      ↻ 重复节点，计数: 4

   节点 88: gijhpus is babcpus
      ↻ 重复节点，计数: 5

   节点 89: x is gijhpus
      ↻ 重复节点，计数: 5

   节点 90: x is rohbpus
      ↻ 重复节点，计数: 3

   节点 91: rohbpus is gijhpus
      ↻ 重复节点，计数: 6

   节点 92: x is gijhpus
      ↻ 重复节点，计数: 6

   节点 93: x is rohbpus
      ↻ 重复节点，计数: 4

   节点 94: rohbpus is gijhpus
      ↻ 重复节点，计数: 7

   节点 95: rohbpus is gijhpus
      ↻ 重复节点，计数: 8

   节点 96: x is rohbpus
      ↻ 重复节点，计数: 5

   节点 97: gijhpus is babcpus
      ↻ 重复节点，计数: 6

   节点 98: rohbpus is gijhpus
      ↻ 重复节点，计数: 9

   节点 99: wedgpus is rohbpus
      ↻ 重复节点，计数: 4

   节点 100: x is wedgpus
      ↻ 重复节点，计数: 10

   节点 101: x is wedgpus
      ↻ 重复节点，计数: 11

   节点 102: wedgpus is rohbpus
      ↻ 重复节点，计数: 5

   节点 103: rohbpus is gijhpus
      ↻ 重复节点，计数: 10

   节点 104: gijhpus is babcpus
      ↻ 重复节点，计数: 7

   节点 105: x is gijhpus
      ↻ 重复节点，计数: 7

   节点 106: gijhpus is babcpus
      ↻ 重复节点，计数: 8

   节点 107: x is babcpus
      ↻ 重复节点，计数: 5

   节点 108: gijhpus is babcpus
      ↻ 重复节点，计数: 9

   节点 109: x is wedgpus
      ↻ 重复节点，计数: 12

   节点 110: wedgpus is rohbpus
      ↻ 重复节点，计数: 6

   节点 111: x is rohbpus
      ↻ 重复节点，计数: 6

   节点 112: x is wedgpus
      ↻ 重复节点，计数: 13

   节点 113: wedgpus is rohbpus
      ↻ 重复节点，计数: 7

   节点 114: x is zeghpus and xifwpus
      ↻ 重复节点，计数: 7

   节点 115: x is zeghpus and xifwpus
      ↻ 重复节点，计数: 8

   节点 116: x is wedgpus
      ↻ 重复节点，计数: 14

   节点 117: x is wedgpus
      ↻ 重复节点，计数: 15

   节点 118: wedgpus is rohbpus and woxspus
      ↻ 重复节点，计数: 4

   节点 119: wedgpus is rohbpus and woxspus
      ↻ 重复节点，计数: 5

   节点 120: wedgpus is rohbpus
      ↻ 重复节点，计数: 8

   节点 121: x is wedgpus
      ↻ 重复节点，计数: 16

   节点 122: rohbpus is gijhpus
      ↻ 重复节点，计数: 11

   节点 123: gijhpus is babcpus
      ↻ 重复节点，计数: 10

   节点 124: wedgpus is rohbpus
      ↻ 重复节点，计数: 9

   节点 125: rohbpus is gijhpus
      ↻ 重复节点，计数: 12

   节点 126: gijhpus is babcpus
      ↻ 重复节点，计数: 11

   节点 127: wedgpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: wedgpus is rohbpus → rohbpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: wedgpus is rohbpus
  - 前提: rohbpus is gijhpus
  - 前提: gijhpus is babcpus

   节点 128: wedgpus is babcpus
      ↻ 重复节点，计数: 2

   节点 129: x is wedgpus
      ↻ 重复节点，计数: 17

   节点 130: x is zeghpus
      ↻ 重复节点，计数: 10

   节点 131: x is wedgpus
      ↻ 重复节点，计数: 18

   节点 132: wedgpus is rohbpus
      ↻ 重复节点，计数: 10

   节点 133: rohbpus is gijhpus
      ↻ 重复节点，计数: 13

   节点 134: gijhpus is babcpus
      ↻ 重复节点，计数: 12

   节点 135: rohbpus is gijhpus
      ↻ 重复节点，计数: 14

   节点 136: gijhpus is babcpus
      ↻ 重复节点，计数: 13

   节点 137: rohbpus is gijhpus
      ↻ 重复节点，计数: 15

   节点 138: x is wedgpus
      ↻ 重复节点，计数: 19

   节点 139: x is babcpus
      ↻ 重复节点，计数: 6

   节点 140: wedgpus is rohbpus
      ↻ 重复节点，计数: 11

   节点 141: rohbpus is gijhpus
      ↻ 重复节点，计数: 16

   节点 142: gijhpus is babcpus
      ↻ 重复节点，计数: 14

   节点 143: x is zeghpus
      ↻ 重复节点，计数: 11

   节点 144: zeghpus is texwpus
      ↻ 重复节点，计数: 17

   节点 145: texwpus is rikxpus
      ↻ 重复节点，计数: 10

   节点 146: rikxpus is tasrpus
      ↻ 重复节点，计数: 7

   节点 147: tasrpus is babrpus
      ↻ 重复节点，计数: 5

   节点 148: zeghpus is texwpus
      ↻ 重复节点，计数: 18

   节点 149: texwpus is rikxpus
      ↻ 重复节点，计数: 11

   节点 150: rikxpus is tasrpus
      ↻ 重复节点，计数: 8

   节点 151: tasrpus is babrpus
      ↻ 重复节点，计数: 6

   节点 152: tasrpus is babrpus
      ↻ 重复节点，计数: 7

   节点 153: rikxpus is tasrpus
      ↻ 重复节点，计数: 9

   节点 154: texwpus is rikxpus
      ↻ 重复节点，计数: 12

   节点 155: zeghpus is texwpus
      ↻ 重复节点，计数: 19

   节点 156: x is zeghpus
      ↻ 重复节点，计数: 12

   节点 157: rohbpus is gijhpus
      ↻ 重复节点，计数: 17

   节点 158: wedgpus is rohbpus
      ↻ 重复节点，计数: 12

   节点 159: x is wedgpus
      ↻ 重复节点，计数: 20

   节点 160: x is wedgpus
      ↻ 重复节点，计数: 21

   节点 161: wedgpus is rohbpus
      ↻ 重复节点，计数: 13

   节点 162: rohbpus is gijhpus
      ↻ 重复节点，计数: 18

   节点 163: x is wedgpus
      ↻ 重复节点，计数: 22

   节点 164: wedgpus is rohbpus
      ↻ 重复节点，计数: 14

   节点 165: rohbpus is gijhpus
      ↻ 重复节点，计数: 19

   节点 166: rohbpus is gijhpus
      ↻ 重复节点，计数: 20

   节点 167: x is wedgpus
      ↻ 重复节点，计数: 23

   节点 168: wedgpus is rohbpus
      ↻ 重复节点，计数: 15

   节点 169: rohbpus is gijhpus
      ↻ 重复节点，计数: 21

   节点 170: x is zeghpus
      ↻ 重复节点，计数: 13

   节点 171: zeghpus is texwpus
      ↻ 重复节点，计数: 20

   节点 172: texwpus is rikxpus
      ↻ 重复节点，计数: 13

   节点 173: zeghpus is rikxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: zeghpus is rikxpus
      ✅ 验证成功 + LoG匹配

   节点 174: x is zeghpus
      ↻ 重复节点，计数: 14

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 174
   - 新增节点: 12
   - 更新已存在节点: 162
   - 点亮的LoG节点: 8

🎯 推理质量统计:
   - 完美推理: 12 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 14节点, 9前提, 复杂度1-9

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 21
   - 前提节点: 9
   - 推理节点: 12
   - 幻觉节点: 0
   - 点亮LoG节点: 8

✅ 推理节点详情:
   🟢 x is zeghpus (出现14次, 质量:perfect)
   🟢 x is texwpus (出现2次, 质量:perfect)
   🟢 gijhpus is babcpus (出现14次, 质量:perfect)
   🟢 gijhpus is xozqpus (出现1次, 质量:perfect)
   🟢 gijhpus is rezwpus (出现1次, 质量:perfect)
   🟢 wedgpus is rohbpus (出现15次, 质量:perfect)
   🟢 x is rohbpus (出现6次, 质量:perfect)
   🟢 x is gijhpus (出现7次, 质量:perfect)
   🟢 x is babcpus (出现6次, 质量:perfect)
   🟢 tasrpus is babrpus (出现7次, 质量:perfect)
   🟢 wedgpus is babcpus (出现2次, 质量:perfect)
   🟢 zeghpus is rikxpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - rohbpus is babcpus and xozqpus
   - x is babcpus
   - rohbpus is babcpus and xozqpus and rezwpus
   - x is zeghpus
   - x is rohbpus
   - x is rohbpus and woxspus
   - zeghpus is rikxpus
   - x is babcpus and xozqpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/5 = 80.00%
   最深点亮节点: x is babcpus (第4层)
   节点Coverage: 8/14 = 57.14%
   前提条件Coverage: 9/9 = 100.00%
   各推理层点亮比例:
     第1层: 4/5 = 80.00%
     第2层: 2/4 = 50.00%
     第3层: 1/2 = 50.00%
     第4层: 1/2 = 50.00%
     第5层: 0/1 = 0.00%

🎯 计算Precision指标...
   Error Rate: 0/12 = 0.00%
   可推导节点: 12/12
   Strict Error Rate: 0/12 = 0.00%
   严格有效节点: 12/12

   详细分析:
     完美推理: 12 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 22/50
================================================================================
记录索引: 21
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_21.json
✅ 使用缓存结果:
   - 句子数: 56
   - 提取的语句数: 42
   - 初始条件数: 11

=== Statement提取完成 ===
总句子数: 56
成功提取: 56
失败提取: 0
总statements数: 42

=== 开始清洗Statement格式 ===
原始statements数: 42
清洗后statements数: 41
过滤掉的statements数: 1
清洗后的statements:
  1. [planning] x is babcpus and babrpus
  2. [actual] ditjpus is hanfpus
  3. [actual] dotjpus is jokdpus
  4. [actual] x is qobxpus
  5. [actual] qobxpus is sonhpus
  6. [actual] x is ceqfpus and motkpus
  7. [actual] ceqfpus is dotjpus and nohcpus
  8. [actual] hanfpus is babrpus and sikbpus and weygpus
  9. [actual] mezrpus is ditjpus
  10. [actual] vuqtpus is mezrpus
  11. [actual] sonhpus is vuqtpus
  12. [actual] jokdpus is babcpus and calwpus and deqtpus
  13. [planning] x is babcpus and babrpus
  14. [actual] x is qobxpus
  15. [actual] qobxpus is sonhpus
  16. [actual] x is sonhpus
  17. [actual] sonhpus is vuqtpus
  18. [actual] x is vuqtpus
  19. [actual] vuqtpus is mezrpus
  20. [actual] x is mezrpus
  21. [actual] mezrpus is ditjpus
  22. [actual] x is ditjpus
  23. [actual] ditjpus is hanfpus
  24. [actual] x is hanfpus
  25. [actual] hanfpus is babrpus and sikbpus and weygpus
  26. [actual] x is hanfpus
  27. [actual] x is babrpus
  28. [actual] x is babrpus
  29. [planning] x is babcpus
  30. [actual] x is hanfpus
  31. [actual] x is ceqfpus and motkpus
  32. [actual] x is ceqfpus
  33. [actual] ceqfpus is dotjpus and nohcpus
  34. [actual] x is dotjpus
  35. [actual] x is ceqfpus
  36. [actual] dotjpus is jokdpus
  37. [actual] x is jokdpus
  38. [actual] jokdpus is babcpus and calwpus and deqtpus
  39. [actual] x is jokdpus
  40. [actual] x is babcpus
  41. [actual] x is babcpus and babrpus

=== 开始标准化和解析节点 ===
清洗后statements数: 41
标准化后节点数: 41
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  2. [actual] ditjpus → hanfpus (原始: ditjpus is hanfpus)
  3. [actual] dotjpus → jokdpus (原始: dotjpus is jokdpus)
  4. [actual] x → qobxpus (原始: x is qobxpus)
  5. [actual] qobxpus → sonhpus (原始: qobxpus is sonhpus)
  6. [actual] x → ceqfpus and motkpus (原始: x is ceqfpus and motkpus)
  7. [actual] ceqfpus → dotjpus and nohcpus (原始: ceqfpus is dotjpus and nohcpus)
  8. [actual] hanfpus → babrpus and sikbpus and weygpus (原始: hanfpus is babrpus and sikbpus and weygpus)
  9. [actual] mezrpus → ditjpus (原始: mezrpus is ditjpus)
  10. [actual] vuqtpus → mezrpus (原始: vuqtpus is mezrpus)
  11. [actual] sonhpus → vuqtpus (原始: sonhpus is vuqtpus)
  12. [actual] jokdpus → babcpus and calwpus and deqtpus (原始: jokdpus is babcpus and calwpus and deqtpus)
  13. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  14. [actual] x → qobxpus (原始: x is qobxpus)
  15. [actual] qobxpus → sonhpus (原始: qobxpus is sonhpus)
  16. [actual] x → sonhpus (原始: x is sonhpus)
  17. [actual] sonhpus → vuqtpus (原始: sonhpus is vuqtpus)
  18. [actual] x → vuqtpus (原始: x is vuqtpus)
  19. [actual] vuqtpus → mezrpus (原始: vuqtpus is mezrpus)
  20. [actual] x → mezrpus (原始: x is mezrpus)
  21. [actual] mezrpus → ditjpus (原始: mezrpus is ditjpus)
  22. [actual] x → ditjpus (原始: x is ditjpus)
  23. [actual] ditjpus → hanfpus (原始: ditjpus is hanfpus)
  24. [actual] x → hanfpus (原始: x is hanfpus)
  25. [actual] hanfpus → babrpus and sikbpus and weygpus (原始: hanfpus is babrpus and sikbpus and weygpus)
  26. [actual] x → hanfpus (原始: x is hanfpus)
  27. [actual] x → babrpus (原始: x is babrpus)
  28. [actual] x → babrpus (原始: x is babrpus)
  29. [planning] x → babcpus (原始: x is babcpus)
  30. [actual] x → hanfpus (原始: x is hanfpus)
  31. [actual] x → ceqfpus and motkpus (原始: x is ceqfpus and motkpus)
  32. [actual] x → ceqfpus (原始: x is ceqfpus)
  33. [actual] ceqfpus → dotjpus and nohcpus (原始: ceqfpus is dotjpus and nohcpus)
  34. [actual] x → dotjpus (原始: x is dotjpus)
  35. [actual] x → ceqfpus (原始: x is ceqfpus)
  36. [actual] dotjpus → jokdpus (原始: dotjpus is jokdpus)
  37. [actual] x → jokdpus (原始: x is jokdpus)
  38. [actual] jokdpus → babcpus and calwpus and deqtpus (原始: jokdpus is babcpus and calwpus and deqtpus)
  39. [actual] x → jokdpus (原始: x is jokdpus)
  40. [actual] x → babcpus (原始: x is babcpus)
  41. [actual] x → babcpus and babrpus (原始: x is babcpus and babrpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 16
[后处理] 加载LoG图，包含 16 个节点
  LoG节点 0: x is babcpus and babrpus (规则: CI, 深度: 1)
  LoG节点 1: x is babcpus (规则: CE, 深度: 2)
  LoG节点 2: x is babrpus (规则: CE, 深度: 2)
  LoG节点 3: x is babcpus and calwpus (规则: MP, 深度: 3)
  LoG节点 4: x is babrpus and sikbpus (规则: MP, 深度: 3)
  LoG节点 5: x is dotjpus (规则: MP, 深度: 4)
  LoG节点 6: dotjpus is babcpus and calwpus (规则: CE, 深度: 4)
  LoG节点 7: x is mezrpus (规则: MP, 深度: 4)
  LoG节点 8: mezrpus is babrpus and sikbpus (规则: MP, 深度: 4)
  LoG节点 9: x is ceqfpus (规则: CE, 深度: 5)
  LoG节点 10: ceqfpus is dotjpus (规则: CE, 深度: 5)
  LoG节点 11: dotjpus is babcpus and calwpus and deqtpus (规则: MP, 深度: 5)
  LoG节点 12: x is sonhpus (规则: MP, 深度: 5)
  LoG节点 13: sonhpus is mezrpus (规则: MP, 深度: 5)
  LoG节点 14: mezrpus is hanfpus (规则: MP, 深度: 5)
  LoG节点 15: hanfpus is babrpus and sikbpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 41
   - 初始条件数: 11
   - LoG图节点数: 16

📋 初始条件列表:
    1. ditjpus is hanfpus
    2. dotjpus is jokdpus
    3. x is qobxpus
    4. qobxpus is sonhpus
    5. x is ceqfpus and motkpus
    6. ceqfpus is dotjpus and nohcpus
    7. hanfpus is babrpus and sikbpus and weygpus
    8. mezrpus is ditjpus
    9. vuqtpus is mezrpus
   10. sonhpus is vuqtpus
   11. jokdpus is babcpus and calwpus and deqtpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 11 个前提节点

🔍 开始处理actual节点...

   节点 1: ditjpus is hanfpus
      ↻ 重复节点，计数: 2

   节点 2: dotjpus is jokdpus
      ↻ 重复节点，计数: 2

   节点 3: x is qobxpus
      ↻ 重复节点，计数: 2

   节点 4: qobxpus is sonhpus
      ↻ 重复节点，计数: 2

   节点 5: x is ceqfpus and motkpus
      ↻ 重复节点，计数: 2

   节点 6: ceqfpus is dotjpus and nohcpus
      ↻ 重复节点，计数: 2

   节点 7: hanfpus is babrpus and sikbpus and weygpus
      ↻ 重复节点，计数: 2

   节点 8: mezrpus is ditjpus
      ↻ 重复节点，计数: 2

   节点 9: vuqtpus is mezrpus
      ↻ 重复节点，计数: 2

   节点 10: sonhpus is vuqtpus
      ↻ 重复节点，计数: 2

   节点 11: jokdpus is babcpus and calwpus and deqtpus
      ↻ 重复节点，计数: 2

   节点 12: x is qobxpus
      ↻ 重复节点，计数: 3

   节点 13: qobxpus is sonhpus
      ↻ 重复节点，计数: 3

   节点 14: x is sonhpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is sonhpus
      ✅ 验证成功 + LoG匹配

   节点 15: sonhpus is vuqtpus
      ↻ 重复节点，计数: 3

   节点 16: x is vuqtpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qobxpus → qobxpus is vuqtpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is qobxpus
  - 前提: qobxpus is sonhpus
  - 前提: sonhpus is vuqtpus

   节点 17: vuqtpus is mezrpus
      ↻ 重复节点，计数: 3

   节点 18: x is mezrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is mezrpus
[子树点亮]     └─ 点亮依赖节点: sonhpus is mezrpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 19: mezrpus is ditjpus
      ↻ 重复节点，计数: 3

   节点 20: x is ditjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qobxpus → qobxpus is ditjpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is qobxpus
  - 前提: qobxpus is sonhpus
  - 前提: sonhpus is vuqtpus
  - 前提: vuqtpus is mezrpus
  - 前提: mezrpus is ditjpus

   节点 21: ditjpus is hanfpus
      ↻ 重复节点，计数: 3

   节点 22: x is hanfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qobxpus → qobxpus is hanfpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is qobxpus
  - 前提: qobxpus is sonhpus
  - 前提: sonhpus is vuqtpus
  - 前提: vuqtpus is mezrpus
  - 前提: mezrpus is ditjpus
  - 前提: ditjpus is hanfpus
  ✓ 点亮LoG节点: mezrpus is hanfpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 23: hanfpus is babrpus and sikbpus and weygpus
      ↻ 重复节点，计数: 3

   节点 24: x is hanfpus
      ↻ 重复节点，计数: 2

   节点 25: x is babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babrpus
[子树点亮]     └─ 点亮依赖节点: x is babrpus and sikbpus (深度3)
[子树点亮]     └─ 点亮依赖节点: mezrpus is babrpus and sikbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: hanfpus is babrpus and sikbpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 26: x is babrpus
      ↻ 重复节点，计数: 2

   节点 27: x is hanfpus
      ↻ 重复节点，计数: 3

   节点 28: x is ceqfpus and motkpus
      ↻ 重复节点，计数: 3

   节点 29: x is ceqfpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is ceqfpus
      ✅ 验证成功 + LoG匹配

   节点 30: ceqfpus is dotjpus and nohcpus
      ↻ 重复节点，计数: 3

   节点 31: x is dotjpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is dotjpus
[子树点亮]     └─ 点亮依赖节点: ceqfpus is dotjpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 32: x is ceqfpus
      ↻ 重复节点，计数: 2

   节点 33: dotjpus is jokdpus
      ↻ 重复节点，计数: 3

   节点 34: x is jokdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is ceqfpus → ceqfpus is jokdpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is ceqfpus
  - 前提: ceqfpus is dotjpus and nohcpus
  - 前提: dotjpus is jokdpus

   节点 35: jokdpus is babcpus and calwpus and deqtpus
      ↻ 重复节点，计数: 3

   节点 36: x is jokdpus
      ↻ 重复节点，计数: 2

   节点 37: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: x is babcpus and calwpus (深度3)
[子树点亮]     └─ 点亮依赖节点: dotjpus is babcpus and calwpus (深度4)
[子树点亮]     └─ 点亮依赖节点: dotjpus is babcpus and calwpus and deqtpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 38: x is babcpus and babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus and babrpus
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 38
   - 新增节点: 11
   - 更新已存在节点: 27
   - 点亮的LoG节点: 16

🎯 推理质量统计:
   - 完美推理: 11 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 16节点, 11前提, 复杂度1-11

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 22
   - 前提节点: 11
   - 推理节点: 11
   - 幻觉节点: 0
   - 点亮LoG节点: 16

✅ 推理节点详情:
   🟢 x is sonhpus (出现1次, 质量:perfect)
   🟢 x is vuqtpus (出现1次, 质量:perfect)
   🟢 x is mezrpus (出现1次, 质量:perfect)
   🟢 x is ditjpus (出现1次, 质量:perfect)
   🟢 x is hanfpus (出现3次, 质量:perfect)
   🟢 x is babrpus (出现2次, 质量:perfect)
   🟢 x is ceqfpus (出现2次, 质量:perfect)
   🟢 x is dotjpus (出现1次, 质量:perfect)
   🟢 x is jokdpus (出现2次, 质量:perfect)
   🟢 x is babcpus (出现1次, 质量:perfect)
   🟢 x is babcpus and babrpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - sonhpus is mezrpus
   - dotjpus is babcpus and calwpus
   - x is babcpus
   - mezrpus is hanfpus
   - mezrpus is babrpus and sikbpus
   - ceqfpus is dotjpus
   - dotjpus is babcpus and calwpus and deqtpus
   - x is sonhpus
   - x is babcpus and calwpus
   - x is ceqfpus
   - x is dotjpus
   - x is babcpus and babrpus
   - x is babrpus
   - x is babrpus and sikbpus
   - x is mezrpus
   - hanfpus is babrpus and sikbpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus and babrpus (第5层)
   节点Coverage: 16/16 = 100.00%
   前提条件Coverage: 11/11 = 100.00%
   各推理层点亮比例:
     第1层: 7/7 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/11 = 0.00%
   可推导节点: 11/11
   Strict Error Rate: 0/11 = 0.00%
   严格有效节点: 11/11

   详细分析:
     完美推理: 11 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 23/50
================================================================================
记录索引: 22
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_22.json
✅ 使用缓存结果:
   - 句子数: 219
   - 提取的语句数: 294
   - 初始条件数: 8

=== Statement提取完成 ===
总句子数: 219
成功提取: 219
失败提取: 0
总statements数: 294

=== 开始清洗Statement格式 ===
原始statements数: 294
清洗后statements数: 176
过滤掉的statements数: 118
清洗后的statements:
  1. [actual] xopvpus is babcpus and peclpus
  2. [actual] xopvpus is babcpus and peclpus
  3. [actual] xorzpus is wehmpus and fewppus
  4. [actual] xorzpus is wehmpus and fewppus
  5. [actual] viszpus is forxpus and suskpus
  6. [actual] viszpus is forxpus and suskpus
  7. [actual] wehmpus is xopvpus
  8. [planning] wehmpus is xopvpus
  9. [actual] wehmpus is xopvpus
  10. [actual] xorzpus is wehmpus
  11. [actual] wehmpus is xopvpus
  12. [actual] wehmpus is xopvpus
  13. [actual] xopvpus is babcpus and peclpus
  14. [planning] wehmpus is xopvpus
  15. [actual] wehmpus is sohfpus and duzspus
  16. [planning] wehmpus is sohfpus and duzspus
  17. [actual] x is viszpus
  18. [actual] x is viszpus
  19. [planning] x is babcpus
  20. [planning] x is babcpus
  21. [actual] x is viszpus
  22. [actual] viszpus is forxpus and suskpus
  23. [actual] viszpus is forxpus
  24. [actual] viszpus is suskpus
  25. [planning] x is babcpus
  26. [actual] x is viszpus
  27. [planning] viszpus is babcpus
  28. [actual] babcpus is mentioned in statement 1
  29. [actual] xopvpus is babcpus and peclpus
  30. [actual] wehmpus is xopvpus
  31. [actual] xorzpus is wehmpus and fewppus
  32. [actual] wehmpus is sohfpus and duzspus
  33. [actual] wehmpus is sohfpus
  34. [actual] wehmpus is duzspus
  35. [actual] wehmpus is xopvpus
  36. [actual] forxpus is xorzpus
  37. [actual] forxpus is xorzpus
  38. [planning] forxpus is xorzpus
  39. [planning] forxpus is xorzpus
  40. [actual] viszpus is forxpus
  41. [planning] forxpus is xorzpus
  42. [planning] viszpus is forxpus
  43. [planning] viszpus is xorzpus
  44. [actual] sohfpus is bedqpus and sejlpus
  45. [actual] x is viszpus
  46. [actual] forxpus is xorzpus
  47. [actual] wehmpus is xopvpus
  48. [actual] xopvpus is babcpus
  49. [actual] x is babcpus
  50. [actual] viszpus is forxpus
  51. [actual] forxpus is babcpus
  52. [actual] x is babcpus
  53. [actual] wehmpus is sohfpus and duzspus
  54. [actual] wehmpus is xopvpus
  55. [actual] xopvpus is babcpus
  56. [actual] wehmpus is babcpus
  57. [actual] sohfpus is bedqpus and sejlpus
  58. [actual] x is babcpus
  59. [actual] xopvpus is babcpus
  60. [actual] babcpus is a category that contains xopvpus
  61. [actual] wehmpus is xopvpus
  62. [actual] xopvpus is a category that contains wehmpus
  63. [actual] xopvpus is babcpus
  64. [actual] wehmpus is xopvpus
  65. [planning] wehmpus is babcpus
  66. [actual] babcpus is a set that contains xopvpus
  67. [actual] xopvpus is a set that contains wehmpus
  68. [actual] wehmpus is an element of an element of babcpus
  69. [planning] wehmpus is babcpus
  70. [planning] babcpus is a transitive set
  71. [actual] wehmpus is xopvpus
  72. [actual] xopvpus is babcpus
  73. [planning] wehmpus is babcpus
  74. [planning] x is viszpus
  75. [planning] viszpus is forxpus
  76. [actual] wehmpus is xopvpus
  77. [actual] xorzpus is wehmpus
  78. [actual] xorzpus is wehmpus
  79. [actual] wehmpus is xopvpus
  80. [planning] xorzpus is xopvpus
  81. [actual] viszpus is forxpus
  82. [actual] forxpus is xorzpus
  83. [actual] viszpus is xorzpus
  84. [actual] viszpus is wehmpus
  85. [planning] x is babcpus
  86. [actual] x is viszpus
  87. [actual] viszpus is forxpus
  88. [actual] forxpus is xorzpus
  89. [actual] xopvpus is babcpus
  90. [planning] babcpus is a category
  91. [planning] xopvpus is babcpus
  92. [planning] xopvpus is a subset of babcpus
  93. [planning] xopvpus is an element of babcpus
  94. [actual] xopvpus is babcpus and peclpus
  95. [actual] xorzpus is wehmpus and fewppus
  96. [actual] wehmpus is xopvpus
  97. [actual] wehmpus is xopvpus
  98. [planning] xopvpus is a category
  99. [actual] wehmpus is a member of xopvpus
  100. [actual] xopvpus is babcpus
  101. [planning] babcpus is a category containing xopvpus
  102. [planning] xopvpus is a member of babcpus
  103. [actual] x is a member of babcpus
  104. [actual] x is a member of viszpus
  105. [actual] viszpus is a member of forxpus
  106. [actual] forxpus is a member of xorzpus
  107. [planning] x is a member of babcpus
  108. [actual] xopvpus is babcpus
  109. [actual] xopvpus is peclpus
  110. [actual] xorzpus is wehmpus
  111. [actual] xorzpus is fewppus
  112. [actual] viszpus is forxpus
  113. [actual] viszpus is suskpus
  114. [actual] wehmpus is xopvpus
  115. [actual] wehmpus is sohfpus
  116. [actual] wehmpus is duzspus
  117. [actual] x is viszpus
  118. [actual] sohfpus is bedqpus
  119. [actual] sohfpus is sejlpus
  120. [actual] forxpus is xorzpus
  121. [actual] x is forxpus
  122. [actual] forxpus is a set that contains viszpus
  123. [actual] x is an element of viszpus
  124. [actual] viszpus is forxpus
  125. [actual] x is an element of viszpus
  126. [actual] viszpus is an element of forxpus
  127. [actual] forxpus is an element of xorzpus
  128. [actual] x is an element of xorzpus
  129. [actual] forxpus is an element of xorzpus
  130. [planning] xopvpus is babcpus
  131. [actual] wehmpus is xopvpus
  132. [actual] xopvpus is babcpus
  133. [actual] wehmpus is xopvpus
  134. [actual] x is viszpus
  135. [planning] viszpus is subset of babcpus
  136. [planning] x is babcpus
  137. [actual] viszpus is forxpus
  138. [planning] viszpus is forxpus
  139. [actual] forxpus is xorzpus
  140. [actual] viszpus is forxpus
  141. [actual] forxpus is xorzpus
  142. [actual] viszpus is xorzpus
  143. [planning] xorzpus is wehmpus
  144. [actual] xorzpus is wehmpus
  145. [actual] wehmpus is xopvpus
  146. [actual] xopvpus is babcpus
  147. [planning] x is viszpus
  148. [planning] x is babcpus
  149. [planning] xopvpus is babcpus
  150. [planning] xopvpus is a subcategory of babcpus
  151. [actual] wehmpus is xopvpus
  152. [actual] x is viszpus
  153. [actual] x is an element of viszpus
  154. [actual] x is viszpus
  155. [actual] xopvpus is babcpus
  156. [planning] xopvpus is a category
  157. [actual] x is viszpus
  158. [actual] viszpus is a category
  159. [actual] x is an instance of viszpus
  160. [actual] viszpus is forxpus
  161. [planning] viszpus is a category
  162. [planning] forxpus is a category
  163. [planning] x is forxpus
  164. [planning] x is viszpus
  165. [actual] forxpus is xorzpus
  166. [planning] x is xorzpus
  167. [planning] x is xorzpus
  168. [actual] x is babcpus
  169. [actual] viszpus is forxpus
  170. [actual] forxpus is xorzpus
  171. [actual] xorzpus is wehmpus
  172. [actual] wehmpus is xopvpus
  173. [actual] xopvpus is babcpus
  174. [actual] x is viszpus
  175. [actual] x is babcpus
  176. [actual] x is babcpus

=== 开始标准化和解析节点 ===
清洗后statements数: 176
标准化后节点数: 142
过滤掉的无效实体数: 34
标准化后的节点:
  1. [actual] xopvpus → babcpus and peclpus (原始: xopvpus is babcpus and peclpus)
  2. [actual] xopvpus → babcpus and peclpus (原始: xopvpus is babcpus and peclpus)
  3. [actual] xorzpus → wehmpus and fewppus (原始: xorzpus is wehmpus and fewppus)
  4. [actual] xorzpus → wehmpus and fewppus (原始: xorzpus is wehmpus and fewppus)
  5. [actual] viszpus → forxpus and suskpus (原始: viszpus is forxpus and suskpus)
  6. [actual] viszpus → forxpus and suskpus (原始: viszpus is forxpus and suskpus)
  7. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  8. [planning] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  9. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  10. [actual] xorzpus → wehmpus (原始: xorzpus is wehmpus)
  11. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  12. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  13. [actual] xopvpus → babcpus and peclpus (原始: xopvpus is babcpus and peclpus)
  14. [planning] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  15. [actual] wehmpus → sohfpus and duzspus (原始: wehmpus is sohfpus and duzspus)
  16. [planning] wehmpus → sohfpus and duzspus (原始: wehmpus is sohfpus and duzspus)
  17. [actual] x → viszpus (原始: x is viszpus)
  18. [actual] x → viszpus (原始: x is viszpus)
  19. [planning] x → babcpus (原始: x is babcpus)
  20. [planning] x → babcpus (原始: x is babcpus)
  21. [actual] x → viszpus (原始: x is viszpus)
  22. [actual] viszpus → forxpus and suskpus (原始: viszpus is forxpus and suskpus)
  23. [actual] viszpus → forxpus (原始: viszpus is forxpus)
  24. [actual] viszpus → suskpus (原始: viszpus is suskpus)
  25. [planning] x → babcpus (原始: x is babcpus)
  26. [actual] x → viszpus (原始: x is viszpus)
  27. [planning] viszpus → babcpus (原始: viszpus is babcpus)
  28. [actual] xopvpus → babcpus and peclpus (原始: xopvpus is babcpus and peclpus)
  29. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  30. [actual] xorzpus → wehmpus and fewppus (原始: xorzpus is wehmpus and fewppus)
  31. [actual] wehmpus → sohfpus and duzspus (原始: wehmpus is sohfpus and duzspus)
  32. [actual] wehmpus → sohfpus (原始: wehmpus is sohfpus)
  33. [actual] wehmpus → duzspus (原始: wehmpus is duzspus)
  34. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  35. [actual] forxpus → xorzpus (原始: forxpus is xorzpus)
  36. [actual] forxpus → xorzpus (原始: forxpus is xorzpus)
  37. [planning] forxpus → xorzpus (原始: forxpus is xorzpus)
  38. [planning] forxpus → xorzpus (原始: forxpus is xorzpus)
  39. [actual] viszpus → forxpus (原始: viszpus is forxpus)
  40. [planning] forxpus → xorzpus (原始: forxpus is xorzpus)
  41. [planning] viszpus → forxpus (原始: viszpus is forxpus)
  42. [planning] viszpus → xorzpus (原始: viszpus is xorzpus)
  43. [actual] sohfpus → bedqpus and sejlpus (原始: sohfpus is bedqpus and sejlpus)
  44. [actual] x → viszpus (原始: x is viszpus)
  45. [actual] forxpus → xorzpus (原始: forxpus is xorzpus)
  46. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  47. [actual] xopvpus → babcpus (原始: xopvpus is babcpus)
  48. [actual] x → babcpus (原始: x is babcpus)
  49. [actual] viszpus → forxpus (原始: viszpus is forxpus)
  50. [actual] forxpus → babcpus (原始: forxpus is babcpus)
  51. [actual] x → babcpus (原始: x is babcpus)
  52. [actual] wehmpus → sohfpus and duzspus (原始: wehmpus is sohfpus and duzspus)
  53. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  54. [actual] xopvpus → babcpus (原始: xopvpus is babcpus)
  55. [actual] wehmpus → babcpus (原始: wehmpus is babcpus)
  56. [actual] sohfpus → bedqpus and sejlpus (原始: sohfpus is bedqpus and sejlpus)
  57. [actual] x → babcpus (原始: x is babcpus)
  58. [actual] xopvpus → babcpus (原始: xopvpus is babcpus)
  59. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  60. [actual] xopvpus → babcpus (原始: xopvpus is babcpus)
  61. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  62. [planning] wehmpus → babcpus (原始: wehmpus is babcpus)
  63. [planning] wehmpus → babcpus (原始: wehmpus is babcpus)
  64. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  65. [actual] xopvpus → babcpus (原始: xopvpus is babcpus)
  66. [planning] wehmpus → babcpus (原始: wehmpus is babcpus)
  67. [planning] x → viszpus (原始: x is viszpus)
  68. [planning] viszpus → forxpus (原始: viszpus is forxpus)
  69. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  70. [actual] xorzpus → wehmpus (原始: xorzpus is wehmpus)
  71. [actual] xorzpus → wehmpus (原始: xorzpus is wehmpus)
  72. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  73. [planning] xorzpus → xopvpus (原始: xorzpus is xopvpus)
  74. [actual] viszpus → forxpus (原始: viszpus is forxpus)
  75. [actual] forxpus → xorzpus (原始: forxpus is xorzpus)
  76. [actual] viszpus → xorzpus (原始: viszpus is xorzpus)
  77. [actual] viszpus → wehmpus (原始: viszpus is wehmpus)
  78. [planning] x → babcpus (原始: x is babcpus)
  79. [actual] x → viszpus (原始: x is viszpus)
  80. [actual] viszpus → forxpus (原始: viszpus is forxpus)
  81. [actual] forxpus → xorzpus (原始: forxpus is xorzpus)
  82. [actual] xopvpus → babcpus (原始: xopvpus is babcpus)
  83. [planning] xopvpus → babcpus (原始: xopvpus is babcpus)
  84. [actual] xopvpus → babcpus and peclpus (原始: xopvpus is babcpus and peclpus)
  85. [actual] xorzpus → wehmpus and fewppus (原始: xorzpus is wehmpus and fewppus)
  86. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  87. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  88. [actual] xopvpus → babcpus (原始: xopvpus is babcpus)
  89. [actual] xopvpus → babcpus (原始: xopvpus is babcpus)
  90. [actual] xopvpus → peclpus (原始: xopvpus is peclpus)
  91. [actual] xorzpus → wehmpus (原始: xorzpus is wehmpus)
  92. [actual] xorzpus → fewppus (原始: xorzpus is fewppus)
  93. [actual] viszpus → forxpus (原始: viszpus is forxpus)
  94. [actual] viszpus → suskpus (原始: viszpus is suskpus)
  95. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  96. [actual] wehmpus → sohfpus (原始: wehmpus is sohfpus)
  97. [actual] wehmpus → duzspus (原始: wehmpus is duzspus)
  98. [actual] x → viszpus (原始: x is viszpus)
  99. [actual] sohfpus → bedqpus (原始: sohfpus is bedqpus)
  100. [actual] sohfpus → sejlpus (原始: sohfpus is sejlpus)
  101. [actual] forxpus → xorzpus (原始: forxpus is xorzpus)
  102. [actual] x → forxpus (原始: x is forxpus)
  103. [actual] viszpus → forxpus (原始: viszpus is forxpus)
  104. [planning] xopvpus → babcpus (原始: xopvpus is babcpus)
  105. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  106. [actual] xopvpus → babcpus (原始: xopvpus is babcpus)
  107. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  108. [actual] x → viszpus (原始: x is viszpus)
  109. [planning] x → babcpus (原始: x is babcpus)
  110. [actual] viszpus → forxpus (原始: viszpus is forxpus)
  111. [planning] viszpus → forxpus (原始: viszpus is forxpus)
  112. [actual] forxpus → xorzpus (原始: forxpus is xorzpus)
  113. [actual] viszpus → forxpus (原始: viszpus is forxpus)
  114. [actual] forxpus → xorzpus (原始: forxpus is xorzpus)
  115. [actual] viszpus → xorzpus (原始: viszpus is xorzpus)
  116. [planning] xorzpus → wehmpus (原始: xorzpus is wehmpus)
  117. [actual] xorzpus → wehmpus (原始: xorzpus is wehmpus)
  118. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  119. [actual] xopvpus → babcpus (原始: xopvpus is babcpus)
  120. [planning] x → viszpus (原始: x is viszpus)
  121. [planning] x → babcpus (原始: x is babcpus)
  122. [planning] xopvpus → babcpus (原始: xopvpus is babcpus)
  123. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  124. [actual] x → viszpus (原始: x is viszpus)
  125. [actual] x → viszpus (原始: x is viszpus)
  126. [actual] xopvpus → babcpus (原始: xopvpus is babcpus)
  127. [actual] x → viszpus (原始: x is viszpus)
  128. [actual] viszpus → forxpus (原始: viszpus is forxpus)
  129. [planning] x → forxpus (原始: x is forxpus)
  130. [planning] x → viszpus (原始: x is viszpus)
  131. [actual] forxpus → xorzpus (原始: forxpus is xorzpus)
  132. [planning] x → xorzpus (原始: x is xorzpus)
  133. [planning] x → xorzpus (原始: x is xorzpus)
  134. [actual] x → babcpus (原始: x is babcpus)
  135. [actual] viszpus → forxpus (原始: viszpus is forxpus)
  136. [actual] forxpus → xorzpus (原始: forxpus is xorzpus)
  137. [actual] xorzpus → wehmpus (原始: xorzpus is wehmpus)
  138. [actual] wehmpus → xopvpus (原始: wehmpus is xopvpus)
  139. [actual] xopvpus → babcpus (原始: xopvpus is babcpus)
  140. [actual] x → viszpus (原始: x is viszpus)
  141. [actual] x → babcpus (原始: x is babcpus)
  142. [actual] x → babcpus (原始: x is babcpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 13
[后处理] 加载LoG图，包含 13 个节点
  LoG节点 0: x is babcpus (规则: CE, 深度: 1)
  LoG节点 1: x is babcpus and bedqpus (规则: MP, 深度: 2)
  LoG节点 2: x is wehmpus (规则: MP, 深度: 3)
  LoG节点 3: wehmpus is babcpus and bedqpus (规则: CI, 深度: 3)
  LoG节点 4: x is forxpus (规则: CE, 深度: 4)
  LoG节点 5: forxpus is wehmpus (规则: CE, 深度: 4)
  LoG节点 6: wehmpus is babcpus (规则: CE, 深度: 4)
  LoG节点 7: wehmpus is bedqpus (规则: MP, 深度: 4)
  LoG节点 8: x is forxpus and suskpus (规则: MP, 深度: 5)
  LoG节点 9: forxpus is wehmpus and fewppus (规则: MP, 深度: 5)
  LoG节点 10: wehmpus is babcpus and peclpus (规则: MP, 深度: 5)
  LoG节点 11: wehmpus is sohfpus (规则: CE, 深度: 5)
  LoG节点 12: sohfpus is bedqpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 142
   - 初始条件数: 8
   - LoG图节点数: 13

📋 初始条件列表:
    1. xopvpus is babcpus and peclpus
    2. xorzpus is wehmpus and fewppus
    3. viszpus is forxpus and suskpus
    4. wehmpus is xopvpus
    5. wehmpus is sohfpus and duzspus
    6. x is viszpus
    7. sohfpus is bedqpus and sejlpus
    8. forxpus is xorzpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 8 个前提节点

🔍 开始处理actual节点...

   节点 1: xopvpus is babcpus and peclpus
      ↻ 重复节点，计数: 2

   节点 2: xopvpus is babcpus and peclpus
      ↻ 重复节点，计数: 3

   节点 3: xorzpus is wehmpus and fewppus
      ↻ 重复节点，计数: 2

   节点 4: xorzpus is wehmpus and fewppus
      ↻ 重复节点，计数: 3

   节点 5: viszpus is forxpus and suskpus
      ↻ 重复节点，计数: 2

   节点 6: viszpus is forxpus and suskpus
      ↻ 重复节点，计数: 3

   节点 7: wehmpus is xopvpus
      ↻ 重复节点，计数: 2

   节点 8: wehmpus is xopvpus
      ↻ 重复节点，计数: 3

   节点 9: xorzpus is wehmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: xorzpus is wehmpus and fewppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: xorzpus is wehmpus and fewppus

   节点 10: wehmpus is xopvpus
      ↻ 重复节点，计数: 4

   节点 11: wehmpus is xopvpus
      ↻ 重复节点，计数: 5

   节点 12: xopvpus is babcpus and peclpus
      ↻ 重复节点，计数: 4

   节点 13: wehmpus is sohfpus and duzspus
      ↻ 重复节点，计数: 2

   节点 14: x is viszpus
      ↻ 重复节点，计数: 2

   节点 15: x is viszpus
      ↻ 重复节点，计数: 3

   节点 16: x is viszpus
      ↻ 重复节点，计数: 4

   节点 17: viszpus is forxpus and suskpus
      ↻ 重复节点，计数: 4

   节点 18: viszpus is forxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: viszpus is forxpus and suskpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: viszpus is forxpus and suskpus

   节点 19: viszpus is suskpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: viszpus is forxpus and suskpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: viszpus is forxpus and suskpus

   节点 20: x is viszpus
      ↻ 重复节点，计数: 5

   节点 21: xopvpus is babcpus and peclpus
      ↻ 重复节点，计数: 5

   节点 22: wehmpus is xopvpus
      ↻ 重复节点，计数: 6

   节点 23: xorzpus is wehmpus and fewppus
      ↻ 重复节点，计数: 4

   节点 24: wehmpus is sohfpus and duzspus
      ↻ 重复节点，计数: 3

   节点 25: wehmpus is sohfpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: wehmpus is sohfpus
      ✅ 验证成功 + LoG匹配

   节点 26: wehmpus is duzspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wehmpus is sohfpus and duzspus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wehmpus is sohfpus and duzspus

   节点 27: wehmpus is xopvpus
      ↻ 重复节点，计数: 7

   节点 28: forxpus is xorzpus
      ↻ 重复节点，计数: 2

   节点 29: forxpus is xorzpus
      ↻ 重复节点，计数: 3

   节点 30: viszpus is forxpus
      ↻ 重复节点，计数: 2

   节点 31: sohfpus is bedqpus and sejlpus
      ↻ 重复节点，计数: 2

   节点 32: x is viszpus
      ↻ 重复节点，计数: 6

   节点 33: forxpus is xorzpus
      ↻ 重复节点，计数: 4

   节点 34: wehmpus is xopvpus
      ↻ 重复节点，计数: 8

   节点 35: xopvpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: xopvpus is babcpus and peclpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: xopvpus is babcpus and peclpus

   节点 36: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: x is babcpus and bedqpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is wehmpus (深度3)
[子树点亮]     └─ 点亮依赖节点: wehmpus is babcpus and bedqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is forxpus (深度4)
[子树点亮]     └─ 点亮依赖节点: forxpus is wehmpus (深度4)
[子树点亮]     └─ 点亮依赖节点: wehmpus is babcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: wehmpus is bedqpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is forxpus and suskpus (深度5)
[子树点亮]     └─ 点亮依赖节点: forxpus is wehmpus and fewppus (深度5)
[子树点亮]     └─ 点亮依赖节点: wehmpus is babcpus and peclpus (深度5)
[子树点亮]     └─ 点亮依赖节点: sohfpus is bedqpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 11 个节点
      ✅ 验证成功 + LoG匹配

   节点 37: viszpus is forxpus
      ↻ 重复节点，计数: 3

   节点 38: forxpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: forxpus is xorzpus → xorzpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: forxpus is xorzpus
  - 前提: xorzpus is wehmpus
  - 前提: wehmpus is xopvpus
  - 前提: xopvpus is babcpus

   节点 39: x is babcpus
      ↻ 重复节点，计数: 2

   节点 40: wehmpus is sohfpus and duzspus
      ↻ 重复节点，计数: 4

   节点 41: wehmpus is xopvpus
      ↻ 重复节点，计数: 9

   节点 42: xopvpus is babcpus
      ↻ 重复节点，计数: 2

   节点 43: wehmpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 44: sohfpus is bedqpus and sejlpus
      ↻ 重复节点，计数: 3

   节点 45: x is babcpus
      ↻ 重复节点，计数: 3

   节点 46: xopvpus is babcpus
      ↻ 重复节点，计数: 3

   节点 47: wehmpus is xopvpus
      ↻ 重复节点，计数: 10

   节点 48: xopvpus is babcpus
      ↻ 重复节点，计数: 4

   节点 49: wehmpus is xopvpus
      ↻ 重复节点，计数: 11

   节点 50: wehmpus is xopvpus
      ↻ 重复节点，计数: 12

   节点 51: xopvpus is babcpus
      ↻ 重复节点，计数: 5

   节点 52: wehmpus is xopvpus
      ↻ 重复节点，计数: 13

   节点 53: xorzpus is wehmpus
      ↻ 重复节点，计数: 2

   节点 54: xorzpus is wehmpus
      ↻ 重复节点，计数: 3

   节点 55: wehmpus is xopvpus
      ↻ 重复节点，计数: 14

   节点 56: viszpus is forxpus
      ↻ 重复节点，计数: 4

   节点 57: forxpus is xorzpus
      ↻ 重复节点，计数: 5

   节点 58: viszpus is xorzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: viszpus is forxpus → forxpus is xorzpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: viszpus is forxpus
  - 前提: forxpus is xorzpus

   节点 59: viszpus is wehmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: viszpus is forxpus → forxpus is wehmpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: viszpus is forxpus
  - 前提: forxpus is xorzpus
  - 前提: xorzpus is wehmpus

   节点 60: x is viszpus
      ↻ 重复节点，计数: 7

   节点 61: viszpus is forxpus
      ↻ 重复节点，计数: 5

   节点 62: forxpus is xorzpus
      ↻ 重复节点，计数: 6

   节点 63: xopvpus is babcpus
      ↻ 重复节点，计数: 6

   节点 64: xopvpus is babcpus and peclpus
      ↻ 重复节点，计数: 6

   节点 65: xorzpus is wehmpus and fewppus
      ↻ 重复节点，计数: 5

   节点 66: wehmpus is xopvpus
      ↻ 重复节点，计数: 15

   节点 67: wehmpus is xopvpus
      ↻ 重复节点，计数: 16

   节点 68: xopvpus is babcpus
      ↻ 重复节点，计数: 7

   节点 69: xopvpus is babcpus
      ↻ 重复节点，计数: 8

   节点 70: xopvpus is peclpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: xopvpus is babcpus and peclpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: xopvpus is babcpus and peclpus

   节点 71: xorzpus is wehmpus
      ↻ 重复节点，计数: 4

   节点 72: xorzpus is fewppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: xorzpus is wehmpus and fewppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: xorzpus is wehmpus and fewppus

   节点 73: viszpus is forxpus
      ↻ 重复节点，计数: 6

   节点 74: viszpus is suskpus
      ↻ 重复节点，计数: 2

   节点 75: wehmpus is xopvpus
      ↻ 重复节点，计数: 17

   节点 76: wehmpus is sohfpus
      ↻ 重复节点，计数: 2

   节点 77: wehmpus is duzspus
      ↻ 重复节点，计数: 2

   节点 78: x is viszpus
      ↻ 重复节点，计数: 8

   节点 79: sohfpus is bedqpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 80: sohfpus is sejlpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: sohfpus is bedqpus and sejlpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: sohfpus is bedqpus and sejlpus

   节点 81: forxpus is xorzpus
      ↻ 重复节点，计数: 7

   节点 82: x is forxpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 83: viszpus is forxpus
      ↻ 重复节点，计数: 7

   节点 84: wehmpus is xopvpus
      ↻ 重复节点，计数: 18

   节点 85: xopvpus is babcpus
      ↻ 重复节点，计数: 9

   节点 86: wehmpus is xopvpus
      ↻ 重复节点，计数: 19

   节点 87: x is viszpus
      ↻ 重复节点，计数: 9

   节点 88: viszpus is forxpus
      ↻ 重复节点，计数: 8

   节点 89: forxpus is xorzpus
      ↻ 重复节点，计数: 8

   节点 90: viszpus is forxpus
      ↻ 重复节点，计数: 9

   节点 91: forxpus is xorzpus
      ↻ 重复节点，计数: 9

   节点 92: viszpus is xorzpus
      ↻ 重复节点，计数: 2

   节点 93: xorzpus is wehmpus
      ↻ 重复节点，计数: 5

   节点 94: wehmpus is xopvpus
      ↻ 重复节点，计数: 20

   节点 95: xopvpus is babcpus
      ↻ 重复节点，计数: 10

   节点 96: wehmpus is xopvpus
      ↻ 重复节点，计数: 21

   节点 97: x is viszpus
      ↻ 重复节点，计数: 10

   节点 98: x is viszpus
      ↻ 重复节点，计数: 11

   节点 99: xopvpus is babcpus
      ↻ 重复节点，计数: 11

   节点 100: x is viszpus
      ↻ 重复节点，计数: 12

   节点 101: viszpus is forxpus
      ↻ 重复节点，计数: 10

   节点 102: forxpus is xorzpus
      ↻ 重复节点，计数: 10

   节点 103: x is babcpus
      ↻ 重复节点，计数: 4

   节点 104: viszpus is forxpus
      ↻ 重复节点，计数: 11

   节点 105: forxpus is xorzpus
      ↻ 重复节点，计数: 11

   节点 106: xorzpus is wehmpus
      ↻ 重复节点，计数: 6

   节点 107: wehmpus is xopvpus
      ↻ 重复节点，计数: 22

   节点 108: xopvpus is babcpus
      ↻ 重复节点，计数: 12

   节点 109: x is viszpus
      ↻ 重复节点，计数: 13

   节点 110: x is babcpus
      ↻ 重复节点，计数: 5

   节点 111: x is babcpus
      ↻ 重复节点，计数: 6

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 111
   - 新增节点: 16
   - 更新已存在节点: 95
   - 点亮的LoG节点: 13

🎯 推理质量统计:
   - 完美推理: 16 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 13节点, 8前提, 复杂度1-8

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 24
   - 前提节点: 8
   - 推理节点: 16
   - 幻觉节点: 0
   - 点亮LoG节点: 13

✅ 推理节点详情:
   🟢 xorzpus is wehmpus (出现6次, 质量:perfect)
   🟢 viszpus is forxpus (出现11次, 质量:perfect)
   🟢 viszpus is suskpus (出现2次, 质量:perfect)
   🟢 wehmpus is sohfpus (出现2次, 质量:perfect)
   🟢 wehmpus is duzspus (出现2次, 质量:perfect)
   🟢 xopvpus is babcpus (出现12次, 质量:perfect)
   🟢 x is babcpus (出现6次, 质量:perfect)
   🟢 forxpus is babcpus (出现1次, 质量:perfect)
   🟢 wehmpus is babcpus (出现1次, 质量:perfect)
   🟢 viszpus is xorzpus (出现2次, 质量:perfect)
   🟢 viszpus is wehmpus (出现1次, 质量:perfect)
   🟢 xopvpus is peclpus (出现1次, 质量:perfect)
   🟢 xorzpus is fewppus (出现1次, 质量:perfect)
   🟢 sohfpus is bedqpus (出现1次, 质量:perfect)
   🟢 sohfpus is sejlpus (出现1次, 质量:perfect)
   🟢 x is forxpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is babcpus and bedqpus
   - x is babcpus
   - wehmpus is babcpus
   - wehmpus is bedqpus
   - x is wehmpus
   - x is forxpus and suskpus
   - forxpus is wehmpus
   - wehmpus is babcpus and peclpus
   - forxpus is wehmpus and fewppus
   - x is forxpus
   - sohfpus is bedqpus
   - wehmpus is sohfpus
   - wehmpus is babcpus and bedqpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus (第5层)
   节点Coverage: 13/13 = 100.00%
   前提条件Coverage: 8/8 = 100.00%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/16 = 0.00%
   可推导节点: 16/16
   Strict Error Rate: 0/16 = 0.00%
   严格有效节点: 16/16

   详细分析:
     完美推理: 16 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 24/50
================================================================================
记录索引: 23
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_23.json
✅ 使用缓存结果:
   - 句子数: 70
   - 提取的语句数: 62
   - 初始条件数: 10

=== Statement提取完成 ===
总句子数: 70
成功提取: 70
失败提取: 0
总statements数: 62

=== 开始清洗Statement格式 ===
原始statements数: 62
清洗后statements数: 57
过滤掉的statements数: 5
清洗后的statements:
  1. [planning] x is babcpus
  2. [planning] x is babgpus and babkpus and babmpus
  3. [actual] yayqpus is tumcpus and korhpus
  4. [actual] xejdpus is sumypus and takhpus
  5. [actual] sumypus is forypus
  6. [actual] sumypus is virvpus and zelrpus
  7. [actual] yayqpus is fayypus
  8. [actual] fayypus is renzpus
  9. [actual] x is homjpus and cohtpus
  10. [actual] homjpus is yayqpus and dangpus
  11. [actual] tumcpus is xejdpus
  12. [actual] forypus is babcpus
  13. [planning] x is babcpus
  14. [planning] x is babcpus
  15. [actual] x is homjpus and cohtpus
  16. [actual] x is homjpus and cohtpus
  17. [actual] homjpus is yayqpus and dangpus
  18. [actual] homjpus is yayqpus and dangpus
  19. [actual] x is homjpus
  20. [actual] x is yayqpus and dangpus
  21. [actual] x is yayqpus
  22. [actual] yayqpus is fayypus
  23. [actual] yayqpus is fayypus
  24. [actual] x is fayypus
  25. [actual] fayypus is renzpus
  26. [actual] x is renzpus
  27. [actual] yayqpus is tumcpus and korhpus
  28. [actual] x is yayqpus
  29. [actual] x is tumcpus and korhpus
  30. [actual] tumcpus is xejdpus
  31. [actual] tumcpus is xejdpus
  32. [actual] x is tumcpus
  33. [actual] x is xejdpus
  34. [actual] xejdpus is sumypus and takhpus
  35. [actual] x is sumypus and takhpus
  36. [actual] sumypus is forypus
  37. [actual] x is forypus
  38. [actual] forypus is babcpus
  39. [actual] forypus is babcpus
  40. [actual] x is babcpus
  41. [actual] x is babcpus
  42. [actual] x is homjpus
  43. [actual] homjpus is yayqpus
  44. [actual] x is yayqpus
  45. [actual] yayqpus is tumcpus
  46. [actual] x is tumcpus
  47. [actual] tumcpus is xejdpus
  48. [actual] x is xejdpus
  49. [actual] xejdpus is sumypus
  50. [actual] x is sumypus
  51. [actual] sumypus is forypus
  52. [actual] x is forypus
  53. [actual] forypus is babcpus
  54. [actual] x is babcpus
  55. [actual] sumypus is virvpus and zelrpus
  56. [actual] yayqpus is korhpus
  57. [actual] x is babcpus

=== 开始标准化和解析节点 ===
清洗后statements数: 57
标准化后节点数: 57
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babcpus (原始: x is babcpus)
  2. [planning] x → babgpus and babkpus and babmpus (原始: x is babgpus and babkpus and babmpus)
  3. [actual] yayqpus → tumcpus and korhpus (原始: yayqpus is tumcpus and korhpus)
  4. [actual] xejdpus → sumypus and takhpus (原始: xejdpus is sumypus and takhpus)
  5. [actual] sumypus → forypus (原始: sumypus is forypus)
  6. [actual] sumypus → virvpus and zelrpus (原始: sumypus is virvpus and zelrpus)
  7. [actual] yayqpus → fayypus (原始: yayqpus is fayypus)
  8. [actual] fayypus → renzpus (原始: fayypus is renzpus)
  9. [actual] x → homjpus and cohtpus (原始: x is homjpus and cohtpus)
  10. [actual] homjpus → yayqpus and dangpus (原始: homjpus is yayqpus and dangpus)
  11. [actual] tumcpus → xejdpus (原始: tumcpus is xejdpus)
  12. [actual] forypus → babcpus (原始: forypus is babcpus)
  13. [planning] x → babcpus (原始: x is babcpus)
  14. [planning] x → babcpus (原始: x is babcpus)
  15. [actual] x → homjpus and cohtpus (原始: x is homjpus and cohtpus)
  16. [actual] x → homjpus and cohtpus (原始: x is homjpus and cohtpus)
  17. [actual] homjpus → yayqpus and dangpus (原始: homjpus is yayqpus and dangpus)
  18. [actual] homjpus → yayqpus and dangpus (原始: homjpus is yayqpus and dangpus)
  19. [actual] x → homjpus (原始: x is homjpus)
  20. [actual] x → yayqpus and dangpus (原始: x is yayqpus and dangpus)
  21. [actual] x → yayqpus (原始: x is yayqpus)
  22. [actual] yayqpus → fayypus (原始: yayqpus is fayypus)
  23. [actual] yayqpus → fayypus (原始: yayqpus is fayypus)
  24. [actual] x → fayypus (原始: x is fayypus)
  25. [actual] fayypus → renzpus (原始: fayypus is renzpus)
  26. [actual] x → renzpus (原始: x is renzpus)
  27. [actual] yayqpus → tumcpus and korhpus (原始: yayqpus is tumcpus and korhpus)
  28. [actual] x → yayqpus (原始: x is yayqpus)
  29. [actual] x → tumcpus and korhpus (原始: x is tumcpus and korhpus)
  30. [actual] tumcpus → xejdpus (原始: tumcpus is xejdpus)
  31. [actual] tumcpus → xejdpus (原始: tumcpus is xejdpus)
  32. [actual] x → tumcpus (原始: x is tumcpus)
  33. [actual] x → xejdpus (原始: x is xejdpus)
  34. [actual] xejdpus → sumypus and takhpus (原始: xejdpus is sumypus and takhpus)
  35. [actual] x → sumypus and takhpus (原始: x is sumypus and takhpus)
  36. [actual] sumypus → forypus (原始: sumypus is forypus)
  37. [actual] x → forypus (原始: x is forypus)
  38. [actual] forypus → babcpus (原始: forypus is babcpus)
  39. [actual] forypus → babcpus (原始: forypus is babcpus)
  40. [actual] x → babcpus (原始: x is babcpus)
  41. [actual] x → babcpus (原始: x is babcpus)
  42. [actual] x → homjpus (原始: x is homjpus)
  43. [actual] homjpus → yayqpus (原始: homjpus is yayqpus)
  44. [actual] x → yayqpus (原始: x is yayqpus)
  45. [actual] yayqpus → tumcpus (原始: yayqpus is tumcpus)
  46. [actual] x → tumcpus (原始: x is tumcpus)
  47. [actual] tumcpus → xejdpus (原始: tumcpus is xejdpus)
  48. [actual] x → xejdpus (原始: x is xejdpus)
  49. [actual] xejdpus → sumypus (原始: xejdpus is sumypus)
  50. [actual] x → sumypus (原始: x is sumypus)
  51. [actual] sumypus → forypus (原始: sumypus is forypus)
  52. [actual] x → forypus (原始: x is forypus)
  53. [actual] forypus → babcpus (原始: forypus is babcpus)
  54. [actual] x → babcpus (原始: x is babcpus)
  55. [actual] sumypus → virvpus and zelrpus (原始: sumypus is virvpus and zelrpus)
  56. [actual] yayqpus → korhpus (原始: yayqpus is korhpus)
  57. [actual] x → babcpus (原始: x is babcpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 16
[后处理] 加载LoG图，包含 16 个节点
  LoG节点 0: x is babcpus (规则: MP, 深度: 1)
  LoG节点 1: x is tumcpus (规则: CE, 深度: 2)
  LoG节点 2: tumcpus is babcpus (规则: CE, 深度: 2)
  LoG节点 3: x is tumcpus and renzpus (规则: MP, 深度: 3)
  LoG节点 4: tumcpus is babcpus and virvpus (规则: MP, 深度: 3)
  LoG节点 5: x is yayqpus (规则: MP, 深度: 4)
  LoG节点 6: yayqpus is tumcpus and renzpus (规则: CI, 深度: 4)
  LoG节点 7: tumcpus is sumypus (规则: CE, 深度: 4)
  LoG节点 8: sumypus is babcpus and virvpus (规则: CI, 深度: 4)
  LoG节点 9: x is homjpus (规则: CE, 深度: 5)
  LoG节点 10: homjpus is yayqpus (规则: CE, 深度: 5)
  LoG节点 11: yayqpus is tumcpus (规则: CE, 深度: 5)
  LoG节点 12: yayqpus is renzpus (规则: MP, 深度: 5)
  LoG节点 13: tumcpus is sumypus and takhpus (规则: MP, 深度: 5)
  LoG节点 14: sumypus is babcpus (规则: MP, 深度: 5)
  LoG节点 15: sumypus is virvpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 57
   - 初始条件数: 10
   - LoG图节点数: 16

📋 初始条件列表:
    1. yayqpus is tumcpus and korhpus
    2. xejdpus is sumypus and takhpus
    3. sumypus is forypus
    4. sumypus is virvpus and zelrpus
    5. yayqpus is fayypus
    6. fayypus is renzpus
    7. x is homjpus and cohtpus
    8. homjpus is yayqpus and dangpus
    9. tumcpus is xejdpus
   10. forypus is babcpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 10 个前提节点

🔍 开始处理actual节点...

   节点 1: yayqpus is tumcpus and korhpus
      ↻ 重复节点，计数: 2

   节点 2: xejdpus is sumypus and takhpus
      ↻ 重复节点，计数: 2

   节点 3: sumypus is forypus
      ↻ 重复节点，计数: 2

   节点 4: sumypus is virvpus and zelrpus
      ↻ 重复节点，计数: 2

   节点 5: yayqpus is fayypus
      ↻ 重复节点，计数: 2

   节点 6: fayypus is renzpus
      ↻ 重复节点，计数: 2

   节点 7: x is homjpus and cohtpus
      ↻ 重复节点，计数: 2

   节点 8: homjpus is yayqpus and dangpus
      ↻ 重复节点，计数: 2

   节点 9: tumcpus is xejdpus
      ↻ 重复节点，计数: 2

   节点 10: forypus is babcpus
      ↻ 重复节点，计数: 2

   节点 11: x is homjpus and cohtpus
      ↻ 重复节点，计数: 3

   节点 12: x is homjpus and cohtpus
      ↻ 重复节点，计数: 4

   节点 13: homjpus is yayqpus and dangpus
      ↻ 重复节点，计数: 3

   节点 14: homjpus is yayqpus and dangpus
      ↻ 重复节点，计数: 4

   节点 15: x is homjpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is homjpus
      ✅ 验证成功 + LoG匹配

   节点 16: x is yayqpus and dangpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is homjpus → homjpus is yayqpus and dangpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is homjpus
  - 前提: homjpus is yayqpus and dangpus
  ✓ 点亮LoG节点: x is yayqpus
[子树点亮]     └─ 点亮依赖节点: homjpus is yayqpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 17: x is yayqpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 18: yayqpus is fayypus
      ↻ 重复节点，计数: 3

   节点 19: yayqpus is fayypus
      ↻ 重复节点，计数: 4

   节点 20: x is fayypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is homjpus → homjpus is fayypus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is homjpus
  - 前提: homjpus is yayqpus and dangpus
  - 前提: yayqpus is fayypus

   节点 21: fayypus is renzpus
      ↻ 重复节点，计数: 3

   节点 22: x is renzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is homjpus → homjpus is renzpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is homjpus
  - 前提: homjpus is yayqpus and dangpus
  - 前提: yayqpus is fayypus
  - 前提: fayypus is renzpus
  ✓ 点亮LoG节点: yayqpus is renzpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 23: yayqpus is tumcpus and korhpus
      ↻ 重复节点，计数: 3

   节点 24: x is yayqpus
      ↻ 重复节点，计数: 2

   节点 25: x is tumcpus and korhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is homjpus → homjpus is tumcpus and korhpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is homjpus
  - 前提: homjpus is yayqpus and dangpus
  - 前提: yayqpus is tumcpus and korhpus
  ✓ 点亮LoG节点: x is tumcpus
[子树点亮]     └─ 点亮依赖节点: x is tumcpus and renzpus (深度3)
[子树点亮]     └─ 点亮依赖节点: yayqpus is tumcpus and renzpus (深度4)
[子树点亮]     └─ 点亮依赖节点: yayqpus is tumcpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 26: tumcpus is xejdpus
      ↻ 重复节点，计数: 3

   节点 27: tumcpus is xejdpus
      ↻ 重复节点，计数: 4

   节点 28: x is tumcpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 29: x is xejdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is homjpus → homjpus is xejdpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is homjpus
  - 前提: homjpus is yayqpus and dangpus
  - 前提: yayqpus is tumcpus and korhpus
  - 前提: tumcpus is xejdpus

   节点 30: xejdpus is sumypus and takhpus
      ↻ 重复节点，计数: 3

   节点 31: x is sumypus and takhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is homjpus → homjpus is sumypus and takhpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is homjpus
  - 前提: homjpus is yayqpus and dangpus
  - 前提: yayqpus is tumcpus and korhpus
  - 前提: tumcpus is xejdpus
  - 前提: xejdpus is sumypus and takhpus
  ✓ 点亮LoG节点: tumcpus is sumypus
[子树点亮]     └─ 点亮依赖节点: tumcpus is sumypus and takhpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 32: sumypus is forypus
      ↻ 重复节点，计数: 3

   节点 33: x is forypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is homjpus → homjpus is forypus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is homjpus
  - 前提: homjpus is yayqpus and dangpus
  - 前提: yayqpus is tumcpus and korhpus
  - 前提: tumcpus is xejdpus
  - 前提: xejdpus is sumypus and takhpus
  - 前提: sumypus is forypus

   节点 34: forypus is babcpus
      ↻ 重复节点，计数: 3

   节点 35: forypus is babcpus
      ↻ 重复节点，计数: 4

   节点 36: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: tumcpus is babcpus (深度2)
[子树点亮]     └─ 点亮依赖节点: tumcpus is babcpus and virvpus (深度3)
[子树点亮]     └─ 点亮依赖节点: sumypus is babcpus and virvpus (深度4)
[子树点亮]     └─ 点亮依赖节点: sumypus is babcpus (深度5)
[子树点亮]     └─ 点亮依赖节点: sumypus is virvpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
      ✅ 验证成功 + LoG匹配

   节点 37: x is babcpus
      ↻ 重复节点，计数: 2

   节点 38: x is homjpus
      ↻ 重复节点，计数: 2

   节点 39: homjpus is yayqpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 40: x is yayqpus
      ↻ 重复节点，计数: 3

   节点 41: yayqpus is tumcpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 42: x is tumcpus
      ↻ 重复节点，计数: 2

   节点 43: tumcpus is xejdpus
      ↻ 重复节点，计数: 5

   节点 44: x is xejdpus
      ↻ 重复节点，计数: 2

   节点 45: xejdpus is sumypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: xejdpus is sumypus and takhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: xejdpus is sumypus and takhpus

   节点 46: x is sumypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is sumypus and takhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is sumypus and takhpus

   节点 47: sumypus is forypus
      ↻ 重复节点，计数: 4

   节点 48: x is forypus
      ↻ 重复节点，计数: 2

   节点 49: forypus is babcpus
      ↻ 重复节点，计数: 5

   节点 50: x is babcpus
      ↻ 重复节点，计数: 3

   节点 51: sumypus is virvpus and zelrpus
      ↻ 重复节点，计数: 3

   节点 52: yayqpus is korhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yayqpus is tumcpus and korhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yayqpus is tumcpus and korhpus

   节点 53: x is babcpus
      ↻ 重复节点，计数: 4

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 53
   - 新增节点: 16
   - 更新已存在节点: 37
   - 点亮的LoG节点: 16

🎯 推理质量统计:
   - 完美推理: 16 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 16节点, 10前提, 复杂度1-10

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 26
   - 前提节点: 10
   - 推理节点: 16
   - 幻觉节点: 0
   - 点亮LoG节点: 16

✅ 推理节点详情:
   🟢 x is homjpus (出现2次, 质量:perfect)
   🟢 x is yayqpus and dangpus (出现1次, 质量:perfect)
   🟢 x is yayqpus (出现3次, 质量:perfect)
   🟢 x is fayypus (出现1次, 质量:perfect)
   🟢 x is renzpus (出现1次, 质量:perfect)
   🟢 x is tumcpus and korhpus (出现1次, 质量:perfect)
   🟢 x is tumcpus (出现2次, 质量:perfect)
   🟢 x is xejdpus (出现2次, 质量:perfect)
   🟢 x is sumypus and takhpus (出现1次, 质量:perfect)
   🟢 x is forypus (出现2次, 质量:perfect)
   🟢 x is babcpus (出现4次, 质量:perfect)
   🟢 homjpus is yayqpus (出现1次, 质量:perfect)
   🟢 yayqpus is tumcpus (出现1次, 质量:perfect)
   🟢 xejdpus is sumypus (出现1次, 质量:perfect)
   🟢 x is sumypus (出现1次, 质量:perfect)
   🟢 yayqpus is korhpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is homjpus
   - x is yayqpus
   - x is tumcpus and renzpus
   - x is babcpus
   - tumcpus is babcpus
   - yayqpus is tumcpus
   - x is tumcpus
   - yayqpus is tumcpus and renzpus
   - tumcpus is sumypus and takhpus
   - homjpus is yayqpus
   - tumcpus is babcpus and virvpus
   - yayqpus is renzpus
   - sumypus is babcpus
   - sumypus is virvpus
   - tumcpus is sumypus
   - sumypus is babcpus and virvpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus (第5层)
   节点Coverage: 16/16 = 100.00%
   前提条件Coverage: 10/10 = 100.00%
   各推理层点亮比例:
     第1层: 7/7 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/16 = 0.00%
   可推导节点: 16/16
   Strict Error Rate: 0/16 = 0.00%
   严格有效节点: 16/16

   详细分析:
     完美推理: 16 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 25/50
================================================================================
记录索引: 24
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_24.json
✅ 使用缓存结果:
   - 句子数: 89
   - 提取的语句数: 104
   - 初始条件数: 18

=== Statement提取完成 ===
总句子数: 89
成功提取: 89
失败提取: 0
总statements数: 104

=== 开始清洗Statement格式 ===
原始statements数: 104
清洗后statements数: 98
过滤掉的statements数: 6
清洗后的statements:
  1. [planning] x is babcpus and babrpus
  2. [actual] xivkpus is babrpus and tibypus and yifppus
  3. [actual] varbpus is wayypus
  4. [actual] qewjpus is baslpus and devnpus
  5. [actual] wayypus is qannpus
  6. [actual] yebwpus is boxvpus
  7. [actual] baslpus is varbpus
  8. [actual] xocrpus is xivkpus
  9. [actual] kuxrpus is babcpus and kazvpus
  10. [actual] jeqspus is foympus
  11. [actual] x is yebwpus and gimypus
  12. [actual] yinvpus is nifqpus
  13. [actual] x is qewjpus
  14. [actual] boxvpus is jeqspus
  15. [actual] foympus is lurrpus and nixwpus
  16. [actual] lurrpus is xocrpus
  17. [actual] qannpus is yinvpus
  18. [actual] nifqpus is fitcpus
  19. [actual] fitcpus is kuxrpus
  20. [planning] x is babcpus and babrpus
  21. [actual] x is yebwpus and gimypus
  22. [actual] x is qewjpus
  23. [actual] x is yebwpus and gimypus
  24. [actual] x is qewjpus
  25. [actual] qewjpus is baslpus and devnpus
  26. [actual] baslpus is varbpus
  27. [actual] varbpus is wayypus
  28. [actual] wayypus is qannpus
  29. [actual] qannpus is yinvpus
  30. [actual] yinvpus is nifqpus
  31. [actual] nifqpus is fitcpus
  32. [actual] fitcpus is kuxrpus
  33. [actual] kuxrpus is babcpus and kazvpus
  34. [actual] x is qewjpus
  35. [actual] qewjpus is kuxrpus
  36. [actual] kuxrpus is babcpus
  37. [planning] x is babcpus
  38. [actual] x is qewjpus
  39. [actual] qewjpus is baslpus
  40. [planning] x is baslpus
  41. [actual] baslpus is varbpus
  42. [planning] x is varbpus
  43. [actual] varbpus is wayypus
  44. [planning] x is wayypus
  45. [actual] wayypus is qannpus
  46. [planning] x is qannpus
  47. [actual] qannpus is yinvpus
  48. [actual] x is yinvpus
  49. [actual] yinvpus is nifqpus
  50. [planning] x is nifqpus
  51. [actual] nifqpus is fitcpus
  52. [actual] x is fitcpus
  53. [actual] fitcpus is kuxrpus
  54. [planning] x is kuxrpus
  55. [actual] kuxrpus is babcpus and kazvpus
  56. [actual] kuxrpus is babcpus
  57. [actual] x is kuxrpus
  58. [actual] x is babcpus
  59. [actual] x is babcpus
  60. [planning] x is babrpus
  61. [actual] xivkpus is babrpus and tibypus and yifppus
  62. [planning] x is xivkpus or babrpus
  63. [actual] x is kuxrpus
  64. [actual] kuxrpus is babcpus and kazvpus
  65. [planning] x is babrpus
  66. [actual] x is yebwpus and gimypus
  67. [actual] x is yebwpus
  68. [actual] yebwpus is boxvpus
  69. [actual] boxvpus is jeqspus
  70. [actual] jeqspus is foympus
  71. [actual] foympus is lurrpus and nixwpus
  72. [actual] lurrpus is xocrpus
  73. [actual] xocrpus is xivkpus
  74. [actual] xivkpus is babrpus and tibypus and yifppus
  75. [actual] x is yebwpus
  76. [actual] xivkpus is babrpus
  77. [actual] x is yebwpus
  78. [actual] yebwpus is boxvpus
  79. [actual] x is boxvpus
  80. [actual] boxvpus is jeqspus
  81. [actual] x is jeqspus
  82. [actual] jeqspus is foympus
  83. [actual] x is foympus
  84. [actual] foympus is lurrpus and nixwpus
  85. [planning] x is lurrpus and nixwpus
  86. [actual] lurrpus is xocrpus
  87. [actual] x is xocrpus
  88. [actual] xocrpus is xivkpus
  89. [actual] x is xivkpus
  90. [actual] xivkpus is babrpus
  91. [actual] x is babrpus
  92. [actual] x is babrpus
  93. [actual] x is babcpus
  94. [actual] x is babrpus
  95. [actual] x is babcpus and babrpus
  96. [planning] x is babcpus and babrpus
  97. [actual] x is yebwpus and gimypus
  98. [actual] x is qewjpus

=== 开始标准化和解析节点 ===
清洗后statements数: 98
标准化后节点数: 98
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  2. [actual] xivkpus → babrpus and tibypus and yifppus (原始: xivkpus is babrpus and tibypus and yifppus)
  3. [actual] varbpus → wayypus (原始: varbpus is wayypus)
  4. [actual] qewjpus → baslpus and devnpus (原始: qewjpus is baslpus and devnpus)
  5. [actual] wayypus → qannpus (原始: wayypus is qannpus)
  6. [actual] yebwpus → boxvpus (原始: yebwpus is boxvpus)
  7. [actual] baslpus → varbpus (原始: baslpus is varbpus)
  8. [actual] xocrpus → xivkpus (原始: xocrpus is xivkpus)
  9. [actual] kuxrpus → babcpus and kazvpus (原始: kuxrpus is babcpus and kazvpus)
  10. [actual] jeqspus → foympus (原始: jeqspus is foympus)
  11. [actual] x → yebwpus and gimypus (原始: x is yebwpus and gimypus)
  12. [actual] yinvpus → nifqpus (原始: yinvpus is nifqpus)
  13. [actual] x → qewjpus (原始: x is qewjpus)
  14. [actual] boxvpus → jeqspus (原始: boxvpus is jeqspus)
  15. [actual] foympus → lurrpus and nixwpus (原始: foympus is lurrpus and nixwpus)
  16. [actual] lurrpus → xocrpus (原始: lurrpus is xocrpus)
  17. [actual] qannpus → yinvpus (原始: qannpus is yinvpus)
  18. [actual] nifqpus → fitcpus (原始: nifqpus is fitcpus)
  19. [actual] fitcpus → kuxrpus (原始: fitcpus is kuxrpus)
  20. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  21. [actual] x → yebwpus and gimypus (原始: x is yebwpus and gimypus)
  22. [actual] x → qewjpus (原始: x is qewjpus)
  23. [actual] x → yebwpus and gimypus (原始: x is yebwpus and gimypus)
  24. [actual] x → qewjpus (原始: x is qewjpus)
  25. [actual] qewjpus → baslpus and devnpus (原始: qewjpus is baslpus and devnpus)
  26. [actual] baslpus → varbpus (原始: baslpus is varbpus)
  27. [actual] varbpus → wayypus (原始: varbpus is wayypus)
  28. [actual] wayypus → qannpus (原始: wayypus is qannpus)
  29. [actual] qannpus → yinvpus (原始: qannpus is yinvpus)
  30. [actual] yinvpus → nifqpus (原始: yinvpus is nifqpus)
  31. [actual] nifqpus → fitcpus (原始: nifqpus is fitcpus)
  32. [actual] fitcpus → kuxrpus (原始: fitcpus is kuxrpus)
  33. [actual] kuxrpus → babcpus and kazvpus (原始: kuxrpus is babcpus and kazvpus)
  34. [actual] x → qewjpus (原始: x is qewjpus)
  35. [actual] qewjpus → kuxrpus (原始: qewjpus is kuxrpus)
  36. [actual] kuxrpus → babcpus (原始: kuxrpus is babcpus)
  37. [planning] x → babcpus (原始: x is babcpus)
  38. [actual] x → qewjpus (原始: x is qewjpus)
  39. [actual] qewjpus → baslpus (原始: qewjpus is baslpus)
  40. [planning] x → baslpus (原始: x is baslpus)
  41. [actual] baslpus → varbpus (原始: baslpus is varbpus)
  42. [planning] x → varbpus (原始: x is varbpus)
  43. [actual] varbpus → wayypus (原始: varbpus is wayypus)
  44. [planning] x → wayypus (原始: x is wayypus)
  45. [actual] wayypus → qannpus (原始: wayypus is qannpus)
  46. [planning] x → qannpus (原始: x is qannpus)
  47. [actual] qannpus → yinvpus (原始: qannpus is yinvpus)
  48. [actual] x → yinvpus (原始: x is yinvpus)
  49. [actual] yinvpus → nifqpus (原始: yinvpus is nifqpus)
  50. [planning] x → nifqpus (原始: x is nifqpus)
  51. [actual] nifqpus → fitcpus (原始: nifqpus is fitcpus)
  52. [actual] x → fitcpus (原始: x is fitcpus)
  53. [actual] fitcpus → kuxrpus (原始: fitcpus is kuxrpus)
  54. [planning] x → kuxrpus (原始: x is kuxrpus)
  55. [actual] kuxrpus → babcpus and kazvpus (原始: kuxrpus is babcpus and kazvpus)
  56. [actual] kuxrpus → babcpus (原始: kuxrpus is babcpus)
  57. [actual] x → kuxrpus (原始: x is kuxrpus)
  58. [actual] x → babcpus (原始: x is babcpus)
  59. [actual] x → babcpus (原始: x is babcpus)
  60. [planning] x → babrpus (原始: x is babrpus)
  61. [actual] xivkpus → babrpus and tibypus and yifppus (原始: xivkpus is babrpus and tibypus and yifppus)
  62. [planning] x → xivkpus or babrpus (原始: x is xivkpus or babrpus)
  63. [actual] x → kuxrpus (原始: x is kuxrpus)
  64. [actual] kuxrpus → babcpus and kazvpus (原始: kuxrpus is babcpus and kazvpus)
  65. [planning] x → babrpus (原始: x is babrpus)
  66. [actual] x → yebwpus and gimypus (原始: x is yebwpus and gimypus)
  67. [actual] x → yebwpus (原始: x is yebwpus)
  68. [actual] yebwpus → boxvpus (原始: yebwpus is boxvpus)
  69. [actual] boxvpus → jeqspus (原始: boxvpus is jeqspus)
  70. [actual] jeqspus → foympus (原始: jeqspus is foympus)
  71. [actual] foympus → lurrpus and nixwpus (原始: foympus is lurrpus and nixwpus)
  72. [actual] lurrpus → xocrpus (原始: lurrpus is xocrpus)
  73. [actual] xocrpus → xivkpus (原始: xocrpus is xivkpus)
  74. [actual] xivkpus → babrpus and tibypus and yifppus (原始: xivkpus is babrpus and tibypus and yifppus)
  75. [actual] x → yebwpus (原始: x is yebwpus)
  76. [actual] xivkpus → babrpus (原始: xivkpus is babrpus)
  77. [actual] x → yebwpus (原始: x is yebwpus)
  78. [actual] yebwpus → boxvpus (原始: yebwpus is boxvpus)
  79. [actual] x → boxvpus (原始: x is boxvpus)
  80. [actual] boxvpus → jeqspus (原始: boxvpus is jeqspus)
  81. [actual] x → jeqspus (原始: x is jeqspus)
  82. [actual] jeqspus → foympus (原始: jeqspus is foympus)
  83. [actual] x → foympus (原始: x is foympus)
  84. [actual] foympus → lurrpus and nixwpus (原始: foympus is lurrpus and nixwpus)
  85. [planning] x → lurrpus and nixwpus (原始: x is lurrpus and nixwpus)
  86. [actual] lurrpus → xocrpus (原始: lurrpus is xocrpus)
  87. [actual] x → xocrpus (原始: x is xocrpus)
  88. [actual] xocrpus → xivkpus (原始: xocrpus is xivkpus)
  89. [actual] x → xivkpus (原始: x is xivkpus)
  90. [actual] xivkpus → babrpus (原始: xivkpus is babrpus)
  91. [actual] x → babrpus (原始: x is babrpus)
  92. [actual] x → babrpus (原始: x is babrpus)
  93. [actual] x → babcpus (原始: x is babcpus)
  94. [actual] x → babrpus (原始: x is babrpus)
  95. [actual] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  96. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  97. [actual] x → yebwpus and gimypus (原始: x is yebwpus and gimypus)
  98. [actual] x → qewjpus (原始: x is qewjpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 23
[后处理] 加载LoG图，包含 23 个节点
  LoG节点 0: x is babcpus and babrpus (规则: CI, 深度: 1)
  LoG节点 1: x is babcpus (规则: MP, 深度: 2)
  LoG节点 2: x is babrpus (规则: MP, 深度: 2)
  LoG节点 3: x is yinvpus (规则: MP, 深度: 3)
  LoG节点 4: yinvpus is babcpus (规则: CE, 深度: 3)
  LoG节点 5: x is lurrpus (规则: MP, 深度: 3)
  LoG节点 6: lurrpus is babrpus (规则: CE, 深度: 3)
  LoG节点 7: x is baslpus (规则: CE, 深度: 4)
  LoG节点 8: baslpus is yinvpus (规则: MP, 深度: 4)
  LoG节点 9: yinvpus is babcpus and kazvpus (规则: MP, 深度: 4)
  LoG节点 10: x is jeqspus (规则: MP, 深度: 4)
  LoG节点 11: jeqspus is lurrpus (规则: CE, 深度: 4)
  LoG节点 12: lurrpus is babrpus and tibypus (规则: MP, 深度: 4)
  LoG节点 13: x is baslpus and devnpus (规则: MP, 深度: 5)
  LoG节点 14: baslpus is wayypus (规则: MP, 深度: 5)
  LoG节点 15: wayypus is yinvpus (规则: MP, 深度: 5)
  LoG节点 16: yinvpus is fitcpus (规则: MP, 深度: 5)
  LoG节点 17: fitcpus is babcpus and kazvpus (规则: MP, 深度: 5)
  LoG节点 18: x is yebwpus (规则: CE, 深度: 5)
  LoG节点 19: yebwpus is jeqspus (规则: MP, 深度: 5)
  LoG节点 20: jeqspus is lurrpus and nixwpus (规则: MP, 深度: 5)
  LoG节点 21: lurrpus is xivkpus (规则: MP, 深度: 5)
  LoG节点 22: xivkpus is babrpus and tibypus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 98
   - 初始条件数: 18
   - LoG图节点数: 23

📋 初始条件列表:
    1. xivkpus is babrpus and tibypus and yifppus
    2. varbpus is wayypus
    3. qewjpus is baslpus and devnpus
    4. wayypus is qannpus
    5. yebwpus is boxvpus
    6. baslpus is varbpus
    7. xocrpus is xivkpus
    8. kuxrpus is babcpus and kazvpus
    9. jeqspus is foympus
   10. x is yebwpus and gimypus
   11. yinvpus is nifqpus
   12. x is qewjpus
   13. boxvpus is jeqspus
   14. foympus is lurrpus and nixwpus
   15. lurrpus is xocrpus
   16. qannpus is yinvpus
   17. nifqpus is fitcpus
   18. fitcpus is kuxrpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 18 个前提节点

🔍 开始处理actual节点...

   节点 1: xivkpus is babrpus and tibypus and yifppus
      ↻ 重复节点，计数: 2

   节点 2: varbpus is wayypus
      ↻ 重复节点，计数: 2

   节点 3: qewjpus is baslpus and devnpus
      ↻ 重复节点，计数: 2

   节点 4: wayypus is qannpus
      ↻ 重复节点，计数: 2

   节点 5: yebwpus is boxvpus
      ↻ 重复节点，计数: 2

   节点 6: baslpus is varbpus
      ↻ 重复节点，计数: 2

   节点 7: xocrpus is xivkpus
      ↻ 重复节点，计数: 2

   节点 8: kuxrpus is babcpus and kazvpus
      ↻ 重复节点，计数: 2

   节点 9: jeqspus is foympus
      ↻ 重复节点，计数: 2

   节点 10: x is yebwpus and gimypus
      ↻ 重复节点，计数: 2

   节点 11: yinvpus is nifqpus
      ↻ 重复节点，计数: 2

   节点 12: x is qewjpus
      ↻ 重复节点，计数: 2

   节点 13: boxvpus is jeqspus
      ↻ 重复节点，计数: 2

   节点 14: foympus is lurrpus and nixwpus
      ↻ 重复节点，计数: 2

   节点 15: lurrpus is xocrpus
      ↻ 重复节点，计数: 2

   节点 16: qannpus is yinvpus
      ↻ 重复节点，计数: 2

   节点 17: nifqpus is fitcpus
      ↻ 重复节点，计数: 2

   节点 18: fitcpus is kuxrpus
      ↻ 重复节点，计数: 2

   节点 19: x is yebwpus and gimypus
      ↻ 重复节点，计数: 3

   节点 20: x is qewjpus
      ↻ 重复节点，计数: 3

   节点 21: x is yebwpus and gimypus
      ↻ 重复节点，计数: 4

   节点 22: x is qewjpus
      ↻ 重复节点，计数: 4

   节点 23: qewjpus is baslpus and devnpus
      ↻ 重复节点，计数: 3

   节点 24: baslpus is varbpus
      ↻ 重复节点，计数: 3

   节点 25: varbpus is wayypus
      ↻ 重复节点，计数: 3

   节点 26: wayypus is qannpus
      ↻ 重复节点，计数: 3

   节点 27: qannpus is yinvpus
      ↻ 重复节点，计数: 3

   节点 28: yinvpus is nifqpus
      ↻ 重复节点，计数: 3

   节点 29: nifqpus is fitcpus
      ↻ 重复节点，计数: 3

   节点 30: fitcpus is kuxrpus
      ↻ 重复节点，计数: 3

   节点 31: kuxrpus is babcpus and kazvpus
      ↻ 重复节点，计数: 3

   节点 32: x is qewjpus
      ↻ 重复节点，计数: 5

   节点 33: qewjpus is kuxrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP+CE
      📋 推理路径: MP+CE规则: qewjpus is baslpus → baslpus is kuxrpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: qewjpus is baslpus and devnpus
  - 前提: baslpus is varbpus
  - 前提: varbpus is wayypus
  - 前提: wayypus is qannpus
  - 前提: qannpus is yinvpus
  - 前提: yinvpus is nifqpus
  - 前提: nifqpus is fitcpus
  - 前提: fitcpus is kuxrpus
  ✓ 点亮LoG节点: baslpus is yinvpus
[子树点亮]     └─ 点亮依赖节点: baslpus is wayypus (深度5)
[子树点亮]     └─ 点亮依赖节点: wayypus is yinvpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
  ✓ 点亮LoG节点: yinvpus is fitcpus
[后处理] 通过推理轨迹额外点亮了 2 个LoG节点

   节点 34: kuxrpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kuxrpus is babcpus and kazvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kuxrpus is babcpus and kazvpus

   节点 35: x is qewjpus
      ↻ 重复节点，计数: 6

   节点 36: qewjpus is baslpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qewjpus is baslpus and devnpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qewjpus is baslpus and devnpus

   节点 37: baslpus is varbpus
      ↻ 重复节点，计数: 4

   节点 38: varbpus is wayypus
      ↻ 重复节点，计数: 4

   节点 39: wayypus is qannpus
      ↻ 重复节点，计数: 4

   节点 40: qannpus is yinvpus
      ↻ 重复节点，计数: 4

   节点 41: x is yinvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is yinvpus
[子树点亮]     └─ 点亮依赖节点: x is baslpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is baslpus and devnpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 42: yinvpus is nifqpus
      ↻ 重复节点，计数: 4

   节点 43: nifqpus is fitcpus
      ↻ 重复节点，计数: 4

   节点 44: x is fitcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qewjpus → qewjpus is fitcpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is qewjpus
  - 前提: qewjpus is baslpus
  - 前提: baslpus is varbpus
  - 前提: varbpus is wayypus
  - 前提: wayypus is qannpus
  - 前提: qannpus is yinvpus
  - 前提: yinvpus is nifqpus
  - 前提: nifqpus is fitcpus

   节点 45: fitcpus is kuxrpus
      ↻ 重复节点，计数: 4

   节点 46: kuxrpus is babcpus and kazvpus
      ↻ 重复节点，计数: 4

   节点 47: kuxrpus is babcpus
      ↻ 重复节点，计数: 2

   节点 48: x is kuxrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qewjpus → qewjpus is kuxrpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is qewjpus
  - 前提: qewjpus is kuxrpus

   节点 49: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: yinvpus is babcpus (深度3)
[子树点亮]     └─ 点亮依赖节点: yinvpus is babcpus and kazvpus (深度4)
[子树点亮]     └─ 点亮依赖节点: fitcpus is babcpus and kazvpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 50: x is babcpus
      ↻ 重复节点，计数: 2

   节点 51: xivkpus is babrpus and tibypus and yifppus
      ↻ 重复节点，计数: 3

   节点 52: x is kuxrpus
      ↻ 重复节点，计数: 2

   节点 53: kuxrpus is babcpus and kazvpus
      ↻ 重复节点，计数: 5

   节点 54: x is yebwpus and gimypus
      ↻ 重复节点，计数: 5

   节点 55: x is yebwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is yebwpus
      ✅ 验证成功 + LoG匹配

   节点 56: yebwpus is boxvpus
      ↻ 重复节点，计数: 3

   节点 57: boxvpus is jeqspus
      ↻ 重复节点，计数: 3

   节点 58: jeqspus is foympus
      ↻ 重复节点，计数: 3

   节点 59: foympus is lurrpus and nixwpus
      ↻ 重复节点，计数: 3

   节点 60: lurrpus is xocrpus
      ↻ 重复节点，计数: 3

   节点 61: xocrpus is xivkpus
      ↻ 重复节点，计数: 3

   节点 62: xivkpus is babrpus and tibypus and yifppus
      ↻ 重复节点，计数: 4

   节点 63: x is yebwpus
      ↻ 重复节点，计数: 2

   节点 64: xivkpus is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: xivkpus is babrpus and tibypus and yifppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: xivkpus is babrpus and tibypus and yifppus
  ✓ 点亮LoG节点: xivkpus is babrpus and tibypus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 65: x is yebwpus
      ↻ 重复节点，计数: 3

   节点 66: yebwpus is boxvpus
      ↻ 重复节点，计数: 4

   节点 67: x is boxvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is yebwpus → yebwpus is boxvpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is yebwpus
  - 前提: yebwpus is boxvpus

   节点 68: boxvpus is jeqspus
      ↻ 重复节点，计数: 4

   节点 69: x is jeqspus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is jeqspus
[子树点亮]     └─ 点亮依赖节点: yebwpus is jeqspus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 70: jeqspus is foympus
      ↻ 重复节点，计数: 4

   节点 71: x is foympus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is yebwpus → yebwpus is foympus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is yebwpus
  - 前提: yebwpus is boxvpus
  - 前提: boxvpus is jeqspus
  - 前提: jeqspus is foympus

   节点 72: foympus is lurrpus and nixwpus
      ↻ 重复节点，计数: 4

   节点 73: lurrpus is xocrpus
      ↻ 重复节点，计数: 4

   节点 74: x is xocrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is yebwpus → yebwpus is xocrpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is yebwpus
  - 前提: yebwpus is boxvpus
  - 前提: boxvpus is jeqspus
  - 前提: jeqspus is foympus
  - 前提: foympus is lurrpus and nixwpus
  - 前提: lurrpus is xocrpus
  ✓ 点亮LoG节点: x is lurrpus
[子树点亮]     └─ 点亮依赖节点: jeqspus is lurrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: jeqspus is lurrpus and nixwpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 75: xocrpus is xivkpus
      ↻ 重复节点，计数: 4

   节点 76: x is xivkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is yebwpus → yebwpus is xivkpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is yebwpus
  - 前提: yebwpus is boxvpus
  - 前提: boxvpus is jeqspus
  - 前提: jeqspus is foympus
  - 前提: foympus is lurrpus and nixwpus
  - 前提: lurrpus is xocrpus
  - 前提: xocrpus is xivkpus
  ✓ 点亮LoG节点: lurrpus is xivkpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 77: xivkpus is babrpus
      ↻ 重复节点，计数: 2

   节点 78: x is babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babrpus
[子树点亮]     └─ 点亮依赖节点: lurrpus is babrpus (深度3)
[子树点亮]     └─ 点亮依赖节点: lurrpus is babrpus and tibypus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 79: x is babrpus
      ↻ 重复节点，计数: 2

   节点 80: x is babcpus
      ↻ 重复节点，计数: 3

   节点 81: x is babrpus
      ↻ 重复节点，计数: 3

   节点 82: x is babcpus and babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus and babrpus
      ✅ 验证成功 + LoG匹配

   节点 83: x is yebwpus and gimypus
      ↻ 重复节点，计数: 6

   节点 84: x is qewjpus
      ↻ 重复节点，计数: 7

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 84
   - 新增节点: 16
   - 更新已存在节点: 68
   - 点亮的LoG节点: 23

🎯 推理质量统计:
   - 完美推理: 16 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 23节点, 18前提, 复杂度1-18

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 34
   - 前提节点: 18
   - 推理节点: 16
   - 幻觉节点: 0
   - 点亮LoG节点: 23

✅ 推理节点详情:
   🟢 qewjpus is kuxrpus (出现1次, 质量:perfect)
   🟢 kuxrpus is babcpus (出现2次, 质量:perfect)
   🟢 qewjpus is baslpus (出现1次, 质量:perfect)
   🟢 x is yinvpus (出现1次, 质量:perfect)
   🟢 x is fitcpus (出现1次, 质量:perfect)
   🟢 x is kuxrpus (出现2次, 质量:perfect)
   🟢 x is babcpus (出现3次, 质量:perfect)
   🟢 x is yebwpus (出现3次, 质量:perfect)
   🟢 xivkpus is babrpus (出现2次, 质量:perfect)
   🟢 x is boxvpus (出现1次, 质量:perfect)
   🟢 x is jeqspus (出现1次, 质量:perfect)
   🟢 x is foympus (出现1次, 质量:perfect)
   🟢 x is xocrpus (出现1次, 质量:perfect)
   🟢 x is xivkpus (出现1次, 质量:perfect)
   🟢 x is babrpus (出现3次, 质量:perfect)
   🟢 x is babcpus and babrpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - jeqspus is lurrpus and nixwpus
   - xivkpus is babrpus and tibypus
   - x is yinvpus
   - x is yebwpus
   - jeqspus is lurrpus
   - lurrpus is babrpus
   - x is lurrpus
   - x is jeqspus
   - yinvpus is babcpus
   - baslpus is yinvpus
   - fitcpus is babcpus and kazvpus
   - yebwpus is jeqspus
   - yinvpus is babcpus and kazvpus
   - wayypus is yinvpus
   - lurrpus is xivkpus
   - x is babcpus
   - yinvpus is fitcpus
   - x is baslpus
   - x is baslpus and devnpus
   - baslpus is wayypus
   - lurrpus is babrpus and tibypus
   - x is babrpus
   - x is babcpus and babrpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus and babrpus (第5层)
   节点Coverage: 23/23 = 100.00%
   前提条件Coverage: 18/18 = 100.00%
   各推理层点亮比例:
     第1层: 10/10 = 100.00%
     第2层: 6/6 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/16 = 0.00%
   可推导节点: 16/16
   Strict Error Rate: 0/16 = 0.00%
   严格有效节点: 16/16

   详细分析:
     完美推理: 16 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 26/50
================================================================================
记录索引: 25
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_25.json
✅ 使用缓存结果:
   - 句子数: 97
   - 提取的语句数: 107
   - 初始条件数: 14

=== Statement提取完成 ===
总句子数: 97
成功提取: 97
失败提取: 0
总statements数: 107

=== 开始清洗Statement格式 ===
原始statements数: 107
清洗后statements数: 97
过滤掉的statements数: 10
清洗后的statements:
  1. [planning] x is babcpus or babrpus
  2. [actual] x is babgpus
  3. [actual] lerwpus is yexbpus
  4. [actual] yexbpus is lerwpus and pazjpus
  5. [actual] dufxpus is qadrpus and satjpus
  6. [actual] qadrpus is kuyxpus
  7. [actual] pudzpus is babcpus
  8. [actual] kuyxpus is xalppus
  9. [actual] xalppus is fawjpus
  10. [actual] bibjpus is dufxpus
  11. [actual] fawjpus is yivkpus
  12. [actual] yivkpus is pudzpus
  13. [actual] x is jucrpus and kodkpus
  14. [actual] nevdpus is saxzpus
  15. [actual] saxzpus is bibjpus
  16. [actual] bibjpus is haywpus
  17. [actual] jucrpus is nevdpus
  18. [actual] jucrpus is mudfpus
  19. [planning] x is babcpus
  20. [planning] x is related to pudzpus
  21. [actual] pudzpus is babcpus
  22. [actual] x is jucrpus and kodkpus
  23. [actual] jucrpus is nevdpus and mudfpus
  24. [actual] jucrpus is nevdpus
  25. [actual] nevdpus is saxzpus
  26. [actual] saxzpus is bibjpus
  27. [actual] bibjpus is dufxpus
  28. [actual] bibjpus is dufxpus
  29. [actual] bibjpus is haywpus
  30. [actual] dufxpus is qadrpus and satjpus
  31. [actual] qadrpus is kuyxpus
  32. [actual] kuyxpus is xalppus
  33. [actual] xalppus is fawjpus
  34. [actual] fawjpus is yivkpus
  35. [actual] yivkpus is pudzpus
  36. [actual] pudzpus is babcpus
  37. [planning] x is babcpus
  38. [planning] x is babcpus or babrpus
  39. [actual] x is babcpus
  40. [actual] x is jucrpus
  41. [actual] jucrpus is nevdpus
  42. [actual] nevdpus is saxzpus
  43. [actual] pudzpus is babcpus
  44. [planning] x is babcpus
  45. [planning] x is babcpus
  46. [planning] x is babcpus or babrpus
  47. [actual] x is babcpus
  48. [actual] x is jucrpus
  49. [actual] x is kodkpus
  50. [planning] x is babcpus or babrpus
  51. [planning] x is babcpus
  52. [actual] x is babcpus
  53. [actual] x is jucrpus
  54. [actual] jucrpus is nevdpus
  55. [actual] nevdpus is saxzpus
  56. [actual] saxzpus is bibjpus
  57. [actual] bibjpus is dufxpus
  58. [actual] dufxpus is qadrpus
  59. [actual] dufxpus is qadrpus
  60. [actual] dufxpus is satjpus
  61. [actual] qadrpus is kuyxpus
  62. [actual] x is relmpus
  63. [actual] relmpus is babgpus
  64. [actual] x is babgpus
  65. [actual] kuyxpus is xalppus
  66. [actual] x is babgpus
  67. [actual] lerwpus is babgpus and rayspus
  68. [actual] x is relmpus and muqcpus
  69. [actual] x is babgpus
  70. [actual] x is relmpus
  71. [actual] relmpus is babgpus
  72. [actual] lerwpus is yexbpus
  73. [actual] yexbpus is lerwpus and pazjpus
  74. [planning] x is babgpus
  75. [planning] x is relmpus
  76. [planning] x is babgpus
  77. [planning] x is babgpus and babkpus and babmpus
  78. [planning] x is relmpus
  79. [planning] x is babgpus
  80. [actual] xalppus is fawjpus
  81. [actual] fawjpus is yivkpus
  82. [actual] yivkpus is pudzpus
  83. [actual] pudzpus is babcpus
  84. [actual] x is relmpus
  85. [actual] relmpus is babgpus
  86. [actual] x is babgpus
  87. [planning] x is babgpus
  88. [actual] x is babcpus
  89. [planning] x is babcpus or babrpus
  90. [actual] x is babcpus
  91. [planning] x is babcpus or babrpus
  92. [planning] x is babcpus
  93. [planning] x is babrpus
  94. [planning] x is babcpus
  95. [actual] jucrpus is mudfpus
  96. [planning] mudfpus is babcpus
  97. [planning] x is kodkpus

=== 开始标准化和解析节点 ===
清洗后statements数: 97
标准化后节点数: 96
过滤掉的无效实体数: 1
标准化后的节点:
  1. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  2. [actual] x → babgpus (原始: x is babgpus)
  3. [actual] lerwpus → yexbpus (原始: lerwpus is yexbpus)
  4. [actual] yexbpus → lerwpus and pazjpus (原始: yexbpus is lerwpus and pazjpus)
  5. [actual] dufxpus → qadrpus and satjpus (原始: dufxpus is qadrpus and satjpus)
  6. [actual] qadrpus → kuyxpus (原始: qadrpus is kuyxpus)
  7. [actual] pudzpus → babcpus (原始: pudzpus is babcpus)
  8. [actual] kuyxpus → xalppus (原始: kuyxpus is xalppus)
  9. [actual] xalppus → fawjpus (原始: xalppus is fawjpus)
  10. [actual] bibjpus → dufxpus (原始: bibjpus is dufxpus)
  11. [actual] fawjpus → yivkpus (原始: fawjpus is yivkpus)
  12. [actual] yivkpus → pudzpus (原始: yivkpus is pudzpus)
  13. [actual] x → jucrpus and kodkpus (原始: x is jucrpus and kodkpus)
  14. [actual] nevdpus → saxzpus (原始: nevdpus is saxzpus)
  15. [actual] saxzpus → bibjpus (原始: saxzpus is bibjpus)
  16. [actual] bibjpus → haywpus (原始: bibjpus is haywpus)
  17. [actual] jucrpus → nevdpus (原始: jucrpus is nevdpus)
  18. [actual] jucrpus → mudfpus (原始: jucrpus is mudfpus)
  19. [planning] x → babcpus (原始: x is babcpus)
  20. [actual] pudzpus → babcpus (原始: pudzpus is babcpus)
  21. [actual] x → jucrpus and kodkpus (原始: x is jucrpus and kodkpus)
  22. [actual] jucrpus → nevdpus and mudfpus (原始: jucrpus is nevdpus and mudfpus)
  23. [actual] jucrpus → nevdpus (原始: jucrpus is nevdpus)
  24. [actual] nevdpus → saxzpus (原始: nevdpus is saxzpus)
  25. [actual] saxzpus → bibjpus (原始: saxzpus is bibjpus)
  26. [actual] bibjpus → dufxpus (原始: bibjpus is dufxpus)
  27. [actual] bibjpus → dufxpus (原始: bibjpus is dufxpus)
  28. [actual] bibjpus → haywpus (原始: bibjpus is haywpus)
  29. [actual] dufxpus → qadrpus and satjpus (原始: dufxpus is qadrpus and satjpus)
  30. [actual] qadrpus → kuyxpus (原始: qadrpus is kuyxpus)
  31. [actual] kuyxpus → xalppus (原始: kuyxpus is xalppus)
  32. [actual] xalppus → fawjpus (原始: xalppus is fawjpus)
  33. [actual] fawjpus → yivkpus (原始: fawjpus is yivkpus)
  34. [actual] yivkpus → pudzpus (原始: yivkpus is pudzpus)
  35. [actual] pudzpus → babcpus (原始: pudzpus is babcpus)
  36. [planning] x → babcpus (原始: x is babcpus)
  37. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  38. [actual] x → babcpus (原始: x is babcpus)
  39. [actual] x → jucrpus (原始: x is jucrpus)
  40. [actual] jucrpus → nevdpus (原始: jucrpus is nevdpus)
  41. [actual] nevdpus → saxzpus (原始: nevdpus is saxzpus)
  42. [actual] pudzpus → babcpus (原始: pudzpus is babcpus)
  43. [planning] x → babcpus (原始: x is babcpus)
  44. [planning] x → babcpus (原始: x is babcpus)
  45. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  46. [actual] x → babcpus (原始: x is babcpus)
  47. [actual] x → jucrpus (原始: x is jucrpus)
  48. [actual] x → kodkpus (原始: x is kodkpus)
  49. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  50. [planning] x → babcpus (原始: x is babcpus)
  51. [actual] x → babcpus (原始: x is babcpus)
  52. [actual] x → jucrpus (原始: x is jucrpus)
  53. [actual] jucrpus → nevdpus (原始: jucrpus is nevdpus)
  54. [actual] nevdpus → saxzpus (原始: nevdpus is saxzpus)
  55. [actual] saxzpus → bibjpus (原始: saxzpus is bibjpus)
  56. [actual] bibjpus → dufxpus (原始: bibjpus is dufxpus)
  57. [actual] dufxpus → qadrpus (原始: dufxpus is qadrpus)
  58. [actual] dufxpus → qadrpus (原始: dufxpus is qadrpus)
  59. [actual] dufxpus → satjpus (原始: dufxpus is satjpus)
  60. [actual] qadrpus → kuyxpus (原始: qadrpus is kuyxpus)
  61. [actual] x → relmpus (原始: x is relmpus)
  62. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  63. [actual] x → babgpus (原始: x is babgpus)
  64. [actual] kuyxpus → xalppus (原始: kuyxpus is xalppus)
  65. [actual] x → babgpus (原始: x is babgpus)
  66. [actual] lerwpus → babgpus and rayspus (原始: lerwpus is babgpus and rayspus)
  67. [actual] x → relmpus and muqcpus (原始: x is relmpus and muqcpus)
  68. [actual] x → babgpus (原始: x is babgpus)
  69. [actual] x → relmpus (原始: x is relmpus)
  70. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  71. [actual] lerwpus → yexbpus (原始: lerwpus is yexbpus)
  72. [actual] yexbpus → lerwpus and pazjpus (原始: yexbpus is lerwpus and pazjpus)
  73. [planning] x → babgpus (原始: x is babgpus)
  74. [planning] x → relmpus (原始: x is relmpus)
  75. [planning] x → babgpus (原始: x is babgpus)
  76. [planning] x → babgpus and babkpus and babmpus (原始: x is babgpus and babkpus and babmpus)
  77. [planning] x → relmpus (原始: x is relmpus)
  78. [planning] x → babgpus (原始: x is babgpus)
  79. [actual] xalppus → fawjpus (原始: xalppus is fawjpus)
  80. [actual] fawjpus → yivkpus (原始: fawjpus is yivkpus)
  81. [actual] yivkpus → pudzpus (原始: yivkpus is pudzpus)
  82. [actual] pudzpus → babcpus (原始: pudzpus is babcpus)
  83. [actual] x → relmpus (原始: x is relmpus)
  84. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  85. [actual] x → babgpus (原始: x is babgpus)
  86. [planning] x → babgpus (原始: x is babgpus)
  87. [actual] x → babcpus (原始: x is babcpus)
  88. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  89. [actual] x → babcpus (原始: x is babcpus)
  90. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  91. [planning] x → babcpus (原始: x is babcpus)
  92. [planning] x → babrpus (原始: x is babrpus)
  93. [planning] x → babcpus (原始: x is babcpus)
  94. [actual] jucrpus → mudfpus (原始: jucrpus is mudfpus)
  95. [planning] mudfpus → babcpus (原始: mudfpus is babcpus)
  96. [planning] x → kodkpus (原始: x is kodkpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 18
[后处理] 加载LoG图，包含 18 个节点
  LoG节点 0: x is babcpus or babrpus (规则: MP, 深度: 1)
  LoG节点 1: x is dufxpus (规则: MP, 深度: 2)
  LoG节点 2: dufxpus is babcpus or babrpus (规则: DI, 深度: 2)
  LoG节点 3: x is nevdpus (规则: CE, 深度: 3)
  LoG节点 4: nevdpus is dufxpus (规则: CE, 深度: 3)
  LoG节点 5: dufxpus is babcpus (规则: MP, 深度: 3)
  LoG节点 6: x is nevdpus and mudfpus (规则: MP, 深度: 4)
  LoG节点 7: nevdpus is dufxpus and haywpus (规则: MP, 深度: 4)
  LoG节点 8: dufxpus is xalppus (规则: MP, 深度: 4)
  LoG节点 9: xalppus is babcpus (规则: MP, 深度: 4)
  LoG节点 10: x is jucrpus (规则: CE, 深度: 5)
  LoG节点 11: jucrpus is nevdpus and mudfpus (规则: CI, 深度: 5)
  LoG节点 12: nevdpus is bibjpus (规则: MP, 深度: 5)
  LoG节点 13: bibjpus is dufxpus and haywpus (规则: CI, 深度: 5)
  LoG节点 14: dufxpus is qadrpus (规则: CE, 深度: 5)
  LoG节点 15: qadrpus is xalppus (规则: MP, 深度: 5)
  LoG节点 16: xalppus is yivkpus (规则: MP, 深度: 5)
  LoG节点 17: yivkpus is babcpus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 96
   - 初始条件数: 14
   - LoG图节点数: 18

📋 初始条件列表:
    1. dufxpus is qadrpus and satjpus
    2. qadrpus is kuyxpus
    3. pudzpus is babcpus
    4. kuyxpus is xalppus
    5. xalppus is fawjpus
    6. bibjpus is dufxpus
    7. fawjpus is yivkpus
    8. yivkpus is pudzpus
    9. x is jucrpus and kodkpus
   10. nevdpus is saxzpus
   11. saxzpus is bibjpus
   12. bibjpus is haywpus
   13. jucrpus is nevdpus
   14. jucrpus is mudfpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 14 个前提节点

🔍 开始处理actual节点...

   节点 1: x is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 2: lerwpus is yexbpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 3: yexbpus is lerwpus and pazjpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 4: dufxpus is qadrpus and satjpus
      ↻ 重复节点，计数: 2

   节点 5: qadrpus is kuyxpus
      ↻ 重复节点，计数: 2

   节点 6: pudzpus is babcpus
      ↻ 重复节点，计数: 2

   节点 7: kuyxpus is xalppus
      ↻ 重复节点，计数: 2

   节点 8: xalppus is fawjpus
      ↻ 重复节点，计数: 2

   节点 9: bibjpus is dufxpus
      ↻ 重复节点，计数: 2

   节点 10: fawjpus is yivkpus
      ↻ 重复节点，计数: 2

   节点 11: yivkpus is pudzpus
      ↻ 重复节点，计数: 2

   节点 12: x is jucrpus and kodkpus
      ↻ 重复节点，计数: 2

   节点 13: nevdpus is saxzpus
      ↻ 重复节点，计数: 2

   节点 14: saxzpus is bibjpus
      ↻ 重复节点，计数: 2

   节点 15: bibjpus is haywpus
      ↻ 重复节点，计数: 2

   节点 16: jucrpus is nevdpus
      ↻ 重复节点，计数: 2

   节点 17: jucrpus is mudfpus
      ↻ 重复节点，计数: 2

   节点 18: pudzpus is babcpus
      ↻ 重复节点，计数: 3

   节点 19: x is jucrpus and kodkpus
      ↻ 重复节点，计数: 3

   节点 20: jucrpus is nevdpus and mudfpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: jucrpus is nevdpus and mudfpus
      ✅ 验证成功 + LoG匹配

   节点 21: jucrpus is nevdpus
      ↻ 重复节点，计数: 3

   节点 22: nevdpus is saxzpus
      ↻ 重复节点，计数: 3

   节点 23: saxzpus is bibjpus
      ↻ 重复节点，计数: 3

   节点 24: bibjpus is dufxpus
      ↻ 重复节点，计数: 3

   节点 25: bibjpus is dufxpus
      ↻ 重复节点，计数: 4

   节点 26: bibjpus is haywpus
      ↻ 重复节点，计数: 3

   节点 27: dufxpus is qadrpus and satjpus
      ↻ 重复节点，计数: 3

   节点 28: qadrpus is kuyxpus
      ↻ 重复节点，计数: 3

   节点 29: kuyxpus is xalppus
      ↻ 重复节点，计数: 3

   节点 30: xalppus is fawjpus
      ↻ 重复节点，计数: 3

   节点 31: fawjpus is yivkpus
      ↻ 重复节点，计数: 3

   节点 32: yivkpus is pudzpus
      ↻ 重复节点，计数: 3

   节点 33: pudzpus is babcpus
      ↻ 重复节点，计数: 4

   节点 34: x is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP+CE
      📋 推理路径: MP+CE规则: x is jucrpus → jucrpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 12 个前提条件:
  - 前提: x is jucrpus and kodkpus
  - 前提: jucrpus is nevdpus
  - 前提: nevdpus is saxzpus
  - 前提: saxzpus is bibjpus
  - 前提: bibjpus is dufxpus
  - 前提: dufxpus is qadrpus and satjpus
  - 前提: qadrpus is kuyxpus
  - 前提: kuyxpus is xalppus
  - 前提: xalppus is fawjpus
  - 前提: fawjpus is yivkpus
  - 前提: yivkpus is pudzpus
  - 前提: pudzpus is babcpus
  ✓ 点亮LoG节点: x is babcpus or babrpus
[子树点亮]     └─ 点亮依赖节点: x is dufxpus (深度2)
[子树点亮]     └─ 点亮依赖节点: dufxpus is babcpus or babrpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is nevdpus (深度3)
[子树点亮]     └─ 点亮依赖节点: nevdpus is dufxpus (深度3)
[子树点亮]     └─ 点亮依赖节点: dufxpus is babcpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is nevdpus and mudfpus (深度4)
[子树点亮]     └─ 点亮依赖节点: nevdpus is dufxpus and haywpus (深度4)
[子树点亮]     └─ 点亮依赖节点: dufxpus is xalppus (深度4)
[子树点亮]     └─ 点亮依赖节点: xalppus is babcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is jucrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: nevdpus is bibjpus (深度5)
[子树点亮]     └─ 点亮依赖节点: bibjpus is dufxpus and haywpus (深度5)
[子树点亮]     └─ 点亮依赖节点: dufxpus is qadrpus (深度5)
[子树点亮]     └─ 点亮依赖节点: qadrpus is xalppus (深度5)
[子树点亮]     └─ 点亮依赖节点: xalppus is yivkpus (深度5)
[子树点亮]     └─ 点亮依赖节点: yivkpus is babcpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 16 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 35: x is jucrpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 36: jucrpus is nevdpus
      ↻ 重复节点，计数: 4

   节点 37: nevdpus is saxzpus
      ↻ 重复节点，计数: 4

   节点 38: pudzpus is babcpus
      ↻ 重复节点，计数: 5

   节点 39: x is babcpus
      ↻ 重复节点，计数: 2

   节点 40: x is jucrpus
      ↻ 重复节点，计数: 2

   节点 41: x is kodkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is jucrpus and kodkpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is jucrpus and kodkpus

   节点 42: x is babcpus
      ↻ 重复节点，计数: 3

   节点 43: x is jucrpus
      ↻ 重复节点，计数: 3

   节点 44: jucrpus is nevdpus
      ↻ 重复节点，计数: 5

   节点 45: nevdpus is saxzpus
      ↻ 重复节点，计数: 5

   节点 46: saxzpus is bibjpus
      ↻ 重复节点，计数: 4

   节点 47: bibjpus is dufxpus
      ↻ 重复节点，计数: 5

   节点 48: dufxpus is qadrpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 49: dufxpus is qadrpus
      ↻ 重复节点，计数: 2

   节点 50: dufxpus is satjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: dufxpus is qadrpus and satjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: dufxpus is qadrpus and satjpus

   节点 51: qadrpus is kuyxpus
      ↻ 重复节点，计数: 4

   节点 52: x is relmpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 53: relmpus is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 54: x is babgpus
      ↻ 重复节点，计数: 2

   节点 55: kuyxpus is xalppus
      ↻ 重复节点，计数: 4

   节点 56: x is babgpus
      ↻ 重复节点，计数: 3

   节点 57: lerwpus is babgpus and rayspus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 58: x is relmpus and muqcpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 59: x is babgpus
      ↻ 重复节点，计数: 4

   节点 60: x is relmpus
      ↻ 重复节点，计数: 2

   节点 61: relmpus is babgpus
      ↻ 重复节点，计数: 2

   节点 62: lerwpus is yexbpus
      ↻ 重复节点，计数: 2

   节点 63: yexbpus is lerwpus and pazjpus
      ↻ 重复节点，计数: 2

   节点 64: xalppus is fawjpus
      ↻ 重复节点，计数: 4

   节点 65: fawjpus is yivkpus
      ↻ 重复节点，计数: 4

   节点 66: yivkpus is pudzpus
      ↻ 重复节点，计数: 4

   节点 67: pudzpus is babcpus
      ↻ 重复节点，计数: 6

   节点 68: x is relmpus
      ↻ 重复节点，计数: 3

   节点 69: relmpus is babgpus
      ↻ 重复节点，计数: 3

   节点 70: x is babgpus
      ↻ 重复节点，计数: 5

   节点 71: x is babcpus
      ↻ 重复节点，计数: 4

   节点 72: x is babcpus
      ↻ 重复节点，计数: 5

   节点 73: jucrpus is mudfpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 73
   - 新增节点: 13
   - 更新已存在节点: 60
   - 点亮的LoG节点: 18

🎯 推理质量统计:
   - 完美推理: 4 (节点正确 + 路径正确)
   - 部分推理: 6 (节点正确 + 路径部分错误)
   - 无效推理: 3 (节点错误或路径完全错误)
[LoG分析] LoG图: 18节点, 14前提, 复杂度1-14

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 27
   - 前提节点: 14
   - 推理节点: 6
   - 幻觉节点: 7
   - 点亮LoG节点: 18

❌ 幻觉节点详情:
   - x is babgpus (出现5次)
   - lerwpus is yexbpus (出现2次)
   - yexbpus is lerwpus and pazjpus (出现2次)
   - x is relmpus (出现3次)
   - relmpus is babgpus (出现3次)
   - lerwpus is babgpus and rayspus (出现1次)
   - x is relmpus and muqcpus (出现1次)

✅ 推理节点详情:
   🟢 jucrpus is nevdpus and mudfpus (出现1次, 质量:perfect)
   🟡 x is babcpus (出现5次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus', 'x is relmpus', 'x is relmpus and muqcpus']
   🟡 x is jucrpus (出现3次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus', 'x is relmpus', 'x is relmpus and muqcpus']
   🟡 x is kodkpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus', 'x is relmpus', 'x is relmpus and muqcpus']
   🟢 dufxpus is qadrpus (出现2次, 质量:perfect)
   🟢 dufxpus is satjpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - qadrpus is xalppus
   - dufxpus is xalppus
   - x is nevdpus
   - dufxpus is babcpus
   - x is dufxpus
   - x is babcpus or babrpus
   - jucrpus is nevdpus and mudfpus
   - dufxpus is qadrpus
   - nevdpus is dufxpus and haywpus
   - x is jucrpus
   - nevdpus is bibjpus
   - xalppus is yivkpus
   - dufxpus is babcpus or babrpus
   - nevdpus is dufxpus
   - bibjpus is dufxpus and haywpus
   - xalppus is babcpus
   - yivkpus is babcpus
   - x is nevdpus and mudfpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus or babrpus (第5层)
   节点Coverage: 18/18 = 100.00%
   前提条件Coverage: 14/14 = 100.00%
   各推理层点亮比例:
     第1层: 8/8 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 3/3 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 7/13 = 53.85%
   可推导节点: 6/13
   Strict Error Rate: 10/13 = 76.92%
   严格有效节点: 3/13

   详细分析:
     完美推理: 4 (30.77%)
     部分推理: 6 (46.15%)
     无效推理: 3 (23.08%)

================================================================================
处理记录 27/50
================================================================================
记录索引: 26
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_26.json
✅ 使用缓存结果:
   - 句子数: 63
   - 提取的语句数: 75
   - 初始条件数: 15

=== Statement提取完成 ===
总句子数: 63
成功提取: 63
失败提取: 0
总statements数: 75

=== 开始清洗Statement格式 ===
原始statements数: 75
清洗后statements数: 69
过滤掉的statements数: 6
清洗后的statements:
  1. [planning] x is babcpus or babrpus
  2. [actual] lerwpus is babgpus and rayspus
  3. [actual] x is relmpus and muqcpus
  4. [planning] x is babgpus
  5. [planning] x is babgpus
  6. [planning] lerwpus is yexbpus
  7. [planning] yexbpus is lerwpus and pazjpus
  8. [actual] x is relmpus
  9. [actual] relmpus is babgpus
  10. [actual] x is babgpus
  11. [planning] x is babgpus and babkpus and babmpus
  12. [planning] x is babgpus
  13. [actual] cohmpus is vivzpus
  14. [actual] vudlpus is kexqpus and mukwpus
  15. [actual] nutvpus is didjpus
  16. [actual] vuykpus is woyqpus and hagtpus and kuqhpus
  17. [actual] memmpus is vudlpus
  18. [actual] xebrpus is xadppus
  19. [actual] xadppus is babcpus and dupjpus
  20. [actual] vivzpus is vindpus
  21. [actual] dirjpus is nutvpus
  22. [actual] kexqpus is cohmpus
  23. [actual] vindpus is xebrpus
  24. [actual] woyqpus is dirjpus
  25. [actual] didjpus is memmpus
  26. [actual] x is wurlpus
  27. [actual] wurlpus is vuykpus
  28. [planning] x is babcpus
  29. [actual] x is wurlpus
  30. [actual] wurlpus is vuykpus
  31. [actual] x is vuykpus
  32. [actual] vuykpus is woyqpus and hagtpus and kuqhpus
  33. [actual] vuykpus is woyqpus
  34. [actual] vuykpus is hagtpus
  35. [actual] vuykpus is kuqhpus
  36. [actual] x is woyqpus and hagtpus and kuqhpus
  37. [actual] woyqpus is dirjpus
  38. [actual] x is dirjpus
  39. [actual] dirjpus is nutvpus
  40. [actual] x is nutvpus
  41. [actual] nutvpus is didjpus
  42. [actual] x is didjpus
  43. [actual] didjpus is memmpus
  44. [actual] x is memmpus
  45. [actual] memmpus is vudlpus
  46. [actual] x is vudlpus
  47. [actual] vudlpus is kexqpus and mukwpus
  48. [actual] x is kexqpus and mukwpus
  49. [actual] kexqpus is cohmpus
  50. [actual] x is cohmpus
  51. [actual] cohmpus is vivzpus
  52. [actual] x is vivzpus
  53. [actual] vivzpus is vindpus
  54. [actual] x is vindpus
  55. [actual] vindpus is xebrpus
  56. [actual] x is xebrpus
  57. [actual] xebrpus is xadppus
  58. [actual] x is xadppus
  59. [actual] xadppus is babcpus and dupjpus
  60. [actual] x is babcpus and dupjpus
  61. [actual] x is babcpus
  62. [planning] x is babcpus or babrpus
  63. [actual] x is babcpus
  64. [actual] x is babcpus
  65. [planning] x is at least one of them
  66. [actual] x is babcpus or babrpus
  67. [actual] x is babcpus
  68. [planning] x is babcpus or babrpus
  69. [actual] x is babcpus

=== 开始标准化和解析节点 ===
清洗后statements数: 69
标准化后节点数: 68
过滤掉的无效实体数: 1
标准化后的节点:
  1. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  2. [actual] lerwpus → babgpus and rayspus (原始: lerwpus is babgpus and rayspus)
  3. [actual] x → relmpus and muqcpus (原始: x is relmpus and muqcpus)
  4. [planning] x → babgpus (原始: x is babgpus)
  5. [planning] x → babgpus (原始: x is babgpus)
  6. [planning] lerwpus → yexbpus (原始: lerwpus is yexbpus)
  7. [planning] yexbpus → lerwpus and pazjpus (原始: yexbpus is lerwpus and pazjpus)
  8. [actual] x → relmpus (原始: x is relmpus)
  9. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  10. [actual] x → babgpus (原始: x is babgpus)
  11. [planning] x → babgpus and babkpus and babmpus (原始: x is babgpus and babkpus and babmpus)
  12. [planning] x → babgpus (原始: x is babgpus)
  13. [actual] cohmpus → vivzpus (原始: cohmpus is vivzpus)
  14. [actual] vudlpus → kexqpus and mukwpus (原始: vudlpus is kexqpus and mukwpus)
  15. [actual] nutvpus → didjpus (原始: nutvpus is didjpus)
  16. [actual] vuykpus → woyqpus and hagtpus and kuqhpus (原始: vuykpus is woyqpus and hagtpus and kuqhpus)
  17. [actual] memmpus → vudlpus (原始: memmpus is vudlpus)
  18. [actual] xebrpus → xadppus (原始: xebrpus is xadppus)
  19. [actual] xadppus → babcpus and dupjpus (原始: xadppus is babcpus and dupjpus)
  20. [actual] vivzpus → vindpus (原始: vivzpus is vindpus)
  21. [actual] dirjpus → nutvpus (原始: dirjpus is nutvpus)
  22. [actual] kexqpus → cohmpus (原始: kexqpus is cohmpus)
  23. [actual] vindpus → xebrpus (原始: vindpus is xebrpus)
  24. [actual] woyqpus → dirjpus (原始: woyqpus is dirjpus)
  25. [actual] didjpus → memmpus (原始: didjpus is memmpus)
  26. [actual] x → wurlpus (原始: x is wurlpus)
  27. [actual] wurlpus → vuykpus (原始: wurlpus is vuykpus)
  28. [planning] x → babcpus (原始: x is babcpus)
  29. [actual] x → wurlpus (原始: x is wurlpus)
  30. [actual] wurlpus → vuykpus (原始: wurlpus is vuykpus)
  31. [actual] x → vuykpus (原始: x is vuykpus)
  32. [actual] vuykpus → woyqpus and hagtpus and kuqhpus (原始: vuykpus is woyqpus and hagtpus and kuqhpus)
  33. [actual] vuykpus → woyqpus (原始: vuykpus is woyqpus)
  34. [actual] vuykpus → hagtpus (原始: vuykpus is hagtpus)
  35. [actual] vuykpus → kuqhpus (原始: vuykpus is kuqhpus)
  36. [actual] x → woyqpus and hagtpus and kuqhpus (原始: x is woyqpus and hagtpus and kuqhpus)
  37. [actual] woyqpus → dirjpus (原始: woyqpus is dirjpus)
  38. [actual] x → dirjpus (原始: x is dirjpus)
  39. [actual] dirjpus → nutvpus (原始: dirjpus is nutvpus)
  40. [actual] x → nutvpus (原始: x is nutvpus)
  41. [actual] nutvpus → didjpus (原始: nutvpus is didjpus)
  42. [actual] x → didjpus (原始: x is didjpus)
  43. [actual] didjpus → memmpus (原始: didjpus is memmpus)
  44. [actual] x → memmpus (原始: x is memmpus)
  45. [actual] memmpus → vudlpus (原始: memmpus is vudlpus)
  46. [actual] x → vudlpus (原始: x is vudlpus)
  47. [actual] vudlpus → kexqpus and mukwpus (原始: vudlpus is kexqpus and mukwpus)
  48. [actual] x → kexqpus and mukwpus (原始: x is kexqpus and mukwpus)
  49. [actual] kexqpus → cohmpus (原始: kexqpus is cohmpus)
  50. [actual] x → cohmpus (原始: x is cohmpus)
  51. [actual] cohmpus → vivzpus (原始: cohmpus is vivzpus)
  52. [actual] x → vivzpus (原始: x is vivzpus)
  53. [actual] vivzpus → vindpus (原始: vivzpus is vindpus)
  54. [actual] x → vindpus (原始: x is vindpus)
  55. [actual] vindpus → xebrpus (原始: vindpus is xebrpus)
  56. [actual] x → xebrpus (原始: x is xebrpus)
  57. [actual] xebrpus → xadppus (原始: xebrpus is xadppus)
  58. [actual] x → xadppus (原始: x is xadppus)
  59. [actual] xadppus → babcpus and dupjpus (原始: xadppus is babcpus and dupjpus)
  60. [actual] x → babcpus and dupjpus (原始: x is babcpus and dupjpus)
  61. [actual] x → babcpus (原始: x is babcpus)
  62. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  63. [actual] x → babcpus (原始: x is babcpus)
  64. [actual] x → babcpus (原始: x is babcpus)
  65. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  66. [actual] x → babcpus (原始: x is babcpus)
  67. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  68. [actual] x → babcpus (原始: x is babcpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 19
[后处理] 加载LoG图，包含 19 个节点
  LoG节点 0: x is babcpus or babrpus (规则: MP, 深度: 1)
  LoG节点 1: x is kexqpus (规则: MP, 深度: 2)
  LoG节点 2: kexqpus is babcpus or babrpus (规则: DI, 深度: 2)
  LoG节点 3: x is woyqpus (规则: CE, 深度: 3)
  LoG节点 4: woyqpus is kexqpus (规则: MP, 深度: 3)
  LoG节点 5: kexqpus is babcpus (规则: MP, 深度: 3)
  LoG节点 6: x is woyqpus and hagtpus (规则: MP, 深度: 4)
  LoG节点 7: woyqpus is memmpus (规则: MP, 深度: 4)
  LoG节点 8: memmpus is kexqpus (规则: CE, 深度: 4)
  LoG节点 9: kexqpus is xebrpus (规则: MP, 深度: 4)
  LoG节点 10: xebrpus is babcpus (规则: CE, 深度: 4)
  LoG节点 11: x is vuykpus (规则: MP, 深度: 5)
  LoG节点 12: vuykpus is woyqpus and hagtpus (规则: CE, 深度: 5)
  LoG节点 13: woyqpus is nutvpus (规则: MP, 深度: 5)
  LoG节点 14: nutvpus is memmpus (规则: MP, 深度: 5)
  LoG节点 15: memmpus is kexqpus and mukwpus (规则: MP, 深度: 5)
  LoG节点 16: kexqpus is vivzpus (规则: MP, 深度: 5)
  LoG节点 17: vivzpus is xebrpus (规则: MP, 深度: 5)
  LoG节点 18: xebrpus is babcpus and dupjpus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 68
   - 初始条件数: 15
   - LoG图节点数: 19

📋 初始条件列表:
    1. cohmpus is vivzpus
    2. vudlpus is kexqpus and mukwpus
    3. nutvpus is didjpus
    4. vuykpus is woyqpus and hagtpus and kuqhpus
    5. memmpus is vudlpus
    6. xebrpus is xadppus
    7. xadppus is babcpus and dupjpus
    8. vivzpus is vindpus
    9. dirjpus is nutvpus
   10. kexqpus is cohmpus
   11. vindpus is xebrpus
   12. woyqpus is dirjpus
   13. didjpus is memmpus
   14. x is wurlpus
   15. wurlpus is vuykpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 15 个前提节点

🔍 开始处理actual节点...

   节点 1: lerwpus is babgpus and rayspus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 2: x is relmpus and muqcpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 3: x is relmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is relmpus and muqcpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is relmpus and muqcpus

   节点 4: relmpus is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 5: x is babgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is relmpus → relmpus is babgpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is relmpus
  - 前提: relmpus is babgpus

   节点 6: cohmpus is vivzpus
      ↻ 重复节点，计数: 2

   节点 7: vudlpus is kexqpus and mukwpus
      ↻ 重复节点，计数: 2

   节点 8: nutvpus is didjpus
      ↻ 重复节点，计数: 2

   节点 9: vuykpus is woyqpus and hagtpus and kuqhpus
      ↻ 重复节点，计数: 2

   节点 10: memmpus is vudlpus
      ↻ 重复节点，计数: 2

   节点 11: xebrpus is xadppus
      ↻ 重复节点，计数: 2

   节点 12: xadppus is babcpus and dupjpus
      ↻ 重复节点，计数: 2

   节点 13: vivzpus is vindpus
      ↻ 重复节点，计数: 2

   节点 14: dirjpus is nutvpus
      ↻ 重复节点，计数: 2

   节点 15: kexqpus is cohmpus
      ↻ 重复节点，计数: 2

   节点 16: vindpus is xebrpus
      ↻ 重复节点，计数: 2

   节点 17: woyqpus is dirjpus
      ↻ 重复节点，计数: 2

   节点 18: didjpus is memmpus
      ↻ 重复节点，计数: 2

   节点 19: x is wurlpus
      ↻ 重复节点，计数: 2

   节点 20: wurlpus is vuykpus
      ↻ 重复节点，计数: 2

   节点 21: x is wurlpus
      ↻ 重复节点，计数: 3

   节点 22: wurlpus is vuykpus
      ↻ 重复节点，计数: 3

   节点 23: x is vuykpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is vuykpus
      ✅ 验证成功 + LoG匹配

   节点 24: vuykpus is woyqpus and hagtpus and kuqhpus
      ↻ 重复节点，计数: 3

   节点 25: vuykpus is woyqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: vuykpus is woyqpus and hagtpus and kuqhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: vuykpus is woyqpus and hagtpus and kuqhpus
  ✓ 点亮LoG节点: vuykpus is woyqpus and hagtpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 26: vuykpus is hagtpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: vuykpus is woyqpus and hagtpus and kuqhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: vuykpus is woyqpus and hagtpus and kuqhpus

   节点 27: vuykpus is kuqhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: vuykpus is woyqpus and hagtpus and kuqhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: vuykpus is woyqpus and hagtpus and kuqhpus

   节点 28: x is woyqpus and hagtpus and kuqhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wurlpus → wurlpus is woyqpus and hagtpus and kuqhpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is wurlpus
  - 前提: wurlpus is vuykpus
  - 前提: vuykpus is woyqpus and hagtpus and kuqhpus
  ✓ 点亮LoG节点: x is woyqpus
[子树点亮]     └─ 点亮依赖节点: x is woyqpus and hagtpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 29: woyqpus is dirjpus
      ↻ 重复节点，计数: 3

   节点 30: x is dirjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wurlpus → wurlpus is dirjpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is wurlpus
  - 前提: wurlpus is vuykpus
  - 前提: vuykpus is woyqpus
  - 前提: woyqpus is dirjpus

   节点 31: dirjpus is nutvpus
      ↻ 重复节点，计数: 3

   节点 32: x is nutvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wurlpus → wurlpus is nutvpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is wurlpus
  - 前提: wurlpus is vuykpus
  - 前提: vuykpus is woyqpus
  - 前提: woyqpus is dirjpus
  - 前提: dirjpus is nutvpus
  ✓ 点亮LoG节点: woyqpus is nutvpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 33: nutvpus is didjpus
      ↻ 重复节点，计数: 3

   节点 34: x is didjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wurlpus → wurlpus is didjpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is wurlpus
  - 前提: wurlpus is vuykpus
  - 前提: vuykpus is woyqpus
  - 前提: woyqpus is dirjpus
  - 前提: dirjpus is nutvpus
  - 前提: nutvpus is didjpus

   节点 35: didjpus is memmpus
      ↻ 重复节点，计数: 3

   节点 36: x is memmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wurlpus → wurlpus is memmpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is wurlpus
  - 前提: wurlpus is vuykpus
  - 前提: vuykpus is woyqpus
  - 前提: woyqpus is dirjpus
  - 前提: dirjpus is nutvpus
  - 前提: nutvpus is didjpus
  - 前提: didjpus is memmpus
  ✓ 点亮LoG节点: woyqpus is memmpus
[子树点亮]     └─ 点亮依赖节点: nutvpus is memmpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 37: memmpus is vudlpus
      ↻ 重复节点，计数: 3

   节点 38: x is vudlpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wurlpus → wurlpus is vudlpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is wurlpus
  - 前提: wurlpus is vuykpus
  - 前提: vuykpus is woyqpus
  - 前提: woyqpus is dirjpus
  - 前提: dirjpus is nutvpus
  - 前提: nutvpus is didjpus
  - 前提: didjpus is memmpus
  - 前提: memmpus is vudlpus

   节点 39: vudlpus is kexqpus and mukwpus
      ↻ 重复节点，计数: 3

   节点 40: x is kexqpus and mukwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wurlpus → wurlpus is kexqpus and mukwpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is wurlpus
  - 前提: wurlpus is vuykpus
  - 前提: vuykpus is woyqpus
  - 前提: woyqpus is dirjpus
  - 前提: dirjpus is nutvpus
  - 前提: nutvpus is didjpus
  - 前提: didjpus is memmpus
  - 前提: memmpus is vudlpus
  - 前提: vudlpus is kexqpus and mukwpus
  ✓ 点亮LoG节点: x is kexqpus
[子树点亮]     └─ 点亮依赖节点: woyqpus is kexqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: memmpus is kexqpus (深度4)
[子树点亮]     └─ 点亮依赖节点: memmpus is kexqpus and mukwpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 41: kexqpus is cohmpus
      ↻ 重复节点，计数: 3

   节点 42: x is cohmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wurlpus → wurlpus is cohmpus
[后处理] 基于推理轨迹点亮节点，使用了 10 个前提条件:
  - 前提: x is wurlpus
  - 前提: wurlpus is vuykpus
  - 前提: vuykpus is woyqpus
  - 前提: woyqpus is dirjpus
  - 前提: dirjpus is nutvpus
  - 前提: nutvpus is didjpus
  - 前提: didjpus is memmpus
  - 前提: memmpus is vudlpus
  - 前提: vudlpus is kexqpus and mukwpus
  - 前提: kexqpus is cohmpus

   节点 43: cohmpus is vivzpus
      ↻ 重复节点，计数: 3

   节点 44: x is vivzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wurlpus → wurlpus is vivzpus
[后处理] 基于推理轨迹点亮节点，使用了 11 个前提条件:
  - 前提: x is wurlpus
  - 前提: wurlpus is vuykpus
  - 前提: vuykpus is woyqpus
  - 前提: woyqpus is dirjpus
  - 前提: dirjpus is nutvpus
  - 前提: nutvpus is didjpus
  - 前提: didjpus is memmpus
  - 前提: memmpus is vudlpus
  - 前提: vudlpus is kexqpus and mukwpus
  - 前提: kexqpus is cohmpus
  - 前提: cohmpus is vivzpus
  ✓ 点亮LoG节点: kexqpus is vivzpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 45: vivzpus is vindpus
      ↻ 重复节点，计数: 3

   节点 46: x is vindpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wurlpus → wurlpus is vindpus
[后处理] 基于推理轨迹点亮节点，使用了 12 个前提条件:
  - 前提: x is wurlpus
  - 前提: wurlpus is vuykpus
  - 前提: vuykpus is woyqpus
  - 前提: woyqpus is dirjpus
  - 前提: dirjpus is nutvpus
  - 前提: nutvpus is didjpus
  - 前提: didjpus is memmpus
  - 前提: memmpus is vudlpus
  - 前提: vudlpus is kexqpus and mukwpus
  - 前提: kexqpus is cohmpus
  - 前提: cohmpus is vivzpus
  - 前提: vivzpus is vindpus

   节点 47: vindpus is xebrpus
      ↻ 重复节点，计数: 3

   节点 48: x is xebrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wurlpus → wurlpus is xebrpus
[后处理] 基于推理轨迹点亮节点，使用了 13 个前提条件:
  - 前提: x is wurlpus
  - 前提: wurlpus is vuykpus
  - 前提: vuykpus is woyqpus
  - 前提: woyqpus is dirjpus
  - 前提: dirjpus is nutvpus
  - 前提: nutvpus is didjpus
  - 前提: didjpus is memmpus
  - 前提: memmpus is vudlpus
  - 前提: vudlpus is kexqpus and mukwpus
  - 前提: kexqpus is cohmpus
  - 前提: cohmpus is vivzpus
  - 前提: vivzpus is vindpus
  - 前提: vindpus is xebrpus
  ✓ 点亮LoG节点: kexqpus is xebrpus
[子树点亮]     └─ 点亮依赖节点: vivzpus is xebrpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 49: xebrpus is xadppus
      ↻ 重复节点，计数: 3

   节点 50: x is xadppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wurlpus → wurlpus is xadppus
[后处理] 基于推理轨迹点亮节点，使用了 14 个前提条件:
  - 前提: x is wurlpus
  - 前提: wurlpus is vuykpus
  - 前提: vuykpus is woyqpus
  - 前提: woyqpus is dirjpus
  - 前提: dirjpus is nutvpus
  - 前提: nutvpus is didjpus
  - 前提: didjpus is memmpus
  - 前提: memmpus is vudlpus
  - 前提: vudlpus is kexqpus and mukwpus
  - 前提: kexqpus is cohmpus
  - 前提: cohmpus is vivzpus
  - 前提: vivzpus is vindpus
  - 前提: vindpus is xebrpus
  - 前提: xebrpus is xadppus

   节点 51: xadppus is babcpus and dupjpus
      ↻ 重复节点，计数: 3

   节点 52: x is babcpus and dupjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wurlpus → wurlpus is babcpus and dupjpus
[后处理] 基于推理轨迹点亮节点，使用了 15 个前提条件:
  - 前提: x is wurlpus
  - 前提: wurlpus is vuykpus
  - 前提: vuykpus is woyqpus
  - 前提: woyqpus is dirjpus
  - 前提: dirjpus is nutvpus
  - 前提: nutvpus is didjpus
  - 前提: didjpus is memmpus
  - 前提: memmpus is vudlpus
  - 前提: vudlpus is kexqpus and mukwpus
  - 前提: kexqpus is cohmpus
  - 前提: cohmpus is vivzpus
  - 前提: vivzpus is vindpus
  - 前提: vindpus is xebrpus
  - 前提: xebrpus is xadppus
  - 前提: xadppus is babcpus and dupjpus
  ✓ 点亮LoG节点: x is babcpus or babrpus
[子树点亮]     └─ 点亮依赖节点: kexqpus is babcpus or babrpus (深度2)
[子树点亮]     └─ 点亮依赖节点: kexqpus is babcpus (深度3)
[子树点亮]     └─ 点亮依赖节点: xebrpus is babcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: xebrpus is babcpus and dupjpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 53: x is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is babcpus and dupjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is babcpus and dupjpus

   节点 54: x is babcpus
      ↻ 重复节点，计数: 2

   节点 55: x is babcpus
      ↻ 重复节点，计数: 3

   节点 56: x is babcpus or babrpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 57: x is babcpus
      ↻ 重复节点，计数: 4

   节点 58: x is babcpus
      ↻ 重复节点，计数: 5

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 58
   - 新增节点: 24
   - 更新已存在节点: 34
   - 点亮的LoG节点: 19

🎯 推理质量统计:
   - 完美推理: 6 (节点正确 + 路径正确)
   - 部分推理: 18 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 19节点, 15前提, 复杂度1-15

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 39
   - 前提节点: 15
   - 推理节点: 21
   - 幻觉节点: 3
   - 点亮LoG节点: 19

❌ 幻觉节点详情:
   - lerwpus is babgpus and rayspus (出现1次)
   - x is relmpus and muqcpus (出现1次)
   - relmpus is babgpus (出现1次)

✅ 推理节点详情:
   🟡 x is relmpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is babgpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus', 'relmpus is babgpus']
   🟡 x is vuykpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟢 vuykpus is woyqpus (出现1次, 质量:perfect)
   🟢 vuykpus is hagtpus (出现1次, 质量:perfect)
   🟢 vuykpus is kuqhpus (出现1次, 质量:perfect)
   🟡 x is woyqpus and hagtpus and kuqhpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is dirjpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is nutvpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is didjpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is memmpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is vudlpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is kexqpus and mukwpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is cohmpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is vivzpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is vindpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is xebrpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is xadppus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is babcpus and dupjpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is babcpus (出现5次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is babcpus or babrpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']

🔥 点亮的LoG节点:
   - x is kexqpus
   - kexqpus is vivzpus
   - xebrpus is babcpus and dupjpus
   - nutvpus is memmpus
   - x is woyqpus and hagtpus
   - kexqpus is babcpus or babrpus
   - woyqpus is memmpus
   - x is babcpus or babrpus
   - kexqpus is babcpus
   - vivzpus is xebrpus
   - xebrpus is babcpus
   - x is woyqpus
   - kexqpus is xebrpus
   - vuykpus is woyqpus and hagtpus
   - memmpus is kexqpus and mukwpus
   - woyqpus is kexqpus
   - x is vuykpus
   - memmpus is kexqpus
   - woyqpus is nutvpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus or babrpus (第5层)
   节点Coverage: 19/19 = 100.00%
   前提条件Coverage: 15/15 = 100.00%
   各推理层点亮比例:
     第1层: 8/8 = 100.00%
     第2层: 5/5 = 100.00%
     第3层: 3/3 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 3/24 = 12.50%
   可推导节点: 21/24
   Strict Error Rate: 21/24 = 87.50%
   严格有效节点: 3/24

   详细分析:
     完美推理: 6 (25.00%)
     部分推理: 18 (75.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 28/50
================================================================================
记录索引: 27
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_27.json
✅ 使用缓存结果:
   - 句子数: 80
   - 提取的语句数: 94
   - 初始条件数: 14

=== Statement提取完成 ===
总句子数: 80
成功提取: 80
失败提取: 0
总statements数: 94

=== 开始清洗Statement格式 ===
原始statements数: 94
清洗后statements数: 82
过滤掉的statements数: 12
清洗后的statements:
  1. [actual] vevqpus is wekbpus
  2. [actual] femzpus is lerypus and camzpus
  3. [actual] divdpus is babcpus and resnpus
  4. [actual] x is vevqpus and sitrpus
  5. [actual] wegfpus is sutbpus
  6. [actual] pottpus is kuhvpus
  7. [actual] lerypus is wegfpus
  8. [actual] vevqpus is femzpus
  9. [actual] kuhvpus is babrpus and fucqpus
  10. [actual] pottpus is divdpus
  11. [actual] celwpus is pottpus
  12. [actual] celwpus is xetkpus
  13. [actual] sutbpus is celwpus
  14. [actual] lerypus is wesjpus
  15. [planning] x is babcpus and babrpus
  16. [planning] x is babcpus and babrpus
  17. [actual] x is vevqpus and sitrpus
  18. [actual] x is vevqpus and sitrpus
  19. [planning] vevqpus is babcpus and babrpus
  20. [planning] sitrpus is babcpus and babrpus
  21. [actual] vevqpus is wekbpus
  22. [actual] vevqpus is femzpus
  23. [actual] vevqpus is wekbpus and femzpus
  24. [actual] femzpus is lerypus and camzpus
  25. [actual] femzpus is lerypus and camzpus
  26. [actual] lerypus is wegfpus
  27. [actual] lerypus is wesjpus
  28. [actual] wegfpus is sutbpus
  29. [actual] sutbpus is celwpus
  30. [actual] celwpus is pottpus
  31. [actual] celwpus is xetkpus
  32. [actual] pottpus is kuhvpus
  33. [actual] pottpus is divdpus
  34. [actual] kuhvpus is babrpus and fucqpus
  35. [actual] divdpus is babcpus and resnpus
  36. [actual] babrpus is kuhvpus
  37. [actual] kuhvpus is babrpus and fucqpus
  38. [actual] babcpus is divdpus
  39. [actual] divdpus is babcpus and resnpus
  40. [actual] x is vevqpus
  41. [actual] vevqpus is femzpus
  42. [actual] femzpus is lerypus and camzpus
  43. [actual] lerypus is wegfpus
  44. [actual] wegfpus is sutbpus
  45. [actual] sutbpus is celwpus
  46. [actual] celwpus is pottpus
  47. [actual] pottpus is kuhvpus
  48. [actual] pottpus is divdpus
  49. [planning] x is babrpus
  50. [planning] x is babcpus
  51. [actual] vevqpus is wekbpus
  52. [planning] x is babcpus and babrpus
  53. [actual] x is vevqpus
  54. [planning] x is babcpus
  55. [planning] x is babrpus
  56. [actual] x is vevqpus
  57. [actual] vevqpus is femzpus
  58. [actual] x is femzpus
  59. [actual] femzpus is lerypus
  60. [actual] x is lerypus
  61. [actual] lerypus is wegfpus
  62. [planning] x is wegfpus
  63. [actual] wegfpus is sutbpus
  64. [actual] x is sutbpus
  65. [actual] sutbpus is celwpus
  66. [planning] x is celwpus
  67. [actual] celwpus is pottpus
  68. [planning] x is pottpus
  69. [actual] pottpus is kuhvpus
  70. [planning] x is kuhvpus
  71. [actual] kuhvpus is babrpus
  72. [planning] x is babrpus
  73. [actual] pottpus is divdpus
  74. [actual] x is pottpus
  75. [actual] x is divdpus
  76. [actual] divdpus is babcpus
  77. [actual] x is babcpus
  78. [actual] x is babcpus and babrpus
  79. [actual] lerypus is wesjpus
  80. [actual] vevqpus is wekbpus
  81. [actual] x is sitrpus
  82. [actual] x is babcpus and babrpus

=== 开始标准化和解析节点 ===
清洗后statements数: 82
标准化后节点数: 82
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] vevqpus → wekbpus (原始: vevqpus is wekbpus)
  2. [actual] femzpus → lerypus and camzpus (原始: femzpus is lerypus and camzpus)
  3. [actual] divdpus → babcpus and resnpus (原始: divdpus is babcpus and resnpus)
  4. [actual] x → vevqpus and sitrpus (原始: x is vevqpus and sitrpus)
  5. [actual] wegfpus → sutbpus (原始: wegfpus is sutbpus)
  6. [actual] pottpus → kuhvpus (原始: pottpus is kuhvpus)
  7. [actual] lerypus → wegfpus (原始: lerypus is wegfpus)
  8. [actual] vevqpus → femzpus (原始: vevqpus is femzpus)
  9. [actual] kuhvpus → babrpus and fucqpus (原始: kuhvpus is babrpus and fucqpus)
  10. [actual] pottpus → divdpus (原始: pottpus is divdpus)
  11. [actual] celwpus → pottpus (原始: celwpus is pottpus)
  12. [actual] celwpus → xetkpus (原始: celwpus is xetkpus)
  13. [actual] sutbpus → celwpus (原始: sutbpus is celwpus)
  14. [actual] lerypus → wesjpus (原始: lerypus is wesjpus)
  15. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  16. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  17. [actual] x → vevqpus and sitrpus (原始: x is vevqpus and sitrpus)
  18. [actual] x → vevqpus and sitrpus (原始: x is vevqpus and sitrpus)
  19. [planning] vevqpus → babcpus and babrpus (原始: vevqpus is babcpus and babrpus)
  20. [planning] sitrpus → babcpus and babrpus (原始: sitrpus is babcpus and babrpus)
  21. [actual] vevqpus → wekbpus (原始: vevqpus is wekbpus)
  22. [actual] vevqpus → femzpus (原始: vevqpus is femzpus)
  23. [actual] vevqpus → wekbpus and femzpus (原始: vevqpus is wekbpus and femzpus)
  24. [actual] femzpus → lerypus and camzpus (原始: femzpus is lerypus and camzpus)
  25. [actual] femzpus → lerypus and camzpus (原始: femzpus is lerypus and camzpus)
  26. [actual] lerypus → wegfpus (原始: lerypus is wegfpus)
  27. [actual] lerypus → wesjpus (原始: lerypus is wesjpus)
  28. [actual] wegfpus → sutbpus (原始: wegfpus is sutbpus)
  29. [actual] sutbpus → celwpus (原始: sutbpus is celwpus)
  30. [actual] celwpus → pottpus (原始: celwpus is pottpus)
  31. [actual] celwpus → xetkpus (原始: celwpus is xetkpus)
  32. [actual] pottpus → kuhvpus (原始: pottpus is kuhvpus)
  33. [actual] pottpus → divdpus (原始: pottpus is divdpus)
  34. [actual] kuhvpus → babrpus and fucqpus (原始: kuhvpus is babrpus and fucqpus)
  35. [actual] divdpus → babcpus and resnpus (原始: divdpus is babcpus and resnpus)
  36. [actual] babrpus → kuhvpus (原始: babrpus is kuhvpus)
  37. [actual] kuhvpus → babrpus and fucqpus (原始: kuhvpus is babrpus and fucqpus)
  38. [actual] babcpus → divdpus (原始: babcpus is divdpus)
  39. [actual] divdpus → babcpus and resnpus (原始: divdpus is babcpus and resnpus)
  40. [actual] x → vevqpus (原始: x is vevqpus)
  41. [actual] vevqpus → femzpus (原始: vevqpus is femzpus)
  42. [actual] femzpus → lerypus and camzpus (原始: femzpus is lerypus and camzpus)
  43. [actual] lerypus → wegfpus (原始: lerypus is wegfpus)
  44. [actual] wegfpus → sutbpus (原始: wegfpus is sutbpus)
  45. [actual] sutbpus → celwpus (原始: sutbpus is celwpus)
  46. [actual] celwpus → pottpus (原始: celwpus is pottpus)
  47. [actual] pottpus → kuhvpus (原始: pottpus is kuhvpus)
  48. [actual] pottpus → divdpus (原始: pottpus is divdpus)
  49. [planning] x → babrpus (原始: x is babrpus)
  50. [planning] x → babcpus (原始: x is babcpus)
  51. [actual] vevqpus → wekbpus (原始: vevqpus is wekbpus)
  52. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  53. [actual] x → vevqpus (原始: x is vevqpus)
  54. [planning] x → babcpus (原始: x is babcpus)
  55. [planning] x → babrpus (原始: x is babrpus)
  56. [actual] x → vevqpus (原始: x is vevqpus)
  57. [actual] vevqpus → femzpus (原始: vevqpus is femzpus)
  58. [actual] x → femzpus (原始: x is femzpus)
  59. [actual] femzpus → lerypus (原始: femzpus is lerypus)
  60. [actual] x → lerypus (原始: x is lerypus)
  61. [actual] lerypus → wegfpus (原始: lerypus is wegfpus)
  62. [planning] x → wegfpus (原始: x is wegfpus)
  63. [actual] wegfpus → sutbpus (原始: wegfpus is sutbpus)
  64. [actual] x → sutbpus (原始: x is sutbpus)
  65. [actual] sutbpus → celwpus (原始: sutbpus is celwpus)
  66. [planning] x → celwpus (原始: x is celwpus)
  67. [actual] celwpus → pottpus (原始: celwpus is pottpus)
  68. [planning] x → pottpus (原始: x is pottpus)
  69. [actual] pottpus → kuhvpus (原始: pottpus is kuhvpus)
  70. [planning] x → kuhvpus (原始: x is kuhvpus)
  71. [actual] kuhvpus → babrpus (原始: kuhvpus is babrpus)
  72. [planning] x → babrpus (原始: x is babrpus)
  73. [actual] pottpus → divdpus (原始: pottpus is divdpus)
  74. [actual] x → pottpus (原始: x is pottpus)
  75. [actual] x → divdpus (原始: x is divdpus)
  76. [actual] divdpus → babcpus (原始: divdpus is babcpus)
  77. [actual] x → babcpus (原始: x is babcpus)
  78. [actual] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  79. [actual] lerypus → wesjpus (原始: lerypus is wesjpus)
  80. [actual] vevqpus → wekbpus (原始: vevqpus is wekbpus)
  81. [actual] x → sitrpus (原始: x is sitrpus)
  82. [actual] x → babcpus and babrpus (原始: x is babcpus and babrpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 20
[后处理] 加载LoG图，包含 20 个节点
  LoG节点 0: x is babcpus and babrpus (规则: MP, 深度: 1)
  LoG节点 1: x is wegfpus (规则: MP, 深度: 2)
  LoG节点 2: wegfpus is babcpus and babrpus (规则: MP, 深度: 2)
  LoG节点 3: x is femzpus (规则: CE, 深度: 3)
  LoG节点 4: femzpus is wegfpus (规则: CE, 深度: 3)
  LoG节点 5: wegfpus is pottpus (规则: CE, 深度: 3)
  LoG节点 6: pottpus is babcpus and babrpus (规则: CI, 深度: 3)
  LoG节点 7: x is femzpus and wekbpus (规则: MP, 深度: 4)
  LoG节点 8: femzpus is wegfpus and wesjpus (规则: MP, 深度: 4)
  LoG节点 9: wegfpus is pottpus and xetkpus (规则: MP, 深度: 4)
  LoG节点 10: pottpus is babcpus (规则: CE, 深度: 4)
  LoG节点 11: pottpus is babrpus (规则: CE, 深度: 4)
  LoG节点 12: x is vevqpus (规则: CE, 深度: 5)
  LoG节点 13: vevqpus is femzpus and wekbpus (规则: CI, 深度: 5)
  LoG节点 14: femzpus is lerypus (规则: CE, 深度: 5)
  LoG节点 15: lerypus is wegfpus and wesjpus (规则: CI, 深度: 5)
  LoG节点 16: wegfpus is celwpus (规则: MP, 深度: 5)
  LoG节点 17: celwpus is pottpus and xetkpus (规则: CI, 深度: 5)
  LoG节点 18: pottpus is babcpus and resnpus (规则: MP, 深度: 5)
  LoG节点 19: pottpus is babrpus and fucqpus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 82
   - 初始条件数: 14
   - LoG图节点数: 20

📋 初始条件列表:
    1. vevqpus is wekbpus
    2. femzpus is lerypus and camzpus
    3. divdpus is babcpus and resnpus
    4. x is vevqpus and sitrpus
    5. wegfpus is sutbpus
    6. pottpus is kuhvpus
    7. lerypus is wegfpus
    8. vevqpus is femzpus
    9. kuhvpus is babrpus and fucqpus
   10. pottpus is divdpus
   11. celwpus is pottpus
   12. celwpus is xetkpus
   13. sutbpus is celwpus
   14. lerypus is wesjpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 14 个前提节点

🔍 开始处理actual节点...

   节点 1: vevqpus is wekbpus
      ↻ 重复节点，计数: 2

   节点 2: femzpus is lerypus and camzpus
      ↻ 重复节点，计数: 2

   节点 3: divdpus is babcpus and resnpus
      ↻ 重复节点，计数: 2

   节点 4: x is vevqpus and sitrpus
      ↻ 重复节点，计数: 2

   节点 5: wegfpus is sutbpus
      ↻ 重复节点，计数: 2

   节点 6: pottpus is kuhvpus
      ↻ 重复节点，计数: 2

   节点 7: lerypus is wegfpus
      ↻ 重复节点，计数: 2

   节点 8: vevqpus is femzpus
      ↻ 重复节点，计数: 2

   节点 9: kuhvpus is babrpus and fucqpus
      ↻ 重复节点，计数: 2

   节点 10: pottpus is divdpus
      ↻ 重复节点，计数: 2

   节点 11: celwpus is pottpus
      ↻ 重复节点，计数: 2

   节点 12: celwpus is xetkpus
      ↻ 重复节点，计数: 2

   节点 13: sutbpus is celwpus
      ↻ 重复节点，计数: 2

   节点 14: lerypus is wesjpus
      ↻ 重复节点，计数: 2

   节点 15: x is vevqpus and sitrpus
      ↻ 重复节点，计数: 3

   节点 16: x is vevqpus and sitrpus
      ↻ 重复节点，计数: 4

   节点 17: vevqpus is wekbpus
      ↻ 重复节点，计数: 3

   节点 18: vevqpus is femzpus
      ↻ 重复节点，计数: 3

   节点 19: vevqpus is wekbpus and femzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: vevqpus is wekbpus → vevqpus is femzpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: vevqpus is wekbpus
  - 前提: vevqpus is femzpus
  ✓ 点亮LoG节点: vevqpus is femzpus and wekbpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 20: femzpus is lerypus and camzpus
      ↻ 重复节点，计数: 3

   节点 21: femzpus is lerypus and camzpus
      ↻ 重复节点，计数: 4

   节点 22: lerypus is wegfpus
      ↻ 重复节点，计数: 3

   节点 23: lerypus is wesjpus
      ↻ 重复节点，计数: 3

   节点 24: wegfpus is sutbpus
      ↻ 重复节点，计数: 3

   节点 25: sutbpus is celwpus
      ↻ 重复节点，计数: 3

   节点 26: celwpus is pottpus
      ↻ 重复节点，计数: 3

   节点 27: celwpus is xetkpus
      ↻ 重复节点，计数: 3

   节点 28: pottpus is kuhvpus
      ↻ 重复节点，计数: 3

   节点 29: pottpus is divdpus
      ↻ 重复节点，计数: 3

   节点 30: kuhvpus is babrpus and fucqpus
      ↻ 重复节点，计数: 3

   节点 31: divdpus is babcpus and resnpus
      ↻ 重复节点，计数: 3

   节点 32: babrpus is kuhvpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 33: kuhvpus is babrpus and fucqpus
      ↻ 重复节点，计数: 4

   节点 34: babcpus is divdpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 35: divdpus is babcpus and resnpus
      ↻ 重复节点，计数: 4

   节点 36: x is vevqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is vevqpus
      ✅ 验证成功 + LoG匹配

   节点 37: vevqpus is femzpus
      ↻ 重复节点，计数: 4

   节点 38: femzpus is lerypus and camzpus
      ↻ 重复节点，计数: 5

   节点 39: lerypus is wegfpus
      ↻ 重复节点，计数: 4

   节点 40: wegfpus is sutbpus
      ↻ 重复节点，计数: 4

   节点 41: sutbpus is celwpus
      ↻ 重复节点，计数: 4

   节点 42: celwpus is pottpus
      ↻ 重复节点，计数: 4

   节点 43: pottpus is kuhvpus
      ↻ 重复节点，计数: 4

   节点 44: pottpus is divdpus
      ↻ 重复节点，计数: 4

   节点 45: vevqpus is wekbpus
      ↻ 重复节点，计数: 4

   节点 46: x is vevqpus
      ↻ 重复节点，计数: 2

   节点 47: x is vevqpus
      ↻ 重复节点，计数: 3

   节点 48: vevqpus is femzpus
      ↻ 重复节点，计数: 5

   节点 49: x is femzpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is femzpus
[子树点亮]     └─ 点亮依赖节点: x is femzpus and wekbpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 50: femzpus is lerypus
      🔍 验证新节点...
[后处理] 点亮LoG节点: femzpus is lerypus
      ✅ 验证成功 + LoG匹配

   节点 51: x is lerypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is vevqpus → vevqpus is lerypus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is vevqpus
  - 前提: vevqpus is femzpus
  - 前提: femzpus is lerypus

   节点 52: lerypus is wegfpus
      ↻ 重复节点，计数: 5

   节点 53: wegfpus is sutbpus
      ↻ 重复节点，计数: 5

   节点 54: x is sutbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is vevqpus → vevqpus is sutbpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is vevqpus
  - 前提: vevqpus is femzpus
  - 前提: femzpus is lerypus
  - 前提: lerypus is wegfpus
  - 前提: wegfpus is sutbpus
  ✓ 点亮LoG节点: x is wegfpus
[子树点亮]     └─ 点亮依赖节点: femzpus is wegfpus (深度3)
[子树点亮]     └─ 点亮依赖节点: femzpus is wegfpus and wesjpus (深度4)
[子树点亮]     └─ 点亮依赖节点: lerypus is wegfpus and wesjpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 55: sutbpus is celwpus
      ↻ 重复节点，计数: 5

   节点 56: celwpus is pottpus
      ↻ 重复节点，计数: 5

   节点 57: pottpus is kuhvpus
      ↻ 重复节点，计数: 5

   节点 58: kuhvpus is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kuhvpus is babrpus and fucqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kuhvpus is babrpus and fucqpus

   节点 59: pottpus is divdpus
      ↻ 重复节点，计数: 5

   节点 60: x is pottpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is vevqpus → vevqpus is pottpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is vevqpus
  - 前提: vevqpus is femzpus
  - 前提: femzpus is lerypus
  - 前提: lerypus is wegfpus
  - 前提: wegfpus is sutbpus
  - 前提: sutbpus is celwpus
  - 前提: celwpus is pottpus
  ✓ 点亮LoG节点: wegfpus is pottpus
[子树点亮]     └─ 点亮依赖节点: wegfpus is pottpus and xetkpus (深度4)
[子树点亮]     └─ 点亮依赖节点: wegfpus is celwpus (深度5)
[子树点亮]     └─ 点亮依赖节点: celwpus is pottpus and xetkpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 61: x is divdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is vevqpus → vevqpus is divdpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is vevqpus
  - 前提: vevqpus is femzpus
  - 前提: femzpus is lerypus
  - 前提: lerypus is wegfpus
  - 前提: wegfpus is sutbpus
  - 前提: sutbpus is celwpus
  - 前提: celwpus is pottpus
  - 前提: pottpus is divdpus

   节点 62: divdpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: divdpus is babcpus and resnpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: divdpus is babcpus and resnpus

   节点 63: x is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is vevqpus → vevqpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is vevqpus
  - 前提: vevqpus is femzpus
  - 前提: femzpus is lerypus
  - 前提: lerypus is wegfpus
  - 前提: wegfpus is sutbpus
  - 前提: sutbpus is celwpus
  - 前提: celwpus is pottpus
  - 前提: pottpus is divdpus
  - 前提: divdpus is babcpus
  ✓ 点亮LoG节点: pottpus is babcpus
[子树点亮]     └─ 点亮依赖节点: pottpus is babcpus and resnpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 64: x is babcpus and babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus and babrpus
[子树点亮]     └─ 点亮依赖节点: wegfpus is babcpus and babrpus (深度2)
[子树点亮]     └─ 点亮依赖节点: pottpus is babcpus and babrpus (深度3)
[子树点亮]     └─ 点亮依赖节点: pottpus is babrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: pottpus is babrpus and fucqpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
      ✅ 验证成功 + LoG匹配

   节点 65: lerypus is wesjpus
      ↻ 重复节点，计数: 4

   节点 66: vevqpus is wekbpus
      ↻ 重复节点，计数: 5

   节点 67: x is sitrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is vevqpus and sitrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is vevqpus and sitrpus

   节点 68: x is babcpus and babrpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 68
   - 新增节点: 15
   - 更新已存在节点: 53
   - 点亮的LoG节点: 20

🎯 推理质量统计:
   - 完美推理: 14 (节点正确 + 路径正确)
   - 部分推理: 1 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 20节点, 14前提, 复杂度1-14

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 29
   - 前提节点: 14
   - 推理节点: 13
   - 幻觉节点: 2
   - 点亮LoG节点: 20

❌ 幻觉节点详情:
   - babrpus is kuhvpus (出现1次)
   - babcpus is divdpus (出现1次)

✅ 推理节点详情:
   🟢 vevqpus is wekbpus and femzpus (出现1次, 质量:perfect)
   🟢 x is vevqpus (出现3次, 质量:perfect)
   🟢 x is femzpus (出现1次, 质量:perfect)
   🟢 femzpus is lerypus (出现1次, 质量:perfect)
   🟢 x is lerypus (出现1次, 质量:perfect)
   🟢 x is sutbpus (出现1次, 质量:perfect)
   🟢 kuhvpus is babrpus (出现1次, 质量:perfect)
   🟢 x is pottpus (出现1次, 质量:perfect)
   🟡 x is divdpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['babcpus is divdpus']
   🟢 divdpus is babcpus (出现1次, 质量:perfect)
   🟢 x is babcpus (出现1次, 质量:perfect)
   🟢 x is babcpus and babrpus (出现2次, 质量:perfect)
   🟢 x is sitrpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - vevqpus is femzpus and wekbpus
   - pottpus is babcpus and resnpus
   - x is vevqpus
   - lerypus is wegfpus and wesjpus
   - celwpus is pottpus and xetkpus
   - wegfpus is celwpus
   - wegfpus is pottpus and xetkpus
   - femzpus is wegfpus
   - x is femzpus
   - pottpus is babrpus and fucqpus
   - femzpus is lerypus
   - pottpus is babcpus
   - wegfpus is babcpus and babrpus
   - femzpus is wegfpus and wesjpus
   - pottpus is babrpus
   - x is wegfpus
   - pottpus is babcpus and babrpus
   - x is femzpus and wekbpus
   - x is babcpus and babrpus
   - wegfpus is pottpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus and babrpus (第5层)
   节点Coverage: 20/20 = 100.00%
   前提条件Coverage: 14/14 = 100.00%
   各推理层点亮比例:
     第1层: 8/8 = 100.00%
     第2层: 5/5 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 2/15 = 13.33%
   可推导节点: 13/15
   Strict Error Rate: 3/15 = 20.00%
   严格有效节点: 12/15

   详细分析:
     完美推理: 14 (93.33%)
     部分推理: 1 (6.67%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 29/50
================================================================================
记录索引: 28
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_28.json
✅ 使用缓存结果:
   - 句子数: 44
   - 提取的语句数: 43
   - 初始条件数: 8

=== Statement提取完成 ===
总句子数: 44
成功提取: 44
失败提取: 0
总statements数: 43

=== 开始清洗Statement格式 ===
原始statements数: 43
清洗后statements数: 43
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 43
标准化后节点数: 43
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babcpus (原始: x is babcpus)
  2. [actual] xokbpus → sujxpus and xapcpus (原始: xokbpus is sujxpus and xapcpus)
  3. [actual] sujxpus → babcpus and qucqpus (原始: sujxpus is babcpus and qucqpus)
  4. [actual] piqjpus → qagwpus (原始: piqjpus is qagwpus)
  5. [actual] jiblpus → piqjpus and diwhpus (原始: jiblpus is piqjpus and diwhpus)
  6. [actual] xokbpus → dojlpus (原始: xokbpus is dojlpus)
  7. [actual] qagwpus → xokbpus and wumwpus (原始: qagwpus is xokbpus and wumwpus)
  8. [actual] dojlpus → gibmpus and bizkpus (原始: dojlpus is gibmpus and bizkpus)
  9. [actual] x → jiblpus (原始: x is jiblpus)
  10. [planning] x → babcpus (原始: x is babcpus)
  11. [actual] x → jiblpus (原始: x is jiblpus)
  12. [actual] jiblpus → piqjpus and diwhpus (原始: jiblpus is piqjpus and diwhpus)
  13. [actual] x → piqjpus and diwhpus (原始: x is piqjpus and diwhpus)
  14. [actual] piqjpus → qagwpus (原始: piqjpus is qagwpus)
  15. [actual] x → piqjpus (原始: x is piqjpus)
  16. [actual] piqjpus → qagwpus (原始: piqjpus is qagwpus)
  17. [actual] x → qagwpus (原始: x is qagwpus)
  18. [actual] qagwpus → xokbpus and wumwpus (原始: qagwpus is xokbpus and wumwpus)
  19. [actual] x → qagwpus (原始: x is qagwpus)
  20. [actual] x → xokbpus and wumwpus (原始: x is xokbpus and wumwpus)
  21. [actual] xokbpus → sujxpus and xapcpus (原始: xokbpus is sujxpus and xapcpus)
  22. [actual] x → xokbpus (原始: x is xokbpus)
  23. [actual] x → sujxpus and xapcpus (原始: x is sujxpus and xapcpus)
  24. [actual] sujxpus → babcpus and qucqpus (原始: sujxpus is babcpus and qucqpus)
  25. [actual] x → sujxpus (原始: x is sujxpus)
  26. [actual] x → babcpus and qucqpus (原始: x is babcpus and qucqpus)
  27. [actual] x → babcpus (原始: x is babcpus)
  28. [actual] x → jiblpus (原始: x is jiblpus)
  29. [actual] jiblpus → piqjpus and diwhpus (原始: jiblpus is piqjpus and diwhpus)
  30. [actual] x → piqjpus (原始: x is piqjpus)
  31. [actual] piqjpus → qagwpus (原始: piqjpus is qagwpus)
  32. [actual] x → qagwpus (原始: x is qagwpus)
  33. [actual] qagwpus → xokbpus and wumwpus (原始: qagwpus is xokbpus and wumwpus)
  34. [actual] x → xokbpus (原始: x is xokbpus)
  35. [actual] xokbpus → sujxpus and xapcpus (原始: xokbpus is sujxpus and xapcpus)
  36. [actual] x → sujxpus (原始: x is sujxpus)
  37. [actual] sujxpus → babcpus and qucqpus (原始: sujxpus is babcpus and qucqpus)
  38. [planning] x → babcpus (原始: x is babcpus)
  39. [actual] x → babcpus (原始: x is babcpus)
  40. [actual] xokbpus → dojlpus (原始: xokbpus is dojlpus)
  41. [actual] x → xokbpus (原始: x is xokbpus)
  42. [actual] x → sujxpus (原始: x is sujxpus)
  43. [actual] dojlpus → gibmpus and bizkpus (原始: dojlpus is gibmpus and bizkpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 13
[后处理] 加载LoG图，包含 13 个节点
  LoG节点 0: x is babcpus (规则: CE, 深度: 1)
  LoG节点 1: x is babcpus and gibmpus (规则: MP, 深度: 2)
  LoG节点 2: x is xokbpus (规则: MP, 深度: 3)
  LoG节点 3: xokbpus is babcpus and gibmpus (规则: CI, 深度: 3)
  LoG节点 4: x is piqjpus (规则: CE, 深度: 4)
  LoG节点 5: piqjpus is xokbpus (规则: CE, 深度: 4)
  LoG节点 6: xokbpus is babcpus (规则: MP, 深度: 4)
  LoG节点 7: xokbpus is gibmpus (规则: CE, 深度: 4)
  LoG节点 8: x is piqjpus and diwhpus (规则: MP, 深度: 5)
  LoG节点 9: piqjpus is xokbpus and wumwpus (规则: MP, 深度: 5)
  LoG节点 10: xokbpus is sujxpus (规则: CE, 深度: 5)
  LoG节点 11: sujxpus is babcpus (规则: CE, 深度: 5)
  LoG节点 12: xokbpus is gibmpus and bizkpus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 43
   - 初始条件数: 8
   - LoG图节点数: 13

📋 初始条件列表:
    1. xokbpus is sujxpus and xapcpus
    2. sujxpus is babcpus and qucqpus
    3. piqjpus is qagwpus
    4. jiblpus is piqjpus and diwhpus
    5. xokbpus is dojlpus
    6. qagwpus is xokbpus and wumwpus
    7. dojlpus is gibmpus and bizkpus
    8. x is jiblpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 8 个前提节点

🔍 开始处理actual节点...

   节点 1: xokbpus is sujxpus and xapcpus
      ↻ 重复节点，计数: 2

   节点 2: sujxpus is babcpus and qucqpus
      ↻ 重复节点，计数: 2

   节点 3: piqjpus is qagwpus
      ↻ 重复节点，计数: 2

   节点 4: jiblpus is piqjpus and diwhpus
      ↻ 重复节点，计数: 2

   节点 5: xokbpus is dojlpus
      ↻ 重复节点，计数: 2

   节点 6: qagwpus is xokbpus and wumwpus
      ↻ 重复节点，计数: 2

   节点 7: dojlpus is gibmpus and bizkpus
      ↻ 重复节点，计数: 2

   节点 8: x is jiblpus
      ↻ 重复节点，计数: 2

   节点 9: x is jiblpus
      ↻ 重复节点，计数: 3

   节点 10: jiblpus is piqjpus and diwhpus
      ↻ 重复节点，计数: 3

   节点 11: x is piqjpus and diwhpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is piqjpus and diwhpus
      ✅ 验证成功 + LoG匹配

   节点 12: piqjpus is qagwpus
      ↻ 重复节点，计数: 3

   节点 13: x is piqjpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is piqjpus
      ✅ 验证成功 + LoG匹配

   节点 14: piqjpus is qagwpus
      ↻ 重复节点，计数: 4

   节点 15: x is qagwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is jiblpus → jiblpus is qagwpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is jiblpus
  - 前提: jiblpus is piqjpus and diwhpus
  - 前提: piqjpus is qagwpus

   节点 16: qagwpus is xokbpus and wumwpus
      ↻ 重复节点，计数: 3

   节点 17: x is qagwpus
      ↻ 重复节点，计数: 2

   节点 18: x is xokbpus and wumwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is jiblpus → jiblpus is xokbpus and wumwpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is jiblpus
  - 前提: jiblpus is piqjpus and diwhpus
  - 前提: piqjpus is qagwpus
  - 前提: qagwpus is xokbpus and wumwpus
  ✓ 点亮LoG节点: x is xokbpus
[子树点亮]     └─ 点亮依赖节点: piqjpus is xokbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: piqjpus is xokbpus and wumwpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 19: xokbpus is sujxpus and xapcpus
      ↻ 重复节点，计数: 3

   节点 20: x is xokbpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 21: x is sujxpus and xapcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is jiblpus → jiblpus is sujxpus and xapcpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is jiblpus
  - 前提: jiblpus is piqjpus and diwhpus
  - 前提: piqjpus is qagwpus
  - 前提: qagwpus is xokbpus and wumwpus
  - 前提: xokbpus is sujxpus and xapcpus
  ✓ 点亮LoG节点: xokbpus is sujxpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 22: sujxpus is babcpus and qucqpus
      ↻ 重复节点，计数: 3

   节点 23: x is sujxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is sujxpus and xapcpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is sujxpus and xapcpus

   节点 24: x is babcpus and qucqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is jiblpus → jiblpus is babcpus and qucqpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is jiblpus
  - 前提: jiblpus is piqjpus and diwhpus
  - 前提: piqjpus is qagwpus
  - 前提: qagwpus is xokbpus and wumwpus
  - 前提: xokbpus is sujxpus and xapcpus
  - 前提: sujxpus is babcpus and qucqpus
  ✓ 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: x is babcpus and gibmpus (深度2)
[子树点亮]     └─ 点亮依赖节点: xokbpus is babcpus and gibmpus (深度3)
[子树点亮]     └─ 点亮依赖节点: xokbpus is babcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: xokbpus is gibmpus (深度4)
[子树点亮]     └─ 点亮依赖节点: sujxpus is babcpus (深度5)
[子树点亮]     └─ 点亮依赖节点: xokbpus is gibmpus and bizkpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 6 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 25: x is babcpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 26: x is jiblpus
      ↻ 重复节点，计数: 4

   节点 27: jiblpus is piqjpus and diwhpus
      ↻ 重复节点，计数: 4

   节点 28: x is piqjpus
      ↻ 重复节点，计数: 2

   节点 29: piqjpus is qagwpus
      ↻ 重复节点，计数: 5

   节点 30: x is qagwpus
      ↻ 重复节点，计数: 3

   节点 31: qagwpus is xokbpus and wumwpus
      ↻ 重复节点，计数: 4

   节点 32: x is xokbpus
      ↻ 重复节点，计数: 2

   节点 33: xokbpus is sujxpus and xapcpus
      ↻ 重复节点，计数: 4

   节点 34: x is sujxpus
      ↻ 重复节点，计数: 2

   节点 35: sujxpus is babcpus and qucqpus
      ↻ 重复节点，计数: 4

   节点 36: x is babcpus
      ↻ 重复节点，计数: 2

   节点 37: xokbpus is dojlpus
      ↻ 重复节点，计数: 3

   节点 38: x is xokbpus
      ↻ 重复节点，计数: 3

   节点 39: x is sujxpus
      ↻ 重复节点，计数: 3

   节点 40: dojlpus is gibmpus and bizkpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 40
   - 新增节点: 9
   - 更新已存在节点: 31
   - 点亮的LoG节点: 13

🎯 推理质量统计:
   - 完美推理: 9 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 13节点, 8前提, 复杂度1-8

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 17
   - 前提节点: 8
   - 推理节点: 9
   - 幻觉节点: 0
   - 点亮LoG节点: 13

✅ 推理节点详情:
   🟢 x is piqjpus and diwhpus (出现1次, 质量:perfect)
   🟢 x is piqjpus (出现2次, 质量:perfect)
   🟢 x is qagwpus (出现3次, 质量:perfect)
   🟢 x is xokbpus and wumwpus (出现1次, 质量:perfect)
   🟢 x is xokbpus (出现3次, 质量:perfect)
   🟢 x is sujxpus and xapcpus (出现1次, 质量:perfect)
   🟢 x is sujxpus (出现3次, 质量:perfect)
   🟢 x is babcpus and qucqpus (出现1次, 质量:perfect)
   🟢 x is babcpus (出现2次, 质量:perfect)

🔥 点亮的LoG节点:
   - xokbpus is sujxpus
   - x is babcpus
   - xokbpus is babcpus
   - sujxpus is babcpus
   - xokbpus is babcpus and gibmpus
   - x is babcpus and gibmpus
   - xokbpus is gibmpus and bizkpus
   - piqjpus is xokbpus
   - x is piqjpus and diwhpus
   - piqjpus is xokbpus and wumwpus
   - x is xokbpus
   - xokbpus is gibmpus
   - x is piqjpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus (第5层)
   节点Coverage: 13/13 = 100.00%
   前提条件Coverage: 8/8 = 100.00%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/9 = 0.00%
   可推导节点: 9/9
   Strict Error Rate: 0/9 = 0.00%
   严格有效节点: 9/9

   详细分析:
     完美推理: 9 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 30/50
================================================================================
记录索引: 29
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_29.json
✅ 使用缓存结果:
   - 句子数: 29
   - 提取的语句数: 32
   - 初始条件数: 10

=== Statement提取完成 ===
总句子数: 29
成功提取: 29
失败提取: 0
总statements数: 32

=== 开始清洗Statement格式 ===
原始statements数: 32
清洗后statements数: 32
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 32
标准化后节点数: 32
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babcpus and babrpus and babspus (原始: x is babcpus and babrpus and babspus)
  2. [actual] x → gevwpus (原始: x is gevwpus)
  3. [actual] x → gevwpus (原始: x is gevwpus)
  4. [actual] gevwpus → tupvpus (原始: gevwpus is tupvpus)
  5. [actual] x → tupvpus (原始: x is tupvpus)
  6. [actual] tupvpus → qaxdpus (原始: tupvpus is qaxdpus)
  7. [actual] x → qaxdpus (原始: x is qaxdpus)
  8. [actual] qaxdpus → joxvpus and cevqpus (原始: qaxdpus is joxvpus and cevqpus)
  9. [actual] x → joxvpus and cevqpus (原始: x is joxvpus and cevqpus)
  10. [actual] joxvpus → babrpus and fovypus (原始: joxvpus is babrpus and fovypus)
  11. [actual] joxvpus → babspus and saxppus (原始: joxvpus is babspus and saxppus)
  12. [actual] joxvpus → lalfpus (原始: joxvpus is lalfpus)
  13. [actual] joxvpus → pujppus (原始: joxvpus is pujppus)
  14. [actual] pujppus → babcpus (原始: pujppus is babcpus)
  15. [actual] joxvpus → pujppus (原始: joxvpus is pujppus)
  16. [actual] pujppus → babcpus (原始: pujppus is babcpus)
  17. [actual] joxvpus → babcpus (原始: joxvpus is babcpus)
  18. [actual] x → joxvpus (原始: x is joxvpus)
  19. [actual] x → babcpus (原始: x is babcpus)
  20. [planning] x → babrpus and babspus (原始: x is babrpus and babspus)
  21. [actual] joxvpus → babrpus and fovypus (原始: joxvpus is babrpus and fovypus)
  22. [actual] x → joxvpus (原始: x is joxvpus)
  23. [actual] x → babrpus (原始: x is babrpus)
  24. [actual] joxvpus → babspus and saxppus (原始: joxvpus is babspus and saxppus)
  25. [actual] x → babspus (原始: x is babspus)
  26. [actual] x → babcpus and babrpus and babspus (原始: x is babcpus and babrpus and babspus)
  27. [actual] lalfpus → mubppus and nufmpus (原始: lalfpus is mubppus and nufmpus)
  28. [actual] joxvpus → lalfpus (原始: joxvpus is lalfpus)
  29. [planning] lalfpus → mubppus and nufmpus (原始: lalfpus is mubppus and nufmpus)
  30. [actual] gevwpus → tupvpus (原始: gevwpus is tupvpus)
  31. [actual] tupvpus → qaxdpus (原始: tupvpus is qaxdpus)
  32. [actual] x → babcpus and babrpus and babspus (原始: x is babcpus and babrpus and babspus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 13
[后处理] 加载LoG图，包含 13 个节点
  LoG节点 0: x is babcpus and babrpus and babspus (规则: CE, 深度: 1)
  LoG节点 1: x is babcpus and babrpus and babspus and mubppus (规则: MP, 深度: 2)
  LoG节点 2: x is joxvpus (规则: CE, 深度: 3)
  LoG节点 3: joxvpus is babcpus and babrpus and babspus and mubppus (规则: CI, 深度: 3)
  LoG节点 4: x is joxvpus and cevqpus (规则: MP, 深度: 4)
  LoG节点 5: joxvpus is babcpus and babrpus and babspus (规则: CI, 深度: 4)
  LoG节点 6: joxvpus is mubppus (规则: CE, 深度: 4)
  LoG节点 7: x is tupvpus (规则: MP, 深度: 5)
  LoG节点 8: tupvpus is joxvpus and cevqpus (规则: MP, 深度: 5)
  LoG节点 9: joxvpus is babcpus (规则: MP, 深度: 5)
  LoG节点 10: joxvpus is babrpus (规则: CE, 深度: 5)
  LoG节点 11: joxvpus is babspus (规则: CE, 深度: 5)
  LoG节点 12: joxvpus is mubppus and nufmpus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 32
   - 初始条件数: 10
   - LoG图节点数: 13

📋 初始条件列表:
    1. pujppus is babcpus
    2. joxvpus is babrpus and fovypus
    3. qaxdpus is joxvpus and cevqpus
    4. gevwpus is tupvpus
    5. joxvpus is babspus and saxppus
    6. joxvpus is lalfpus
    7. x is gevwpus
    8. tupvpus is qaxdpus
    9. lalfpus is mubppus and nufmpus
   10. joxvpus is pujppus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 10 个前提节点

🔍 开始处理actual节点...

   节点 1: x is gevwpus
      ↻ 重复节点，计数: 2

   节点 2: x is gevwpus
      ↻ 重复节点，计数: 3

   节点 3: gevwpus is tupvpus
      ↻ 重复节点，计数: 2

   节点 4: x is tupvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is tupvpus
      ✅ 验证成功 + LoG匹配

   节点 5: tupvpus is qaxdpus
      ↻ 重复节点，计数: 2

   节点 6: x is qaxdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is gevwpus → gevwpus is qaxdpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is gevwpus
  - 前提: gevwpus is tupvpus
  - 前提: tupvpus is qaxdpus

   节点 7: qaxdpus is joxvpus and cevqpus
      ↻ 重复节点，计数: 2

   节点 8: x is joxvpus and cevqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is joxvpus and cevqpus
[子树点亮]     └─ 点亮依赖节点: tupvpus is joxvpus and cevqpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 9: joxvpus is babrpus and fovypus
      ↻ 重复节点，计数: 2

   节点 10: joxvpus is babspus and saxppus
      ↻ 重复节点，计数: 2

   节点 11: joxvpus is lalfpus
      ↻ 重复节点，计数: 2

   节点 12: joxvpus is pujppus
      ↻ 重复节点，计数: 2

   节点 13: pujppus is babcpus
      ↻ 重复节点，计数: 2

   节点 14: joxvpus is pujppus
      ↻ 重复节点，计数: 3

   节点 15: pujppus is babcpus
      ↻ 重复节点，计数: 3

   节点 16: joxvpus is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: joxvpus is babcpus
      ✅ 验证成功 + LoG匹配

   节点 17: x is joxvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is joxvpus
      ✅ 验证成功 + LoG匹配

   节点 18: x is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is gevwpus → gevwpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is gevwpus
  - 前提: gevwpus is tupvpus
  - 前提: tupvpus is qaxdpus
  - 前提: qaxdpus is joxvpus and cevqpus
  - 前提: joxvpus is babcpus

   节点 19: joxvpus is babrpus and fovypus
      ↻ 重复节点，计数: 3

   节点 20: x is joxvpus
      ↻ 重复节点，计数: 2

   节点 21: x is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is gevwpus → gevwpus is babrpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is gevwpus
  - 前提: gevwpus is tupvpus
  - 前提: tupvpus is qaxdpus
  - 前提: qaxdpus is joxvpus and cevqpus
  - 前提: joxvpus is babrpus and fovypus
  ✓ 点亮LoG节点: joxvpus is babrpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 22: joxvpus is babspus and saxppus
      ↻ 重复节点，计数: 3

   节点 23: x is babspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is gevwpus → gevwpus is babspus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is gevwpus
  - 前提: gevwpus is tupvpus
  - 前提: tupvpus is qaxdpus
  - 前提: qaxdpus is joxvpus and cevqpus
  - 前提: joxvpus is babspus and saxppus
  ✓ 点亮LoG节点: joxvpus is babspus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 24: x is babcpus and babrpus and babspus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus and babrpus and babspus
[子树点亮]     └─ 点亮依赖节点: x is babcpus and babrpus and babspus and mubppus (深度2)
[子树点亮]     └─ 点亮依赖节点: joxvpus is babcpus and babrpus and babspus and mubppus (深度3)
[子树点亮]     └─ 点亮依赖节点: joxvpus is babcpus and babrpus and babspus (深度4)
[子树点亮]     └─ 点亮依赖节点: joxvpus is mubppus (深度4)
[子树点亮]     └─ 点亮依赖节点: joxvpus is mubppus and nufmpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
      ✅ 验证成功 + LoG匹配

   节点 25: lalfpus is mubppus and nufmpus
      ↻ 重复节点，计数: 2

   节点 26: joxvpus is lalfpus
      ↻ 重复节点，计数: 3

   节点 27: gevwpus is tupvpus
      ↻ 重复节点，计数: 3

   节点 28: tupvpus is qaxdpus
      ↻ 重复节点，计数: 3

   节点 29: x is babcpus and babrpus and babspus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 29
   - 新增节点: 9
   - 更新已存在节点: 20
   - 点亮的LoG节点: 13

🎯 推理质量统计:
   - 完美推理: 9 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 13节点, 10前提, 复杂度1-10

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 19
   - 前提节点: 10
   - 推理节点: 9
   - 幻觉节点: 0
   - 点亮LoG节点: 13

✅ 推理节点详情:
   🟢 x is tupvpus (出现1次, 质量:perfect)
   🟢 x is qaxdpus (出现1次, 质量:perfect)
   🟢 x is joxvpus and cevqpus (出现1次, 质量:perfect)
   🟢 joxvpus is babcpus (出现1次, 质量:perfect)
   🟢 x is joxvpus (出现2次, 质量:perfect)
   🟢 x is babcpus (出现1次, 质量:perfect)
   🟢 x is babrpus (出现1次, 质量:perfect)
   🟢 x is babspus (出现1次, 质量:perfect)
   🟢 x is babcpus and babrpus and babspus (出现2次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is joxvpus
   - x is tupvpus
   - joxvpus is mubppus and nufmpus
   - x is joxvpus and cevqpus
   - x is babcpus and babrpus and babspus and mubppus
   - x is babcpus and babrpus and babspus
   - joxvpus is babcpus and babrpus and babspus and mubppus
   - joxvpus is babcpus and babrpus and babspus
   - joxvpus is babrpus
   - joxvpus is mubppus
   - joxvpus is babspus
   - tupvpus is joxvpus and cevqpus
   - joxvpus is babcpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus and babrpus and babspus (第5层)
   节点Coverage: 13/13 = 100.00%
   前提条件Coverage: 10/10 = 100.00%
   各推理层点亮比例:
     第1层: 6/6 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/9 = 0.00%
   可推导节点: 9/9
   Strict Error Rate: 0/9 = 0.00%
   严格有效节点: 9/9

   详细分析:
     完美推理: 9 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 31/50
================================================================================
记录索引: 30
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_30.json
✅ 使用缓存结果:
   - 句子数: 47
   - 提取的语句数: 54
   - 初始条件数: 14

=== Statement提取完成 ===
总句子数: 47
成功提取: 47
失败提取: 0
总statements数: 54

=== 开始清洗Statement格式 ===
原始statements数: 54
清洗后statements数: 54
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 54
标准化后节点数: 54
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  2. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  3. [actual] zexcpus → laybpus (原始: zexcpus is laybpus)
  4. [actual] xoqrpus → minjpus (原始: xoqrpus is minjpus)
  5. [actual] x → xoqrpus (原始: x is xoqrpus)
  6. [actual] x → xoqrpus (原始: x is xoqrpus)
  7. [actual] vuclpus → zexcpus and libdpus (原始: vuclpus is zexcpus and libdpus)
  8. [actual] vuclpus → zexcpus and libdpus (原始: vuclpus is zexcpus and libdpus)
  9. [actual] cohqpus → pamnpus (原始: cohqpus is pamnpus)
  10. [actual] laybpus → sewxpus (原始: laybpus is sewxpus)
  11. [actual] soktpus → tewwpus (原始: soktpus is tewwpus)
  12. [actual] cophpus → babrpus and majzpus (原始: cophpus is babrpus and majzpus)
  13. [actual] cophpus → babrpus and majzpus (原始: cophpus is babrpus and majzpus)
  14. [actual] minjpus → saqgpus and besspus (原始: minjpus is saqgpus and besspus)
  15. [actual] punnpus → soktpus (原始: punnpus is soktpus)
  16. [actual] sewxpus → punnpus (原始: sewxpus is punnpus)
  17. [actual] tewwpus → cophpus (原始: tewwpus is cophpus)
  18. [actual] pamnpus → vuclpus (原始: pamnpus is vuclpus)
  19. [actual] saqgpus → cohqpus (原始: saqgpus is cohqpus)
  20. [actual] x → xoqrpus (原始: x is xoqrpus)
  21. [actual] xoqrpus → minjpus (原始: xoqrpus is minjpus)
  22. [actual] x → minjpus (原始: x is minjpus)
  23. [actual] minjpus → saqgpus and besspus (原始: minjpus is saqgpus and besspus)
  24. [actual] x → saqgpus and besspus (原始: x is saqgpus and besspus)
  25. [actual] saqgpus → cohqpus (原始: saqgpus is cohqpus)
  26. [planning] x → cohqpus (原始: x is cohqpus)
  27. [actual] cohqpus → pamnpus (原始: cohqpus is pamnpus)
  28. [planning] x → pamnpus (原始: x is pamnpus)
  29. [actual] pamnpus → vuclpus (原始: pamnpus is vuclpus)
  30. [planning] x → vuclpus (原始: x is vuclpus)
  31. [actual] vuclpus → zexcpus and libdpus (原始: vuclpus is zexcpus and libdpus)
  32. [planning] x → zexcpus and libdpus (原始: x is zexcpus and libdpus)
  33. [actual] zexcpus → laybpus (原始: zexcpus is laybpus)
  34. [actual] x → laybpus (原始: x is laybpus)
  35. [actual] laybpus → sewxpus (原始: laybpus is sewxpus)
  36. [planning] x → sewxpus (原始: x is sewxpus)
  37. [actual] sewxpus → punnpus (原始: sewxpus is punnpus)
  38. [actual] x → punnpus (原始: x is punnpus)
  39. [actual] punnpus → soktpus (原始: punnpus is soktpus)
  40. [planning] x → soktpus (原始: x is soktpus)
  41. [actual] soktpus → tewwpus (原始: soktpus is tewwpus)
  42. [actual] x → tewwpus (原始: x is tewwpus)
  43. [actual] tewwpus → cophpus (原始: tewwpus is cophpus)
  44. [planning] x → cophpus (原始: x is cophpus)
  45. [actual] cophpus → babrpus and majzpus (原始: cophpus is babrpus and majzpus)
  46. [actual] x → babrpus and majzpus (原始: x is babrpus and majzpus)
  47. [actual] x → babrpus (原始: x is babrpus)
  48. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  49. [actual] x → babrpus (原始: x is babrpus)
  50. [planning] x → babcpus (原始: x is babcpus)
  51. [planning] x → babrpus (原始: x is babrpus)
  52. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  53. [planning] x → babcpus (原始: x is babcpus)
  54. [actual] x → babrpus (原始: x is babrpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 17
[后处理] 加载LoG图，包含 17 个节点
  LoG节点 0: x is babcpus or babrpus (规则: MP, 深度: 1)
  LoG节点 1: x is zexcpus (规则: CE, 深度: 2)
  LoG节点 2: zexcpus is babcpus or babrpus (规则: DI, 深度: 2)
  LoG节点 3: x is zexcpus and libdpus (规则: MP, 深度: 3)
  LoG节点 4: zexcpus is babrpus (规则: MP, 深度: 3)
  LoG节点 5: x is saqgpus (规则: MP, 深度: 4)
  LoG节点 6: saqgpus is zexcpus and libdpus (规则: MP, 深度: 4)
  LoG节点 7: zexcpus is soktpus (规则: MP, 深度: 4)
  LoG节点 8: soktpus is babrpus (规则: MP, 深度: 4)
  LoG节点 9: x is minjpus (规则: MP, 深度: 5)
  LoG节点 10: minjpus is saqgpus (规则: CE, 深度: 5)
  LoG节点 11: saqgpus is pamnpus (规则: MP, 深度: 5)
  LoG节点 12: pamnpus is zexcpus and libdpus (规则: MP, 深度: 5)
  LoG节点 13: zexcpus is sewxpus (规则: MP, 深度: 5)
  LoG节点 14: sewxpus is soktpus (规则: MP, 深度: 5)
  LoG节点 15: soktpus is cophpus (规则: MP, 深度: 5)
  LoG节点 16: cophpus is babrpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 54
   - 初始条件数: 14
   - LoG图节点数: 17

📋 初始条件列表:
    1. zexcpus is laybpus
    2. xoqrpus is minjpus
    3. x is xoqrpus
    4. vuclpus is zexcpus and libdpus
    5. cohqpus is pamnpus
    6. laybpus is sewxpus
    7. soktpus is tewwpus
    8. cophpus is babrpus and majzpus
    9. minjpus is saqgpus and besspus
   10. punnpus is soktpus
   11. sewxpus is punnpus
   12. tewwpus is cophpus
   13. pamnpus is vuclpus
   14. saqgpus is cohqpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 14 个前提节点

🔍 开始处理actual节点...

   节点 1: zexcpus is laybpus
      ↻ 重复节点，计数: 2

   节点 2: xoqrpus is minjpus
      ↻ 重复节点，计数: 2

   节点 3: x is xoqrpus
      ↻ 重复节点，计数: 2

   节点 4: x is xoqrpus
      ↻ 重复节点，计数: 3

   节点 5: vuclpus is zexcpus and libdpus
      ↻ 重复节点，计数: 2

   节点 6: vuclpus is zexcpus and libdpus
      ↻ 重复节点，计数: 3

   节点 7: cohqpus is pamnpus
      ↻ 重复节点，计数: 2

   节点 8: laybpus is sewxpus
      ↻ 重复节点，计数: 2

   节点 9: soktpus is tewwpus
      ↻ 重复节点，计数: 2

   节点 10: cophpus is babrpus and majzpus
      ↻ 重复节点，计数: 2

   节点 11: cophpus is babrpus and majzpus
      ↻ 重复节点，计数: 3

   节点 12: minjpus is saqgpus and besspus
      ↻ 重复节点，计数: 2

   节点 13: punnpus is soktpus
      ↻ 重复节点，计数: 2

   节点 14: sewxpus is punnpus
      ↻ 重复节点，计数: 2

   节点 15: tewwpus is cophpus
      ↻ 重复节点，计数: 2

   节点 16: pamnpus is vuclpus
      ↻ 重复节点，计数: 2

   节点 17: saqgpus is cohqpus
      ↻ 重复节点，计数: 2

   节点 18: x is xoqrpus
      ↻ 重复节点，计数: 4

   节点 19: xoqrpus is minjpus
      ↻ 重复节点，计数: 3

   节点 20: x is minjpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is minjpus
      ✅ 验证成功 + LoG匹配

   节点 21: minjpus is saqgpus and besspus
      ↻ 重复节点，计数: 3

   节点 22: x is saqgpus and besspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xoqrpus → xoqrpus is saqgpus and besspus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is xoqrpus
  - 前提: xoqrpus is minjpus
  - 前提: minjpus is saqgpus and besspus
  ✓ 点亮LoG节点: x is saqgpus
[子树点亮]     └─ 点亮依赖节点: minjpus is saqgpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 23: saqgpus is cohqpus
      ↻ 重复节点，计数: 3

   节点 24: cohqpus is pamnpus
      ↻ 重复节点，计数: 3

   节点 25: pamnpus is vuclpus
      ↻ 重复节点，计数: 3

   节点 26: vuclpus is zexcpus and libdpus
      ↻ 重复节点，计数: 4

   节点 27: zexcpus is laybpus
      ↻ 重复节点，计数: 3

   节点 28: x is laybpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xoqrpus → xoqrpus is laybpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is xoqrpus
  - 前提: xoqrpus is minjpus
  - 前提: minjpus is saqgpus and besspus
  - 前提: saqgpus is cohqpus
  - 前提: cohqpus is pamnpus
  - 前提: pamnpus is vuclpus
  - 前提: vuclpus is zexcpus and libdpus
  - 前提: zexcpus is laybpus
  ✓ 点亮LoG节点: x is zexcpus
[子树点亮]     └─ 点亮依赖节点: x is zexcpus and libdpus (深度3)
[子树点亮]     └─ 点亮依赖节点: saqgpus is zexcpus and libdpus (深度4)
[子树点亮]     └─ 点亮依赖节点: saqgpus is pamnpus (深度5)
[子树点亮]     └─ 点亮依赖节点: pamnpus is zexcpus and libdpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 29: laybpus is sewxpus
      ↻ 重复节点，计数: 3

   节点 30: sewxpus is punnpus
      ↻ 重复节点，计数: 3

   节点 31: x is punnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xoqrpus → xoqrpus is punnpus
[后处理] 基于推理轨迹点亮节点，使用了 10 个前提条件:
  - 前提: x is xoqrpus
  - 前提: xoqrpus is minjpus
  - 前提: minjpus is saqgpus and besspus
  - 前提: saqgpus is cohqpus
  - 前提: cohqpus is pamnpus
  - 前提: pamnpus is vuclpus
  - 前提: vuclpus is zexcpus and libdpus
  - 前提: zexcpus is laybpus
  - 前提: laybpus is sewxpus
  - 前提: sewxpus is punnpus
  ✓ 点亮LoG节点: zexcpus is sewxpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 32: punnpus is soktpus
      ↻ 重复节点，计数: 3

   节点 33: soktpus is tewwpus
      ↻ 重复节点，计数: 3

   节点 34: x is tewwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xoqrpus → xoqrpus is tewwpus
[后处理] 基于推理轨迹点亮节点，使用了 12 个前提条件:
  - 前提: x is xoqrpus
  - 前提: xoqrpus is minjpus
  - 前提: minjpus is saqgpus and besspus
  - 前提: saqgpus is cohqpus
  - 前提: cohqpus is pamnpus
  - 前提: pamnpus is vuclpus
  - 前提: vuclpus is zexcpus and libdpus
  - 前提: zexcpus is laybpus
  - 前提: laybpus is sewxpus
  - 前提: sewxpus is punnpus
  - 前提: punnpus is soktpus
  - 前提: soktpus is tewwpus
  ✓ 点亮LoG节点: zexcpus is soktpus
[子树点亮]     └─ 点亮依赖节点: sewxpus is soktpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 35: tewwpus is cophpus
      ↻ 重复节点，计数: 3

   节点 36: cophpus is babrpus and majzpus
      ↻ 重复节点，计数: 4

   节点 37: x is babrpus and majzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xoqrpus → xoqrpus is babrpus and majzpus
[后处理] 基于推理轨迹点亮节点，使用了 14 个前提条件:
  - 前提: x is xoqrpus
  - 前提: xoqrpus is minjpus
  - 前提: minjpus is saqgpus and besspus
  - 前提: saqgpus is cohqpus
  - 前提: cohqpus is pamnpus
  - 前提: pamnpus is vuclpus
  - 前提: vuclpus is zexcpus and libdpus
  - 前提: zexcpus is laybpus
  - 前提: laybpus is sewxpus
  - 前提: sewxpus is punnpus
  - 前提: punnpus is soktpus
  - 前提: soktpus is tewwpus
  - 前提: tewwpus is cophpus
  - 前提: cophpus is babrpus and majzpus
  ✓ 点亮LoG节点: x is babcpus or babrpus
[子树点亮]     └─ 点亮依赖节点: zexcpus is babcpus or babrpus (深度2)
[子树点亮]     └─ 点亮依赖节点: zexcpus is babrpus (深度3)
[子树点亮]     └─ 点亮依赖节点: soktpus is babrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: soktpus is cophpus (深度5)
[子树点亮]     └─ 点亮依赖节点: cophpus is babrpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 38: x is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is babrpus and majzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is babrpus and majzpus

   节点 39: x is babrpus
      ↻ 重复节点，计数: 2

   节点 40: x is babrpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 40
   - 新增节点: 7
   - 更新已存在节点: 33
   - 点亮的LoG节点: 17

🎯 推理质量统计:
   - 完美推理: 7 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 17节点, 14前提, 复杂度1-14

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 21
   - 前提节点: 14
   - 推理节点: 7
   - 幻觉节点: 0
   - 点亮LoG节点: 17

✅ 推理节点详情:
   🟢 x is minjpus (出现1次, 质量:perfect)
   🟢 x is saqgpus and besspus (出现1次, 质量:perfect)
   🟢 x is laybpus (出现1次, 质量:perfect)
   🟢 x is punnpus (出现1次, 质量:perfect)
   🟢 x is tewwpus (出现1次, 质量:perfect)
   🟢 x is babrpus and majzpus (出现1次, 质量:perfect)
   🟢 x is babrpus (出现3次, 质量:perfect)

🔥 点亮的LoG节点:
   - saqgpus is zexcpus and libdpus
   - x is zexcpus and libdpus
   - soktpus is cophpus
   - zexcpus is babrpus
   - minjpus is saqgpus
   - pamnpus is zexcpus and libdpus
   - zexcpus is soktpus
   - x is zexcpus
   - x is saqgpus
   - sewxpus is soktpus
   - x is babcpus or babrpus
   - cophpus is babrpus
   - x is minjpus
   - zexcpus is sewxpus
   - saqgpus is pamnpus
   - soktpus is babrpus
   - zexcpus is babcpus or babrpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus or babrpus (第5层)
   节点Coverage: 17/17 = 100.00%
   前提条件Coverage: 14/14 = 100.00%
   各推理层点亮比例:
     第1层: 8/8 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/7 = 0.00%
   可推导节点: 7/7
   Strict Error Rate: 0/7 = 0.00%
   严格有效节点: 7/7

   详细分析:
     完美推理: 7 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 32/50
================================================================================
记录索引: 31
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_31.json
✅ 使用缓存结果:
   - 句子数: 146
   - 提取的语句数: 157
   - 初始条件数: 10

=== Statement提取完成 ===
总句子数: 146
成功提取: 146
失败提取: 0
总statements数: 157

=== 开始清洗Statement格式 ===
原始statements数: 157
清洗后statements数: 132
过滤掉的statements数: 25
清洗后的statements:
  1. [planning] x is babcpus
  2. [planning] x is babrpus
  3. [actual] lerwpus is babgpus and rayspus
  4. [actual] x is relmpus and muqcpus
  5. [planning] x is babgpus
  6. [planning] x is babgpus
  7. [actual] lerwpus is yexbpus
  8. [actual] yexbpus is lerwpus and pazjpus
  9. [actual] x is relmpus
  10. [actual] relmpus is babgpus
  11. [actual] x is babgpus
  12. [planning] x is babgpus and babkpus and babmpus
  13. [planning] x is babgpus
  14. [actual] lapcpus is biqdpus
  15. [actual] giympus is nusdpus
  16. [actual] totvpus is xeytpus
  17. [actual] biqdpus is rosdpus and vibwpus
  18. [planning] biqdpus is rosdpus and vibwpus
  19. [planning] biqdpus is a subset of both
  20. [actual] biqdpus is rosdpus and vibwpus
  21. [planning] biqdpus is rosdpus and vibwpus
  22. [actual] x is lapcpus
  23. [planning] x is babcpus
  24. [planning] x is babrpus
  25. [actual] babcpus is nusdpus and tismpus
  26. [actual] nusdpus is babcpus and tismpus
  27. [planning] nusdpus is babcpus
  28. [actual] nusdpus is babcpus
  29. [planning] nusdpus is a type of babcpus
  30. [actual] vepspus is mentioned in carxpus is giympus and vepspus
  31. [actual] x is lapcpus
  32. [planning] x is babcpus or babrpus
  33. [planning] x is babcpus
  34. [actual] x is lapcpus
  35. [actual] lapcpus is biqdpus
  36. [actual] biqdpus is rosdpus and vibwpus
  37. [actual] rosdpus is najspus and piwxpus
  38. [planning] rosdpus is najspus and piwxpus
  39. [actual] rosdpus is najspus and piwxpus
  40. [actual] rosdpus is totvpus and fislpus
  41. [actual] rosdpus is totvpus and fislpus
  42. [planning] rosdpus is totvpus
  43. [planning] rosdpus is an instance
  44. [actual] rosdpus is a subset of totvpus
  45. [actual] rosdpus is a subset of fislpus
  46. [planning] xeytpus is carxpus
  47. [actual] xeytpus is carxpus
  48. [actual] rosdpus is totvpus and fislpus
  49. [actual] rosdpus is totvpus and fislpus
  50. [actual] biqdpus is rosdpus
  51. [planning] rosdpus is totvpus
  52. [planning] biqdpus is totvpus
  53. [actual] lapcpus is biqdpus
  54. [actual] giympus is nusdpus
  55. [actual] totvpus is xeytpus
  56. [actual] biqdpus is rosdpus and vibwpus
  57. [actual] carxpus is giympus and vepspus
  58. [actual] rosdpus is najspus and piwxpus
  59. [actual] xeytpus is carxpus
  60. [actual] rosdpus is totvpus and fislpus
  61. [actual] x is lapcpus
  62. [actual] nusdpus is babcpus and tismpus
  63. [planning] x is babcpus
  64. [actual] x is lapcpus
  65. [actual] lapcpus is biqdpus
  66. [actual] biqdpus is rosdpus and vibwpus
  67. [actual] x is rosdpus and vibwpus
  68. [actual] x is lapcpus
  69. [actual] lapcpus is biqdpus
  70. [actual] biqdpus is rosdpus
  71. [actual] x is rosdpus
  72. [actual] rosdpus is totvpus and fislpus
  73. [actual] rosdpus is totvpus and fislpus
  74. [actual] rosdpus is totvpus and fislpus
  75. [actual] rosdpus is totvpus
  76. [actual] rosdpus is fislpus
  77. [actual] x is rosdpus
  78. [actual] x is totvpus and fislpus
  79. [planning] totvpus is xeytpus
  80. [actual] totvpus is xeytpus
  81. [planning] totvpus is xeytpus
  82. [planning] totvpus is a type of xeytpus
  83. [actual] totvpus is xeytpus
  84. [actual] totvpus is a subset of xeytpus
  85. [actual] x is totvpus
  86. [actual] x is xeytpus
  87. [planning] xeytpus is carxpus
  88. [actual] xeytpus is carxpus
  89. [planning] xeytpus is carxpus
  90. [actual] x is carxpus
  91. [planning] carxpus is giympus and vepspus
  92. [actual] carxpus is giympus and vepspus
  93. [planning] carxpus is giympus and vepspus
  94. [actual] carxpus is a type of giympus and vepspus
  95. [planning] x is carxpus
  96. [planning] x is giympus and vepspus
  97. [planning] giympus is nusdpus
  98. [actual] giympus is nusdpus
  99. [planning] giympus is nusdpus
  100. [planning] x is giympus
  101. [planning] x is nusdpus
  102. [actual] nusdpus is babcpus
  103. [actual] nusdpus is babcpus and tismpus
  104. [planning] nusdpus is babcpus and tismpus
  105. [planning] x is nusdpus
  106. [planning] x is babcpus and tismpus
  107. [actual] x is babcpus
  108. [actual] x is lapcpus→biqdpus→rosdpus→totvpus→xeytpus→carxpus→giympus→nusdpus→babcpus
  109. [actual] x is babcpus
  110. [planning] x is babcpus or babrpus
  111. [actual] x is babcpus
  112. [planning] babrpus is mentioned
  113. [actual] x is babcpus
  114. [actual] x is babcpus
  115. [actual] x is babcpus or babrpus
  116. [actual] rosdpus is totvpus and fislpus
  117. [actual] rosdpus is totvpus
  118. [actual] rosdpus is najspus and piwxpus
  119. [actual] biqdpus is vibwpus
  120. [actual] x is lapcpus
  121. [actual] lapcpus is biqdpus
  122. [actual] biqdpus is rosdpus
  123. [actual] rosdpus is totvpus
  124. [actual] totvpus is xeytpus
  125. [actual] xeytpus is carxpus
  126. [actual] carxpus is giympus
  127. [actual] giympus is nusdpus
  128. [actual] nusdpus is babcpus
  129. [actual] x is babcpus
  130. [actual] x is babcpus
  131. [actual] x is babcpus or babrpus
  132. [actual] x is babcpus

=== 开始标准化和解析节点 ===
清洗后statements数: 132
标准化后节点数: 128
过滤掉的无效实体数: 4
标准化后的节点:
  1. [planning] x → babcpus (原始: x is babcpus)
  2. [planning] x → babrpus (原始: x is babrpus)
  3. [actual] lerwpus → babgpus and rayspus (原始: lerwpus is babgpus and rayspus)
  4. [actual] x → relmpus and muqcpus (原始: x is relmpus and muqcpus)
  5. [planning] x → babgpus (原始: x is babgpus)
  6. [planning] x → babgpus (原始: x is babgpus)
  7. [actual] lerwpus → yexbpus (原始: lerwpus is yexbpus)
  8. [actual] yexbpus → lerwpus and pazjpus (原始: yexbpus is lerwpus and pazjpus)
  9. [actual] x → relmpus (原始: x is relmpus)
  10. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  11. [actual] x → babgpus (原始: x is babgpus)
  12. [planning] x → babgpus and babkpus and babmpus (原始: x is babgpus and babkpus and babmpus)
  13. [planning] x → babgpus (原始: x is babgpus)
  14. [actual] lapcpus → biqdpus (原始: lapcpus is biqdpus)
  15. [actual] giympus → nusdpus (原始: giympus is nusdpus)
  16. [actual] totvpus → xeytpus (原始: totvpus is xeytpus)
  17. [actual] biqdpus → rosdpus and vibwpus (原始: biqdpus is rosdpus and vibwpus)
  18. [planning] biqdpus → rosdpus and vibwpus (原始: biqdpus is rosdpus and vibwpus)
  19. [actual] biqdpus → rosdpus and vibwpus (原始: biqdpus is rosdpus and vibwpus)
  20. [planning] biqdpus → rosdpus and vibwpus (原始: biqdpus is rosdpus and vibwpus)
  21. [actual] x → lapcpus (原始: x is lapcpus)
  22. [planning] x → babcpus (原始: x is babcpus)
  23. [planning] x → babrpus (原始: x is babrpus)
  24. [actual] babcpus → nusdpus and tismpus (原始: babcpus is nusdpus and tismpus)
  25. [actual] nusdpus → babcpus and tismpus (原始: nusdpus is babcpus and tismpus)
  26. [planning] nusdpus → babcpus (原始: nusdpus is babcpus)
  27. [actual] nusdpus → babcpus (原始: nusdpus is babcpus)
  28. [actual] x → lapcpus (原始: x is lapcpus)
  29. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  30. [planning] x → babcpus (原始: x is babcpus)
  31. [actual] x → lapcpus (原始: x is lapcpus)
  32. [actual] lapcpus → biqdpus (原始: lapcpus is biqdpus)
  33. [actual] biqdpus → rosdpus and vibwpus (原始: biqdpus is rosdpus and vibwpus)
  34. [actual] rosdpus → najspus and piwxpus (原始: rosdpus is najspus and piwxpus)
  35. [planning] rosdpus → najspus and piwxpus (原始: rosdpus is najspus and piwxpus)
  36. [actual] rosdpus → najspus and piwxpus (原始: rosdpus is najspus and piwxpus)
  37. [actual] rosdpus → totvpus and fislpus (原始: rosdpus is totvpus and fislpus)
  38. [actual] rosdpus → totvpus and fislpus (原始: rosdpus is totvpus and fislpus)
  39. [planning] rosdpus → totvpus (原始: rosdpus is totvpus)
  40. [planning] xeytpus → carxpus (原始: xeytpus is carxpus)
  41. [actual] xeytpus → carxpus (原始: xeytpus is carxpus)
  42. [actual] rosdpus → totvpus and fislpus (原始: rosdpus is totvpus and fislpus)
  43. [actual] rosdpus → totvpus and fislpus (原始: rosdpus is totvpus and fislpus)
  44. [actual] biqdpus → rosdpus (原始: biqdpus is rosdpus)
  45. [planning] rosdpus → totvpus (原始: rosdpus is totvpus)
  46. [planning] biqdpus → totvpus (原始: biqdpus is totvpus)
  47. [actual] lapcpus → biqdpus (原始: lapcpus is biqdpus)
  48. [actual] giympus → nusdpus (原始: giympus is nusdpus)
  49. [actual] totvpus → xeytpus (原始: totvpus is xeytpus)
  50. [actual] biqdpus → rosdpus and vibwpus (原始: biqdpus is rosdpus and vibwpus)
  51. [actual] carxpus → giympus and vepspus (原始: carxpus is giympus and vepspus)
  52. [actual] rosdpus → najspus and piwxpus (原始: rosdpus is najspus and piwxpus)
  53. [actual] xeytpus → carxpus (原始: xeytpus is carxpus)
  54. [actual] rosdpus → totvpus and fislpus (原始: rosdpus is totvpus and fislpus)
  55. [actual] x → lapcpus (原始: x is lapcpus)
  56. [actual] nusdpus → babcpus and tismpus (原始: nusdpus is babcpus and tismpus)
  57. [planning] x → babcpus (原始: x is babcpus)
  58. [actual] x → lapcpus (原始: x is lapcpus)
  59. [actual] lapcpus → biqdpus (原始: lapcpus is biqdpus)
  60. [actual] biqdpus → rosdpus and vibwpus (原始: biqdpus is rosdpus and vibwpus)
  61. [actual] x → rosdpus and vibwpus (原始: x is rosdpus and vibwpus)
  62. [actual] x → lapcpus (原始: x is lapcpus)
  63. [actual] lapcpus → biqdpus (原始: lapcpus is biqdpus)
  64. [actual] biqdpus → rosdpus (原始: biqdpus is rosdpus)
  65. [actual] x → rosdpus (原始: x is rosdpus)
  66. [actual] rosdpus → totvpus and fislpus (原始: rosdpus is totvpus and fislpus)
  67. [actual] rosdpus → totvpus and fislpus (原始: rosdpus is totvpus and fislpus)
  68. [actual] rosdpus → totvpus and fislpus (原始: rosdpus is totvpus and fislpus)
  69. [actual] rosdpus → totvpus (原始: rosdpus is totvpus)
  70. [actual] rosdpus → fislpus (原始: rosdpus is fislpus)
  71. [actual] x → rosdpus (原始: x is rosdpus)
  72. [actual] x → totvpus and fislpus (原始: x is totvpus and fislpus)
  73. [planning] totvpus → xeytpus (原始: totvpus is xeytpus)
  74. [actual] totvpus → xeytpus (原始: totvpus is xeytpus)
  75. [planning] totvpus → xeytpus (原始: totvpus is xeytpus)
  76. [actual] totvpus → xeytpus (原始: totvpus is xeytpus)
  77. [actual] x → totvpus (原始: x is totvpus)
  78. [actual] x → xeytpus (原始: x is xeytpus)
  79. [planning] xeytpus → carxpus (原始: xeytpus is carxpus)
  80. [actual] xeytpus → carxpus (原始: xeytpus is carxpus)
  81. [planning] xeytpus → carxpus (原始: xeytpus is carxpus)
  82. [actual] x → carxpus (原始: x is carxpus)
  83. [planning] carxpus → giympus and vepspus (原始: carxpus is giympus and vepspus)
  84. [actual] carxpus → giympus and vepspus (原始: carxpus is giympus and vepspus)
  85. [planning] carxpus → giympus and vepspus (原始: carxpus is giympus and vepspus)
  86. [planning] x → carxpus (原始: x is carxpus)
  87. [planning] x → giympus and vepspus (原始: x is giympus and vepspus)
  88. [planning] giympus → nusdpus (原始: giympus is nusdpus)
  89. [actual] giympus → nusdpus (原始: giympus is nusdpus)
  90. [planning] giympus → nusdpus (原始: giympus is nusdpus)
  91. [planning] x → giympus (原始: x is giympus)
  92. [planning] x → nusdpus (原始: x is nusdpus)
  93. [actual] nusdpus → babcpus (原始: nusdpus is babcpus)
  94. [actual] nusdpus → babcpus and tismpus (原始: nusdpus is babcpus and tismpus)
  95. [planning] nusdpus → babcpus and tismpus (原始: nusdpus is babcpus and tismpus)
  96. [planning] x → nusdpus (原始: x is nusdpus)
  97. [planning] x → babcpus and tismpus (原始: x is babcpus and tismpus)
  98. [actual] x → babcpus (原始: x is babcpus)
  99. [actual] biqdpus → rosdpus (原始: biqdpus is rosdpus)
  100. [actual] rosdpus → totvpus (原始: rosdpus is totvpus)
  101. [actual] totvpus → xeytpus (原始: totvpus is xeytpus)
  102. [actual] xeytpus → carxpus (原始: xeytpus is carxpus)
  103. [actual] carxpus → giympus (原始: carxpus is giympus)
  104. [actual] giympus → nusdpus (原始: giympus is nusdpus)
  105. [actual] nusdpus → babcpus (原始: nusdpus is babcpus)
  106. [actual] x → babcpus (原始: x is babcpus)
  107. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  108. [actual] x → babcpus (原始: x is babcpus)
  109. [actual] x → babcpus (原始: x is babcpus)
  110. [actual] x → babcpus (原始: x is babcpus)
  111. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  112. [actual] rosdpus → totvpus and fislpus (原始: rosdpus is totvpus and fislpus)
  113. [actual] rosdpus → totvpus (原始: rosdpus is totvpus)
  114. [actual] rosdpus → najspus and piwxpus (原始: rosdpus is najspus and piwxpus)
  115. [actual] biqdpus → vibwpus (原始: biqdpus is vibwpus)
  116. [actual] x → lapcpus (原始: x is lapcpus)
  117. [actual] lapcpus → biqdpus (原始: lapcpus is biqdpus)
  118. [actual] biqdpus → rosdpus (原始: biqdpus is rosdpus)
  119. [actual] rosdpus → totvpus (原始: rosdpus is totvpus)
  120. [actual] totvpus → xeytpus (原始: totvpus is xeytpus)
  121. [actual] xeytpus → carxpus (原始: xeytpus is carxpus)
  122. [actual] carxpus → giympus (原始: carxpus is giympus)
  123. [actual] giympus → nusdpus (原始: giympus is nusdpus)
  124. [actual] nusdpus → babcpus (原始: nusdpus is babcpus)
  125. [actual] x → babcpus (原始: x is babcpus)
  126. [actual] x → babcpus (原始: x is babcpus)
  127. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  128. [actual] x → babcpus (原始: x is babcpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 16
[后处理] 加载LoG图，包含 16 个节点
  LoG节点 0: x is babcpus or babrpus (规则: MP, 深度: 1)
  LoG节点 1: x is totvpus (规则: CE, 深度: 2)
  LoG节点 2: totvpus is babcpus or babrpus (规则: DI, 深度: 2)
  LoG节点 3: x is totvpus and najspus (规则: MP, 深度: 3)
  LoG节点 4: totvpus is babcpus (规则: MP, 深度: 3)
  LoG节点 5: x is rosdpus (规则: MP, 深度: 4)
  LoG节点 6: rosdpus is totvpus and najspus (规则: CI, 深度: 4)
  LoG节点 7: totvpus is giympus (规则: MP, 深度: 4)
  LoG节点 8: giympus is babcpus (规则: CE, 深度: 4)
  LoG节点 9: x is biqdpus (规则: MP, 深度: 5)
  LoG节点 10: biqdpus is rosdpus (规则: CE, 深度: 5)
  LoG节点 11: rosdpus is totvpus (规则: CE, 深度: 5)
  LoG节点 12: rosdpus is najspus (规则: CE, 深度: 5)
  LoG节点 13: totvpus is carxpus (规则: MP, 深度: 5)
  LoG节点 14: carxpus is giympus (规则: CE, 深度: 5)
  LoG节点 15: giympus is babcpus and tismpus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 128
   - 初始条件数: 10
   - LoG图节点数: 16

📋 初始条件列表:
    1. lapcpus is biqdpus
    2. giympus is nusdpus
    3. totvpus is xeytpus
    4. biqdpus is rosdpus and vibwpus
    5. carxpus is giympus and vepspus
    6. rosdpus is najspus and piwxpus
    7. xeytpus is carxpus
    8. rosdpus is totvpus and fislpus
    9. x is lapcpus
   10. nusdpus is babcpus and tismpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 10 个前提节点

🔍 开始处理actual节点...

   节点 1: lerwpus is babgpus and rayspus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 2: x is relmpus and muqcpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 3: lerwpus is yexbpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 4: yexbpus is lerwpus and pazjpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 5: x is relmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is relmpus and muqcpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is relmpus and muqcpus

   节点 6: relmpus is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 7: x is babgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is relmpus → relmpus is babgpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is relmpus
  - 前提: relmpus is babgpus

   节点 8: lapcpus is biqdpus
      ↻ 重复节点，计数: 2

   节点 9: giympus is nusdpus
      ↻ 重复节点，计数: 2

   节点 10: totvpus is xeytpus
      ↻ 重复节点，计数: 2

   节点 11: biqdpus is rosdpus and vibwpus
      ↻ 重复节点，计数: 2

   节点 12: biqdpus is rosdpus and vibwpus
      ↻ 重复节点，计数: 3

   节点 13: x is lapcpus
      ↻ 重复节点，计数: 2

   节点 14: babcpus is nusdpus and tismpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 15: nusdpus is babcpus and tismpus
      ↻ 重复节点，计数: 2

   节点 16: nusdpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: nusdpus is babcpus and tismpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: nusdpus is babcpus and tismpus

   节点 17: x is lapcpus
      ↻ 重复节点，计数: 3

   节点 18: x is lapcpus
      ↻ 重复节点，计数: 4

   节点 19: lapcpus is biqdpus
      ↻ 重复节点，计数: 3

   节点 20: biqdpus is rosdpus and vibwpus
      ↻ 重复节点，计数: 4

   节点 21: rosdpus is najspus and piwxpus
      ↻ 重复节点，计数: 2

   节点 22: rosdpus is najspus and piwxpus
      ↻ 重复节点，计数: 3

   节点 23: rosdpus is totvpus and fislpus
      ↻ 重复节点，计数: 2

   节点 24: rosdpus is totvpus and fislpus
      ↻ 重复节点，计数: 3

   节点 25: xeytpus is carxpus
      ↻ 重复节点，计数: 2

   节点 26: rosdpus is totvpus and fislpus
      ↻ 重复节点，计数: 4

   节点 27: rosdpus is totvpus and fislpus
      ↻ 重复节点，计数: 5

   节点 28: biqdpus is rosdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: biqdpus is rosdpus
      ✅ 验证成功 + LoG匹配

   节点 29: lapcpus is biqdpus
      ↻ 重复节点，计数: 4

   节点 30: giympus is nusdpus
      ↻ 重复节点，计数: 3

   节点 31: totvpus is xeytpus
      ↻ 重复节点，计数: 3

   节点 32: biqdpus is rosdpus and vibwpus
      ↻ 重复节点，计数: 5

   节点 33: carxpus is giympus and vepspus
      ↻ 重复节点，计数: 2

   节点 34: rosdpus is najspus and piwxpus
      ↻ 重复节点，计数: 4

   节点 35: xeytpus is carxpus
      ↻ 重复节点，计数: 3

   节点 36: rosdpus is totvpus and fislpus
      ↻ 重复节点，计数: 6

   节点 37: x is lapcpus
      ↻ 重复节点，计数: 5

   节点 38: nusdpus is babcpus and tismpus
      ↻ 重复节点，计数: 3

   节点 39: x is lapcpus
      ↻ 重复节点，计数: 6

   节点 40: lapcpus is biqdpus
      ↻ 重复节点，计数: 5

   节点 41: biqdpus is rosdpus and vibwpus
      ↻ 重复节点，计数: 6

   节点 42: x is rosdpus and vibwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is lapcpus → lapcpus is rosdpus and vibwpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is lapcpus
  - 前提: lapcpus is biqdpus
  - 前提: biqdpus is rosdpus and vibwpus
  ✓ 点亮LoG节点: x is rosdpus
[子树点亮]     └─ 点亮依赖节点: x is biqdpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 43: x is lapcpus
      ↻ 重复节点，计数: 7

   节点 44: lapcpus is biqdpus
      ↻ 重复节点，计数: 6

   节点 45: biqdpus is rosdpus
      ↻ 重复节点，计数: 2

   节点 46: x is rosdpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 47: rosdpus is totvpus and fislpus
      ↻ 重复节点，计数: 7

   节点 48: rosdpus is totvpus and fislpus
      ↻ 重复节点，计数: 8

   节点 49: rosdpus is totvpus and fislpus
      ↻ 重复节点，计数: 9

   节点 50: rosdpus is totvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: rosdpus is totvpus
      ✅ 验证成功 + LoG匹配

   节点 51: rosdpus is fislpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: rosdpus is totvpus and fislpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: rosdpus is totvpus and fislpus

   节点 52: x is rosdpus
      ↻ 重复节点，计数: 2

   节点 53: x is totvpus and fislpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is lapcpus → lapcpus is totvpus and fislpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is lapcpus
  - 前提: lapcpus is biqdpus
  - 前提: biqdpus is rosdpus
  - 前提: rosdpus is totvpus and fislpus
  ✓ 点亮LoG节点: x is totvpus
[子树点亮]     └─ 点亮依赖节点: x is totvpus and najspus (深度3)
[子树点亮]     └─ 点亮依赖节点: rosdpus is totvpus and najspus (深度4)
[子树点亮]     └─ 点亮依赖节点: rosdpus is najspus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 54: totvpus is xeytpus
      ↻ 重复节点，计数: 4

   节点 55: totvpus is xeytpus
      ↻ 重复节点，计数: 5

   节点 56: x is totvpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 57: x is xeytpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is lapcpus → lapcpus is xeytpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is lapcpus
  - 前提: lapcpus is biqdpus
  - 前提: biqdpus is rosdpus
  - 前提: rosdpus is totvpus
  - 前提: totvpus is xeytpus

   节点 58: xeytpus is carxpus
      ↻ 重复节点，计数: 4

   节点 59: x is carxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is lapcpus → lapcpus is carxpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is lapcpus
  - 前提: lapcpus is biqdpus
  - 前提: biqdpus is rosdpus
  - 前提: rosdpus is totvpus
  - 前提: totvpus is xeytpus
  - 前提: xeytpus is carxpus
  ✓ 点亮LoG节点: totvpus is carxpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 60: carxpus is giympus and vepspus
      ↻ 重复节点，计数: 3

   节点 61: giympus is nusdpus
      ↻ 重复节点，计数: 4

   节点 62: nusdpus is babcpus
      ↻ 重复节点，计数: 2

   节点 63: nusdpus is babcpus and tismpus
      ↻ 重复节点，计数: 4

   节点 64: x is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is lapcpus → lapcpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is lapcpus
  - 前提: lapcpus is biqdpus
  - 前提: biqdpus is rosdpus
  - 前提: rosdpus is totvpus
  - 前提: totvpus is xeytpus
  - 前提: xeytpus is carxpus
  - 前提: carxpus is giympus and vepspus
  - 前提: giympus is nusdpus
  - 前提: nusdpus is babcpus
  ✓ 点亮LoG节点: x is babcpus or babrpus
[子树点亮]     └─ 点亮依赖节点: totvpus is babcpus or babrpus (深度2)
[子树点亮]     └─ 点亮依赖节点: totvpus is babcpus (深度3)
[子树点亮]     └─ 点亮依赖节点: totvpus is giympus (深度4)
[子树点亮]     └─ 点亮依赖节点: giympus is babcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: carxpus is giympus (深度5)
[子树点亮]     └─ 点亮依赖节点: giympus is babcpus and tismpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 6 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 65: biqdpus is rosdpus
      ↻ 重复节点，计数: 3

   节点 66: rosdpus is totvpus
      ↻ 重复节点，计数: 2

   节点 67: totvpus is xeytpus
      ↻ 重复节点，计数: 6

   节点 68: xeytpus is carxpus
      ↻ 重复节点，计数: 5

   节点 69: carxpus is giympus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 70: giympus is nusdpus
      ↻ 重复节点，计数: 5

   节点 71: nusdpus is babcpus
      ↻ 重复节点，计数: 3

   节点 72: x is babcpus
      ↻ 重复节点，计数: 2

   节点 73: x is babcpus
      ↻ 重复节点，计数: 3

   节点 74: x is babcpus
      ↻ 重复节点，计数: 4

   节点 75: x is babcpus
      ↻ 重复节点，计数: 5

   节点 76: x is babcpus or babrpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 77: rosdpus is totvpus and fislpus
      ↻ 重复节点，计数: 10

   节点 78: rosdpus is totvpus
      ↻ 重复节点，计数: 3

   节点 79: rosdpus is najspus and piwxpus
      ↻ 重复节点，计数: 5

   节点 80: biqdpus is vibwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: biqdpus is rosdpus and vibwpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: biqdpus is rosdpus and vibwpus

   节点 81: x is lapcpus
      ↻ 重复节点，计数: 8

   节点 82: lapcpus is biqdpus
      ↻ 重复节点，计数: 7

   节点 83: biqdpus is rosdpus
      ↻ 重复节点，计数: 4

   节点 84: rosdpus is totvpus
      ↻ 重复节点，计数: 4

   节点 85: totvpus is xeytpus
      ↻ 重复节点，计数: 7

   节点 86: xeytpus is carxpus
      ↻ 重复节点，计数: 6

   节点 87: carxpus is giympus
      ↻ 重复节点，计数: 2

   节点 88: giympus is nusdpus
      ↻ 重复节点，计数: 6

   节点 89: nusdpus is babcpus
      ↻ 重复节点，计数: 4

   节点 90: x is babcpus
      ↻ 重复节点，计数: 6

   节点 91: x is babcpus
      ↻ 重复节点，计数: 7

   节点 92: x is babcpus or babrpus
      ↻ 重复节点，计数: 2

   节点 93: x is babcpus
      ↻ 重复节点，计数: 8

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 93
   - 新增节点: 22
   - 更新已存在节点: 71
   - 点亮的LoG节点: 16

🎯 推理质量统计:
   - 完美推理: 10 (节点正确 + 路径正确)
   - 部分推理: 10 (节点正确 + 路径部分错误)
   - 无效推理: 2 (节点错误或路径完全错误)
[LoG分析] LoG图: 16节点, 10前提, 复杂度1-10

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 32
   - 前提节点: 10
   - 推理节点: 16
   - 幻觉节点: 6
   - 点亮LoG节点: 16

❌ 幻觉节点详情:
   - lerwpus is babgpus and rayspus (出现1次)
   - x is relmpus and muqcpus (出现1次)
   - lerwpus is yexbpus (出现1次)
   - yexbpus is lerwpus and pazjpus (出现1次)
   - relmpus is babgpus (出现1次)
   - babcpus is nusdpus and tismpus (出现1次)

✅ 推理节点详情:
   🟡 x is relmpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is babgpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus', 'relmpus is babgpus']
   🟢 nusdpus is babcpus (出现4次, 质量:perfect)
   🟢 biqdpus is rosdpus (出现4次, 质量:perfect)
   🟡 x is rosdpus and vibwpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is rosdpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟢 rosdpus is totvpus (出现4次, 质量:perfect)
   🟢 rosdpus is fislpus (出现1次, 质量:perfect)
   🟡 x is totvpus and fislpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is totvpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is xeytpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is carxpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is babcpus (出现8次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟢 carxpus is giympus (出现2次, 质量:perfect)
   🟡 x is babcpus or babrpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟢 biqdpus is vibwpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is totvpus and najspus
   - x is totvpus
   - rosdpus is najspus
   - rosdpus is totvpus
   - x is babcpus or babrpus
   - giympus is babcpus and tismpus
   - totvpus is babcpus
   - totvpus is carxpus
   - rosdpus is totvpus and najspus
   - x is rosdpus
   - totvpus is babcpus or babrpus
   - giympus is babcpus
   - carxpus is giympus
   - totvpus is giympus
   - biqdpus is rosdpus
   - x is biqdpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus or babrpus (第5层)
   节点Coverage: 16/16 = 100.00%
   前提条件Coverage: 10/10 = 100.00%
   各推理层点亮比例:
     第1层: 7/7 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 6/22 = 27.27%
   可推导节点: 16/22
   Strict Error Rate: 16/22 = 72.73%
   严格有效节点: 6/22

   详细分析:
     完美推理: 10 (45.45%)
     部分推理: 10 (45.45%)
     无效推理: 2 (9.09%)

================================================================================
处理记录 33/50
================================================================================
记录索引: 32
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_32.json
✅ 使用缓存结果:
   - 句子数: 55
   - 提取的语句数: 62
   - 初始条件数: 7

=== Statement提取完成 ===
总句子数: 55
成功提取: 55
失败提取: 0
总statements数: 62

=== 开始清洗Statement格式 ===
原始statements数: 62
清洗后statements数: 54
过滤掉的statements数: 8
清洗后的statements:
  1. [actual] siqtpus is babspus and rafnpus
  2. [actual] widlpus is hokypus and qufppus and yinvpus
  3. [actual] sorgpus is wiggpus and wiqwpus
  4. [actual] hokypus is sorgpus
  5. [actual] wiggpus is siqtpus
  6. [actual] wiggpus is babcpus and babrpus and qebgpus
  7. [actual] x is widlpus and lacbpus
  8. [planning] x is babcpus and babrpus and babspus
  9. [actual] x is widlpus and lacbpus
  10. [planning] widlpus is B
  11. [actual] widlpus is hokypus and qufppus and yinvpus
  12. [actual] widlpus is hokypus and qufppus and yinvpus
  13. [planning] widlpus is babcpus
  14. [planning] widlpus is babrpus
  15. [planning] widlpus is babspus
  16. [planning] x is babcpus
  17. [planning] x is babrpus
  18. [planning] x is babspus
  19. [actual] hokypus is sorgpus
  20. [actual] widlpus is hokypus
  21. [actual] hokypus is sorgpus
  22. [planning] widlpus is sorgpus
  23. [actual] sorgpus is wiggpus and wiqwpus
  24. [actual] widlpus is sorgpus
  25. [planning] widlpus is wiggpus
  26. [planning] widlpus is wiqwpus
  27. [actual] wiggpus is siqtpus
  28. [actual] wiggpus is babcpus and babrpus and qebgpus
  29. [actual] siqtpus is babspus and rafnpus
  30. [actual] x is widlpus
  31. [actual] widlpus is hokypus
  32. [actual] hokypus is sorgpus
  33. [actual] widlpus is sorgpus
  34. [actual] sorgpus is wiggpus and wiqwpus
  35. [actual] widlpus is wiggpus
  36. [actual] wiggpus is siqtpus
  37. [actual] widlpus is siqtpus
  38. [actual] wiggpus is babcpus and babrpus and qebgpus
  39. [actual] widlpus is wiggpus
  40. [actual] widlpus is babcpus and babrpus and qebgpus
  41. [actual] x is babcpus and babrpus
  42. [actual] x is widlpus
  43. [planning] x is babspus
  44. [actual] widlpus is siqtpus
  45. [actual] wiggpus is siqtpus
  46. [actual] widlpus is wiggpus
  47. [actual] siqtpus is babspus and rafnpus
  48. [actual] widlpus is babspus
  49. [actual] x is babspus
  50. [actual] x is babcpus and babrpus and babspus
  51. [actual] x is widlpus and lacbpus
  52. [actual] widlpus is wiggpus
  53. [actual] wiggpus is babcpus and babrpus
  54. [actual] siqtpus is babspus

=== 开始标准化和解析节点 ===
清洗后statements数: 54
标准化后节点数: 53
过滤掉的无效实体数: 1
标准化后的节点:
  1. [actual] siqtpus → babspus and rafnpus (原始: siqtpus is babspus and rafnpus)
  2. [actual] widlpus → hokypus and qufppus and yinvpus (原始: widlpus is hokypus and qufppus and yinvpus)
  3. [actual] sorgpus → wiggpus and wiqwpus (原始: sorgpus is wiggpus and wiqwpus)
  4. [actual] hokypus → sorgpus (原始: hokypus is sorgpus)
  5. [actual] wiggpus → siqtpus (原始: wiggpus is siqtpus)
  6. [actual] wiggpus → babcpus and babrpus and qebgpus (原始: wiggpus is babcpus and babrpus and qebgpus)
  7. [actual] x → widlpus and lacbpus (原始: x is widlpus and lacbpus)
  8. [planning] x → babcpus and babrpus and babspus (原始: x is babcpus and babrpus and babspus)
  9. [actual] x → widlpus and lacbpus (原始: x is widlpus and lacbpus)
  10. [actual] widlpus → hokypus and qufppus and yinvpus (原始: widlpus is hokypus and qufppus and yinvpus)
  11. [actual] widlpus → hokypus and qufppus and yinvpus (原始: widlpus is hokypus and qufppus and yinvpus)
  12. [planning] widlpus → babcpus (原始: widlpus is babcpus)
  13. [planning] widlpus → babrpus (原始: widlpus is babrpus)
  14. [planning] widlpus → babspus (原始: widlpus is babspus)
  15. [planning] x → babcpus (原始: x is babcpus)
  16. [planning] x → babrpus (原始: x is babrpus)
  17. [planning] x → babspus (原始: x is babspus)
  18. [actual] hokypus → sorgpus (原始: hokypus is sorgpus)
  19. [actual] widlpus → hokypus (原始: widlpus is hokypus)
  20. [actual] hokypus → sorgpus (原始: hokypus is sorgpus)
  21. [planning] widlpus → sorgpus (原始: widlpus is sorgpus)
  22. [actual] sorgpus → wiggpus and wiqwpus (原始: sorgpus is wiggpus and wiqwpus)
  23. [actual] widlpus → sorgpus (原始: widlpus is sorgpus)
  24. [planning] widlpus → wiggpus (原始: widlpus is wiggpus)
  25. [planning] widlpus → wiqwpus (原始: widlpus is wiqwpus)
  26. [actual] wiggpus → siqtpus (原始: wiggpus is siqtpus)
  27. [actual] wiggpus → babcpus and babrpus and qebgpus (原始: wiggpus is babcpus and babrpus and qebgpus)
  28. [actual] siqtpus → babspus and rafnpus (原始: siqtpus is babspus and rafnpus)
  29. [actual] x → widlpus (原始: x is widlpus)
  30. [actual] widlpus → hokypus (原始: widlpus is hokypus)
  31. [actual] hokypus → sorgpus (原始: hokypus is sorgpus)
  32. [actual] widlpus → sorgpus (原始: widlpus is sorgpus)
  33. [actual] sorgpus → wiggpus and wiqwpus (原始: sorgpus is wiggpus and wiqwpus)
  34. [actual] widlpus → wiggpus (原始: widlpus is wiggpus)
  35. [actual] wiggpus → siqtpus (原始: wiggpus is siqtpus)
  36. [actual] widlpus → siqtpus (原始: widlpus is siqtpus)
  37. [actual] wiggpus → babcpus and babrpus and qebgpus (原始: wiggpus is babcpus and babrpus and qebgpus)
  38. [actual] widlpus → wiggpus (原始: widlpus is wiggpus)
  39. [actual] widlpus → babcpus and babrpus and qebgpus (原始: widlpus is babcpus and babrpus and qebgpus)
  40. [actual] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  41. [actual] x → widlpus (原始: x is widlpus)
  42. [planning] x → babspus (原始: x is babspus)
  43. [actual] widlpus → siqtpus (原始: widlpus is siqtpus)
  44. [actual] wiggpus → siqtpus (原始: wiggpus is siqtpus)
  45. [actual] widlpus → wiggpus (原始: widlpus is wiggpus)
  46. [actual] siqtpus → babspus and rafnpus (原始: siqtpus is babspus and rafnpus)
  47. [actual] widlpus → babspus (原始: widlpus is babspus)
  48. [actual] x → babspus (原始: x is babspus)
  49. [actual] x → babcpus and babrpus and babspus (原始: x is babcpus and babrpus and babspus)
  50. [actual] x → widlpus and lacbpus (原始: x is widlpus and lacbpus)
  51. [actual] widlpus → wiggpus (原始: widlpus is wiggpus)
  52. [actual] wiggpus → babcpus and babrpus (原始: wiggpus is babcpus and babrpus)
  53. [actual] siqtpus → babspus (原始: siqtpus is babspus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 12
[后处理] 加载LoG图，包含 12 个节点
  LoG节点 0: x is babcpus and babrpus and babspus (规则: CE, 深度: 1)
  LoG节点 1: x is babcpus and babrpus and babspus and rafnpus (规则: MP, 深度: 2)
  LoG节点 2: x is hokypus (规则: CE, 深度: 3)
  LoG节点 3: hokypus is babcpus and babrpus and babspus and rafnpus (规则: MP, 深度: 3)
  LoG节点 4: x is hokypus and qufppus (规则: MP, 深度: 4)
  LoG节点 5: hokypus is wiggpus (规则: CE, 深度: 4)
  LoG节点 6: wiggpus is babcpus and babrpus and babspus and rafnpus (规则: CI, 深度: 4)
  LoG节点 7: x is widlpus (规则: CE, 深度: 5)
  LoG节点 8: widlpus is hokypus and qufppus (规则: CE, 深度: 5)
  LoG节点 9: hokypus is wiggpus and wiqwpus (规则: MP, 深度: 5)
  LoG节点 10: wiggpus is babcpus and babrpus (规则: CE, 深度: 5)
  LoG节点 11: wiggpus is babspus and rafnpus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 53
   - 初始条件数: 7
   - LoG图节点数: 12

📋 初始条件列表:
    1. siqtpus is babspus and rafnpus
    2. widlpus is hokypus and qufppus and yinvpus
    3. sorgpus is wiggpus and wiqwpus
    4. hokypus is sorgpus
    5. wiggpus is siqtpus
    6. wiggpus is babcpus and babrpus and qebgpus
    7. x is widlpus and lacbpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 7 个前提节点

🔍 开始处理actual节点...

   节点 1: siqtpus is babspus and rafnpus
      ↻ 重复节点，计数: 2

   节点 2: widlpus is hokypus and qufppus and yinvpus
      ↻ 重复节点，计数: 2

   节点 3: sorgpus is wiggpus and wiqwpus
      ↻ 重复节点，计数: 2

   节点 4: hokypus is sorgpus
      ↻ 重复节点，计数: 2

   节点 5: wiggpus is siqtpus
      ↻ 重复节点，计数: 2

   节点 6: wiggpus is babcpus and babrpus and qebgpus
      ↻ 重复节点，计数: 2

   节点 7: x is widlpus and lacbpus
      ↻ 重复节点，计数: 2

   节点 8: x is widlpus and lacbpus
      ↻ 重复节点，计数: 3

   节点 9: widlpus is hokypus and qufppus and yinvpus
      ↻ 重复节点，计数: 3

   节点 10: widlpus is hokypus and qufppus and yinvpus
      ↻ 重复节点，计数: 4

   节点 11: hokypus is sorgpus
      ↻ 重复节点，计数: 3

   节点 12: widlpus is hokypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: widlpus is hokypus and qufppus and yinvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: widlpus is hokypus and qufppus and yinvpus
  ✓ 点亮LoG节点: widlpus is hokypus and qufppus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 13: hokypus is sorgpus
      ↻ 重复节点，计数: 4

   节点 14: sorgpus is wiggpus and wiqwpus
      ↻ 重复节点，计数: 3

   节点 15: widlpus is sorgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: widlpus is hokypus → hokypus is sorgpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: widlpus is hokypus
  - 前提: hokypus is sorgpus

   节点 16: wiggpus is siqtpus
      ↻ 重复节点，计数: 3

   节点 17: wiggpus is babcpus and babrpus and qebgpus
      ↻ 重复节点，计数: 3

   节点 18: siqtpus is babspus and rafnpus
      ↻ 重复节点，计数: 3

   节点 19: x is widlpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is widlpus
      ✅ 验证成功 + LoG匹配

   节点 20: widlpus is hokypus
      ↻ 重复节点，计数: 2

   节点 21: hokypus is sorgpus
      ↻ 重复节点，计数: 5

   节点 22: widlpus is sorgpus
      ↻ 重复节点，计数: 2

   节点 23: sorgpus is wiggpus and wiqwpus
      ↻ 重复节点，计数: 4

   节点 24: widlpus is wiggpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: widlpus is hokypus → hokypus is wiggpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: widlpus is hokypus
  - 前提: hokypus is sorgpus
  - 前提: sorgpus is wiggpus and wiqwpus
  ✓ 点亮LoG节点: hokypus is wiggpus
[子树点亮]     └─ 点亮依赖节点: hokypus is wiggpus and wiqwpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 25: wiggpus is siqtpus
      ↻ 重复节点，计数: 4

   节点 26: widlpus is siqtpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: widlpus is hokypus → hokypus is siqtpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: widlpus is hokypus
  - 前提: hokypus is sorgpus
  - 前提: sorgpus is wiggpus and wiqwpus
  - 前提: wiggpus is siqtpus

   节点 27: wiggpus is babcpus and babrpus and qebgpus
      ↻ 重复节点，计数: 4

   节点 28: widlpus is wiggpus
      ↻ 重复节点，计数: 2

   节点 29: widlpus is babcpus and babrpus and qebgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: widlpus is hokypus → hokypus is babcpus and babrpus and qebgpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: widlpus is hokypus
  - 前提: hokypus is sorgpus
  - 前提: sorgpus is wiggpus and wiqwpus
  - 前提: wiggpus is babcpus and babrpus and qebgpus
  ✓ 点亮LoG节点: wiggpus is babcpus and babrpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 30: x is babcpus and babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is widlpus → widlpus is babcpus and babrpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is widlpus
  - 前提: widlpus is hokypus
  - 前提: hokypus is sorgpus
  - 前提: sorgpus is wiggpus and wiqwpus
  - 前提: wiggpus is babcpus and babrpus and qebgpus
  ✓ 点亮LoG节点: x is hokypus
[子树点亮]     └─ 点亮依赖节点: x is hokypus and qufppus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 31: x is widlpus
      ↻ 重复节点，计数: 2

   节点 32: widlpus is siqtpus
      ↻ 重复节点，计数: 2

   节点 33: wiggpus is siqtpus
      ↻ 重复节点，计数: 5

   节点 34: widlpus is wiggpus
      ↻ 重复节点，计数: 3

   节点 35: siqtpus is babspus and rafnpus
      ↻ 重复节点，计数: 4

   节点 36: widlpus is babspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: widlpus is hokypus → hokypus is babspus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: widlpus is hokypus
  - 前提: hokypus is sorgpus
  - 前提: sorgpus is wiggpus and wiqwpus
  - 前提: wiggpus is siqtpus
  - 前提: siqtpus is babspus and rafnpus
  ✓ 点亮LoG节点: wiggpus is babspus and rafnpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 37: x is babspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is widlpus → widlpus is babspus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is widlpus
  - 前提: widlpus is babspus

   节点 38: x is babcpus and babrpus and babspus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus and babrpus and babspus
[子树点亮]     └─ 点亮依赖节点: x is babcpus and babrpus and babspus and rafnpus (深度2)
[子树点亮]     └─ 点亮依赖节点: hokypus is babcpus and babrpus and babspus and rafnpus (深度3)
[子树点亮]     └─ 点亮依赖节点: wiggpus is babcpus and babrpus and babspus and rafnpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 39: x is widlpus and lacbpus
      ↻ 重复节点，计数: 4

   节点 40: widlpus is wiggpus
      ↻ 重复节点，计数: 4

   节点 41: wiggpus is babcpus and babrpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 42: siqtpus is babspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: siqtpus is babspus and rafnpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: siqtpus is babspus and rafnpus

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 42
   - 新增节点: 12
   - 更新已存在节点: 30
   - 点亮的LoG节点: 12

🎯 推理质量统计:
   - 完美推理: 12 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 12节点, 7前提, 复杂度1-7

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 19
   - 前提节点: 7
   - 推理节点: 12
   - 幻觉节点: 0
   - 点亮LoG节点: 12

✅ 推理节点详情:
   🟢 widlpus is hokypus (出现2次, 质量:perfect)
   🟢 widlpus is sorgpus (出现2次, 质量:perfect)
   🟢 x is widlpus (出现2次, 质量:perfect)
   🟢 widlpus is wiggpus (出现4次, 质量:perfect)
   🟢 widlpus is siqtpus (出现2次, 质量:perfect)
   🟢 widlpus is babcpus and babrpus and qebgpus (出现1次, 质量:perfect)
   🟢 x is babcpus and babrpus (出现1次, 质量:perfect)
   🟢 widlpus is babspus (出现1次, 质量:perfect)
   🟢 x is babspus (出现1次, 质量:perfect)
   🟢 x is babcpus and babrpus and babspus (出现1次, 质量:perfect)
   🟢 wiggpus is babcpus and babrpus (出现1次, 质量:perfect)
   🟢 siqtpus is babspus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - wiggpus is babcpus and babrpus
   - hokypus is babcpus and babrpus and babspus and rafnpus
   - hokypus is wiggpus and wiqwpus
   - wiggpus is babcpus and babrpus and babspus and rafnpus
   - x is widlpus
   - x is babcpus and babrpus and babspus
   - widlpus is hokypus and qufppus
   - wiggpus is babspus and rafnpus
   - x is hokypus
   - x is babcpus and babrpus and babspus and rafnpus
   - x is hokypus and qufppus
   - hokypus is wiggpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus and babrpus and babspus (第5层)
   节点Coverage: 12/12 = 100.00%
   前提条件Coverage: 7/7 = 100.00%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/12 = 0.00%
   可推导节点: 12/12
   Strict Error Rate: 0/12 = 0.00%
   严格有效节点: 12/12

   详细分析:
     完美推理: 12 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 34/50
================================================================================
记录索引: 33
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_33.json
✅ 使用缓存结果:
   - 句子数: 66
   - 提取的语句数: 74
   - 初始条件数: 7

=== Statement提取完成 ===
总句子数: 66
成功提取: 66
失败提取: 0
总statements数: 74

=== 开始清洗Statement格式 ===
原始statements数: 74
清洗后statements数: 57
过滤掉的statements数: 17
清洗后的statements:
  1. [actual] kugqpus is yusfpus
  2. [actual] x is kugqpus and zantpus
  3. [planning] x is babcpus
  4. [planning] x is babcpus
  5. [actual] kugqpus is yusfpus
  6. [actual] x is kugqpus and zantpus
  7. [actual] x is kugqpus
  8. [actual] x is zantpus
  9. [actual] qiyspus is babcpus and zivnpus
  10. [actual] qiyspus is babcpus
  11. [actual] qiyspus is zivnpus
  12. [actual] joydpus is qiyspus
  13. [actual] joydpus is qiyspus
  14. [actual] joydpus is zugppus and zigbpus
  15. [actual] joydpus is zugppus and zigbpus
  16. [actual] zugppus is dozppus and gojbpus
  17. [actual] zugppus is dozppus and gojbpus
  18. [actual] yusfpus is joydpus and wibhpus
  19. [actual] yusfpus is joydpus
  20. [actual] yusfpus is wibhpus
  21. [actual] x is relmpus
  22. [actual] relmpus is babgpus
  23. [actual] x is babgpus
  24. [actual] x is an element of kugqpus
  25. [planning] x is an instance
  26. [actual] x is categories
  27. [actual] x is kugqpus and zantpus
  28. [actual] joydpus is qiyspus
  29. [actual] kugqpus is yusfpus
  30. [actual] x is kugqpus and zantpus
  31. [actual] qiyspus is babcpus and zivnpus
  32. [actual] qiyspus is babcpus
  33. [actual] qiyspus is zivnpus
  34. [actual] joydpus is qiyspus
  35. [actual] joydpus is zugppus and zigbpus
  36. [planning] joydpus is zugppus
  37. [planning] joydpus is zigbpus
  38. [actual] joydpus is zugppus and zigbpus
  39. [planning] joydpus is zugppus and zigbpus
  40. [actual] joydpus is qiyspus
  41. [actual] joydpus is zugppus
  42. [actual] joydpus is zigbpus
  43. [actual] zugppus is dozppus and gojbpus
  44. [actual] yusfpus is joydpus and wibhpus
  45. [planning] x is babcpus
  46. [actual] x is kugqpus
  47. [actual] x is zantpus
  48. [actual] x is yusfpus
  49. [actual] yusfpus is joydpus
  50. [actual] yusfpus is wibhpus
  51. [planning] x is joydpus
  52. [actual] joydpus is qiyspus
  53. [actual] x is joydpus implies x is qiyspus
  54. [actual] qiyspus is babcpus
  55. [actual] qiyspus is zivnpus
  56. [actual] x is babcpus
  57. [actual] x is babcpus

=== 开始标准化和解析节点 ===
清洗后statements数: 57
标准化后节点数: 53
过滤掉的无效实体数: 4
标准化后的节点:
  1. [actual] kugqpus → yusfpus (原始: kugqpus is yusfpus)
  2. [actual] x → kugqpus and zantpus (原始: x is kugqpus and zantpus)
  3. [planning] x → babcpus (原始: x is babcpus)
  4. [planning] x → babcpus (原始: x is babcpus)
  5. [actual] kugqpus → yusfpus (原始: kugqpus is yusfpus)
  6. [actual] x → kugqpus and zantpus (原始: x is kugqpus and zantpus)
  7. [actual] x → kugqpus (原始: x is kugqpus)
  8. [actual] x → zantpus (原始: x is zantpus)
  9. [actual] qiyspus → babcpus and zivnpus (原始: qiyspus is babcpus and zivnpus)
  10. [actual] qiyspus → babcpus (原始: qiyspus is babcpus)
  11. [actual] qiyspus → zivnpus (原始: qiyspus is zivnpus)
  12. [actual] joydpus → qiyspus (原始: joydpus is qiyspus)
  13. [actual] joydpus → qiyspus (原始: joydpus is qiyspus)
  14. [actual] joydpus → zugppus and zigbpus (原始: joydpus is zugppus and zigbpus)
  15. [actual] joydpus → zugppus and zigbpus (原始: joydpus is zugppus and zigbpus)
  16. [actual] zugppus → dozppus and gojbpus (原始: zugppus is dozppus and gojbpus)
  17. [actual] zugppus → dozppus and gojbpus (原始: zugppus is dozppus and gojbpus)
  18. [actual] yusfpus → joydpus and wibhpus (原始: yusfpus is joydpus and wibhpus)
  19. [actual] yusfpus → joydpus (原始: yusfpus is joydpus)
  20. [actual] yusfpus → wibhpus (原始: yusfpus is wibhpus)
  21. [actual] x → relmpus (原始: x is relmpus)
  22. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  23. [actual] x → babgpus (原始: x is babgpus)
  24. [actual] x → kugqpus and zantpus (原始: x is kugqpus and zantpus)
  25. [actual] joydpus → qiyspus (原始: joydpus is qiyspus)
  26. [actual] kugqpus → yusfpus (原始: kugqpus is yusfpus)
  27. [actual] x → kugqpus and zantpus (原始: x is kugqpus and zantpus)
  28. [actual] qiyspus → babcpus and zivnpus (原始: qiyspus is babcpus and zivnpus)
  29. [actual] qiyspus → babcpus (原始: qiyspus is babcpus)
  30. [actual] qiyspus → zivnpus (原始: qiyspus is zivnpus)
  31. [actual] joydpus → qiyspus (原始: joydpus is qiyspus)
  32. [actual] joydpus → zugppus and zigbpus (原始: joydpus is zugppus and zigbpus)
  33. [planning] joydpus → zugppus (原始: joydpus is zugppus)
  34. [planning] joydpus → zigbpus (原始: joydpus is zigbpus)
  35. [actual] joydpus → zugppus and zigbpus (原始: joydpus is zugppus and zigbpus)
  36. [planning] joydpus → zugppus and zigbpus (原始: joydpus is zugppus and zigbpus)
  37. [actual] joydpus → qiyspus (原始: joydpus is qiyspus)
  38. [actual] joydpus → zugppus (原始: joydpus is zugppus)
  39. [actual] joydpus → zigbpus (原始: joydpus is zigbpus)
  40. [actual] zugppus → dozppus and gojbpus (原始: zugppus is dozppus and gojbpus)
  41. [actual] yusfpus → joydpus and wibhpus (原始: yusfpus is joydpus and wibhpus)
  42. [planning] x → babcpus (原始: x is babcpus)
  43. [actual] x → kugqpus (原始: x is kugqpus)
  44. [actual] x → zantpus (原始: x is zantpus)
  45. [actual] x → yusfpus (原始: x is yusfpus)
  46. [actual] yusfpus → joydpus (原始: yusfpus is joydpus)
  47. [actual] yusfpus → wibhpus (原始: yusfpus is wibhpus)
  48. [planning] x → joydpus (原始: x is joydpus)
  49. [actual] joydpus → qiyspus (原始: joydpus is qiyspus)
  50. [actual] qiyspus → babcpus (原始: qiyspus is babcpus)
  51. [actual] qiyspus → zivnpus (原始: qiyspus is zivnpus)
  52. [actual] x → babcpus (原始: x is babcpus)
  53. [actual] x → babcpus (原始: x is babcpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 12
[后处理] 加载LoG图，包含 12 个节点
  LoG节点 0: x is babcpus (规则: CE, 深度: 1)
  LoG节点 1: x is babcpus and dozppus (规则: MP, 深度: 2)
  LoG节点 2: x is joydpus (规则: CE, 深度: 3)
  LoG节点 3: joydpus is babcpus and dozppus (规则: CI, 深度: 3)
  LoG节点 4: x is joydpus and wibhpus (规则: MP, 深度: 4)
  LoG节点 5: joydpus is babcpus (规则: CE, 深度: 4)
  LoG节点 6: joydpus is dozppus (规则: MP, 深度: 4)
  LoG节点 7: x is kugqpus (规则: CE, 深度: 5)
  LoG节点 8: kugqpus is joydpus and wibhpus (规则: MP, 深度: 5)
  LoG节点 9: joydpus is babcpus and zivnpus (规则: MP, 深度: 5)
  LoG节点 10: joydpus is zugppus (规则: CE, 深度: 5)
  LoG节点 11: zugppus is dozppus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 53
   - 初始条件数: 7
   - LoG图节点数: 12

📋 初始条件列表:
    1. kugqpus is yusfpus
    2. x is kugqpus and zantpus
    3. qiyspus is babcpus and zivnpus
    4. joydpus is qiyspus
    5. joydpus is zugppus and zigbpus
    6. zugppus is dozppus and gojbpus
    7. yusfpus is joydpus and wibhpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 7 个前提节点

🔍 开始处理actual节点...

   节点 1: kugqpus is yusfpus
      ↻ 重复节点，计数: 2

   节点 2: x is kugqpus and zantpus
      ↻ 重复节点，计数: 2

   节点 3: kugqpus is yusfpus
      ↻ 重复节点，计数: 3

   节点 4: x is kugqpus and zantpus
      ↻ 重复节点，计数: 3

   节点 5: x is kugqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is kugqpus
      ✅ 验证成功 + LoG匹配

   节点 6: x is zantpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is kugqpus and zantpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is kugqpus and zantpus

   节点 7: qiyspus is babcpus and zivnpus
      ↻ 重复节点，计数: 2

   节点 8: qiyspus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qiyspus is babcpus and zivnpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qiyspus is babcpus and zivnpus

   节点 9: qiyspus is zivnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qiyspus is babcpus and zivnpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qiyspus is babcpus and zivnpus

   节点 10: joydpus is qiyspus
      ↻ 重复节点，计数: 2

   节点 11: joydpus is qiyspus
      ↻ 重复节点，计数: 3

   节点 12: joydpus is zugppus and zigbpus
      ↻ 重复节点，计数: 2

   节点 13: joydpus is zugppus and zigbpus
      ↻ 重复节点，计数: 3

   节点 14: zugppus is dozppus and gojbpus
      ↻ 重复节点，计数: 2

   节点 15: zugppus is dozppus and gojbpus
      ↻ 重复节点，计数: 3

   节点 16: yusfpus is joydpus and wibhpus
      ↻ 重复节点，计数: 2

   节点 17: yusfpus is joydpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yusfpus is joydpus and wibhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yusfpus is joydpus and wibhpus

   节点 18: yusfpus is wibhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yusfpus is joydpus and wibhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yusfpus is joydpus and wibhpus

   节点 19: x is relmpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 20: relmpus is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 21: x is babgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is relmpus → relmpus is babgpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is relmpus
  - 前提: relmpus is babgpus

   节点 22: x is kugqpus and zantpus
      ↻ 重复节点，计数: 4

   节点 23: joydpus is qiyspus
      ↻ 重复节点，计数: 4

   节点 24: kugqpus is yusfpus
      ↻ 重复节点，计数: 4

   节点 25: x is kugqpus and zantpus
      ↻ 重复节点，计数: 5

   节点 26: qiyspus is babcpus and zivnpus
      ↻ 重复节点，计数: 3

   节点 27: qiyspus is babcpus
      ↻ 重复节点，计数: 2

   节点 28: qiyspus is zivnpus
      ↻ 重复节点，计数: 2

   节点 29: joydpus is qiyspus
      ↻ 重复节点，计数: 5

   节点 30: joydpus is zugppus and zigbpus
      ↻ 重复节点，计数: 4

   节点 31: joydpus is zugppus and zigbpus
      ↻ 重复节点，计数: 5

   节点 32: joydpus is qiyspus
      ↻ 重复节点，计数: 6

   节点 33: joydpus is zugppus
      🔍 验证新节点...
[后处理] 点亮LoG节点: joydpus is zugppus
      ✅ 验证成功 + LoG匹配

   节点 34: joydpus is zigbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: joydpus is zugppus and zigbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: joydpus is zugppus and zigbpus

   节点 35: zugppus is dozppus and gojbpus
      ↻ 重复节点，计数: 4

   节点 36: yusfpus is joydpus and wibhpus
      ↻ 重复节点，计数: 3

   节点 37: x is kugqpus
      ↻ 重复节点，计数: 2

   节点 38: x is zantpus
      ↻ 重复节点，计数: 2

   节点 39: x is yusfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is kugqpus → kugqpus is yusfpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is kugqpus
  - 前提: kugqpus is yusfpus

   节点 40: yusfpus is joydpus
      ↻ 重复节点，计数: 2

   节点 41: yusfpus is wibhpus
      ↻ 重复节点，计数: 2

   节点 42: joydpus is qiyspus
      ↻ 重复节点，计数: 7

   节点 43: qiyspus is babcpus
      ↻ 重复节点，计数: 3

   节点 44: qiyspus is zivnpus
      ↻ 重复节点，计数: 3

   节点 45: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: x is babcpus and dozppus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is joydpus (深度3)
[子树点亮]     └─ 点亮依赖节点: joydpus is babcpus and dozppus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is joydpus and wibhpus (深度4)
[子树点亮]     └─ 点亮依赖节点: joydpus is babcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: joydpus is dozppus (深度4)
[子树点亮]     └─ 点亮依赖节点: kugqpus is joydpus and wibhpus (深度5)
[子树点亮]     └─ 点亮依赖节点: joydpus is babcpus and zivnpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zugppus is dozppus (深度5)
[后处理]   └─ 自动点亮依赖子树: 9 个节点
      ✅ 验证成功 + LoG匹配

   节点 46: x is babcpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 46
   - 新增节点: 13
   - 更新已存在节点: 33
   - 点亮的LoG节点: 12

🎯 推理质量统计:
   - 完美推理: 8 (节点正确 + 路径正确)
   - 部分推理: 5 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 12节点, 7前提, 复杂度1-7

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 20
   - 前提节点: 7
   - 推理节点: 11
   - 幻觉节点: 2
   - 点亮LoG节点: 12

❌ 幻觉节点详情:
   - x is relmpus (出现1次)
   - relmpus is babgpus (出现1次)

✅ 推理节点详情:
   🟡 x is kugqpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟡 x is zantpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟢 qiyspus is babcpus (出现3次, 质量:perfect)
   🟢 qiyspus is zivnpus (出现3次, 质量:perfect)
   🟢 yusfpus is joydpus (出现2次, 质量:perfect)
   🟢 yusfpus is wibhpus (出现2次, 质量:perfect)
   🟡 x is babgpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus', 'relmpus is babgpus']
   🟢 joydpus is zugppus (出现1次, 质量:perfect)
   🟢 joydpus is zigbpus (出现1次, 质量:perfect)
   🟡 x is yusfpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟡 x is babcpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']

🔥 点亮的LoG节点:
   - joydpus is babcpus and zivnpus
   - kugqpus is joydpus and wibhpus
   - x is babcpus
   - x is babcpus and dozppus
   - joydpus is dozppus
   - joydpus is zugppus
   - x is joydpus
   - zugppus is dozppus
   - joydpus is babcpus and dozppus
   - x is joydpus and wibhpus
   - joydpus is babcpus
   - x is kugqpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus (第5层)
   节点Coverage: 12/12 = 100.00%
   前提条件Coverage: 7/7 = 100.00%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 2/13 = 15.38%
   可推导节点: 11/13
   Strict Error Rate: 7/13 = 53.85%
   严格有效节点: 6/13

   详细分析:
     完美推理: 8 (61.54%)
     部分推理: 5 (38.46%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 35/50
================================================================================
记录索引: 34
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_34.json
✅ 使用缓存结果:
   - 句子数: 169
   - 提取的语句数: 226
   - 初始条件数: 13

=== Statement提取完成 ===
总句子数: 169
成功提取: 169
失败提取: 0
总statements数: 226

=== 开始清洗Statement格式 ===
原始statements数: 226
清洗后statements数: 171
过滤掉的statements数: 55
清洗后的statements:
  1. [planning] x is babcpus or babrpus
  2. [actual] babrpus is mentioned in the context of musrpus
  3. [planning] x is babgpus and babkpus and babmpus
  4. [actual] cectpus is lebqpus and kuvgpus and joggpus
  5. [actual] solkpus is qazqpus
  6. [actual] ligxpus is dejzpus
  7. [actual] roydpus is lenhpus
  8. [actual] wumypus is cectpus
  9. [actual] hiddpus is wumypus and quwxpus
  10. [actual] x is hiddpus
  11. [actual] lebqpus is gasfpus and robxpus
  12. [actual] gasfpus is solkpus and levxpus
  13. [actual] qazqpus is ligxpus and gexjpus
  14. [actual] musrpus is babrpus and kiblpus
  15. [actual] dejzpus is roydpus
  16. [actual] lenhpus is musrpus
  17. [planning] x is babcpus or babrpus
  18. [actual] x is hiddpus
  19. [actual] hiddpus is wumypus and quwxpus
  20. [actual] wumypus is cectpus
  21. [actual] cectpus is lebqpus and kuvgpus and joggpus
  22. [actual] x is hiddpus
  23. [actual] wumypus is cectpus
  24. [actual] lebqpus is cectpus
  25. [actual] lebqpus is gasfpus and robxpus
  26. [actual] gasfpus is solkpus and levxpus
  27. [actual] solkpus is qazqpus
  28. [actual] qazqpus is ligxpus and gexjpus
  29. [actual] ligxpus is dejzpus
  30. [actual] dejzpus is roydpus
  31. [actual] roydpus is lenhpus
  32. [actual] lenhpus is musrpus
  33. [actual] musrpus is babrpus and kiblpus
  34. [planning] x is babrpus
  35. [actual] x is hiddpus
  36. [actual] wumypus is cectpus
  37. [actual] lebqpus is gasfpus
  38. [actual] gasfpus is solkpus
  39. [actual] solkpus is qazqpus
  40. [actual] qazqpus is ligxpus
  41. [actual] ligxpus is dejzpus
  42. [actual] dejzpus is roydpus
  43. [actual] roydpus is lenhpus
  44. [actual] lenhpus is musrpus
  45. [actual] musrpus is babrpus
  46. [actual] hiddpus is wumypus
  47. [actual] hiddpus is quwxpus
  48. [actual] x is wumypus and quwxpus
  49. [planning] x is babcpus or babrpus
  50. [planning] x is babrpus
  51. [actual] babrpus is x is a hierarchy that
  52. [planning] x is babrpus
  53. [actual] x is hiddpus
  54. [actual] hiddpus is a category that contains wumypus and quwxpus
  55. [actual] x is hiddpus
  56. [actual] x is wumypus and quwxpus
  57. [planning] x is wumypus and quwxpus
  58. [actual] hiddpus is wumypus and quwxpus
  59. [actual] hiddpus is wumypus and quwxpus
  60. [actual] cectpus is lebqpus and kuvgpus and joggpus
  61. [planning] cectpus is lebqpus and kuvgpus and joggpus
  62. [actual] hiddpus is wumypus and quwxpus
  63. [planning] hiddpus is wumypus and quwxpus
  64. [actual] musrpus is babrpus and kiblpus
  65. [planning] musrpus is babrpus and kiblpus
  66. [planning] musrpus is babrpus
  67. [planning] musrpus is kiblpus
  68. [actual] cectpus is lebqpus
  69. [actual] cectpus is kuvgpus
  70. [actual] cectpus is joggpus
  71. [actual] hiddpus is wumypus
  72. [actual] hiddpus is quwxpus
  73. [actual] wumypus is cectpus
  74. [planning] wumypus is a type of cectpus
  75. [actual] wumypus is cectpus
  76. [planning] cectpus is a category that contains wumypus
  77. [actual] wumypus is cectpus
  78. [actual] cectpus is lebqpus
  79. [actual] cectpus is lebqpus
  80. [planning] wumypus is lebqpus
  81. [actual] wumypus is cectpus
  82. [actual] cectpus is lebqpus
  83. [actual] wumypus is lebqpus
  84. [actual] hiddpus is wumypus and quwxpus
  85. [actual] hiddpus is wumypus and quwxpus
  86. [actual] x is hiddpus
  87. [actual] x is hiddpus
  88. [actual] x is wumypus
  89. [actual] x is quwxpus
  90. [actual] hiddpus is wumypus
  91. [actual] x is wumypus
  92. [actual] wumypus is cectpus
  93. [planning] x is babrpus
  94. [planning] x is babcpus
  95. [actual] babrpus is mentioned in statement 11
  96. [actual] musrpus is babrpus and kiblpus
  97. [planning] x is musrpus
  98. [actual] musrpus is babrpus
  99. [planning] x is babrpus
  100. [planning] x is musrpus
  101. [actual] x is wumypus
  102. [actual] wumypus is cectpus
  103. [actual] cectpus is lebqpus
  104. [actual] lebqpus is gasfpus and robxpus
  105. [actual] lebqpus is gasfpus and robxpus
  106. [planning] lebqpus is gasfpus
  107. [planning] lebqpus is robxpus
  108. [actual] cectpus is lebqpus
  109. [actual] lebqpus is gasfpus
  110. [actual] cectpus is gasfpus
  111. [planning] wumypus is gasfpus
  112. [actual] gasfpus is solkpus and levxpus
  113. [actual] gasfpus is solkpus and levxpus
  114. [actual] gasfpus is solkpus and contained in levxpus
  115. [actual] wumypus is solkpus
  116. [planning] solkpus is qazqpus
  117. [actual] solkpus is qazqpus
  118. [actual] solkpus is qazqpus
  119. [actual] wumypus is qazqpus
  120. [planning] qazqpus is ligxpus and gexjpus
  121. [actual] qazqpus is ligxpus and gexjpus
  122. [actual] qazqpus is ligxpus and contained in gexjpus
  123. [actual] qazqpus is gexjpus and contained in ligxpus
  124. [actual] wumypus is ligxpus
  125. [planning] ligxpus is dejzpus
  126. [actual] ligxpus is dejzpus
  127. [actual] ligxpus is dejzpus
  128. [actual] wumypus is dejzpus
  129. [planning] dejzpus is roydpus
  130. [actual] dejzpus is roydpus
  131. [actual] dejzpus is roydpus
  132. [actual] wumypus is roydpus
  133. [planning] roydpus is lenhpus
  134. [actual] roydpus is lenhpus
  135. [actual] roydpus is lenhpus
  136. [actual] wumypus is lenhpus
  137. [planning] lenhpus is musrpus
  138. [actual] lenhpus is musrpus
  139. [actual] lenhpus is musrpus
  140. [actual] wumypus is musrpus
  141. [actual] x is wumypus
  142. [actual] x is musrpus
  143. [actual] musrpus is babrpus
  144. [actual] x is babrpus
  145. [actual] x is babrpus
  146. [planning] x is babcpus or babrpus
  147. [actual] x is babrpus
  148. [planning] x is babcpus or babrpus
  149. [actual] x is babrpus
  150. [actual] x is babcpus or babrpus
  151. [planning] babcpus is a typo
  152. [planning] babcpus is babrpus
  153. [planning] x is babcpus
  154. [planning] x is babrpus
  155. [planning] x is babrpus
  156. [planning] x is A or B
  157. [actual] x is babrpus
  158. [actual] x is babcpus or babrpus
  159. [planning] x is babcpus
  160. [actual] x is babrpus
  161. [planning] x is babrpus
  162. [planning] x is babcpus or babrpus
  163. [planning] babcpus is a category
  164. [planning] x is babrpus
  165. [actual] x is wumypus
  166. [actual] wumypus is musrpus
  167. [actual] musrpus is babrpus
  168. [actual] x is babrpus
  169. [actual] hiddpus is quwxpus
  170. [actual] x is babrpus
  171. [actual] x is babrpus

=== 开始标准化和解析节点 ===
清洗后statements数: 171
标准化后节点数: 159
过滤掉的无效实体数: 12
标准化后的节点:
  1. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  2. [planning] x → babgpus and babkpus and babmpus (原始: x is babgpus and babkpus and babmpus)
  3. [actual] cectpus → lebqpus and kuvgpus and joggpus (原始: cectpus is lebqpus and kuvgpus and joggpus)
  4. [actual] solkpus → qazqpus (原始: solkpus is qazqpus)
  5. [actual] ligxpus → dejzpus (原始: ligxpus is dejzpus)
  6. [actual] roydpus → lenhpus (原始: roydpus is lenhpus)
  7. [actual] wumypus → cectpus (原始: wumypus is cectpus)
  8. [actual] hiddpus → wumypus and quwxpus (原始: hiddpus is wumypus and quwxpus)
  9. [actual] x → hiddpus (原始: x is hiddpus)
  10. [actual] lebqpus → gasfpus and robxpus (原始: lebqpus is gasfpus and robxpus)
  11. [actual] gasfpus → solkpus and levxpus (原始: gasfpus is solkpus and levxpus)
  12. [actual] qazqpus → ligxpus and gexjpus (原始: qazqpus is ligxpus and gexjpus)
  13. [actual] musrpus → babrpus and kiblpus (原始: musrpus is babrpus and kiblpus)
  14. [actual] dejzpus → roydpus (原始: dejzpus is roydpus)
  15. [actual] lenhpus → musrpus (原始: lenhpus is musrpus)
  16. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  17. [actual] x → hiddpus (原始: x is hiddpus)
  18. [actual] hiddpus → wumypus and quwxpus (原始: hiddpus is wumypus and quwxpus)
  19. [actual] wumypus → cectpus (原始: wumypus is cectpus)
  20. [actual] cectpus → lebqpus and kuvgpus and joggpus (原始: cectpus is lebqpus and kuvgpus and joggpus)
  21. [actual] x → hiddpus (原始: x is hiddpus)
  22. [actual] wumypus → cectpus (原始: wumypus is cectpus)
  23. [actual] lebqpus → cectpus (原始: lebqpus is cectpus)
  24. [actual] lebqpus → gasfpus and robxpus (原始: lebqpus is gasfpus and robxpus)
  25. [actual] gasfpus → solkpus and levxpus (原始: gasfpus is solkpus and levxpus)
  26. [actual] solkpus → qazqpus (原始: solkpus is qazqpus)
  27. [actual] qazqpus → ligxpus and gexjpus (原始: qazqpus is ligxpus and gexjpus)
  28. [actual] ligxpus → dejzpus (原始: ligxpus is dejzpus)
  29. [actual] dejzpus → roydpus (原始: dejzpus is roydpus)
  30. [actual] roydpus → lenhpus (原始: roydpus is lenhpus)
  31. [actual] lenhpus → musrpus (原始: lenhpus is musrpus)
  32. [actual] musrpus → babrpus and kiblpus (原始: musrpus is babrpus and kiblpus)
  33. [planning] x → babrpus (原始: x is babrpus)
  34. [actual] x → hiddpus (原始: x is hiddpus)
  35. [actual] wumypus → cectpus (原始: wumypus is cectpus)
  36. [actual] lebqpus → gasfpus (原始: lebqpus is gasfpus)
  37. [actual] gasfpus → solkpus (原始: gasfpus is solkpus)
  38. [actual] solkpus → qazqpus (原始: solkpus is qazqpus)
  39. [actual] qazqpus → ligxpus (原始: qazqpus is ligxpus)
  40. [actual] ligxpus → dejzpus (原始: ligxpus is dejzpus)
  41. [actual] dejzpus → roydpus (原始: dejzpus is roydpus)
  42. [actual] roydpus → lenhpus (原始: roydpus is lenhpus)
  43. [actual] lenhpus → musrpus (原始: lenhpus is musrpus)
  44. [actual] musrpus → babrpus (原始: musrpus is babrpus)
  45. [actual] hiddpus → wumypus (原始: hiddpus is wumypus)
  46. [actual] hiddpus → quwxpus (原始: hiddpus is quwxpus)
  47. [actual] x → wumypus and quwxpus (原始: x is wumypus and quwxpus)
  48. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  49. [planning] x → babrpus (原始: x is babrpus)
  50. [planning] x → babrpus (原始: x is babrpus)
  51. [actual] x → hiddpus (原始: x is hiddpus)
  52. [actual] x → hiddpus (原始: x is hiddpus)
  53. [actual] x → wumypus and quwxpus (原始: x is wumypus and quwxpus)
  54. [planning] x → wumypus and quwxpus (原始: x is wumypus and quwxpus)
  55. [actual] hiddpus → wumypus and quwxpus (原始: hiddpus is wumypus and quwxpus)
  56. [actual] hiddpus → wumypus and quwxpus (原始: hiddpus is wumypus and quwxpus)
  57. [actual] cectpus → lebqpus and kuvgpus and joggpus (原始: cectpus is lebqpus and kuvgpus and joggpus)
  58. [planning] cectpus → lebqpus and kuvgpus and joggpus (原始: cectpus is lebqpus and kuvgpus and joggpus)
  59. [actual] hiddpus → wumypus and quwxpus (原始: hiddpus is wumypus and quwxpus)
  60. [planning] hiddpus → wumypus and quwxpus (原始: hiddpus is wumypus and quwxpus)
  61. [actual] musrpus → babrpus and kiblpus (原始: musrpus is babrpus and kiblpus)
  62. [planning] musrpus → babrpus and kiblpus (原始: musrpus is babrpus and kiblpus)
  63. [planning] musrpus → babrpus (原始: musrpus is babrpus)
  64. [planning] musrpus → kiblpus (原始: musrpus is kiblpus)
  65. [actual] cectpus → lebqpus (原始: cectpus is lebqpus)
  66. [actual] cectpus → kuvgpus (原始: cectpus is kuvgpus)
  67. [actual] cectpus → joggpus (原始: cectpus is joggpus)
  68. [actual] hiddpus → wumypus (原始: hiddpus is wumypus)
  69. [actual] hiddpus → quwxpus (原始: hiddpus is quwxpus)
  70. [actual] wumypus → cectpus (原始: wumypus is cectpus)
  71. [actual] wumypus → cectpus (原始: wumypus is cectpus)
  72. [actual] wumypus → cectpus (原始: wumypus is cectpus)
  73. [actual] cectpus → lebqpus (原始: cectpus is lebqpus)
  74. [actual] cectpus → lebqpus (原始: cectpus is lebqpus)
  75. [planning] wumypus → lebqpus (原始: wumypus is lebqpus)
  76. [actual] wumypus → cectpus (原始: wumypus is cectpus)
  77. [actual] cectpus → lebqpus (原始: cectpus is lebqpus)
  78. [actual] wumypus → lebqpus (原始: wumypus is lebqpus)
  79. [actual] hiddpus → wumypus and quwxpus (原始: hiddpus is wumypus and quwxpus)
  80. [actual] hiddpus → wumypus and quwxpus (原始: hiddpus is wumypus and quwxpus)
  81. [actual] x → hiddpus (原始: x is hiddpus)
  82. [actual] x → hiddpus (原始: x is hiddpus)
  83. [actual] x → wumypus (原始: x is wumypus)
  84. [actual] x → quwxpus (原始: x is quwxpus)
  85. [actual] hiddpus → wumypus (原始: hiddpus is wumypus)
  86. [actual] x → wumypus (原始: x is wumypus)
  87. [actual] wumypus → cectpus (原始: wumypus is cectpus)
  88. [planning] x → babrpus (原始: x is babrpus)
  89. [planning] x → babcpus (原始: x is babcpus)
  90. [actual] musrpus → babrpus and kiblpus (原始: musrpus is babrpus and kiblpus)
  91. [planning] x → musrpus (原始: x is musrpus)
  92. [actual] musrpus → babrpus (原始: musrpus is babrpus)
  93. [planning] x → babrpus (原始: x is babrpus)
  94. [planning] x → musrpus (原始: x is musrpus)
  95. [actual] x → wumypus (原始: x is wumypus)
  96. [actual] wumypus → cectpus (原始: wumypus is cectpus)
  97. [actual] cectpus → lebqpus (原始: cectpus is lebqpus)
  98. [actual] lebqpus → gasfpus and robxpus (原始: lebqpus is gasfpus and robxpus)
  99. [actual] lebqpus → gasfpus and robxpus (原始: lebqpus is gasfpus and robxpus)
  100. [planning] lebqpus → gasfpus (原始: lebqpus is gasfpus)
  101. [planning] lebqpus → robxpus (原始: lebqpus is robxpus)
  102. [actual] cectpus → lebqpus (原始: cectpus is lebqpus)
  103. [actual] lebqpus → gasfpus (原始: lebqpus is gasfpus)
  104. [actual] cectpus → gasfpus (原始: cectpus is gasfpus)
  105. [planning] wumypus → gasfpus (原始: wumypus is gasfpus)
  106. [actual] gasfpus → solkpus and levxpus (原始: gasfpus is solkpus and levxpus)
  107. [actual] gasfpus → solkpus and levxpus (原始: gasfpus is solkpus and levxpus)
  108. [actual] wumypus → solkpus (原始: wumypus is solkpus)
  109. [planning] solkpus → qazqpus (原始: solkpus is qazqpus)
  110. [actual] solkpus → qazqpus (原始: solkpus is qazqpus)
  111. [actual] solkpus → qazqpus (原始: solkpus is qazqpus)
  112. [actual] wumypus → qazqpus (原始: wumypus is qazqpus)
  113. [planning] qazqpus → ligxpus and gexjpus (原始: qazqpus is ligxpus and gexjpus)
  114. [actual] qazqpus → ligxpus and gexjpus (原始: qazqpus is ligxpus and gexjpus)
  115. [actual] wumypus → ligxpus (原始: wumypus is ligxpus)
  116. [planning] ligxpus → dejzpus (原始: ligxpus is dejzpus)
  117. [actual] ligxpus → dejzpus (原始: ligxpus is dejzpus)
  118. [actual] ligxpus → dejzpus (原始: ligxpus is dejzpus)
  119. [actual] wumypus → dejzpus (原始: wumypus is dejzpus)
  120. [planning] dejzpus → roydpus (原始: dejzpus is roydpus)
  121. [actual] dejzpus → roydpus (原始: dejzpus is roydpus)
  122. [actual] dejzpus → roydpus (原始: dejzpus is roydpus)
  123. [actual] wumypus → roydpus (原始: wumypus is roydpus)
  124. [planning] roydpus → lenhpus (原始: roydpus is lenhpus)
  125. [actual] roydpus → lenhpus (原始: roydpus is lenhpus)
  126. [actual] roydpus → lenhpus (原始: roydpus is lenhpus)
  127. [actual] wumypus → lenhpus (原始: wumypus is lenhpus)
  128. [planning] lenhpus → musrpus (原始: lenhpus is musrpus)
  129. [actual] lenhpus → musrpus (原始: lenhpus is musrpus)
  130. [actual] lenhpus → musrpus (原始: lenhpus is musrpus)
  131. [actual] wumypus → musrpus (原始: wumypus is musrpus)
  132. [actual] x → wumypus (原始: x is wumypus)
  133. [actual] x → musrpus (原始: x is musrpus)
  134. [actual] musrpus → babrpus (原始: musrpus is babrpus)
  135. [actual] x → babrpus (原始: x is babrpus)
  136. [actual] x → babrpus (原始: x is babrpus)
  137. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  138. [actual] x → babrpus (原始: x is babrpus)
  139. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  140. [actual] x → babrpus (原始: x is babrpus)
  141. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  142. [planning] babcpus → babrpus (原始: babcpus is babrpus)
  143. [planning] x → babcpus (原始: x is babcpus)
  144. [planning] x → babrpus (原始: x is babrpus)
  145. [planning] x → babrpus (原始: x is babrpus)
  146. [actual] x → babrpus (原始: x is babrpus)
  147. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  148. [planning] x → babcpus (原始: x is babcpus)
  149. [actual] x → babrpus (原始: x is babrpus)
  150. [planning] x → babrpus (原始: x is babrpus)
  151. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  152. [planning] x → babrpus (原始: x is babrpus)
  153. [actual] x → wumypus (原始: x is wumypus)
  154. [actual] wumypus → musrpus (原始: wumypus is musrpus)
  155. [actual] musrpus → babrpus (原始: musrpus is babrpus)
  156. [actual] x → babrpus (原始: x is babrpus)
  157. [actual] hiddpus → quwxpus (原始: hiddpus is quwxpus)
  158. [actual] x → babrpus (原始: x is babrpus)
  159. [actual] x → babrpus (原始: x is babrpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 20
[后处理] 加载LoG图，包含 20 个节点
  LoG节点 0: x is babcpus or babrpus (规则: MP, 深度: 1)
  LoG节点 1: x is lebqpus (规则: CE, 深度: 2)
  LoG节点 2: lebqpus is babcpus or babrpus (规则: MP, 深度: 2)
  LoG节点 3: x is lebqpus and kuvgpus (规则: MP, 深度: 3)
  LoG节点 4: lebqpus is ligxpus (规则: MP, 深度: 3)
  LoG节点 5: ligxpus is babcpus or babrpus (规则: MP, 深度: 3)
  LoG节点 6: x is wumypus (规则: CE, 深度: 4)
  LoG节点 7: wumypus is lebqpus and kuvgpus (规则: CE, 深度: 4)
  LoG节点 8: lebqpus is solkpus (规则: MP, 深度: 4)
  LoG节点 9: solkpus is ligxpus (规则: CE, 深度: 4)
  LoG节点 10: ligxpus is musrpus (规则: MP, 深度: 4)
  LoG节点 11: musrpus is babcpus or babrpus (规则: DI, 深度: 4)
  LoG节点 12: x is wumypus and quwxpus (规则: MP, 深度: 5)
  LoG节点 13: wumypus is lebqpus and kuvgpus and joggpus (规则: MP, 深度: 5)
  LoG节点 14: lebqpus is gasfpus (规则: CE, 深度: 5)
  LoG节点 15: gasfpus is solkpus (规则: CE, 深度: 5)
  LoG节点 16: solkpus is ligxpus and gexjpus (规则: MP, 深度: 5)
  LoG节点 17: ligxpus is roydpus (规则: MP, 深度: 5)
  LoG节点 18: roydpus is musrpus (规则: MP, 深度: 5)
  LoG节点 19: musrpus is babrpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 159
   - 初始条件数: 13
   - LoG图节点数: 20

📋 初始条件列表:
    1. cectpus is lebqpus and kuvgpus and joggpus
    2. solkpus is qazqpus
    3. ligxpus is dejzpus
    4. roydpus is lenhpus
    5. wumypus is cectpus
    6. hiddpus is wumypus and quwxpus
    7. x is hiddpus
    8. lebqpus is gasfpus and robxpus
    9. gasfpus is solkpus and levxpus
   10. qazqpus is ligxpus and gexjpus
   11. musrpus is babrpus and kiblpus
   12. dejzpus is roydpus
   13. lenhpus is musrpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 13 个前提节点

🔍 开始处理actual节点...

   节点 1: cectpus is lebqpus and kuvgpus and joggpus
      ↻ 重复节点，计数: 2

   节点 2: solkpus is qazqpus
      ↻ 重复节点，计数: 2

   节点 3: ligxpus is dejzpus
      ↻ 重复节点，计数: 2

   节点 4: roydpus is lenhpus
      ↻ 重复节点，计数: 2

   节点 5: wumypus is cectpus
      ↻ 重复节点，计数: 2

   节点 6: hiddpus is wumypus and quwxpus
      ↻ 重复节点，计数: 2

   节点 7: x is hiddpus
      ↻ 重复节点，计数: 2

   节点 8: lebqpus is gasfpus and robxpus
      ↻ 重复节点，计数: 2

   节点 9: gasfpus is solkpus and levxpus
      ↻ 重复节点，计数: 2

   节点 10: qazqpus is ligxpus and gexjpus
      ↻ 重复节点，计数: 2

   节点 11: musrpus is babrpus and kiblpus
      ↻ 重复节点，计数: 2

   节点 12: dejzpus is roydpus
      ↻ 重复节点，计数: 2

   节点 13: lenhpus is musrpus
      ↻ 重复节点，计数: 2

   节点 14: x is hiddpus
      ↻ 重复节点，计数: 3

   节点 15: hiddpus is wumypus and quwxpus
      ↻ 重复节点，计数: 3

   节点 16: wumypus is cectpus
      ↻ 重复节点，计数: 3

   节点 17: cectpus is lebqpus and kuvgpus and joggpus
      ↻ 重复节点，计数: 3

   节点 18: x is hiddpus
      ↻ 重复节点，计数: 4

   节点 19: wumypus is cectpus
      ↻ 重复节点，计数: 4

   节点 20: lebqpus is cectpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 21: lebqpus is gasfpus and robxpus
      ↻ 重复节点，计数: 3

   节点 22: gasfpus is solkpus and levxpus
      ↻ 重复节点，计数: 3

   节点 23: solkpus is qazqpus
      ↻ 重复节点，计数: 3

   节点 24: qazqpus is ligxpus and gexjpus
      ↻ 重复节点，计数: 3

   节点 25: ligxpus is dejzpus
      ↻ 重复节点，计数: 3

   节点 26: dejzpus is roydpus
      ↻ 重复节点，计数: 3

   节点 27: roydpus is lenhpus
      ↻ 重复节点，计数: 3

   节点 28: lenhpus is musrpus
      ↻ 重复节点，计数: 3

   节点 29: musrpus is babrpus and kiblpus
      ↻ 重复节点，计数: 3

   节点 30: x is hiddpus
      ↻ 重复节点，计数: 5

   节点 31: wumypus is cectpus
      ↻ 重复节点，计数: 5

   节点 32: lebqpus is gasfpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: lebqpus is gasfpus
      ✅ 验证成功 + LoG匹配

   节点 33: gasfpus is solkpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: gasfpus is solkpus
      ✅ 验证成功 + LoG匹配

   节点 34: solkpus is qazqpus
      ↻ 重复节点，计数: 4

   节点 35: qazqpus is ligxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qazqpus is ligxpus and gexjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qazqpus is ligxpus and gexjpus

   节点 36: ligxpus is dejzpus
      ↻ 重复节点，计数: 4

   节点 37: dejzpus is roydpus
      ↻ 重复节点，计数: 4

   节点 38: roydpus is lenhpus
      ↻ 重复节点，计数: 4

   节点 39: lenhpus is musrpus
      ↻ 重复节点，计数: 4

   节点 40: musrpus is babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: musrpus is babrpus
      ✅ 验证成功 + LoG匹配

   节点 41: hiddpus is wumypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: hiddpus is wumypus and quwxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: hiddpus is wumypus and quwxpus

   节点 42: hiddpus is quwxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: hiddpus is wumypus and quwxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: hiddpus is wumypus and quwxpus

   节点 43: x is wumypus and quwxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is wumypus and quwxpus
      ✅ 验证成功 + LoG匹配

   节点 44: x is hiddpus
      ↻ 重复节点，计数: 6

   节点 45: x is hiddpus
      ↻ 重复节点，计数: 7

   节点 46: x is wumypus and quwxpus
      ↻ 重复节点，计数: 2

   节点 47: hiddpus is wumypus and quwxpus
      ↻ 重复节点，计数: 4

   节点 48: hiddpus is wumypus and quwxpus
      ↻ 重复节点，计数: 5

   节点 49: cectpus is lebqpus and kuvgpus and joggpus
      ↻ 重复节点，计数: 4

   节点 50: hiddpus is wumypus and quwxpus
      ↻ 重复节点，计数: 6

   节点 51: musrpus is babrpus and kiblpus
      ↻ 重复节点，计数: 4

   节点 52: cectpus is lebqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: cectpus is lebqpus and kuvgpus and joggpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: cectpus is lebqpus and kuvgpus and joggpus

   节点 53: cectpus is kuvgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: cectpus is lebqpus and kuvgpus and joggpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: cectpus is lebqpus and kuvgpus and joggpus

   节点 54: cectpus is joggpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: cectpus is lebqpus and kuvgpus and joggpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: cectpus is lebqpus and kuvgpus and joggpus

   节点 55: hiddpus is wumypus
      ↻ 重复节点，计数: 2

   节点 56: hiddpus is quwxpus
      ↻ 重复节点，计数: 2

   节点 57: wumypus is cectpus
      ↻ 重复节点，计数: 6

   节点 58: wumypus is cectpus
      ↻ 重复节点，计数: 7

   节点 59: wumypus is cectpus
      ↻ 重复节点，计数: 8

   节点 60: cectpus is lebqpus
      ↻ 重复节点，计数: 2

   节点 61: cectpus is lebqpus
      ↻ 重复节点，计数: 3

   节点 62: wumypus is cectpus
      ↻ 重复节点，计数: 9

   节点 63: cectpus is lebqpus
      ↻ 重复节点，计数: 4

   节点 64: wumypus is lebqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: wumypus is cectpus → cectpus is lebqpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: wumypus is cectpus
  - 前提: cectpus is lebqpus

   节点 65: hiddpus is wumypus and quwxpus
      ↻ 重复节点，计数: 7

   节点 66: hiddpus is wumypus and quwxpus
      ↻ 重复节点，计数: 8

   节点 67: x is hiddpus
      ↻ 重复节点，计数: 8

   节点 68: x is hiddpus
      ↻ 重复节点，计数: 9

   节点 69: x is wumypus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is wumypus
      ✅ 验证成功 + LoG匹配

   节点 70: x is quwxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is wumypus and quwxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is wumypus and quwxpus

   节点 71: hiddpus is wumypus
      ↻ 重复节点，计数: 3

   节点 72: x is wumypus
      ↻ 重复节点，计数: 2

   节点 73: wumypus is cectpus
      ↻ 重复节点，计数: 10

   节点 74: musrpus is babrpus and kiblpus
      ↻ 重复节点，计数: 5

   节点 75: musrpus is babrpus
      ↻ 重复节点，计数: 2

   节点 76: x is wumypus
      ↻ 重复节点，计数: 3

   节点 77: wumypus is cectpus
      ↻ 重复节点，计数: 11

   节点 78: cectpus is lebqpus
      ↻ 重复节点，计数: 5

   节点 79: lebqpus is gasfpus and robxpus
      ↻ 重复节点，计数: 4

   节点 80: lebqpus is gasfpus and robxpus
      ↻ 重复节点，计数: 5

   节点 81: cectpus is lebqpus
      ↻ 重复节点，计数: 6

   节点 82: lebqpus is gasfpus
      ↻ 重复节点，计数: 2

   节点 83: cectpus is gasfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: cectpus is lebqpus → lebqpus is gasfpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: cectpus is lebqpus
  - 前提: lebqpus is gasfpus

   节点 84: gasfpus is solkpus and levxpus
      ↻ 重复节点，计数: 4

   节点 85: gasfpus is solkpus and levxpus
      ↻ 重复节点，计数: 5

   节点 86: wumypus is solkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: wumypus is cectpus → cectpus is solkpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: wumypus is cectpus
  - 前提: cectpus is lebqpus
  - 前提: lebqpus is gasfpus
  - 前提: gasfpus is solkpus
  ✓ 点亮LoG节点: lebqpus is solkpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 87: solkpus is qazqpus
      ↻ 重复节点，计数: 5

   节点 88: solkpus is qazqpus
      ↻ 重复节点，计数: 6

   节点 89: wumypus is qazqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: wumypus is cectpus → cectpus is qazqpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: wumypus is cectpus
  - 前提: cectpus is lebqpus
  - 前提: lebqpus is gasfpus
  - 前提: gasfpus is solkpus
  - 前提: solkpus is qazqpus

   节点 90: qazqpus is ligxpus and gexjpus
      ↻ 重复节点，计数: 4

   节点 91: wumypus is ligxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: wumypus is cectpus → cectpus is ligxpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: wumypus is cectpus
  - 前提: cectpus is lebqpus
  - 前提: lebqpus is gasfpus
  - 前提: gasfpus is solkpus
  - 前提: solkpus is qazqpus
  - 前提: qazqpus is ligxpus
  ✓ 点亮LoG节点: lebqpus is ligxpus
[子树点亮]     └─ 点亮依赖节点: solkpus is ligxpus (深度4)
[子树点亮]     └─ 点亮依赖节点: solkpus is ligxpus and gexjpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 92: ligxpus is dejzpus
      ↻ 重复节点，计数: 5

   节点 93: ligxpus is dejzpus
      ↻ 重复节点，计数: 6

   节点 94: wumypus is dejzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: wumypus is cectpus → cectpus is dejzpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: wumypus is cectpus
  - 前提: cectpus is lebqpus
  - 前提: lebqpus is gasfpus
  - 前提: gasfpus is solkpus
  - 前提: solkpus is qazqpus
  - 前提: qazqpus is ligxpus
  - 前提: ligxpus is dejzpus

   节点 95: dejzpus is roydpus
      ↻ 重复节点，计数: 5

   节点 96: dejzpus is roydpus
      ↻ 重复节点，计数: 6

   节点 97: wumypus is roydpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: wumypus is cectpus → cectpus is roydpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: wumypus is cectpus
  - 前提: cectpus is lebqpus
  - 前提: lebqpus is gasfpus
  - 前提: gasfpus is solkpus
  - 前提: solkpus is qazqpus
  - 前提: qazqpus is ligxpus
  - 前提: ligxpus is dejzpus
  - 前提: dejzpus is roydpus
  ✓ 点亮LoG节点: ligxpus is roydpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 98: roydpus is lenhpus
      ↻ 重复节点，计数: 5

   节点 99: roydpus is lenhpus
      ↻ 重复节点，计数: 6

   节点 100: wumypus is lenhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: wumypus is cectpus → cectpus is lenhpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: wumypus is cectpus
  - 前提: cectpus is lebqpus
  - 前提: lebqpus is gasfpus
  - 前提: gasfpus is solkpus
  - 前提: solkpus is qazqpus
  - 前提: qazqpus is ligxpus
  - 前提: ligxpus is dejzpus
  - 前提: dejzpus is roydpus
  - 前提: roydpus is lenhpus

   节点 101: lenhpus is musrpus
      ↻ 重复节点，计数: 5

   节点 102: lenhpus is musrpus
      ↻ 重复节点，计数: 6

   节点 103: wumypus is musrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: wumypus is cectpus → cectpus is musrpus
[后处理] 基于推理轨迹点亮节点，使用了 10 个前提条件:
  - 前提: wumypus is cectpus
  - 前提: cectpus is lebqpus
  - 前提: lebqpus is gasfpus
  - 前提: gasfpus is solkpus
  - 前提: solkpus is qazqpus
  - 前提: qazqpus is ligxpus
  - 前提: ligxpus is dejzpus
  - 前提: dejzpus is roydpus
  - 前提: roydpus is lenhpus
  - 前提: lenhpus is musrpus
  ✓ 点亮LoG节点: ligxpus is musrpus
[子树点亮]     └─ 点亮依赖节点: roydpus is musrpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 104: x is wumypus
      ↻ 重复节点，计数: 4

   节点 105: x is musrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is hiddpus → hiddpus is musrpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is hiddpus
  - 前提: hiddpus is wumypus
  - 前提: wumypus is musrpus

   节点 106: musrpus is babrpus
      ↻ 重复节点，计数: 3

   节点 107: x is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is hiddpus → hiddpus is babrpus
[后处理] 基于推理轨迹点亮节点，使用了 13 个前提条件:
  - 前提: x is hiddpus
  - 前提: hiddpus is wumypus
  - 前提: wumypus is cectpus
  - 前提: cectpus is lebqpus
  - 前提: lebqpus is gasfpus
  - 前提: gasfpus is solkpus
  - 前提: solkpus is qazqpus
  - 前提: qazqpus is ligxpus
  - 前提: ligxpus is dejzpus
  - 前提: dejzpus is roydpus
  - 前提: roydpus is lenhpus
  - 前提: lenhpus is musrpus
  - 前提: musrpus is babrpus
  ✓ 点亮LoG节点: x is babcpus or babrpus
[子树点亮]     └─ 点亮依赖节点: x is lebqpus (深度2)
[子树点亮]     └─ 点亮依赖节点: lebqpus is babcpus or babrpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is lebqpus and kuvgpus (深度3)
[子树点亮]     └─ 点亮依赖节点: ligxpus is babcpus or babrpus (深度3)
[子树点亮]     └─ 点亮依赖节点: wumypus is lebqpus and kuvgpus (深度4)
[子树点亮]     └─ 点亮依赖节点: musrpus is babcpus or babrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: wumypus is lebqpus and kuvgpus and joggpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 7 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 108: x is babrpus
      ↻ 重复节点，计数: 2

   节点 109: x is babrpus
      ↻ 重复节点，计数: 3

   节点 110: x is babrpus
      ↻ 重复节点，计数: 4

   节点 111: x is babcpus or babrpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 112: x is babrpus
      ↻ 重复节点，计数: 5

   节点 113: x is babcpus or babrpus
      ↻ 重复节点，计数: 2

   节点 114: x is babrpus
      ↻ 重复节点，计数: 6

   节点 115: x is wumypus
      ↻ 重复节点，计数: 5

   节点 116: wumypus is musrpus
      ↻ 重复节点，计数: 2

   节点 117: musrpus is babrpus
      ↻ 重复节点，计数: 4

   节点 118: x is babrpus
      ↻ 重复节点，计数: 7

   节点 119: hiddpus is quwxpus
      ↻ 重复节点，计数: 3

   节点 120: x is babrpus
      ↻ 重复节点，计数: 8

   节点 121: x is babrpus
      ↻ 重复节点，计数: 9

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 121
   - 新增节点: 25
   - 更新已存在节点: 96
   - 点亮的LoG节点: 20

🎯 推理质量统计:
   - 完美推理: 24 (节点正确 + 路径正确)
   - 部分推理: 1 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 20节点, 13前提, 复杂度1-13

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 38
   - 前提节点: 13
   - 推理节点: 24
   - 幻觉节点: 1
   - 点亮LoG节点: 20

❌ 幻觉节点详情:
   - lebqpus is cectpus (出现1次)

✅ 推理节点详情:
   🟡 lebqpus is gasfpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['lebqpus is cectpus']
   🟢 gasfpus is solkpus (出现1次, 质量:perfect)
   🟢 qazqpus is ligxpus (出现1次, 质量:perfect)
   🟢 musrpus is babrpus (出现4次, 质量:perfect)
   🟢 hiddpus is wumypus (出现3次, 质量:perfect)
   🟢 hiddpus is quwxpus (出现3次, 质量:perfect)
   🟢 x is wumypus and quwxpus (出现2次, 质量:perfect)
   🟢 cectpus is lebqpus (出现6次, 质量:perfect)
   🟢 cectpus is kuvgpus (出现1次, 质量:perfect)
   🟢 cectpus is joggpus (出现1次, 质量:perfect)
   🟢 wumypus is lebqpus (出现1次, 质量:perfect)
   🟢 x is wumypus (出现5次, 质量:perfect)
   🟢 x is quwxpus (出现1次, 质量:perfect)
   🟢 cectpus is gasfpus (出现1次, 质量:perfect)
   🟢 wumypus is solkpus (出现1次, 质量:perfect)
   🟢 wumypus is qazqpus (出现1次, 质量:perfect)
   🟢 wumypus is ligxpus (出现1次, 质量:perfect)
   🟢 wumypus is dejzpus (出现1次, 质量:perfect)
   🟢 wumypus is roydpus (出现1次, 质量:perfect)
   🟢 wumypus is lenhpus (出现1次, 质量:perfect)
   🟢 wumypus is musrpus (出现2次, 质量:perfect)
   🟢 x is musrpus (出现1次, 质量:perfect)
   🟢 x is babrpus (出现9次, 质量:perfect)
   🟢 x is babcpus or babrpus (出现2次, 质量:perfect)

🔥 点亮的LoG节点:
   - roydpus is musrpus
   - solkpus is ligxpus and gexjpus
   - x is wumypus and quwxpus
   - lebqpus is solkpus
   - musrpus is babrpus
   - lebqpus is gasfpus
   - solkpus is ligxpus
   - lebqpus is ligxpus
   - x is babcpus or babrpus
   - ligxpus is babcpus or babrpus
   - wumypus is lebqpus and kuvgpus and joggpus
   - x is lebqpus
   - lebqpus is babcpus or babrpus
   - x is wumypus
   - ligxpus is musrpus
   - gasfpus is solkpus
   - musrpus is babcpus or babrpus
   - wumypus is lebqpus and kuvgpus
   - ligxpus is roydpus
   - x is lebqpus and kuvgpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus or babrpus (第5层)
   节点Coverage: 20/20 = 100.00%
   前提条件Coverage: 13/13 = 100.00%
   各推理层点亮比例:
     第1层: 8/8 = 100.00%
     第2层: 6/6 = 100.00%
     第3层: 3/3 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 1/25 = 4.00%
   可推导节点: 24/25
   Strict Error Rate: 2/25 = 8.00%
   严格有效节点: 23/25

   详细分析:
     完美推理: 24 (96.00%)
     部分推理: 1 (4.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 36/50
================================================================================
记录索引: 35
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_35.json
✅ 使用缓存结果:
   - 句子数: 105
   - 提取的语句数: 127
   - 初始条件数: 9

=== Statement提取完成 ===
总句子数: 105
成功提取: 105
失败提取: 0
总statements数: 127

=== 开始清洗Statement格式 ===
原始statements数: 127
清洗后statements数: 115
过滤掉的statements数: 12
清洗后的statements:
  1. [actual] meddpus is xubvpus
  2. [actual] xubvpus is disfpus
  3. [actual] disfpus is hovnpus and witypus
  4. [planning] disfpus is hovnpus and witypus
  5. [planning] disfpus is a subset of hovnpus and witypus
  6. [planning] x is babcpus
  7. [actual] x is xaylpus and tupvpus
  8. [actual] x is xaylpus and tupvpus
  9. [actual] disfpus is hovnpus and witypus
  10. [actual] meddpus is xubvpus
  11. [actual] xubvpus is disfpus
  12. [actual] disfpus is hovnpus and witypus
  13. [actual] disfpus is hovnpus and witypus
  14. [actual] xaylpus is meddpus
  15. [actual] pehzpus is babcpus and ristpus
  16. [actual] pehzpus is babcpus and ristpus
  17. [actual] dunmpus is xixkpus and zathpus
  18. [actual] dunmpus is xixkpus and zathpus
  19. [actual] hovnpus is pehzpus
  20. [planning] hovnpus is pehzpus
  21. [actual] disfpus is hovnpus
  22. [actual] hovnpus is pehzpus
  23. [planning] hovnpus is pehzpus
  24. [planning] disfpus is hovnpus
  25. [planning] disfpus is pehzpus
  26. [actual] x is xaylpus and tupvpus
  27. [actual] x is xaylpus and tupvpus
  28. [actual] hovnpus is dunmpus
  29. [actual] hovnpus is dunmpus
  30. [actual] hovnpus is pehzpus
  31. [actual] hovnpus is dunmpus
  32. [actual] hovnpus is both pehzpus and dunmpus
  33. [planning] x is babcpus
  34. [planning] x is babcpus
  35. [planning] x is babcpus
  36. [actual] x is xaylpus and tupvpus
  37. [actual] x is xaylpus
  38. [actual] xaylpus is meddpus
  39. [actual] x is xaylpus
  40. [actual] xaylpus is meddpus
  41. [actual] x is meddpus
  42. [planning] x is meddpus
  43. [actual] x is xaylpus
  44. [actual] xaylpus is meddpus
  45. [planning] x is meddpus
  46. [actual] meddpus is xubvpus
  47. [actual] meddpus is xubvpus
  48. [actual] x is meddpus
  49. [actual] x is xubvpus
  50. [actual] xubvpus is disfpus
  51. [actual] xubvpus is disfpus
  52. [actual] x is disfpus
  53. [actual] disfpus is hovnpus and witypus
  54. [planning] disfpus is hovnpus and witypus
  55. [actual] x is disfpus
  56. [actual] disfpus is hovnpus
  57. [actual] x is hovnpus
  58. [actual] hovnpus is pehzpus
  59. [planning] hovnpus is pehzpus
  60. [actual] hovnpus is pehzpus
  61. [planning] hovnpus is pehzpus
  62. [planning] hovnpus is an element of pehzpus
  63. [planning] hovnpus is a subset of pehzpus
  64. [actual] hovnpus is a subset of pehzpus
  65. [actual] hovnpus is a member
  66. [actual] pehzpus is babcpus and ristpus
  67. [actual] hovnpus is pehzpus
  68. [actual] pehzpus is babcpus
  69. [actual] hovnpus is babcpus
  70. [actual] x is hovnpus
  71. [actual] x is babcpus
  72. [actual] hovnpus is dunmpus
  73. [actual] hovnpus is dunmpus
  74. [actual] dunmpus is xixkpus and zathpus
  75. [planning] x is pehzpus
  76. [planning] x is babcpus
  77. [planning] x is directly in babcpus
  78. [actual] x is hovnpus
  79. [actual] hovnpus is pehzpus
  80. [actual] x is pehzpus
  81. [actual] pehzpus is babcpus
  82. [actual] x is babcpus
  83. [actual] x is babcpus
  84. [actual] x is xaylpus
  85. [actual] x is babgpus
  86. [actual] yexbpus is lerwpus and pazjpus
  87. [planning] x is babgpus and babkpus and babmpus
  88. [planning] x is babgpus
  89. [actual] xaylpus is meddpus
  90. [planning] x is babgpus
  91. [planning] x is babgpus and babkpus and babmpus
  92. [planning] x is meddpus
  93. [actual] x is xaylpus
  94. [actual] xaylpus is meddpus
  95. [actual] x is meddpus
  96. [actual] meddpus is xubvpus
  97. [actual] x is xubvpus
  98. [actual] xubvpus is disfpus
  99. [actual] x is disfpus
  100. [actual] disfpus is hovnpus and witypus
  101. [actual] disfpus is hovnpus
  102. [actual] x is hovnpus
  103. [actual] hovnpus is pehzpus
  104. [actual] hovnpus is pehzpus
  105. [actual] x is pehzpus
  106. [actual] pehzpus is babcpus and ristpus
  107. [actual] pehzpus is babcpus
  108. [actual] x is babcpus
  109. [actual] x is babcpus
  110. [planning] x is babcpus
  111. [actual] hovnpus is dunmpus
  112. [actual] dunmpus is xixkpus and zathpus
  113. [actual] hovnpus is dunmpus
  114. [actual] hovnpus is pehzpus
  115. [actual] pehzpus is babcpus

=== 开始标准化和解析节点 ===
清洗后statements数: 115
标准化后节点数: 108
过滤掉的无效实体数: 7
标准化后的节点:
  1. [actual] meddpus → xubvpus (原始: meddpus is xubvpus)
  2. [actual] xubvpus → disfpus (原始: xubvpus is disfpus)
  3. [actual] disfpus → hovnpus and witypus (原始: disfpus is hovnpus and witypus)
  4. [planning] disfpus → hovnpus and witypus (原始: disfpus is hovnpus and witypus)
  5. [planning] x → babcpus (原始: x is babcpus)
  6. [actual] x → xaylpus and tupvpus (原始: x is xaylpus and tupvpus)
  7. [actual] x → xaylpus and tupvpus (原始: x is xaylpus and tupvpus)
  8. [actual] disfpus → hovnpus and witypus (原始: disfpus is hovnpus and witypus)
  9. [actual] meddpus → xubvpus (原始: meddpus is xubvpus)
  10. [actual] xubvpus → disfpus (原始: xubvpus is disfpus)
  11. [actual] disfpus → hovnpus and witypus (原始: disfpus is hovnpus and witypus)
  12. [actual] disfpus → hovnpus and witypus (原始: disfpus is hovnpus and witypus)
  13. [actual] xaylpus → meddpus (原始: xaylpus is meddpus)
  14. [actual] pehzpus → babcpus and ristpus (原始: pehzpus is babcpus and ristpus)
  15. [actual] pehzpus → babcpus and ristpus (原始: pehzpus is babcpus and ristpus)
  16. [actual] dunmpus → xixkpus and zathpus (原始: dunmpus is xixkpus and zathpus)
  17. [actual] dunmpus → xixkpus and zathpus (原始: dunmpus is xixkpus and zathpus)
  18. [actual] hovnpus → pehzpus (原始: hovnpus is pehzpus)
  19. [planning] hovnpus → pehzpus (原始: hovnpus is pehzpus)
  20. [actual] disfpus → hovnpus (原始: disfpus is hovnpus)
  21. [actual] hovnpus → pehzpus (原始: hovnpus is pehzpus)
  22. [planning] hovnpus → pehzpus (原始: hovnpus is pehzpus)
  23. [planning] disfpus → hovnpus (原始: disfpus is hovnpus)
  24. [planning] disfpus → pehzpus (原始: disfpus is pehzpus)
  25. [actual] x → xaylpus and tupvpus (原始: x is xaylpus and tupvpus)
  26. [actual] x → xaylpus and tupvpus (原始: x is xaylpus and tupvpus)
  27. [actual] hovnpus → dunmpus (原始: hovnpus is dunmpus)
  28. [actual] hovnpus → dunmpus (原始: hovnpus is dunmpus)
  29. [actual] hovnpus → pehzpus (原始: hovnpus is pehzpus)
  30. [actual] hovnpus → dunmpus (原始: hovnpus is dunmpus)
  31. [planning] x → babcpus (原始: x is babcpus)
  32. [planning] x → babcpus (原始: x is babcpus)
  33. [planning] x → babcpus (原始: x is babcpus)
  34. [actual] x → xaylpus and tupvpus (原始: x is xaylpus and tupvpus)
  35. [actual] x → xaylpus (原始: x is xaylpus)
  36. [actual] xaylpus → meddpus (原始: xaylpus is meddpus)
  37. [actual] x → xaylpus (原始: x is xaylpus)
  38. [actual] xaylpus → meddpus (原始: xaylpus is meddpus)
  39. [actual] x → meddpus (原始: x is meddpus)
  40. [planning] x → meddpus (原始: x is meddpus)
  41. [actual] x → xaylpus (原始: x is xaylpus)
  42. [actual] xaylpus → meddpus (原始: xaylpus is meddpus)
  43. [planning] x → meddpus (原始: x is meddpus)
  44. [actual] meddpus → xubvpus (原始: meddpus is xubvpus)
  45. [actual] meddpus → xubvpus (原始: meddpus is xubvpus)
  46. [actual] x → meddpus (原始: x is meddpus)
  47. [actual] x → xubvpus (原始: x is xubvpus)
  48. [actual] xubvpus → disfpus (原始: xubvpus is disfpus)
  49. [actual] xubvpus → disfpus (原始: xubvpus is disfpus)
  50. [actual] x → disfpus (原始: x is disfpus)
  51. [actual] disfpus → hovnpus and witypus (原始: disfpus is hovnpus and witypus)
  52. [planning] disfpus → hovnpus and witypus (原始: disfpus is hovnpus and witypus)
  53. [actual] x → disfpus (原始: x is disfpus)
  54. [actual] disfpus → hovnpus (原始: disfpus is hovnpus)
  55. [actual] x → hovnpus (原始: x is hovnpus)
  56. [actual] hovnpus → pehzpus (原始: hovnpus is pehzpus)
  57. [planning] hovnpus → pehzpus (原始: hovnpus is pehzpus)
  58. [actual] hovnpus → pehzpus (原始: hovnpus is pehzpus)
  59. [planning] hovnpus → pehzpus (原始: hovnpus is pehzpus)
  60. [actual] pehzpus → babcpus and ristpus (原始: pehzpus is babcpus and ristpus)
  61. [actual] hovnpus → pehzpus (原始: hovnpus is pehzpus)
  62. [actual] pehzpus → babcpus (原始: pehzpus is babcpus)
  63. [actual] hovnpus → babcpus (原始: hovnpus is babcpus)
  64. [actual] x → hovnpus (原始: x is hovnpus)
  65. [actual] x → babcpus (原始: x is babcpus)
  66. [actual] hovnpus → dunmpus (原始: hovnpus is dunmpus)
  67. [actual] hovnpus → dunmpus (原始: hovnpus is dunmpus)
  68. [actual] dunmpus → xixkpus and zathpus (原始: dunmpus is xixkpus and zathpus)
  69. [planning] x → pehzpus (原始: x is pehzpus)
  70. [planning] x → babcpus (原始: x is babcpus)
  71. [actual] x → hovnpus (原始: x is hovnpus)
  72. [actual] hovnpus → pehzpus (原始: hovnpus is pehzpus)
  73. [actual] x → pehzpus (原始: x is pehzpus)
  74. [actual] pehzpus → babcpus (原始: pehzpus is babcpus)
  75. [actual] x → babcpus (原始: x is babcpus)
  76. [actual] x → babcpus (原始: x is babcpus)
  77. [actual] x → xaylpus (原始: x is xaylpus)
  78. [actual] x → babgpus (原始: x is babgpus)
  79. [actual] yexbpus → lerwpus and pazjpus (原始: yexbpus is lerwpus and pazjpus)
  80. [planning] x → babgpus and babkpus and babmpus (原始: x is babgpus and babkpus and babmpus)
  81. [planning] x → babgpus (原始: x is babgpus)
  82. [actual] xaylpus → meddpus (原始: xaylpus is meddpus)
  83. [planning] x → babgpus (原始: x is babgpus)
  84. [planning] x → babgpus and babkpus and babmpus (原始: x is babgpus and babkpus and babmpus)
  85. [planning] x → meddpus (原始: x is meddpus)
  86. [actual] x → xaylpus (原始: x is xaylpus)
  87. [actual] xaylpus → meddpus (原始: xaylpus is meddpus)
  88. [actual] x → meddpus (原始: x is meddpus)
  89. [actual] meddpus → xubvpus (原始: meddpus is xubvpus)
  90. [actual] x → xubvpus (原始: x is xubvpus)
  91. [actual] xubvpus → disfpus (原始: xubvpus is disfpus)
  92. [actual] x → disfpus (原始: x is disfpus)
  93. [actual] disfpus → hovnpus and witypus (原始: disfpus is hovnpus and witypus)
  94. [actual] disfpus → hovnpus (原始: disfpus is hovnpus)
  95. [actual] x → hovnpus (原始: x is hovnpus)
  96. [actual] hovnpus → pehzpus (原始: hovnpus is pehzpus)
  97. [actual] hovnpus → pehzpus (原始: hovnpus is pehzpus)
  98. [actual] x → pehzpus (原始: x is pehzpus)
  99. [actual] pehzpus → babcpus and ristpus (原始: pehzpus is babcpus and ristpus)
  100. [actual] pehzpus → babcpus (原始: pehzpus is babcpus)
  101. [actual] x → babcpus (原始: x is babcpus)
  102. [actual] x → babcpus (原始: x is babcpus)
  103. [planning] x → babcpus (原始: x is babcpus)
  104. [actual] hovnpus → dunmpus (原始: hovnpus is dunmpus)
  105. [actual] dunmpus → xixkpus and zathpus (原始: dunmpus is xixkpus and zathpus)
  106. [actual] hovnpus → dunmpus (原始: hovnpus is dunmpus)
  107. [actual] hovnpus → pehzpus (原始: hovnpus is pehzpus)
  108. [actual] pehzpus → babcpus (原始: pehzpus is babcpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 13
[后处理] 加载LoG图，包含 13 个节点
  LoG节点 0: x is babcpus (规则: CE, 深度: 1)
  LoG节点 1: x is babcpus and xixkpus (规则: MP, 深度: 2)
  LoG节点 2: x is hovnpus (规则: MP, 深度: 3)
  LoG节点 3: hovnpus is babcpus and xixkpus (规则: CI, 深度: 3)
  LoG节点 4: x is xubvpus (规则: MP, 深度: 4)
  LoG节点 5: xubvpus is hovnpus (规则: CE, 深度: 4)
  LoG节点 6: hovnpus is babcpus (规则: CE, 深度: 4)
  LoG节点 7: hovnpus is xixkpus (规则: CE, 深度: 4)
  LoG节点 8: x is xaylpus (规则: CE, 深度: 5)
  LoG节点 9: xaylpus is xubvpus (规则: MP, 深度: 5)
  LoG节点 10: xubvpus is hovnpus and witypus (规则: MP, 深度: 5)
  LoG节点 11: hovnpus is babcpus and ristpus (规则: MP, 深度: 5)
  LoG节点 12: hovnpus is xixkpus and zathpus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 108
   - 初始条件数: 9
   - LoG图节点数: 13

📋 初始条件列表:
    1. meddpus is xubvpus
    2. xubvpus is disfpus
    3. disfpus is hovnpus and witypus
    4. xaylpus is meddpus
    5. pehzpus is babcpus and ristpus
    6. dunmpus is xixkpus and zathpus
    7. hovnpus is pehzpus
    8. x is xaylpus and tupvpus
    9. hovnpus is dunmpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 9 个前提节点

🔍 开始处理actual节点...

   节点 1: meddpus is xubvpus
      ↻ 重复节点，计数: 2

   节点 2: xubvpus is disfpus
      ↻ 重复节点，计数: 2

   节点 3: disfpus is hovnpus and witypus
      ↻ 重复节点，计数: 2

   节点 4: x is xaylpus and tupvpus
      ↻ 重复节点，计数: 2

   节点 5: x is xaylpus and tupvpus
      ↻ 重复节点，计数: 3

   节点 6: disfpus is hovnpus and witypus
      ↻ 重复节点，计数: 3

   节点 7: meddpus is xubvpus
      ↻ 重复节点，计数: 3

   节点 8: xubvpus is disfpus
      ↻ 重复节点，计数: 3

   节点 9: disfpus is hovnpus and witypus
      ↻ 重复节点，计数: 4

   节点 10: disfpus is hovnpus and witypus
      ↻ 重复节点，计数: 5

   节点 11: xaylpus is meddpus
      ↻ 重复节点，计数: 2

   节点 12: pehzpus is babcpus and ristpus
      ↻ 重复节点，计数: 2

   节点 13: pehzpus is babcpus and ristpus
      ↻ 重复节点，计数: 3

   节点 14: dunmpus is xixkpus and zathpus
      ↻ 重复节点，计数: 2

   节点 15: dunmpus is xixkpus and zathpus
      ↻ 重复节点，计数: 3

   节点 16: hovnpus is pehzpus
      ↻ 重复节点，计数: 2

   节点 17: disfpus is hovnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: disfpus is hovnpus and witypus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: disfpus is hovnpus and witypus

   节点 18: hovnpus is pehzpus
      ↻ 重复节点，计数: 3

   节点 19: x is xaylpus and tupvpus
      ↻ 重复节点，计数: 4

   节点 20: x is xaylpus and tupvpus
      ↻ 重复节点，计数: 5

   节点 21: hovnpus is dunmpus
      ↻ 重复节点，计数: 2

   节点 22: hovnpus is dunmpus
      ↻ 重复节点，计数: 3

   节点 23: hovnpus is pehzpus
      ↻ 重复节点，计数: 4

   节点 24: hovnpus is dunmpus
      ↻ 重复节点，计数: 4

   节点 25: x is xaylpus and tupvpus
      ↻ 重复节点，计数: 6

   节点 26: x is xaylpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is xaylpus
      ✅ 验证成功 + LoG匹配

   节点 27: xaylpus is meddpus
      ↻ 重复节点，计数: 3

   节点 28: x is xaylpus
      ↻ 重复节点，计数: 2

   节点 29: xaylpus is meddpus
      ↻ 重复节点，计数: 4

   节点 30: x is meddpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xaylpus → xaylpus is meddpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is xaylpus
  - 前提: xaylpus is meddpus

   节点 31: x is xaylpus
      ↻ 重复节点，计数: 3

   节点 32: xaylpus is meddpus
      ↻ 重复节点，计数: 5

   节点 33: meddpus is xubvpus
      ↻ 重复节点，计数: 4

   节点 34: meddpus is xubvpus
      ↻ 重复节点，计数: 5

   节点 35: x is meddpus
      ↻ 重复节点，计数: 2

   节点 36: x is xubvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is xubvpus
[子树点亮]     └─ 点亮依赖节点: xaylpus is xubvpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 37: xubvpus is disfpus
      ↻ 重复节点，计数: 4

   节点 38: xubvpus is disfpus
      ↻ 重复节点，计数: 5

   节点 39: x is disfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xaylpus → xaylpus is disfpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is xaylpus
  - 前提: xaylpus is meddpus
  - 前提: meddpus is xubvpus
  - 前提: xubvpus is disfpus

   节点 40: disfpus is hovnpus and witypus
      ↻ 重复节点，计数: 6

   节点 41: x is disfpus
      ↻ 重复节点，计数: 2

   节点 42: disfpus is hovnpus
      ↻ 重复节点，计数: 2

   节点 43: x is hovnpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is hovnpus
[子树点亮]     └─ 点亮依赖节点: xubvpus is hovnpus (深度4)
[子树点亮]     └─ 点亮依赖节点: xubvpus is hovnpus and witypus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 44: hovnpus is pehzpus
      ↻ 重复节点，计数: 5

   节点 45: hovnpus is pehzpus
      ↻ 重复节点，计数: 6

   节点 46: pehzpus is babcpus and ristpus
      ↻ 重复节点，计数: 4

   节点 47: hovnpus is pehzpus
      ↻ 重复节点，计数: 7

   节点 48: pehzpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: pehzpus is babcpus and ristpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: pehzpus is babcpus and ristpus

   节点 49: hovnpus is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: hovnpus is babcpus
[子树点亮]     └─ 点亮依赖节点: hovnpus is babcpus and ristpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 50: x is hovnpus
      ↻ 重复节点，计数: 2

   节点 51: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: x is babcpus and xixkpus (深度2)
[子树点亮]     └─ 点亮依赖节点: hovnpus is babcpus and xixkpus (深度3)
[子树点亮]     └─ 点亮依赖节点: hovnpus is xixkpus (深度4)
[子树点亮]     └─ 点亮依赖节点: hovnpus is xixkpus and zathpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
      ✅ 验证成功 + LoG匹配

   节点 52: hovnpus is dunmpus
      ↻ 重复节点，计数: 5

   节点 53: hovnpus is dunmpus
      ↻ 重复节点，计数: 6

   节点 54: dunmpus is xixkpus and zathpus
      ↻ 重复节点，计数: 4

   节点 55: x is hovnpus
      ↻ 重复节点，计数: 3

   节点 56: hovnpus is pehzpus
      ↻ 重复节点，计数: 8

   节点 57: x is pehzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xaylpus → xaylpus is pehzpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is xaylpus
  - 前提: xaylpus is meddpus
  - 前提: meddpus is xubvpus
  - 前提: xubvpus is disfpus
  - 前提: disfpus is hovnpus
  - 前提: hovnpus is pehzpus

   节点 58: pehzpus is babcpus
      ↻ 重复节点，计数: 2

   节点 59: x is babcpus
      ↻ 重复节点，计数: 2

   节点 60: x is babcpus
      ↻ 重复节点，计数: 3

   节点 61: x is xaylpus
      ↻ 重复节点，计数: 4

   节点 62: x is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 63: yexbpus is lerwpus and pazjpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 64: xaylpus is meddpus
      ↻ 重复节点，计数: 6

   节点 65: x is xaylpus
      ↻ 重复节点，计数: 5

   节点 66: xaylpus is meddpus
      ↻ 重复节点，计数: 7

   节点 67: x is meddpus
      ↻ 重复节点，计数: 3

   节点 68: meddpus is xubvpus
      ↻ 重复节点，计数: 6

   节点 69: x is xubvpus
      ↻ 重复节点，计数: 2

   节点 70: xubvpus is disfpus
      ↻ 重复节点，计数: 6

   节点 71: x is disfpus
      ↻ 重复节点，计数: 3

   节点 72: disfpus is hovnpus and witypus
      ↻ 重复节点，计数: 7

   节点 73: disfpus is hovnpus
      ↻ 重复节点，计数: 3

   节点 74: x is hovnpus
      ↻ 重复节点，计数: 4

   节点 75: hovnpus is pehzpus
      ↻ 重复节点，计数: 9

   节点 76: hovnpus is pehzpus
      ↻ 重复节点，计数: 10

   节点 77: x is pehzpus
      ↻ 重复节点，计数: 2

   节点 78: pehzpus is babcpus and ristpus
      ↻ 重复节点，计数: 5

   节点 79: pehzpus is babcpus
      ↻ 重复节点，计数: 3

   节点 80: x is babcpus
      ↻ 重复节点，计数: 4

   节点 81: x is babcpus
      ↻ 重复节点，计数: 5

   节点 82: hovnpus is dunmpus
      ↻ 重复节点，计数: 7

   节点 83: dunmpus is xixkpus and zathpus
      ↻ 重复节点，计数: 5

   节点 84: hovnpus is dunmpus
      ↻ 重复节点，计数: 8

   节点 85: hovnpus is pehzpus
      ↻ 重复节点，计数: 11

   节点 86: pehzpus is babcpus
      ↻ 重复节点，计数: 4

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 86
   - 新增节点: 12
   - 更新已存在节点: 74
   - 点亮的LoG节点: 13

🎯 推理质量统计:
   - 完美推理: 5 (节点正确 + 路径正确)
   - 部分推理: 7 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 13节点, 9前提, 复杂度1-9

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 21
   - 前提节点: 9
   - 推理节点: 10
   - 幻觉节点: 2
   - 点亮LoG节点: 13

❌ 幻觉节点详情:
   - x is babgpus (出现1次)
   - yexbpus is lerwpus and pazjpus (出现1次)

✅ 推理节点详情:
   🟢 disfpus is hovnpus (出现3次, 质量:perfect)
   🟡 x is xaylpus (出现5次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus']
   🟡 x is meddpus (出现3次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus']
   🟡 x is xubvpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus']
   🟡 x is disfpus (出现3次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus']
   🟡 x is hovnpus (出现4次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus']
   🟢 pehzpus is babcpus (出现4次, 质量:perfect)
   🟢 hovnpus is babcpus (出现1次, 质量:perfect)
   🟡 x is babcpus (出现5次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus']
   🟡 x is pehzpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus']

🔥 点亮的LoG节点:
   - x is hovnpus
   - hovnpus is babcpus and xixkpus
   - x is babcpus
   - x is xubvpus
   - xaylpus is xubvpus
   - hovnpus is babcpus
   - hovnpus is xixkpus
   - xubvpus is hovnpus
   - xubvpus is hovnpus and witypus
   - x is xaylpus
   - hovnpus is xixkpus and zathpus
   - hovnpus is babcpus and ristpus
   - x is babcpus and xixkpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus (第5层)
   节点Coverage: 13/13 = 100.00%
   前提条件Coverage: 9/9 = 100.00%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 2/12 = 16.67%
   可推导节点: 10/12
   Strict Error Rate: 9/12 = 75.00%
   严格有效节点: 3/12

   详细分析:
     完美推理: 5 (41.67%)
     部分推理: 7 (58.33%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 37/50
================================================================================
记录索引: 36
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_36.json
✅ 使用缓存结果:
   - 句子数: 93
   - 提取的语句数: 117
   - 初始条件数: 9

=== Statement提取完成 ===
总句子数: 93
成功提取: 93
失败提取: 0
总statements数: 117

=== 开始清洗Statement格式 ===
原始statements数: 117
清洗后statements数: 86
过滤掉的statements数: 31
清洗后的statements:
  1. [actual] x is babgpus
  2. [planning] x is babgpus
  3. [actual] fipbpus is suybpus
  4. [actual] sejdpus is joqbpus
  5. [actual] yixcpus is sejdpus
  6. [actual] fuyspus is fipbpus and cahbpus
  7. [actual] suybpus is yixcpus
  8. [actual] joqbpus is yakbpus
  9. [actual] joqbpus is babcpus
  10. [actual] jezwpus is fuyspus and dorfpus
  11. [actual] x is jezwpus and caqqpus
  12. [planning] x is babcpus
  13. [planning] x is babrpus
  14. [planning] x is babspus
  15. [planning] x is babcpus
  16. [planning] x is babrpus
  17. [planning] x is babspus
  18. [actual] joqbpus is babcpus
  19. [actual] joqbpus is babcpus
  20. [planning] x is joqbpus or babcpus
  21. [actual] x is jezwpus and caqqpus
  22. [actual] x is jezwpus and caqqpus
  23. [actual] jezwpus is fuyspus and dorfpus
  24. [actual] jezwpus is fuyspus and dorfpus
  25. [actual] fuyspus is fipbpus and cahbpus
  26. [actual] fuyspus is fipbpus and cahbpus
  27. [actual] fipbpus is suybpus
  28. [actual] fipbpus is suybpus
  29. [actual] suybpus is yixcpus
  30. [actual] suybpus is yixcpus
  31. [actual] yixcpus is sejdpus
  32. [actual] yixcpus is sejdpus
  33. [actual] sejdpus is joqbpus
  34. [actual] sejdpus is joqbpus
  35. [actual] joqbpus is babcpus
  36. [actual] joqbpus is babcpus
  37. [actual] sejdpus is joqbpus
  38. [actual] yixcpus is sejdpus
  39. [planning] x is joqbpus
  40. [actual] x is jezwpus
  41. [actual] jezwpus is fuyspus
  42. [actual] fuyspus is fipbpus
  43. [actual] fipbpus is suybpus
  44. [actual] suybpus is yixcpus
  45. [actual] yixcpus is sejdpus
  46. [actual] sejdpus is joqbpus
  47. [actual] joqbpus is babcpus
  48. [actual] fuyspus is fipbpus and cahbpus
  49. [actual] fuyspus is a type of fipbpus
  50. [actual] fuyspus is a type of cahbpus
  51. [actual] jezwpus is fuyspus and dorfpus
  52. [actual] jezwpus is a type of fuyspus
  53. [actual] jezwpus is a type of dorfpus
  54. [planning] jezwpus is fuyspus and dorfpus
  55. [actual] yixcpus is sejdpus
  56. [actual] sejdpus is joqbpus
  57. [actual] yixcpus is joqbpus
  58. [actual] suybpus is yixcpus
  59. [actual] yixcpus is sejdpus
  60. [actual] suybpus is sejdpus
  61. [actual] fipbpus is suybpus
  62. [actual] suybpus is sejdpus
  63. [actual] fipbpus is sejdpus
  64. [actual] x is jezwpus
  65. [actual] jezwpus is fuyspus
  66. [actual] fuyspus is fipbpus
  67. [actual] fipbpus is suybpus
  68. [actual] suybpus is yixcpus
  69. [actual] yixcpus is sejdpus
  70. [actual] sejdpus is joqbpus
  71. [actual] joqbpus is babcpus
  72. [actual] x is babcpus
  73. [planning] x is babcpus or babrpus or babspus
  74. [actual] x is babcpus
  75. [actual] x is babcpus
  76. [planning] x is babcpus
  77. [planning] x is babrpus
  78. [planning] x is babspus
  79. [actual] x is babcpus
  80. [planning] x is babrpus or babspus
  81. [actual] x is babcpus or babrpus or babspus
  82. [actual] x is babcpus
  83. [actual] x is caqqpus
  84. [actual] jezwpus is dorfpus
  85. [actual] x is babcpus
  86. [planning] x is babcpus

=== 开始标准化和解析节点 ===
清洗后statements数: 86
标准化后节点数: 82
过滤掉的无效实体数: 4
标准化后的节点:
  1. [actual] x → babgpus (原始: x is babgpus)
  2. [planning] x → babgpus (原始: x is babgpus)
  3. [actual] fipbpus → suybpus (原始: fipbpus is suybpus)
  4. [actual] sejdpus → joqbpus (原始: sejdpus is joqbpus)
  5. [actual] yixcpus → sejdpus (原始: yixcpus is sejdpus)
  6. [actual] fuyspus → fipbpus and cahbpus (原始: fuyspus is fipbpus and cahbpus)
  7. [actual] suybpus → yixcpus (原始: suybpus is yixcpus)
  8. [actual] joqbpus → yakbpus (原始: joqbpus is yakbpus)
  9. [actual] joqbpus → babcpus (原始: joqbpus is babcpus)
  10. [actual] jezwpus → fuyspus and dorfpus (原始: jezwpus is fuyspus and dorfpus)
  11. [actual] x → jezwpus and caqqpus (原始: x is jezwpus and caqqpus)
  12. [planning] x → babcpus (原始: x is babcpus)
  13. [planning] x → babrpus (原始: x is babrpus)
  14. [planning] x → babspus (原始: x is babspus)
  15. [planning] x → babcpus (原始: x is babcpus)
  16. [planning] x → babrpus (原始: x is babrpus)
  17. [planning] x → babspus (原始: x is babspus)
  18. [actual] joqbpus → babcpus (原始: joqbpus is babcpus)
  19. [actual] joqbpus → babcpus (原始: joqbpus is babcpus)
  20. [planning] x → joqbpus or babcpus (原始: x is joqbpus or babcpus)
  21. [actual] x → jezwpus and caqqpus (原始: x is jezwpus and caqqpus)
  22. [actual] x → jezwpus and caqqpus (原始: x is jezwpus and caqqpus)
  23. [actual] jezwpus → fuyspus and dorfpus (原始: jezwpus is fuyspus and dorfpus)
  24. [actual] jezwpus → fuyspus and dorfpus (原始: jezwpus is fuyspus and dorfpus)
  25. [actual] fuyspus → fipbpus and cahbpus (原始: fuyspus is fipbpus and cahbpus)
  26. [actual] fuyspus → fipbpus and cahbpus (原始: fuyspus is fipbpus and cahbpus)
  27. [actual] fipbpus → suybpus (原始: fipbpus is suybpus)
  28. [actual] fipbpus → suybpus (原始: fipbpus is suybpus)
  29. [actual] suybpus → yixcpus (原始: suybpus is yixcpus)
  30. [actual] suybpus → yixcpus (原始: suybpus is yixcpus)
  31. [actual] yixcpus → sejdpus (原始: yixcpus is sejdpus)
  32. [actual] yixcpus → sejdpus (原始: yixcpus is sejdpus)
  33. [actual] sejdpus → joqbpus (原始: sejdpus is joqbpus)
  34. [actual] sejdpus → joqbpus (原始: sejdpus is joqbpus)
  35. [actual] joqbpus → babcpus (原始: joqbpus is babcpus)
  36. [actual] joqbpus → babcpus (原始: joqbpus is babcpus)
  37. [actual] sejdpus → joqbpus (原始: sejdpus is joqbpus)
  38. [actual] yixcpus → sejdpus (原始: yixcpus is sejdpus)
  39. [planning] x → joqbpus (原始: x is joqbpus)
  40. [actual] x → jezwpus (原始: x is jezwpus)
  41. [actual] jezwpus → fuyspus (原始: jezwpus is fuyspus)
  42. [actual] fuyspus → fipbpus (原始: fuyspus is fipbpus)
  43. [actual] fipbpus → suybpus (原始: fipbpus is suybpus)
  44. [actual] suybpus → yixcpus (原始: suybpus is yixcpus)
  45. [actual] yixcpus → sejdpus (原始: yixcpus is sejdpus)
  46. [actual] sejdpus → joqbpus (原始: sejdpus is joqbpus)
  47. [actual] joqbpus → babcpus (原始: joqbpus is babcpus)
  48. [actual] fuyspus → fipbpus and cahbpus (原始: fuyspus is fipbpus and cahbpus)
  49. [actual] jezwpus → fuyspus and dorfpus (原始: jezwpus is fuyspus and dorfpus)
  50. [planning] jezwpus → fuyspus and dorfpus (原始: jezwpus is fuyspus and dorfpus)
  51. [actual] yixcpus → sejdpus (原始: yixcpus is sejdpus)
  52. [actual] sejdpus → joqbpus (原始: sejdpus is joqbpus)
  53. [actual] yixcpus → joqbpus (原始: yixcpus is joqbpus)
  54. [actual] suybpus → yixcpus (原始: suybpus is yixcpus)
  55. [actual] yixcpus → sejdpus (原始: yixcpus is sejdpus)
  56. [actual] suybpus → sejdpus (原始: suybpus is sejdpus)
  57. [actual] fipbpus → suybpus (原始: fipbpus is suybpus)
  58. [actual] suybpus → sejdpus (原始: suybpus is sejdpus)
  59. [actual] fipbpus → sejdpus (原始: fipbpus is sejdpus)
  60. [actual] x → jezwpus (原始: x is jezwpus)
  61. [actual] jezwpus → fuyspus (原始: jezwpus is fuyspus)
  62. [actual] fuyspus → fipbpus (原始: fuyspus is fipbpus)
  63. [actual] fipbpus → suybpus (原始: fipbpus is suybpus)
  64. [actual] suybpus → yixcpus (原始: suybpus is yixcpus)
  65. [actual] yixcpus → sejdpus (原始: yixcpus is sejdpus)
  66. [actual] sejdpus → joqbpus (原始: sejdpus is joqbpus)
  67. [actual] joqbpus → babcpus (原始: joqbpus is babcpus)
  68. [actual] x → babcpus (原始: x is babcpus)
  69. [planning] x → babcpus or babrpus or babspus (原始: x is babcpus or babrpus or babspus)
  70. [actual] x → babcpus (原始: x is babcpus)
  71. [actual] x → babcpus (原始: x is babcpus)
  72. [planning] x → babcpus (原始: x is babcpus)
  73. [planning] x → babrpus (原始: x is babrpus)
  74. [planning] x → babspus (原始: x is babspus)
  75. [actual] x → babcpus (原始: x is babcpus)
  76. [planning] x → babrpus or babspus (原始: x is babrpus or babspus)
  77. [actual] x → babcpus or babrpus or babspus (原始: x is babcpus or babrpus or babspus)
  78. [actual] x → babcpus (原始: x is babcpus)
  79. [actual] x → caqqpus (原始: x is caqqpus)
  80. [actual] jezwpus → dorfpus (原始: jezwpus is dorfpus)
  81. [actual] x → babcpus (原始: x is babcpus)
  82. [planning] x → babcpus (原始: x is babcpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 13
[后处理] 加载LoG图，包含 13 个节点
  LoG节点 0: x is babcpus or babrpus or babspus (规则: DI, 深度: 1)
  LoG节点 1: x is babcpus (规则: MP, 深度: 2)
  LoG节点 2: x is yixcpus (规则: MP, 深度: 3)
  LoG节点 3: yixcpus is babcpus (规则: CE, 深度: 3)
  LoG节点 4: x is fuyspus (规则: MP, 深度: 4)
  LoG节点 5: fuyspus is yixcpus (规则: MP, 深度: 4)
  LoG节点 6: yixcpus is babcpus and yakbpus (规则: MP, 深度: 4)
  LoG节点 7: x is jezwpus (规则: CE, 深度: 5)
  LoG节点 8: jezwpus is fuyspus (规则: CE, 深度: 5)
  LoG节点 9: fuyspus is fipbpus (规则: CE, 深度: 5)
  LoG节点 10: fipbpus is yixcpus (规则: MP, 深度: 5)
  LoG节点 11: yixcpus is joqbpus (规则: MP, 深度: 5)
  LoG节点 12: joqbpus is babcpus and yakbpus (规则: CI, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 82
   - 初始条件数: 9
   - LoG图节点数: 13

📋 初始条件列表:
    1. fipbpus is suybpus
    2. sejdpus is joqbpus
    3. yixcpus is sejdpus
    4. fuyspus is fipbpus and cahbpus
    5. suybpus is yixcpus
    6. joqbpus is yakbpus
    7. joqbpus is babcpus
    8. jezwpus is fuyspus and dorfpus
    9. x is jezwpus and caqqpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 9 个前提节点

🔍 开始处理actual节点...

   节点 1: x is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 2: fipbpus is suybpus
      ↻ 重复节点，计数: 2

   节点 3: sejdpus is joqbpus
      ↻ 重复节点，计数: 2

   节点 4: yixcpus is sejdpus
      ↻ 重复节点，计数: 2

   节点 5: fuyspus is fipbpus and cahbpus
      ↻ 重复节点，计数: 2

   节点 6: suybpus is yixcpus
      ↻ 重复节点，计数: 2

   节点 7: joqbpus is yakbpus
      ↻ 重复节点，计数: 2

   节点 8: joqbpus is babcpus
      ↻ 重复节点，计数: 2

   节点 9: jezwpus is fuyspus and dorfpus
      ↻ 重复节点，计数: 2

   节点 10: x is jezwpus and caqqpus
      ↻ 重复节点，计数: 2

   节点 11: joqbpus is babcpus
      ↻ 重复节点，计数: 3

   节点 12: joqbpus is babcpus
      ↻ 重复节点，计数: 4

   节点 13: x is jezwpus and caqqpus
      ↻ 重复节点，计数: 3

   节点 14: x is jezwpus and caqqpus
      ↻ 重复节点，计数: 4

   节点 15: jezwpus is fuyspus and dorfpus
      ↻ 重复节点，计数: 3

   节点 16: jezwpus is fuyspus and dorfpus
      ↻ 重复节点，计数: 4

   节点 17: fuyspus is fipbpus and cahbpus
      ↻ 重复节点，计数: 3

   节点 18: fuyspus is fipbpus and cahbpus
      ↻ 重复节点，计数: 4

   节点 19: fipbpus is suybpus
      ↻ 重复节点，计数: 3

   节点 20: fipbpus is suybpus
      ↻ 重复节点，计数: 4

   节点 21: suybpus is yixcpus
      ↻ 重复节点，计数: 3

   节点 22: suybpus is yixcpus
      ↻ 重复节点，计数: 4

   节点 23: yixcpus is sejdpus
      ↻ 重复节点，计数: 3

   节点 24: yixcpus is sejdpus
      ↻ 重复节点，计数: 4

   节点 25: sejdpus is joqbpus
      ↻ 重复节点，计数: 3

   节点 26: sejdpus is joqbpus
      ↻ 重复节点，计数: 4

   节点 27: joqbpus is babcpus
      ↻ 重复节点，计数: 5

   节点 28: joqbpus is babcpus
      ↻ 重复节点，计数: 6

   节点 29: sejdpus is joqbpus
      ↻ 重复节点，计数: 5

   节点 30: yixcpus is sejdpus
      ↻ 重复节点，计数: 5

   节点 31: x is jezwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is jezwpus
      ✅ 验证成功 + LoG匹配

   节点 32: jezwpus is fuyspus
      🔍 验证新节点...
[后处理] 点亮LoG节点: jezwpus is fuyspus
      ✅ 验证成功 + LoG匹配

   节点 33: fuyspus is fipbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: fuyspus is fipbpus
      ✅ 验证成功 + LoG匹配

   节点 34: fipbpus is suybpus
      ↻ 重复节点，计数: 5

   节点 35: suybpus is yixcpus
      ↻ 重复节点，计数: 5

   节点 36: yixcpus is sejdpus
      ↻ 重复节点，计数: 6

   节点 37: sejdpus is joqbpus
      ↻ 重复节点，计数: 6

   节点 38: joqbpus is babcpus
      ↻ 重复节点，计数: 7

   节点 39: fuyspus is fipbpus and cahbpus
      ↻ 重复节点，计数: 5

   节点 40: jezwpus is fuyspus and dorfpus
      ↻ 重复节点，计数: 5

   节点 41: yixcpus is sejdpus
      ↻ 重复节点，计数: 7

   节点 42: sejdpus is joqbpus
      ↻ 重复节点，计数: 7

   节点 43: yixcpus is joqbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: yixcpus is joqbpus
      ✅ 验证成功 + LoG匹配

   节点 44: suybpus is yixcpus
      ↻ 重复节点，计数: 6

   节点 45: yixcpus is sejdpus
      ↻ 重复节点，计数: 8

   节点 46: suybpus is sejdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: suybpus is yixcpus → yixcpus is sejdpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: suybpus is yixcpus
  - 前提: yixcpus is sejdpus

   节点 47: fipbpus is suybpus
      ↻ 重复节点，计数: 6

   节点 48: suybpus is sejdpus
      ↻ 重复节点，计数: 2

   节点 49: fipbpus is sejdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: fipbpus is suybpus → suybpus is sejdpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: fipbpus is suybpus
  - 前提: suybpus is sejdpus

   节点 50: x is jezwpus
      ↻ 重复节点，计数: 2

   节点 51: jezwpus is fuyspus
      ↻ 重复节点，计数: 2

   节点 52: fuyspus is fipbpus
      ↻ 重复节点，计数: 2

   节点 53: fipbpus is suybpus
      ↻ 重复节点，计数: 7

   节点 54: suybpus is yixcpus
      ↻ 重复节点，计数: 7

   节点 55: yixcpus is sejdpus
      ↻ 重复节点，计数: 9

   节点 56: sejdpus is joqbpus
      ↻ 重复节点，计数: 8

   节点 57: joqbpus is babcpus
      ↻ 重复节点，计数: 8

   节点 58: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: x is yixcpus (深度3)
[子树点亮]     └─ 点亮依赖节点: yixcpus is babcpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is fuyspus (深度4)
[子树点亮]     └─ 点亮依赖节点: fuyspus is yixcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: yixcpus is babcpus and yakbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: fipbpus is yixcpus (深度5)
[子树点亮]     └─ 点亮依赖节点: joqbpus is babcpus and yakbpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 7 个节点
      ✅ 验证成功 + LoG匹配

   节点 59: x is babcpus
      ↻ 重复节点，计数: 2

   节点 60: x is babcpus
      ↻ 重复节点，计数: 3

   节点 61: x is babcpus
      ↻ 重复节点，计数: 4

   节点 62: x is babcpus or babrpus or babspus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus or babrpus or babspus
      ✅ 验证成功 + LoG匹配

   节点 63: x is babcpus
      ↻ 重复节点，计数: 5

   节点 64: x is caqqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is jezwpus and caqqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is jezwpus and caqqpus

   节点 65: jezwpus is dorfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: jezwpus is fuyspus and dorfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: jezwpus is fuyspus and dorfpus

   节点 66: x is babcpus
      ↻ 重复节点，计数: 6

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 66
   - 新增节点: 11
   - 更新已存在节点: 55
   - 点亮的LoG节点: 13

🎯 推理质量统计:
   - 完美推理: 7 (节点正确 + 路径正确)
   - 部分推理: 4 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 13节点, 9前提, 复杂度1-9

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 20
   - 前提节点: 9
   - 推理节点: 10
   - 幻觉节点: 1
   - 点亮LoG节点: 13

❌ 幻觉节点详情:
   - x is babgpus (出现1次)

✅ 推理节点详情:
   🟡 x is jezwpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus']
   🟢 jezwpus is fuyspus (出现2次, 质量:perfect)
   🟢 fuyspus is fipbpus (出现2次, 质量:perfect)
   🟢 yixcpus is joqbpus (出现1次, 质量:perfect)
   🟢 suybpus is sejdpus (出现2次, 质量:perfect)
   🟢 fipbpus is sejdpus (出现1次, 质量:perfect)
   🟡 x is babcpus (出现6次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus']
   🟡 x is babcpus or babrpus or babspus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus']
   🟡 x is caqqpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus']
   🟢 jezwpus is dorfpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - fuyspus is fipbpus
   - x is babcpus or babrpus or babspus
   - x is babcpus
   - x is yixcpus
   - yixcpus is babcpus and yakbpus
   - fuyspus is yixcpus
   - yixcpus is babcpus
   - joqbpus is babcpus and yakbpus
   - x is fuyspus
   - fipbpus is yixcpus
   - jezwpus is fuyspus
   - yixcpus is joqbpus
   - x is jezwpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus or babrpus or babspus (第5层)
   节点Coverage: 13/13 = 100.00%
   前提条件Coverage: 9/9 = 100.00%
   各推理层点亮比例:
     第1层: 6/6 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 1/11 = 9.09%
   可推导节点: 10/11
   Strict Error Rate: 5/11 = 45.45%
   严格有效节点: 6/11

   详细分析:
     完美推理: 7 (63.64%)
     部分推理: 4 (36.36%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 38/50
================================================================================
记录索引: 37
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_37.json
✅ 使用缓存结果:
   - 句子数: 46
   - 提取的语句数: 38
   - 初始条件数: 6

=== Statement提取完成 ===
总句子数: 46
成功提取: 46
失败提取: 0
总statements数: 38

=== 开始清洗Statement格式 ===
原始statements数: 38
清洗后statements数: 36
过滤掉的statements数: 2
清洗后的statements:
  1. [actual] xitxpus is tesvpus and nigxpus
  2. [actual] xitxpus is tesvpus and nigxpus
  3. [actual] tesvpus is wukkpus
  4. [actual] tesvpus is wukkpus
  5. [actual] rodwpus is xitxpus
  6. [actual] rodwpus is xitxpus
  7. [actual] x is rodwpus and wecvpus
  8. [actual] x is rodwpus and wecvpus
  9. [actual] tesvpus is babcpus and fisppus
  10. [actual] tesvpus is babcpus and fisppus
  11. [actual] rodwpus is rigzpus
  12. [actual] rodwpus is rigzpus
  13. [planning] x is babcpus
  14. [planning] x is babcpus
  15. [actual] x is rodwpus and wecvpus
  16. [actual] x is rodwpus
  17. [actual] rodwpus is xitxpus
  18. [actual] rodwpus is xitxpus
  19. [actual] x is rodwpus
  20. [actual] rodwpus is xitxpus
  21. [actual] x is xitxpus
  22. [actual] xitxpus is tesvpus and nigxpus
  23. [actual] xitxpus is tesvpus and nigxpus
  24. [actual] x is xitxpus
  25. [actual] x is tesvpus
  26. [actual] tesvpus is babcpus and fisppus
  27. [actual] tesvpus is babcpus
  28. [actual] x is tesvpus
  29. [actual] tesvpus is babcpus
  30. [actual] x is babcpus
  31. [actual] x is babcpus
  32. [actual] tesvpus is wukkpus
  33. [planning] x is babcpus
  34. [actual] rodwpus is rigzpus
  35. [planning] rodwpus is rigzpus
  36. [actual] x is babcpus

=== 开始标准化和解析节点 ===
清洗后statements数: 36
标准化后节点数: 36
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] xitxpus → tesvpus and nigxpus (原始: xitxpus is tesvpus and nigxpus)
  2. [actual] xitxpus → tesvpus and nigxpus (原始: xitxpus is tesvpus and nigxpus)
  3. [actual] tesvpus → wukkpus (原始: tesvpus is wukkpus)
  4. [actual] tesvpus → wukkpus (原始: tesvpus is wukkpus)
  5. [actual] rodwpus → xitxpus (原始: rodwpus is xitxpus)
  6. [actual] rodwpus → xitxpus (原始: rodwpus is xitxpus)
  7. [actual] x → rodwpus and wecvpus (原始: x is rodwpus and wecvpus)
  8. [actual] x → rodwpus and wecvpus (原始: x is rodwpus and wecvpus)
  9. [actual] tesvpus → babcpus and fisppus (原始: tesvpus is babcpus and fisppus)
  10. [actual] tesvpus → babcpus and fisppus (原始: tesvpus is babcpus and fisppus)
  11. [actual] rodwpus → rigzpus (原始: rodwpus is rigzpus)
  12. [actual] rodwpus → rigzpus (原始: rodwpus is rigzpus)
  13. [planning] x → babcpus (原始: x is babcpus)
  14. [planning] x → babcpus (原始: x is babcpus)
  15. [actual] x → rodwpus and wecvpus (原始: x is rodwpus and wecvpus)
  16. [actual] x → rodwpus (原始: x is rodwpus)
  17. [actual] rodwpus → xitxpus (原始: rodwpus is xitxpus)
  18. [actual] rodwpus → xitxpus (原始: rodwpus is xitxpus)
  19. [actual] x → rodwpus (原始: x is rodwpus)
  20. [actual] rodwpus → xitxpus (原始: rodwpus is xitxpus)
  21. [actual] x → xitxpus (原始: x is xitxpus)
  22. [actual] xitxpus → tesvpus and nigxpus (原始: xitxpus is tesvpus and nigxpus)
  23. [actual] xitxpus → tesvpus and nigxpus (原始: xitxpus is tesvpus and nigxpus)
  24. [actual] x → xitxpus (原始: x is xitxpus)
  25. [actual] x → tesvpus (原始: x is tesvpus)
  26. [actual] tesvpus → babcpus and fisppus (原始: tesvpus is babcpus and fisppus)
  27. [actual] tesvpus → babcpus (原始: tesvpus is babcpus)
  28. [actual] x → tesvpus (原始: x is tesvpus)
  29. [actual] tesvpus → babcpus (原始: tesvpus is babcpus)
  30. [actual] x → babcpus (原始: x is babcpus)
  31. [actual] x → babcpus (原始: x is babcpus)
  32. [actual] tesvpus → wukkpus (原始: tesvpus is wukkpus)
  33. [planning] x → babcpus (原始: x is babcpus)
  34. [actual] rodwpus → rigzpus (原始: rodwpus is rigzpus)
  35. [planning] rodwpus → rigzpus (原始: rodwpus is rigzpus)
  36. [actual] x → babcpus (原始: x is babcpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 10
[后处理] 加载LoG图，包含 10 个节点
  LoG节点 0: x is babcpus (规则: CE, 深度: 1)
  LoG节点 1: x is babcpus and fisppus (规则: MP, 深度: 2)
  LoG节点 2: x is xitxpus (规则: CE, 深度: 3)
  LoG节点 3: xitxpus is babcpus and fisppus (规则: CE, 深度: 3)
  LoG节点 4: x is xitxpus and rigzpus (规则: MP, 深度: 4)
  LoG节点 5: xitxpus is babcpus and fisppus and wukkpus (规则: MP, 深度: 4)
  LoG节点 6: x is rodwpus (规则: CE, 深度: 5)
  LoG节点 7: rodwpus is xitxpus and rigzpus (规则: CI, 深度: 5)
  LoG节点 8: xitxpus is tesvpus (规则: CE, 深度: 5)
  LoG节点 9: tesvpus is babcpus and fisppus and wukkpus (规则: CI, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 36
   - 初始条件数: 6
   - LoG图节点数: 10

📋 初始条件列表:
    1. xitxpus is tesvpus and nigxpus
    2. tesvpus is wukkpus
    3. rodwpus is xitxpus
    4. x is rodwpus and wecvpus
    5. tesvpus is babcpus and fisppus
    6. rodwpus is rigzpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 6 个前提节点

🔍 开始处理actual节点...

   节点 1: xitxpus is tesvpus and nigxpus
      ↻ 重复节点，计数: 2

   节点 2: xitxpus is tesvpus and nigxpus
      ↻ 重复节点，计数: 3

   节点 3: tesvpus is wukkpus
      ↻ 重复节点，计数: 2

   节点 4: tesvpus is wukkpus
      ↻ 重复节点，计数: 3

   节点 5: rodwpus is xitxpus
      ↻ 重复节点，计数: 2

   节点 6: rodwpus is xitxpus
      ↻ 重复节点，计数: 3

   节点 7: x is rodwpus and wecvpus
      ↻ 重复节点，计数: 2

   节点 8: x is rodwpus and wecvpus
      ↻ 重复节点，计数: 3

   节点 9: tesvpus is babcpus and fisppus
      ↻ 重复节点，计数: 2

   节点 10: tesvpus is babcpus and fisppus
      ↻ 重复节点，计数: 3

   节点 11: rodwpus is rigzpus
      ↻ 重复节点，计数: 2

   节点 12: rodwpus is rigzpus
      ↻ 重复节点，计数: 3

   节点 13: x is rodwpus and wecvpus
      ↻ 重复节点，计数: 4

   节点 14: x is rodwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is rodwpus
      ✅ 验证成功 + LoG匹配

   节点 15: rodwpus is xitxpus
      ↻ 重复节点，计数: 4

   节点 16: rodwpus is xitxpus
      ↻ 重复节点，计数: 5

   节点 17: x is rodwpus
      ↻ 重复节点，计数: 2

   节点 18: rodwpus is xitxpus
      ↻ 重复节点，计数: 6

   节点 19: x is xitxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is xitxpus
[子树点亮]     └─ 点亮依赖节点: x is xitxpus and rigzpus (深度4)
[子树点亮]     └─ 点亮依赖节点: rodwpus is xitxpus and rigzpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 20: xitxpus is tesvpus and nigxpus
      ↻ 重复节点，计数: 4

   节点 21: xitxpus is tesvpus and nigxpus
      ↻ 重复节点，计数: 5

   节点 22: x is xitxpus
      ↻ 重复节点，计数: 2

   节点 23: x is tesvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is rodwpus → rodwpus is tesvpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is rodwpus
  - 前提: rodwpus is xitxpus
  - 前提: xitxpus is tesvpus and nigxpus
  ✓ 点亮LoG节点: xitxpus is tesvpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 24: tesvpus is babcpus and fisppus
      ↻ 重复节点，计数: 4

   节点 25: tesvpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: tesvpus is babcpus and fisppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: tesvpus is babcpus and fisppus

   节点 26: x is tesvpus
      ↻ 重复节点，计数: 2

   节点 27: tesvpus is babcpus
      ↻ 重复节点，计数: 2

   节点 28: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: x is babcpus and fisppus (深度2)
[子树点亮]     └─ 点亮依赖节点: xitxpus is babcpus and fisppus (深度3)
[子树点亮]     └─ 点亮依赖节点: xitxpus is babcpus and fisppus and wukkpus (深度4)
[子树点亮]     └─ 点亮依赖节点: tesvpus is babcpus and fisppus and wukkpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
      ✅ 验证成功 + LoG匹配

   节点 29: x is babcpus
      ↻ 重复节点，计数: 2

   节点 30: tesvpus is wukkpus
      ↻ 重复节点，计数: 4

   节点 31: rodwpus is rigzpus
      ↻ 重复节点，计数: 4

   节点 32: x is babcpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 32
   - 新增节点: 5
   - 更新已存在节点: 27
   - 点亮的LoG节点: 10

🎯 推理质量统计:
   - 完美推理: 5 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 10节点, 6前提, 复杂度1-6

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 11
   - 前提节点: 6
   - 推理节点: 5
   - 幻觉节点: 0
   - 点亮LoG节点: 10

✅ 推理节点详情:
   🟢 x is rodwpus (出现2次, 质量:perfect)
   🟢 x is xitxpus (出现2次, 质量:perfect)
   🟢 x is tesvpus (出现2次, 质量:perfect)
   🟢 tesvpus is babcpus (出现2次, 质量:perfect)
   🟢 x is babcpus (出现3次, 质量:perfect)

🔥 点亮的LoG节点:
   - xitxpus is babcpus and fisppus
   - tesvpus is babcpus and fisppus and wukkpus
   - x is babcpus
   - rodwpus is xitxpus and rigzpus
   - x is rodwpus
   - x is xitxpus
   - x is babcpus and fisppus
   - x is xitxpus and rigzpus
   - xitxpus is babcpus and fisppus and wukkpus
   - xitxpus is tesvpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus (第5层)
   节点Coverage: 10/10 = 100.00%
   前提条件Coverage: 6/6 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/5 = 0.00%
   可推导节点: 5/5
   Strict Error Rate: 0/5 = 0.00%
   严格有效节点: 5/5

   详细分析:
     完美推理: 5 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 39/50
================================================================================
记录索引: 38
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_38.json
✅ 使用缓存结果:
   - 句子数: 34
   - 提取的语句数: 29
   - 初始条件数: 5

=== Statement提取完成 ===
总句子数: 34
成功提取: 34
失败提取: 0
总statements数: 29

=== 开始清洗Statement格式 ===
原始statements数: 29
清洗后statements数: 23
过滤掉的statements数: 6
清洗后的statements:
  1. [actual] qomypus is pitbpus and nefwpus and rilfpus
  2. [actual] pitbpus is rulhpus and lomfpus
  3. [actual] rulhpus is babcpus and qaxjpus and xosxpus and yotnpus
  4. [actual] x is muflpus
  5. [actual] muflpus is qomypus
  6. [actual] x is muflpus
  7. [actual] muflpus is qomypus
  8. [actual] x is muflpus
  9. [actual] muflpus is qomypus
  10. [actual] x is qomypus
  11. [actual] qomypus is pitbpus and nefwpus and rilfpus
  12. [actual] x is qomypus
  13. [actual] x is pitbpus
  14. [actual] pitbpus is rulhpus
  15. [actual] pitbpus is lomfpus
  16. [actual] x is rulhpus
  17. [actual] pitbpus is rulhpus
  18. [actual] rulhpus is babcpus and qaxjpus and xosxpus and yotnpus
  19. [planning] x is rulhpus
  20. [planning] x is babcpus
  21. [planning] x is babcpus
  22. [actual] x is babcpus
  23. [actual] rulhpus is babcpus

=== 开始标准化和解析节点 ===
清洗后statements数: 23
标准化后节点数: 23
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] qomypus → pitbpus and nefwpus and rilfpus (原始: qomypus is pitbpus and nefwpus and rilfpus)
  2. [actual] pitbpus → rulhpus and lomfpus (原始: pitbpus is rulhpus and lomfpus)
  3. [actual] rulhpus → babcpus and qaxjpus and xosxpus and yotnpus (原始: rulhpus is babcpus and qaxjpus and xosxpus and yotnpus)
  4. [actual] x → muflpus (原始: x is muflpus)
  5. [actual] muflpus → qomypus (原始: muflpus is qomypus)
  6. [actual] x → muflpus (原始: x is muflpus)
  7. [actual] muflpus → qomypus (原始: muflpus is qomypus)
  8. [actual] x → muflpus (原始: x is muflpus)
  9. [actual] muflpus → qomypus (原始: muflpus is qomypus)
  10. [actual] x → qomypus (原始: x is qomypus)
  11. [actual] qomypus → pitbpus and nefwpus and rilfpus (原始: qomypus is pitbpus and nefwpus and rilfpus)
  12. [actual] x → qomypus (原始: x is qomypus)
  13. [actual] x → pitbpus (原始: x is pitbpus)
  14. [actual] pitbpus → rulhpus (原始: pitbpus is rulhpus)
  15. [actual] pitbpus → lomfpus (原始: pitbpus is lomfpus)
  16. [actual] x → rulhpus (原始: x is rulhpus)
  17. [actual] pitbpus → rulhpus (原始: pitbpus is rulhpus)
  18. [actual] rulhpus → babcpus and qaxjpus and xosxpus and yotnpus (原始: rulhpus is babcpus and qaxjpus and xosxpus and yotnpus)
  19. [planning] x → rulhpus (原始: x is rulhpus)
  20. [planning] x → babcpus (原始: x is babcpus)
  21. [planning] x → babcpus (原始: x is babcpus)
  22. [actual] x → babcpus (原始: x is babcpus)
  23. [actual] rulhpus → babcpus (原始: rulhpus is babcpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 10
[后处理] 加载LoG图，包含 10 个节点
  LoG节点 0: x is babcpus (规则: CE, 深度: 1)
  LoG节点 1: x is babcpus and qaxjpus (规则: MP, 深度: 2)
  LoG节点 2: x is pitbpus (规则: CE, 深度: 3)
  LoG节点 3: pitbpus is babcpus and qaxjpus (规则: CE, 深度: 3)
  LoG节点 4: x is pitbpus and nefwpus (规则: MP, 深度: 4)
  LoG节点 5: pitbpus is babcpus and qaxjpus and xosxpus (规则: MP, 深度: 4)
  LoG节点 6: x is qomypus (规则: MP, 深度: 5)
  LoG节点 7: qomypus is pitbpus and nefwpus (规则: CE, 深度: 5)
  LoG节点 8: pitbpus is rulhpus (规则: CE, 深度: 5)
  LoG节点 9: rulhpus is babcpus and qaxjpus and xosxpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 23
   - 初始条件数: 5
   - LoG图节点数: 10

📋 初始条件列表:
    1. qomypus is pitbpus and nefwpus and rilfpus
    2. pitbpus is rulhpus and lomfpus
    3. rulhpus is babcpus and qaxjpus and xosxpus and yotnpus
    4. x is muflpus
    5. muflpus is qomypus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 5 个前提节点

🔍 开始处理actual节点...

   节点 1: qomypus is pitbpus and nefwpus and rilfpus
      ↻ 重复节点，计数: 2

   节点 2: pitbpus is rulhpus and lomfpus
      ↻ 重复节点，计数: 2

   节点 3: rulhpus is babcpus and qaxjpus and xosxpus and yotnpus
      ↻ 重复节点，计数: 2

   节点 4: x is muflpus
      ↻ 重复节点，计数: 2

   节点 5: muflpus is qomypus
      ↻ 重复节点，计数: 2

   节点 6: x is muflpus
      ↻ 重复节点，计数: 3

   节点 7: muflpus is qomypus
      ↻ 重复节点，计数: 3

   节点 8: x is muflpus
      ↻ 重复节点，计数: 4

   节点 9: muflpus is qomypus
      ↻ 重复节点，计数: 4

   节点 10: x is qomypus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is qomypus
      ✅ 验证成功 + LoG匹配

   节点 11: qomypus is pitbpus and nefwpus and rilfpus
      ↻ 重复节点，计数: 3

   节点 12: x is qomypus
      ↻ 重复节点，计数: 2

   节点 13: x is pitbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is pitbpus
[子树点亮]     └─ 点亮依赖节点: x is pitbpus and nefwpus (深度4)
[子树点亮]     └─ 点亮依赖节点: qomypus is pitbpus and nefwpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 14: pitbpus is rulhpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: pitbpus is rulhpus
      ✅ 验证成功 + LoG匹配

   节点 15: pitbpus is lomfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: pitbpus is rulhpus and lomfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: pitbpus is rulhpus and lomfpus

   节点 16: x is rulhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is muflpus → muflpus is rulhpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is muflpus
  - 前提: muflpus is qomypus
  - 前提: qomypus is pitbpus and nefwpus and rilfpus
  - 前提: pitbpus is rulhpus

   节点 17: pitbpus is rulhpus
      ↻ 重复节点，计数: 2

   节点 18: rulhpus is babcpus and qaxjpus and xosxpus and yotnpus
      ↻ 重复节点，计数: 3

   节点 19: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: x is babcpus and qaxjpus (深度2)
[子树点亮]     └─ 点亮依赖节点: pitbpus is babcpus and qaxjpus (深度3)
[子树点亮]     └─ 点亮依赖节点: pitbpus is babcpus and qaxjpus and xosxpus (深度4)
[子树点亮]     └─ 点亮依赖节点: rulhpus is babcpus and qaxjpus and xosxpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
      ✅ 验证成功 + LoG匹配

   节点 20: rulhpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: rulhpus is babcpus and qaxjpus and xosxpus and yotnpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: rulhpus is babcpus and qaxjpus and xosxpus and yotnpus

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 20
   - 新增节点: 7
   - 更新已存在节点: 13
   - 点亮的LoG节点: 10

🎯 推理质量统计:
   - 完美推理: 7 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 10节点, 5前提, 复杂度1-5

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 12
   - 前提节点: 5
   - 推理节点: 7
   - 幻觉节点: 0
   - 点亮LoG节点: 10

✅ 推理节点详情:
   🟢 x is qomypus (出现2次, 质量:perfect)
   🟢 x is pitbpus (出现1次, 质量:perfect)
   🟢 pitbpus is rulhpus (出现2次, 质量:perfect)
   🟢 pitbpus is lomfpus (出现1次, 质量:perfect)
   🟢 x is rulhpus (出现1次, 质量:perfect)
   🟢 x is babcpus (出现1次, 质量:perfect)
   🟢 rulhpus is babcpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - rulhpus is babcpus and qaxjpus and xosxpus
   - pitbpus is rulhpus
   - x is babcpus
   - x is pitbpus
   - pitbpus is babcpus and qaxjpus and xosxpus
   - x is qomypus
   - x is babcpus and qaxjpus
   - qomypus is pitbpus and nefwpus
   - x is pitbpus and nefwpus
   - pitbpus is babcpus and qaxjpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus (第5层)
   节点Coverage: 10/10 = 100.00%
   前提条件Coverage: 5/5 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/7 = 0.00%
   可推导节点: 7/7
   Strict Error Rate: 0/7 = 0.00%
   严格有效节点: 7/7

   详细分析:
     完美推理: 7 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 40/50
================================================================================
记录索引: 39
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_39.json
✅ 使用缓存结果:
   - 句子数: 197
   - 提取的语句数: 273
   - 初始条件数: 17

=== Statement提取完成 ===
总句子数: 197
成功提取: 196
失败提取: 1
总statements数: 273

=== 开始清洗Statement格式 ===
原始statements数: 273
清洗后statements数: 216
过滤掉的statements数: 57
清洗后的statements:
  1. [planning] x is babcpus and babrpus
  2. [planning] x is babcpus and babrpus
  3. [planning] x is A
  4. [planning] x is babcpus and babrpus
  5. [actual] x is babgpus
  6. [actual] lerwpus is yexbpus
  7. [actual] yexbpus is lerwpus and pazjpus
  8. [actual] x is relmpus
  9. [actual] relmpus is babgpus
  10. [actual] x is babgpus
  11. [planning] x is babgpus and babkpus and babmpus?
  12. [planning] x is babgpus?
  13. [actual] x is tolrpus and nigmpus
  14. [actual] x is tolrpus and nigmpus
  15. [actual] x is mozqpus
  16. [planning] tolrpus is B
  17. [planning] nigmpus is B
  18. [planning] mozqpus is B
  19. [actual] gevmpus is gaktpus and wawypus
  20. [actual] nojppus is ravzpus
  21. [actual] mozqpus is nojppus and delgpus
  22. [actual] vagfpus is ramhpus and valjpus
  23. [actual] bakzpus is dufxpus
  24. [actual] ramhpus is lujqpus
  25. [actual] lujqpus is koqrpus
  26. [actual] wifspus is babrpus and nexvpus and yikmpus
  27. [actual] dufxpus is babcpus
  28. [actual] fergpus is qoxspus
  29. [actual] koqrpus is bakzpus and xohgpus
  30. [actual] x is tolrpus and nigmpus
  31. [actual] qoxspus is gevmpus
  32. [actual] gaktpus is wifspus and wahkpus
  33. [actual] ravzpus is vagfpus and borbpus
  34. [actual] x is mozqpus
  35. [actual] tolrpus is fergpus
  36. [actual] x is mozqpus
  37. [planning] x is babcpus and babrpus
  38. [actual] babcpus is mentioned in statement 9
  39. [actual] dufxpus is babcpus
  40. [actual] babrpus is mentioned in statement 8
  41. [actual] wifspus is babrpus and nexvpus and yikmpus
  42. [planning] x is dufxpus
  43. [planning] x is wifspus
  44. [actual] mozqpus is nojppus and delgpus
  45. [actual] mozqpus is nojppus and delgpus
  46. [actual] nojppus is ravzpus
  47. [actual] nojppus is ravzpus
  48. [actual] mozqpus is nojppus
  49. [actual] nojppus is ravzpus
  50. [planning] mozqpus is ravzpus
  51. [actual] x is mozqpus
  52. [actual] mozqpus is nojppus and delgpus
  53. [actual] x is nojppus and delgpus
  54. [actual] nojppus is ravzpus
  55. [actual] x is ravzpus
  56. [actual] ravzpus is vagfpus and borbpus
  57. [actual] x is vagfpus and borbpus
  58. [actual] vagfpus is ramhpus and valjpus
  59. [actual] x is ramhpus and valjpus
  60. [actual] ramhpus is lujqpus
  61. [actual] x is lujqpus
  62. [actual] lujqpus is koqrpus
  63. [actual] x is koqrpus
  64. [actual] koqrpus is bakzpus and xohgpus
  65. [actual] x is bakzpus and xohgpus
  66. [actual] bakzpus is dufxpus
  67. [actual] x is dufxpus
  68. [actual] dufxpus is babcpus
  69. [actual] x is babcpus
  70. [actual] x is babcpus
  71. [planning] x is babrpus
  72. [actual] babrpus is wifspus
  73. [actual] wifspus is babrpus and nexvpus and yikmpus
  74. [actual] wifspus is babrpus
  75. [planning] wifspus is a category that contains babrpus
  76. [actual] wifspus is babrpus and nexvpus and yikmpus
  77. [actual] wifspus is babrpus
  78. [planning] wifspus is babrpus
  79. [planning] babrpus is a category that contains wifspus
  80. [actual] wifspus is babrpus
  81. [actual] wifspus is an instance of babrpus
  82. [actual] wifspus is a member of the category babrpus
  83. [planning] wifspus is a subset of babrpus
  84. [actual] gevmpus is gaktpus and wawypus
  85. [planning] gevmpus is gaktpus and wawypus
  86. [actual] mozqpus is nojppus and delgpus
  87. [actual] mozqpus is nojppus
  88. [actual] nojppus is ravzpus
  89. [actual] mozqpus is ravzpus
  90. [actual] wifspus is babrpus
  91. [planning] wifspus is a type of babrpus
  92. [planning] wifspus is babrpus
  93. [planning] babrpus is wifspus
  94. [actual] wifspus is babrpus and nexvpus and yikmpus
  95. [actual] wifspus is babrpus and nexvpus and yikmpus
  96. [actual] babrpus is a component of wifspus
  97. [actual] wifspus is babrpus
  98. [actual] wifspus is babrpus
  99. [actual] wifspus is a member of babrpus
  100. [actual] babrpus is a larger category containing wifspus
  101. [actual] gevmpus is gaktpus and wawypus
  102. [planning] gevmpus is gaktpus
  103. [actual] gaktpus is wifspus and wahkpus
  104. [actual] gaktpus is a member of wifspus
  105. [actual] wifspus is babrpus
  106. [actual] wifspus is babrpus
  107. [actual] gaktpus is wifspus
  108. [actual] gaktpus is babrpus
  109. [planning] wifspus is babrpus
  110. [planning] gaktpus is babrpus
  111. [planning] x is babrpus
  112. [actual] x is mozqpus
  113. [actual] x is babcpus
  114. [planning] x is babrpus
  115. [actual] x is koqrpus
  116. [actual] koqrpus is bakzpus
  117. [actual] bakzpus is dufxpus
  118. [actual] dufxpus is babcpus
  119. [planning] x is wifspus
  120. [actual] gaktpus is wifspus and wahkpus
  121. [actual] gaktpus is wifspus and wahkpus
  122. [planning] gaktpus is wifspus
  123. [actual] gaktpus is wifspus
  124. [actual] gaktpus is a member of wifspus
  125. [actual] gevmpus is gaktpus and wawypus
  126. [actual] gevmpus is gaktpus
  127. [actual] gevmpus is wawypus
  128. [planning] gevmpus is gaktpus
  129. [planning] gevmpus is wawypus
  130. [actual] qoxspus is gevmpus
  131. [actual] fergpus is qoxspus
  132. [actual] tolrpus is fergpus
  133. [actual] x is tolrpus and nigmpus
  134. [actual] x is tolrpus
  135. [actual] x is tolrpus
  136. [actual] tolrpus is fergpus
  137. [actual] x is fergpus
  138. [actual] fergpus is qoxspus
  139. [planning] x is qoxspus
  140. [actual] qoxspus is gevmpus
  141. [planning] x is gevmpus
  142. [actual] gevmpus is gaktpus and wawypus
  143. [planning] x is gaktpus and wawypus
  144. [actual] gaktpus is wifspus and wahkpus
  145. [planning] x is wifspus and wahkpus
  146. [actual] wifspus is babrpus and nexvpus and yikmpus
  147. [planning] wifspus is babrpus
  148. [planning] wifspus is babrpus
  149. [planning] x is wifspus
  150. [planning] x is babrpus
  151. [planning] wifspus is babrpus
  152. [planning] wifspus is a member of babrpus
  153. [planning] babrpus is a category that contains wifspus as an element
  154. [planning] x is wifspus
  155. [planning] x is babrpus
  156. [actual] babrpus is a set
  157. [actual] wifspus is an element of babrpus
  158. [actual] x is an element of wifspus
  159. [planning] x is an element of babrpus
  160. [planning] wifspus is a subset of babrpus
  161. [planning] wifspus is an element
  162. [actual] wifspus is babrpus and nexvpus and yikmpus
  163. [planning] babrpus is a part of wifspus
  164. [actual] wifspus is babrpus
  165. [planning] wifspus is babrpus
  166. [actual] babrpus is wifspus
  167. [actual] x is mozqpus
  168. [actual] mozqpus is nojppus
  169. [actual] nojppus is ravzpus
  170. [planning] x is ravzpus
  171. [actual] gaktpus is wifspus
  172. [actual] wifspus is babrpus
  173. [actual] gaktpus is wifspus
  174. [actual] gaktpus is babrpus
  175. [actual] x is gaktpus
  176. [actual] x is babrpus
  177. [actual] wifspus is babrpus and nexvpus and yikmpus
  178. [planning] wifspus is babrpus
  179. [planning] wifspus is nexvpus
  180. [planning] wifspus is yikmpus
  181. [planning] wifspus is a subset of babrpus
  182. [planning] wifspus is a subset of nexvpus
  183. [planning] wifspus is a subset of yikmpus
  184. [planning] wifspus is babrpus and nexvpus and yikmpus
  185. [planning] wifspus is babrpus and nexvpus and yikmpus
  186. [planning] x is babrpus
  187. [actual] wifspus is babrpus
  188. [actual] wifspus is nexvpus
  189. [actual] wifspus is yikmpus
  190. [actual] wifspus is babrpus and nexvpus and yikmpus
  191. [actual] gevmpus is gaktpus
  192. [actual] gevmpus is wawypus
  193. [actual] gaktpus is wifspus
  194. [actual] wifspus is babrpus
  195. [actual] qoxspus is gevmpus
  196. [actual] fergpus is qoxspus
  197. [actual] tolrpus is fergpus
  198. [actual] x is tolrpus
  199. [actual] x is tolrpus
  200. [actual] tolrpus is fergpus
  201. [actual] fergpus is qoxspus
  202. [actual] qoxspus is gevmpus
  203. [actual] gevmpus is gaktpus
  204. [actual] gaktpus is wifspus
  205. [actual] wifspus is babrpus
  206. [actual] x is babrpus
  207. [actual] x is babrpus
  208. [actual] x is babcpus
  209. [actual] x is babcpus and babrpus
  210. [actual] x is mozqpus
  211. [actual] x is dufxpus
  212. [actual] dufxpus is babcpus
  213. [actual] x is babcpus
  214. [actual] x is tolrpus
  215. [actual] x is babrpus
  216. [actual] x is babcpus and babrpus

=== 开始标准化和解析节点 ===
清洗后statements数: 216
标准化后节点数: 185
过滤掉的无效实体数: 31
标准化后的节点:
  1. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  2. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  3. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  4. [actual] x → babgpus (原始: x is babgpus)
  5. [actual] lerwpus → yexbpus (原始: lerwpus is yexbpus)
  6. [actual] yexbpus → lerwpus and pazjpus (原始: yexbpus is lerwpus and pazjpus)
  7. [actual] x → relmpus (原始: x is relmpus)
  8. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  9. [actual] x → babgpus (原始: x is babgpus)
  10. [actual] x → tolrpus and nigmpus (原始: x is tolrpus and nigmpus)
  11. [actual] x → tolrpus and nigmpus (原始: x is tolrpus and nigmpus)
  12. [actual] x → mozqpus (原始: x is mozqpus)
  13. [actual] gevmpus → gaktpus and wawypus (原始: gevmpus is gaktpus and wawypus)
  14. [actual] nojppus → ravzpus (原始: nojppus is ravzpus)
  15. [actual] mozqpus → nojppus and delgpus (原始: mozqpus is nojppus and delgpus)
  16. [actual] vagfpus → ramhpus and valjpus (原始: vagfpus is ramhpus and valjpus)
  17. [actual] bakzpus → dufxpus (原始: bakzpus is dufxpus)
  18. [actual] ramhpus → lujqpus (原始: ramhpus is lujqpus)
  19. [actual] lujqpus → koqrpus (原始: lujqpus is koqrpus)
  20. [actual] wifspus → babrpus and nexvpus and yikmpus (原始: wifspus is babrpus and nexvpus and yikmpus)
  21. [actual] dufxpus → babcpus (原始: dufxpus is babcpus)
  22. [actual] fergpus → qoxspus (原始: fergpus is qoxspus)
  23. [actual] koqrpus → bakzpus and xohgpus (原始: koqrpus is bakzpus and xohgpus)
  24. [actual] x → tolrpus and nigmpus (原始: x is tolrpus and nigmpus)
  25. [actual] qoxspus → gevmpus (原始: qoxspus is gevmpus)
  26. [actual] gaktpus → wifspus and wahkpus (原始: gaktpus is wifspus and wahkpus)
  27. [actual] ravzpus → vagfpus and borbpus (原始: ravzpus is vagfpus and borbpus)
  28. [actual] x → mozqpus (原始: x is mozqpus)
  29. [actual] tolrpus → fergpus (原始: tolrpus is fergpus)
  30. [actual] x → mozqpus (原始: x is mozqpus)
  31. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  32. [actual] dufxpus → babcpus (原始: dufxpus is babcpus)
  33. [actual] wifspus → babrpus and nexvpus and yikmpus (原始: wifspus is babrpus and nexvpus and yikmpus)
  34. [planning] x → dufxpus (原始: x is dufxpus)
  35. [planning] x → wifspus (原始: x is wifspus)
  36. [actual] mozqpus → nojppus and delgpus (原始: mozqpus is nojppus and delgpus)
  37. [actual] mozqpus → nojppus and delgpus (原始: mozqpus is nojppus and delgpus)
  38. [actual] nojppus → ravzpus (原始: nojppus is ravzpus)
  39. [actual] nojppus → ravzpus (原始: nojppus is ravzpus)
  40. [actual] mozqpus → nojppus (原始: mozqpus is nojppus)
  41. [actual] nojppus → ravzpus (原始: nojppus is ravzpus)
  42. [planning] mozqpus → ravzpus (原始: mozqpus is ravzpus)
  43. [actual] x → mozqpus (原始: x is mozqpus)
  44. [actual] mozqpus → nojppus and delgpus (原始: mozqpus is nojppus and delgpus)
  45. [actual] x → nojppus and delgpus (原始: x is nojppus and delgpus)
  46. [actual] nojppus → ravzpus (原始: nojppus is ravzpus)
  47. [actual] x → ravzpus (原始: x is ravzpus)
  48. [actual] ravzpus → vagfpus and borbpus (原始: ravzpus is vagfpus and borbpus)
  49. [actual] x → vagfpus and borbpus (原始: x is vagfpus and borbpus)
  50. [actual] vagfpus → ramhpus and valjpus (原始: vagfpus is ramhpus and valjpus)
  51. [actual] x → ramhpus and valjpus (原始: x is ramhpus and valjpus)
  52. [actual] ramhpus → lujqpus (原始: ramhpus is lujqpus)
  53. [actual] x → lujqpus (原始: x is lujqpus)
  54. [actual] lujqpus → koqrpus (原始: lujqpus is koqrpus)
  55. [actual] x → koqrpus (原始: x is koqrpus)
  56. [actual] koqrpus → bakzpus and xohgpus (原始: koqrpus is bakzpus and xohgpus)
  57. [actual] x → bakzpus and xohgpus (原始: x is bakzpus and xohgpus)
  58. [actual] bakzpus → dufxpus (原始: bakzpus is dufxpus)
  59. [actual] x → dufxpus (原始: x is dufxpus)
  60. [actual] dufxpus → babcpus (原始: dufxpus is babcpus)
  61. [actual] x → babcpus (原始: x is babcpus)
  62. [actual] x → babcpus (原始: x is babcpus)
  63. [planning] x → babrpus (原始: x is babrpus)
  64. [actual] babrpus → wifspus (原始: babrpus is wifspus)
  65. [actual] wifspus → babrpus and nexvpus and yikmpus (原始: wifspus is babrpus and nexvpus and yikmpus)
  66. [actual] wifspus → babrpus (原始: wifspus is babrpus)
  67. [actual] wifspus → babrpus and nexvpus and yikmpus (原始: wifspus is babrpus and nexvpus and yikmpus)
  68. [actual] wifspus → babrpus (原始: wifspus is babrpus)
  69. [planning] wifspus → babrpus (原始: wifspus is babrpus)
  70. [actual] wifspus → babrpus (原始: wifspus is babrpus)
  71. [actual] gevmpus → gaktpus and wawypus (原始: gevmpus is gaktpus and wawypus)
  72. [planning] gevmpus → gaktpus and wawypus (原始: gevmpus is gaktpus and wawypus)
  73. [actual] mozqpus → nojppus and delgpus (原始: mozqpus is nojppus and delgpus)
  74. [actual] mozqpus → nojppus (原始: mozqpus is nojppus)
  75. [actual] nojppus → ravzpus (原始: nojppus is ravzpus)
  76. [actual] mozqpus → ravzpus (原始: mozqpus is ravzpus)
  77. [actual] wifspus → babrpus (原始: wifspus is babrpus)
  78. [planning] wifspus → babrpus (原始: wifspus is babrpus)
  79. [planning] babrpus → wifspus (原始: babrpus is wifspus)
  80. [actual] wifspus → babrpus and nexvpus and yikmpus (原始: wifspus is babrpus and nexvpus and yikmpus)
  81. [actual] wifspus → babrpus and nexvpus and yikmpus (原始: wifspus is babrpus and nexvpus and yikmpus)
  82. [actual] wifspus → babrpus (原始: wifspus is babrpus)
  83. [actual] wifspus → babrpus (原始: wifspus is babrpus)
  84. [actual] gevmpus → gaktpus and wawypus (原始: gevmpus is gaktpus and wawypus)
  85. [planning] gevmpus → gaktpus (原始: gevmpus is gaktpus)
  86. [actual] gaktpus → wifspus and wahkpus (原始: gaktpus is wifspus and wahkpus)
  87. [actual] wifspus → babrpus (原始: wifspus is babrpus)
  88. [actual] wifspus → babrpus (原始: wifspus is babrpus)
  89. [actual] gaktpus → wifspus (原始: gaktpus is wifspus)
  90. [actual] gaktpus → babrpus (原始: gaktpus is babrpus)
  91. [planning] wifspus → babrpus (原始: wifspus is babrpus)
  92. [planning] gaktpus → babrpus (原始: gaktpus is babrpus)
  93. [planning] x → babrpus (原始: x is babrpus)
  94. [actual] x → mozqpus (原始: x is mozqpus)
  95. [actual] x → babcpus (原始: x is babcpus)
  96. [planning] x → babrpus (原始: x is babrpus)
  97. [actual] x → koqrpus (原始: x is koqrpus)
  98. [actual] koqrpus → bakzpus (原始: koqrpus is bakzpus)
  99. [actual] bakzpus → dufxpus (原始: bakzpus is dufxpus)
  100. [actual] dufxpus → babcpus (原始: dufxpus is babcpus)
  101. [planning] x → wifspus (原始: x is wifspus)
  102. [actual] gaktpus → wifspus and wahkpus (原始: gaktpus is wifspus and wahkpus)
  103. [actual] gaktpus → wifspus and wahkpus (原始: gaktpus is wifspus and wahkpus)
  104. [planning] gaktpus → wifspus (原始: gaktpus is wifspus)
  105. [actual] gaktpus → wifspus (原始: gaktpus is wifspus)
  106. [actual] gevmpus → gaktpus and wawypus (原始: gevmpus is gaktpus and wawypus)
  107. [actual] gevmpus → gaktpus (原始: gevmpus is gaktpus)
  108. [actual] gevmpus → wawypus (原始: gevmpus is wawypus)
  109. [planning] gevmpus → gaktpus (原始: gevmpus is gaktpus)
  110. [planning] gevmpus → wawypus (原始: gevmpus is wawypus)
  111. [actual] qoxspus → gevmpus (原始: qoxspus is gevmpus)
  112. [actual] fergpus → qoxspus (原始: fergpus is qoxspus)
  113. [actual] tolrpus → fergpus (原始: tolrpus is fergpus)
  114. [actual] x → tolrpus and nigmpus (原始: x is tolrpus and nigmpus)
  115. [actual] x → tolrpus (原始: x is tolrpus)
  116. [actual] x → tolrpus (原始: x is tolrpus)
  117. [actual] tolrpus → fergpus (原始: tolrpus is fergpus)
  118. [actual] x → fergpus (原始: x is fergpus)
  119. [actual] fergpus → qoxspus (原始: fergpus is qoxspus)
  120. [planning] x → qoxspus (原始: x is qoxspus)
  121. [actual] qoxspus → gevmpus (原始: qoxspus is gevmpus)
  122. [planning] x → gevmpus (原始: x is gevmpus)
  123. [actual] gevmpus → gaktpus and wawypus (原始: gevmpus is gaktpus and wawypus)
  124. [planning] x → gaktpus and wawypus (原始: x is gaktpus and wawypus)
  125. [actual] gaktpus → wifspus and wahkpus (原始: gaktpus is wifspus and wahkpus)
  126. [planning] x → wifspus and wahkpus (原始: x is wifspus and wahkpus)
  127. [actual] wifspus → babrpus and nexvpus and yikmpus (原始: wifspus is babrpus and nexvpus and yikmpus)
  128. [planning] wifspus → babrpus (原始: wifspus is babrpus)
  129. [planning] wifspus → babrpus (原始: wifspus is babrpus)
  130. [planning] x → wifspus (原始: x is wifspus)
  131. [planning] x → babrpus (原始: x is babrpus)
  132. [planning] wifspus → babrpus (原始: wifspus is babrpus)
  133. [planning] x → wifspus (原始: x is wifspus)
  134. [planning] x → babrpus (原始: x is babrpus)
  135. [actual] wifspus → babrpus and nexvpus and yikmpus (原始: wifspus is babrpus and nexvpus and yikmpus)
  136. [actual] wifspus → babrpus (原始: wifspus is babrpus)
  137. [planning] wifspus → babrpus (原始: wifspus is babrpus)
  138. [actual] babrpus → wifspus (原始: babrpus is wifspus)
  139. [actual] x → mozqpus (原始: x is mozqpus)
  140. [actual] mozqpus → nojppus (原始: mozqpus is nojppus)
  141. [actual] nojppus → ravzpus (原始: nojppus is ravzpus)
  142. [planning] x → ravzpus (原始: x is ravzpus)
  143. [actual] gaktpus → wifspus (原始: gaktpus is wifspus)
  144. [actual] wifspus → babrpus (原始: wifspus is babrpus)
  145. [actual] gaktpus → wifspus (原始: gaktpus is wifspus)
  146. [actual] gaktpus → babrpus (原始: gaktpus is babrpus)
  147. [actual] x → gaktpus (原始: x is gaktpus)
  148. [actual] x → babrpus (原始: x is babrpus)
  149. [actual] wifspus → babrpus and nexvpus and yikmpus (原始: wifspus is babrpus and nexvpus and yikmpus)
  150. [planning] wifspus → babrpus (原始: wifspus is babrpus)
  151. [planning] wifspus → nexvpus (原始: wifspus is nexvpus)
  152. [planning] wifspus → yikmpus (原始: wifspus is yikmpus)
  153. [planning] wifspus → babrpus and nexvpus and yikmpus (原始: wifspus is babrpus and nexvpus and yikmpus)
  154. [planning] wifspus → babrpus and nexvpus and yikmpus (原始: wifspus is babrpus and nexvpus and yikmpus)
  155. [planning] x → babrpus (原始: x is babrpus)
  156. [actual] wifspus → babrpus (原始: wifspus is babrpus)
  157. [actual] wifspus → nexvpus (原始: wifspus is nexvpus)
  158. [actual] wifspus → yikmpus (原始: wifspus is yikmpus)
  159. [actual] wifspus → babrpus and nexvpus and yikmpus (原始: wifspus is babrpus and nexvpus and yikmpus)
  160. [actual] gevmpus → gaktpus (原始: gevmpus is gaktpus)
  161. [actual] gevmpus → wawypus (原始: gevmpus is wawypus)
  162. [actual] gaktpus → wifspus (原始: gaktpus is wifspus)
  163. [actual] wifspus → babrpus (原始: wifspus is babrpus)
  164. [actual] qoxspus → gevmpus (原始: qoxspus is gevmpus)
  165. [actual] fergpus → qoxspus (原始: fergpus is qoxspus)
  166. [actual] tolrpus → fergpus (原始: tolrpus is fergpus)
  167. [actual] x → tolrpus (原始: x is tolrpus)
  168. [actual] x → tolrpus (原始: x is tolrpus)
  169. [actual] tolrpus → fergpus (原始: tolrpus is fergpus)
  170. [actual] fergpus → qoxspus (原始: fergpus is qoxspus)
  171. [actual] qoxspus → gevmpus (原始: qoxspus is gevmpus)
  172. [actual] gevmpus → gaktpus (原始: gevmpus is gaktpus)
  173. [actual] gaktpus → wifspus (原始: gaktpus is wifspus)
  174. [actual] wifspus → babrpus (原始: wifspus is babrpus)
  175. [actual] x → babrpus (原始: x is babrpus)
  176. [actual] x → babrpus (原始: x is babrpus)
  177. [actual] x → babcpus (原始: x is babcpus)
  178. [actual] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  179. [actual] x → mozqpus (原始: x is mozqpus)
  180. [actual] x → dufxpus (原始: x is dufxpus)
  181. [actual] dufxpus → babcpus (原始: dufxpus is babcpus)
  182. [actual] x → babcpus (原始: x is babcpus)
  183. [actual] x → tolrpus (原始: x is tolrpus)
  184. [actual] x → babrpus (原始: x is babrpus)
  185. [actual] x → babcpus and babrpus (原始: x is babcpus and babrpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 25
[后处理] 加载LoG图，包含 25 个节点
  LoG节点 0: x is babcpus and babrpus (规则: CI, 深度: 1)
  LoG节点 1: x is babcpus (规则: MP, 深度: 2)
  LoG节点 2: x is babrpus (规则: MP, 深度: 2)
  LoG节点 3: x is vagfpus (规则: MP, 深度: 3)
  LoG节点 4: vagfpus is babcpus (规则: MP, 深度: 3)
  LoG节点 5: x is gaktpus (规则: MP, 深度: 3)
  LoG节点 6: gaktpus is babrpus (规则: CE, 深度: 3)
  LoG节点 7: x is nojppus (规则: CE, 深度: 4)
  LoG节点 8: nojppus is vagfpus (规则: CE, 深度: 4)
  LoG节点 9: vagfpus is koqrpus (规则: MP, 深度: 4)
  LoG节点 10: koqrpus is babcpus (规则: MP, 深度: 4)
  LoG节点 11: x is qoxspus (规则: MP, 深度: 4)
  LoG节点 12: qoxspus is gaktpus (规则: CE, 深度: 4)
  LoG节点 13: gaktpus is babrpus and nexvpus (规则: MP, 深度: 4)
  LoG节点 14: x is nojppus and delgpus (规则: MP, 深度: 5)
  LoG节点 15: nojppus is vagfpus and borbpus (规则: MP, 深度: 5)
  LoG节点 16: vagfpus is ramhpus (规则: CE, 深度: 5)
  LoG节点 17: ramhpus is koqrpus (规则: MP, 深度: 5)
  LoG节点 18: koqrpus is bakzpus (规则: CE, 深度: 5)
  LoG节点 19: bakzpus is babcpus (规则: MP, 深度: 5)
  LoG节点 20: x is tolrpus (规则: CE, 深度: 5)
  LoG节点 21: tolrpus is qoxspus (规则: MP, 深度: 5)
  LoG节点 22: qoxspus is gaktpus and wawypus (规则: MP, 深度: 5)
  LoG节点 23: gaktpus is wifspus (规则: CE, 深度: 5)
  LoG节点 24: wifspus is babrpus and nexvpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 185
   - 初始条件数: 17
   - LoG图节点数: 25

📋 初始条件列表:
    1. gevmpus is gaktpus and wawypus
    2. nojppus is ravzpus
    3. mozqpus is nojppus and delgpus
    4. vagfpus is ramhpus and valjpus
    5. bakzpus is dufxpus
    6. ramhpus is lujqpus
    7. lujqpus is koqrpus
    8. wifspus is babrpus and nexvpus and yikmpus
    9. dufxpus is babcpus
   10. fergpus is qoxspus
   11. koqrpus is bakzpus and xohgpus
   12. x is tolrpus and nigmpus
   13. qoxspus is gevmpus
   14. gaktpus is wifspus and wahkpus
   15. ravzpus is vagfpus and borbpus
   16. x is mozqpus
   17. tolrpus is fergpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 17 个前提节点

🔍 开始处理actual节点...

   节点 1: x is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 2: lerwpus is yexbpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 3: yexbpus is lerwpus and pazjpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 4: x is relmpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 5: relmpus is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 6: x is babgpus
      ↻ 重复节点，计数: 2

   节点 7: x is tolrpus and nigmpus
      ↻ 重复节点，计数: 2

   节点 8: x is tolrpus and nigmpus
      ↻ 重复节点，计数: 3

   节点 9: x is mozqpus
      ↻ 重复节点，计数: 2

   节点 10: gevmpus is gaktpus and wawypus
      ↻ 重复节点，计数: 2

   节点 11: nojppus is ravzpus
      ↻ 重复节点，计数: 2

   节点 12: mozqpus is nojppus and delgpus
      ↻ 重复节点，计数: 2

   节点 13: vagfpus is ramhpus and valjpus
      ↻ 重复节点，计数: 2

   节点 14: bakzpus is dufxpus
      ↻ 重复节点，计数: 2

   节点 15: ramhpus is lujqpus
      ↻ 重复节点，计数: 2

   节点 16: lujqpus is koqrpus
      ↻ 重复节点，计数: 2

   节点 17: wifspus is babrpus and nexvpus and yikmpus
      ↻ 重复节点，计数: 2

   节点 18: dufxpus is babcpus
      ↻ 重复节点，计数: 2

   节点 19: fergpus is qoxspus
      ↻ 重复节点，计数: 2

   节点 20: koqrpus is bakzpus and xohgpus
      ↻ 重复节点，计数: 2

   节点 21: x is tolrpus and nigmpus
      ↻ 重复节点，计数: 4

   节点 22: qoxspus is gevmpus
      ↻ 重复节点，计数: 2

   节点 23: gaktpus is wifspus and wahkpus
      ↻ 重复节点，计数: 2

   节点 24: ravzpus is vagfpus and borbpus
      ↻ 重复节点，计数: 2

   节点 25: x is mozqpus
      ↻ 重复节点，计数: 3

   节点 26: tolrpus is fergpus
      ↻ 重复节点，计数: 2

   节点 27: x is mozqpus
      ↻ 重复节点，计数: 4

   节点 28: dufxpus is babcpus
      ↻ 重复节点，计数: 3

   节点 29: wifspus is babrpus and nexvpus and yikmpus
      ↻ 重复节点，计数: 3

   节点 30: mozqpus is nojppus and delgpus
      ↻ 重复节点，计数: 3

   节点 31: mozqpus is nojppus and delgpus
      ↻ 重复节点，计数: 4

   节点 32: nojppus is ravzpus
      ↻ 重复节点，计数: 3

   节点 33: nojppus is ravzpus
      ↻ 重复节点，计数: 4

   节点 34: mozqpus is nojppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: mozqpus is nojppus and delgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: mozqpus is nojppus and delgpus

   节点 35: nojppus is ravzpus
      ↻ 重复节点，计数: 5

   节点 36: x is mozqpus
      ↻ 重复节点，计数: 5

   节点 37: mozqpus is nojppus and delgpus
      ↻ 重复节点，计数: 5

   节点 38: x is nojppus and delgpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is nojppus and delgpus
      ✅ 验证成功 + LoG匹配

   节点 39: nojppus is ravzpus
      ↻ 重复节点，计数: 6

   节点 40: x is ravzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is mozqpus → mozqpus is ravzpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is mozqpus
  - 前提: mozqpus is nojppus
  - 前提: nojppus is ravzpus
  ✓ 点亮LoG节点: x is nojppus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 41: ravzpus is vagfpus and borbpus
      ↻ 重复节点，计数: 3

   节点 42: x is vagfpus and borbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is mozqpus → mozqpus is vagfpus and borbpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is mozqpus
  - 前提: mozqpus is nojppus
  - 前提: nojppus is ravzpus
  - 前提: ravzpus is vagfpus and borbpus
  ✓ 点亮LoG节点: x is vagfpus
[子树点亮]     └─ 点亮依赖节点: nojppus is vagfpus (深度4)
[子树点亮]     └─ 点亮依赖节点: nojppus is vagfpus and borbpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 43: vagfpus is ramhpus and valjpus
      ↻ 重复节点，计数: 3

   节点 44: x is ramhpus and valjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is mozqpus → mozqpus is ramhpus and valjpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is mozqpus
  - 前提: mozqpus is nojppus
  - 前提: nojppus is ravzpus
  - 前提: ravzpus is vagfpus and borbpus
  - 前提: vagfpus is ramhpus and valjpus
  ✓ 点亮LoG节点: vagfpus is ramhpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 45: ramhpus is lujqpus
      ↻ 重复节点，计数: 3

   节点 46: x is lujqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is mozqpus → mozqpus is lujqpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is mozqpus
  - 前提: mozqpus is nojppus
  - 前提: nojppus is ravzpus
  - 前提: ravzpus is vagfpus and borbpus
  - 前提: vagfpus is ramhpus and valjpus
  - 前提: ramhpus is lujqpus

   节点 47: lujqpus is koqrpus
      ↻ 重复节点，计数: 3

   节点 48: x is koqrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is mozqpus → mozqpus is koqrpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is mozqpus
  - 前提: mozqpus is nojppus
  - 前提: nojppus is ravzpus
  - 前提: ravzpus is vagfpus and borbpus
  - 前提: vagfpus is ramhpus and valjpus
  - 前提: ramhpus is lujqpus
  - 前提: lujqpus is koqrpus
  ✓ 点亮LoG节点: vagfpus is koqrpus
[子树点亮]     └─ 点亮依赖节点: ramhpus is koqrpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 49: koqrpus is bakzpus and xohgpus
      ↻ 重复节点，计数: 3

   节点 50: x is bakzpus and xohgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is mozqpus → mozqpus is bakzpus and xohgpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is mozqpus
  - 前提: mozqpus is nojppus
  - 前提: nojppus is ravzpus
  - 前提: ravzpus is vagfpus and borbpus
  - 前提: vagfpus is ramhpus and valjpus
  - 前提: ramhpus is lujqpus
  - 前提: lujqpus is koqrpus
  - 前提: koqrpus is bakzpus and xohgpus
  ✓ 点亮LoG节点: koqrpus is bakzpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 51: bakzpus is dufxpus
      ↻ 重复节点，计数: 3

   节点 52: x is dufxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is mozqpus → mozqpus is dufxpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is mozqpus
  - 前提: mozqpus is nojppus
  - 前提: nojppus is ravzpus
  - 前提: ravzpus is vagfpus and borbpus
  - 前提: vagfpus is ramhpus and valjpus
  - 前提: ramhpus is lujqpus
  - 前提: lujqpus is koqrpus
  - 前提: koqrpus is bakzpus and xohgpus
  - 前提: bakzpus is dufxpus

   节点 53: dufxpus is babcpus
      ↻ 重复节点，计数: 4

   节点 54: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: vagfpus is babcpus (深度3)
[子树点亮]     └─ 点亮依赖节点: koqrpus is babcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: bakzpus is babcpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 55: x is babcpus
      ↻ 重复节点，计数: 2

   节点 56: babrpus is wifspus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 57: wifspus is babrpus and nexvpus and yikmpus
      ↻ 重复节点，计数: 4

   节点 58: wifspus is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wifspus is babrpus and nexvpus and yikmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wifspus is babrpus and nexvpus and yikmpus
  ✓ 点亮LoG节点: wifspus is babrpus and nexvpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 59: wifspus is babrpus and nexvpus and yikmpus
      ↻ 重复节点，计数: 5

   节点 60: wifspus is babrpus
      ↻ 重复节点，计数: 2

   节点 61: wifspus is babrpus
      ↻ 重复节点，计数: 3

   节点 62: gevmpus is gaktpus and wawypus
      ↻ 重复节点，计数: 3

   节点 63: mozqpus is nojppus and delgpus
      ↻ 重复节点，计数: 6

   节点 64: mozqpus is nojppus
      ↻ 重复节点，计数: 2

   节点 65: nojppus is ravzpus
      ↻ 重复节点，计数: 7

   节点 66: mozqpus is ravzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: mozqpus is nojppus → nojppus is ravzpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: mozqpus is nojppus
  - 前提: nojppus is ravzpus

   节点 67: wifspus is babrpus
      ↻ 重复节点，计数: 4

   节点 68: wifspus is babrpus and nexvpus and yikmpus
      ↻ 重复节点，计数: 6

   节点 69: wifspus is babrpus and nexvpus and yikmpus
      ↻ 重复节点，计数: 7

   节点 70: wifspus is babrpus
      ↻ 重复节点，计数: 5

   节点 71: wifspus is babrpus
      ↻ 重复节点，计数: 6

   节点 72: gevmpus is gaktpus and wawypus
      ↻ 重复节点，计数: 4

   节点 73: gaktpus is wifspus and wahkpus
      ↻ 重复节点，计数: 3

   节点 74: wifspus is babrpus
      ↻ 重复节点，计数: 7

   节点 75: wifspus is babrpus
      ↻ 重复节点，计数: 8

   节点 76: gaktpus is wifspus
      🔍 验证新节点...
[后处理] 点亮LoG节点: gaktpus is wifspus
      ✅ 验证成功 + LoG匹配

   节点 77: gaktpus is babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: gaktpus is babrpus
[子树点亮]     └─ 点亮依赖节点: gaktpus is babrpus and nexvpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 78: x is mozqpus
      ↻ 重复节点，计数: 6

   节点 79: x is babcpus
      ↻ 重复节点，计数: 3

   节点 80: x is koqrpus
      ↻ 重复节点，计数: 2

   节点 81: koqrpus is bakzpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 82: bakzpus is dufxpus
      ↻ 重复节点，计数: 4

   节点 83: dufxpus is babcpus
      ↻ 重复节点，计数: 5

   节点 84: gaktpus is wifspus and wahkpus
      ↻ 重复节点，计数: 4

   节点 85: gaktpus is wifspus and wahkpus
      ↻ 重复节点，计数: 5

   节点 86: gaktpus is wifspus
      ↻ 重复节点，计数: 2

   节点 87: gevmpus is gaktpus and wawypus
      ↻ 重复节点，计数: 5

   节点 88: gevmpus is gaktpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gevmpus is gaktpus and wawypus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gevmpus is gaktpus and wawypus

   节点 89: gevmpus is wawypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gevmpus is gaktpus and wawypus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gevmpus is gaktpus and wawypus

   节点 90: qoxspus is gevmpus
      ↻ 重复节点，计数: 3

   节点 91: fergpus is qoxspus
      ↻ 重复节点，计数: 3

   节点 92: tolrpus is fergpus
      ↻ 重复节点，计数: 3

   节点 93: x is tolrpus and nigmpus
      ↻ 重复节点，计数: 5

   节点 94: x is tolrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is tolrpus
      ✅ 验证成功 + LoG匹配

   节点 95: x is tolrpus
      ↻ 重复节点，计数: 2

   节点 96: tolrpus is fergpus
      ↻ 重复节点，计数: 4

   节点 97: x is fergpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is tolrpus → tolrpus is fergpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is tolrpus
  - 前提: tolrpus is fergpus

   节点 98: fergpus is qoxspus
      ↻ 重复节点，计数: 4

   节点 99: qoxspus is gevmpus
      ↻ 重复节点，计数: 4

   节点 100: gevmpus is gaktpus and wawypus
      ↻ 重复节点，计数: 6

   节点 101: gaktpus is wifspus and wahkpus
      ↻ 重复节点，计数: 6

   节点 102: wifspus is babrpus and nexvpus and yikmpus
      ↻ 重复节点，计数: 8

   节点 103: wifspus is babrpus and nexvpus and yikmpus
      ↻ 重复节点，计数: 9

   节点 104: wifspus is babrpus
      ↻ 重复节点，计数: 9

   节点 105: babrpus is wifspus
      ↻ 重复节点，计数: 2

   节点 106: x is mozqpus
      ↻ 重复节点，计数: 7

   节点 107: mozqpus is nojppus
      ↻ 重复节点，计数: 3

   节点 108: nojppus is ravzpus
      ↻ 重复节点，计数: 8

   节点 109: gaktpus is wifspus
      ↻ 重复节点，计数: 3

   节点 110: wifspus is babrpus
      ↻ 重复节点，计数: 10

   节点 111: gaktpus is wifspus
      ↻ 重复节点，计数: 4

   节点 112: gaktpus is babrpus
      ↻ 重复节点，计数: 2

   节点 113: x is gaktpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is gaktpus
[子树点亮]     └─ 点亮依赖节点: x is qoxspus (深度4)
[子树点亮]     └─ 点亮依赖节点: qoxspus is gaktpus (深度4)
[子树点亮]     └─ 点亮依赖节点: tolrpus is qoxspus (深度5)
[子树点亮]     └─ 点亮依赖节点: qoxspus is gaktpus and wawypus (深度5)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
      ✅ 验证成功 + LoG匹配

   节点 114: x is babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babrpus
      ✅ 验证成功 + LoG匹配

   节点 115: wifspus is babrpus and nexvpus and yikmpus
      ↻ 重复节点，计数: 10

   节点 116: wifspus is babrpus
      ↻ 重复节点，计数: 11

   节点 117: wifspus is nexvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wifspus is babrpus and nexvpus and yikmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wifspus is babrpus and nexvpus and yikmpus

   节点 118: wifspus is yikmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wifspus is babrpus and nexvpus and yikmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wifspus is babrpus and nexvpus and yikmpus

   节点 119: wifspus is babrpus and nexvpus and yikmpus
      ↻ 重复节点，计数: 11

   节点 120: gevmpus is gaktpus
      ↻ 重复节点，计数: 2

   节点 121: gevmpus is wawypus
      ↻ 重复节点，计数: 2

   节点 122: gaktpus is wifspus
      ↻ 重复节点，计数: 5

   节点 123: wifspus is babrpus
      ↻ 重复节点，计数: 12

   节点 124: qoxspus is gevmpus
      ↻ 重复节点，计数: 5

   节点 125: fergpus is qoxspus
      ↻ 重复节点，计数: 5

   节点 126: tolrpus is fergpus
      ↻ 重复节点，计数: 5

   节点 127: x is tolrpus
      ↻ 重复节点，计数: 3

   节点 128: x is tolrpus
      ↻ 重复节点，计数: 4

   节点 129: tolrpus is fergpus
      ↻ 重复节点，计数: 6

   节点 130: fergpus is qoxspus
      ↻ 重复节点，计数: 6

   节点 131: qoxspus is gevmpus
      ↻ 重复节点，计数: 6

   节点 132: gevmpus is gaktpus
      ↻ 重复节点，计数: 3

   节点 133: gaktpus is wifspus
      ↻ 重复节点，计数: 6

   节点 134: wifspus is babrpus
      ↻ 重复节点，计数: 13

   节点 135: x is babrpus
      ↻ 重复节点，计数: 2

   节点 136: x is babrpus
      ↻ 重复节点，计数: 3

   节点 137: x is babcpus
      ↻ 重复节点，计数: 4

   节点 138: x is babcpus and babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus and babrpus
      ✅ 验证成功 + LoG匹配

   节点 139: x is mozqpus
      ↻ 重复节点，计数: 8

   节点 140: x is dufxpus
      ↻ 重复节点，计数: 2

   节点 141: dufxpus is babcpus
      ↻ 重复节点，计数: 6

   节点 142: x is babcpus
      ↻ 重复节点，计数: 5

   节点 143: x is tolrpus
      ↻ 重复节点，计数: 5

   节点 144: x is babrpus
      ↻ 重复节点，计数: 4

   节点 145: x is babcpus and babrpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 145
   - 新增节点: 30
   - 更新已存在节点: 115
   - 点亮的LoG节点: 25

🎯 推理质量统计:
   - 完美推理: 12 (节点正确 + 路径正确)
   - 部分推理: 17 (节点正确 + 路径部分错误)
   - 无效推理: 1 (节点错误或路径完全错误)
[LoG分析] LoG图: 25节点, 17前提, 复杂度1-17

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 47
   - 前提节点: 17
   - 推理节点: 24
   - 幻觉节点: 6
   - 点亮LoG节点: 25

❌ 幻觉节点详情:
   - x is babgpus (出现2次)
   - lerwpus is yexbpus (出现1次)
   - yexbpus is lerwpus and pazjpus (出现1次)
   - x is relmpus (出现1次)
   - relmpus is babgpus (出现1次)
   - babrpus is wifspus (出现2次)

✅ 推理节点详情:
   🟢 mozqpus is nojppus (出现3次, 质量:perfect)
   🟡 x is nojppus and delgpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus', 'x is relmpus']
   🟡 x is ravzpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus', 'x is relmpus']
   🟡 x is vagfpus and borbpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus', 'x is relmpus']
   🟡 x is ramhpus and valjpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus', 'x is relmpus']
   🟡 x is lujqpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus', 'x is relmpus']
   🟡 x is koqrpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus', 'x is relmpus']
   🟡 x is bakzpus and xohgpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus', 'x is relmpus']
   🟡 x is dufxpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus', 'x is relmpus']
   🟡 x is babcpus (出现5次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus', 'x is relmpus']
   🟢 wifspus is babrpus (出现13次, 质量:perfect)
   🟢 mozqpus is ravzpus (出现1次, 质量:perfect)
   🟡 gaktpus is wifspus (出现6次, 质量:partial)
      ⚠️  无效依赖: ['babrpus is wifspus']
   🟢 gaktpus is babrpus (出现2次, 质量:perfect)
   🟢 koqrpus is bakzpus (出现1次, 质量:perfect)
   🟢 gevmpus is gaktpus (出现3次, 质量:perfect)
   🟢 gevmpus is wawypus (出现2次, 质量:perfect)
   🟡 x is tolrpus (出现5次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus', 'x is relmpus']
   🟡 x is fergpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus', 'x is relmpus']
   🟡 x is gaktpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus', 'x is relmpus']
   🟡 x is babrpus (出现4次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus', 'x is relmpus']
   🟢 wifspus is nexvpus (出现1次, 质量:perfect)
   🟢 wifspus is yikmpus (出现1次, 质量:perfect)
   🟡 x is babcpus and babrpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus', 'x is relmpus']

🔥 点亮的LoG节点:
   - x is vagfpus
   - x is tolrpus
   - vagfpus is koqrpus
   - koqrpus is babcpus
   - x is qoxspus
   - x is nojppus
   - qoxspus is gaktpus and wawypus
   - tolrpus is qoxspus
   - nojppus is vagfpus
   - x is nojppus and delgpus
   - x is gaktpus
   - nojppus is vagfpus and borbpus
   - ramhpus is koqrpus
   - gaktpus is wifspus
   - vagfpus is ramhpus
   - gaktpus is babrpus
   - x is babcpus
   - bakzpus is babcpus
   - koqrpus is bakzpus
   - vagfpus is babcpus
   - gaktpus is babrpus and nexvpus
   - wifspus is babrpus and nexvpus
   - x is babrpus
   - x is babcpus and babrpus
   - qoxspus is gaktpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus and babrpus (第5层)
   节点Coverage: 25/25 = 100.00%
   前提条件Coverage: 17/17 = 100.00%
   各推理层点亮比例:
     第1层: 11/11 = 100.00%
     第2层: 7/7 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 6/30 = 20.00%
   可推导节点: 24/30
   Strict Error Rate: 21/30 = 70.00%
   严格有效节点: 9/30

   详细分析:
     完美推理: 12 (40.00%)
     部分推理: 17 (56.67%)
     无效推理: 1 (3.33%)

================================================================================
处理记录 41/50
================================================================================
记录索引: 40
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_40.json
✅ 使用缓存结果:
   - 句子数: 68
   - 提取的语句数: 100
   - 初始条件数: 10

=== Statement提取完成 ===
总句子数: 68
成功提取: 68
失败提取: 0
总statements数: 100

=== 开始清洗Statement格式 ===
原始statements数: 100
清洗后statements数: 67
过滤掉的statements数: 33
清洗后的statements:
  1. [planning] x is babcpus
  2. [actual] supypus is qatypus
  3. [actual] toyfpus is neccpus and fiygpus
  4. [actual] x is dedspus
  5. [actual] neccpus is supypus and yayxpus
  6. [actual] toqjpus is jowqpus
  7. [actual] qatypus is toqjpus
  8. [actual] dedspus is kuxxpus and zubwpus
  9. [actual] jowqpus is babcpus
  10. [actual] kuxxpus is toyfpus
  11. [actual] toqjpus is lirqpus and jiwdpus
  12. [actual] x is dedspus
  13. [actual] x is relmpus
  14. [actual] relmpus is babgpus
  15. [actual] x is babgpus
  16. [planning] x is babgpus
  17. [actual] x is dedspus
  18. [actual] dedspus is kuxxpus and zubwpus
  19. [actual] dedspus is kuxxpus and zubwpus
  20. [planning] dedspus is kuxxpus
  21. [actual] toyfpus is neccpus and fiygpus
  22. [actual] toyfpus is a subset of neccpus
  23. [actual] toyfpus is a subset of fiygpus
  24. [actual] neccpus is supypus and yayxpus
  25. [actual] neccpus is a subset of supypus
  26. [actual] neccpus is a subset of yayxpus
  27. [planning] x is babcpus
  28. [planning] x is babcpus
  29. [planning] x is babcpus
  30. [actual] dedspus is babcpus
  31. [planning] dedspus is babcpus
  32. [actual] jowqpus is babcpus
  33. [planning] x is babcpus
  34. [actual] x is dedspus
  35. [actual] dedspus is kuxxpus and zubwpus
  36. [actual] x is kuxxpus and zubwpus
  37. [actual] kuxxpus is toyfpus
  38. [actual] toyfpus is neccpus and fiygpus
  39. [actual] neccpus is supypus and yayxpus
  40. [actual] supypus is qatypus
  41. [actual] qatypus is toqjpus
  42. [actual] toqjpus is jowqpus
  43. [actual] jowqpus is babcpus
  44. [actual] toqjpus is lirqpus and jiwdpus
  45. [actual] x is dedspus
  46. [actual] dedspus is kuxxpus
  47. [actual] x is kuxxpus
  48. [actual] kuxxpus is toyfpus
  49. [actual] x is toyfpus
  50. [actual] toyfpus is neccpus
  51. [planning] x is neccpus
  52. [actual] neccpus is supypus
  53. [planning] x is supypus
  54. [actual] supypus is qatypus
  55. [planning] x is qatypus
  56. [actual] qatypus is toqjpus
  57. [planning] x is toqjpus
  58. [actual] toqjpus is jowqpus
  59. [planning] x is jowqpus
  60. [actual] jowqpus is babcpus
  61. [planning] x is babcpus
  62. [actual] x is babcpus
  63. [actual] dedspus is zubwpus
  64. [actual] toyfpus is fiygpus
  65. [actual] toqjpus is lirqpus and jiwdpus
  66. [actual] x is babcpus
  67. [planning] x is babcpus

=== 开始标准化和解析节点 ===
清洗后statements数: 67
标准化后节点数: 63
过滤掉的无效实体数: 4
标准化后的节点:
  1. [planning] x → babcpus (原始: x is babcpus)
  2. [actual] supypus → qatypus (原始: supypus is qatypus)
  3. [actual] toyfpus → neccpus and fiygpus (原始: toyfpus is neccpus and fiygpus)
  4. [actual] x → dedspus (原始: x is dedspus)
  5. [actual] neccpus → supypus and yayxpus (原始: neccpus is supypus and yayxpus)
  6. [actual] toqjpus → jowqpus (原始: toqjpus is jowqpus)
  7. [actual] qatypus → toqjpus (原始: qatypus is toqjpus)
  8. [actual] dedspus → kuxxpus and zubwpus (原始: dedspus is kuxxpus and zubwpus)
  9. [actual] jowqpus → babcpus (原始: jowqpus is babcpus)
  10. [actual] kuxxpus → toyfpus (原始: kuxxpus is toyfpus)
  11. [actual] toqjpus → lirqpus and jiwdpus (原始: toqjpus is lirqpus and jiwdpus)
  12. [actual] x → dedspus (原始: x is dedspus)
  13. [actual] x → relmpus (原始: x is relmpus)
  14. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  15. [actual] x → babgpus (原始: x is babgpus)
  16. [planning] x → babgpus (原始: x is babgpus)
  17. [actual] x → dedspus (原始: x is dedspus)
  18. [actual] dedspus → kuxxpus and zubwpus (原始: dedspus is kuxxpus and zubwpus)
  19. [actual] dedspus → kuxxpus and zubwpus (原始: dedspus is kuxxpus and zubwpus)
  20. [planning] dedspus → kuxxpus (原始: dedspus is kuxxpus)
  21. [actual] toyfpus → neccpus and fiygpus (原始: toyfpus is neccpus and fiygpus)
  22. [actual] neccpus → supypus and yayxpus (原始: neccpus is supypus and yayxpus)
  23. [planning] x → babcpus (原始: x is babcpus)
  24. [planning] x → babcpus (原始: x is babcpus)
  25. [planning] x → babcpus (原始: x is babcpus)
  26. [actual] dedspus → babcpus (原始: dedspus is babcpus)
  27. [planning] dedspus → babcpus (原始: dedspus is babcpus)
  28. [actual] jowqpus → babcpus (原始: jowqpus is babcpus)
  29. [planning] x → babcpus (原始: x is babcpus)
  30. [actual] x → dedspus (原始: x is dedspus)
  31. [actual] dedspus → kuxxpus and zubwpus (原始: dedspus is kuxxpus and zubwpus)
  32. [actual] x → kuxxpus and zubwpus (原始: x is kuxxpus and zubwpus)
  33. [actual] kuxxpus → toyfpus (原始: kuxxpus is toyfpus)
  34. [actual] toyfpus → neccpus and fiygpus (原始: toyfpus is neccpus and fiygpus)
  35. [actual] neccpus → supypus and yayxpus (原始: neccpus is supypus and yayxpus)
  36. [actual] supypus → qatypus (原始: supypus is qatypus)
  37. [actual] qatypus → toqjpus (原始: qatypus is toqjpus)
  38. [actual] toqjpus → jowqpus (原始: toqjpus is jowqpus)
  39. [actual] jowqpus → babcpus (原始: jowqpus is babcpus)
  40. [actual] toqjpus → lirqpus and jiwdpus (原始: toqjpus is lirqpus and jiwdpus)
  41. [actual] x → dedspus (原始: x is dedspus)
  42. [actual] dedspus → kuxxpus (原始: dedspus is kuxxpus)
  43. [actual] x → kuxxpus (原始: x is kuxxpus)
  44. [actual] kuxxpus → toyfpus (原始: kuxxpus is toyfpus)
  45. [actual] x → toyfpus (原始: x is toyfpus)
  46. [actual] toyfpus → neccpus (原始: toyfpus is neccpus)
  47. [planning] x → neccpus (原始: x is neccpus)
  48. [actual] neccpus → supypus (原始: neccpus is supypus)
  49. [planning] x → supypus (原始: x is supypus)
  50. [actual] supypus → qatypus (原始: supypus is qatypus)
  51. [planning] x → qatypus (原始: x is qatypus)
  52. [actual] qatypus → toqjpus (原始: qatypus is toqjpus)
  53. [planning] x → toqjpus (原始: x is toqjpus)
  54. [actual] toqjpus → jowqpus (原始: toqjpus is jowqpus)
  55. [planning] x → jowqpus (原始: x is jowqpus)
  56. [actual] jowqpus → babcpus (原始: jowqpus is babcpus)
  57. [planning] x → babcpus (原始: x is babcpus)
  58. [actual] x → babcpus (原始: x is babcpus)
  59. [actual] dedspus → zubwpus (原始: dedspus is zubwpus)
  60. [actual] toyfpus → fiygpus (原始: toyfpus is fiygpus)
  61. [actual] toqjpus → lirqpus and jiwdpus (原始: toqjpus is lirqpus and jiwdpus)
  62. [actual] x → babcpus (原始: x is babcpus)
  63. [planning] x → babcpus (原始: x is babcpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 14
[后处理] 加载LoG图，包含 14 个节点
  LoG节点 0: x is babcpus (规则: CE, 深度: 1)
  LoG节点 1: x is babcpus and lirqpus (规则: MP, 深度: 2)
  LoG节点 2: x is neccpus (规则: MP, 深度: 3)
  LoG节点 3: neccpus is babcpus and lirqpus (规则: MP, 深度: 3)
  LoG节点 4: x is kuxxpus (规则: CE, 深度: 4)
  LoG节点 5: kuxxpus is neccpus (规则: CE, 深度: 4)
  LoG节点 6: neccpus is toqjpus (规则: MP, 深度: 4)
  LoG节点 7: toqjpus is babcpus and lirqpus (规则: CI, 深度: 4)
  LoG节点 8: x is kuxxpus and zubwpus (规则: MP, 深度: 5)
  LoG节点 9: kuxxpus is neccpus and fiygpus (规则: MP, 深度: 5)
  LoG节点 10: neccpus is supypus (规则: CE, 深度: 5)
  LoG节点 11: supypus is toqjpus (规则: MP, 深度: 5)
  LoG节点 12: toqjpus is babcpus (规则: MP, 深度: 5)
  LoG节点 13: toqjpus is lirqpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 63
   - 初始条件数: 10
   - LoG图节点数: 14

📋 初始条件列表:
    1. supypus is qatypus
    2. toyfpus is neccpus and fiygpus
    3. x is dedspus
    4. neccpus is supypus and yayxpus
    5. toqjpus is jowqpus
    6. qatypus is toqjpus
    7. dedspus is kuxxpus and zubwpus
    8. jowqpus is babcpus
    9. kuxxpus is toyfpus
   10. toqjpus is lirqpus and jiwdpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 10 个前提节点

🔍 开始处理actual节点...

   节点 1: supypus is qatypus
      ↻ 重复节点，计数: 2

   节点 2: toyfpus is neccpus and fiygpus
      ↻ 重复节点，计数: 2

   节点 3: x is dedspus
      ↻ 重复节点，计数: 2

   节点 4: neccpus is supypus and yayxpus
      ↻ 重复节点，计数: 2

   节点 5: toqjpus is jowqpus
      ↻ 重复节点，计数: 2

   节点 6: qatypus is toqjpus
      ↻ 重复节点，计数: 2

   节点 7: dedspus is kuxxpus and zubwpus
      ↻ 重复节点，计数: 2

   节点 8: jowqpus is babcpus
      ↻ 重复节点，计数: 2

   节点 9: kuxxpus is toyfpus
      ↻ 重复节点，计数: 2

   节点 10: toqjpus is lirqpus and jiwdpus
      ↻ 重复节点，计数: 2

   节点 11: x is dedspus
      ↻ 重复节点，计数: 3

   节点 12: x is relmpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 13: relmpus is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 14: x is babgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is relmpus → relmpus is babgpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is relmpus
  - 前提: relmpus is babgpus

   节点 15: x is dedspus
      ↻ 重复节点，计数: 4

   节点 16: dedspus is kuxxpus and zubwpus
      ↻ 重复节点，计数: 3

   节点 17: dedspus is kuxxpus and zubwpus
      ↻ 重复节点，计数: 4

   节点 18: toyfpus is neccpus and fiygpus
      ↻ 重复节点，计数: 3

   节点 19: neccpus is supypus and yayxpus
      ↻ 重复节点，计数: 3

   节点 20: dedspus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP+CE
      📋 推理路径: MP+CE规则: dedspus is kuxxpus → kuxxpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: dedspus is kuxxpus and zubwpus
  - 前提: kuxxpus is toyfpus
  - 前提: toyfpus is neccpus and fiygpus
  - 前提: neccpus is supypus and yayxpus
  - 前提: supypus is qatypus
  - 前提: qatypus is toqjpus
  - 前提: toqjpus is jowqpus
  - 前提: jowqpus is babcpus
  ✓ 点亮LoG节点: kuxxpus is neccpus
[子树点亮]     └─ 点亮依赖节点: kuxxpus is neccpus and fiygpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
  ✓ 点亮LoG节点: neccpus is toqjpus
[子树点亮]     └─ 点亮依赖节点: neccpus is supypus (深度5)
[子树点亮]     └─ 点亮依赖节点: supypus is toqjpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
  ✓ 点亮LoG节点: toqjpus is babcpus
[后处理] 通过推理轨迹额外点亮了 3 个LoG节点

   节点 21: jowqpus is babcpus
      ↻ 重复节点，计数: 3

   节点 22: x is dedspus
      ↻ 重复节点，计数: 5

   节点 23: dedspus is kuxxpus and zubwpus
      ↻ 重复节点，计数: 5

   节点 24: x is kuxxpus and zubwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is kuxxpus and zubwpus
      ✅ 验证成功 + LoG匹配

   节点 25: kuxxpus is toyfpus
      ↻ 重复节点，计数: 3

   节点 26: toyfpus is neccpus and fiygpus
      ↻ 重复节点，计数: 4

   节点 27: neccpus is supypus and yayxpus
      ↻ 重复节点，计数: 4

   节点 28: supypus is qatypus
      ↻ 重复节点，计数: 3

   节点 29: qatypus is toqjpus
      ↻ 重复节点，计数: 3

   节点 30: toqjpus is jowqpus
      ↻ 重复节点，计数: 3

   节点 31: jowqpus is babcpus
      ↻ 重复节点，计数: 4

   节点 32: toqjpus is lirqpus and jiwdpus
      ↻ 重复节点，计数: 3

   节点 33: x is dedspus
      ↻ 重复节点，计数: 6

   节点 34: dedspus is kuxxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: dedspus is kuxxpus and zubwpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: dedspus is kuxxpus and zubwpus

   节点 35: x is kuxxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is kuxxpus
      ✅ 验证成功 + LoG匹配

   节点 36: kuxxpus is toyfpus
      ↻ 重复节点，计数: 4

   节点 37: x is toyfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is dedspus → dedspus is toyfpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is dedspus
  - 前提: dedspus is kuxxpus
  - 前提: kuxxpus is toyfpus

   节点 38: toyfpus is neccpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: toyfpus is neccpus and fiygpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: toyfpus is neccpus and fiygpus

   节点 39: neccpus is supypus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 40: supypus is qatypus
      ↻ 重复节点，计数: 4

   节点 41: qatypus is toqjpus
      ↻ 重复节点，计数: 4

   节点 42: toqjpus is jowqpus
      ↻ 重复节点，计数: 4

   节点 43: jowqpus is babcpus
      ↻ 重复节点，计数: 5

   节点 44: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: x is babcpus and lirqpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is neccpus (深度3)
[子树点亮]     └─ 点亮依赖节点: neccpus is babcpus and lirqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: toqjpus is babcpus and lirqpus (深度4)
[子树点亮]     └─ 点亮依赖节点: toqjpus is lirqpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
      ✅ 验证成功 + LoG匹配

   节点 45: dedspus is zubwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: dedspus is kuxxpus and zubwpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: dedspus is kuxxpus and zubwpus

   节点 46: toyfpus is fiygpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: toyfpus is neccpus and fiygpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: toyfpus is neccpus and fiygpus

   节点 47: toqjpus is lirqpus and jiwdpus
      ↻ 重复节点，计数: 4

   节点 48: x is babcpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 48
   - 新增节点: 13
   - 更新已存在节点: 35
   - 点亮的LoG节点: 14

🎯 推理质量统计:
   - 完美推理: 8 (节点正确 + 路径正确)
   - 部分推理: 5 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 14节点, 10前提, 复杂度1-10

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 23
   - 前提节点: 10
   - 推理节点: 11
   - 幻觉节点: 2
   - 点亮LoG节点: 14

❌ 幻觉节点详情:
   - x is relmpus (出现1次)
   - relmpus is babgpus (出现1次)

✅ 推理节点详情:
   🟡 x is babgpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus', 'relmpus is babgpus']
   🟢 dedspus is babcpus (出现1次, 质量:perfect)
   🟡 x is kuxxpus and zubwpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟢 dedspus is kuxxpus (出现1次, 质量:perfect)
   🟡 x is kuxxpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟡 x is toyfpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟢 toyfpus is neccpus (出现1次, 质量:perfect)
   🟢 neccpus is supypus (出现1次, 质量:perfect)
   🟡 x is babcpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟢 dedspus is zubwpus (出现1次, 质量:perfect)
   🟢 toyfpus is fiygpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - toqjpus is babcpus and lirqpus
   - neccpus is toqjpus
   - neccpus is supypus
   - x is babcpus
   - x is kuxxpus and zubwpus
   - x is neccpus
   - kuxxpus is neccpus
   - neccpus is babcpus and lirqpus
   - x is babcpus and lirqpus
   - supypus is toqjpus
   - toqjpus is babcpus
   - x is kuxxpus
   - kuxxpus is neccpus and fiygpus
   - toqjpus is lirqpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus (第5层)
   节点Coverage: 14/14 = 100.00%
   前提条件Coverage: 10/10 = 100.00%
   各推理层点亮比例:
     第1层: 6/6 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 2/13 = 15.38%
   可推导节点: 11/13
   Strict Error Rate: 7/13 = 53.85%
   严格有效节点: 6/13

   详细分析:
     完美推理: 8 (61.54%)
     部分推理: 5 (38.46%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 42/50
================================================================================
记录索引: 41
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_41.json
✅ 使用缓存结果:
   - 句子数: 75
   - 提取的语句数: 71
   - 初始条件数: 10

=== Statement提取完成 ===
总句子数: 75
成功提取: 75
失败提取: 0
总statements数: 71

=== 开始清洗Statement格式 ===
原始statements数: 71
清洗后statements数: 65
过滤掉的statements数: 6
清洗后的statements:
  1. [planning] x is babcpus
  2. [actual] x is jifcpus
  3. [actual] x is jifcpus
  4. [planning] jifcpus is babcpus
  5. [actual] zottpus is babcpus and yutspus and xazxpus
  6. [actual] zottpus is babcpus
  7. [actual] zottpus is yutspus
  8. [actual] zottpus is xazxpus
  9. [actual] babcpus is a category that contains zottpus
  10. [actual] guytpus is nulgpus
  11. [actual] faxdpus is rijxpus
  12. [actual] makvpus is guytpus and cuzxpus and tomzpus
  13. [actual] rijxpus is wirfpus and pibmpus
  14. [actual] jifcpus is busdpus and navzpus
  15. [actual] x is jifcpus
  16. [actual] x is jifcpus
  17. [actual] busdpus is makvpus
  18. [actual] nulgpus is faxdpus and qaxqpus
  19. [actual] wirfpus is zottpus and fafbpus
  20. [planning] x is babcpus
  21. [actual] x is jifcpus
  22. [planning] jifcpus is babcpus
  23. [planning] jifcpus is connected through other categories
  24. [actual] jifcpus is busdpus and navzpus
  25. [actual] jifcpus is busdpus
  26. [actual] busdpus is makvpus
  27. [actual] busdpus is makvpus
  28. [actual] makvpus is guytpus and cuzxpus and tomzpus
  29. [actual] makvpus is guytpus
  30. [actual] guytpus is nulgpus
  31. [actual] guytpus is nulgpus
  32. [actual] nulgpus is faxdpus and qaxqpus
  33. [actual] nulgpus is faxdpus
  34. [actual] faxdpus is rijxpus
  35. [actual] faxdpus is rijxpus
  36. [actual] rijxpus is wirfpus and pibmpus
  37. [actual] rijxpus is wirfpus
  38. [actual] wirfpus is zottpus and fafbpus
  39. [actual] wirfpus is zottpus
  40. [actual] zottpus is babcpus and yutspus and xazxpus
  41. [actual] zottpus is babcpus
  42. [actual] zottpus is babcpus
  43. [actual] wirfpus is zottpus
  44. [actual] rijxpus is wirfpus
  45. [actual] faxdpus is rijxpus
  46. [actual] nulgpus is faxdpus
  47. [actual] guytpus is nulgpus
  48. [actual] makvpus is guytpus
  49. [actual] busdpus is makvpus
  50. [actual] jifcpus is busdpus
  51. [actual] x is jifcpus
  52. [actual] x is babcpus
  53. [actual] x is jifcpus
  54. [actual] jifcpus is busdpus
  55. [actual] busdpus is makvpus
  56. [actual] makvpus is guytpus
  57. [actual] guytpus is nulgpus
  58. [actual] nulgpus is faxdpus
  59. [actual] wirfpus is zottpus
  60. [actual] zottpus is babcpus
  61. [actual] x is babcpus
  62. [actual] x is babcpus
  63. [planning] x is babcpus
  64. [actual] zottpus is babcpus and yutspus and xazxpus
  65. [actual] zottpus is babcpus and yutspus and xazxpus

=== 开始标准化和解析节点 ===
清洗后statements数: 65
标准化后节点数: 63
过滤掉的无效实体数: 2
标准化后的节点:
  1. [planning] x → babcpus (原始: x is babcpus)
  2. [actual] x → jifcpus (原始: x is jifcpus)
  3. [actual] x → jifcpus (原始: x is jifcpus)
  4. [planning] jifcpus → babcpus (原始: jifcpus is babcpus)
  5. [actual] zottpus → babcpus and yutspus and xazxpus (原始: zottpus is babcpus and yutspus and xazxpus)
  6. [actual] zottpus → babcpus (原始: zottpus is babcpus)
  7. [actual] zottpus → yutspus (原始: zottpus is yutspus)
  8. [actual] zottpus → xazxpus (原始: zottpus is xazxpus)
  9. [actual] guytpus → nulgpus (原始: guytpus is nulgpus)
  10. [actual] faxdpus → rijxpus (原始: faxdpus is rijxpus)
  11. [actual] makvpus → guytpus and cuzxpus and tomzpus (原始: makvpus is guytpus and cuzxpus and tomzpus)
  12. [actual] rijxpus → wirfpus and pibmpus (原始: rijxpus is wirfpus and pibmpus)
  13. [actual] jifcpus → busdpus and navzpus (原始: jifcpus is busdpus and navzpus)
  14. [actual] x → jifcpus (原始: x is jifcpus)
  15. [actual] x → jifcpus (原始: x is jifcpus)
  16. [actual] busdpus → makvpus (原始: busdpus is makvpus)
  17. [actual] nulgpus → faxdpus and qaxqpus (原始: nulgpus is faxdpus and qaxqpus)
  18. [actual] wirfpus → zottpus and fafbpus (原始: wirfpus is zottpus and fafbpus)
  19. [planning] x → babcpus (原始: x is babcpus)
  20. [actual] x → jifcpus (原始: x is jifcpus)
  21. [planning] jifcpus → babcpus (原始: jifcpus is babcpus)
  22. [actual] jifcpus → busdpus and navzpus (原始: jifcpus is busdpus and navzpus)
  23. [actual] jifcpus → busdpus (原始: jifcpus is busdpus)
  24. [actual] busdpus → makvpus (原始: busdpus is makvpus)
  25. [actual] busdpus → makvpus (原始: busdpus is makvpus)
  26. [actual] makvpus → guytpus and cuzxpus and tomzpus (原始: makvpus is guytpus and cuzxpus and tomzpus)
  27. [actual] makvpus → guytpus (原始: makvpus is guytpus)
  28. [actual] guytpus → nulgpus (原始: guytpus is nulgpus)
  29. [actual] guytpus → nulgpus (原始: guytpus is nulgpus)
  30. [actual] nulgpus → faxdpus and qaxqpus (原始: nulgpus is faxdpus and qaxqpus)
  31. [actual] nulgpus → faxdpus (原始: nulgpus is faxdpus)
  32. [actual] faxdpus → rijxpus (原始: faxdpus is rijxpus)
  33. [actual] faxdpus → rijxpus (原始: faxdpus is rijxpus)
  34. [actual] rijxpus → wirfpus and pibmpus (原始: rijxpus is wirfpus and pibmpus)
  35. [actual] rijxpus → wirfpus (原始: rijxpus is wirfpus)
  36. [actual] wirfpus → zottpus and fafbpus (原始: wirfpus is zottpus and fafbpus)
  37. [actual] wirfpus → zottpus (原始: wirfpus is zottpus)
  38. [actual] zottpus → babcpus and yutspus and xazxpus (原始: zottpus is babcpus and yutspus and xazxpus)
  39. [actual] zottpus → babcpus (原始: zottpus is babcpus)
  40. [actual] zottpus → babcpus (原始: zottpus is babcpus)
  41. [actual] wirfpus → zottpus (原始: wirfpus is zottpus)
  42. [actual] rijxpus → wirfpus (原始: rijxpus is wirfpus)
  43. [actual] faxdpus → rijxpus (原始: faxdpus is rijxpus)
  44. [actual] nulgpus → faxdpus (原始: nulgpus is faxdpus)
  45. [actual] guytpus → nulgpus (原始: guytpus is nulgpus)
  46. [actual] makvpus → guytpus (原始: makvpus is guytpus)
  47. [actual] busdpus → makvpus (原始: busdpus is makvpus)
  48. [actual] jifcpus → busdpus (原始: jifcpus is busdpus)
  49. [actual] x → jifcpus (原始: x is jifcpus)
  50. [actual] x → babcpus (原始: x is babcpus)
  51. [actual] x → jifcpus (原始: x is jifcpus)
  52. [actual] jifcpus → busdpus (原始: jifcpus is busdpus)
  53. [actual] busdpus → makvpus (原始: busdpus is makvpus)
  54. [actual] makvpus → guytpus (原始: makvpus is guytpus)
  55. [actual] guytpus → nulgpus (原始: guytpus is nulgpus)
  56. [actual] nulgpus → faxdpus (原始: nulgpus is faxdpus)
  57. [actual] wirfpus → zottpus (原始: wirfpus is zottpus)
  58. [actual] zottpus → babcpus (原始: zottpus is babcpus)
  59. [actual] x → babcpus (原始: x is babcpus)
  60. [actual] x → babcpus (原始: x is babcpus)
  61. [planning] x → babcpus (原始: x is babcpus)
  62. [actual] zottpus → babcpus and yutspus and xazxpus (原始: zottpus is babcpus and yutspus and xazxpus)
  63. [actual] zottpus → babcpus and yutspus and xazxpus (原始: zottpus is babcpus and yutspus and xazxpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 17
[后处理] 加载LoG图，包含 17 个节点
  LoG节点 0: x is babcpus (规则: MP, 深度: 1)
  LoG节点 1: x is guytpus (规则: CE, 深度: 2)
  LoG节点 2: guytpus is babcpus (规则: MP, 深度: 2)
  LoG节点 3: x is guytpus and cuzxpus (规则: MP, 深度: 3)
  LoG节点 4: guytpus is wirfpus (规则: MP, 深度: 3)
  LoG节点 5: wirfpus is babcpus (规则: CE, 深度: 3)
  LoG节点 6: x is busdpus (规则: CE, 深度: 4)
  LoG节点 7: busdpus is guytpus and cuzxpus (规则: CE, 深度: 4)
  LoG节点 8: guytpus is faxdpus (规则: CE, 深度: 4)
  LoG节点 9: faxdpus is wirfpus (规则: CE, 深度: 4)
  LoG节点 10: wirfpus is babcpus and yutspus (规则: MP, 深度: 4)
  LoG节点 11: x is busdpus and navzpus (规则: MP, 深度: 5)
  LoG节点 12: busdpus is guytpus and cuzxpus and tomzpus (规则: MP, 深度: 5)
  LoG节点 13: guytpus is faxdpus and qaxqpus (规则: MP, 深度: 5)
  LoG节点 14: faxdpus is wirfpus and pibmpus (规则: MP, 深度: 5)
  LoG节点 15: wirfpus is zottpus (规则: CE, 深度: 5)
  LoG节点 16: zottpus is babcpus and yutspus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 63
   - 初始条件数: 10
   - LoG图节点数: 17

📋 初始条件列表:
    1. zottpus is babcpus and yutspus and xazxpus
    2. guytpus is nulgpus
    3. faxdpus is rijxpus
    4. makvpus is guytpus and cuzxpus and tomzpus
    5. rijxpus is wirfpus and pibmpus
    6. jifcpus is busdpus and navzpus
    7. x is jifcpus
    8. busdpus is makvpus
    9. nulgpus is faxdpus and qaxqpus
   10. wirfpus is zottpus and fafbpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 10 个前提节点

🔍 开始处理actual节点...

   节点 1: x is jifcpus
      ↻ 重复节点，计数: 2

   节点 2: x is jifcpus
      ↻ 重复节点，计数: 3

   节点 3: zottpus is babcpus and yutspus and xazxpus
      ↻ 重复节点，计数: 2

   节点 4: zottpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zottpus is babcpus and yutspus and xazxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zottpus is babcpus and yutspus and xazxpus
  ✓ 点亮LoG节点: zottpus is babcpus and yutspus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 5: zottpus is yutspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zottpus is babcpus and yutspus and xazxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zottpus is babcpus and yutspus and xazxpus

   节点 6: zottpus is xazxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zottpus is babcpus and yutspus and xazxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zottpus is babcpus and yutspus and xazxpus

   节点 7: guytpus is nulgpus
      ↻ 重复节点，计数: 2

   节点 8: faxdpus is rijxpus
      ↻ 重复节点，计数: 2

   节点 9: makvpus is guytpus and cuzxpus and tomzpus
      ↻ 重复节点，计数: 2

   节点 10: rijxpus is wirfpus and pibmpus
      ↻ 重复节点，计数: 2

   节点 11: jifcpus is busdpus and navzpus
      ↻ 重复节点，计数: 2

   节点 12: x is jifcpus
      ↻ 重复节点，计数: 4

   节点 13: x is jifcpus
      ↻ 重复节点，计数: 5

   节点 14: busdpus is makvpus
      ↻ 重复节点，计数: 2

   节点 15: nulgpus is faxdpus and qaxqpus
      ↻ 重复节点，计数: 2

   节点 16: wirfpus is zottpus and fafbpus
      ↻ 重复节点，计数: 2

   节点 17: x is jifcpus
      ↻ 重复节点，计数: 6

   节点 18: jifcpus is busdpus and navzpus
      ↻ 重复节点，计数: 3

   节点 19: jifcpus is busdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: jifcpus is busdpus and navzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: jifcpus is busdpus and navzpus

   节点 20: busdpus is makvpus
      ↻ 重复节点，计数: 3

   节点 21: busdpus is makvpus
      ↻ 重复节点，计数: 4

   节点 22: makvpus is guytpus and cuzxpus and tomzpus
      ↻ 重复节点，计数: 3

   节点 23: makvpus is guytpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: makvpus is guytpus and cuzxpus and tomzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: makvpus is guytpus and cuzxpus and tomzpus

   节点 24: guytpus is nulgpus
      ↻ 重复节点，计数: 3

   节点 25: guytpus is nulgpus
      ↻ 重复节点，计数: 4

   节点 26: nulgpus is faxdpus and qaxqpus
      ↻ 重复节点，计数: 3

   节点 27: nulgpus is faxdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: nulgpus is faxdpus and qaxqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: nulgpus is faxdpus and qaxqpus

   节点 28: faxdpus is rijxpus
      ↻ 重复节点，计数: 3

   节点 29: faxdpus is rijxpus
      ↻ 重复节点，计数: 4

   节点 30: rijxpus is wirfpus and pibmpus
      ↻ 重复节点，计数: 3

   节点 31: rijxpus is wirfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: rijxpus is wirfpus and pibmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: rijxpus is wirfpus and pibmpus

   节点 32: wirfpus is zottpus and fafbpus
      ↻ 重复节点，计数: 3

   节点 33: wirfpus is zottpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: wirfpus is zottpus
      ✅ 验证成功 + LoG匹配

   节点 34: zottpus is babcpus and yutspus and xazxpus
      ↻ 重复节点，计数: 3

   节点 35: zottpus is babcpus
      ↻ 重复节点，计数: 2

   节点 36: zottpus is babcpus
      ↻ 重复节点，计数: 3

   节点 37: wirfpus is zottpus
      ↻ 重复节点，计数: 2

   节点 38: rijxpus is wirfpus
      ↻ 重复节点，计数: 2

   节点 39: faxdpus is rijxpus
      ↻ 重复节点，计数: 5

   节点 40: nulgpus is faxdpus
      ↻ 重复节点，计数: 2

   节点 41: guytpus is nulgpus
      ↻ 重复节点，计数: 5

   节点 42: makvpus is guytpus
      ↻ 重复节点，计数: 2

   节点 43: busdpus is makvpus
      ↻ 重复节点，计数: 5

   节点 44: jifcpus is busdpus
      ↻ 重复节点，计数: 2

   节点 45: x is jifcpus
      ↻ 重复节点，计数: 7

   节点 46: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: x is guytpus (深度2)
[子树点亮]     └─ 点亮依赖节点: guytpus is babcpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is guytpus and cuzxpus (深度3)
[子树点亮]     └─ 点亮依赖节点: guytpus is wirfpus (深度3)
[子树点亮]     └─ 点亮依赖节点: wirfpus is babcpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is busdpus (深度4)
[子树点亮]     └─ 点亮依赖节点: busdpus is guytpus and cuzxpus (深度4)
[子树点亮]     └─ 点亮依赖节点: guytpus is faxdpus (深度4)
[子树点亮]     └─ 点亮依赖节点: faxdpus is wirfpus (深度4)
[子树点亮]     └─ 点亮依赖节点: wirfpus is babcpus and yutspus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is busdpus and navzpus (深度5)
[子树点亮]     └─ 点亮依赖节点: busdpus is guytpus and cuzxpus and tomzpus (深度5)
[子树点亮]     └─ 点亮依赖节点: guytpus is faxdpus and qaxqpus (深度5)
[子树点亮]     └─ 点亮依赖节点: faxdpus is wirfpus and pibmpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 14 个节点
      ✅ 验证成功 + LoG匹配

   节点 47: x is jifcpus
      ↻ 重复节点，计数: 8

   节点 48: jifcpus is busdpus
      ↻ 重复节点，计数: 3

   节点 49: busdpus is makvpus
      ↻ 重复节点，计数: 6

   节点 50: makvpus is guytpus
      ↻ 重复节点，计数: 3

   节点 51: guytpus is nulgpus
      ↻ 重复节点，计数: 6

   节点 52: nulgpus is faxdpus
      ↻ 重复节点，计数: 3

   节点 53: wirfpus is zottpus
      ↻ 重复节点，计数: 3

   节点 54: zottpus is babcpus
      ↻ 重复节点，计数: 4

   节点 55: x is babcpus
      ↻ 重复节点，计数: 2

   节点 56: x is babcpus
      ↻ 重复节点，计数: 3

   节点 57: zottpus is babcpus and yutspus and xazxpus
      ↻ 重复节点，计数: 4

   节点 58: zottpus is babcpus and yutspus and xazxpus
      ↻ 重复节点，计数: 5

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 58
   - 新增节点: 9
   - 更新已存在节点: 49
   - 点亮的LoG节点: 17

🎯 推理质量统计:
   - 完美推理: 9 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 17节点, 10前提, 复杂度1-10

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 19
   - 前提节点: 10
   - 推理节点: 9
   - 幻觉节点: 0
   - 点亮LoG节点: 17

✅ 推理节点详情:
   🟢 zottpus is babcpus (出现4次, 质量:perfect)
   🟢 zottpus is yutspus (出现1次, 质量:perfect)
   🟢 zottpus is xazxpus (出现1次, 质量:perfect)
   🟢 jifcpus is busdpus (出现3次, 质量:perfect)
   🟢 makvpus is guytpus (出现3次, 质量:perfect)
   🟢 nulgpus is faxdpus (出现3次, 质量:perfect)
   🟢 rijxpus is wirfpus (出现2次, 质量:perfect)
   🟢 wirfpus is zottpus (出现3次, 质量:perfect)
   🟢 x is babcpus (出现3次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is guytpus and cuzxpus
   - wirfpus is zottpus
   - busdpus is guytpus and cuzxpus and tomzpus
   - x is babcpus
   - guytpus is wirfpus
   - guytpus is babcpus
   - wirfpus is babcpus
   - x is guytpus
   - x is busdpus and navzpus
   - guytpus is faxdpus
   - guytpus is faxdpus and qaxqpus
   - faxdpus is wirfpus and pibmpus
   - busdpus is guytpus and cuzxpus
   - wirfpus is babcpus and yutspus
   - x is busdpus
   - zottpus is babcpus and yutspus
   - faxdpus is wirfpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus (第5层)
   节点Coverage: 17/17 = 100.00%
   前提条件Coverage: 10/10 = 100.00%
   各推理层点亮比例:
     第1层: 6/6 = 100.00%
     第2层: 5/5 = 100.00%
     第3层: 3/3 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/9 = 0.00%
   可推导节点: 9/9
   Strict Error Rate: 0/9 = 0.00%
   严格有效节点: 9/9

   详细分析:
     完美推理: 9 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 43/50
================================================================================
记录索引: 42
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_42.json
✅ 使用缓存结果:
   - 句子数: 78
   - 提取的语句数: 72
   - 初始条件数: 18

=== Statement提取完成 ===
总句子数: 78
成功提取: 78
失败提取: 0
总statements数: 72

=== 开始清洗Statement格式 ===
原始statements数: 72
清洗后statements数: 71
过滤掉的statements数: 1
清洗后的statements:
  1. [planning] x is babcpus and babrpus
  2. [actual] jukvpus is kovlpus
  3. [actual] sufwpus is camzpus and liffpus
  4. [actual] hovlpus is babrpus and biyzpus
  5. [actual] nexdpus is jorvpus
  6. [actual] camzpus is zopnpus
  7. [actual] kiqspus is culmpus
  8. [actual] zopnpus is kiqspus and wofdpus
  9. [actual] ceqbpus is nexdpus and zuqwpus
  10. [actual] jorvpus is babcpus and xugqpus
  11. [actual] cezbpus is jukvpus
  12. [actual] culmpus is vigzpus
  13. [actual] nexdpus is hovlpus and bijrpus
  14. [actual] nexdpus is jorvpus
  15. [actual] nexdpus is hovlpus and bijrpus
  16. [actual] vevzpus is sufwpus
  17. [actual] kovlpus is sundpus
  18. [actual] x is qihtpus and yiygpus
  19. [actual] sundpus is vevzpus and wannpus
  20. [actual] qihtpus is cezbpus
  21. [actual] vigzpus is ceqbpus
  22. [actual] x is qihtpus
  23. [actual] x is yiygpus
  24. [planning] x is babcpus and babrpus
  25. [actual] x is qihtpus and yiygpus
  26. [actual] qihtpus is cezbpus
  27. [actual] x is cezbpus
  28. [actual] x is qihtpus
  29. [actual] qihtpus is cezbpus
  30. [actual] cezbpus is jukvpus
  31. [actual] x is jukvpus
  32. [actual] jukvpus is kovlpus
  33. [actual] x is kovlpus
  34. [actual] kovlpus is sundpus
  35. [actual] x is sundpus
  36. [actual] sundpus is vevzpus and wannpus
  37. [actual] x is vevzpus and wannpus
  38. [actual] vevzpus is sufwpus
  39. [actual] x is sufwpus
  40. [actual] sufwpus is camzpus and liffpus
  41. [actual] x is camzpus and liffpus
  42. [actual] camzpus is zopnpus
  43. [actual] x is zopnpus
  44. [actual] zopnpus is kiqspus and wofdpus
  45. [actual] x is kiqspus and wofdpus
  46. [actual] kiqspus is culmpus
  47. [actual] x is culmpus
  48. [actual] culmpus is vigzpus
  49. [actual] x is vigzpus
  50. [actual] vigzpus is ceqbpus
  51. [actual] x is ceqbpus
  52. [actual] ceqbpus is nexdpus and zuqwpus
  53. [actual] x is nexdpus and zuqwpus
  54. [actual] nexdpus is jorvpus
  55. [actual] nexdpus is hovlpus and bijrpus
  56. [actual] x is nexdpus
  57. [actual] x is jorvpus
  58. [actual] jorvpus is babcpus and xugqpus
  59. [actual] x is babcpus
  60. [actual] x is babcpus
  61. [planning] x is babrpus
  62. [actual] x is nexdpus
  63. [actual] nexdpus is hovlpus and bijrpus
  64. [actual] x is hovlpus
  65. [actual] hovlpus is babrpus and biyzpus
  66. [actual] x is babrpus
  67. [actual] x is babcpus and babrpus
  68. [actual] x is nexdpus
  69. [actual] nexdpus is jorvpus and hovlpus
  70. [planning] x is categorized
  71. [planning] x is babcpus and babrpus

=== 开始标准化和解析节点 ===
清洗后statements数: 71
标准化后节点数: 70
过滤掉的无效实体数: 1
标准化后的节点:
  1. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  2. [actual] jukvpus → kovlpus (原始: jukvpus is kovlpus)
  3. [actual] sufwpus → camzpus and liffpus (原始: sufwpus is camzpus and liffpus)
  4. [actual] hovlpus → babrpus and biyzpus (原始: hovlpus is babrpus and biyzpus)
  5. [actual] nexdpus → jorvpus (原始: nexdpus is jorvpus)
  6. [actual] camzpus → zopnpus (原始: camzpus is zopnpus)
  7. [actual] kiqspus → culmpus (原始: kiqspus is culmpus)
  8. [actual] zopnpus → kiqspus and wofdpus (原始: zopnpus is kiqspus and wofdpus)
  9. [actual] ceqbpus → nexdpus and zuqwpus (原始: ceqbpus is nexdpus and zuqwpus)
  10. [actual] jorvpus → babcpus and xugqpus (原始: jorvpus is babcpus and xugqpus)
  11. [actual] cezbpus → jukvpus (原始: cezbpus is jukvpus)
  12. [actual] culmpus → vigzpus (原始: culmpus is vigzpus)
  13. [actual] nexdpus → hovlpus and bijrpus (原始: nexdpus is hovlpus and bijrpus)
  14. [actual] nexdpus → jorvpus (原始: nexdpus is jorvpus)
  15. [actual] nexdpus → hovlpus and bijrpus (原始: nexdpus is hovlpus and bijrpus)
  16. [actual] vevzpus → sufwpus (原始: vevzpus is sufwpus)
  17. [actual] kovlpus → sundpus (原始: kovlpus is sundpus)
  18. [actual] x → qihtpus and yiygpus (原始: x is qihtpus and yiygpus)
  19. [actual] sundpus → vevzpus and wannpus (原始: sundpus is vevzpus and wannpus)
  20. [actual] qihtpus → cezbpus (原始: qihtpus is cezbpus)
  21. [actual] vigzpus → ceqbpus (原始: vigzpus is ceqbpus)
  22. [actual] x → qihtpus (原始: x is qihtpus)
  23. [actual] x → yiygpus (原始: x is yiygpus)
  24. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  25. [actual] x → qihtpus and yiygpus (原始: x is qihtpus and yiygpus)
  26. [actual] qihtpus → cezbpus (原始: qihtpus is cezbpus)
  27. [actual] x → cezbpus (原始: x is cezbpus)
  28. [actual] x → qihtpus (原始: x is qihtpus)
  29. [actual] qihtpus → cezbpus (原始: qihtpus is cezbpus)
  30. [actual] cezbpus → jukvpus (原始: cezbpus is jukvpus)
  31. [actual] x → jukvpus (原始: x is jukvpus)
  32. [actual] jukvpus → kovlpus (原始: jukvpus is kovlpus)
  33. [actual] x → kovlpus (原始: x is kovlpus)
  34. [actual] kovlpus → sundpus (原始: kovlpus is sundpus)
  35. [actual] x → sundpus (原始: x is sundpus)
  36. [actual] sundpus → vevzpus and wannpus (原始: sundpus is vevzpus and wannpus)
  37. [actual] x → vevzpus and wannpus (原始: x is vevzpus and wannpus)
  38. [actual] vevzpus → sufwpus (原始: vevzpus is sufwpus)
  39. [actual] x → sufwpus (原始: x is sufwpus)
  40. [actual] sufwpus → camzpus and liffpus (原始: sufwpus is camzpus and liffpus)
  41. [actual] x → camzpus and liffpus (原始: x is camzpus and liffpus)
  42. [actual] camzpus → zopnpus (原始: camzpus is zopnpus)
  43. [actual] x → zopnpus (原始: x is zopnpus)
  44. [actual] zopnpus → kiqspus and wofdpus (原始: zopnpus is kiqspus and wofdpus)
  45. [actual] x → kiqspus and wofdpus (原始: x is kiqspus and wofdpus)
  46. [actual] kiqspus → culmpus (原始: kiqspus is culmpus)
  47. [actual] x → culmpus (原始: x is culmpus)
  48. [actual] culmpus → vigzpus (原始: culmpus is vigzpus)
  49. [actual] x → vigzpus (原始: x is vigzpus)
  50. [actual] vigzpus → ceqbpus (原始: vigzpus is ceqbpus)
  51. [actual] x → ceqbpus (原始: x is ceqbpus)
  52. [actual] ceqbpus → nexdpus and zuqwpus (原始: ceqbpus is nexdpus and zuqwpus)
  53. [actual] x → nexdpus and zuqwpus (原始: x is nexdpus and zuqwpus)
  54. [actual] nexdpus → jorvpus (原始: nexdpus is jorvpus)
  55. [actual] nexdpus → hovlpus and bijrpus (原始: nexdpus is hovlpus and bijrpus)
  56. [actual] x → nexdpus (原始: x is nexdpus)
  57. [actual] x → jorvpus (原始: x is jorvpus)
  58. [actual] jorvpus → babcpus and xugqpus (原始: jorvpus is babcpus and xugqpus)
  59. [actual] x → babcpus (原始: x is babcpus)
  60. [actual] x → babcpus (原始: x is babcpus)
  61. [planning] x → babrpus (原始: x is babrpus)
  62. [actual] x → nexdpus (原始: x is nexdpus)
  63. [actual] nexdpus → hovlpus and bijrpus (原始: nexdpus is hovlpus and bijrpus)
  64. [actual] x → hovlpus (原始: x is hovlpus)
  65. [actual] hovlpus → babrpus and biyzpus (原始: hovlpus is babrpus and biyzpus)
  66. [actual] x → babrpus (原始: x is babrpus)
  67. [actual] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  68. [actual] x → nexdpus (原始: x is nexdpus)
  69. [actual] nexdpus → jorvpus and hovlpus (原始: nexdpus is jorvpus and hovlpus)
  70. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 25
[后处理] 加载LoG图，包含 25 个节点
  LoG节点 0: x is babcpus and babrpus (规则: MP, 深度: 1)
  LoG节点 1: x is kiqspus (规则: MP, 深度: 2)
  LoG节点 2: kiqspus is babcpus and babrpus (规则: MP, 深度: 2)
  LoG节点 3: x is vevzpus (规则: MP, 深度: 3)
  LoG节点 4: vevzpus is kiqspus (规则: MP, 深度: 3)
  LoG节点 5: kiqspus is nexdpus (规则: CE, 深度: 3)
  LoG节点 6: nexdpus is babcpus and babrpus (规则: CI, 深度: 3)
  LoG节点 7: x is jukvpus (规则: MP, 深度: 4)
  LoG节点 8: jukvpus is vevzpus (规则: MP, 深度: 4)
  LoG节点 9: vevzpus is camzpus (规则: CE, 深度: 4)
  LoG节点 10: camzpus is kiqspus (规则: CE, 深度: 4)
  LoG节点 11: kiqspus is nexdpus and zuqwpus (规则: MP, 深度: 4)
  LoG节点 12: nexdpus is babcpus (规则: CE, 深度: 4)
  LoG节点 13: nexdpus is babrpus (规则: MP, 深度: 4)
  LoG节点 14: x is qihtpus (规则: CE, 深度: 5)
  LoG节点 15: qihtpus is jukvpus (规则: MP, 深度: 5)
  LoG节点 16: jukvpus is sundpus (规则: MP, 深度: 5)
  LoG节点 17: sundpus is vevzpus (规则: CE, 深度: 5)
  LoG节点 18: vevzpus is camzpus and liffpus (规则: MP, 深度: 5)
  LoG节点 19: camzpus is kiqspus and wofdpus (规则: MP, 深度: 5)
  LoG节点 20: kiqspus is vigzpus (规则: MP, 深度: 5)
  LoG节点 21: vigzpus is nexdpus and zuqwpus (规则: MP, 深度: 5)
  LoG节点 22: nexdpus is babcpus and xugqpus (规则: MP, 深度: 5)
  LoG节点 23: nexdpus is hovlpus (规则: CE, 深度: 5)
  LoG节点 24: hovlpus is babrpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 70
   - 初始条件数: 18
   - LoG图节点数: 25

📋 初始条件列表:
    1. jukvpus is kovlpus
    2. sufwpus is camzpus and liffpus
    3. hovlpus is babrpus and biyzpus
    4. nexdpus is jorvpus
    5. camzpus is zopnpus
    6. kiqspus is culmpus
    7. zopnpus is kiqspus and wofdpus
    8. ceqbpus is nexdpus and zuqwpus
    9. jorvpus is babcpus and xugqpus
   10. cezbpus is jukvpus
   11. culmpus is vigzpus
   12. nexdpus is hovlpus and bijrpus
   13. vevzpus is sufwpus
   14. kovlpus is sundpus
   15. x is qihtpus and yiygpus
   16. sundpus is vevzpus and wannpus
   17. qihtpus is cezbpus
   18. vigzpus is ceqbpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 18 个前提节点

🔍 开始处理actual节点...

   节点 1: jukvpus is kovlpus
      ↻ 重复节点，计数: 2

   节点 2: sufwpus is camzpus and liffpus
      ↻ 重复节点，计数: 2

   节点 3: hovlpus is babrpus and biyzpus
      ↻ 重复节点，计数: 2

   节点 4: nexdpus is jorvpus
      ↻ 重复节点，计数: 2

   节点 5: camzpus is zopnpus
      ↻ 重复节点，计数: 2

   节点 6: kiqspus is culmpus
      ↻ 重复节点，计数: 2

   节点 7: zopnpus is kiqspus and wofdpus
      ↻ 重复节点，计数: 2

   节点 8: ceqbpus is nexdpus and zuqwpus
      ↻ 重复节点，计数: 2

   节点 9: jorvpus is babcpus and xugqpus
      ↻ 重复节点，计数: 2

   节点 10: cezbpus is jukvpus
      ↻ 重复节点，计数: 2

   节点 11: culmpus is vigzpus
      ↻ 重复节点，计数: 2

   节点 12: nexdpus is hovlpus and bijrpus
      ↻ 重复节点，计数: 2

   节点 13: nexdpus is jorvpus
      ↻ 重复节点，计数: 3

   节点 14: nexdpus is hovlpus and bijrpus
      ↻ 重复节点，计数: 3

   节点 15: vevzpus is sufwpus
      ↻ 重复节点，计数: 2

   节点 16: kovlpus is sundpus
      ↻ 重复节点，计数: 2

   节点 17: x is qihtpus and yiygpus
      ↻ 重复节点，计数: 2

   节点 18: sundpus is vevzpus and wannpus
      ↻ 重复节点，计数: 2

   节点 19: qihtpus is cezbpus
      ↻ 重复节点，计数: 2

   节点 20: vigzpus is ceqbpus
      ↻ 重复节点，计数: 2

   节点 21: x is qihtpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is qihtpus
      ✅ 验证成功 + LoG匹配

   节点 22: x is yiygpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is qihtpus and yiygpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is qihtpus and yiygpus

   节点 23: x is qihtpus and yiygpus
      ↻ 重复节点，计数: 3

   节点 24: qihtpus is cezbpus
      ↻ 重复节点，计数: 3

   节点 25: x is cezbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qihtpus → qihtpus is cezbpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is qihtpus
  - 前提: qihtpus is cezbpus

   节点 26: x is qihtpus
      ↻ 重复节点，计数: 2

   节点 27: qihtpus is cezbpus
      ↻ 重复节点，计数: 4

   节点 28: cezbpus is jukvpus
      ↻ 重复节点，计数: 3

   节点 29: x is jukvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is jukvpus
[子树点亮]     └─ 点亮依赖节点: qihtpus is jukvpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 30: jukvpus is kovlpus
      ↻ 重复节点，计数: 3

   节点 31: x is kovlpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qihtpus → qihtpus is kovlpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is qihtpus
  - 前提: qihtpus is cezbpus
  - 前提: cezbpus is jukvpus
  - 前提: jukvpus is kovlpus

   节点 32: kovlpus is sundpus
      ↻ 重复节点，计数: 3

   节点 33: x is sundpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qihtpus → qihtpus is sundpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is qihtpus
  - 前提: qihtpus is cezbpus
  - 前提: cezbpus is jukvpus
  - 前提: jukvpus is kovlpus
  - 前提: kovlpus is sundpus
  ✓ 点亮LoG节点: jukvpus is sundpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 34: sundpus is vevzpus and wannpus
      ↻ 重复节点，计数: 3

   节点 35: x is vevzpus and wannpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qihtpus → qihtpus is vevzpus and wannpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is qihtpus
  - 前提: qihtpus is cezbpus
  - 前提: cezbpus is jukvpus
  - 前提: jukvpus is kovlpus
  - 前提: kovlpus is sundpus
  - 前提: sundpus is vevzpus and wannpus
  ✓ 点亮LoG节点: x is vevzpus
[子树点亮]     └─ 点亮依赖节点: jukvpus is vevzpus (深度4)
[子树点亮]     └─ 点亮依赖节点: sundpus is vevzpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 36: vevzpus is sufwpus
      ↻ 重复节点，计数: 3

   节点 37: x is sufwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qihtpus → qihtpus is sufwpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is qihtpus
  - 前提: qihtpus is cezbpus
  - 前提: cezbpus is jukvpus
  - 前提: jukvpus is kovlpus
  - 前提: kovlpus is sundpus
  - 前提: sundpus is vevzpus and wannpus
  - 前提: vevzpus is sufwpus

   节点 38: sufwpus is camzpus and liffpus
      ↻ 重复节点，计数: 3

   节点 39: x is camzpus and liffpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qihtpus → qihtpus is camzpus and liffpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is qihtpus
  - 前提: qihtpus is cezbpus
  - 前提: cezbpus is jukvpus
  - 前提: jukvpus is kovlpus
  - 前提: kovlpus is sundpus
  - 前提: sundpus is vevzpus and wannpus
  - 前提: vevzpus is sufwpus
  - 前提: sufwpus is camzpus and liffpus
  ✓ 点亮LoG节点: vevzpus is camzpus
[子树点亮]     └─ 点亮依赖节点: vevzpus is camzpus and liffpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 40: camzpus is zopnpus
      ↻ 重复节点，计数: 3

   节点 41: x is zopnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qihtpus → qihtpus is zopnpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is qihtpus
  - 前提: qihtpus is cezbpus
  - 前提: cezbpus is jukvpus
  - 前提: jukvpus is kovlpus
  - 前提: kovlpus is sundpus
  - 前提: sundpus is vevzpus and wannpus
  - 前提: vevzpus is sufwpus
  - 前提: sufwpus is camzpus and liffpus
  - 前提: camzpus is zopnpus

   节点 42: zopnpus is kiqspus and wofdpus
      ↻ 重复节点，计数: 3

   节点 43: x is kiqspus and wofdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qihtpus → qihtpus is kiqspus and wofdpus
[后处理] 基于推理轨迹点亮节点，使用了 10 个前提条件:
  - 前提: x is qihtpus
  - 前提: qihtpus is cezbpus
  - 前提: cezbpus is jukvpus
  - 前提: jukvpus is kovlpus
  - 前提: kovlpus is sundpus
  - 前提: sundpus is vevzpus and wannpus
  - 前提: vevzpus is sufwpus
  - 前提: sufwpus is camzpus and liffpus
  - 前提: camzpus is zopnpus
  - 前提: zopnpus is kiqspus and wofdpus
  ✓ 点亮LoG节点: x is kiqspus
[子树点亮]     └─ 点亮依赖节点: vevzpus is kiqspus (深度3)
[子树点亮]     └─ 点亮依赖节点: camzpus is kiqspus (深度4)
[子树点亮]     └─ 点亮依赖节点: camzpus is kiqspus and wofdpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 44: kiqspus is culmpus
      ↻ 重复节点，计数: 3

   节点 45: x is culmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qihtpus → qihtpus is culmpus
[后处理] 基于推理轨迹点亮节点，使用了 11 个前提条件:
  - 前提: x is qihtpus
  - 前提: qihtpus is cezbpus
  - 前提: cezbpus is jukvpus
  - 前提: jukvpus is kovlpus
  - 前提: kovlpus is sundpus
  - 前提: sundpus is vevzpus and wannpus
  - 前提: vevzpus is sufwpus
  - 前提: sufwpus is camzpus and liffpus
  - 前提: camzpus is zopnpus
  - 前提: zopnpus is kiqspus and wofdpus
  - 前提: kiqspus is culmpus

   节点 46: culmpus is vigzpus
      ↻ 重复节点，计数: 3

   节点 47: x is vigzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qihtpus → qihtpus is vigzpus
[后处理] 基于推理轨迹点亮节点，使用了 12 个前提条件:
  - 前提: x is qihtpus
  - 前提: qihtpus is cezbpus
  - 前提: cezbpus is jukvpus
  - 前提: jukvpus is kovlpus
  - 前提: kovlpus is sundpus
  - 前提: sundpus is vevzpus and wannpus
  - 前提: vevzpus is sufwpus
  - 前提: sufwpus is camzpus and liffpus
  - 前提: camzpus is zopnpus
  - 前提: zopnpus is kiqspus and wofdpus
  - 前提: kiqspus is culmpus
  - 前提: culmpus is vigzpus
  ✓ 点亮LoG节点: kiqspus is vigzpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 48: vigzpus is ceqbpus
      ↻ 重复节点，计数: 3

   节点 49: x is ceqbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qihtpus → qihtpus is ceqbpus
[后处理] 基于推理轨迹点亮节点，使用了 13 个前提条件:
  - 前提: x is qihtpus
  - 前提: qihtpus is cezbpus
  - 前提: cezbpus is jukvpus
  - 前提: jukvpus is kovlpus
  - 前提: kovlpus is sundpus
  - 前提: sundpus is vevzpus and wannpus
  - 前提: vevzpus is sufwpus
  - 前提: sufwpus is camzpus and liffpus
  - 前提: camzpus is zopnpus
  - 前提: zopnpus is kiqspus and wofdpus
  - 前提: kiqspus is culmpus
  - 前提: culmpus is vigzpus
  - 前提: vigzpus is ceqbpus

   节点 50: ceqbpus is nexdpus and zuqwpus
      ↻ 重复节点，计数: 3

   节点 51: x is nexdpus and zuqwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qihtpus → qihtpus is nexdpus and zuqwpus
[后处理] 基于推理轨迹点亮节点，使用了 14 个前提条件:
  - 前提: x is qihtpus
  - 前提: qihtpus is cezbpus
  - 前提: cezbpus is jukvpus
  - 前提: jukvpus is kovlpus
  - 前提: kovlpus is sundpus
  - 前提: sundpus is vevzpus and wannpus
  - 前提: vevzpus is sufwpus
  - 前提: sufwpus is camzpus and liffpus
  - 前提: camzpus is zopnpus
  - 前提: zopnpus is kiqspus and wofdpus
  - 前提: kiqspus is culmpus
  - 前提: culmpus is vigzpus
  - 前提: vigzpus is ceqbpus
  - 前提: ceqbpus is nexdpus and zuqwpus
  ✓ 点亮LoG节点: kiqspus is nexdpus
[子树点亮]     └─ 点亮依赖节点: kiqspus is nexdpus and zuqwpus (深度4)
[子树点亮]     └─ 点亮依赖节点: vigzpus is nexdpus and zuqwpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 52: nexdpus is jorvpus
      ↻ 重复节点，计数: 4

   节点 53: nexdpus is hovlpus and bijrpus
      ↻ 重复节点，计数: 4

   节点 54: x is nexdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is nexdpus and zuqwpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is nexdpus and zuqwpus

   节点 55: x is jorvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qihtpus → qihtpus is jorvpus
[后处理] 基于推理轨迹点亮节点，使用了 15 个前提条件:
  - 前提: x is qihtpus
  - 前提: qihtpus is cezbpus
  - 前提: cezbpus is jukvpus
  - 前提: jukvpus is kovlpus
  - 前提: kovlpus is sundpus
  - 前提: sundpus is vevzpus and wannpus
  - 前提: vevzpus is sufwpus
  - 前提: sufwpus is camzpus and liffpus
  - 前提: camzpus is zopnpus
  - 前提: zopnpus is kiqspus and wofdpus
  - 前提: kiqspus is culmpus
  - 前提: culmpus is vigzpus
  - 前提: vigzpus is ceqbpus
  - 前提: ceqbpus is nexdpus and zuqwpus
  - 前提: nexdpus is jorvpus

   节点 56: jorvpus is babcpus and xugqpus
      ↻ 重复节点，计数: 3

   节点 57: x is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qihtpus → qihtpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 16 个前提条件:
  - 前提: x is qihtpus
  - 前提: qihtpus is cezbpus
  - 前提: cezbpus is jukvpus
  - 前提: jukvpus is kovlpus
  - 前提: kovlpus is sundpus
  - 前提: sundpus is vevzpus and wannpus
  - 前提: vevzpus is sufwpus
  - 前提: sufwpus is camzpus and liffpus
  - 前提: camzpus is zopnpus
  - 前提: zopnpus is kiqspus and wofdpus
  - 前提: kiqspus is culmpus
  - 前提: culmpus is vigzpus
  - 前提: vigzpus is ceqbpus
  - 前提: ceqbpus is nexdpus and zuqwpus
  - 前提: nexdpus is jorvpus
  - 前提: jorvpus is babcpus and xugqpus
  ✓ 点亮LoG节点: nexdpus is babcpus
[子树点亮]     └─ 点亮依赖节点: nexdpus is babcpus and xugqpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 58: x is babcpus
      ↻ 重复节点，计数: 2

   节点 59: x is nexdpus
      ↻ 重复节点，计数: 2

   节点 60: nexdpus is hovlpus and bijrpus
      ↻ 重复节点，计数: 5

   节点 61: x is hovlpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qihtpus → qihtpus is hovlpus
[后处理] 基于推理轨迹点亮节点，使用了 15 个前提条件:
  - 前提: x is qihtpus
  - 前提: qihtpus is cezbpus
  - 前提: cezbpus is jukvpus
  - 前提: jukvpus is kovlpus
  - 前提: kovlpus is sundpus
  - 前提: sundpus is vevzpus and wannpus
  - 前提: vevzpus is sufwpus
  - 前提: sufwpus is camzpus and liffpus
  - 前提: camzpus is zopnpus
  - 前提: zopnpus is kiqspus and wofdpus
  - 前提: kiqspus is culmpus
  - 前提: culmpus is vigzpus
  - 前提: vigzpus is ceqbpus
  - 前提: ceqbpus is nexdpus and zuqwpus
  - 前提: nexdpus is hovlpus and bijrpus
  ✓ 点亮LoG节点: nexdpus is hovlpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 62: hovlpus is babrpus and biyzpus
      ↻ 重复节点，计数: 3

   节点 63: x is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qihtpus → qihtpus is babrpus
[后处理] 基于推理轨迹点亮节点，使用了 16 个前提条件:
  - 前提: x is qihtpus
  - 前提: qihtpus is cezbpus
  - 前提: cezbpus is jukvpus
  - 前提: jukvpus is kovlpus
  - 前提: kovlpus is sundpus
  - 前提: sundpus is vevzpus and wannpus
  - 前提: vevzpus is sufwpus
  - 前提: sufwpus is camzpus and liffpus
  - 前提: camzpus is zopnpus
  - 前提: zopnpus is kiqspus and wofdpus
  - 前提: kiqspus is culmpus
  - 前提: culmpus is vigzpus
  - 前提: vigzpus is ceqbpus
  - 前提: ceqbpus is nexdpus and zuqwpus
  - 前提: nexdpus is hovlpus and bijrpus
  - 前提: hovlpus is babrpus and biyzpus
  ✓ 点亮LoG节点: nexdpus is babrpus
[子树点亮]     └─ 点亮依赖节点: hovlpus is babrpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 64: x is babcpus and babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus and babrpus
[子树点亮]     └─ 点亮依赖节点: kiqspus is babcpus and babrpus (深度2)
[子树点亮]     └─ 点亮依赖节点: nexdpus is babcpus and babrpus (深度3)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 65: x is nexdpus
      ↻ 重复节点，计数: 3

   节点 66: nexdpus is jorvpus and hovlpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: nexdpus is jorvpus → nexdpus is hovlpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: nexdpus is jorvpus
  - 前提: nexdpus is hovlpus and bijrpus

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 66
   - 新增节点: 22
   - 更新已存在节点: 44
   - 点亮的LoG节点: 25

🎯 推理质量统计:
   - 完美推理: 22 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 25节点, 18前提, 复杂度1-18

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 40
   - 前提节点: 18
   - 推理节点: 22
   - 幻觉节点: 0
   - 点亮LoG节点: 25

✅ 推理节点详情:
   🟢 x is qihtpus (出现2次, 质量:perfect)
   🟢 x is yiygpus (出现1次, 质量:perfect)
   🟢 x is cezbpus (出现1次, 质量:perfect)
   🟢 x is jukvpus (出现1次, 质量:perfect)
   🟢 x is kovlpus (出现1次, 质量:perfect)
   🟢 x is sundpus (出现1次, 质量:perfect)
   🟢 x is vevzpus and wannpus (出现1次, 质量:perfect)
   🟢 x is sufwpus (出现1次, 质量:perfect)
   🟢 x is camzpus and liffpus (出现1次, 质量:perfect)
   🟢 x is zopnpus (出现1次, 质量:perfect)
   🟢 x is kiqspus and wofdpus (出现1次, 质量:perfect)
   🟢 x is culmpus (出现1次, 质量:perfect)
   🟢 x is vigzpus (出现1次, 质量:perfect)
   🟢 x is ceqbpus (出现1次, 质量:perfect)
   🟢 x is nexdpus and zuqwpus (出现1次, 质量:perfect)
   🟢 x is nexdpus (出现3次, 质量:perfect)
   🟢 x is jorvpus (出现1次, 质量:perfect)
   🟢 x is babcpus (出现2次, 质量:perfect)
   🟢 x is hovlpus (出现1次, 质量:perfect)
   🟢 x is babrpus (出现1次, 质量:perfect)
   🟢 x is babcpus and babrpus (出现1次, 质量:perfect)
   🟢 nexdpus is jorvpus and hovlpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - kiqspus is babcpus and babrpus
   - qihtpus is jukvpus
   - kiqspus is nexdpus
   - x is kiqspus
   - nexdpus is babcpus and babrpus
   - kiqspus is vigzpus
   - vevzpus is kiqspus
   - nexdpus is babrpus
   - jukvpus is sundpus
   - vevzpus is camzpus
   - nexdpus is babcpus and xugqpus
   - x is babcpus and babrpus
   - x is vevzpus
   - hovlpus is babrpus
   - camzpus is kiqspus
   - nexdpus is babcpus
   - x is qihtpus
   - jukvpus is vevzpus
   - x is jukvpus
   - kiqspus is nexdpus and zuqwpus
   - vevzpus is camzpus and liffpus
   - sundpus is vevzpus
   - vigzpus is nexdpus and zuqwpus
   - camzpus is kiqspus and wofdpus
   - nexdpus is hovlpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus and babrpus (第5层)
   节点Coverage: 25/25 = 100.00%
   前提条件Coverage: 18/18 = 100.00%
   各推理层点亮比例:
     第1层: 11/11 = 100.00%
     第2层: 7/7 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/22 = 0.00%
   可推导节点: 22/22
   Strict Error Rate: 0/22 = 0.00%
   严格有效节点: 22/22

   详细分析:
     完美推理: 22 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 44/50
================================================================================
记录索引: 43
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_43.json
✅ 使用缓存结果:
   - 句子数: 295
   - 提取的语句数: 486
   - 初始条件数: 12

=== Statement提取完成 ===
总句子数: 295
成功提取: 295
失败提取: 0
总statements数: 486

=== 开始清洗Statement格式 ===
原始statements数: 486
清洗后statements数: 266
过滤掉的statements数: 220
清洗后的statements:
  1. [planning] x is babcpus
  2. [actual] x is fekspus
  3. [actual] x is fekspus
  4. [planning] fekspus is babcpus
  5. [actual] yivvpus is hodwpus
  6. [actual] yivvpus is zaszpus and jaffpus
  7. [planning] yivvpus is zaszpus and jaffpus
  8. [actual] yivvpus is zaszpus and jaffpus
  9. [planning] yivvpus is zaszpus
  10. [planning] yivvpus is jaffpus
  11. [planning] zaszpus is yivvpus
  12. [planning] jaffpus is yivvpus
  13. [actual] yivvpus is hodwpus
  14. [actual] yivvpus is zaszpus and jaffpus
  15. [actual] cuflpus is pezmpus
  16. [actual] millpus is yuxgpus
  17. [actual] cuflpus is xerppus and midcpus
  18. [actual] zaszpus is riwspus
  19. [actual] riwspus is millpus
  20. [actual] fekspus is yivvpus and riyqpus
  21. [actual] yuxgpus is cuflpus
  22. [actual] x is fekspus
  23. [actual] pezmpus is babcpus
  24. [actual] hodwpus is xaphpus
  25. [planning] x is babcpus
  26. [planning] fekspus is babcpus
  27. [actual] fekspus is yivvpus and riyqpus
  28. [actual] yivvpus is hodwpus
  29. [actual] hodwpus is xaphpus
  30. [actual] yivvpus is zaszpus and jaffpus
  31. [actual] zaszpus is riwspus
  32. [actual] riwspus is millpus
  33. [actual] millpus is yuxgpus
  34. [actual] yuxgpus is cuflpus
  35. [actual] cuflpus is pezmpus
  36. [actual] pezmpus is babcpus
  37. [actual] yivvpus is riwspus
  38. [actual] yivvpus is zaszpus and jaffpus
  39. [planning] yivvpus is a member of zaszpus
  40. [planning] yivvpus is a member of jaffpus
  41. [planning] yivvpus is babgpus
  42. [actual] cuflpus is xerppus and midcpus
  43. [actual] zaszpus is riwspus
  44. [planning] zaszpus is a member of riwspus
  45. [planning] riwspus is a category of categories or something
  46. [actual] riwspus is millpus
  47. [actual] riwspus is a member of millpus
  48. [actual] millpus is yuxgpus
  49. [actual] yuxgpus is cuflpus
  50. [actual] yuxgpus is a member of cuflpus
  51. [actual] cuflpus is pezmpus
  52. [actual] pezmpus is babcpus
  53. [actual] pezmpus is a member of babcpus
  54. [actual] babcpus is a category
  55. [actual] yivvpus is hodwpus and jaffpus
  56. [actual] fekspus is yivvpus and riyqpus
  57. [planning] fekspus is a member of yivvpus
  58. [planning] fekspus is a member of riyqpus
  59. [planning] yivvpus is a category
  60. [planning] fekspus is a member of yivvpus
  61. [planning] fekspus is an instance of the category yivvpus
  62. [planning] yivvpus is a category
  63. [planning] yivvpus is a member of other categories
  64. [planning] yivvpus is both a category and a member of other categories
  65. [planning] x is babcpus
  66. [actual] x is fekspus
  67. [actual] fekspus is yivvpus
  68. [actual] yivvpus is zaszpus
  69. [actual] riwspus is millpus
  70. [actual] millpus is yuxgpus
  71. [actual] yuxgpus is cuflpus
  72. [actual] cuflpus is pezmpus
  73. [actual] pezmpus is babcpus
  74. [planning] fekspus is babcpus
  75. [actual] yivvpus is hodwpus
  76. [planning] yivvpus is a subset of hodwpus
  77. [planning] hodwpus is a superset
  78. [planning] hodwpus is xaphpus
  79. [planning] hodwpus is a subset of xaphpus
  80. [actual] yivvpus is zaszpus and jaffpus
  81. [actual] yivvpus is a subset of zaszpus
  82. [actual] yivvpus is a subset of jaffpus
  83. [planning] yivvpus is a subset of zaszpus and subset of jaffpus
  84. [actual] zaszpus is an element of riwspus
  85. [planning] yivvpus is a subset of zaszpus and zaszpus is an element of riwspus
  86. [planning] x is babcpus
  87. [actual] yivvpus is hodwpus
  88. [actual] hodwpus is xaphpus
  89. [actual] yivvpus is xaphpus
  90. [planning] yivvpus is hodwpus
  91. [planning] hodwpus is xaphpus
  92. [planning] yivvpus is xaphpus
  93. [actual] pezmpus is babcpus
  94. [planning] pezmpus is babcpus
  95. [actual] cuflpus is pezmpus
  96. [planning] cuflpus is babcpus
  97. [actual] fekspus is yivvpus and riyqpus
  98. [planning] fekspus is a subset of yivvpus
  99. [planning] fekspus is a subset of riyqpus
  100. [planning] yivvpus is a subset of other things
  101. [actual] x is fekspus
  102. [planning] x is fekspus
  103. [planning] x is subset fekspus
  104. [planning] x is an instance
  105. [planning] x is an element
  106. [planning] x is babcpus
  107. [actual] x is babcpus
  108. [actual] x is babcpus
  109. [actual] x is fekspus
  110. [planning] x is babcpus
  111. [planning] x is babcpus
  112. [planning] x is babcpus
  113. [planning] x is babcpus
  114. [planning] x is fekspus
  115. [actual] yivvpus is hodwpus
  116. [actual] yivvpus is zaszpus
  117. [actual] zaszpus is a category that contains yivvpus
  118. [actual] zaszpus is riwspus
  119. [actual] riwspus is a category that contains the category zaszpus
  120. [actual] riwspus is a category of categories
  121. [actual] millpus is a category
  122. [actual] millpus is a category of categories
  123. [planning] millpus is a category of categories of categories
  124. [planning] x is babcpus
  125. [actual] x is fekspus
  126. [actual] fekspus is yivvpus
  127. [actual] yivvpus is zaszpus
  128. [actual] zaszpus is a set
  129. [actual] yivvpus is an element of zaszpus
  130. [actual] fekspus is an element of yivvpus
  131. [planning] fekspus is zaszpus
  132. [actual] fekspus is yivvpus
  133. [actual] yivvpus is zaszpus
  134. [planning] fekspus is zaszpus
  135. [planning] x is babcpus
  136. [planning] x is babcpus
  137. [planning] hodwpus is yivvpus
  138. [actual] yivvpus is hodwpus
  139. [actual] yivvpus is zaszpus
  140. [actual] yivvpus is zaszpus
  141. [actual] yivvpus is jaffpus
  142. [actual] cuflpus is pezmpus
  143. [actual] millpus is yuxgpus
  144. [planning] xerppus is cuflpus
  145. [actual] cuflpus is xerppus
  146. [actual] cuflpus is midcpus
  147. [actual] zaszpus is riwspus
  148. [actual] zaszpus is riwspus
  149. [actual] riwspus is millpus
  150. [actual] fekspus is yivvpus
  151. [actual] fekspus is riyqpus
  152. [actual] fekspus is riyqpus
  153. [actual] yuxgpus is cuflpus
  154. [planning] pezmpus is babcpus
  155. [actual] pezmpus is babcpus
  156. [actual] pezmpus is babcpus
  157. [actual] hodwpus is xaphpus
  158. [planning] x is fekspus
  159. [actual] x is fekspus
  160. [planning] x is babcpus
  161. [planning] x is babcpus
  162. [actual] fekspus is yivvpus
  163. [actual] yivvpus is zaszpus
  164. [actual] riwspus is millpus
  165. [actual] millpus is yuxgpus
  166. [actual] yuxgpus is cuflpus
  167. [actual] cuflpus is pezmpus
  168. [actual] pezmpus is babcpus
  169. [actual] cuflpus is an element of pezmpus
  170. [actual] pezmpus is a set that contains cuflpus
  171. [actual] x is a direct member of babcpus or a member of a member
  172. [planning] x is babcpus
  173. [actual] fekspus is riyqpus
  174. [actual] yivvpus is hodwpus
  175. [actual] yivvpus is jaffpus
  176. [actual] hodwpus is xaphpus
  177. [planning] xaphpus is babcpus
  178. [actual] millpus is yuxgpus
  179. [actual] yuxgpus is cuflpus
  180. [actual] yivvpus is hodwpus
  181. [actual] yivvpus is subset of zaszpus
  182. [actual] yivvpus is subset of jaffpus
  183. [planning] yivvpus is subset of zaszpus and jaffpus
  184. [actual] cuflpus is pezmpus
  185. [actual] millpus is yuxgpus
  186. [actual] cuflpus is xerppus
  187. [actual] cuflpus is midcpus
  188. [actual] riwspus is millpus
  189. [actual] fekspus is yivvpus
  190. [actual] fekspus is riyqpus
  191. [actual] yuxgpus is cuflpus
  192. [actual] x is fekspus
  193. [planning] x is fekspus
  194. [planning] x is a set
  195. [planning] x is babcpus
  196. [planning] x is an individual
  197. [actual] fekspus is yivvpus
  198. [actual] yivvpus is zaszpus
  199. [actual] riwspus is millpus
  200. [actual] millpus is yuxgpus
  201. [actual] yuxgpus is cuflpus
  202. [actual] cuflpus is pezmpus
  203. [actual] pezmpus is babcpus
  204. [actual] x is babcpus
  205. [planning] x is babcpus
  206. [actual] x is fekspus
  207. [actual] fekspus is yivvpus
  208. [actual] yivvpus is zaszpus and jaffpus
  209. [planning] yivvpus is zaszpus
  210. [planning] yivvpus is jaffpus
  211. [planning] zaszpus is superset of yivvpus
  212. [planning] jaffpus is superset of yivvpus
  213. [actual] fekspus is yivvpus and riyqpus
  214. [planning] x is fekspus
  215. [planning] x is an individual
  216. [planning] x is an element
  217. [planning] x is a set itself
  218. [planning] x is babcpus
  219. [planning] x is fekspus
  220. [actual] yuxgpus is cuflpus
  221. [planning] yuxgpus is cuflpus
  222. [actual] millpus is yuxgpus
  223. [planning] millpus is yuxgpus
  224. [actual] riwspus is millpus
  225. [actual] zaszpus is riwspus
  226. [actual] yivvpus is zaszpus
  227. [actual] yivvpus is zaszpus
  228. [actual] zaszpus is riwspus
  229. [actual] riwspus is millpus
  230. [actual] millpus is yuxgpus
  231. [actual] yuxgpus is cuflpus
  232. [actual] cuflpus is pezmpus
  233. [actual] pezmpus is babcpus
  234. [actual] yivvpus is babcpus
  235. [actual] x is babcpus
  236. [planning] x is babcpus
  237. [actual] yivvpus is zaszpus and jaffpus
  238. [planning] yivvpus is a member of both zaszpus and jaffpus
  239. [planning] yivvpus is a subset of both
  240. [planning] x is babcpus
  241. [actual] riwspus is millpus
  242. [actual] millpus is yuxgpus
  243. [planning] riwspus is millpus
  244. [planning] millpus is yuxgpus
  245. [planning] riwspus is millpus
  246. [planning] millpus is yuxgpus
  247. [planning] riwspus is millpus
  248. [planning] millpus is yuxgpus
  249. [planning] riwspus is millpus
  250. [actual] yuxgpus is cuflpus
  251. [actual] fekspus is yivvpus and riyqpus
  252. [actual] yivvpus is zaszpus
  253. [actual] x is babcpus
  254. [actual] yivvpus is zaszpus
  255. [actual] zaszpus is riwspus
  256. [actual] riwspus is millpus
  257. [actual] millpus is yuxgpus
  258. [actual] yuxgpus is cuflpus
  259. [actual] cuflpus is pezmpus
  260. [actual] pezmpus is babcpus
  261. [actual] yivvpus is babcpus
  262. [actual] fekspus is yivvpus
  263. [actual] fekspus is babcpus
  264. [actual] x is fekspus->x ⊆ fekspus
  265. [actual] x is babcpus
  266. [actual] x is babcpus

=== 开始标准化和解析节点 ===
清洗后statements数: 266
标准化后节点数: 211
过滤掉的无效实体数: 55
标准化后的节点:
  1. [planning] x → babcpus (原始: x is babcpus)
  2. [actual] x → fekspus (原始: x is fekspus)
  3. [actual] x → fekspus (原始: x is fekspus)
  4. [planning] fekspus → babcpus (原始: fekspus is babcpus)
  5. [actual] yivvpus → hodwpus (原始: yivvpus is hodwpus)
  6. [actual] yivvpus → zaszpus and jaffpus (原始: yivvpus is zaszpus and jaffpus)
  7. [planning] yivvpus → zaszpus and jaffpus (原始: yivvpus is zaszpus and jaffpus)
  8. [actual] yivvpus → zaszpus and jaffpus (原始: yivvpus is zaszpus and jaffpus)
  9. [planning] yivvpus → zaszpus (原始: yivvpus is zaszpus)
  10. [planning] yivvpus → jaffpus (原始: yivvpus is jaffpus)
  11. [planning] zaszpus → yivvpus (原始: zaszpus is yivvpus)
  12. [planning] jaffpus → yivvpus (原始: jaffpus is yivvpus)
  13. [actual] yivvpus → hodwpus (原始: yivvpus is hodwpus)
  14. [actual] yivvpus → zaszpus and jaffpus (原始: yivvpus is zaszpus and jaffpus)
  15. [actual] cuflpus → pezmpus (原始: cuflpus is pezmpus)
  16. [actual] millpus → yuxgpus (原始: millpus is yuxgpus)
  17. [actual] cuflpus → xerppus and midcpus (原始: cuflpus is xerppus and midcpus)
  18. [actual] zaszpus → riwspus (原始: zaszpus is riwspus)
  19. [actual] riwspus → millpus (原始: riwspus is millpus)
  20. [actual] fekspus → yivvpus and riyqpus (原始: fekspus is yivvpus and riyqpus)
  21. [actual] yuxgpus → cuflpus (原始: yuxgpus is cuflpus)
  22. [actual] x → fekspus (原始: x is fekspus)
  23. [actual] pezmpus → babcpus (原始: pezmpus is babcpus)
  24. [actual] hodwpus → xaphpus (原始: hodwpus is xaphpus)
  25. [planning] x → babcpus (原始: x is babcpus)
  26. [planning] fekspus → babcpus (原始: fekspus is babcpus)
  27. [actual] fekspus → yivvpus and riyqpus (原始: fekspus is yivvpus and riyqpus)
  28. [actual] yivvpus → hodwpus (原始: yivvpus is hodwpus)
  29. [actual] hodwpus → xaphpus (原始: hodwpus is xaphpus)
  30. [actual] yivvpus → zaszpus and jaffpus (原始: yivvpus is zaszpus and jaffpus)
  31. [actual] zaszpus → riwspus (原始: zaszpus is riwspus)
  32. [actual] riwspus → millpus (原始: riwspus is millpus)
  33. [actual] millpus → yuxgpus (原始: millpus is yuxgpus)
  34. [actual] yuxgpus → cuflpus (原始: yuxgpus is cuflpus)
  35. [actual] cuflpus → pezmpus (原始: cuflpus is pezmpus)
  36. [actual] pezmpus → babcpus (原始: pezmpus is babcpus)
  37. [actual] yivvpus → riwspus (原始: yivvpus is riwspus)
  38. [actual] yivvpus → zaszpus and jaffpus (原始: yivvpus is zaszpus and jaffpus)
  39. [planning] yivvpus → babgpus (原始: yivvpus is babgpus)
  40. [actual] cuflpus → xerppus and midcpus (原始: cuflpus is xerppus and midcpus)
  41. [actual] zaszpus → riwspus (原始: zaszpus is riwspus)
  42. [actual] riwspus → millpus (原始: riwspus is millpus)
  43. [actual] millpus → yuxgpus (原始: millpus is yuxgpus)
  44. [actual] yuxgpus → cuflpus (原始: yuxgpus is cuflpus)
  45. [actual] cuflpus → pezmpus (原始: cuflpus is pezmpus)
  46. [actual] pezmpus → babcpus (原始: pezmpus is babcpus)
  47. [actual] yivvpus → hodwpus and jaffpus (原始: yivvpus is hodwpus and jaffpus)
  48. [actual] fekspus → yivvpus and riyqpus (原始: fekspus is yivvpus and riyqpus)
  49. [planning] x → babcpus (原始: x is babcpus)
  50. [actual] x → fekspus (原始: x is fekspus)
  51. [actual] fekspus → yivvpus (原始: fekspus is yivvpus)
  52. [actual] yivvpus → zaszpus (原始: yivvpus is zaszpus)
  53. [actual] riwspus → millpus (原始: riwspus is millpus)
  54. [actual] millpus → yuxgpus (原始: millpus is yuxgpus)
  55. [actual] yuxgpus → cuflpus (原始: yuxgpus is cuflpus)
  56. [actual] cuflpus → pezmpus (原始: cuflpus is pezmpus)
  57. [actual] pezmpus → babcpus (原始: pezmpus is babcpus)
  58. [planning] fekspus → babcpus (原始: fekspus is babcpus)
  59. [actual] yivvpus → hodwpus (原始: yivvpus is hodwpus)
  60. [planning] hodwpus → xaphpus (原始: hodwpus is xaphpus)
  61. [actual] yivvpus → zaszpus and jaffpus (原始: yivvpus is zaszpus and jaffpus)
  62. [planning] x → babcpus (原始: x is babcpus)
  63. [actual] yivvpus → hodwpus (原始: yivvpus is hodwpus)
  64. [actual] hodwpus → xaphpus (原始: hodwpus is xaphpus)
  65. [actual] yivvpus → xaphpus (原始: yivvpus is xaphpus)
  66. [planning] yivvpus → hodwpus (原始: yivvpus is hodwpus)
  67. [planning] hodwpus → xaphpus (原始: hodwpus is xaphpus)
  68. [planning] yivvpus → xaphpus (原始: yivvpus is xaphpus)
  69. [actual] pezmpus → babcpus (原始: pezmpus is babcpus)
  70. [planning] pezmpus → babcpus (原始: pezmpus is babcpus)
  71. [actual] cuflpus → pezmpus (原始: cuflpus is pezmpus)
  72. [planning] cuflpus → babcpus (原始: cuflpus is babcpus)
  73. [actual] fekspus → yivvpus and riyqpus (原始: fekspus is yivvpus and riyqpus)
  74. [actual] x → fekspus (原始: x is fekspus)
  75. [planning] x → fekspus (原始: x is fekspus)
  76. [planning] x → babcpus (原始: x is babcpus)
  77. [actual] x → babcpus (原始: x is babcpus)
  78. [actual] x → babcpus (原始: x is babcpus)
  79. [actual] x → fekspus (原始: x is fekspus)
  80. [planning] x → babcpus (原始: x is babcpus)
  81. [planning] x → babcpus (原始: x is babcpus)
  82. [planning] x → babcpus (原始: x is babcpus)
  83. [planning] x → babcpus (原始: x is babcpus)
  84. [planning] x → fekspus (原始: x is fekspus)
  85. [actual] yivvpus → hodwpus (原始: yivvpus is hodwpus)
  86. [actual] yivvpus → zaszpus (原始: yivvpus is zaszpus)
  87. [actual] zaszpus → riwspus (原始: zaszpus is riwspus)
  88. [planning] x → babcpus (原始: x is babcpus)
  89. [actual] x → fekspus (原始: x is fekspus)
  90. [actual] fekspus → yivvpus (原始: fekspus is yivvpus)
  91. [actual] yivvpus → zaszpus (原始: yivvpus is zaszpus)
  92. [planning] fekspus → zaszpus (原始: fekspus is zaszpus)
  93. [actual] fekspus → yivvpus (原始: fekspus is yivvpus)
  94. [actual] yivvpus → zaszpus (原始: yivvpus is zaszpus)
  95. [planning] fekspus → zaszpus (原始: fekspus is zaszpus)
  96. [planning] x → babcpus (原始: x is babcpus)
  97. [planning] x → babcpus (原始: x is babcpus)
  98. [planning] hodwpus → yivvpus (原始: hodwpus is yivvpus)
  99. [actual] yivvpus → hodwpus (原始: yivvpus is hodwpus)
  100. [actual] yivvpus → zaszpus (原始: yivvpus is zaszpus)
  101. [actual] yivvpus → zaszpus (原始: yivvpus is zaszpus)
  102. [actual] yivvpus → jaffpus (原始: yivvpus is jaffpus)
  103. [actual] cuflpus → pezmpus (原始: cuflpus is pezmpus)
  104. [actual] millpus → yuxgpus (原始: millpus is yuxgpus)
  105. [planning] xerppus → cuflpus (原始: xerppus is cuflpus)
  106. [actual] cuflpus → xerppus (原始: cuflpus is xerppus)
  107. [actual] cuflpus → midcpus (原始: cuflpus is midcpus)
  108. [actual] zaszpus → riwspus (原始: zaszpus is riwspus)
  109. [actual] zaszpus → riwspus (原始: zaszpus is riwspus)
  110. [actual] riwspus → millpus (原始: riwspus is millpus)
  111. [actual] fekspus → yivvpus (原始: fekspus is yivvpus)
  112. [actual] fekspus → riyqpus (原始: fekspus is riyqpus)
  113. [actual] fekspus → riyqpus (原始: fekspus is riyqpus)
  114. [actual] yuxgpus → cuflpus (原始: yuxgpus is cuflpus)
  115. [planning] pezmpus → babcpus (原始: pezmpus is babcpus)
  116. [actual] pezmpus → babcpus (原始: pezmpus is babcpus)
  117. [actual] pezmpus → babcpus (原始: pezmpus is babcpus)
  118. [actual] hodwpus → xaphpus (原始: hodwpus is xaphpus)
  119. [planning] x → fekspus (原始: x is fekspus)
  120. [actual] x → fekspus (原始: x is fekspus)
  121. [planning] x → babcpus (原始: x is babcpus)
  122. [planning] x → babcpus (原始: x is babcpus)
  123. [actual] fekspus → yivvpus (原始: fekspus is yivvpus)
  124. [actual] yivvpus → zaszpus (原始: yivvpus is zaszpus)
  125. [actual] riwspus → millpus (原始: riwspus is millpus)
  126. [actual] millpus → yuxgpus (原始: millpus is yuxgpus)
  127. [actual] yuxgpus → cuflpus (原始: yuxgpus is cuflpus)
  128. [actual] cuflpus → pezmpus (原始: cuflpus is pezmpus)
  129. [actual] pezmpus → babcpus (原始: pezmpus is babcpus)
  130. [planning] x → babcpus (原始: x is babcpus)
  131. [actual] fekspus → riyqpus (原始: fekspus is riyqpus)
  132. [actual] yivvpus → hodwpus (原始: yivvpus is hodwpus)
  133. [actual] yivvpus → jaffpus (原始: yivvpus is jaffpus)
  134. [actual] hodwpus → xaphpus (原始: hodwpus is xaphpus)
  135. [planning] xaphpus → babcpus (原始: xaphpus is babcpus)
  136. [actual] millpus → yuxgpus (原始: millpus is yuxgpus)
  137. [actual] yuxgpus → cuflpus (原始: yuxgpus is cuflpus)
  138. [actual] yivvpus → hodwpus (原始: yivvpus is hodwpus)
  139. [actual] cuflpus → pezmpus (原始: cuflpus is pezmpus)
  140. [actual] millpus → yuxgpus (原始: millpus is yuxgpus)
  141. [actual] cuflpus → xerppus (原始: cuflpus is xerppus)
  142. [actual] cuflpus → midcpus (原始: cuflpus is midcpus)
  143. [actual] riwspus → millpus (原始: riwspus is millpus)
  144. [actual] fekspus → yivvpus (原始: fekspus is yivvpus)
  145. [actual] fekspus → riyqpus (原始: fekspus is riyqpus)
  146. [actual] yuxgpus → cuflpus (原始: yuxgpus is cuflpus)
  147. [actual] x → fekspus (原始: x is fekspus)
  148. [planning] x → fekspus (原始: x is fekspus)
  149. [planning] x → babcpus (原始: x is babcpus)
  150. [actual] fekspus → yivvpus (原始: fekspus is yivvpus)
  151. [actual] yivvpus → zaszpus (原始: yivvpus is zaszpus)
  152. [actual] riwspus → millpus (原始: riwspus is millpus)
  153. [actual] millpus → yuxgpus (原始: millpus is yuxgpus)
  154. [actual] yuxgpus → cuflpus (原始: yuxgpus is cuflpus)
  155. [actual] cuflpus → pezmpus (原始: cuflpus is pezmpus)
  156. [actual] pezmpus → babcpus (原始: pezmpus is babcpus)
  157. [actual] x → babcpus (原始: x is babcpus)
  158. [planning] x → babcpus (原始: x is babcpus)
  159. [actual] x → fekspus (原始: x is fekspus)
  160. [actual] fekspus → yivvpus (原始: fekspus is yivvpus)
  161. [actual] yivvpus → zaszpus and jaffpus (原始: yivvpus is zaszpus and jaffpus)
  162. [planning] yivvpus → zaszpus (原始: yivvpus is zaszpus)
  163. [planning] yivvpus → jaffpus (原始: yivvpus is jaffpus)
  164. [actual] fekspus → yivvpus and riyqpus (原始: fekspus is yivvpus and riyqpus)
  165. [planning] x → fekspus (原始: x is fekspus)
  166. [planning] x → babcpus (原始: x is babcpus)
  167. [planning] x → fekspus (原始: x is fekspus)
  168. [actual] yuxgpus → cuflpus (原始: yuxgpus is cuflpus)
  169. [planning] yuxgpus → cuflpus (原始: yuxgpus is cuflpus)
  170. [actual] millpus → yuxgpus (原始: millpus is yuxgpus)
  171. [planning] millpus → yuxgpus (原始: millpus is yuxgpus)
  172. [actual] riwspus → millpus (原始: riwspus is millpus)
  173. [actual] zaszpus → riwspus (原始: zaszpus is riwspus)
  174. [actual] yivvpus → zaszpus (原始: yivvpus is zaszpus)
  175. [actual] yivvpus → zaszpus (原始: yivvpus is zaszpus)
  176. [actual] zaszpus → riwspus (原始: zaszpus is riwspus)
  177. [actual] riwspus → millpus (原始: riwspus is millpus)
  178. [actual] millpus → yuxgpus (原始: millpus is yuxgpus)
  179. [actual] yuxgpus → cuflpus (原始: yuxgpus is cuflpus)
  180. [actual] cuflpus → pezmpus (原始: cuflpus is pezmpus)
  181. [actual] pezmpus → babcpus (原始: pezmpus is babcpus)
  182. [actual] yivvpus → babcpus (原始: yivvpus is babcpus)
  183. [actual] x → babcpus (原始: x is babcpus)
  184. [planning] x → babcpus (原始: x is babcpus)
  185. [actual] yivvpus → zaszpus and jaffpus (原始: yivvpus is zaszpus and jaffpus)
  186. [planning] x → babcpus (原始: x is babcpus)
  187. [actual] riwspus → millpus (原始: riwspus is millpus)
  188. [actual] millpus → yuxgpus (原始: millpus is yuxgpus)
  189. [planning] riwspus → millpus (原始: riwspus is millpus)
  190. [planning] millpus → yuxgpus (原始: millpus is yuxgpus)
  191. [planning] riwspus → millpus (原始: riwspus is millpus)
  192. [planning] millpus → yuxgpus (原始: millpus is yuxgpus)
  193. [planning] riwspus → millpus (原始: riwspus is millpus)
  194. [planning] millpus → yuxgpus (原始: millpus is yuxgpus)
  195. [planning] riwspus → millpus (原始: riwspus is millpus)
  196. [actual] yuxgpus → cuflpus (原始: yuxgpus is cuflpus)
  197. [actual] fekspus → yivvpus and riyqpus (原始: fekspus is yivvpus and riyqpus)
  198. [actual] yivvpus → zaszpus (原始: yivvpus is zaszpus)
  199. [actual] x → babcpus (原始: x is babcpus)
  200. [actual] yivvpus → zaszpus (原始: yivvpus is zaszpus)
  201. [actual] zaszpus → riwspus (原始: zaszpus is riwspus)
  202. [actual] riwspus → millpus (原始: riwspus is millpus)
  203. [actual] millpus → yuxgpus (原始: millpus is yuxgpus)
  204. [actual] yuxgpus → cuflpus (原始: yuxgpus is cuflpus)
  205. [actual] cuflpus → pezmpus (原始: cuflpus is pezmpus)
  206. [actual] pezmpus → babcpus (原始: pezmpus is babcpus)
  207. [actual] yivvpus → babcpus (原始: yivvpus is babcpus)
  208. [actual] fekspus → yivvpus (原始: fekspus is yivvpus)
  209. [actual] fekspus → babcpus (原始: fekspus is babcpus)
  210. [actual] x → babcpus (原始: x is babcpus)
  211. [actual] x → babcpus (原始: x is babcpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 16
[后处理] 加载LoG图，包含 16 个节点
  LoG节点 0: x is babcpus (规则: MP, 深度: 1)
  LoG节点 1: x is zaszpus (规则: CE, 深度: 2)
  LoG节点 2: zaszpus is babcpus (规则: CE, 深度: 2)
  LoG节点 3: x is zaszpus and xaphpus (规则: MP, 深度: 3)
  LoG节点 4: zaszpus is babcpus and xerppus (规则: MP, 深度: 3)
  LoG节点 5: x is yivvpus (规则: CE, 深度: 4)
  LoG节点 6: yivvpus is zaszpus and xaphpus (规则: CI, 深度: 4)
  LoG节点 7: zaszpus is cuflpus (规则: MP, 深度: 4)
  LoG节点 8: cuflpus is babcpus and xerppus (规则: CI, 深度: 4)
  LoG节点 9: x is yivvpus and riyqpus (规则: MP, 深度: 5)
  LoG节点 10: yivvpus is zaszpus (规则: CE, 深度: 5)
  LoG节点 11: yivvpus is xaphpus (规则: MP, 深度: 5)
  LoG节点 12: zaszpus is millpus (规则: MP, 深度: 5)
  LoG节点 13: millpus is cuflpus (规则: MP, 深度: 5)
  LoG节点 14: cuflpus is babcpus (规则: MP, 深度: 5)
  LoG节点 15: cuflpus is xerppus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 211
   - 初始条件数: 12
   - LoG图节点数: 16

📋 初始条件列表:
    1. yivvpus is hodwpus
    2. yivvpus is zaszpus and jaffpus
    3. cuflpus is pezmpus
    4. millpus is yuxgpus
    5. cuflpus is xerppus and midcpus
    6. zaszpus is riwspus
    7. riwspus is millpus
    8. fekspus is yivvpus and riyqpus
    9. yuxgpus is cuflpus
   10. x is fekspus
   11. pezmpus is babcpus
   12. hodwpus is xaphpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 12 个前提节点

🔍 开始处理actual节点...

   节点 1: x is fekspus
      ↻ 重复节点，计数: 2

   节点 2: x is fekspus
      ↻ 重复节点，计数: 3

   节点 3: yivvpus is hodwpus
      ↻ 重复节点，计数: 2

   节点 4: yivvpus is zaszpus and jaffpus
      ↻ 重复节点，计数: 2

   节点 5: yivvpus is zaszpus and jaffpus
      ↻ 重复节点，计数: 3

   节点 6: yivvpus is hodwpus
      ↻ 重复节点，计数: 3

   节点 7: yivvpus is zaszpus and jaffpus
      ↻ 重复节点，计数: 4

   节点 8: cuflpus is pezmpus
      ↻ 重复节点，计数: 2

   节点 9: millpus is yuxgpus
      ↻ 重复节点，计数: 2

   节点 10: cuflpus is xerppus and midcpus
      ↻ 重复节点，计数: 2

   节点 11: zaszpus is riwspus
      ↻ 重复节点，计数: 2

   节点 12: riwspus is millpus
      ↻ 重复节点，计数: 2

   节点 13: fekspus is yivvpus and riyqpus
      ↻ 重复节点，计数: 2

   节点 14: yuxgpus is cuflpus
      ↻ 重复节点，计数: 2

   节点 15: x is fekspus
      ↻ 重复节点，计数: 4

   节点 16: pezmpus is babcpus
      ↻ 重复节点，计数: 2

   节点 17: hodwpus is xaphpus
      ↻ 重复节点，计数: 2

   节点 18: fekspus is yivvpus and riyqpus
      ↻ 重复节点，计数: 3

   节点 19: yivvpus is hodwpus
      ↻ 重复节点，计数: 4

   节点 20: hodwpus is xaphpus
      ↻ 重复节点，计数: 3

   节点 21: yivvpus is zaszpus and jaffpus
      ↻ 重复节点，计数: 5

   节点 22: zaszpus is riwspus
      ↻ 重复节点，计数: 3

   节点 23: riwspus is millpus
      ↻ 重复节点，计数: 3

   节点 24: millpus is yuxgpus
      ↻ 重复节点，计数: 3

   节点 25: yuxgpus is cuflpus
      ↻ 重复节点，计数: 3

   节点 26: cuflpus is pezmpus
      ↻ 重复节点，计数: 3

   节点 27: pezmpus is babcpus
      ↻ 重复节点，计数: 3

   节点 28: yivvpus is riwspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP+CE
      📋 推理路径: MP+CE规则: yivvpus is zaszpus → zaszpus is riwspus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: yivvpus is zaszpus and jaffpus
  - 前提: zaszpus is riwspus
  ✓ 点亮LoG节点: yivvpus is zaszpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 29: yivvpus is zaszpus and jaffpus
      ↻ 重复节点，计数: 6

   节点 30: cuflpus is xerppus and midcpus
      ↻ 重复节点，计数: 3

   节点 31: zaszpus is riwspus
      ↻ 重复节点，计数: 4

   节点 32: riwspus is millpus
      ↻ 重复节点，计数: 4

   节点 33: millpus is yuxgpus
      ↻ 重复节点，计数: 4

   节点 34: yuxgpus is cuflpus
      ↻ 重复节点，计数: 4

   节点 35: cuflpus is pezmpus
      ↻ 重复节点，计数: 4

   节点 36: pezmpus is babcpus
      ↻ 重复节点，计数: 4

   节点 37: yivvpus is hodwpus and jaffpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: yivvpus is hodwpus → yivvpus is jaffpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: yivvpus is hodwpus
  - 前提: yivvpus is zaszpus and jaffpus

   节点 38: fekspus is yivvpus and riyqpus
      ↻ 重复节点，计数: 4

   节点 39: x is fekspus
      ↻ 重复节点，计数: 5

   节点 40: fekspus is yivvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: fekspus is yivvpus and riyqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: fekspus is yivvpus and riyqpus

   节点 41: yivvpus is zaszpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 42: riwspus is millpus
      ↻ 重复节点，计数: 5

   节点 43: millpus is yuxgpus
      ↻ 重复节点，计数: 5

   节点 44: yuxgpus is cuflpus
      ↻ 重复节点，计数: 5

   节点 45: cuflpus is pezmpus
      ↻ 重复节点，计数: 5

   节点 46: pezmpus is babcpus
      ↻ 重复节点，计数: 5

   节点 47: yivvpus is hodwpus
      ↻ 重复节点，计数: 5

   节点 48: yivvpus is zaszpus and jaffpus
      ↻ 重复节点，计数: 7

   节点 49: yivvpus is hodwpus
      ↻ 重复节点，计数: 6

   节点 50: hodwpus is xaphpus
      ↻ 重复节点，计数: 4

   节点 51: yivvpus is xaphpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: yivvpus is xaphpus
      ✅ 验证成功 + LoG匹配

   节点 52: pezmpus is babcpus
      ↻ 重复节点，计数: 6

   节点 53: cuflpus is pezmpus
      ↻ 重复节点，计数: 6

   节点 54: fekspus is yivvpus and riyqpus
      ↻ 重复节点，计数: 5

   节点 55: x is fekspus
      ↻ 重复节点，计数: 6

   节点 56: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: x is zaszpus (深度2)
[子树点亮]     └─ 点亮依赖节点: zaszpus is babcpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is zaszpus and xaphpus (深度3)
[子树点亮]     └─ 点亮依赖节点: zaszpus is babcpus and xerppus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is yivvpus (深度4)
[子树点亮]     └─ 点亮依赖节点: yivvpus is zaszpus and xaphpus (深度4)
[子树点亮]     └─ 点亮依赖节点: zaszpus is cuflpus (深度4)
[子树点亮]     └─ 点亮依赖节点: cuflpus is babcpus and xerppus (深度4)
[子树点亮]     └─ 点亮依赖节点: x is yivvpus and riyqpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zaszpus is millpus (深度5)
[子树点亮]     └─ 点亮依赖节点: millpus is cuflpus (深度5)
[子树点亮]     └─ 点亮依赖节点: cuflpus is babcpus (深度5)
[子树点亮]     └─ 点亮依赖节点: cuflpus is xerppus (深度5)
[后处理]   └─ 自动点亮依赖子树: 13 个节点
      ✅ 验证成功 + LoG匹配

   节点 57: x is babcpus
      ↻ 重复节点，计数: 2

   节点 58: x is fekspus
      ↻ 重复节点，计数: 7

   节点 59: yivvpus is hodwpus
      ↻ 重复节点，计数: 7

   节点 60: yivvpus is zaszpus
      ↻ 重复节点，计数: 2

   节点 61: zaszpus is riwspus
      ↻ 重复节点，计数: 5

   节点 62: x is fekspus
      ↻ 重复节点，计数: 8

   节点 63: fekspus is yivvpus
      ↻ 重复节点，计数: 2

   节点 64: yivvpus is zaszpus
      ↻ 重复节点，计数: 3

   节点 65: fekspus is yivvpus
      ↻ 重复节点，计数: 3

   节点 66: yivvpus is zaszpus
      ↻ 重复节点，计数: 4

   节点 67: yivvpus is hodwpus
      ↻ 重复节点，计数: 8

   节点 68: yivvpus is zaszpus
      ↻ 重复节点，计数: 5

   节点 69: yivvpus is zaszpus
      ↻ 重复节点，计数: 6

   节点 70: yivvpus is jaffpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yivvpus is zaszpus and jaffpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yivvpus is zaszpus and jaffpus

   节点 71: cuflpus is pezmpus
      ↻ 重复节点，计数: 7

   节点 72: millpus is yuxgpus
      ↻ 重复节点，计数: 6

   节点 73: cuflpus is xerppus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 74: cuflpus is midcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: cuflpus is xerppus and midcpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: cuflpus is xerppus and midcpus

   节点 75: zaszpus is riwspus
      ↻ 重复节点，计数: 6

   节点 76: zaszpus is riwspus
      ↻ 重复节点，计数: 7

   节点 77: riwspus is millpus
      ↻ 重复节点，计数: 6

   节点 78: fekspus is yivvpus
      ↻ 重复节点，计数: 4

   节点 79: fekspus is riyqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: fekspus is yivvpus and riyqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: fekspus is yivvpus and riyqpus

   节点 80: fekspus is riyqpus
      ↻ 重复节点，计数: 2

   节点 81: yuxgpus is cuflpus
      ↻ 重复节点，计数: 6

   节点 82: pezmpus is babcpus
      ↻ 重复节点，计数: 7

   节点 83: pezmpus is babcpus
      ↻ 重复节点，计数: 8

   节点 84: hodwpus is xaphpus
      ↻ 重复节点，计数: 5

   节点 85: x is fekspus
      ↻ 重复节点，计数: 9

   节点 86: fekspus is yivvpus
      ↻ 重复节点，计数: 5

   节点 87: yivvpus is zaszpus
      ↻ 重复节点，计数: 7

   节点 88: riwspus is millpus
      ↻ 重复节点，计数: 7

   节点 89: millpus is yuxgpus
      ↻ 重复节点，计数: 7

   节点 90: yuxgpus is cuflpus
      ↻ 重复节点，计数: 7

   节点 91: cuflpus is pezmpus
      ↻ 重复节点，计数: 8

   节点 92: pezmpus is babcpus
      ↻ 重复节点，计数: 9

   节点 93: fekspus is riyqpus
      ↻ 重复节点，计数: 3

   节点 94: yivvpus is hodwpus
      ↻ 重复节点，计数: 9

   节点 95: yivvpus is jaffpus
      ↻ 重复节点，计数: 2

   节点 96: hodwpus is xaphpus
      ↻ 重复节点，计数: 6

   节点 97: millpus is yuxgpus
      ↻ 重复节点，计数: 8

   节点 98: yuxgpus is cuflpus
      ↻ 重复节点，计数: 8

   节点 99: yivvpus is hodwpus
      ↻ 重复节点，计数: 10

   节点 100: cuflpus is pezmpus
      ↻ 重复节点，计数: 9

   节点 101: millpus is yuxgpus
      ↻ 重复节点，计数: 9

   节点 102: cuflpus is xerppus
      ↻ 重复节点，计数: 2

   节点 103: cuflpus is midcpus
      ↻ 重复节点，计数: 2

   节点 104: riwspus is millpus
      ↻ 重复节点，计数: 8

   节点 105: fekspus is yivvpus
      ↻ 重复节点，计数: 6

   节点 106: fekspus is riyqpus
      ↻ 重复节点，计数: 4

   节点 107: yuxgpus is cuflpus
      ↻ 重复节点，计数: 9

   节点 108: x is fekspus
      ↻ 重复节点，计数: 10

   节点 109: fekspus is yivvpus
      ↻ 重复节点，计数: 7

   节点 110: yivvpus is zaszpus
      ↻ 重复节点，计数: 8

   节点 111: riwspus is millpus
      ↻ 重复节点，计数: 9

   节点 112: millpus is yuxgpus
      ↻ 重复节点，计数: 10

   节点 113: yuxgpus is cuflpus
      ↻ 重复节点，计数: 10

   节点 114: cuflpus is pezmpus
      ↻ 重复节点，计数: 10

   节点 115: pezmpus is babcpus
      ↻ 重复节点，计数: 10

   节点 116: x is babcpus
      ↻ 重复节点，计数: 3

   节点 117: x is fekspus
      ↻ 重复节点，计数: 11

   节点 118: fekspus is yivvpus
      ↻ 重复节点，计数: 8

   节点 119: yivvpus is zaszpus and jaffpus
      ↻ 重复节点，计数: 8

   节点 120: fekspus is yivvpus and riyqpus
      ↻ 重复节点，计数: 6

   节点 121: yuxgpus is cuflpus
      ↻ 重复节点，计数: 11

   节点 122: millpus is yuxgpus
      ↻ 重复节点，计数: 11

   节点 123: riwspus is millpus
      ↻ 重复节点，计数: 10

   节点 124: zaszpus is riwspus
      ↻ 重复节点，计数: 8

   节点 125: yivvpus is zaszpus
      ↻ 重复节点，计数: 9

   节点 126: yivvpus is zaszpus
      ↻ 重复节点，计数: 10

   节点 127: zaszpus is riwspus
      ↻ 重复节点，计数: 9

   节点 128: riwspus is millpus
      ↻ 重复节点，计数: 11

   节点 129: millpus is yuxgpus
      ↻ 重复节点，计数: 12

   节点 130: yuxgpus is cuflpus
      ↻ 重复节点，计数: 12

   节点 131: cuflpus is pezmpus
      ↻ 重复节点，计数: 11

   节点 132: pezmpus is babcpus
      ↻ 重复节点，计数: 11

   节点 133: yivvpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: yivvpus is riwspus → riwspus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: yivvpus is riwspus
  - 前提: riwspus is millpus
  - 前提: millpus is yuxgpus
  - 前提: yuxgpus is cuflpus
  - 前提: cuflpus is pezmpus
  - 前提: pezmpus is babcpus

   节点 134: x is babcpus
      ↻ 重复节点，计数: 4

   节点 135: yivvpus is zaszpus and jaffpus
      ↻ 重复节点，计数: 9

   节点 136: riwspus is millpus
      ↻ 重复节点，计数: 12

   节点 137: millpus is yuxgpus
      ↻ 重复节点，计数: 13

   节点 138: yuxgpus is cuflpus
      ↻ 重复节点，计数: 13

   节点 139: fekspus is yivvpus and riyqpus
      ↻ 重复节点，计数: 7

   节点 140: yivvpus is zaszpus
      ↻ 重复节点，计数: 11

   节点 141: x is babcpus
      ↻ 重复节点，计数: 5

   节点 142: yivvpus is zaszpus
      ↻ 重复节点，计数: 12

   节点 143: zaszpus is riwspus
      ↻ 重复节点，计数: 10

   节点 144: riwspus is millpus
      ↻ 重复节点，计数: 13

   节点 145: millpus is yuxgpus
      ↻ 重复节点，计数: 14

   节点 146: yuxgpus is cuflpus
      ↻ 重复节点，计数: 14

   节点 147: cuflpus is pezmpus
      ↻ 重复节点，计数: 12

   节点 148: pezmpus is babcpus
      ↻ 重复节点，计数: 12

   节点 149: yivvpus is babcpus
      ↻ 重复节点，计数: 2

   节点 150: fekspus is yivvpus
      ↻ 重复节点，计数: 9

   节点 151: fekspus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: fekspus is yivvpus → yivvpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: fekspus is yivvpus
  - 前提: yivvpus is babcpus

   节点 152: x is babcpus
      ↻ 重复节点，计数: 6

   节点 153: x is babcpus
      ↻ 重复节点，计数: 7

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 153
   - 新增节点: 12
   - 更新已存在节点: 141
   - 点亮的LoG节点: 16

🎯 推理质量统计:
   - 完美推理: 12 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 16节点, 12前提, 复杂度1-12

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 24
   - 前提节点: 12
   - 推理节点: 12
   - 幻觉节点: 0
   - 点亮LoG节点: 16

✅ 推理节点详情:
   🟢 yivvpus is riwspus (出现1次, 质量:perfect)
   🟢 yivvpus is hodwpus and jaffpus (出现1次, 质量:perfect)
   🟢 fekspus is yivvpus (出现9次, 质量:perfect)
   🟢 yivvpus is zaszpus (出现12次, 质量:perfect)
   🟢 yivvpus is xaphpus (出现1次, 质量:perfect)
   🟢 x is babcpus (出现7次, 质量:perfect)
   🟢 yivvpus is jaffpus (出现2次, 质量:perfect)
   🟢 cuflpus is xerppus (出现2次, 质量:perfect)
   🟢 cuflpus is midcpus (出现2次, 质量:perfect)
   🟢 fekspus is riyqpus (出现4次, 质量:perfect)
   🟢 yivvpus is babcpus (出现2次, 质量:perfect)
   🟢 fekspus is babcpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - zaszpus is babcpus
   - x is babcpus
   - x is zaszpus
   - zaszpus is babcpus and xerppus
   - yivvpus is xaphpus
   - x is yivvpus and riyqpus
   - millpus is cuflpus
   - x is zaszpus and xaphpus
   - cuflpus is xerppus
   - zaszpus is cuflpus
   - yivvpus is zaszpus
   - yivvpus is zaszpus and xaphpus
   - cuflpus is babcpus and xerppus
   - cuflpus is babcpus
   - x is yivvpus
   - zaszpus is millpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus (第5层)
   节点Coverage: 16/16 = 100.00%
   前提条件Coverage: 12/12 = 100.00%
   各推理层点亮比例:
     第1层: 7/7 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/12 = 0.00%
   可推导节点: 12/12
   Strict Error Rate: 0/12 = 0.00%
   严格有效节点: 12/12

   详细分析:
     完美推理: 12 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 45/50
================================================================================
记录索引: 44
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_44.json
✅ 使用缓存结果:
   - 句子数: 155
   - 提取的语句数: 176
   - 初始条件数: 12

=== Statement提取完成 ===
总句子数: 155
成功提取: 155
失败提取: 0
总statements数: 176

=== 开始清洗Statement格式 ===
原始statements数: 176
清洗后statements数: 140
过滤掉的statements数: 36
清洗后的statements:
  1. [actual] kobrpus is dovrpus
  2. [actual] x is poqfpus and dawfpus
  3. [actual] boktpus is nusdpus
  4. [actual] yuxppus is babcpus
  5. [actual] poqfpus is zoslpus
  6. [actual] yeqmpus is yuxppus and gisvpus
  7. [actual] dovrpus is babrpus and mufbpus and wicppus
  8. [actual] yeqmpus is kobrpus
  9. [actual] nusdpus is yeqmpus and cicfpus
  10. [actual] zoslpus is mifjpus and xumtpus
  11. [actual] yuxppus is zohypus
  12. [actual] mifjpus is boktpus and nuwcpus
  13. [planning] x is babcpus and babrpus
  14. [planning] x is babcpus and babrpus
  15. [actual] x is poqfpus and dawfpus
  16. [actual] x is poqfpus and dawfpus
  17. [actual] poqfpus is zoslpus
  18. [actual] x is poqfpus
  19. [actual] poqfpus is zoslpus
  20. [planning] x is zoslpus
  21. [actual] kobrpus is dovrpus
  22. [actual] dovrpus is babrpus
  23. [actual] kobrpus is dovrpus
  24. [actual] dovrpus is babrpus
  25. [planning] kobrpus is babrpus
  26. [actual] yeqmpus is kobrpus
  27. [actual] kobrpus is dovrpus
  28. [actual] yeqmpus is dovrpus
  29. [planning] yeqmpus is dovrpus
  30. [actual] yeqmpus is yuxppus and gisvpus
  31. [actual] yuxppus is babcpus
  32. [actual] yeqmpus is yuxppus
  33. [actual] yeqmpus is yuxppus
  34. [actual] yuxppus is babcpus
  35. [actual] yeqmpus is babcpus
  36. [actual] yeqmpus is kobrpus
  37. [actual] yeqmpus is kobrpus
  38. [actual] kobrpus is dovrpus
  39. [actual] yeqmpus is dovrpus
  40. [actual] dovrpus is babrpus
  41. [planning] yeqmpus is babrpus
  42. [actual] dovrpus is babrpus and mufbpus and wicppus
  43. [actual] dovrpus is babrpus
  44. [planning] dovrpus is babrpus
  45. [planning] yeqmpus is dovrpus
  46. [planning] yeqmpus is babrpus
  47. [actual] x is poqfpus and dawfpus
  48. [actual] poqfpus is zoslpus
  49. [actual] zoslpus is mifjpus and xumtpus
  50. [actual] poqfpus is zoslpus
  51. [actual] zoslpus is mifjpus
  52. [planning] poqfpus is mifjpus
  53. [actual] poqfpus is xumtpus
  54. [planning] x is babcpus and babrpus
  55. [actual] babcpus is yuxppus
  56. [actual] yeqmpus is yuxppus
  57. [actual] yeqmpus is babcpus
  58. [planning] x is yuxppus
  59. [planning] x is yeqmpus
  60. [actual] x is poqfpus
  61. [actual] poqfpus is zoslpus
  62. [actual] zoslpus is mifjpus and xumtpus
  63. [actual] mifjpus is boktpus and nuwcpus
  64. [actual] boktpus is nusdpus
  65. [actual] nusdpus is yeqmpus and cicfpus
  66. [actual] yeqmpus is yuxppus and gisvpus
  67. [actual] yuxppus is babcpus
  68. [actual] x is poqfpus
  69. [actual] poqfpus is zoslpus
  70. [actual] zoslpus is mifjpus
  71. [actual] mifjpus is boktpus
  72. [actual] boktpus is nusdpus
  73. [actual] nusdpus is yeqmpus
  74. [actual] yeqmpus is yuxppus
  75. [actual] yuxppus is babcpus
  76. [actual] x is poqfpus
  77. [actual] poqfpus is zoslpus
  78. [actual] zoslpus is mifjpus
  79. [actual] mifjpus is boktpus
  80. [actual] boktpus is nusdpus
  81. [actual] nusdpus is yeqmpus
  82. [actual] yeqmpus is yuxppus
  83. [actual] yuxppus is babcpus
  84. [actual] x is babcpus
  85. [planning] x is babrpus
  86. [actual] dovrpus is babrpus
  87. [planning] x is dovrpus
  88. [planning] x is yeqmpus
  89. [planning] x is nusdpus
  90. [actual] yeqmpus is kobrpus
  91. [actual] kobrpus is dovrpus
  92. [actual] dovrpus is babrpus
  93. [actual] yeqmpus is kobrpus
  94. [actual] kobrpus is dovrpus
  95. [actual] yeqmpus is dovrpus
  96. [actual] yeqmpus is babrpus
  97. [planning] x is yeqmpus
  98. [actual] x is poqfpus
  99. [actual] poqfpus is yeqmpus
  100. [planning] x is yeqmpus
  101. [actual] poqfpus is zoslpus
  102. [actual] zoslpus is mifjpus
  103. [actual] mifjpus is boktpus
  104. [actual] boktpus is nusdpus
  105. [actual] nusdpus is yeqmpus
  106. [actual] poqfpus is zoslpus
  107. [actual] zoslpus is mifjpus
  108. [actual] poqfpus is mifjpus
  109. [planning] poqfpus is mifjpus
  110. [actual] poqfpus is mifjpus
  111. [planning] poqfpus is mifjpus
  112. [actual] poqfpus is boktpus
  113. [planning] poqfpus is boktpus
  114. [actual] mifjpus is boktpus
  115. [actual] mifjpus is boktpus
  116. [actual] poqfpus is mifjpus
  117. [actual] mifjpus is boktpus
  118. [actual] poqfpus is boktpus
  119. [actual] boktpus is nusdpus
  120. [actual] poqfpus is nusdpus
  121. [actual] nusdpus is yeqmpus
  122. [planning] poqfpus is yeqmpus
  123. [actual] x is poqfpus
  124. [actual] x is yeqmpus
  125. [planning] x is yeqmpus
  126. [actual] x is yeqmpus
  127. [actual] yeqmpus is kobrpus
  128. [actual] x is kobrpus
  129. [actual] kobrpus is dovrpus
  130. [planning] x is dovrpus
  131. [actual] dovrpus is babrpus
  132. [planning] x is babrpus
  133. [actual] x is babrpus
  134. [actual] x is babcpus and babrpus
  135. [actual] yuxppus is zohypus
  136. [actual] x is dawfpus
  137. [actual] x is yeqmpus->kobrpus->dovrpus->babrpus
  138. [actual] x is yeqmpus
  139. [actual] yeqmpus is kobrpus
  140. [actual] x is babcpus and babrpus

=== 开始标准化和解析节点 ===
清洗后statements数: 140
标准化后节点数: 140
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] kobrpus → dovrpus (原始: kobrpus is dovrpus)
  2. [actual] x → poqfpus and dawfpus (原始: x is poqfpus and dawfpus)
  3. [actual] boktpus → nusdpus (原始: boktpus is nusdpus)
  4. [actual] yuxppus → babcpus (原始: yuxppus is babcpus)
  5. [actual] poqfpus → zoslpus (原始: poqfpus is zoslpus)
  6. [actual] yeqmpus → yuxppus and gisvpus (原始: yeqmpus is yuxppus and gisvpus)
  7. [actual] dovrpus → babrpus and mufbpus and wicppus (原始: dovrpus is babrpus and mufbpus and wicppus)
  8. [actual] yeqmpus → kobrpus (原始: yeqmpus is kobrpus)
  9. [actual] nusdpus → yeqmpus and cicfpus (原始: nusdpus is yeqmpus and cicfpus)
  10. [actual] zoslpus → mifjpus and xumtpus (原始: zoslpus is mifjpus and xumtpus)
  11. [actual] yuxppus → zohypus (原始: yuxppus is zohypus)
  12. [actual] mifjpus → boktpus and nuwcpus (原始: mifjpus is boktpus and nuwcpus)
  13. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  14. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  15. [actual] x → poqfpus and dawfpus (原始: x is poqfpus and dawfpus)
  16. [actual] x → poqfpus and dawfpus (原始: x is poqfpus and dawfpus)
  17. [actual] poqfpus → zoslpus (原始: poqfpus is zoslpus)
  18. [actual] x → poqfpus (原始: x is poqfpus)
  19. [actual] poqfpus → zoslpus (原始: poqfpus is zoslpus)
  20. [planning] x → zoslpus (原始: x is zoslpus)
  21. [actual] kobrpus → dovrpus (原始: kobrpus is dovrpus)
  22. [actual] dovrpus → babrpus (原始: dovrpus is babrpus)
  23. [actual] kobrpus → dovrpus (原始: kobrpus is dovrpus)
  24. [actual] dovrpus → babrpus (原始: dovrpus is babrpus)
  25. [planning] kobrpus → babrpus (原始: kobrpus is babrpus)
  26. [actual] yeqmpus → kobrpus (原始: yeqmpus is kobrpus)
  27. [actual] kobrpus → dovrpus (原始: kobrpus is dovrpus)
  28. [actual] yeqmpus → dovrpus (原始: yeqmpus is dovrpus)
  29. [planning] yeqmpus → dovrpus (原始: yeqmpus is dovrpus)
  30. [actual] yeqmpus → yuxppus and gisvpus (原始: yeqmpus is yuxppus and gisvpus)
  31. [actual] yuxppus → babcpus (原始: yuxppus is babcpus)
  32. [actual] yeqmpus → yuxppus (原始: yeqmpus is yuxppus)
  33. [actual] yeqmpus → yuxppus (原始: yeqmpus is yuxppus)
  34. [actual] yuxppus → babcpus (原始: yuxppus is babcpus)
  35. [actual] yeqmpus → babcpus (原始: yeqmpus is babcpus)
  36. [actual] yeqmpus → kobrpus (原始: yeqmpus is kobrpus)
  37. [actual] yeqmpus → kobrpus (原始: yeqmpus is kobrpus)
  38. [actual] kobrpus → dovrpus (原始: kobrpus is dovrpus)
  39. [actual] yeqmpus → dovrpus (原始: yeqmpus is dovrpus)
  40. [actual] dovrpus → babrpus (原始: dovrpus is babrpus)
  41. [planning] yeqmpus → babrpus (原始: yeqmpus is babrpus)
  42. [actual] dovrpus → babrpus and mufbpus and wicppus (原始: dovrpus is babrpus and mufbpus and wicppus)
  43. [actual] dovrpus → babrpus (原始: dovrpus is babrpus)
  44. [planning] dovrpus → babrpus (原始: dovrpus is babrpus)
  45. [planning] yeqmpus → dovrpus (原始: yeqmpus is dovrpus)
  46. [planning] yeqmpus → babrpus (原始: yeqmpus is babrpus)
  47. [actual] x → poqfpus and dawfpus (原始: x is poqfpus and dawfpus)
  48. [actual] poqfpus → zoslpus (原始: poqfpus is zoslpus)
  49. [actual] zoslpus → mifjpus and xumtpus (原始: zoslpus is mifjpus and xumtpus)
  50. [actual] poqfpus → zoslpus (原始: poqfpus is zoslpus)
  51. [actual] zoslpus → mifjpus (原始: zoslpus is mifjpus)
  52. [planning] poqfpus → mifjpus (原始: poqfpus is mifjpus)
  53. [actual] poqfpus → xumtpus (原始: poqfpus is xumtpus)
  54. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  55. [actual] babcpus → yuxppus (原始: babcpus is yuxppus)
  56. [actual] yeqmpus → yuxppus (原始: yeqmpus is yuxppus)
  57. [actual] yeqmpus → babcpus (原始: yeqmpus is babcpus)
  58. [planning] x → yuxppus (原始: x is yuxppus)
  59. [planning] x → yeqmpus (原始: x is yeqmpus)
  60. [actual] x → poqfpus (原始: x is poqfpus)
  61. [actual] poqfpus → zoslpus (原始: poqfpus is zoslpus)
  62. [actual] zoslpus → mifjpus and xumtpus (原始: zoslpus is mifjpus and xumtpus)
  63. [actual] mifjpus → boktpus and nuwcpus (原始: mifjpus is boktpus and nuwcpus)
  64. [actual] boktpus → nusdpus (原始: boktpus is nusdpus)
  65. [actual] nusdpus → yeqmpus and cicfpus (原始: nusdpus is yeqmpus and cicfpus)
  66. [actual] yeqmpus → yuxppus and gisvpus (原始: yeqmpus is yuxppus and gisvpus)
  67. [actual] yuxppus → babcpus (原始: yuxppus is babcpus)
  68. [actual] x → poqfpus (原始: x is poqfpus)
  69. [actual] poqfpus → zoslpus (原始: poqfpus is zoslpus)
  70. [actual] zoslpus → mifjpus (原始: zoslpus is mifjpus)
  71. [actual] mifjpus → boktpus (原始: mifjpus is boktpus)
  72. [actual] boktpus → nusdpus (原始: boktpus is nusdpus)
  73. [actual] nusdpus → yeqmpus (原始: nusdpus is yeqmpus)
  74. [actual] yeqmpus → yuxppus (原始: yeqmpus is yuxppus)
  75. [actual] yuxppus → babcpus (原始: yuxppus is babcpus)
  76. [actual] x → poqfpus (原始: x is poqfpus)
  77. [actual] poqfpus → zoslpus (原始: poqfpus is zoslpus)
  78. [actual] zoslpus → mifjpus (原始: zoslpus is mifjpus)
  79. [actual] mifjpus → boktpus (原始: mifjpus is boktpus)
  80. [actual] boktpus → nusdpus (原始: boktpus is nusdpus)
  81. [actual] nusdpus → yeqmpus (原始: nusdpus is yeqmpus)
  82. [actual] yeqmpus → yuxppus (原始: yeqmpus is yuxppus)
  83. [actual] yuxppus → babcpus (原始: yuxppus is babcpus)
  84. [actual] x → babcpus (原始: x is babcpus)
  85. [planning] x → babrpus (原始: x is babrpus)
  86. [actual] dovrpus → babrpus (原始: dovrpus is babrpus)
  87. [planning] x → dovrpus (原始: x is dovrpus)
  88. [planning] x → yeqmpus (原始: x is yeqmpus)
  89. [planning] x → nusdpus (原始: x is nusdpus)
  90. [actual] yeqmpus → kobrpus (原始: yeqmpus is kobrpus)
  91. [actual] kobrpus → dovrpus (原始: kobrpus is dovrpus)
  92. [actual] dovrpus → babrpus (原始: dovrpus is babrpus)
  93. [actual] yeqmpus → kobrpus (原始: yeqmpus is kobrpus)
  94. [actual] kobrpus → dovrpus (原始: kobrpus is dovrpus)
  95. [actual] yeqmpus → dovrpus (原始: yeqmpus is dovrpus)
  96. [actual] yeqmpus → babrpus (原始: yeqmpus is babrpus)
  97. [planning] x → yeqmpus (原始: x is yeqmpus)
  98. [actual] x → poqfpus (原始: x is poqfpus)
  99. [actual] poqfpus → yeqmpus (原始: poqfpus is yeqmpus)
  100. [planning] x → yeqmpus (原始: x is yeqmpus)
  101. [actual] poqfpus → zoslpus (原始: poqfpus is zoslpus)
  102. [actual] zoslpus → mifjpus (原始: zoslpus is mifjpus)
  103. [actual] mifjpus → boktpus (原始: mifjpus is boktpus)
  104. [actual] boktpus → nusdpus (原始: boktpus is nusdpus)
  105. [actual] nusdpus → yeqmpus (原始: nusdpus is yeqmpus)
  106. [actual] poqfpus → zoslpus (原始: poqfpus is zoslpus)
  107. [actual] zoslpus → mifjpus (原始: zoslpus is mifjpus)
  108. [actual] poqfpus → mifjpus (原始: poqfpus is mifjpus)
  109. [planning] poqfpus → mifjpus (原始: poqfpus is mifjpus)
  110. [actual] poqfpus → mifjpus (原始: poqfpus is mifjpus)
  111. [planning] poqfpus → mifjpus (原始: poqfpus is mifjpus)
  112. [actual] poqfpus → boktpus (原始: poqfpus is boktpus)
  113. [planning] poqfpus → boktpus (原始: poqfpus is boktpus)
  114. [actual] mifjpus → boktpus (原始: mifjpus is boktpus)
  115. [actual] mifjpus → boktpus (原始: mifjpus is boktpus)
  116. [actual] poqfpus → mifjpus (原始: poqfpus is mifjpus)
  117. [actual] mifjpus → boktpus (原始: mifjpus is boktpus)
  118. [actual] poqfpus → boktpus (原始: poqfpus is boktpus)
  119. [actual] boktpus → nusdpus (原始: boktpus is nusdpus)
  120. [actual] poqfpus → nusdpus (原始: poqfpus is nusdpus)
  121. [actual] nusdpus → yeqmpus (原始: nusdpus is yeqmpus)
  122. [planning] poqfpus → yeqmpus (原始: poqfpus is yeqmpus)
  123. [actual] x → poqfpus (原始: x is poqfpus)
  124. [actual] x → yeqmpus (原始: x is yeqmpus)
  125. [planning] x → yeqmpus (原始: x is yeqmpus)
  126. [actual] x → yeqmpus (原始: x is yeqmpus)
  127. [actual] yeqmpus → kobrpus (原始: yeqmpus is kobrpus)
  128. [actual] x → kobrpus (原始: x is kobrpus)
  129. [actual] kobrpus → dovrpus (原始: kobrpus is dovrpus)
  130. [planning] x → dovrpus (原始: x is dovrpus)
  131. [actual] dovrpus → babrpus (原始: dovrpus is babrpus)
  132. [planning] x → babrpus (原始: x is babrpus)
  133. [actual] x → babrpus (原始: x is babrpus)
  134. [actual] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  135. [actual] yuxppus → zohypus (原始: yuxppus is zohypus)
  136. [actual] x → dawfpus (原始: x is dawfpus)
  137. [actual] x → yeqmpus->kobrpus->dovrpus->babrpus (原始: x is yeqmpus->kobrpus->dovrpus->babrpus)
  138. [actual] x → yeqmpus (原始: x is yeqmpus)
  139. [actual] yeqmpus → kobrpus (原始: yeqmpus is kobrpus)
  140. [actual] x → babcpus and babrpus (原始: x is babcpus and babrpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 19
[后处理] 加载LoG图，包含 19 个节点
  LoG节点 0: x is babcpus and babrpus (规则: MP, 深度: 1)
  LoG节点 1: x is yeqmpus (规则: MP, 深度: 2)
  LoG节点 2: yeqmpus is babcpus and babrpus (规则: CI, 深度: 2)
  LoG节点 3: x is mifjpus (规则: CE, 深度: 3)
  LoG节点 4: mifjpus is yeqmpus (规则: CE, 深度: 3)
  LoG节点 5: yeqmpus is babcpus (规则: CE, 深度: 3)
  LoG节点 6: yeqmpus is babrpus (规则: CE, 深度: 3)
  LoG节点 7: x is mifjpus and xumtpus (规则: MP, 深度: 4)
  LoG节点 8: mifjpus is yeqmpus and cicfpus (规则: MP, 深度: 4)
  LoG节点 9: yeqmpus is babcpus and zohypus (规则: MP, 深度: 4)
  LoG节点 10: yeqmpus is babrpus and mufbpus (规则: MP, 深度: 4)
  LoG节点 11: x is poqfpus (规则: CE, 深度: 5)
  LoG节点 12: poqfpus is mifjpus and xumtpus (规则: MP, 深度: 5)
  LoG节点 13: mifjpus is boktpus (规则: CE, 深度: 5)
  LoG节点 14: boktpus is yeqmpus and cicfpus (规则: MP, 深度: 5)
  LoG节点 15: yeqmpus is yuxppus (规则: CE, 深度: 5)
  LoG节点 16: yuxppus is babcpus and zohypus (规则: CI, 深度: 5)
  LoG节点 17: yeqmpus is dovrpus (规则: MP, 深度: 5)
  LoG节点 18: dovrpus is babrpus and mufbpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 140
   - 初始条件数: 12
   - LoG图节点数: 19

📋 初始条件列表:
    1. kobrpus is dovrpus
    2. x is poqfpus and dawfpus
    3. boktpus is nusdpus
    4. yuxppus is babcpus
    5. poqfpus is zoslpus
    6. yeqmpus is yuxppus and gisvpus
    7. dovrpus is babrpus and mufbpus and wicppus
    8. yeqmpus is kobrpus
    9. nusdpus is yeqmpus and cicfpus
   10. zoslpus is mifjpus and xumtpus
   11. yuxppus is zohypus
   12. mifjpus is boktpus and nuwcpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 12 个前提节点

🔍 开始处理actual节点...

   节点 1: kobrpus is dovrpus
      ↻ 重复节点，计数: 2

   节点 2: x is poqfpus and dawfpus
      ↻ 重复节点，计数: 2

   节点 3: boktpus is nusdpus
      ↻ 重复节点，计数: 2

   节点 4: yuxppus is babcpus
      ↻ 重复节点，计数: 2

   节点 5: poqfpus is zoslpus
      ↻ 重复节点，计数: 2

   节点 6: yeqmpus is yuxppus and gisvpus
      ↻ 重复节点，计数: 2

   节点 7: dovrpus is babrpus and mufbpus and wicppus
      ↻ 重复节点，计数: 2

   节点 8: yeqmpus is kobrpus
      ↻ 重复节点，计数: 2

   节点 9: nusdpus is yeqmpus and cicfpus
      ↻ 重复节点，计数: 2

   节点 10: zoslpus is mifjpus and xumtpus
      ↻ 重复节点，计数: 2

   节点 11: yuxppus is zohypus
      ↻ 重复节点，计数: 2

   节点 12: mifjpus is boktpus and nuwcpus
      ↻ 重复节点，计数: 2

   节点 13: x is poqfpus and dawfpus
      ↻ 重复节点，计数: 3

   节点 14: x is poqfpus and dawfpus
      ↻ 重复节点，计数: 4

   节点 15: poqfpus is zoslpus
      ↻ 重复节点，计数: 3

   节点 16: x is poqfpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is poqfpus
      ✅ 验证成功 + LoG匹配

   节点 17: poqfpus is zoslpus
      ↻ 重复节点，计数: 4

   节点 18: kobrpus is dovrpus
      ↻ 重复节点，计数: 3

   节点 19: dovrpus is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: dovrpus is babrpus and mufbpus and wicppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: dovrpus is babrpus and mufbpus and wicppus
  ✓ 点亮LoG节点: dovrpus is babrpus and mufbpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 20: kobrpus is dovrpus
      ↻ 重复节点，计数: 4

   节点 21: dovrpus is babrpus
      ↻ 重复节点，计数: 2

   节点 22: yeqmpus is kobrpus
      ↻ 重复节点，计数: 3

   节点 23: kobrpus is dovrpus
      ↻ 重复节点，计数: 5

   节点 24: yeqmpus is dovrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: yeqmpus is dovrpus
      ✅ 验证成功 + LoG匹配

   节点 25: yeqmpus is yuxppus and gisvpus
      ↻ 重复节点，计数: 3

   节点 26: yuxppus is babcpus
      ↻ 重复节点，计数: 3

   节点 27: yeqmpus is yuxppus
      🔍 验证新节点...
[后处理] 点亮LoG节点: yeqmpus is yuxppus
      ✅ 验证成功 + LoG匹配

   节点 28: yeqmpus is yuxppus
      ↻ 重复节点，计数: 2

   节点 29: yuxppus is babcpus
      ↻ 重复节点，计数: 4

   节点 30: yeqmpus is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: yeqmpus is babcpus
[子树点亮]     └─ 点亮依赖节点: yeqmpus is babcpus and zohypus (深度4)
[子树点亮]     └─ 点亮依赖节点: yuxppus is babcpus and zohypus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 31: yeqmpus is kobrpus
      ↻ 重复节点，计数: 4

   节点 32: yeqmpus is kobrpus
      ↻ 重复节点，计数: 5

   节点 33: kobrpus is dovrpus
      ↻ 重复节点，计数: 6

   节点 34: yeqmpus is dovrpus
      ↻ 重复节点，计数: 2

   节点 35: dovrpus is babrpus
      ↻ 重复节点，计数: 3

   节点 36: dovrpus is babrpus and mufbpus and wicppus
      ↻ 重复节点，计数: 3

   节点 37: dovrpus is babrpus
      ↻ 重复节点，计数: 4

   节点 38: x is poqfpus and dawfpus
      ↻ 重复节点，计数: 5

   节点 39: poqfpus is zoslpus
      ↻ 重复节点，计数: 5

   节点 40: zoslpus is mifjpus and xumtpus
      ↻ 重复节点，计数: 3

   节点 41: poqfpus is zoslpus
      ↻ 重复节点，计数: 6

   节点 42: zoslpus is mifjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zoslpus is mifjpus and xumtpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zoslpus is mifjpus and xumtpus

   节点 43: poqfpus is xumtpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: poqfpus is zoslpus → zoslpus is xumtpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: poqfpus is zoslpus
  - 前提: zoslpus is mifjpus and xumtpus
  ✓ 点亮LoG节点: poqfpus is mifjpus and xumtpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 44: babcpus is yuxppus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 45: yeqmpus is yuxppus
      ↻ 重复节点，计数: 3

   节点 46: yeqmpus is babcpus
      ↻ 重复节点，计数: 2

   节点 47: x is poqfpus
      ↻ 重复节点，计数: 2

   节点 48: poqfpus is zoslpus
      ↻ 重复节点，计数: 7

   节点 49: zoslpus is mifjpus and xumtpus
      ↻ 重复节点，计数: 4

   节点 50: mifjpus is boktpus and nuwcpus
      ↻ 重复节点，计数: 3

   节点 51: boktpus is nusdpus
      ↻ 重复节点，计数: 3

   节点 52: nusdpus is yeqmpus and cicfpus
      ↻ 重复节点，计数: 3

   节点 53: yeqmpus is yuxppus and gisvpus
      ↻ 重复节点，计数: 4

   节点 54: yuxppus is babcpus
      ↻ 重复节点，计数: 5

   节点 55: x is poqfpus
      ↻ 重复节点，计数: 3

   节点 56: poqfpus is zoslpus
      ↻ 重复节点，计数: 8

   节点 57: zoslpus is mifjpus
      ↻ 重复节点，计数: 2

   节点 58: mifjpus is boktpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: mifjpus is boktpus
      ✅ 验证成功 + LoG匹配

   节点 59: boktpus is nusdpus
      ↻ 重复节点，计数: 4

   节点 60: nusdpus is yeqmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: nusdpus is yeqmpus and cicfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: nusdpus is yeqmpus and cicfpus

   节点 61: yeqmpus is yuxppus
      ↻ 重复节点，计数: 4

   节点 62: yuxppus is babcpus
      ↻ 重复节点，计数: 6

   节点 63: x is poqfpus
      ↻ 重复节点，计数: 4

   节点 64: poqfpus is zoslpus
      ↻ 重复节点，计数: 9

   节点 65: zoslpus is mifjpus
      ↻ 重复节点，计数: 3

   节点 66: mifjpus is boktpus
      ↻ 重复节点，计数: 2

   节点 67: boktpus is nusdpus
      ↻ 重复节点，计数: 5

   节点 68: nusdpus is yeqmpus
      ↻ 重复节点，计数: 2

   节点 69: yeqmpus is yuxppus
      ↻ 重复节点，计数: 5

   节点 70: yuxppus is babcpus
      ↻ 重复节点，计数: 7

   节点 71: x is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is poqfpus → poqfpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is poqfpus
  - 前提: poqfpus is zoslpus
  - 前提: zoslpus is mifjpus
  - 前提: mifjpus is boktpus
  - 前提: boktpus is nusdpus
  - 前提: nusdpus is yeqmpus
  - 前提: yeqmpus is babcpus
  ✓ 点亮LoG节点: x is yeqmpus
[子树点亮]     └─ 点亮依赖节点: x is mifjpus (深度3)
[子树点亮]     └─ 点亮依赖节点: mifjpus is yeqmpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is mifjpus and xumtpus (深度4)
[子树点亮]     └─ 点亮依赖节点: mifjpus is yeqmpus and cicfpus (深度4)
[子树点亮]     └─ 点亮依赖节点: boktpus is yeqmpus and cicfpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 72: dovrpus is babrpus
      ↻ 重复节点，计数: 5

   节点 73: yeqmpus is kobrpus
      ↻ 重复节点，计数: 6

   节点 74: kobrpus is dovrpus
      ↻ 重复节点，计数: 7

   节点 75: dovrpus is babrpus
      ↻ 重复节点，计数: 6

   节点 76: yeqmpus is kobrpus
      ↻ 重复节点，计数: 7

   节点 77: kobrpus is dovrpus
      ↻ 重复节点，计数: 8

   节点 78: yeqmpus is dovrpus
      ↻ 重复节点，计数: 3

   节点 79: yeqmpus is babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: yeqmpus is babrpus
[子树点亮]     └─ 点亮依赖节点: yeqmpus is babrpus and mufbpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 80: x is poqfpus
      ↻ 重复节点，计数: 5

   节点 81: poqfpus is yeqmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: poqfpus is zoslpus → zoslpus is yeqmpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: poqfpus is zoslpus
  - 前提: zoslpus is mifjpus
  - 前提: mifjpus is boktpus
  - 前提: boktpus is nusdpus
  - 前提: nusdpus is yeqmpus

   节点 82: poqfpus is zoslpus
      ↻ 重复节点，计数: 10

   节点 83: zoslpus is mifjpus
      ↻ 重复节点，计数: 4

   节点 84: mifjpus is boktpus
      ↻ 重复节点，计数: 3

   节点 85: boktpus is nusdpus
      ↻ 重复节点，计数: 6

   节点 86: nusdpus is yeqmpus
      ↻ 重复节点，计数: 3

   节点 87: poqfpus is zoslpus
      ↻ 重复节点，计数: 11

   节点 88: zoslpus is mifjpus
      ↻ 重复节点，计数: 5

   节点 89: poqfpus is mifjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: poqfpus is zoslpus → zoslpus is mifjpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: poqfpus is zoslpus
  - 前提: zoslpus is mifjpus

   节点 90: poqfpus is mifjpus
      ↻ 重复节点，计数: 2

   节点 91: poqfpus is boktpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: poqfpus is zoslpus → zoslpus is boktpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: poqfpus is zoslpus
  - 前提: zoslpus is mifjpus
  - 前提: mifjpus is boktpus

   节点 92: mifjpus is boktpus
      ↻ 重复节点，计数: 4

   节点 93: mifjpus is boktpus
      ↻ 重复节点，计数: 5

   节点 94: poqfpus is mifjpus
      ↻ 重复节点，计数: 3

   节点 95: mifjpus is boktpus
      ↻ 重复节点，计数: 6

   节点 96: poqfpus is boktpus
      ↻ 重复节点，计数: 2

   节点 97: boktpus is nusdpus
      ↻ 重复节点，计数: 7

   节点 98: poqfpus is nusdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: poqfpus is zoslpus → zoslpus is nusdpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: poqfpus is zoslpus
  - 前提: zoslpus is mifjpus
  - 前提: mifjpus is boktpus
  - 前提: boktpus is nusdpus

   节点 99: nusdpus is yeqmpus
      ↻ 重复节点，计数: 4

   节点 100: x is poqfpus
      ↻ 重复节点，计数: 6

   节点 101: x is yeqmpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 102: x is yeqmpus
      ↻ 重复节点，计数: 2

   节点 103: yeqmpus is kobrpus
      ↻ 重复节点，计数: 8

   节点 104: x is kobrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is poqfpus → poqfpus is kobrpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is poqfpus
  - 前提: poqfpus is zoslpus
  - 前提: zoslpus is mifjpus
  - 前提: mifjpus is boktpus
  - 前提: boktpus is nusdpus
  - 前提: nusdpus is yeqmpus
  - 前提: yeqmpus is kobrpus

   节点 105: kobrpus is dovrpus
      ↻ 重复节点，计数: 9

   节点 106: dovrpus is babrpus
      ↻ 重复节点，计数: 7

   节点 107: x is babrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is poqfpus → poqfpus is babrpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is poqfpus
  - 前提: poqfpus is zoslpus
  - 前提: zoslpus is mifjpus
  - 前提: mifjpus is boktpus
  - 前提: boktpus is nusdpus
  - 前提: nusdpus is yeqmpus
  - 前提: yeqmpus is babrpus

   节点 108: x is babcpus and babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus and babrpus
[子树点亮]     └─ 点亮依赖节点: yeqmpus is babcpus and babrpus (深度2)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 109: yuxppus is zohypus
      ↻ 重复节点，计数: 3

   节点 110: x is dawfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is poqfpus and dawfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is poqfpus and dawfpus

   节点 111: x is yeqmpus->kobrpus->dovrpus->babrpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 112: x is yeqmpus
      ↻ 重复节点，计数: 3

   节点 113: yeqmpus is kobrpus
      ↻ 重复节点，计数: 9

   节点 114: x is babcpus and babrpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 114
   - 新增节点: 22
   - 更新已存在节点: 92
   - 点亮的LoG节点: 19

🎯 推理质量统计:
   - 完美推理: 14 (节点正确 + 路径正确)
   - 部分推理: 8 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 19节点, 12前提, 复杂度1-12

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 34
   - 前提节点: 12
   - 推理节点: 20
   - 幻觉节点: 2
   - 点亮LoG节点: 19

❌ 幻觉节点详情:
   - babcpus is yuxppus (出现1次)
   - x is yeqmpus->kobrpus->dovrpus->babrpus (出现1次)

✅ 推理节点详情:
   🟡 x is poqfpus (出现6次, 质量:partial)
      ⚠️  无效依赖: ['x is yeqmpus->kobrpus->dovrpus->babrpus']
   🟢 dovrpus is babrpus (出现7次, 质量:perfect)
   🟢 yeqmpus is dovrpus (出现3次, 质量:perfect)
   🟡 yeqmpus is yuxppus (出现5次, 质量:partial)
      ⚠️  无效依赖: ['babcpus is yuxppus']
   🟢 yeqmpus is babcpus (出现2次, 质量:perfect)
   🟢 zoslpus is mifjpus (出现5次, 质量:perfect)
   🟢 poqfpus is xumtpus (出现1次, 质量:perfect)
   🟢 mifjpus is boktpus (出现6次, 质量:perfect)
   🟢 nusdpus is yeqmpus (出现4次, 质量:perfect)
   🟡 x is babcpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is yeqmpus->kobrpus->dovrpus->babrpus']
   🟢 yeqmpus is babrpus (出现1次, 质量:perfect)
   🟢 poqfpus is yeqmpus (出现1次, 质量:perfect)
   🟢 poqfpus is mifjpus (出现3次, 质量:perfect)
   🟢 poqfpus is boktpus (出现2次, 质量:perfect)
   🟢 poqfpus is nusdpus (出现1次, 质量:perfect)
   🟡 x is yeqmpus (出现3次, 质量:partial)
      ⚠️  无效依赖: ['x is yeqmpus->kobrpus->dovrpus->babrpus']
   🟡 x is kobrpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is yeqmpus->kobrpus->dovrpus->babrpus']
   🟡 x is babrpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is yeqmpus->kobrpus->dovrpus->babrpus']
   🟡 x is babcpus and babrpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is yeqmpus->kobrpus->dovrpus->babrpus']
   🟡 x is dawfpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is yeqmpus->kobrpus->dovrpus->babrpus']

🔥 点亮的LoG节点:
   - mifjpus is yeqmpus and cicfpus
   - x is poqfpus
   - poqfpus is mifjpus and xumtpus
   - yeqmpus is babrpus
   - yeqmpus is babcpus
   - mifjpus is yeqmpus
   - yeqmpus is babcpus and babrpus
   - yeqmpus is dovrpus
   - x is yeqmpus
   - boktpus is yeqmpus and cicfpus
   - dovrpus is babrpus and mufbpus
   - yeqmpus is babcpus and zohypus
   - x is mifjpus
   - x is mifjpus and xumtpus
   - yeqmpus is yuxppus
   - yuxppus is babcpus and zohypus
   - mifjpus is boktpus
   - x is babcpus and babrpus
   - yeqmpus is babrpus and mufbpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus and babrpus (第5层)
   节点Coverage: 19/19 = 100.00%
   前提条件Coverage: 12/12 = 100.00%
   各推理层点亮比例:
     第1层: 8/8 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 2/22 = 9.09%
   可推导节点: 20/22
   Strict Error Rate: 10/22 = 45.45%
   严格有效节点: 12/22

   详细分析:
     完美推理: 14 (63.64%)
     部分推理: 8 (36.36%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 46/50
================================================================================
记录索引: 45
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_45.json
✅ 使用缓存结果:
   - 句子数: 70
   - 提取的语句数: 72
   - 初始条件数: 14

=== Statement提取完成 ===
总句子数: 70
成功提取: 70
失败提取: 0
总statements数: 72

=== 开始清洗Statement格式 ===
原始statements数: 72
清洗后statements数: 71
过滤掉的statements数: 1
清洗后的statements:
  1. [planning] x is babcpus and babrpus and babspus
  2. [actual] lawjpus is fafbpus and panhpus
  3. [actual] x is fuklpus
  4. [actual] kafcpus is hacjpus and qejqpus and vighpus
  5. [actual] x is kafcpus and xekjpus
  6. [actual] foyypus is babcpus and pocxpus
  7. [actual] fuklpus is filgpus and townpus
  8. [actual] filgpus is yuqtpus
  9. [actual] fivwpus is babrpus and suygpus
  10. [actual] x is quykpus
  11. [actual] fafbpus is foyypus
  12. [actual] quykpus is fabcpus
  13. [actual] yuqtpus is fivwpus
  14. [actual] fabcpus is babspus and roybpus and kegqpus
  15. [actual] hacjpus is lawjpus
  16. [actual] x is fuklpus
  17. [actual] x is kafcpus
  18. [actual] x is xekjpus
  19. [actual] x is quykpus
  20. [planning] x is babcpus and babrpus and babspus
  21. [actual] foyypus is babcpus and pocxpus
  22. [planning] x is babcpus
  23. [actual] fafbpus is foyypus
  24. [actual] lawjpus is fafbpus and panhpus
  25. [actual] lawjpus is fafbpus
  26. [actual] fafbpus is foyypus
  27. [actual] lawjpus is foyypus
  28. [planning] lawjpus is foyypus?
  29. [actual] hacjpus is lawjpus
  30. [actual] kafcpus is hacjpus and qejqpus and vighpus
  31. [actual] kafcpus is hacjpus
  32. [actual] hacjpus is lawjpus
  33. [actual] kafcpus is lawjpus
  34. [actual] x is kafcpus
  35. [actual] kafcpus is hacjpus
  36. [actual] hacjpus is lawjpus
  37. [actual] x is lawjpus
  38. [actual] x is lawjpus
  39. [actual] lawjpus is fafbpus
  40. [actual] fafbpus is foyypus
  41. [actual] lawjpus is foyypus
  42. [actual] x is lawjpus
  43. [actual] x is foyypus
  44. [actual] foyypus is babcpus
  45. [actual] x is babcpus
  46. [actual] x is babcpus
  47. [actual] fivwpus is babrpus and suygpus
  48. [planning] x is fivwpus
  49. [planning] x is fivwpus
  50. [actual] filgpus is yuqtpus
  51. [actual] yuqtpus is fivwpus
  52. [actual] filgpus is yuqtpus
  53. [actual] yuqtpus is fivwpus
  54. [actual] filgpus is fivwpus
  55. [actual] fuklpus is filgpus and townpus
  56. [actual] x is fuklpus
  57. [actual] fuklpus is filgpus
  58. [actual] x is filgpus
  59. [actual] filgpus is fivwpus
  60. [planning] x is fivwpus
  61. [actual] fivwpus is babrpus
  62. [actual] x is babrpus
  63. [actual] x is babrpus
  64. [actual] fabcpus is babspus and roybpus and kegqpus
  65. [actual] quykpus is fabcpus
  66. [actual] x is quykpus
  67. [actual] quykpus is fabcpus
  68. [actual] x is fabcpus
  69. [actual] fabcpus is babspus
  70. [planning] x is babspus
  71. [actual] x is babcpus and babrpus and babspus

=== 开始标准化和解析节点 ===
清洗后statements数: 71
标准化后节点数: 70
过滤掉的无效实体数: 1
标准化后的节点:
  1. [planning] x → babcpus and babrpus and babspus (原始: x is babcpus and babrpus and babspus)
  2. [actual] lawjpus → fafbpus and panhpus (原始: lawjpus is fafbpus and panhpus)
  3. [actual] x → fuklpus (原始: x is fuklpus)
  4. [actual] kafcpus → hacjpus and qejqpus and vighpus (原始: kafcpus is hacjpus and qejqpus and vighpus)
  5. [actual] x → kafcpus and xekjpus (原始: x is kafcpus and xekjpus)
  6. [actual] foyypus → babcpus and pocxpus (原始: foyypus is babcpus and pocxpus)
  7. [actual] fuklpus → filgpus and townpus (原始: fuklpus is filgpus and townpus)
  8. [actual] filgpus → yuqtpus (原始: filgpus is yuqtpus)
  9. [actual] fivwpus → babrpus and suygpus (原始: fivwpus is babrpus and suygpus)
  10. [actual] x → quykpus (原始: x is quykpus)
  11. [actual] fafbpus → foyypus (原始: fafbpus is foyypus)
  12. [actual] quykpus → fabcpus (原始: quykpus is fabcpus)
  13. [actual] yuqtpus → fivwpus (原始: yuqtpus is fivwpus)
  14. [actual] fabcpus → babspus and roybpus and kegqpus (原始: fabcpus is babspus and roybpus and kegqpus)
  15. [actual] hacjpus → lawjpus (原始: hacjpus is lawjpus)
  16. [actual] x → fuklpus (原始: x is fuklpus)
  17. [actual] x → kafcpus (原始: x is kafcpus)
  18. [actual] x → xekjpus (原始: x is xekjpus)
  19. [actual] x → quykpus (原始: x is quykpus)
  20. [planning] x → babcpus and babrpus and babspus (原始: x is babcpus and babrpus and babspus)
  21. [actual] foyypus → babcpus and pocxpus (原始: foyypus is babcpus and pocxpus)
  22. [planning] x → babcpus (原始: x is babcpus)
  23. [actual] fafbpus → foyypus (原始: fafbpus is foyypus)
  24. [actual] lawjpus → fafbpus and panhpus (原始: lawjpus is fafbpus and panhpus)
  25. [actual] lawjpus → fafbpus (原始: lawjpus is fafbpus)
  26. [actual] fafbpus → foyypus (原始: fafbpus is foyypus)
  27. [actual] lawjpus → foyypus (原始: lawjpus is foyypus)
  28. [actual] hacjpus → lawjpus (原始: hacjpus is lawjpus)
  29. [actual] kafcpus → hacjpus and qejqpus and vighpus (原始: kafcpus is hacjpus and qejqpus and vighpus)
  30. [actual] kafcpus → hacjpus (原始: kafcpus is hacjpus)
  31. [actual] hacjpus → lawjpus (原始: hacjpus is lawjpus)
  32. [actual] kafcpus → lawjpus (原始: kafcpus is lawjpus)
  33. [actual] x → kafcpus (原始: x is kafcpus)
  34. [actual] kafcpus → hacjpus (原始: kafcpus is hacjpus)
  35. [actual] hacjpus → lawjpus (原始: hacjpus is lawjpus)
  36. [actual] x → lawjpus (原始: x is lawjpus)
  37. [actual] x → lawjpus (原始: x is lawjpus)
  38. [actual] lawjpus → fafbpus (原始: lawjpus is fafbpus)
  39. [actual] fafbpus → foyypus (原始: fafbpus is foyypus)
  40. [actual] lawjpus → foyypus (原始: lawjpus is foyypus)
  41. [actual] x → lawjpus (原始: x is lawjpus)
  42. [actual] x → foyypus (原始: x is foyypus)
  43. [actual] foyypus → babcpus (原始: foyypus is babcpus)
  44. [actual] x → babcpus (原始: x is babcpus)
  45. [actual] x → babcpus (原始: x is babcpus)
  46. [actual] fivwpus → babrpus and suygpus (原始: fivwpus is babrpus and suygpus)
  47. [planning] x → fivwpus (原始: x is fivwpus)
  48. [planning] x → fivwpus (原始: x is fivwpus)
  49. [actual] filgpus → yuqtpus (原始: filgpus is yuqtpus)
  50. [actual] yuqtpus → fivwpus (原始: yuqtpus is fivwpus)
  51. [actual] filgpus → yuqtpus (原始: filgpus is yuqtpus)
  52. [actual] yuqtpus → fivwpus (原始: yuqtpus is fivwpus)
  53. [actual] filgpus → fivwpus (原始: filgpus is fivwpus)
  54. [actual] fuklpus → filgpus and townpus (原始: fuklpus is filgpus and townpus)
  55. [actual] x → fuklpus (原始: x is fuklpus)
  56. [actual] fuklpus → filgpus (原始: fuklpus is filgpus)
  57. [actual] x → filgpus (原始: x is filgpus)
  58. [actual] filgpus → fivwpus (原始: filgpus is fivwpus)
  59. [planning] x → fivwpus (原始: x is fivwpus)
  60. [actual] fivwpus → babrpus (原始: fivwpus is babrpus)
  61. [actual] x → babrpus (原始: x is babrpus)
  62. [actual] x → babrpus (原始: x is babrpus)
  63. [actual] fabcpus → babspus and roybpus and kegqpus (原始: fabcpus is babspus and roybpus and kegqpus)
  64. [actual] quykpus → fabcpus (原始: quykpus is fabcpus)
  65. [actual] x → quykpus (原始: x is quykpus)
  66. [actual] quykpus → fabcpus (原始: quykpus is fabcpus)
  67. [actual] x → fabcpus (原始: x is fabcpus)
  68. [actual] fabcpus → babspus (原始: fabcpus is babspus)
  69. [planning] x → babspus (原始: x is babspus)
  70. [actual] x → babcpus and babrpus and babspus (原始: x is babcpus and babrpus and babspus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 22
[后处理] 加载LoG图，包含 22 个节点
  LoG节点 0: x is babcpus and babrpus and babspus (规则: CI, 深度: 1)
  LoG节点 1: x is babcpus (规则: MP, 深度: 2)
  LoG节点 2: x is babrpus and babspus (规则: CI, 深度: 2)
  LoG节点 3: x is hacjpus (规则: CE, 深度: 3)
  LoG节点 4: hacjpus is babcpus (规则: MP, 深度: 3)
  LoG节点 5: x is babrpus (规则: MP, 深度: 3)
  LoG节点 6: x is babspus (规则: CE, 深度: 3)
  LoG节点 7: x is hacjpus and qejqpus (规则: MP, 深度: 4)
  LoG节点 8: hacjpus is fafbpus (规则: CE, 深度: 4)
  LoG节点 9: fafbpus is babcpus (规则: CE, 深度: 4)
  LoG节点 10: x is filgpus (规则: CE, 深度: 4)
  LoG节点 11: filgpus is babrpus (规则: MP, 深度: 4)
  LoG节点 12: x is babspus and roybpus (规则: MP, 深度: 4)
  LoG节点 13: x is kafcpus (规则: CE, 深度: 5)
  LoG节点 14: kafcpus is hacjpus and qejqpus (规则: CE, 深度: 5)
  LoG节点 15: hacjpus is fafbpus and panhpus (规则: MP, 深度: 5)
  LoG节点 16: fafbpus is babcpus and pocxpus (规则: MP, 深度: 5)
  LoG节点 17: x is filgpus and townpus (规则: MP, 深度: 5)
  LoG节点 18: filgpus is fivwpus (规则: MP, 深度: 5)
  LoG节点 19: fivwpus is babrpus (规则: CE, 深度: 5)
  LoG节点 20: x is fabcpus (规则: MP, 深度: 5)
  LoG节点 21: fabcpus is babspus and roybpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 70
   - 初始条件数: 14
   - LoG图节点数: 22

📋 初始条件列表:
    1. lawjpus is fafbpus and panhpus
    2. x is fuklpus
    3. kafcpus is hacjpus and qejqpus and vighpus
    4. x is kafcpus and xekjpus
    5. foyypus is babcpus and pocxpus
    6. fuklpus is filgpus and townpus
    7. filgpus is yuqtpus
    8. fivwpus is babrpus and suygpus
    9. x is quykpus
   10. fafbpus is foyypus
   11. quykpus is fabcpus
   12. yuqtpus is fivwpus
   13. fabcpus is babspus and roybpus and kegqpus
   14. hacjpus is lawjpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 14 个前提节点

🔍 开始处理actual节点...

   节点 1: lawjpus is fafbpus and panhpus
      ↻ 重复节点，计数: 2

   节点 2: x is fuklpus
      ↻ 重复节点，计数: 2

   节点 3: kafcpus is hacjpus and qejqpus and vighpus
      ↻ 重复节点，计数: 2

   节点 4: x is kafcpus and xekjpus
      ↻ 重复节点，计数: 2

   节点 5: foyypus is babcpus and pocxpus
      ↻ 重复节点，计数: 2

   节点 6: fuklpus is filgpus and townpus
      ↻ 重复节点，计数: 2

   节点 7: filgpus is yuqtpus
      ↻ 重复节点，计数: 2

   节点 8: fivwpus is babrpus and suygpus
      ↻ 重复节点，计数: 2

   节点 9: x is quykpus
      ↻ 重复节点，计数: 2

   节点 10: fafbpus is foyypus
      ↻ 重复节点，计数: 2

   节点 11: quykpus is fabcpus
      ↻ 重复节点，计数: 2

   节点 12: yuqtpus is fivwpus
      ↻ 重复节点，计数: 2

   节点 13: fabcpus is babspus and roybpus and kegqpus
      ↻ 重复节点，计数: 2

   节点 14: hacjpus is lawjpus
      ↻ 重复节点，计数: 2

   节点 15: x is fuklpus
      ↻ 重复节点，计数: 3

   节点 16: x is kafcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is kafcpus
      ✅ 验证成功 + LoG匹配

   节点 17: x is xekjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is kafcpus and xekjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is kafcpus and xekjpus

   节点 18: x is quykpus
      ↻ 重复节点，计数: 3

   节点 19: foyypus is babcpus and pocxpus
      ↻ 重复节点，计数: 3

   节点 20: fafbpus is foyypus
      ↻ 重复节点，计数: 3

   节点 21: lawjpus is fafbpus and panhpus
      ↻ 重复节点，计数: 3

   节点 22: lawjpus is fafbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: lawjpus is fafbpus and panhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: lawjpus is fafbpus and panhpus

   节点 23: fafbpus is foyypus
      ↻ 重复节点，计数: 4

   节点 24: lawjpus is foyypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: lawjpus is fafbpus → fafbpus is foyypus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: lawjpus is fafbpus
  - 前提: fafbpus is foyypus

   节点 25: hacjpus is lawjpus
      ↻ 重复节点，计数: 3

   节点 26: kafcpus is hacjpus and qejqpus and vighpus
      ↻ 重复节点，计数: 3

   节点 27: kafcpus is hacjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kafcpus is hacjpus and qejqpus and vighpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kafcpus is hacjpus and qejqpus and vighpus
  ✓ 点亮LoG节点: kafcpus is hacjpus and qejqpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 28: hacjpus is lawjpus
      ↻ 重复节点，计数: 4

   节点 29: kafcpus is lawjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: kafcpus is hacjpus → hacjpus is lawjpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: kafcpus is hacjpus
  - 前提: hacjpus is lawjpus

   节点 30: x is kafcpus
      ↻ 重复节点，计数: 2

   节点 31: kafcpus is hacjpus
      ↻ 重复节点，计数: 2

   节点 32: hacjpus is lawjpus
      ↻ 重复节点，计数: 5

   节点 33: x is lawjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is kafcpus → kafcpus is lawjpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is kafcpus
  - 前提: kafcpus is lawjpus

   节点 34: x is lawjpus
      ↻ 重复节点，计数: 2

   节点 35: lawjpus is fafbpus
      ↻ 重复节点，计数: 2

   节点 36: fafbpus is foyypus
      ↻ 重复节点，计数: 5

   节点 37: lawjpus is foyypus
      ↻ 重复节点，计数: 2

   节点 38: x is lawjpus
      ↻ 重复节点，计数: 3

   节点 39: x is foyypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is kafcpus → kafcpus is foyypus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is kafcpus
  - 前提: kafcpus is hacjpus
  - 前提: hacjpus is lawjpus
  - 前提: lawjpus is foyypus
  ✓ 点亮LoG节点: x is hacjpus
[子树点亮]     └─ 点亮依赖节点: x is hacjpus and qejqpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 40: foyypus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: foyypus is babcpus and pocxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: foyypus is babcpus and pocxpus

   节点 41: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: hacjpus is babcpus (深度3)
[子树点亮]     └─ 点亮依赖节点: hacjpus is fafbpus (深度4)
[子树点亮]     └─ 点亮依赖节点: fafbpus is babcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: hacjpus is fafbpus and panhpus (深度5)
[子树点亮]     └─ 点亮依赖节点: fafbpus is babcpus and pocxpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
      ✅ 验证成功 + LoG匹配

   节点 42: x is babcpus
      ↻ 重复节点，计数: 2

   节点 43: fivwpus is babrpus and suygpus
      ↻ 重复节点，计数: 3

   节点 44: filgpus is yuqtpus
      ↻ 重复节点，计数: 3

   节点 45: yuqtpus is fivwpus
      ↻ 重复节点，计数: 3

   节点 46: filgpus is yuqtpus
      ↻ 重复节点，计数: 4

   节点 47: yuqtpus is fivwpus
      ↻ 重复节点，计数: 4

   节点 48: filgpus is fivwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: filgpus is fivwpus
      ✅ 验证成功 + LoG匹配

   节点 49: fuklpus is filgpus and townpus
      ↻ 重复节点，计数: 3

   节点 50: x is fuklpus
      ↻ 重复节点，计数: 4

   节点 51: fuklpus is filgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: fuklpus is filgpus and townpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: fuklpus is filgpus and townpus

   节点 52: x is filgpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is filgpus
[子树点亮]     └─ 点亮依赖节点: x is filgpus and townpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 53: filgpus is fivwpus
      ↻ 重复节点，计数: 2

   节点 54: fivwpus is babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: fivwpus is babrpus
      ✅ 验证成功 + LoG匹配

   节点 55: x is babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babrpus
[子树点亮]     └─ 点亮依赖节点: filgpus is babrpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 56: x is babrpus
      ↻ 重复节点，计数: 2

   节点 57: fabcpus is babspus and roybpus and kegqpus
      ↻ 重复节点，计数: 3

   节点 58: quykpus is fabcpus
      ↻ 重复节点，计数: 3

   节点 59: x is quykpus
      ↻ 重复节点，计数: 4

   节点 60: quykpus is fabcpus
      ↻ 重复节点，计数: 4

   节点 61: x is fabcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is fabcpus
      ✅ 验证成功 + LoG匹配

   节点 62: fabcpus is babspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: fabcpus is babspus and roybpus and kegqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: fabcpus is babspus and roybpus and kegqpus
  ✓ 点亮LoG节点: fabcpus is babspus and roybpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 63: x is babcpus and babrpus and babspus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus and babrpus and babspus
[子树点亮]     └─ 点亮依赖节点: x is babrpus and babspus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is babspus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is babspus and roybpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 63
   - 新增节点: 18
   - 更新已存在节点: 45
   - 点亮的LoG节点: 22

🎯 推理质量统计:
   - 完美推理: 18 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 22节点, 14前提, 复杂度1-14

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 32
   - 前提节点: 14
   - 推理节点: 18
   - 幻觉节点: 0
   - 点亮LoG节点: 22

✅ 推理节点详情:
   🟢 x is kafcpus (出现2次, 质量:perfect)
   🟢 x is xekjpus (出现1次, 质量:perfect)
   🟢 lawjpus is fafbpus (出现2次, 质量:perfect)
   🟢 lawjpus is foyypus (出现2次, 质量:perfect)
   🟢 kafcpus is hacjpus (出现2次, 质量:perfect)
   🟢 kafcpus is lawjpus (出现1次, 质量:perfect)
   🟢 x is lawjpus (出现3次, 质量:perfect)
   🟢 x is foyypus (出现1次, 质量:perfect)
   🟢 foyypus is babcpus (出现1次, 质量:perfect)
   🟢 x is babcpus (出现2次, 质量:perfect)
   🟢 filgpus is fivwpus (出现2次, 质量:perfect)
   🟢 fuklpus is filgpus (出现1次, 质量:perfect)
   🟢 x is filgpus (出现1次, 质量:perfect)
   🟢 fivwpus is babrpus (出现1次, 质量:perfect)
   🟢 x is babrpus (出现2次, 质量:perfect)
   🟢 x is fabcpus (出现1次, 质量:perfect)
   🟢 fabcpus is babspus (出现1次, 质量:perfect)
   🟢 x is babcpus and babrpus and babspus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is babspus
   - fivwpus is babrpus
   - fabcpus is babspus and roybpus
   - x is hacjpus and qejqpus
   - hacjpus is fafbpus
   - hacjpus is fafbpus and panhpus
   - x is fabcpus
   - x is babrpus and babspus
   - x is filgpus
   - filgpus is fivwpus
   - x is babcpus and babrpus and babspus
   - x is kafcpus
   - hacjpus is babcpus
   - kafcpus is hacjpus and qejqpus
   - fafbpus is babcpus
   - x is filgpus and townpus
   - x is babcpus
   - x is hacjpus
   - x is babspus and roybpus
   - filgpus is babrpus
   - x is babrpus
   - fafbpus is babcpus and pocxpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus and babrpus and babspus (第5层)
   节点Coverage: 22/22 = 100.00%
   前提条件Coverage: 14/14 = 100.00%
   各推理层点亮比例:
     第1层: 9/9 = 100.00%
     第2层: 6/6 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/18 = 0.00%
   可推导节点: 18/18
   Strict Error Rate: 0/18 = 0.00%
   严格有效节点: 18/18

   详细分析:
     完美推理: 18 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 47/50
================================================================================
记录索引: 46
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_46.json
✅ 使用缓存结果:
   - 句子数: 164
   - 提取的语句数: 268
   - 初始条件数: 19

=== Statement提取完成 ===
总句子数: 164
成功提取: 163
失败提取: 1
总statements数: 268

=== 开始清洗Statement格式 ===
原始statements数: 268
清洗后statements数: 239
过滤掉的statements数: 29
清洗后的statements:
  1. [planning] x is babcpus and babrpus
  2. [actual] x is hebfpus
  3. [actual] hebfpus is lelnpus
  4. [actual] lelnpus is vujxpus
  5. [actual] vujxpus is gevmpus
  6. [actual] gevmpus is panjpus
  7. [actual] panjpus is hufqpus and wivrpus
  8. [actual] hufqpus is cubnpus
  9. [actual] cubnpus is zocnpus and gidjpus
  10. [actual] zocnpus is zaqdpus
  11. [actual] zaqdpus is babcpus and nidfpus
  12. [planning] x is babcpus
  13. [planning] zaqdpus is babcpus
  14. [planning] zocnpus is zaqdpus
  15. [actual] x is hebfpus
  16. [actual] hebfpus is lelnpus
  17. [actual] x is lelnpus
  18. [actual] lelnpus is vujxpus
  19. [planning] x is vujxpus
  20. [actual] vujxpus is gevmpus
  21. [actual] x is gevmpus
  22. [actual] gevmpus is panjpus
  23. [planning] x is panjpus
  24. [actual] panjpus is hufqpus and wivrpus
  25. [planning] x is panjpus
  26. [planning] x is hufqpus or wivrpus
  27. [planning] x is panjpus
  28. [planning] x is one of them or contained in them
  29. [actual] x is hebfpus
  30. [actual] hebfpus is lelnpus
  31. [actual] x is lelnpus
  32. [actual] x is panjpus
  33. [actual] panjpus is hufqpus and wivrpus
  34. [planning] x is panjpus
  35. [planning] x is hufqpus or wivrpus
  36. [planning] x is the category itself
  37. [planning] x is an instance that is panjpus
  38. [actual] zocnpus is zaqdpus
  39. [actual] zaqdpus is a broader category
  40. [actual] zaqdpus is babcpus and nidfpus
  41. [planning] zaqdpus is babcpus and nidfpus
  42. [planning] zaqdpus is babcpus and nidfpus
  43. [planning] babcpus is a category that contains zaqdpus
  44. [planning] nidfpus is a category that contains zaqdpus
  45. [planning] zaqdpus is babcpus
  46. [planning] zaqdpus is nidfpus
  47. [actual] qehppus is babrpus and laybpus
  48. [planning] qehppus is babrpus and laybpus
  49. [actual] yecbpus is hovrpus and wedkpus
  50. [actual] panjpus is hufqpus and wivrpus
  51. [planning] panjpus is hufqpus and wivrpus
  52. [actual] hufqpus is cubnpus
  53. [actual] cubnpus is zocnpus
  54. [actual] panjpus is hufqpus
  55. [actual] hufqpus is cubnpus
  56. [actual] gevmpus is panjpus
  57. [actual] vujxpus is gevmpus
  58. [actual] panjpus is above in the chain
  59. [planning] panjpus is hufqpus
  60. [planning] panjpus is hufqpus
  61. [planning] hufqpus is panjpus
  62. [actual] panjpus is hufqpus and wivrpus
  63. [actual] gevmpus is panjpus
  64. [actual] vujxpus is gevmpus
  65. [actual] vujxpus is panjpus
  66. [planning] panjpus is hufqpus
  67. [planning] vujxpus is hufqpus
  68. [actual] hufqpus is cubnpus
  69. [actual] hufqpus is cubnpus
  70. [actual] panjpus is hufqpus
  71. [actual] panjpus is cubnpus
  72. [actual] cubnpus is zocnpus and gidjpus
  73. [actual] cubnpus is zocnpus
  74. [actual] zocnpus is zaqdpus
  75. [actual] zocnpus is zaqdpus
  76. [actual] zaqdpus is babcpus and nidfpus
  77. [actual] zaqdpus is babcpus
  78. [planning] panjpus is babcpus
  79. [actual] x is panjpus
  80. [actual] panjpus is babcpus
  81. [planning] x is babcpus
  82. [planning] x is babcpus
  83. [planning] x is the chain to babcpus
  84. [actual] x is hebfpus
  85. [actual] hebfpus is lelnpus
  86. [actual] x is lelnpus
  87. [actual] x is joknpus and pomcpus
  88. [planning] x is hebfpus
  89. [planning] x is joknpus and pomcpus
  90. [actual] x is hebfpus
  91. [actual] x is joknpus and pomcpus
  92. [actual] zocnpus is zaqdpus
  93. [actual] joknpus is jeswpus
  94. [actual] qehppus is babrpus and laybpus
  95. [actual] yecbpus is hovrpus and wedkpus
  96. [actual] lelnpus is vujxpus
  97. [actual] x is hebfpus
  98. [actual] x is hebfpus
  99. [actual] gevmpus is panjpus
  100. [actual] cubnpus is zocnpus and gidjpus
  101. [actual] jehvpus is wepppus
  102. [actual] wepppus is jownpus and xadxpus
  103. [actual] hebfpus is lelnpus
  104. [actual] x is hebfpus
  105. [actual] x is lelnpus
  106. [actual] vujxpus is gevmpus
  107. [actual] lelnpus is vujxpus
  108. [actual] lelnpus is gevmpus
  109. [actual] x is gevmpus
  110. [actual] hufqpus is cubnpus
  111. [actual] zaqdpus is babcpus and nidfpus
  112. [actual] jownpus is yecbpus
  113. [actual] hovrpus is qehppus and berfpus
  114. [actual] panjpus is hufqpus and wivrpus
  115. [actual] gevmpus is panjpus
  116. [planning] gevmpus is hufqpus and wivrpus
  117. [actual] gevmpus is panjpus
  118. [actual] panjpus is hufqpus
  119. [actual] gevmpus is hufqpus
  120. [planning] gevmpus is hufqpus
  121. [actual] gevmpus is wivrpus
  122. [actual] x is gevmpus
  123. [actual] x is hebfpus
  124. [actual] hebfpus is lelnpus
  125. [actual] x is lelnpus
  126. [actual] lelnpus is vujxpus
  127. [actual] x is vujxpus
  128. [actual] vujxpus is gevmpus
  129. [actual] x is gevmpus
  130. [actual] gevmpus is panjpus
  131. [planning] x is panjpus
  132. [actual] panjpus is hufqpus and wivrpus
  133. [actual] panjpus is hufqpus and wivrpus
  134. [actual] x is panjpus
  135. [actual] panjpus is hufqpus
  136. [planning] x is hufqpus
  137. [planning] x is panjpus
  138. [planning] x is an instance of panjpus
  139. [planning] x is panjpus
  140. [actual] panjpus is hufqpus
  141. [actual] panjpus is hufqpus
  142. [planning] panjpus is hufqpus
  143. [actual] panjpus is a subset of hufqpus
  144. [actual] x is panjpus
  145. [actual] panjpus is hufqpus
  146. [actual] x is hufqpus
  147. [actual] panjpus is wivrpus
  148. [planning] x is wivrpus
  149. [actual] x is hufqpus
  150. [planning] hufqpus is cubnpus
  151. [actual] hufqpus is cubnpus
  152. [actual] hufqpus is cubnpus
  153. [actual] x is hufqpus
  154. [actual] x is cubnpus
  155. [actual] cubnpus is zocnpus and gidjpus
  156. [actual] cubnpus is zocnpus and gidjpus
  157. [actual] x is cubnpus
  158. [actual] zocnpus is zaqdpus
  159. [planning] x is zaqdpus
  160. [actual] zaqdpus is babcpus and nidfpus
  161. [actual] zaqdpus is babcpus and nidfpus
  162. [actual] x is zaqdpus
  163. [actual] x is babcpus
  164. [actual] x is nidfpus
  165. [actual] x is babcpus
  166. [planning] x is babrpus
  167. [actual] qehppus is babrpus
  168. [actual] qehppus is laybpus
  169. [actual] qehppus is babrpus
  170. [actual] hovrpus is qehppus and berfpus
  171. [actual] hovrpus is qehppus and berfpus
  172. [planning] x is joknpus
  173. [planning] x is joknpus and pomcpus
  174. [actual] hufqpus is cubnpus
  175. [actual] zaqdpus is babcpus and nidfpus
  176. [actual] jownpus is yecbpus
  177. [actual] hovrpus is qehppus and berfpus
  178. [actual] panjpus is hufqpus and wivrpus
  179. [actual] x is joknpus and pomcpus
  180. [planning] x is babgpus
  181. [actual] gevmpus is panjpus
  182. [actual] cubnpus is zocnpus and gidjpus
  183. [actual] jehvpus is wepppus
  184. [actual] wepppus is jownpus and xadxpus
  185. [actual] hebfpus is lelnpus
  186. [actual] vujxpus is gevmpus
  187. [actual] hufqpus is cubnpus
  188. [actual] zaqdpus is babcpus and nidfpus
  189. [actual] jownpus is yecbpus
  190. [actual] hovrpus is qehppus and berfpus
  191. [actual] panjpus is hufqpus and wivrpus
  192. [actual] x is joknpus and pomcpus
  193. [actual] jeswpus is jehvpus
  194. [actual] x is joknpus and pomcpus
  195. [actual] x is joknpus and pomcpus
  196. [actual] x is hebfpus
  197. [actual] hebfpus is babcpus
  198. [planning] joknpus is jeswpus
  199. [actual] joknpus is jeswpus
  200. [planning] x is jeswpus
  201. [actual] x is joknpus
  202. [actual] joknpus is jeswpus
  203. [actual] x is jeswpus
  204. [planning] jeswpus is jehvpus
  205. [actual] jeswpus is jehvpus
  206. [actual] x is jehvpus
  207. [planning] jehvpus is wepppus
  208. [actual] jehvpus is wepppus
  209. [actual] x is wepppus
  210. [actual] wepppus is jownpus
  211. [actual] wepppus is jownpus and xadxpus
  212. [actual] x is wepppus
  213. [actual] x is jownpus
  214. [actual] x is xadxpus
  215. [planning] jownpus is yecbpus
  216. [actual] jownpus is yecbpus
  217. [actual] x is yecbpus
  218. [actual] yecbpus is hovrpus and wedkpus
  219. [actual] yecbpus is hovrpus and wedkpus
  220. [actual] x is hovrpus
  221. [actual] x is wedkpus
  222. [actual] hovrpus is qehppus and berfpus
  223. [actual] hovrpus is qehppus and berfpus
  224. [planning] x is qehppus
  225. [planning] x is berfpus
  226. [actual] qehppus is babrpus and laybpus
  227. [actual] qehppus is babrpus and laybpus
  228. [actual] x is qehppus
  229. [actual] x is babrpus
  230. [actual] x is laybpus
  231. [actual] x is babrpus
  232. [actual] x is babcpus
  233. [actual] x is babrpus
  234. [actual] x is babcpus and babrpus
  235. [actual] x is babcpus
  236. [actual] x is babrpus
  237. [actual] x is pomcpus
  238. [actual] x is joknpus and pomcpus
  239. [actual] x is babcpus and babrpus

=== 开始标准化和解析节点 ===
清洗后statements数: 239
标准化后节点数: 229
过滤掉的无效实体数: 10
标准化后的节点:
  1. [planning] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  2. [actual] x → hebfpus (原始: x is hebfpus)
  3. [actual] hebfpus → lelnpus (原始: hebfpus is lelnpus)
  4. [actual] lelnpus → vujxpus (原始: lelnpus is vujxpus)
  5. [actual] vujxpus → gevmpus (原始: vujxpus is gevmpus)
  6. [actual] gevmpus → panjpus (原始: gevmpus is panjpus)
  7. [actual] panjpus → hufqpus and wivrpus (原始: panjpus is hufqpus and wivrpus)
  8. [actual] hufqpus → cubnpus (原始: hufqpus is cubnpus)
  9. [actual] cubnpus → zocnpus and gidjpus (原始: cubnpus is zocnpus and gidjpus)
  10. [actual] zocnpus → zaqdpus (原始: zocnpus is zaqdpus)
  11. [actual] zaqdpus → babcpus and nidfpus (原始: zaqdpus is babcpus and nidfpus)
  12. [planning] x → babcpus (原始: x is babcpus)
  13. [planning] zaqdpus → babcpus (原始: zaqdpus is babcpus)
  14. [planning] zocnpus → zaqdpus (原始: zocnpus is zaqdpus)
  15. [actual] x → hebfpus (原始: x is hebfpus)
  16. [actual] hebfpus → lelnpus (原始: hebfpus is lelnpus)
  17. [actual] x → lelnpus (原始: x is lelnpus)
  18. [actual] lelnpus → vujxpus (原始: lelnpus is vujxpus)
  19. [planning] x → vujxpus (原始: x is vujxpus)
  20. [actual] vujxpus → gevmpus (原始: vujxpus is gevmpus)
  21. [actual] x → gevmpus (原始: x is gevmpus)
  22. [actual] gevmpus → panjpus (原始: gevmpus is panjpus)
  23. [planning] x → panjpus (原始: x is panjpus)
  24. [actual] panjpus → hufqpus and wivrpus (原始: panjpus is hufqpus and wivrpus)
  25. [planning] x → panjpus (原始: x is panjpus)
  26. [planning] x → hufqpus or wivrpus (原始: x is hufqpus or wivrpus)
  27. [planning] x → panjpus (原始: x is panjpus)
  28. [actual] x → hebfpus (原始: x is hebfpus)
  29. [actual] hebfpus → lelnpus (原始: hebfpus is lelnpus)
  30. [actual] x → lelnpus (原始: x is lelnpus)
  31. [actual] x → panjpus (原始: x is panjpus)
  32. [actual] panjpus → hufqpus and wivrpus (原始: panjpus is hufqpus and wivrpus)
  33. [planning] x → panjpus (原始: x is panjpus)
  34. [planning] x → hufqpus or wivrpus (原始: x is hufqpus or wivrpus)
  35. [actual] zocnpus → zaqdpus (原始: zocnpus is zaqdpus)
  36. [actual] zaqdpus → babcpus and nidfpus (原始: zaqdpus is babcpus and nidfpus)
  37. [planning] zaqdpus → babcpus and nidfpus (原始: zaqdpus is babcpus and nidfpus)
  38. [planning] zaqdpus → babcpus and nidfpus (原始: zaqdpus is babcpus and nidfpus)
  39. [planning] zaqdpus → babcpus (原始: zaqdpus is babcpus)
  40. [planning] zaqdpus → nidfpus (原始: zaqdpus is nidfpus)
  41. [actual] qehppus → babrpus and laybpus (原始: qehppus is babrpus and laybpus)
  42. [planning] qehppus → babrpus and laybpus (原始: qehppus is babrpus and laybpus)
  43. [actual] yecbpus → hovrpus and wedkpus (原始: yecbpus is hovrpus and wedkpus)
  44. [actual] panjpus → hufqpus and wivrpus (原始: panjpus is hufqpus and wivrpus)
  45. [planning] panjpus → hufqpus and wivrpus (原始: panjpus is hufqpus and wivrpus)
  46. [actual] hufqpus → cubnpus (原始: hufqpus is cubnpus)
  47. [actual] cubnpus → zocnpus (原始: cubnpus is zocnpus)
  48. [actual] panjpus → hufqpus (原始: panjpus is hufqpus)
  49. [actual] hufqpus → cubnpus (原始: hufqpus is cubnpus)
  50. [actual] gevmpus → panjpus (原始: gevmpus is panjpus)
  51. [actual] vujxpus → gevmpus (原始: vujxpus is gevmpus)
  52. [planning] panjpus → hufqpus (原始: panjpus is hufqpus)
  53. [planning] panjpus → hufqpus (原始: panjpus is hufqpus)
  54. [planning] hufqpus → panjpus (原始: hufqpus is panjpus)
  55. [actual] panjpus → hufqpus and wivrpus (原始: panjpus is hufqpus and wivrpus)
  56. [actual] gevmpus → panjpus (原始: gevmpus is panjpus)
  57. [actual] vujxpus → gevmpus (原始: vujxpus is gevmpus)
  58. [actual] vujxpus → panjpus (原始: vujxpus is panjpus)
  59. [planning] panjpus → hufqpus (原始: panjpus is hufqpus)
  60. [planning] vujxpus → hufqpus (原始: vujxpus is hufqpus)
  61. [actual] hufqpus → cubnpus (原始: hufqpus is cubnpus)
  62. [actual] hufqpus → cubnpus (原始: hufqpus is cubnpus)
  63. [actual] panjpus → hufqpus (原始: panjpus is hufqpus)
  64. [actual] panjpus → cubnpus (原始: panjpus is cubnpus)
  65. [actual] cubnpus → zocnpus and gidjpus (原始: cubnpus is zocnpus and gidjpus)
  66. [actual] cubnpus → zocnpus (原始: cubnpus is zocnpus)
  67. [actual] zocnpus → zaqdpus (原始: zocnpus is zaqdpus)
  68. [actual] zocnpus → zaqdpus (原始: zocnpus is zaqdpus)
  69. [actual] zaqdpus → babcpus and nidfpus (原始: zaqdpus is babcpus and nidfpus)
  70. [actual] zaqdpus → babcpus (原始: zaqdpus is babcpus)
  71. [planning] panjpus → babcpus (原始: panjpus is babcpus)
  72. [actual] x → panjpus (原始: x is panjpus)
  73. [actual] panjpus → babcpus (原始: panjpus is babcpus)
  74. [planning] x → babcpus (原始: x is babcpus)
  75. [planning] x → babcpus (原始: x is babcpus)
  76. [actual] x → hebfpus (原始: x is hebfpus)
  77. [actual] hebfpus → lelnpus (原始: hebfpus is lelnpus)
  78. [actual] x → lelnpus (原始: x is lelnpus)
  79. [actual] x → joknpus and pomcpus (原始: x is joknpus and pomcpus)
  80. [planning] x → hebfpus (原始: x is hebfpus)
  81. [planning] x → joknpus and pomcpus (原始: x is joknpus and pomcpus)
  82. [actual] x → hebfpus (原始: x is hebfpus)
  83. [actual] x → joknpus and pomcpus (原始: x is joknpus and pomcpus)
  84. [actual] zocnpus → zaqdpus (原始: zocnpus is zaqdpus)
  85. [actual] joknpus → jeswpus (原始: joknpus is jeswpus)
  86. [actual] qehppus → babrpus and laybpus (原始: qehppus is babrpus and laybpus)
  87. [actual] yecbpus → hovrpus and wedkpus (原始: yecbpus is hovrpus and wedkpus)
  88. [actual] lelnpus → vujxpus (原始: lelnpus is vujxpus)
  89. [actual] x → hebfpus (原始: x is hebfpus)
  90. [actual] x → hebfpus (原始: x is hebfpus)
  91. [actual] gevmpus → panjpus (原始: gevmpus is panjpus)
  92. [actual] cubnpus → zocnpus and gidjpus (原始: cubnpus is zocnpus and gidjpus)
  93. [actual] jehvpus → wepppus (原始: jehvpus is wepppus)
  94. [actual] wepppus → jownpus and xadxpus (原始: wepppus is jownpus and xadxpus)
  95. [actual] hebfpus → lelnpus (原始: hebfpus is lelnpus)
  96. [actual] x → hebfpus (原始: x is hebfpus)
  97. [actual] x → lelnpus (原始: x is lelnpus)
  98. [actual] vujxpus → gevmpus (原始: vujxpus is gevmpus)
  99. [actual] lelnpus → vujxpus (原始: lelnpus is vujxpus)
  100. [actual] lelnpus → gevmpus (原始: lelnpus is gevmpus)
  101. [actual] x → gevmpus (原始: x is gevmpus)
  102. [actual] hufqpus → cubnpus (原始: hufqpus is cubnpus)
  103. [actual] zaqdpus → babcpus and nidfpus (原始: zaqdpus is babcpus and nidfpus)
  104. [actual] jownpus → yecbpus (原始: jownpus is yecbpus)
  105. [actual] hovrpus → qehppus and berfpus (原始: hovrpus is qehppus and berfpus)
  106. [actual] panjpus → hufqpus and wivrpus (原始: panjpus is hufqpus and wivrpus)
  107. [actual] gevmpus → panjpus (原始: gevmpus is panjpus)
  108. [planning] gevmpus → hufqpus and wivrpus (原始: gevmpus is hufqpus and wivrpus)
  109. [actual] gevmpus → panjpus (原始: gevmpus is panjpus)
  110. [actual] panjpus → hufqpus (原始: panjpus is hufqpus)
  111. [actual] gevmpus → hufqpus (原始: gevmpus is hufqpus)
  112. [planning] gevmpus → hufqpus (原始: gevmpus is hufqpus)
  113. [actual] gevmpus → wivrpus (原始: gevmpus is wivrpus)
  114. [actual] x → gevmpus (原始: x is gevmpus)
  115. [actual] x → hebfpus (原始: x is hebfpus)
  116. [actual] hebfpus → lelnpus (原始: hebfpus is lelnpus)
  117. [actual] x → lelnpus (原始: x is lelnpus)
  118. [actual] lelnpus → vujxpus (原始: lelnpus is vujxpus)
  119. [actual] x → vujxpus (原始: x is vujxpus)
  120. [actual] vujxpus → gevmpus (原始: vujxpus is gevmpus)
  121. [actual] x → gevmpus (原始: x is gevmpus)
  122. [actual] gevmpus → panjpus (原始: gevmpus is panjpus)
  123. [planning] x → panjpus (原始: x is panjpus)
  124. [actual] panjpus → hufqpus and wivrpus (原始: panjpus is hufqpus and wivrpus)
  125. [actual] panjpus → hufqpus and wivrpus (原始: panjpus is hufqpus and wivrpus)
  126. [actual] x → panjpus (原始: x is panjpus)
  127. [actual] panjpus → hufqpus (原始: panjpus is hufqpus)
  128. [planning] x → hufqpus (原始: x is hufqpus)
  129. [planning] x → panjpus (原始: x is panjpus)
  130. [planning] x → panjpus (原始: x is panjpus)
  131. [actual] panjpus → hufqpus (原始: panjpus is hufqpus)
  132. [actual] panjpus → hufqpus (原始: panjpus is hufqpus)
  133. [planning] panjpus → hufqpus (原始: panjpus is hufqpus)
  134. [actual] x → panjpus (原始: x is panjpus)
  135. [actual] panjpus → hufqpus (原始: panjpus is hufqpus)
  136. [actual] x → hufqpus (原始: x is hufqpus)
  137. [actual] panjpus → wivrpus (原始: panjpus is wivrpus)
  138. [planning] x → wivrpus (原始: x is wivrpus)
  139. [actual] x → hufqpus (原始: x is hufqpus)
  140. [planning] hufqpus → cubnpus (原始: hufqpus is cubnpus)
  141. [actual] hufqpus → cubnpus (原始: hufqpus is cubnpus)
  142. [actual] hufqpus → cubnpus (原始: hufqpus is cubnpus)
  143. [actual] x → hufqpus (原始: x is hufqpus)
  144. [actual] x → cubnpus (原始: x is cubnpus)
  145. [actual] cubnpus → zocnpus and gidjpus (原始: cubnpus is zocnpus and gidjpus)
  146. [actual] cubnpus → zocnpus and gidjpus (原始: cubnpus is zocnpus and gidjpus)
  147. [actual] x → cubnpus (原始: x is cubnpus)
  148. [actual] zocnpus → zaqdpus (原始: zocnpus is zaqdpus)
  149. [planning] x → zaqdpus (原始: x is zaqdpus)
  150. [actual] zaqdpus → babcpus and nidfpus (原始: zaqdpus is babcpus and nidfpus)
  151. [actual] zaqdpus → babcpus and nidfpus (原始: zaqdpus is babcpus and nidfpus)
  152. [actual] x → zaqdpus (原始: x is zaqdpus)
  153. [actual] x → babcpus (原始: x is babcpus)
  154. [actual] x → nidfpus (原始: x is nidfpus)
  155. [actual] x → babcpus (原始: x is babcpus)
  156. [planning] x → babrpus (原始: x is babrpus)
  157. [actual] qehppus → babrpus (原始: qehppus is babrpus)
  158. [actual] qehppus → laybpus (原始: qehppus is laybpus)
  159. [actual] qehppus → babrpus (原始: qehppus is babrpus)
  160. [actual] hovrpus → qehppus and berfpus (原始: hovrpus is qehppus and berfpus)
  161. [actual] hovrpus → qehppus and berfpus (原始: hovrpus is qehppus and berfpus)
  162. [planning] x → joknpus (原始: x is joknpus)
  163. [planning] x → joknpus and pomcpus (原始: x is joknpus and pomcpus)
  164. [actual] hufqpus → cubnpus (原始: hufqpus is cubnpus)
  165. [actual] zaqdpus → babcpus and nidfpus (原始: zaqdpus is babcpus and nidfpus)
  166. [actual] jownpus → yecbpus (原始: jownpus is yecbpus)
  167. [actual] hovrpus → qehppus and berfpus (原始: hovrpus is qehppus and berfpus)
  168. [actual] panjpus → hufqpus and wivrpus (原始: panjpus is hufqpus and wivrpus)
  169. [actual] x → joknpus and pomcpus (原始: x is joknpus and pomcpus)
  170. [planning] x → babgpus (原始: x is babgpus)
  171. [actual] gevmpus → panjpus (原始: gevmpus is panjpus)
  172. [actual] cubnpus → zocnpus and gidjpus (原始: cubnpus is zocnpus and gidjpus)
  173. [actual] jehvpus → wepppus (原始: jehvpus is wepppus)
  174. [actual] wepppus → jownpus and xadxpus (原始: wepppus is jownpus and xadxpus)
  175. [actual] hebfpus → lelnpus (原始: hebfpus is lelnpus)
  176. [actual] vujxpus → gevmpus (原始: vujxpus is gevmpus)
  177. [actual] hufqpus → cubnpus (原始: hufqpus is cubnpus)
  178. [actual] zaqdpus → babcpus and nidfpus (原始: zaqdpus is babcpus and nidfpus)
  179. [actual] jownpus → yecbpus (原始: jownpus is yecbpus)
  180. [actual] hovrpus → qehppus and berfpus (原始: hovrpus is qehppus and berfpus)
  181. [actual] panjpus → hufqpus and wivrpus (原始: panjpus is hufqpus and wivrpus)
  182. [actual] x → joknpus and pomcpus (原始: x is joknpus and pomcpus)
  183. [actual] jeswpus → jehvpus (原始: jeswpus is jehvpus)
  184. [actual] x → joknpus and pomcpus (原始: x is joknpus and pomcpus)
  185. [actual] x → joknpus and pomcpus (原始: x is joknpus and pomcpus)
  186. [actual] x → hebfpus (原始: x is hebfpus)
  187. [actual] hebfpus → babcpus (原始: hebfpus is babcpus)
  188. [planning] joknpus → jeswpus (原始: joknpus is jeswpus)
  189. [actual] joknpus → jeswpus (原始: joknpus is jeswpus)
  190. [planning] x → jeswpus (原始: x is jeswpus)
  191. [actual] x → joknpus (原始: x is joknpus)
  192. [actual] joknpus → jeswpus (原始: joknpus is jeswpus)
  193. [actual] x → jeswpus (原始: x is jeswpus)
  194. [planning] jeswpus → jehvpus (原始: jeswpus is jehvpus)
  195. [actual] jeswpus → jehvpus (原始: jeswpus is jehvpus)
  196. [actual] x → jehvpus (原始: x is jehvpus)
  197. [planning] jehvpus → wepppus (原始: jehvpus is wepppus)
  198. [actual] jehvpus → wepppus (原始: jehvpus is wepppus)
  199. [actual] x → wepppus (原始: x is wepppus)
  200. [actual] wepppus → jownpus (原始: wepppus is jownpus)
  201. [actual] wepppus → jownpus and xadxpus (原始: wepppus is jownpus and xadxpus)
  202. [actual] x → wepppus (原始: x is wepppus)
  203. [actual] x → jownpus (原始: x is jownpus)
  204. [actual] x → xadxpus (原始: x is xadxpus)
  205. [planning] jownpus → yecbpus (原始: jownpus is yecbpus)
  206. [actual] jownpus → yecbpus (原始: jownpus is yecbpus)
  207. [actual] x → yecbpus (原始: x is yecbpus)
  208. [actual] yecbpus → hovrpus and wedkpus (原始: yecbpus is hovrpus and wedkpus)
  209. [actual] yecbpus → hovrpus and wedkpus (原始: yecbpus is hovrpus and wedkpus)
  210. [actual] x → hovrpus (原始: x is hovrpus)
  211. [actual] x → wedkpus (原始: x is wedkpus)
  212. [actual] hovrpus → qehppus and berfpus (原始: hovrpus is qehppus and berfpus)
  213. [actual] hovrpus → qehppus and berfpus (原始: hovrpus is qehppus and berfpus)
  214. [planning] x → qehppus (原始: x is qehppus)
  215. [planning] x → berfpus (原始: x is berfpus)
  216. [actual] qehppus → babrpus and laybpus (原始: qehppus is babrpus and laybpus)
  217. [actual] qehppus → babrpus and laybpus (原始: qehppus is babrpus and laybpus)
  218. [actual] x → qehppus (原始: x is qehppus)
  219. [actual] x → babrpus (原始: x is babrpus)
  220. [actual] x → laybpus (原始: x is laybpus)
  221. [actual] x → babrpus (原始: x is babrpus)
  222. [actual] x → babcpus (原始: x is babcpus)
  223. [actual] x → babrpus (原始: x is babrpus)
  224. [actual] x → babcpus and babrpus (原始: x is babcpus and babrpus)
  225. [actual] x → babcpus (原始: x is babcpus)
  226. [actual] x → babrpus (原始: x is babrpus)
  227. [actual] x → pomcpus (原始: x is pomcpus)
  228. [actual] x → joknpus and pomcpus (原始: x is joknpus and pomcpus)
  229. [actual] x → babcpus and babrpus (原始: x is babcpus and babrpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 26
[后处理] 加载LoG图，包含 26 个节点
  LoG节点 0: x is babcpus and babrpus (规则: CI, 深度: 1)
  LoG节点 1: x is babcpus (规则: MP, 深度: 2)
  LoG节点 2: x is babrpus (规则: MP, 深度: 2)
  LoG节点 3: x is hufqpus (规则: MP, 深度: 3)
  LoG节点 4: hufqpus is babcpus (规则: MP, 深度: 3)
  LoG节点 5: x is jownpus (规则: MP, 深度: 3)
  LoG节点 6: jownpus is babrpus (规则: MP, 深度: 3)
  LoG节点 7: x is gevmpus (规则: MP, 深度: 4)
  LoG节点 8: gevmpus is hufqpus (规则: CE, 深度: 4)
  LoG节点 9: hufqpus is zocnpus (规则: CE, 深度: 4)
  LoG节点 10: zocnpus is babcpus (规则: CE, 深度: 4)
  LoG节点 11: x is jehvpus (规则: MP, 深度: 4)
  LoG节点 12: jehvpus is jownpus (规则: CE, 深度: 4)
  LoG节点 13: jownpus is hovrpus (规则: CE, 深度: 4)
  LoG节点 14: hovrpus is babrpus (规则: MP, 深度: 4)
  LoG节点 15: x is lelnpus (规则: MP, 深度: 5)
  LoG节点 16: lelnpus is gevmpus (规则: MP, 深度: 5)
  LoG节点 17: gevmpus is hufqpus and wivrpus (规则: MP, 深度: 5)
  LoG节点 18: hufqpus is zocnpus and gidjpus (规则: MP, 深度: 5)
  LoG节点 19: zocnpus is babcpus and nidfpus (规则: MP, 深度: 5)
  LoG节点 20: x is joknpus (规则: CE, 深度: 5)
  LoG节点 21: joknpus is jehvpus (规则: MP, 深度: 5)
  LoG节点 22: jehvpus is jownpus and xadxpus (规则: MP, 深度: 5)
  LoG节点 23: jownpus is hovrpus and wedkpus (规则: MP, 深度: 5)
  LoG节点 24: hovrpus is qehppus (规则: CE, 深度: 5)
  LoG节点 25: qehppus is babrpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 229
   - 初始条件数: 19
   - LoG图节点数: 26

📋 初始条件列表:
    1. zocnpus is zaqdpus
    2. joknpus is jeswpus
    3. qehppus is babrpus and laybpus
    4. yecbpus is hovrpus and wedkpus
    5. lelnpus is vujxpus
    6. x is hebfpus
    7. gevmpus is panjpus
    8. cubnpus is zocnpus and gidjpus
    9. jehvpus is wepppus
   10. wepppus is jownpus and xadxpus
   11. hebfpus is lelnpus
   12. vujxpus is gevmpus
   13. hufqpus is cubnpus
   14. zaqdpus is babcpus and nidfpus
   15. jownpus is yecbpus
   16. hovrpus is qehppus and berfpus
   17. panjpus is hufqpus and wivrpus
   18. x is joknpus and pomcpus
   19. jeswpus is jehvpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 19 个前提节点

🔍 开始处理actual节点...

   节点 1: x is hebfpus
      ↻ 重复节点，计数: 2

   节点 2: hebfpus is lelnpus
      ↻ 重复节点，计数: 2

   节点 3: lelnpus is vujxpus
      ↻ 重复节点，计数: 2

   节点 4: vujxpus is gevmpus
      ↻ 重复节点，计数: 2

   节点 5: gevmpus is panjpus
      ↻ 重复节点，计数: 2

   节点 6: panjpus is hufqpus and wivrpus
      ↻ 重复节点，计数: 2

   节点 7: hufqpus is cubnpus
      ↻ 重复节点，计数: 2

   节点 8: cubnpus is zocnpus and gidjpus
      ↻ 重复节点，计数: 2

   节点 9: zocnpus is zaqdpus
      ↻ 重复节点，计数: 2

   节点 10: zaqdpus is babcpus and nidfpus
      ↻ 重复节点，计数: 2

   节点 11: x is hebfpus
      ↻ 重复节点，计数: 3

   节点 12: hebfpus is lelnpus
      ↻ 重复节点，计数: 3

   节点 13: x is lelnpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is lelnpus
      ✅ 验证成功 + LoG匹配

   节点 14: lelnpus is vujxpus
      ↻ 重复节点，计数: 3

   节点 15: vujxpus is gevmpus
      ↻ 重复节点，计数: 3

   节点 16: x is gevmpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is gevmpus
[子树点亮]     └─ 点亮依赖节点: lelnpus is gevmpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 17: gevmpus is panjpus
      ↻ 重复节点，计数: 3

   节点 18: panjpus is hufqpus and wivrpus
      ↻ 重复节点，计数: 3

   节点 19: x is hebfpus
      ↻ 重复节点，计数: 4

   节点 20: hebfpus is lelnpus
      ↻ 重复节点，计数: 4

   节点 21: x is lelnpus
      ↻ 重复节点，计数: 2

   节点 22: x is panjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is hebfpus → hebfpus is panjpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is hebfpus
  - 前提: hebfpus is lelnpus
  - 前提: lelnpus is vujxpus
  - 前提: vujxpus is gevmpus
  - 前提: gevmpus is panjpus

   节点 23: panjpus is hufqpus and wivrpus
      ↻ 重复节点，计数: 4

   节点 24: zocnpus is zaqdpus
      ↻ 重复节点，计数: 3

   节点 25: zaqdpus is babcpus and nidfpus
      ↻ 重复节点，计数: 3

   节点 26: qehppus is babrpus and laybpus
      ↻ 重复节点，计数: 2

   节点 27: yecbpus is hovrpus and wedkpus
      ↻ 重复节点，计数: 2

   节点 28: panjpus is hufqpus and wivrpus
      ↻ 重复节点，计数: 5

   节点 29: hufqpus is cubnpus
      ↻ 重复节点，计数: 3

   节点 30: cubnpus is zocnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: cubnpus is zocnpus and gidjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: cubnpus is zocnpus and gidjpus

   节点 31: panjpus is hufqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: panjpus is hufqpus and wivrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: panjpus is hufqpus and wivrpus

   节点 32: hufqpus is cubnpus
      ↻ 重复节点，计数: 4

   节点 33: gevmpus is panjpus
      ↻ 重复节点，计数: 4

   节点 34: vujxpus is gevmpus
      ↻ 重复节点，计数: 4

   节点 35: panjpus is hufqpus and wivrpus
      ↻ 重复节点，计数: 6

   节点 36: gevmpus is panjpus
      ↻ 重复节点，计数: 5

   节点 37: vujxpus is gevmpus
      ↻ 重复节点，计数: 5

   节点 38: vujxpus is panjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: vujxpus is gevmpus → gevmpus is panjpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: vujxpus is gevmpus
  - 前提: gevmpus is panjpus

   节点 39: hufqpus is cubnpus
      ↻ 重复节点，计数: 5

   节点 40: hufqpus is cubnpus
      ↻ 重复节点，计数: 6

   节点 41: panjpus is hufqpus
      ↻ 重复节点，计数: 2

   节点 42: panjpus is cubnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: panjpus is hufqpus → hufqpus is cubnpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: panjpus is hufqpus
  - 前提: hufqpus is cubnpus

   节点 43: cubnpus is zocnpus and gidjpus
      ↻ 重复节点，计数: 3

   节点 44: cubnpus is zocnpus
      ↻ 重复节点，计数: 2

   节点 45: zocnpus is zaqdpus
      ↻ 重复节点，计数: 4

   节点 46: zocnpus is zaqdpus
      ↻ 重复节点，计数: 5

   节点 47: zaqdpus is babcpus and nidfpus
      ↻ 重复节点，计数: 4

   节点 48: zaqdpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zaqdpus is babcpus and nidfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zaqdpus is babcpus and nidfpus

   节点 49: x is panjpus
      ↻ 重复节点，计数: 2

   节点 50: panjpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: panjpus is hufqpus → hufqpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: panjpus is hufqpus
  - 前提: hufqpus is cubnpus
  - 前提: cubnpus is zocnpus
  - 前提: zocnpus is zaqdpus
  - 前提: zaqdpus is babcpus
  ✓ 点亮LoG节点: hufqpus is babcpus
[子树点亮]     └─ 点亮依赖节点: hufqpus is zocnpus (深度4)
[子树点亮]     └─ 点亮依赖节点: zocnpus is babcpus (深度4)
[子树点亮]     └─ 点亮依赖节点: hufqpus is zocnpus and gidjpus (深度5)
[子树点亮]     └─ 点亮依赖节点: zocnpus is babcpus and nidfpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 51: x is hebfpus
      ↻ 重复节点，计数: 5

   节点 52: hebfpus is lelnpus
      ↻ 重复节点，计数: 5

   节点 53: x is lelnpus
      ↻ 重复节点，计数: 3

   节点 54: x is joknpus and pomcpus
      ↻ 重复节点，计数: 2

   节点 55: x is hebfpus
      ↻ 重复节点，计数: 6

   节点 56: x is joknpus and pomcpus
      ↻ 重复节点，计数: 3

   节点 57: zocnpus is zaqdpus
      ↻ 重复节点，计数: 6

   节点 58: joknpus is jeswpus
      ↻ 重复节点，计数: 2

   节点 59: qehppus is babrpus and laybpus
      ↻ 重复节点，计数: 3

   节点 60: yecbpus is hovrpus and wedkpus
      ↻ 重复节点，计数: 3

   节点 61: lelnpus is vujxpus
      ↻ 重复节点，计数: 4

   节点 62: x is hebfpus
      ↻ 重复节点，计数: 7

   节点 63: x is hebfpus
      ↻ 重复节点，计数: 8

   节点 64: gevmpus is panjpus
      ↻ 重复节点，计数: 6

   节点 65: cubnpus is zocnpus and gidjpus
      ↻ 重复节点，计数: 4

   节点 66: jehvpus is wepppus
      ↻ 重复节点，计数: 2

   节点 67: wepppus is jownpus and xadxpus
      ↻ 重复节点，计数: 2

   节点 68: hebfpus is lelnpus
      ↻ 重复节点，计数: 6

   节点 69: x is hebfpus
      ↻ 重复节点，计数: 9

   节点 70: x is lelnpus
      ↻ 重复节点，计数: 4

   节点 71: vujxpus is gevmpus
      ↻ 重复节点，计数: 6

   节点 72: lelnpus is vujxpus
      ↻ 重复节点，计数: 5

   节点 73: lelnpus is gevmpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 74: x is gevmpus
      ↻ 重复节点，计数: 2

   节点 75: hufqpus is cubnpus
      ↻ 重复节点，计数: 7

   节点 76: zaqdpus is babcpus and nidfpus
      ↻ 重复节点，计数: 5

   节点 77: jownpus is yecbpus
      ↻ 重复节点，计数: 2

   节点 78: hovrpus is qehppus and berfpus
      ↻ 重复节点，计数: 2

   节点 79: panjpus is hufqpus and wivrpus
      ↻ 重复节点，计数: 7

   节点 80: gevmpus is panjpus
      ↻ 重复节点，计数: 7

   节点 81: gevmpus is panjpus
      ↻ 重复节点，计数: 8

   节点 82: panjpus is hufqpus
      ↻ 重复节点，计数: 3

   节点 83: gevmpus is hufqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: gevmpus is hufqpus
[子树点亮]     └─ 点亮依赖节点: gevmpus is hufqpus and wivrpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 84: gevmpus is wivrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: gevmpus is panjpus → panjpus is wivrpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: gevmpus is panjpus
  - 前提: panjpus is hufqpus and wivrpus

   节点 85: x is gevmpus
      ↻ 重复节点，计数: 3

   节点 86: x is hebfpus
      ↻ 重复节点，计数: 10

   节点 87: hebfpus is lelnpus
      ↻ 重复节点，计数: 7

   节点 88: x is lelnpus
      ↻ 重复节点，计数: 5

   节点 89: lelnpus is vujxpus
      ↻ 重复节点，计数: 6

   节点 90: x is vujxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is hebfpus → hebfpus is vujxpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is hebfpus
  - 前提: hebfpus is lelnpus
  - 前提: lelnpus is vujxpus

   节点 91: vujxpus is gevmpus
      ↻ 重复节点，计数: 7

   节点 92: x is gevmpus
      ↻ 重复节点，计数: 4

   节点 93: gevmpus is panjpus
      ↻ 重复节点，计数: 9

   节点 94: panjpus is hufqpus and wivrpus
      ↻ 重复节点，计数: 8

   节点 95: panjpus is hufqpus and wivrpus
      ↻ 重复节点，计数: 9

   节点 96: x is panjpus
      ↻ 重复节点，计数: 3

   节点 97: panjpus is hufqpus
      ↻ 重复节点，计数: 4

   节点 98: panjpus is hufqpus
      ↻ 重复节点，计数: 5

   节点 99: panjpus is hufqpus
      ↻ 重复节点，计数: 6

   节点 100: x is panjpus
      ↻ 重复节点，计数: 4

   节点 101: panjpus is hufqpus
      ↻ 重复节点，计数: 7

   节点 102: x is hufqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is hufqpus
      ✅ 验证成功 + LoG匹配

   节点 103: panjpus is wivrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: panjpus is hufqpus and wivrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: panjpus is hufqpus and wivrpus

   节点 104: x is hufqpus
      ↻ 重复节点，计数: 2

   节点 105: hufqpus is cubnpus
      ↻ 重复节点，计数: 8

   节点 106: hufqpus is cubnpus
      ↻ 重复节点，计数: 9

   节点 107: x is hufqpus
      ↻ 重复节点，计数: 3

   节点 108: x is cubnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is hebfpus → hebfpus is cubnpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is hebfpus
  - 前提: hebfpus is lelnpus
  - 前提: lelnpus is vujxpus
  - 前提: vujxpus is gevmpus
  - 前提: gevmpus is panjpus
  - 前提: panjpus is cubnpus

   节点 109: cubnpus is zocnpus and gidjpus
      ↻ 重复节点，计数: 5

   节点 110: cubnpus is zocnpus and gidjpus
      ↻ 重复节点，计数: 6

   节点 111: x is cubnpus
      ↻ 重复节点，计数: 2

   节点 112: zocnpus is zaqdpus
      ↻ 重复节点，计数: 7

   节点 113: zaqdpus is babcpus and nidfpus
      ↻ 重复节点，计数: 6

   节点 114: zaqdpus is babcpus and nidfpus
      ↻ 重复节点，计数: 7

   节点 115: x is zaqdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is hebfpus → hebfpus is zaqdpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is hebfpus
  - 前提: hebfpus is lelnpus
  - 前提: lelnpus is vujxpus
  - 前提: vujxpus is gevmpus
  - 前提: gevmpus is panjpus
  - 前提: panjpus is hufqpus
  - 前提: hufqpus is cubnpus
  - 前提: cubnpus is zocnpus
  - 前提: zocnpus is zaqdpus

   节点 116: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
      ✅ 验证成功 + LoG匹配

   节点 117: x is nidfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is hebfpus → hebfpus is nidfpus
[后处理] 基于推理轨迹点亮节点，使用了 10 个前提条件:
  - 前提: x is hebfpus
  - 前提: hebfpus is lelnpus
  - 前提: lelnpus is vujxpus
  - 前提: vujxpus is gevmpus
  - 前提: gevmpus is panjpus
  - 前提: panjpus is hufqpus
  - 前提: hufqpus is cubnpus
  - 前提: cubnpus is zocnpus
  - 前提: zocnpus is zaqdpus
  - 前提: zaqdpus is babcpus and nidfpus

   节点 118: x is babcpus
      ↻ 重复节点，计数: 2

   节点 119: qehppus is babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: qehppus is babrpus
      ✅ 验证成功 + LoG匹配

   节点 120: qehppus is laybpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qehppus is babrpus and laybpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qehppus is babrpus and laybpus

   节点 121: qehppus is babrpus
      ↻ 重复节点，计数: 2

   节点 122: hovrpus is qehppus and berfpus
      ↻ 重复节点，计数: 3

   节点 123: hovrpus is qehppus and berfpus
      ↻ 重复节点，计数: 4

   节点 124: hufqpus is cubnpus
      ↻ 重复节点，计数: 10

   节点 125: zaqdpus is babcpus and nidfpus
      ↻ 重复节点，计数: 8

   节点 126: jownpus is yecbpus
      ↻ 重复节点，计数: 3

   节点 127: hovrpus is qehppus and berfpus
      ↻ 重复节点，计数: 5

   节点 128: panjpus is hufqpus and wivrpus
      ↻ 重复节点，计数: 10

   节点 129: x is joknpus and pomcpus
      ↻ 重复节点，计数: 4

   节点 130: gevmpus is panjpus
      ↻ 重复节点，计数: 10

   节点 131: cubnpus is zocnpus and gidjpus
      ↻ 重复节点，计数: 7

   节点 132: jehvpus is wepppus
      ↻ 重复节点，计数: 3

   节点 133: wepppus is jownpus and xadxpus
      ↻ 重复节点，计数: 3

   节点 134: hebfpus is lelnpus
      ↻ 重复节点，计数: 8

   节点 135: vujxpus is gevmpus
      ↻ 重复节点，计数: 8

   节点 136: hufqpus is cubnpus
      ↻ 重复节点，计数: 11

   节点 137: zaqdpus is babcpus and nidfpus
      ↻ 重复节点，计数: 9

   节点 138: jownpus is yecbpus
      ↻ 重复节点，计数: 4

   节点 139: hovrpus is qehppus and berfpus
      ↻ 重复节点，计数: 6

   节点 140: panjpus is hufqpus and wivrpus
      ↻ 重复节点，计数: 11

   节点 141: x is joknpus and pomcpus
      ↻ 重复节点，计数: 5

   节点 142: jeswpus is jehvpus
      ↻ 重复节点，计数: 2

   节点 143: x is joknpus and pomcpus
      ↻ 重复节点，计数: 6

   节点 144: x is joknpus and pomcpus
      ↻ 重复节点，计数: 7

   节点 145: x is hebfpus
      ↻ 重复节点，计数: 11

   节点 146: hebfpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: hebfpus is lelnpus → lelnpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: hebfpus is lelnpus
  - 前提: lelnpus is vujxpus
  - 前提: vujxpus is gevmpus
  - 前提: gevmpus is panjpus
  - 前提: panjpus is babcpus

   节点 147: joknpus is jeswpus
      ↻ 重复节点，计数: 3

   节点 148: x is joknpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is joknpus
      ✅ 验证成功 + LoG匹配

   节点 149: joknpus is jeswpus
      ↻ 重复节点，计数: 4

   节点 150: x is jeswpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is joknpus → joknpus is jeswpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is joknpus
  - 前提: joknpus is jeswpus

   节点 151: jeswpus is jehvpus
      ↻ 重复节点，计数: 3

   节点 152: x is jehvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is jehvpus
[子树点亮]     └─ 点亮依赖节点: joknpus is jehvpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 153: jehvpus is wepppus
      ↻ 重复节点，计数: 4

   节点 154: x is wepppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is joknpus → joknpus is wepppus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is joknpus
  - 前提: joknpus is jeswpus
  - 前提: jeswpus is jehvpus
  - 前提: jehvpus is wepppus

   节点 155: wepppus is jownpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wepppus is jownpus and xadxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wepppus is jownpus and xadxpus

   节点 156: wepppus is jownpus and xadxpus
      ↻ 重复节点，计数: 4

   节点 157: x is wepppus
      ↻ 重复节点，计数: 2

   节点 158: x is jownpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is jownpus
[子树点亮]     └─ 点亮依赖节点: jehvpus is jownpus (深度4)
[子树点亮]     └─ 点亮依赖节点: jehvpus is jownpus and xadxpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 159: x is xadxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is joknpus → joknpus is xadxpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is joknpus
  - 前提: joknpus is jeswpus
  - 前提: jeswpus is jehvpus
  - 前提: jehvpus is wepppus
  - 前提: wepppus is jownpus and xadxpus

   节点 160: jownpus is yecbpus
      ↻ 重复节点，计数: 5

   节点 161: x is yecbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is joknpus → joknpus is yecbpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is joknpus
  - 前提: joknpus is jeswpus
  - 前提: jeswpus is jehvpus
  - 前提: jehvpus is wepppus
  - 前提: wepppus is jownpus
  - 前提: jownpus is yecbpus

   节点 162: yecbpus is hovrpus and wedkpus
      ↻ 重复节点，计数: 4

   节点 163: yecbpus is hovrpus and wedkpus
      ↻ 重复节点，计数: 5

   节点 164: x is hovrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is joknpus → joknpus is hovrpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is joknpus
  - 前提: joknpus is jeswpus
  - 前提: jeswpus is jehvpus
  - 前提: jehvpus is wepppus
  - 前提: wepppus is jownpus
  - 前提: jownpus is yecbpus
  - 前提: yecbpus is hovrpus and wedkpus
  ✓ 点亮LoG节点: jownpus is hovrpus
[子树点亮]     └─ 点亮依赖节点: jownpus is hovrpus and wedkpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 165: x is wedkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is joknpus → joknpus is wedkpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is joknpus
  - 前提: joknpus is jeswpus
  - 前提: jeswpus is jehvpus
  - 前提: jehvpus is wepppus
  - 前提: wepppus is jownpus
  - 前提: jownpus is yecbpus
  - 前提: yecbpus is hovrpus and wedkpus

   节点 166: hovrpus is qehppus and berfpus
      ↻ 重复节点，计数: 7

   节点 167: hovrpus is qehppus and berfpus
      ↻ 重复节点，计数: 8

   节点 168: qehppus is babrpus and laybpus
      ↻ 重复节点，计数: 4

   节点 169: qehppus is babrpus and laybpus
      ↻ 重复节点，计数: 5

   节点 170: x is qehppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is joknpus → joknpus is qehppus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is joknpus
  - 前提: joknpus is jeswpus
  - 前提: jeswpus is jehvpus
  - 前提: jehvpus is wepppus
  - 前提: wepppus is jownpus
  - 前提: jownpus is yecbpus
  - 前提: yecbpus is hovrpus and wedkpus
  - 前提: hovrpus is qehppus and berfpus
  ✓ 点亮LoG节点: hovrpus is qehppus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 171: x is babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babrpus
[子树点亮]     └─ 点亮依赖节点: jownpus is babrpus (深度3)
[子树点亮]     └─ 点亮依赖节点: hovrpus is babrpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 172: x is laybpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is joknpus → joknpus is laybpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is joknpus
  - 前提: joknpus is jeswpus
  - 前提: jeswpus is jehvpus
  - 前提: jehvpus is wepppus
  - 前提: wepppus is jownpus
  - 前提: jownpus is yecbpus
  - 前提: yecbpus is hovrpus and wedkpus
  - 前提: hovrpus is qehppus and berfpus
  - 前提: qehppus is laybpus

   节点 173: x is babrpus
      ↻ 重复节点，计数: 2

   节点 174: x is babcpus
      ↻ 重复节点，计数: 3

   节点 175: x is babrpus
      ↻ 重复节点，计数: 3

   节点 176: x is babcpus and babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus and babrpus
      ✅ 验证成功 + LoG匹配

   节点 177: x is babcpus
      ↻ 重复节点，计数: 4

   节点 178: x is babrpus
      ↻ 重复节点，计数: 4

   节点 179: x is pomcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is joknpus and pomcpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is joknpus and pomcpus

   节点 180: x is joknpus and pomcpus
      ↻ 重复节点，计数: 8

   节点 181: x is babcpus and babrpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 181
   - 新增节点: 37
   - 更新已存在节点: 144
   - 点亮的LoG节点: 26

🎯 推理质量统计:
   - 完美推理: 37 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 26节点, 19前提, 复杂度1-19

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 56
   - 前提节点: 19
   - 推理节点: 37
   - 幻觉节点: 0
   - 点亮LoG节点: 26

✅ 推理节点详情:
   🟢 x is lelnpus (出现5次, 质量:perfect)
   🟢 x is gevmpus (出现4次, 质量:perfect)
   🟢 x is panjpus (出现4次, 质量:perfect)
   🟢 cubnpus is zocnpus (出现2次, 质量:perfect)
   🟢 panjpus is hufqpus (出现7次, 质量:perfect)
   🟢 vujxpus is panjpus (出现1次, 质量:perfect)
   🟢 panjpus is cubnpus (出现1次, 质量:perfect)
   🟢 zaqdpus is babcpus (出现1次, 质量:perfect)
   🟢 panjpus is babcpus (出现1次, 质量:perfect)
   🟢 lelnpus is gevmpus (出现1次, 质量:perfect)
   🟢 gevmpus is hufqpus (出现1次, 质量:perfect)
   🟢 gevmpus is wivrpus (出现1次, 质量:perfect)
   🟢 x is vujxpus (出现1次, 质量:perfect)
   🟢 x is hufqpus (出现3次, 质量:perfect)
   🟢 panjpus is wivrpus (出现1次, 质量:perfect)
   🟢 x is cubnpus (出现2次, 质量:perfect)
   🟢 x is zaqdpus (出现1次, 质量:perfect)
   🟢 x is babcpus (出现4次, 质量:perfect)
   🟢 x is nidfpus (出现1次, 质量:perfect)
   🟢 qehppus is babrpus (出现2次, 质量:perfect)
   🟢 qehppus is laybpus (出现1次, 质量:perfect)
   🟢 hebfpus is babcpus (出现1次, 质量:perfect)
   🟢 x is joknpus (出现1次, 质量:perfect)
   🟢 x is jeswpus (出现1次, 质量:perfect)
   🟢 x is jehvpus (出现1次, 质量:perfect)
   🟢 x is wepppus (出现2次, 质量:perfect)
   🟢 wepppus is jownpus (出现1次, 质量:perfect)
   🟢 x is jownpus (出现1次, 质量:perfect)
   🟢 x is xadxpus (出现1次, 质量:perfect)
   🟢 x is yecbpus (出现1次, 质量:perfect)
   🟢 x is hovrpus (出现1次, 质量:perfect)
   🟢 x is wedkpus (出现1次, 质量:perfect)
   🟢 x is qehppus (出现1次, 质量:perfect)
   🟢 x is babrpus (出现4次, 质量:perfect)
   🟢 x is laybpus (出现1次, 质量:perfect)
   🟢 x is babcpus and babrpus (出现2次, 质量:perfect)
   🟢 x is pomcpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is joknpus
   - x is hufqpus
   - zocnpus is babcpus
   - x is gevmpus
   - lelnpus is gevmpus
   - gevmpus is hufqpus
   - hufqpus is babcpus
   - x is jehvpus
   - gevmpus is hufqpus and wivrpus
   - jownpus is hovrpus and wedkpus
   - joknpus is jehvpus
   - hufqpus is zocnpus and gidjpus
   - hufqpus is zocnpus
   - jehvpus is jownpus
   - x is jownpus
   - qehppus is babrpus
   - hovrpus is babrpus
   - x is babcpus
   - x is lelnpus
   - jehvpus is jownpus and xadxpus
   - jownpus is hovrpus
   - jownpus is babrpus
   - hovrpus is qehppus
   - x is babrpus
   - x is babcpus and babrpus
   - zocnpus is babcpus and nidfpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus and babrpus (第5层)
   节点Coverage: 26/26 = 100.00%
   前提条件Coverage: 19/19 = 100.00%
   各推理层点亮比例:
     第1层: 11/11 = 100.00%
     第2层: 8/8 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/37 = 0.00%
   可推导节点: 37/37
   Strict Error Rate: 0/37 = 0.00%
   严格有效节点: 37/37

   详细分析:
     完美推理: 37 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 48/50
================================================================================
记录索引: 47
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_47.json
✅ 使用缓存结果:
   - 句子数: 42
   - 提取的语句数: 44
   - 初始条件数: 6

=== Statement提取完成 ===
总句子数: 42
成功提取: 42
失败提取: 0
总statements数: 44

=== 开始清洗Statement格式 ===
原始statements数: 44
清洗后statements数: 41
过滤掉的statements数: 3
清洗后的statements:
  1. [actual] gocgpus is canrpus
  2. [actual] yomzpus is divgpus and wodvpus
  3. [actual] canrpus is yomzpus and rihrpus
  4. [actual] wimbpus is gocgpus and wannpus
  5. [actual] x is wimbpus
  6. [actual] divgpus is babcpus and waxqpus and penkpus and lobtpus
  7. [planning] x is babcpus
  8. [actual] x is wimbpus
  9. [actual] wimbpus is gocgpus and wannpus
  10. [actual] x is gocgpus and wannpus
  11. [actual] gocgpus is canrpus
  12. [actual] x is canrpus
  13. [actual] gocgpus is wimbpus and x is gocgpus
  14. [actual] canrpus is yomzpus and rihrpus
  15. [actual] x is yomzpus and rihrpus
  16. [actual] yomzpus is divgpus and wodvpus
  17. [planning] x is divgpus and wodvpus
  18. [actual] divgpus is babcpus and waxqpus and penkpus and lobtpus
  19. [planning] x is babcpus
  20. [actual] x is wimbpus
  21. [actual] wimbpus is gocgpus and wannpus
  22. [actual] x is gocgpus
  23. [actual] x is wannpus
  24. [actual] gocgpus is canrpus
  25. [actual] x is canrpus
  26. [actual] canrpus is yomzpus and rihrpus
  27. [actual] x is yomzpus
  28. [actual] x is rihrpus
  29. [actual] yomzpus is divgpus and wodvpus
  30. [actual] x is divgpus
  31. [actual] x is wodvpus
  32. [actual] divgpus is babcpus and waxqpus and penkpus and lobtpus
  33. [actual] x is divgpus
  34. [actual] x is babcpus
  35. [actual] x is babcpus
  36. [actual] divgpus is babcpus
  37. [actual] divgpus is babcpus
  38. [actual] babcpus is a category that contains divgpus
  39. [actual] x is divgpus
  40. [actual] divgpus is babcpus
  41. [planning] x is babcpus

=== 开始标准化和解析节点 ===
清洗后statements数: 41
标准化后节点数: 39
过滤掉的无效实体数: 2
标准化后的节点:
  1. [actual] gocgpus → canrpus (原始: gocgpus is canrpus)
  2. [actual] yomzpus → divgpus and wodvpus (原始: yomzpus is divgpus and wodvpus)
  3. [actual] canrpus → yomzpus and rihrpus (原始: canrpus is yomzpus and rihrpus)
  4. [actual] wimbpus → gocgpus and wannpus (原始: wimbpus is gocgpus and wannpus)
  5. [actual] x → wimbpus (原始: x is wimbpus)
  6. [actual] divgpus → babcpus and waxqpus and penkpus and lobtpus (原始: divgpus is babcpus and waxqpus and penkpus and lobtpus)
  7. [planning] x → babcpus (原始: x is babcpus)
  8. [actual] x → wimbpus (原始: x is wimbpus)
  9. [actual] wimbpus → gocgpus and wannpus (原始: wimbpus is gocgpus and wannpus)
  10. [actual] x → gocgpus and wannpus (原始: x is gocgpus and wannpus)
  11. [actual] gocgpus → canrpus (原始: gocgpus is canrpus)
  12. [actual] x → canrpus (原始: x is canrpus)
  13. [actual] canrpus → yomzpus and rihrpus (原始: canrpus is yomzpus and rihrpus)
  14. [actual] x → yomzpus and rihrpus (原始: x is yomzpus and rihrpus)
  15. [actual] yomzpus → divgpus and wodvpus (原始: yomzpus is divgpus and wodvpus)
  16. [planning] x → divgpus and wodvpus (原始: x is divgpus and wodvpus)
  17. [actual] divgpus → babcpus and waxqpus and penkpus and lobtpus (原始: divgpus is babcpus and waxqpus and penkpus and lobtpus)
  18. [planning] x → babcpus (原始: x is babcpus)
  19. [actual] x → wimbpus (原始: x is wimbpus)
  20. [actual] wimbpus → gocgpus and wannpus (原始: wimbpus is gocgpus and wannpus)
  21. [actual] x → gocgpus (原始: x is gocgpus)
  22. [actual] x → wannpus (原始: x is wannpus)
  23. [actual] gocgpus → canrpus (原始: gocgpus is canrpus)
  24. [actual] x → canrpus (原始: x is canrpus)
  25. [actual] canrpus → yomzpus and rihrpus (原始: canrpus is yomzpus and rihrpus)
  26. [actual] x → yomzpus (原始: x is yomzpus)
  27. [actual] x → rihrpus (原始: x is rihrpus)
  28. [actual] yomzpus → divgpus and wodvpus (原始: yomzpus is divgpus and wodvpus)
  29. [actual] x → divgpus (原始: x is divgpus)
  30. [actual] x → wodvpus (原始: x is wodvpus)
  31. [actual] divgpus → babcpus and waxqpus and penkpus and lobtpus (原始: divgpus is babcpus and waxqpus and penkpus and lobtpus)
  32. [actual] x → divgpus (原始: x is divgpus)
  33. [actual] x → babcpus (原始: x is babcpus)
  34. [actual] x → babcpus (原始: x is babcpus)
  35. [actual] divgpus → babcpus (原始: divgpus is babcpus)
  36. [actual] divgpus → babcpus (原始: divgpus is babcpus)
  37. [actual] x → divgpus (原始: x is divgpus)
  38. [actual] divgpus → babcpus (原始: divgpus is babcpus)
  39. [planning] x → babcpus (原始: x is babcpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 11
[后处理] 加载LoG图，包含 11 个节点
  LoG节点 0: x is babcpus (规则: CE, 深度: 1)
  LoG节点 1: x is babcpus and waxqpus (规则: MP, 深度: 2)
  LoG节点 2: x is yomzpus (规则: MP, 深度: 3)
  LoG节点 3: yomzpus is babcpus and waxqpus (规则: CE, 深度: 3)
  LoG节点 4: x is gocgpus (规则: CE, 深度: 4)
  LoG节点 5: gocgpus is yomzpus (规则: CE, 深度: 4)
  LoG节点 6: yomzpus is babcpus and waxqpus and penkpus (规则: MP, 深度: 4)
  LoG节点 7: x is gocgpus and wannpus (规则: MP, 深度: 5)
  LoG节点 8: gocgpus is yomzpus and rihrpus (规则: MP, 深度: 5)
  LoG节点 9: yomzpus is divgpus (规则: CE, 深度: 5)
  LoG节点 10: divgpus is babcpus and waxqpus and penkpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 39
   - 初始条件数: 6
   - LoG图节点数: 11

📋 初始条件列表:
    1. gocgpus is canrpus
    2. yomzpus is divgpus and wodvpus
    3. canrpus is yomzpus and rihrpus
    4. wimbpus is gocgpus and wannpus
    5. x is wimbpus
    6. divgpus is babcpus and waxqpus and penkpus and lobtpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 6 个前提节点

🔍 开始处理actual节点...

   节点 1: gocgpus is canrpus
      ↻ 重复节点，计数: 2

   节点 2: yomzpus is divgpus and wodvpus
      ↻ 重复节点，计数: 2

   节点 3: canrpus is yomzpus and rihrpus
      ↻ 重复节点，计数: 2

   节点 4: wimbpus is gocgpus and wannpus
      ↻ 重复节点，计数: 2

   节点 5: x is wimbpus
      ↻ 重复节点，计数: 2

   节点 6: divgpus is babcpus and waxqpus and penkpus and lobtpus
      ↻ 重复节点，计数: 2

   节点 7: x is wimbpus
      ↻ 重复节点，计数: 3

   节点 8: wimbpus is gocgpus and wannpus
      ↻ 重复节点，计数: 3

   节点 9: x is gocgpus and wannpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is gocgpus and wannpus
      ✅ 验证成功 + LoG匹配

   节点 10: gocgpus is canrpus
      ↻ 重复节点，计数: 3

   节点 11: x is canrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wimbpus → wimbpus is canrpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is wimbpus
  - 前提: wimbpus is gocgpus and wannpus
  - 前提: gocgpus is canrpus
  ✓ 点亮LoG节点: x is gocgpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 12: canrpus is yomzpus and rihrpus
      ↻ 重复节点，计数: 3

   节点 13: x is yomzpus and rihrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wimbpus → wimbpus is yomzpus and rihrpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is wimbpus
  - 前提: wimbpus is gocgpus and wannpus
  - 前提: gocgpus is canrpus
  - 前提: canrpus is yomzpus and rihrpus
  ✓ 点亮LoG节点: x is yomzpus
[子树点亮]     └─ 点亮依赖节点: gocgpus is yomzpus (深度4)
[子树点亮]     └─ 点亮依赖节点: gocgpus is yomzpus and rihrpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 14: yomzpus is divgpus and wodvpus
      ↻ 重复节点，计数: 3

   节点 15: divgpus is babcpus and waxqpus and penkpus and lobtpus
      ↻ 重复节点，计数: 3

   节点 16: x is wimbpus
      ↻ 重复节点，计数: 4

   节点 17: wimbpus is gocgpus and wannpus
      ↻ 重复节点，计数: 4

   节点 18: x is gocgpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 19: x is wannpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is gocgpus and wannpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is gocgpus and wannpus

   节点 20: gocgpus is canrpus
      ↻ 重复节点，计数: 4

   节点 21: x is canrpus
      ↻ 重复节点，计数: 2

   节点 22: canrpus is yomzpus and rihrpus
      ↻ 重复节点，计数: 4

   节点 23: x is yomzpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 24: x is rihrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is yomzpus and rihrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is yomzpus and rihrpus

   节点 25: yomzpus is divgpus and wodvpus
      ↻ 重复节点，计数: 4

   节点 26: x is divgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wimbpus → wimbpus is divgpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is wimbpus
  - 前提: wimbpus is gocgpus and wannpus
  - 前提: gocgpus is canrpus
  - 前提: canrpus is yomzpus and rihrpus
  - 前提: yomzpus is divgpus and wodvpus
  ✓ 点亮LoG节点: yomzpus is divgpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 27: x is wodvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wimbpus → wimbpus is wodvpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is wimbpus
  - 前提: wimbpus is gocgpus and wannpus
  - 前提: gocgpus is canrpus
  - 前提: canrpus is yomzpus and rihrpus
  - 前提: yomzpus is divgpus and wodvpus

   节点 28: divgpus is babcpus and waxqpus and penkpus and lobtpus
      ↻ 重复节点，计数: 4

   节点 29: x is divgpus
      ↻ 重复节点，计数: 2

   节点 30: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: x is babcpus and waxqpus (深度2)
[子树点亮]     └─ 点亮依赖节点: yomzpus is babcpus and waxqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: yomzpus is babcpus and waxqpus and penkpus (深度4)
[子树点亮]     └─ 点亮依赖节点: divgpus is babcpus and waxqpus and penkpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
      ✅ 验证成功 + LoG匹配

   节点 31: x is babcpus
      ↻ 重复节点，计数: 2

   节点 32: divgpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: divgpus is babcpus and waxqpus and penkpus and lobtpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: divgpus is babcpus and waxqpus and penkpus and lobtpus

   节点 33: divgpus is babcpus
      ↻ 重复节点，计数: 2

   节点 34: x is divgpus
      ↻ 重复节点，计数: 3

   节点 35: divgpus is babcpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 35
   - 新增节点: 11
   - 更新已存在节点: 24
   - 点亮的LoG节点: 11

🎯 推理质量统计:
   - 完美推理: 11 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 11节点, 6前提, 复杂度1-6

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 17
   - 前提节点: 6
   - 推理节点: 11
   - 幻觉节点: 0
   - 点亮LoG节点: 11

✅ 推理节点详情:
   🟢 x is gocgpus and wannpus (出现1次, 质量:perfect)
   🟢 x is canrpus (出现2次, 质量:perfect)
   🟢 x is yomzpus and rihrpus (出现1次, 质量:perfect)
   🟢 x is gocgpus (出现1次, 质量:perfect)
   🟢 x is wannpus (出现1次, 质量:perfect)
   🟢 x is yomzpus (出现1次, 质量:perfect)
   🟢 x is rihrpus (出现1次, 质量:perfect)
   🟢 x is divgpus (出现3次, 质量:perfect)
   🟢 x is wodvpus (出现1次, 质量:perfect)
   🟢 x is babcpus (出现2次, 质量:perfect)
   🟢 divgpus is babcpus (出现3次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is babcpus and waxqpus
   - yomzpus is divgpus
   - gocgpus is yomzpus
   - divgpus is babcpus and waxqpus and penkpus
   - x is babcpus
   - yomzpus is babcpus and waxqpus
   - x is gocgpus and wannpus
   - x is yomzpus
   - gocgpus is yomzpus and rihrpus
   - yomzpus is babcpus and waxqpus and penkpus
   - x is gocgpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus (第5层)
   节点Coverage: 11/11 = 100.00%
   前提条件Coverage: 6/6 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/11 = 0.00%
   可推导节点: 11/11
   Strict Error Rate: 0/11 = 0.00%
   严格有效节点: 11/11

   详细分析:
     完美推理: 11 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 49/50
================================================================================
记录索引: 48
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_48.json
✅ 使用缓存结果:
   - 句子数: 84
   - 提取的语句数: 91
   - 初始条件数: 15

=== Statement提取完成 ===
总句子数: 84
成功提取: 84
失败提取: 0
总statements数: 91

=== 开始清洗Statement格式 ===
原始statements数: 91
清洗后statements数: 80
过滤掉的statements数: 11
清洗后的statements:
  1. [planning] x is babcpus and babrpus and babspus
  2. [actual] xufqpus is vicwpus and bimnpus
  3. [actual] vicwpus is tipspus
  4. [actual] x is farnpus
  5. [actual] vutkpus is mothpus and nixppus
  6. [actual] cihwpus is babspus and buwwpus
  7. [actual] mothpus is fujgpus
  8. [actual] gexjpus is dopbpus and fevqpus
  9. [actual] tipspus is gexjpus and ketgpus
  10. [actual] jovypus is babcpus
  11. [actual] farnpus is vutkpus and rebppus
  12. [actual] x is xufqpus
  13. [actual] fujgpus is babrpus
  14. [actual] x is jovypus and fagfpus
  15. [actual] dopbpus is cihwpus
  16. [actual] jovypus is mojxpus
  17. [planning] x is babcpus and babrpus and babspus
  18. [actual] x is jovypus and fagfpus
  19. [actual] jovypus is babcpus
  20. [actual] x is jovypus
  21. [actual] jovypus is babcpus
  22. [actual] x is babcpus
  23. [actual] x is babcpus
  24. [planning] x is babrpus
  25. [actual] babrpus is mentioned in statement 12: fujgpus is babrpus
  26. [planning] x is fujgpus
  27. [actual] x is jovypus and fagfpus
  28. [actual] x is farnpus
  29. [actual] farnpus is vutkpus and rebppus
  30. [actual] x is farnpus
  31. [actual] x is vutkpus and rebppus
  32. [actual] vutkpus is mothpus and nixppus
  33. [actual] x is vutkpus
  34. [actual] x is mothpus and nixppus
  35. [actual] mothpus is fujgpus
  36. [actual] x is mothpus
  37. [actual] x is fujgpus
  38. [actual] fujgpus is babrpus
  39. [actual] x is fujgpus
  40. [actual] x is babrpus
  41. [actual] x is babrpus
  42. [planning] x is babspus
  43. [actual] babspus is mentioned in statement 5
  44. [actual] cihwpus is babspus and buwwpus
  45. [planning] x is cihwpus
  46. [planning] x is cihwpus
  47. [actual] x is xufqpus
  48. [actual] xufqpus is vicwpus and bimnpus
  49. [actual] vicwpus is tipspus
  50. [actual] tipspus is gexjpus and ketgpus
  51. [actual] gexjpus is dopbpus and fevqpus
  52. [actual] dopbpus is cihwpus
  53. [actual] x is xufqpus
  54. [actual] cihwpus is babspus
  55. [planning] x is babspus
  56. [planning] x is cihwpus
  57. [actual] x is xufqpus
  58. [actual] xufqpus is vicwpus
  59. [actual] x is vicwpus
  60. [actual] vicwpus is tipspus
  61. [planning] x is tipspus
  62. [actual] tipspus is gexjpus and ketgpus
  63. [actual] x is gexjpus
  64. [actual] gexjpus is dopbpus and fevqpus
  65. [actual] x is dopbpus
  66. [actual] dopbpus is cihwpus
  67. [actual] x is cihwpus
  68. [actual] cihwpus is babspus
  69. [planning] x is babspus
  70. [actual] x is babspus
  71. [actual] x is babcpus and babrpus and babspus
  72. [actual] x is jovypus
  73. [actual] jovypus is babcpus
  74. [actual] x is fagfpus
  75. [actual] x is farnpus
  76. [actual] x is xufqpus
  77. [actual] xufqpus is cihwpus
  78. [actual] xufqpus is babspus
  79. [actual] x is babcpus and babrpus and babspus
  80. [planning] x is babcpus and babrpus and babspus

=== 开始标准化和解析节点 ===
清洗后statements数: 80
标准化后节点数: 78
过滤掉的无效实体数: 2
标准化后的节点:
  1. [planning] x → babcpus and babrpus and babspus (原始: x is babcpus and babrpus and babspus)
  2. [actual] xufqpus → vicwpus and bimnpus (原始: xufqpus is vicwpus and bimnpus)
  3. [actual] vicwpus → tipspus (原始: vicwpus is tipspus)
  4. [actual] x → farnpus (原始: x is farnpus)
  5. [actual] vutkpus → mothpus and nixppus (原始: vutkpus is mothpus and nixppus)
  6. [actual] cihwpus → babspus and buwwpus (原始: cihwpus is babspus and buwwpus)
  7. [actual] mothpus → fujgpus (原始: mothpus is fujgpus)
  8. [actual] gexjpus → dopbpus and fevqpus (原始: gexjpus is dopbpus and fevqpus)
  9. [actual] tipspus → gexjpus and ketgpus (原始: tipspus is gexjpus and ketgpus)
  10. [actual] jovypus → babcpus (原始: jovypus is babcpus)
  11. [actual] farnpus → vutkpus and rebppus (原始: farnpus is vutkpus and rebppus)
  12. [actual] x → xufqpus (原始: x is xufqpus)
  13. [actual] fujgpus → babrpus (原始: fujgpus is babrpus)
  14. [actual] x → jovypus and fagfpus (原始: x is jovypus and fagfpus)
  15. [actual] dopbpus → cihwpus (原始: dopbpus is cihwpus)
  16. [actual] jovypus → mojxpus (原始: jovypus is mojxpus)
  17. [planning] x → babcpus and babrpus and babspus (原始: x is babcpus and babrpus and babspus)
  18. [actual] x → jovypus and fagfpus (原始: x is jovypus and fagfpus)
  19. [actual] jovypus → babcpus (原始: jovypus is babcpus)
  20. [actual] x → jovypus (原始: x is jovypus)
  21. [actual] jovypus → babcpus (原始: jovypus is babcpus)
  22. [actual] x → babcpus (原始: x is babcpus)
  23. [actual] x → babcpus (原始: x is babcpus)
  24. [planning] x → babrpus (原始: x is babrpus)
  25. [planning] x → fujgpus (原始: x is fujgpus)
  26. [actual] x → jovypus and fagfpus (原始: x is jovypus and fagfpus)
  27. [actual] x → farnpus (原始: x is farnpus)
  28. [actual] farnpus → vutkpus and rebppus (原始: farnpus is vutkpus and rebppus)
  29. [actual] x → farnpus (原始: x is farnpus)
  30. [actual] x → vutkpus and rebppus (原始: x is vutkpus and rebppus)
  31. [actual] vutkpus → mothpus and nixppus (原始: vutkpus is mothpus and nixppus)
  32. [actual] x → vutkpus (原始: x is vutkpus)
  33. [actual] x → mothpus and nixppus (原始: x is mothpus and nixppus)
  34. [actual] mothpus → fujgpus (原始: mothpus is fujgpus)
  35. [actual] x → mothpus (原始: x is mothpus)
  36. [actual] x → fujgpus (原始: x is fujgpus)
  37. [actual] fujgpus → babrpus (原始: fujgpus is babrpus)
  38. [actual] x → fujgpus (原始: x is fujgpus)
  39. [actual] x → babrpus (原始: x is babrpus)
  40. [actual] x → babrpus (原始: x is babrpus)
  41. [planning] x → babspus (原始: x is babspus)
  42. [actual] cihwpus → babspus and buwwpus (原始: cihwpus is babspus and buwwpus)
  43. [planning] x → cihwpus (原始: x is cihwpus)
  44. [planning] x → cihwpus (原始: x is cihwpus)
  45. [actual] x → xufqpus (原始: x is xufqpus)
  46. [actual] xufqpus → vicwpus and bimnpus (原始: xufqpus is vicwpus and bimnpus)
  47. [actual] vicwpus → tipspus (原始: vicwpus is tipspus)
  48. [actual] tipspus → gexjpus and ketgpus (原始: tipspus is gexjpus and ketgpus)
  49. [actual] gexjpus → dopbpus and fevqpus (原始: gexjpus is dopbpus and fevqpus)
  50. [actual] dopbpus → cihwpus (原始: dopbpus is cihwpus)
  51. [actual] x → xufqpus (原始: x is xufqpus)
  52. [actual] cihwpus → babspus (原始: cihwpus is babspus)
  53. [planning] x → babspus (原始: x is babspus)
  54. [planning] x → cihwpus (原始: x is cihwpus)
  55. [actual] x → xufqpus (原始: x is xufqpus)
  56. [actual] xufqpus → vicwpus (原始: xufqpus is vicwpus)
  57. [actual] x → vicwpus (原始: x is vicwpus)
  58. [actual] vicwpus → tipspus (原始: vicwpus is tipspus)
  59. [planning] x → tipspus (原始: x is tipspus)
  60. [actual] tipspus → gexjpus and ketgpus (原始: tipspus is gexjpus and ketgpus)
  61. [actual] x → gexjpus (原始: x is gexjpus)
  62. [actual] gexjpus → dopbpus and fevqpus (原始: gexjpus is dopbpus and fevqpus)
  63. [actual] x → dopbpus (原始: x is dopbpus)
  64. [actual] dopbpus → cihwpus (原始: dopbpus is cihwpus)
  65. [actual] x → cihwpus (原始: x is cihwpus)
  66. [actual] cihwpus → babspus (原始: cihwpus is babspus)
  67. [planning] x → babspus (原始: x is babspus)
  68. [actual] x → babspus (原始: x is babspus)
  69. [actual] x → babcpus and babrpus and babspus (原始: x is babcpus and babrpus and babspus)
  70. [actual] x → jovypus (原始: x is jovypus)
  71. [actual] jovypus → babcpus (原始: jovypus is babcpus)
  72. [actual] x → fagfpus (原始: x is fagfpus)
  73. [actual] x → farnpus (原始: x is farnpus)
  74. [actual] x → xufqpus (原始: x is xufqpus)
  75. [actual] xufqpus → cihwpus (原始: xufqpus is cihwpus)
  76. [actual] xufqpus → babspus (原始: xufqpus is babspus)
  77. [actual] x → babcpus and babrpus and babspus (原始: x is babcpus and babrpus and babspus)
  78. [planning] x → babcpus and babrpus and babspus (原始: x is babcpus and babrpus and babspus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 22
[后处理] 加载LoG图，包含 22 个节点
  LoG节点 0: x is babcpus and babrpus and babspus (规则: CI, 深度: 1)
  LoG节点 1: x is babcpus and babrpus (规则: CI, 深度: 2)
  LoG节点 2: x is babspus (规则: MP, 深度: 2)
  LoG节点 3: x is babcpus (规则: CE, 深度: 3)
  LoG节点 4: x is babrpus (规则: MP, 深度: 3)
  LoG节点 5: x is gexjpus (规则: MP, 深度: 3)
  LoG节点 6: gexjpus is babspus (规则: CE, 深度: 3)
  LoG节点 7: x is babcpus and mojxpus (规则: MP, 深度: 4)
  LoG节点 8: x is vutkpus (规则: CE, 深度: 4)
  LoG节点 9: vutkpus is babrpus (规则: MP, 深度: 4)
  LoG节点 10: x is vicwpus (规则: CE, 深度: 4)
  LoG节点 11: vicwpus is gexjpus (规则: CE, 深度: 4)
  LoG节点 12: gexjpus is babspus and buwwpus (规则: MP, 深度: 4)
  LoG节点 13: x is jovypus (规则: CE, 深度: 5)
  LoG节点 14: jovypus is babcpus and mojxpus (规则: CI, 深度: 5)
  LoG节点 15: x is vutkpus and rebppus (规则: MP, 深度: 5)
  LoG节点 16: vutkpus is mothpus (规则: CE, 深度: 5)
  LoG节点 17: mothpus is babrpus (规则: MP, 深度: 5)
  LoG节点 18: x is vicwpus and bimnpus (规则: MP, 深度: 5)
  LoG节点 19: vicwpus is gexjpus and ketgpus (规则: MP, 深度: 5)
  LoG节点 20: gexjpus is dopbpus (规则: CE, 深度: 5)
  LoG节点 21: dopbpus is babspus and buwwpus (规则: MP, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 78
   - 初始条件数: 15
   - LoG图节点数: 22

📋 初始条件列表:
    1. xufqpus is vicwpus and bimnpus
    2. vicwpus is tipspus
    3. x is farnpus
    4. vutkpus is mothpus and nixppus
    5. cihwpus is babspus and buwwpus
    6. mothpus is fujgpus
    7. gexjpus is dopbpus and fevqpus
    8. tipspus is gexjpus and ketgpus
    9. jovypus is babcpus
   10. farnpus is vutkpus and rebppus
   11. x is xufqpus
   12. fujgpus is babrpus
   13. x is jovypus and fagfpus
   14. dopbpus is cihwpus
   15. jovypus is mojxpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 15 个前提节点

🔍 开始处理actual节点...

   节点 1: xufqpus is vicwpus and bimnpus
      ↻ 重复节点，计数: 2

   节点 2: vicwpus is tipspus
      ↻ 重复节点，计数: 2

   节点 3: x is farnpus
      ↻ 重复节点，计数: 2

   节点 4: vutkpus is mothpus and nixppus
      ↻ 重复节点，计数: 2

   节点 5: cihwpus is babspus and buwwpus
      ↻ 重复节点，计数: 2

   节点 6: mothpus is fujgpus
      ↻ 重复节点，计数: 2

   节点 7: gexjpus is dopbpus and fevqpus
      ↻ 重复节点，计数: 2

   节点 8: tipspus is gexjpus and ketgpus
      ↻ 重复节点，计数: 2

   节点 9: jovypus is babcpus
      ↻ 重复节点，计数: 2

   节点 10: farnpus is vutkpus and rebppus
      ↻ 重复节点，计数: 2

   节点 11: x is xufqpus
      ↻ 重复节点，计数: 2

   节点 12: fujgpus is babrpus
      ↻ 重复节点，计数: 2

   节点 13: x is jovypus and fagfpus
      ↻ 重复节点，计数: 2

   节点 14: dopbpus is cihwpus
      ↻ 重复节点，计数: 2

   节点 15: jovypus is mojxpus
      ↻ 重复节点，计数: 2

   节点 16: x is jovypus and fagfpus
      ↻ 重复节点，计数: 3

   节点 17: jovypus is babcpus
      ↻ 重复节点，计数: 3

   节点 18: x is jovypus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is jovypus
      ✅ 验证成功 + LoG匹配

   节点 19: jovypus is babcpus
      ↻ 重复节点，计数: 4

   节点 20: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: x is babcpus and mojxpus (深度4)
[子树点亮]     └─ 点亮依赖节点: jovypus is babcpus and mojxpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 21: x is babcpus
      ↻ 重复节点，计数: 2

   节点 22: x is jovypus and fagfpus
      ↻ 重复节点，计数: 4

   节点 23: x is farnpus
      ↻ 重复节点，计数: 3

   节点 24: farnpus is vutkpus and rebppus
      ↻ 重复节点，计数: 3

   节点 25: x is farnpus
      ↻ 重复节点，计数: 4

   节点 26: x is vutkpus and rebppus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is vutkpus and rebppus
      ✅ 验证成功 + LoG匹配

   节点 27: vutkpus is mothpus and nixppus
      ↻ 重复节点，计数: 3

   节点 28: x is vutkpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is vutkpus
      ✅ 验证成功 + LoG匹配

   节点 29: x is mothpus and nixppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is farnpus → farnpus is mothpus and nixppus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is farnpus
  - 前提: farnpus is vutkpus and rebppus
  - 前提: vutkpus is mothpus and nixppus
  ✓ 点亮LoG节点: vutkpus is mothpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 30: mothpus is fujgpus
      ↻ 重复节点，计数: 3

   节点 31: x is mothpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is mothpus and nixppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is mothpus and nixppus

   节点 32: x is fujgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is farnpus → farnpus is fujgpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is farnpus
  - 前提: farnpus is vutkpus and rebppus
  - 前提: vutkpus is mothpus and nixppus
  - 前提: mothpus is fujgpus

   节点 33: fujgpus is babrpus
      ↻ 重复节点，计数: 3

   节点 34: x is fujgpus
      ↻ 重复节点，计数: 2

   节点 35: x is babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babrpus
[子树点亮]     └─ 点亮依赖节点: vutkpus is babrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: mothpus is babrpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 36: x is babrpus
      ↻ 重复节点，计数: 2

   节点 37: cihwpus is babspus and buwwpus
      ↻ 重复节点，计数: 3

   节点 38: x is xufqpus
      ↻ 重复节点，计数: 3

   节点 39: xufqpus is vicwpus and bimnpus
      ↻ 重复节点，计数: 3

   节点 40: vicwpus is tipspus
      ↻ 重复节点，计数: 3

   节点 41: tipspus is gexjpus and ketgpus
      ↻ 重复节点，计数: 3

   节点 42: gexjpus is dopbpus and fevqpus
      ↻ 重复节点，计数: 3

   节点 43: dopbpus is cihwpus
      ↻ 重复节点，计数: 3

   节点 44: x is xufqpus
      ↻ 重复节点，计数: 4

   节点 45: cihwpus is babspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: cihwpus is babspus and buwwpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: cihwpus is babspus and buwwpus

   节点 46: x is xufqpus
      ↻ 重复节点，计数: 5

   节点 47: xufqpus is vicwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: xufqpus is vicwpus and bimnpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: xufqpus is vicwpus and bimnpus

   节点 48: x is vicwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is vicwpus
[子树点亮]     └─ 点亮依赖节点: x is vicwpus and bimnpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 49: vicwpus is tipspus
      ↻ 重复节点，计数: 4

   节点 50: tipspus is gexjpus and ketgpus
      ↻ 重复节点，计数: 4

   节点 51: x is gexjpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is gexjpus
[子树点亮]     └─ 点亮依赖节点: vicwpus is gexjpus (深度4)
[子树点亮]     └─ 点亮依赖节点: vicwpus is gexjpus and ketgpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 52: gexjpus is dopbpus and fevqpus
      ↻ 重复节点，计数: 4

   节点 53: x is dopbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xufqpus → xufqpus is dopbpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is xufqpus
  - 前提: xufqpus is vicwpus
  - 前提: vicwpus is tipspus
  - 前提: tipspus is gexjpus and ketgpus
  - 前提: gexjpus is dopbpus and fevqpus
  ✓ 点亮LoG节点: gexjpus is dopbpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 54: dopbpus is cihwpus
      ↻ 重复节点，计数: 4

   节点 55: x is cihwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xufqpus → xufqpus is cihwpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is xufqpus
  - 前提: xufqpus is vicwpus
  - 前提: vicwpus is tipspus
  - 前提: tipspus is gexjpus and ketgpus
  - 前提: gexjpus is dopbpus and fevqpus
  - 前提: dopbpus is cihwpus

   节点 56: cihwpus is babspus
      ↻ 重复节点，计数: 2

   节点 57: x is babspus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babspus
[子树点亮]     └─ 点亮依赖节点: gexjpus is babspus (深度3)
[子树点亮]     └─ 点亮依赖节点: gexjpus is babspus and buwwpus (深度4)
[子树点亮]     └─ 点亮依赖节点: dopbpus is babspus and buwwpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 58: x is babcpus and babrpus and babspus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus and babrpus and babspus
[子树点亮]     └─ 点亮依赖节点: x is babcpus and babrpus (深度2)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 59: x is jovypus
      ↻ 重复节点，计数: 2

   节点 60: jovypus is babcpus
      ↻ 重复节点，计数: 5

   节点 61: x is fagfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is jovypus and fagfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is jovypus and fagfpus

   节点 62: x is farnpus
      ↻ 重复节点，计数: 5

   节点 63: x is xufqpus
      ↻ 重复节点，计数: 6

   节点 64: xufqpus is cihwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: xufqpus is vicwpus → vicwpus is cihwpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: xufqpus is vicwpus
  - 前提: vicwpus is tipspus
  - 前提: tipspus is gexjpus and ketgpus
  - 前提: gexjpus is dopbpus and fevqpus
  - 前提: dopbpus is cihwpus

   节点 65: xufqpus is babspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: xufqpus is vicwpus → vicwpus is babspus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: xufqpus is vicwpus
  - 前提: vicwpus is tipspus
  - 前提: tipspus is gexjpus and ketgpus
  - 前提: gexjpus is dopbpus and fevqpus
  - 前提: dopbpus is cihwpus
  - 前提: cihwpus is babspus

   节点 66: x is babcpus and babrpus and babspus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 66
   - 新增节点: 19
   - 更新已存在节点: 47
   - 点亮的LoG节点: 22

🎯 推理质量统计:
   - 完美推理: 19 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 22节点, 15前提, 复杂度1-15

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 34
   - 前提节点: 15
   - 推理节点: 19
   - 幻觉节点: 0
   - 点亮LoG节点: 22

✅ 推理节点详情:
   🟢 x is jovypus (出现2次, 质量:perfect)
   🟢 x is babcpus (出现2次, 质量:perfect)
   🟢 x is vutkpus and rebppus (出现1次, 质量:perfect)
   🟢 x is vutkpus (出现1次, 质量:perfect)
   🟢 x is mothpus and nixppus (出现1次, 质量:perfect)
   🟢 x is mothpus (出现1次, 质量:perfect)
   🟢 x is fujgpus (出现2次, 质量:perfect)
   🟢 x is babrpus (出现2次, 质量:perfect)
   🟢 cihwpus is babspus (出现2次, 质量:perfect)
   🟢 xufqpus is vicwpus (出现1次, 质量:perfect)
   🟢 x is vicwpus (出现1次, 质量:perfect)
   🟢 x is gexjpus (出现1次, 质量:perfect)
   🟢 x is dopbpus (出现1次, 质量:perfect)
   🟢 x is cihwpus (出现1次, 质量:perfect)
   🟢 x is babspus (出现1次, 质量:perfect)
   🟢 x is babcpus and babrpus and babspus (出现2次, 质量:perfect)
   🟢 x is fagfpus (出现1次, 质量:perfect)
   🟢 xufqpus is cihwpus (出现1次, 质量:perfect)
   🟢 xufqpus is babspus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is babspus
   - mothpus is babrpus
   - vicwpus is gexjpus and ketgpus
   - gexjpus is dopbpus
   - x is jovypus
   - gexjpus is babspus and buwwpus
   - x is vutkpus
   - x is vicwpus
   - x is vutkpus and rebppus
   - jovypus is babcpus and mojxpus
   - x is babcpus and babrpus and babspus
   - x is vicwpus and bimnpus
   - vutkpus is babrpus
   - x is babcpus
   - x is babcpus and mojxpus
   - dopbpus is babspus and buwwpus
   - gexjpus is babspus
   - vutkpus is mothpus
   - x is gexjpus
   - vicwpus is gexjpus
   - x is babrpus
   - x is babcpus and babrpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus and babrpus and babspus (第5层)
   节点Coverage: 22/22 = 100.00%
   前提条件Coverage: 15/15 = 100.00%
   各推理层点亮比例:
     第1层: 9/9 = 100.00%
     第2层: 6/6 = 100.00%
     第3层: 4/4 = 100.00%
     第4层: 2/2 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/19 = 0.00%
   可推导节点: 19/19
   Strict Error Rate: 0/19 = 0.00%
   严格有效节点: 19/19

   详细分析:
     完美推理: 19 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 50/50
================================================================================
记录索引: 49
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_5.deepseek-reasoner_record_49.json
✅ 使用缓存结果:
   - 句子数: 41
   - 提取的语句数: 66
   - 初始条件数: 6

=== Statement提取完成 ===
总句子数: 41
成功提取: 41
失败提取: 0
总statements数: 66

=== 开始清洗Statement格式 ===
原始statements数: 66
清洗后statements数: 60
过滤掉的statements数: 6
清洗后的statements:
  1. [actual] teplpus is nadqpus
  2. [actual] qafbpus is babcpus and bobmpus and zaphpus
  3. [actual] vegwpus is ganfpus
  4. [actual] lerwpus is babgpus and rayspus
  5. [actual] x is relmpus and muqcpus
  6. [planning] x is babgpus
  7. [planning] x is babgpus
  8. [actual] lerwpus is yexbpus
  9. [actual] yexbpus is lerwpus and pazjpus
  10. [actual] x is relmpus
  11. [actual] relmpus is babgpus
  12. [actual] x is babgpus
  13. [actual] x is relmpus
  14. [actual] relmpus is babgpus
  15. [actual] x is babgpus
  16. [planning] x is babgpus and babkpus and babmpus
  17. [planning] x is babgpus
  18. [planning] x is relmpus
  19. [planning] x is babgpus
  20. [actual] teplpus is nadqpus
  21. [actual] qafbpus is babcpus and bobmpus and zaphpus
  22. [actual] lahmpus is sinjpus
  23. [actual] sinjpus is qafbpus
  24. [actual] x is teplpus and moscpus
  25. [actual] teplpus is lahmpus
  26. [planning] x is babcpus or babrpus
  27. [planning] x is babcpus
  28. [planning] x is babrpus
  29. [actual] x is teplpus and moscpus
  30. [actual] x is teplpus and moscpus
  31. [planning] teplpus is babcpus
  32. [planning] teplpus is babrpus
  33. [actual] teplpus is lahmpus
  34. [actual] teplpus is lahmpus
  35. [actual] lahmpus is sinjpus
  36. [actual] lahmpus is sinjpus
  37. [actual] sinjpus is qafbpus
  38. [actual] sinjpus is qafbpus
  39. [actual] qafbpus is babcpus and bobmpus and zaphpus
  40. [actual] qafbpus is babcpus
  41. [actual] sinjpus is qafbpus
  42. [actual] qafbpus is babcpus
  43. [actual] sinjpus is babcpus
  44. [actual] lahmpus is sinjpus
  45. [actual] lahmpus is babcpus
  46. [actual] teplpus is lahmpus
  47. [actual] teplpus is babcpus
  48. [actual] x is teplpus
  49. [actual] x is babcpus
  50. [planning] x is babcpus or babrpus
  51. [actual] x is babcpus
  52. [planning] babrpus is involved anywhere
  53. [actual] x is babcpus
  54. [actual] x is babcpus or babrpus
  55. [actual] x is babcpus
  56. [actual] x is babcpus or babrpus
  57. [actual] x is babcpus
  58. [actual] x is moscpus
  59. [actual] x is babcpus
  60. [planning] x is babcpus or babrpus

=== 开始标准化和解析节点 ===
清洗后statements数: 60
标准化后节点数: 59
过滤掉的无效实体数: 1
标准化后的节点:
  1. [actual] teplpus → nadqpus (原始: teplpus is nadqpus)
  2. [actual] qafbpus → babcpus and bobmpus and zaphpus (原始: qafbpus is babcpus and bobmpus and zaphpus)
  3. [actual] vegwpus → ganfpus (原始: vegwpus is ganfpus)
  4. [actual] lerwpus → babgpus and rayspus (原始: lerwpus is babgpus and rayspus)
  5. [actual] x → relmpus and muqcpus (原始: x is relmpus and muqcpus)
  6. [planning] x → babgpus (原始: x is babgpus)
  7. [planning] x → babgpus (原始: x is babgpus)
  8. [actual] lerwpus → yexbpus (原始: lerwpus is yexbpus)
  9. [actual] yexbpus → lerwpus and pazjpus (原始: yexbpus is lerwpus and pazjpus)
  10. [actual] x → relmpus (原始: x is relmpus)
  11. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  12. [actual] x → babgpus (原始: x is babgpus)
  13. [actual] x → relmpus (原始: x is relmpus)
  14. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  15. [actual] x → babgpus (原始: x is babgpus)
  16. [planning] x → babgpus and babkpus and babmpus (原始: x is babgpus and babkpus and babmpus)
  17. [planning] x → babgpus (原始: x is babgpus)
  18. [planning] x → relmpus (原始: x is relmpus)
  19. [planning] x → babgpus (原始: x is babgpus)
  20. [actual] teplpus → nadqpus (原始: teplpus is nadqpus)
  21. [actual] qafbpus → babcpus and bobmpus and zaphpus (原始: qafbpus is babcpus and bobmpus and zaphpus)
  22. [actual] lahmpus → sinjpus (原始: lahmpus is sinjpus)
  23. [actual] sinjpus → qafbpus (原始: sinjpus is qafbpus)
  24. [actual] x → teplpus and moscpus (原始: x is teplpus and moscpus)
  25. [actual] teplpus → lahmpus (原始: teplpus is lahmpus)
  26. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  27. [planning] x → babcpus (原始: x is babcpus)
  28. [planning] x → babrpus (原始: x is babrpus)
  29. [actual] x → teplpus and moscpus (原始: x is teplpus and moscpus)
  30. [actual] x → teplpus and moscpus (原始: x is teplpus and moscpus)
  31. [planning] teplpus → babcpus (原始: teplpus is babcpus)
  32. [planning] teplpus → babrpus (原始: teplpus is babrpus)
  33. [actual] teplpus → lahmpus (原始: teplpus is lahmpus)
  34. [actual] teplpus → lahmpus (原始: teplpus is lahmpus)
  35. [actual] lahmpus → sinjpus (原始: lahmpus is sinjpus)
  36. [actual] lahmpus → sinjpus (原始: lahmpus is sinjpus)
  37. [actual] sinjpus → qafbpus (原始: sinjpus is qafbpus)
  38. [actual] sinjpus → qafbpus (原始: sinjpus is qafbpus)
  39. [actual] qafbpus → babcpus and bobmpus and zaphpus (原始: qafbpus is babcpus and bobmpus and zaphpus)
  40. [actual] qafbpus → babcpus (原始: qafbpus is babcpus)
  41. [actual] sinjpus → qafbpus (原始: sinjpus is qafbpus)
  42. [actual] qafbpus → babcpus (原始: qafbpus is babcpus)
  43. [actual] sinjpus → babcpus (原始: sinjpus is babcpus)
  44. [actual] lahmpus → sinjpus (原始: lahmpus is sinjpus)
  45. [actual] lahmpus → babcpus (原始: lahmpus is babcpus)
  46. [actual] teplpus → lahmpus (原始: teplpus is lahmpus)
  47. [actual] teplpus → babcpus (原始: teplpus is babcpus)
  48. [actual] x → teplpus (原始: x is teplpus)
  49. [actual] x → babcpus (原始: x is babcpus)
  50. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  51. [actual] x → babcpus (原始: x is babcpus)
  52. [actual] x → babcpus (原始: x is babcpus)
  53. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  54. [actual] x → babcpus (原始: x is babcpus)
  55. [actual] x → babcpus or babrpus (原始: x is babcpus or babrpus)
  56. [actual] x → babcpus (原始: x is babcpus)
  57. [actual] x → moscpus (原始: x is moscpus)
  58. [actual] x → babcpus (原始: x is babcpus)
  59. [planning] x → babcpus or babrpus (原始: x is babcpus or babrpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 10
[后处理] 加载LoG图，包含 10 个节点
  LoG节点 0: x is babcpus or babrpus (规则: DI, 深度: 1)
  LoG节点 1: x is babcpus (规则: MP, 深度: 2)
  LoG节点 2: x is lahmpus (规则: CE, 深度: 3)
  LoG节点 3: lahmpus is babcpus (规则: CE, 深度: 3)
  LoG节点 4: x is lahmpus and nadqpus (规则: MP, 深度: 4)
  LoG节点 5: lahmpus is babcpus and bobmpus (规则: MP, 深度: 4)
  LoG节点 6: x is teplpus (规则: CE, 深度: 5)
  LoG节点 7: teplpus is lahmpus and nadqpus (规则: CI, 深度: 5)
  LoG节点 8: lahmpus is qafbpus (规则: MP, 深度: 5)
  LoG节点 9: qafbpus is babcpus and bobmpus (规则: CE, 深度: 5)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 59
   - 初始条件数: 6
   - LoG图节点数: 10

📋 初始条件列表:
    1. teplpus is nadqpus
    2. qafbpus is babcpus and bobmpus and zaphpus
    3. lahmpus is sinjpus
    4. sinjpus is qafbpus
    5. x is teplpus and moscpus
    6. teplpus is lahmpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 6 个前提节点

🔍 开始处理actual节点...

   节点 1: teplpus is nadqpus
      ↻ 重复节点，计数: 2

   节点 2: qafbpus is babcpus and bobmpus and zaphpus
      ↻ 重复节点，计数: 2

   节点 3: vegwpus is ganfpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 4: lerwpus is babgpus and rayspus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 5: x is relmpus and muqcpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 6: lerwpus is yexbpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 7: yexbpus is lerwpus and pazjpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 8: x is relmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is relmpus and muqcpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is relmpus and muqcpus

   节点 9: relmpus is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 10: x is babgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is relmpus → relmpus is babgpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is relmpus
  - 前提: relmpus is babgpus

   节点 11: x is relmpus
      ↻ 重复节点，计数: 2

   节点 12: relmpus is babgpus
      ↻ 重复节点，计数: 2

   节点 13: x is babgpus
      ↻ 重复节点，计数: 2

   节点 14: teplpus is nadqpus
      ↻ 重复节点，计数: 3

   节点 15: qafbpus is babcpus and bobmpus and zaphpus
      ↻ 重复节点，计数: 3

   节点 16: lahmpus is sinjpus
      ↻ 重复节点，计数: 2

   节点 17: sinjpus is qafbpus
      ↻ 重复节点，计数: 2

   节点 18: x is teplpus and moscpus
      ↻ 重复节点，计数: 2

   节点 19: teplpus is lahmpus
      ↻ 重复节点，计数: 2

   节点 20: x is teplpus and moscpus
      ↻ 重复节点，计数: 3

   节点 21: x is teplpus and moscpus
      ↻ 重复节点，计数: 4

   节点 22: teplpus is lahmpus
      ↻ 重复节点，计数: 3

   节点 23: teplpus is lahmpus
      ↻ 重复节点，计数: 4

   节点 24: lahmpus is sinjpus
      ↻ 重复节点，计数: 3

   节点 25: lahmpus is sinjpus
      ↻ 重复节点，计数: 4

   节点 26: sinjpus is qafbpus
      ↻ 重复节点，计数: 3

   节点 27: sinjpus is qafbpus
      ↻ 重复节点，计数: 4

   节点 28: qafbpus is babcpus and bobmpus and zaphpus
      ↻ 重复节点，计数: 4

   节点 29: qafbpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qafbpus is babcpus and bobmpus and zaphpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qafbpus is babcpus and bobmpus and zaphpus
  ✓ 点亮LoG节点: qafbpus is babcpus and bobmpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 30: sinjpus is qafbpus
      ↻ 重复节点，计数: 5

   节点 31: qafbpus is babcpus
      ↻ 重复节点，计数: 2

   节点 32: sinjpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: sinjpus is qafbpus → qafbpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: sinjpus is qafbpus
  - 前提: qafbpus is babcpus

   节点 33: lahmpus is sinjpus
      ↻ 重复节点，计数: 5

   节点 34: lahmpus is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: lahmpus is babcpus
[子树点亮]     └─ 点亮依赖节点: lahmpus is babcpus and bobmpus (深度4)
[子树点亮]     └─ 点亮依赖节点: lahmpus is qafbpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 35: teplpus is lahmpus
      ↻ 重复节点，计数: 5

   节点 36: teplpus is babcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: teplpus is lahmpus → lahmpus is babcpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: teplpus is lahmpus
  - 前提: lahmpus is babcpus

   节点 37: x is teplpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is teplpus
      ✅ 验证成功 + LoG匹配

   节点 38: x is babcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus
[子树点亮]     └─ 点亮依赖节点: x is lahmpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is lahmpus and nadqpus (深度4)
[子树点亮]     └─ 点亮依赖节点: teplpus is lahmpus and nadqpus (深度5)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 39: x is babcpus
      ↻ 重复节点，计数: 2

   节点 40: x is babcpus
      ↻ 重复节点，计数: 3

   节点 41: x is babcpus or babrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babcpus or babrpus
      ✅ 验证成功 + LoG匹配

   节点 42: x is babcpus
      ↻ 重复节点，计数: 4

   节点 43: x is babcpus or babrpus
      ↻ 重复节点，计数: 2

   节点 44: x is babcpus
      ↻ 重复节点，计数: 5

   节点 45: x is moscpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is teplpus and moscpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is teplpus and moscpus

   节点 46: x is babcpus
      ↻ 重复节点，计数: 6

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 46
   - 新增节点: 16
   - 更新已存在节点: 30
   - 点亮的LoG节点: 10

🎯 推理质量统计:
   - 完美推理: 8 (节点正确 + 路径正确)
   - 部分推理: 6 (节点正确 + 路径部分错误)
   - 无效推理: 2 (节点错误或路径完全错误)
[LoG分析] LoG图: 10节点, 6前提, 复杂度1-6

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 22
   - 前提节点: 6
   - 推理节点: 10
   - 幻觉节点: 6
   - 点亮LoG节点: 10

❌ 幻觉节点详情:
   - vegwpus is ganfpus (出现1次)
   - lerwpus is babgpus and rayspus (出现1次)
   - x is relmpus and muqcpus (出现1次)
   - lerwpus is yexbpus (出现1次)
   - yexbpus is lerwpus and pazjpus (出现1次)
   - relmpus is babgpus (出现2次)

✅ 推理节点详情:
   🟡 x is relmpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is babgpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus', 'relmpus is babgpus']
   🟢 qafbpus is babcpus (出现2次, 质量:perfect)
   🟢 sinjpus is babcpus (出现1次, 质量:perfect)
   🟢 lahmpus is babcpus (出现1次, 质量:perfect)
   🟢 teplpus is babcpus (出现1次, 质量:perfect)
   🟡 x is teplpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is babcpus (出现6次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is babcpus or babrpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']
   🟡 x is moscpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus and muqcpus']

🔥 点亮的LoG节点:
   - x is lahmpus
   - lahmpus is babcpus and bobmpus
   - x is babcpus
   - teplpus is lahmpus and nadqpus
   - x is teplpus
   - x is babcpus or babrpus
   - lahmpus is qafbpus
   - lahmpus is babcpus
   - x is lahmpus and nadqpus
   - qafbpus is babcpus and bobmpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 5/5 = 100.00%
   最深点亮节点: x is babcpus or babrpus (第5层)
   节点Coverage: 10/10 = 100.00%
   前提条件Coverage: 6/6 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%
     第5层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 6/16 = 37.50%
   可推导节点: 10/16
   Strict Error Rate: 12/16 = 75.00%
   严格有效节点: 4/16

   详细分析:
     完美推理: 8 (50.00%)
     部分推理: 6 (37.50%)
     无效推理: 2 (12.50%)

================================================================================
📊 平均指标摘要 (基于 50 条记录)
================================================================================

🎯 Coverage指标 (召回率):
   深度Coverage: 99.60% (平均最深层级: 5.0)
   节点Coverage: 99.14% (总体: 99.28%)
     - 总点亮节点: 827
     - 总LoG节点: 833
   前提Coverage: 100.00%
   各推理层平均点亮比例:
     第1层: 平均99.60%, 总体353/354=99.72% (50条记录)
     第2层: 平均99.00%, 总体215/217=99.08% (50条记录)
     第3层: 平均99.00%, 总体132/133=99.25% (50条记录)
     第4层: 平均99.00%, 总体78/79=98.73% (50条记录)
     第5层: 平均98.00%, 总体49/50=98.00% (50条记录)

🎯 Precision指标 (精确率):
   Error Rate: 9.61% (总体: 10.76%)
     - 可推导节点: 680
     - 总推理节点: 762
   Strict Error Rate: 24.00%
   推理质量分布:
     - 完美推理: 601 (78.87%)
     - 部分推理: 147 (19.29%)
     - 无效推理: 14 (1.84%)

📈 数据统计:
   总statements: 1335 (平均: 26.7/记录)
   前提statements: 573
   推理statements: 762 (平均: 15.2/记录)
结果已保存到: step_by_step_evaluation_2_evaluation_results.LoG_5.deepseek-reasoner.json

评估成功完成！
