开始评估推理过程（版本2.0）...
日志文件: ./evaluation_log/evaluation_results.LoG_4.deepseek-reasoner.json
LLM调试模式: False
找到 100 条记录
检测到input_file: ./generated_data/LoG_4.jsonl
从 ./generated_data/LoG_4.jsonl 加载了 100 个例子的图数据

处理前 50 条记录（总共 100 条）...

================================================================================
处理记录 1/50
================================================================================
记录索引: 0
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_0.json
✅ 使用缓存结果:
   - 句子数: 138
   - 提取的语句数: 195
   - 初始条件数: 10

=== Statement提取完成 ===
总句子数: 138
成功提取: 138
失败提取: 0
总statements数: 195

=== 开始清洗Statement格式 ===
原始statements数: 195
清洗后statements数: 126
过滤掉的statements数: 69
清洗后的statements:
  1. [planning] x is babdpus
  2. [planning] x is babqpus
  3. [planning] x is babxpus
  4. [planning] x is babdpus
  5. [planning] x is babqpus
  6. [planning] x is babxpus
  7. [planning] x is A
  8. [actual] x is babgpus
  9. [actual] yexbpus is lerwpus and pazjpus
  10. [planning] x is babgpus and babkpus and babmpus
  11. [actual] x is fuywpus
  12. [actual] fuywpus is duykpus
  13. [actual] duykpus is rugdpus
  14. [actual] notppus is vuwfpus
  15. [actual] vuwfpus is hohspus
  16. [actual] hohspus is zifdpus and hozfpus
  17. [actual] hohspus is zifdpus and hozfpus
  18. [planning] x is babdpus
  19. [actual] geqlpus is babdpus and naydpus
  20. [actual] geqlpus is babdpus and naydpus
  21. [actual] geqlpus is babdpus and naydpus
  22. [actual] geqlpus is babdpus
  23. [actual] geqlpus is naydpus
  24. [planning] geqlpus is babdpus and naydpus
  25. [actual] babdpus is a category
  26. [actual] naydpus is a category
  27. [actual] geqlpus is a member of both babdpus and naydpus
  28. [actual] hohspus is zifdpus and hozfpus
  29. [planning] zifdpus is a type of hohspus or something
  30. [actual] geqlpus is babdpus and naydpus
  31. [actual] hohspus is zifdpus and hozfpus
  32. [planning] zifdpus is hohspus
  33. [planning] hozfpus is hohspus
  34. [actual] hohspus is zifdpus
  35. [planning] hohspus is zifdpus
  36. [actual] fuywpus is duykpus
  37. [actual] geqlpus is babdpus and naydpus
  38. [actual] hohspus is zifdpus and hozfpus
  39. [planning] hohspus is zifdpus
  40. [planning] hohspus is hozfpus
  41. [actual] hohspus is zifdpus and hozfpus
  42. [actual] vuwfpus is hohspus
  43. [actual] vuwfpus is hohspus
  44. [actual] notppus is vuwfpus
  45. [actual] notppus is vuwfpus
  46. [actual] rugdpus is notppus
  47. [actual] duykpus is rugdpus
  48. [actual] duykpus is rugdpus
  49. [actual] fuywpus is duykpus
  50. [actual] fuywpus is duykpus
  51. [actual] x is fuywpus
  52. [actual] hohspus is zifdpus
  53. [actual] hohspus is zifdpus
  54. [actual] zifdpus is gamhpus
  55. [actual] zifdpus is gamhpus
  56. [actual] gamhpus is geqlpus and rukqpus
  57. [planning] gamhpus is geqlpus
  58. [planning] gamhpus is rukqpus
  59. [planning] gamhpus is geqlpus and rukqpus
  60. [actual] lerwpus is babgpus and rayspus
  61. [actual] x is relmpus and muqcpus
  62. [planning] x is babgpus
  63. [planning] x is babgpus
  64. [actual] lerwpus is yexbpus
  65. [actual] yexbpus is lerwpus and pazjpus
  66. [actual] x is relmpus
  67. [actual] relmpus is babgpus
  68. [actual] x is babgpus
  69. [actual] x is relmpus
  70. [actual] relmpus is babgpus
  71. [actual] x is babgpus
  72. [planning] x is babgpus and babkpus and babmpus
  73. [planning] x is babgpus
  74. [actual] fuywpus is duykpus
  75. [actual] fuywpus is duykpus
  76. [actual] geqlpus is babdpus and naydpus
  77. [actual] rugdpus is notppus
  78. [actual] gamhpus is geqlpus and rukqpus
  79. [actual] gamhpus is geqlpus and rukqpus
  80. [actual] zifdpus is gamhpus
  81. [actual] zifdpus is gamhpus
  82. [actual] duykpus is rugdpus
  83. [actual] x is fuywpus
  84. [actual] vuwfpus is hohspus
  85. [actual] vuwfpus is hohspus
  86. [actual] notppus is vuwfpus
  87. [actual] hohspus is zifdpus and hozfpus
  88. [planning] x is babdpus
  89. [actual] babdpus is a category that contains geqlpus
  90. [planning] x is babdpus
  91. [actual] hohspus is zifdpus
  92. [actual] hohspus is hozfpus
  93. [actual] zifdpus is gamhpus
  94. [actual] gamhpus is geqlpus
  95. [actual] geqlpus is babdpus
  96. [actual] hohspus is zifdpus
  97. [actual] zifdpus is gamhpus
  98. [actual] gamhpus is geqlpus
  99. [actual] geqlpus is babdpus
  100. [actual] x is babdpus
  101. [actual] x is babdpus
  102. [planning] x is babdpus or babqpus or babxpus
  103. [actual] x is babdpus
  104. [planning] babqpus is relevant
  105. [planning] babxpus is relevant
  106. [planning] x is babdpus
  107. [planning] x is babdpus or babqpus or babxpus
  108. [actual] x is babdpus
  109. [actual] x is fuywpus
  110. [actual] fuywpus is duykpus
  111. [actual] duykpus is rugdpus
  112. [actual] rugdpus is notppus
  113. [actual] notppus is vuwfpus
  114. [actual] vuwfpus is hohspus
  115. [actual] hohspus is zifdpus and hozfpus
  116. [actual] hohspus is zifdpus
  117. [actual] zifdpus is gamhpus
  118. [actual] gamhpus is geqlpus and rukqpus
  119. [actual] gamhpus is geqlpus
  120. [actual] geqlpus is babdpus and naydpus
  121. [actual] geqlpus is babdpus
  122. [actual] x is babdpus
  123. [actual] x is babdpus
  124. [actual] x is babdpus
  125. [planning] x is babdpus or babqpus or babxpus
  126. [planning] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 126
标准化后节点数: 118
过滤掉的无效实体数: 8
标准化后的节点:
  1. [planning] x → babdpus (原始: x is babdpus)
  2. [planning] x → babqpus (原始: x is babqpus)
  3. [planning] x → babxpus (原始: x is babxpus)
  4. [planning] x → babdpus (原始: x is babdpus)
  5. [planning] x → babqpus (原始: x is babqpus)
  6. [planning] x → babxpus (原始: x is babxpus)
  7. [actual] x → babgpus (原始: x is babgpus)
  8. [actual] yexbpus → lerwpus and pazjpus (原始: yexbpus is lerwpus and pazjpus)
  9. [planning] x → babgpus and babkpus and babmpus (原始: x is babgpus and babkpus and babmpus)
  10. [actual] x → fuywpus (原始: x is fuywpus)
  11. [actual] fuywpus → duykpus (原始: fuywpus is duykpus)
  12. [actual] duykpus → rugdpus (原始: duykpus is rugdpus)
  13. [actual] notppus → vuwfpus (原始: notppus is vuwfpus)
  14. [actual] vuwfpus → hohspus (原始: vuwfpus is hohspus)
  15. [actual] hohspus → zifdpus and hozfpus (原始: hohspus is zifdpus and hozfpus)
  16. [actual] hohspus → zifdpus and hozfpus (原始: hohspus is zifdpus and hozfpus)
  17. [planning] x → babdpus (原始: x is babdpus)
  18. [actual] geqlpus → babdpus and naydpus (原始: geqlpus is babdpus and naydpus)
  19. [actual] geqlpus → babdpus and naydpus (原始: geqlpus is babdpus and naydpus)
  20. [actual] geqlpus → babdpus and naydpus (原始: geqlpus is babdpus and naydpus)
  21. [actual] geqlpus → babdpus (原始: geqlpus is babdpus)
  22. [actual] geqlpus → naydpus (原始: geqlpus is naydpus)
  23. [planning] geqlpus → babdpus and naydpus (原始: geqlpus is babdpus and naydpus)
  24. [actual] hohspus → zifdpus and hozfpus (原始: hohspus is zifdpus and hozfpus)
  25. [actual] geqlpus → babdpus and naydpus (原始: geqlpus is babdpus and naydpus)
  26. [actual] hohspus → zifdpus and hozfpus (原始: hohspus is zifdpus and hozfpus)
  27. [planning] zifdpus → hohspus (原始: zifdpus is hohspus)
  28. [planning] hozfpus → hohspus (原始: hozfpus is hohspus)
  29. [actual] hohspus → zifdpus (原始: hohspus is zifdpus)
  30. [planning] hohspus → zifdpus (原始: hohspus is zifdpus)
  31. [actual] fuywpus → duykpus (原始: fuywpus is duykpus)
  32. [actual] geqlpus → babdpus and naydpus (原始: geqlpus is babdpus and naydpus)
  33. [actual] hohspus → zifdpus and hozfpus (原始: hohspus is zifdpus and hozfpus)
  34. [planning] hohspus → zifdpus (原始: hohspus is zifdpus)
  35. [planning] hohspus → hozfpus (原始: hohspus is hozfpus)
  36. [actual] hohspus → zifdpus and hozfpus (原始: hohspus is zifdpus and hozfpus)
  37. [actual] vuwfpus → hohspus (原始: vuwfpus is hohspus)
  38. [actual] vuwfpus → hohspus (原始: vuwfpus is hohspus)
  39. [actual] notppus → vuwfpus (原始: notppus is vuwfpus)
  40. [actual] notppus → vuwfpus (原始: notppus is vuwfpus)
  41. [actual] rugdpus → notppus (原始: rugdpus is notppus)
  42. [actual] duykpus → rugdpus (原始: duykpus is rugdpus)
  43. [actual] duykpus → rugdpus (原始: duykpus is rugdpus)
  44. [actual] fuywpus → duykpus (原始: fuywpus is duykpus)
  45. [actual] fuywpus → duykpus (原始: fuywpus is duykpus)
  46. [actual] x → fuywpus (原始: x is fuywpus)
  47. [actual] hohspus → zifdpus (原始: hohspus is zifdpus)
  48. [actual] hohspus → zifdpus (原始: hohspus is zifdpus)
  49. [actual] zifdpus → gamhpus (原始: zifdpus is gamhpus)
  50. [actual] zifdpus → gamhpus (原始: zifdpus is gamhpus)
  51. [actual] gamhpus → geqlpus and rukqpus (原始: gamhpus is geqlpus and rukqpus)
  52. [planning] gamhpus → geqlpus (原始: gamhpus is geqlpus)
  53. [planning] gamhpus → rukqpus (原始: gamhpus is rukqpus)
  54. [planning] gamhpus → geqlpus and rukqpus (原始: gamhpus is geqlpus and rukqpus)
  55. [actual] lerwpus → babgpus and rayspus (原始: lerwpus is babgpus and rayspus)
  56. [actual] x → relmpus and muqcpus (原始: x is relmpus and muqcpus)
  57. [planning] x → babgpus (原始: x is babgpus)
  58. [planning] x → babgpus (原始: x is babgpus)
  59. [actual] lerwpus → yexbpus (原始: lerwpus is yexbpus)
  60. [actual] yexbpus → lerwpus and pazjpus (原始: yexbpus is lerwpus and pazjpus)
  61. [actual] x → relmpus (原始: x is relmpus)
  62. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  63. [actual] x → babgpus (原始: x is babgpus)
  64. [actual] x → relmpus (原始: x is relmpus)
  65. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  66. [actual] x → babgpus (原始: x is babgpus)
  67. [planning] x → babgpus and babkpus and babmpus (原始: x is babgpus and babkpus and babmpus)
  68. [planning] x → babgpus (原始: x is babgpus)
  69. [actual] fuywpus → duykpus (原始: fuywpus is duykpus)
  70. [actual] fuywpus → duykpus (原始: fuywpus is duykpus)
  71. [actual] geqlpus → babdpus and naydpus (原始: geqlpus is babdpus and naydpus)
  72. [actual] rugdpus → notppus (原始: rugdpus is notppus)
  73. [actual] gamhpus → geqlpus and rukqpus (原始: gamhpus is geqlpus and rukqpus)
  74. [actual] gamhpus → geqlpus and rukqpus (原始: gamhpus is geqlpus and rukqpus)
  75. [actual] zifdpus → gamhpus (原始: zifdpus is gamhpus)
  76. [actual] zifdpus → gamhpus (原始: zifdpus is gamhpus)
  77. [actual] duykpus → rugdpus (原始: duykpus is rugdpus)
  78. [actual] x → fuywpus (原始: x is fuywpus)
  79. [actual] vuwfpus → hohspus (原始: vuwfpus is hohspus)
  80. [actual] vuwfpus → hohspus (原始: vuwfpus is hohspus)
  81. [actual] notppus → vuwfpus (原始: notppus is vuwfpus)
  82. [actual] hohspus → zifdpus and hozfpus (原始: hohspus is zifdpus and hozfpus)
  83. [planning] x → babdpus (原始: x is babdpus)
  84. [planning] x → babdpus (原始: x is babdpus)
  85. [actual] hohspus → zifdpus (原始: hohspus is zifdpus)
  86. [actual] hohspus → hozfpus (原始: hohspus is hozfpus)
  87. [actual] zifdpus → gamhpus (原始: zifdpus is gamhpus)
  88. [actual] gamhpus → geqlpus (原始: gamhpus is geqlpus)
  89. [actual] geqlpus → babdpus (原始: geqlpus is babdpus)
  90. [actual] hohspus → zifdpus (原始: hohspus is zifdpus)
  91. [actual] zifdpus → gamhpus (原始: zifdpus is gamhpus)
  92. [actual] gamhpus → geqlpus (原始: gamhpus is geqlpus)
  93. [actual] geqlpus → babdpus (原始: geqlpus is babdpus)
  94. [actual] x → babdpus (原始: x is babdpus)
  95. [actual] x → babdpus (原始: x is babdpus)
  96. [planning] x → babdpus or babqpus or babxpus (原始: x is babdpus or babqpus or babxpus)
  97. [actual] x → babdpus (原始: x is babdpus)
  98. [planning] x → babdpus (原始: x is babdpus)
  99. [planning] x → babdpus or babqpus or babxpus (原始: x is babdpus or babqpus or babxpus)
  100. [actual] x → babdpus (原始: x is babdpus)
  101. [actual] x → fuywpus (原始: x is fuywpus)
  102. [actual] fuywpus → duykpus (原始: fuywpus is duykpus)
  103. [actual] duykpus → rugdpus (原始: duykpus is rugdpus)
  104. [actual] rugdpus → notppus (原始: rugdpus is notppus)
  105. [actual] notppus → vuwfpus (原始: notppus is vuwfpus)
  106. [actual] vuwfpus → hohspus (原始: vuwfpus is hohspus)
  107. [actual] hohspus → zifdpus and hozfpus (原始: hohspus is zifdpus and hozfpus)
  108. [actual] hohspus → zifdpus (原始: hohspus is zifdpus)
  109. [actual] zifdpus → gamhpus (原始: zifdpus is gamhpus)
  110. [actual] gamhpus → geqlpus and rukqpus (原始: gamhpus is geqlpus and rukqpus)
  111. [actual] gamhpus → geqlpus (原始: gamhpus is geqlpus)
  112. [actual] geqlpus → babdpus and naydpus (原始: geqlpus is babdpus and naydpus)
  113. [actual] geqlpus → babdpus (原始: geqlpus is babdpus)
  114. [actual] x → babdpus (原始: x is babdpus)
  115. [actual] x → babdpus (原始: x is babdpus)
  116. [actual] x → babdpus (原始: x is babdpus)
  117. [planning] x → babdpus or babqpus or babxpus (原始: x is babdpus or babqpus or babxpus)
  118. [planning] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 13
[后处理] 加载LoG图，包含 13 个节点
  LoG节点 0: x is babdpus or babqpus or babxpus (规则: MP, 深度: 1)
  LoG节点 1: x is zifdpus (规则: MP, 深度: 2)
  LoG节点 2: zifdpus is babdpus or babqpus or babxpus (规则: MP, 深度: 2)
  LoG节点 3: x is notppus (规则: MP, 深度: 3)
  LoG节点 4: notppus is zifdpus (规则: MP, 深度: 3)
  LoG节点 5: zifdpus is geqlpus (规则: CE, 深度: 3)
  LoG节点 6: geqlpus is babdpus or babqpus or babxpus (规则: DI, 深度: 3)
  LoG节点 7: x is duykpus (规则: MP, 深度: 4)
  LoG节点 8: duykpus is notppus (规则: MP, 深度: 4)
  LoG节点 9: notppus is hohspus (规则: MP, 深度: 4)
  LoG节点 10: hohspus is zifdpus (规则: CE, 深度: 4)
  LoG节点 11: zifdpus is geqlpus and rukqpus (规则: MP, 深度: 4)
  LoG节点 12: geqlpus is babdpus (规则: CE, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 118
   - 初始条件数: 10
   - LoG图节点数: 13

📋 初始条件列表:
    1. fuywpus is duykpus
    2. geqlpus is babdpus and naydpus
    3. rugdpus is notppus
    4. gamhpus is geqlpus and rukqpus
    5. zifdpus is gamhpus
    6. duykpus is rugdpus
    7. x is fuywpus
    8. vuwfpus is hohspus
    9. notppus is vuwfpus
   10. hohspus is zifdpus and hozfpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 10 个前提节点

🔍 开始处理actual节点...

   节点 1: x is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 2: yexbpus is lerwpus and pazjpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 3: x is fuywpus
      ↻ 重复节点，计数: 2

   节点 4: fuywpus is duykpus
      ↻ 重复节点，计数: 2

   节点 5: duykpus is rugdpus
      ↻ 重复节点，计数: 2

   节点 6: notppus is vuwfpus
      ↻ 重复节点，计数: 2

   节点 7: vuwfpus is hohspus
      ↻ 重复节点，计数: 2

   节点 8: hohspus is zifdpus and hozfpus
      ↻ 重复节点，计数: 2

   节点 9: hohspus is zifdpus and hozfpus
      ↻ 重复节点，计数: 3

   节点 10: geqlpus is babdpus and naydpus
      ↻ 重复节点，计数: 2

   节点 11: geqlpus is babdpus and naydpus
      ↻ 重复节点，计数: 3

   节点 12: geqlpus is babdpus and naydpus
      ↻ 重复节点，计数: 4

   节点 13: geqlpus is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: geqlpus is babdpus
      ✅ 验证成功 + LoG匹配

   节点 14: geqlpus is naydpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: geqlpus is babdpus and naydpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: geqlpus is babdpus and naydpus
  ✓ 点亮LoG节点: geqlpus is babdpus or babqpus or babxpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 15: hohspus is zifdpus and hozfpus
      ↻ 重复节点，计数: 4

   节点 16: geqlpus is babdpus and naydpus
      ↻ 重复节点，计数: 5

   节点 17: hohspus is zifdpus and hozfpus
      ↻ 重复节点，计数: 5

   节点 18: hohspus is zifdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: hohspus is zifdpus
      ✅ 验证成功 + LoG匹配

   节点 19: fuywpus is duykpus
      ↻ 重复节点，计数: 3

   节点 20: geqlpus is babdpus and naydpus
      ↻ 重复节点，计数: 6

   节点 21: hohspus is zifdpus and hozfpus
      ↻ 重复节点，计数: 6

   节点 22: hohspus is zifdpus and hozfpus
      ↻ 重复节点，计数: 7

   节点 23: vuwfpus is hohspus
      ↻ 重复节点，计数: 3

   节点 24: vuwfpus is hohspus
      ↻ 重复节点，计数: 4

   节点 25: notppus is vuwfpus
      ↻ 重复节点，计数: 3

   节点 26: notppus is vuwfpus
      ↻ 重复节点，计数: 4

   节点 27: rugdpus is notppus
      ↻ 重复节点，计数: 2

   节点 28: duykpus is rugdpus
      ↻ 重复节点，计数: 3

   节点 29: duykpus is rugdpus
      ↻ 重复节点，计数: 4

   节点 30: fuywpus is duykpus
      ↻ 重复节点，计数: 4

   节点 31: fuywpus is duykpus
      ↻ 重复节点，计数: 5

   节点 32: x is fuywpus
      ↻ 重复节点，计数: 3

   节点 33: hohspus is zifdpus
      ↻ 重复节点，计数: 2

   节点 34: hohspus is zifdpus
      ↻ 重复节点，计数: 3

   节点 35: zifdpus is gamhpus
      ↻ 重复节点，计数: 2

   节点 36: zifdpus is gamhpus
      ↻ 重复节点，计数: 3

   节点 37: gamhpus is geqlpus and rukqpus
      ↻ 重复节点，计数: 2

   节点 38: lerwpus is babgpus and rayspus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 39: x is relmpus and muqcpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 40: lerwpus is yexbpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 41: yexbpus is lerwpus and pazjpus
      ↻ 重复节点，计数: 2

   节点 42: x is relmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is relmpus and muqcpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is relmpus and muqcpus

   节点 43: relmpus is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 44: x is babgpus
      ↻ 重复节点，计数: 2

   节点 45: x is relmpus
      ↻ 重复节点，计数: 2

   节点 46: relmpus is babgpus
      ↻ 重复节点，计数: 2

   节点 47: x is babgpus
      ↻ 重复节点，计数: 3

   节点 48: fuywpus is duykpus
      ↻ 重复节点，计数: 6

   节点 49: fuywpus is duykpus
      ↻ 重复节点，计数: 7

   节点 50: geqlpus is babdpus and naydpus
      ↻ 重复节点，计数: 7

   节点 51: rugdpus is notppus
      ↻ 重复节点，计数: 3

   节点 52: gamhpus is geqlpus and rukqpus
      ↻ 重复节点，计数: 3

   节点 53: gamhpus is geqlpus and rukqpus
      ↻ 重复节点，计数: 4

   节点 54: zifdpus is gamhpus
      ↻ 重复节点，计数: 4

   节点 55: zifdpus is gamhpus
      ↻ 重复节点，计数: 5

   节点 56: duykpus is rugdpus
      ↻ 重复节点，计数: 5

   节点 57: x is fuywpus
      ↻ 重复节点，计数: 4

   节点 58: vuwfpus is hohspus
      ↻ 重复节点，计数: 5

   节点 59: vuwfpus is hohspus
      ↻ 重复节点，计数: 6

   节点 60: notppus is vuwfpus
      ↻ 重复节点，计数: 5

   节点 61: hohspus is zifdpus and hozfpus
      ↻ 重复节点，计数: 8

   节点 62: hohspus is zifdpus
      ↻ 重复节点，计数: 4

   节点 63: hohspus is hozfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: hohspus is zifdpus and hozfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: hohspus is zifdpus and hozfpus

   节点 64: zifdpus is gamhpus
      ↻ 重复节点，计数: 6

   节点 65: gamhpus is geqlpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gamhpus is geqlpus and rukqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gamhpus is geqlpus and rukqpus

   节点 66: geqlpus is babdpus
      ↻ 重复节点，计数: 2

   节点 67: hohspus is zifdpus
      ↻ 重复节点，计数: 5

   节点 68: zifdpus is gamhpus
      ↻ 重复节点，计数: 7

   节点 69: gamhpus is geqlpus
      ↻ 重复节点，计数: 2

   节点 70: geqlpus is babdpus
      ↻ 重复节点，计数: 3

   节点 71: x is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fuywpus → fuywpus is babdpus
[后处理] 基于推理轨迹点亮节点，使用了 10 个前提条件:
  - 前提: x is fuywpus
  - 前提: fuywpus is duykpus
  - 前提: duykpus is rugdpus
  - 前提: rugdpus is notppus
  - 前提: notppus is vuwfpus
  - 前提: vuwfpus is hohspus
  - 前提: hohspus is zifdpus
  - 前提: zifdpus is gamhpus
  - 前提: gamhpus is geqlpus
  - 前提: geqlpus is babdpus
  ✓ 点亮LoG节点: x is babdpus or babqpus or babxpus
[子树点亮]     └─ 点亮依赖节点: x is zifdpus (深度2)
[子树点亮]     └─ 点亮依赖节点: zifdpus is babdpus or babqpus or babxpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is notppus (深度3)
[子树点亮]     └─ 点亮依赖节点: notppus is zifdpus (深度3)
[子树点亮]     └─ 点亮依赖节点: zifdpus is geqlpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is duykpus (深度4)
[子树点亮]     └─ 点亮依赖节点: duykpus is notppus (深度4)
[子树点亮]     └─ 点亮依赖节点: notppus is hohspus (深度4)
[子树点亮]     └─ 点亮依赖节点: zifdpus is geqlpus and rukqpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 9 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 72: x is babdpus
      ↻ 重复节点，计数: 2

   节点 73: x is babdpus
      ↻ 重复节点，计数: 3

   节点 74: x is babdpus
      ↻ 重复节点，计数: 4

   节点 75: x is fuywpus
      ↻ 重复节点，计数: 5

   节点 76: fuywpus is duykpus
      ↻ 重复节点，计数: 8

   节点 77: duykpus is rugdpus
      ↻ 重复节点，计数: 6

   节点 78: rugdpus is notppus
      ↻ 重复节点，计数: 4

   节点 79: notppus is vuwfpus
      ↻ 重复节点，计数: 6

   节点 80: vuwfpus is hohspus
      ↻ 重复节点，计数: 7

   节点 81: hohspus is zifdpus and hozfpus
      ↻ 重复节点，计数: 9

   节点 82: hohspus is zifdpus
      ↻ 重复节点，计数: 6

   节点 83: zifdpus is gamhpus
      ↻ 重复节点，计数: 8

   节点 84: gamhpus is geqlpus and rukqpus
      ↻ 重复节点，计数: 5

   节点 85: gamhpus is geqlpus
      ↻ 重复节点，计数: 3

   节点 86: geqlpus is babdpus and naydpus
      ↻ 重复节点，计数: 8

   节点 87: geqlpus is babdpus
      ↻ 重复节点，计数: 4

   节点 88: x is babdpus
      ↻ 重复节点，计数: 5

   节点 89: x is babdpus
      ↻ 重复节点，计数: 6

   节点 90: x is babdpus
      ↻ 重复节点，计数: 7

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 90
   - 新增节点: 13
   - 更新已存在节点: 77
   - 点亮的LoG节点: 13

🎯 推理质量统计:
   - 完美推理: 6 (节点正确 + 路径正确)
   - 部分推理: 4 (节点正确 + 路径部分错误)
   - 无效推理: 3 (节点错误或路径完全错误)
[LoG分析] LoG图: 13节点, 10前提, 复杂度1-10

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 23
   - 前提节点: 10
   - 推理节点: 7
   - 幻觉节点: 6
   - 点亮LoG节点: 13

❌ 幻觉节点详情:
   - x is babgpus (出现3次)
   - yexbpus is lerwpus and pazjpus (出现2次)
   - lerwpus is babgpus and rayspus (出现1次)
   - x is relmpus and muqcpus (出现1次)
   - lerwpus is yexbpus (出现1次)
   - relmpus is babgpus (出现2次)

✅ 推理节点详情:
   🟢 geqlpus is babdpus (出现4次, 质量:perfect)
   🟢 geqlpus is naydpus (出现1次, 质量:perfect)
   🟢 hohspus is zifdpus (出现6次, 质量:perfect)
   🟡 x is relmpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus', 'x is relmpus and muqcpus']
   🟢 hohspus is hozfpus (出现1次, 质量:perfect)
   🟢 gamhpus is geqlpus (出现3次, 质量:perfect)
   🟡 x is babdpus (出现7次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus', 'x is relmpus and muqcpus']

🔥 点亮的LoG节点:
   - notppus is hohspus
   - zifdpus is babdpus or babqpus or babxpus
   - duykpus is notppus
   - geqlpus is babdpus
   - x is zifdpus
   - x is notppus
   - x is babdpus or babqpus or babxpus
   - geqlpus is babdpus or babqpus or babxpus
   - zifdpus is geqlpus
   - zifdpus is geqlpus and rukqpus
   - x is duykpus
   - hohspus is zifdpus
   - notppus is zifdpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus or babqpus or babxpus (第4层)
   节点Coverage: 13/13 = 100.00%
   前提条件Coverage: 10/10 = 100.00%
   各推理层点亮比例:
     第1层: 6/6 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 6/13 = 46.15%
   可推导节点: 7/13
   Strict Error Rate: 8/13 = 61.54%
   严格有效节点: 5/13

   详细分析:
     完美推理: 6 (46.15%)
     部分推理: 4 (30.77%)
     无效推理: 3 (23.08%)

================================================================================
处理记录 2/50
================================================================================
记录索引: 1
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_1.json
✅ 使用缓存结果:
   - 句子数: 43
   - 提取的语句数: 43
   - 初始条件数: 4

=== Statement提取完成 ===
总句子数: 43
成功提取: 43
失败提取: 0
总statements数: 43

=== 开始清洗Statement格式 ===
原始statements数: 43
清洗后statements数: 38
过滤掉的statements数: 5
清洗后的statements:
  1. [actual] ruvdpus is poycpus and tegzpus
  2. [actual] x is ruvdpus and qabtpus
  3. [actual] gisbpus is babdpus and qoqkpus and yukxpus
  4. [actual] poycpus is gisbpus
  5. [planning] x is babdpus
  6. [planning] x is babdpus
  7. [actual] x is ruvdpus and qabtpus
  8. [actual] x is a member of ruvdpus
  9. [actual] x is a member of qabtpus
  10. [planning] x is babdpus
  11. [actual] ruvdpus is poycpus and tegzpus
  12. [actual] ruvdpus is a subset of poycpus
  13. [actual] ruvdpus is a subset of tegzpus
  14. [actual] ruvdpus is poycpus and tegzpus
  15. [actual] ruvdpus is poycpus
  16. [planning] x is ruvdpus
  17. [planning] x is poycpus
  18. [planning] x is tegzpus
  19. [actual] poycpus is gisbpus
  20. [actual] poycpus is gisbpus
  21. [actual] x is poycpus
  22. [actual] x is gisbpus
  23. [actual] gisbpus is babdpus and qoqkpus and yukxpus
  24. [actual] gisbpus is babdpus
  25. [actual] gisbpus is qoqkpus and yukxpus
  26. [actual] x is gisbpus
  27. [actual] x is babdpus
  28. [actual] x is ruvdpus
  29. [actual] ruvdpus is poycpus
  30. [actual] x is poycpus
  31. [actual] poycpus is gisbpus
  32. [actual] x is gisbpus
  33. [actual] gisbpus is babdpus
  34. [planning] x is babdpus
  35. [actual] x is babdpus
  36. [actual] x is qabtpus
  37. [actual] x is babdpus
  38. [actual] gisbpus is qoqkpus and yukxpus

=== 开始标准化和解析节点 ===
清洗后statements数: 38
标准化后节点数: 34
过滤掉的无效实体数: 4
标准化后的节点:
  1. [actual] ruvdpus → poycpus and tegzpus (原始: ruvdpus is poycpus and tegzpus)
  2. [actual] x → ruvdpus and qabtpus (原始: x is ruvdpus and qabtpus)
  3. [actual] gisbpus → babdpus and qoqkpus and yukxpus (原始: gisbpus is babdpus and qoqkpus and yukxpus)
  4. [actual] poycpus → gisbpus (原始: poycpus is gisbpus)
  5. [planning] x → babdpus (原始: x is babdpus)
  6. [planning] x → babdpus (原始: x is babdpus)
  7. [actual] x → ruvdpus and qabtpus (原始: x is ruvdpus and qabtpus)
  8. [planning] x → babdpus (原始: x is babdpus)
  9. [actual] ruvdpus → poycpus and tegzpus (原始: ruvdpus is poycpus and tegzpus)
  10. [actual] ruvdpus → poycpus and tegzpus (原始: ruvdpus is poycpus and tegzpus)
  11. [actual] ruvdpus → poycpus (原始: ruvdpus is poycpus)
  12. [planning] x → ruvdpus (原始: x is ruvdpus)
  13. [planning] x → poycpus (原始: x is poycpus)
  14. [planning] x → tegzpus (原始: x is tegzpus)
  15. [actual] poycpus → gisbpus (原始: poycpus is gisbpus)
  16. [actual] poycpus → gisbpus (原始: poycpus is gisbpus)
  17. [actual] x → poycpus (原始: x is poycpus)
  18. [actual] x → gisbpus (原始: x is gisbpus)
  19. [actual] gisbpus → babdpus and qoqkpus and yukxpus (原始: gisbpus is babdpus and qoqkpus and yukxpus)
  20. [actual] gisbpus → babdpus (原始: gisbpus is babdpus)
  21. [actual] gisbpus → qoqkpus and yukxpus (原始: gisbpus is qoqkpus and yukxpus)
  22. [actual] x → gisbpus (原始: x is gisbpus)
  23. [actual] x → babdpus (原始: x is babdpus)
  24. [actual] x → ruvdpus (原始: x is ruvdpus)
  25. [actual] ruvdpus → poycpus (原始: ruvdpus is poycpus)
  26. [actual] x → poycpus (原始: x is poycpus)
  27. [actual] poycpus → gisbpus (原始: poycpus is gisbpus)
  28. [actual] x → gisbpus (原始: x is gisbpus)
  29. [actual] gisbpus → babdpus (原始: gisbpus is babdpus)
  30. [planning] x → babdpus (原始: x is babdpus)
  31. [actual] x → babdpus (原始: x is babdpus)
  32. [actual] x → qabtpus (原始: x is qabtpus)
  33. [actual] x → babdpus (原始: x is babdpus)
  34. [actual] gisbpus → qoqkpus and yukxpus (原始: gisbpus is qoqkpus and yukxpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 7
[后处理] 加载LoG图，包含 7 个节点
  LoG节点 0: x is babdpus (规则: CE, 深度: 1)
  LoG节点 1: x is babdpus and qoqkpus (规则: MP, 深度: 2)
  LoG节点 2: x is poycpus (规则: MP, 深度: 3)
  LoG节点 3: poycpus is babdpus and qoqkpus (规则: CE, 深度: 3)
  LoG节点 4: x is ruvdpus (规则: CE, 深度: 4)
  LoG节点 5: ruvdpus is poycpus (规则: CE, 深度: 4)
  LoG节点 6: poycpus is babdpus and qoqkpus and yukxpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 34
   - 初始条件数: 4
   - LoG图节点数: 7

📋 初始条件列表:
    1. ruvdpus is poycpus and tegzpus
    2. x is ruvdpus and qabtpus
    3. gisbpus is babdpus and qoqkpus and yukxpus
    4. poycpus is gisbpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 4 个前提节点

🔍 开始处理actual节点...

   节点 1: ruvdpus is poycpus and tegzpus
      ↻ 重复节点，计数: 2

   节点 2: x is ruvdpus and qabtpus
      ↻ 重复节点，计数: 2

   节点 3: gisbpus is babdpus and qoqkpus and yukxpus
      ↻ 重复节点，计数: 2

   节点 4: poycpus is gisbpus
      ↻ 重复节点，计数: 2

   节点 5: x is ruvdpus and qabtpus
      ↻ 重复节点，计数: 3

   节点 6: ruvdpus is poycpus and tegzpus
      ↻ 重复节点，计数: 3

   节点 7: ruvdpus is poycpus and tegzpus
      ↻ 重复节点，计数: 4

   节点 8: ruvdpus is poycpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: ruvdpus is poycpus
      ✅ 验证成功 + LoG匹配

   节点 9: poycpus is gisbpus
      ↻ 重复节点，计数: 3

   节点 10: poycpus is gisbpus
      ↻ 重复节点，计数: 4

   节点 11: x is poycpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is poycpus
[子树点亮]     └─ 点亮依赖节点: x is ruvdpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 12: x is gisbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is poycpus → poycpus is gisbpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is poycpus
  - 前提: poycpus is gisbpus

   节点 13: gisbpus is babdpus and qoqkpus and yukxpus
      ↻ 重复节点，计数: 3

   节点 14: gisbpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gisbpus is babdpus and qoqkpus and yukxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gisbpus is babdpus and qoqkpus and yukxpus

   节点 15: gisbpus is qoqkpus and yukxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: gisbpus is qoqkpus → gisbpus is yukxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gisbpus is babdpus and qoqkpus and yukxpus

   节点 16: x is gisbpus
      ↻ 重复节点，计数: 2

   节点 17: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: x is babdpus and qoqkpus (深度2)
[子树点亮]     └─ 点亮依赖节点: poycpus is babdpus and qoqkpus (深度3)
[子树点亮]     └─ 点亮依赖节点: poycpus is babdpus and qoqkpus and yukxpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 18: x is ruvdpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 19: ruvdpus is poycpus
      ↻ 重复节点，计数: 2

   节点 20: x is poycpus
      ↻ 重复节点，计数: 2

   节点 21: poycpus is gisbpus
      ↻ 重复节点，计数: 5

   节点 22: x is gisbpus
      ↻ 重复节点，计数: 3

   节点 23: gisbpus is babdpus
      ↻ 重复节点，计数: 2

   节点 24: x is babdpus
      ↻ 重复节点，计数: 2

   节点 25: x is qabtpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is ruvdpus and qabtpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is ruvdpus and qabtpus

   节点 26: x is babdpus
      ↻ 重复节点，计数: 3

   节点 27: gisbpus is qoqkpus and yukxpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 27
   - 新增节点: 8
   - 更新已存在节点: 19
   - 点亮的LoG节点: 7

🎯 推理质量统计:
   - 完美推理: 8 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 7节点, 4前提, 复杂度1-4

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 12
   - 前提节点: 4
   - 推理节点: 8
   - 幻觉节点: 0
   - 点亮LoG节点: 7

✅ 推理节点详情:
   🟢 ruvdpus is poycpus (出现2次, 质量:perfect)
   🟢 x is poycpus (出现2次, 质量:perfect)
   🟢 x is gisbpus (出现3次, 质量:perfect)
   🟢 gisbpus is babdpus (出现2次, 质量:perfect)
   🟢 gisbpus is qoqkpus and yukxpus (出现2次, 质量:perfect)
   🟢 x is babdpus (出现3次, 质量:perfect)
   🟢 x is ruvdpus (出现1次, 质量:perfect)
   🟢 x is qabtpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - poycpus is babdpus and qoqkpus
   - x is babdpus and qoqkpus
   - x is poycpus
   - x is babdpus
   - x is ruvdpus
   - ruvdpus is poycpus
   - poycpus is babdpus and qoqkpus and yukxpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus (第4层)
   节点Coverage: 7/7 = 100.00%
   前提条件Coverage: 4/4 = 100.00%
   各推理层点亮比例:
     第1层: 3/3 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/8 = 0.00%
   可推导节点: 8/8
   Strict Error Rate: 0/8 = 0.00%
   严格有效节点: 8/8

   详细分析:
     完美推理: 8 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 3/50
================================================================================
记录索引: 2
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_2.json
✅ 使用缓存结果:
   - 句子数: 134
   - 提取的语句数: 171
   - 初始条件数: 7

=== Statement提取完成 ===
总句子数: 134
成功提取: 134
失败提取: 0
总statements数: 171

=== 开始清洗Statement格式 ===
原始statements数: 171
清洗后statements数: 105
过滤掉的statements数: 66
清洗后的statements:
  1. [actual] cozlpus is lobtpus and huclpus
  2. [actual] cozlpus is lobtpus
  3. [actual] cozlpus is huclpus
  4. [actual] x is lonwpus and zihxpus
  5. [actual] x is lonwpus
  6. [actual] x is zihxpus
  7. [actual] yoxtpus is babdpus and babqpus and worhpus
  8. [actual] yoxtpus is babdpus
  9. [actual] yoxtpus is babqpus
  10. [actual] yoxtpus is worhpus
  11. [actual] lobtpus is hanfpus
  12. [actual] lobtpus is hanfpus
  13. [actual] hanfpus is lojrpus and fedxpus
  14. [actual] hanfpus is lojrpus
  15. [actual] hanfpus is fedxpus
  16. [actual] lonwpus is cozlpus
  17. [actual] lonwpus is cozlpus
  18. [actual] lojrpus is yoxtpus
  19. [actual] lojrpus is yoxtpus
  20. [planning] x is babdpus and babqpus
  21. [planning] x is babdpus and babqpus
  22. [planning] x is babdpus
  23. [planning] x is babqpus
  24. [actual] x is lonwpus and zihxpus
  25. [actual] x is lonwpus
  26. [actual] lonwpus is cozlpus
  27. [actual] lonwpus is cozlpus
  28. [actual] x is lonwpus
  29. [actual] lonwpus is cozlpus
  30. [actual] x is cozlpus
  31. [planning] x is cozlpus
  32. [actual] cozlpus is lobtpus and huclpus
  33. [planning] cozlpus is lobtpus
  34. [planning] cozlpus is huclpus
  35. [actual] lobtpus is hanfpus
  36. [actual] lojrpus is yoxtpus
  37. [actual] yoxtpus is babdpus
  38. [actual] cozlpus is lobtpus
  39. [planning] cozlpus is a subtype of lobtpus
  40. [actual] x is lonwpus
  41. [actual] x is an individual
  42. [actual] cozlpus is a category
  43. [actual] x is lonwpus and zihxpus
  44. [planning] lonwpus is cozlpus
  45. [planning] lonwpus is a subtype of cozlpus
  46. [planning] lonwpus is an instance of cozlpus
  47. [planning] lonwpus is a category that is a member of cozlpus
  48. [actual] lonwpus is cozlpus
  49. [planning] lonwpus is cozlpus
  50. [planning] lonwpus is cozlpus
  51. [actual] x is lonwpus
  52. [planning] lonwpus is cozlpus
  53. [planning] x is cozlpus
  54. [planning] lonwpus is cozlpus
  55. [planning] x is lonwpus
  56. [planning] lonwpus is cozlpus
  57. [planning] cozlpus is a set of sets
  58. [actual] lobtpus is hanfpus
  59. [planning] lobtpus is a category
  60. [planning] lobtpus is hanfpus
  61. [planning] lobtpus is babgpus
  62. [actual] hanfpus is lojrpus and fedxpus
  63. [actual] lojrpus is yoxtpus
  64. [actual] yoxtpus is babdpus and babqpus and worhpus
  65. [actual] cozlpus is lobtpus and huclpus
  66. [actual] x is lonwpus and zihxpus
  67. [actual] lonwpus is cozlpus
  68. [planning] x is babdpus and babqpus
  69. [planning] x is babdpus
  70. [planning] x is babqpus
  71. [actual] x is lonwpus
  72. [actual] lonwpus is cozlpus
  73. [actual] cozlpus is lobtpus
  74. [actual] cozlpus is huclpus
  75. [actual] lobtpus is hanfpus
  76. [actual] hanfpus is lojrpus
  77. [actual] hanfpus is fedxpus
  78. [actual] lojrpus is yoxtpus
  79. [actual] yoxtpus is babdpus
  80. [actual] yoxtpus is babqpus
  81. [actual] yoxtpus is worhpus
  82. [actual] x is lonwpus
  83. [actual] lonwpus is cozlpus
  84. [actual] cozlpus is lobtpus
  85. [actual] lobtpus is hanfpus
  86. [actual] hanfpus is lojrpus
  87. [actual] yoxtpus is babdpus
  88. [actual] x is lonwpus
  89. [actual] lonwpus is babdpus
  90. [actual] x is babdpus
  91. [actual] x is babdpus and babqpus
  92. [actual] lonwpus is cozlpus
  93. [actual] cozlpus is lobtpus
  94. [actual] lobtpus is hanfpus
  95. [actual] hanfpus is lojrpus
  96. [actual] yoxtpus is babqpus
  97. [actual] lonwpus is babqpus
  98. [actual] x is lonwpus
  99. [actual] x is babdpus and babqpus
  100. [planning] x is babdpus and babqpus
  101. [actual] x is zihxpus
  102. [actual] hanfpus is lojrpus
  103. [actual] hanfpus is babdpus
  104. [actual] x is lonwpus
  105. [actual] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 105
标准化后节点数: 97
过滤掉的无效实体数: 8
标准化后的节点:
  1. [actual] cozlpus → lobtpus and huclpus (原始: cozlpus is lobtpus and huclpus)
  2. [actual] cozlpus → lobtpus (原始: cozlpus is lobtpus)
  3. [actual] cozlpus → huclpus (原始: cozlpus is huclpus)
  4. [actual] x → lonwpus and zihxpus (原始: x is lonwpus and zihxpus)
  5. [actual] x → lonwpus (原始: x is lonwpus)
  6. [actual] x → zihxpus (原始: x is zihxpus)
  7. [actual] yoxtpus → babdpus and babqpus and worhpus (原始: yoxtpus is babdpus and babqpus and worhpus)
  8. [actual] yoxtpus → babdpus (原始: yoxtpus is babdpus)
  9. [actual] yoxtpus → babqpus (原始: yoxtpus is babqpus)
  10. [actual] yoxtpus → worhpus (原始: yoxtpus is worhpus)
  11. [actual] lobtpus → hanfpus (原始: lobtpus is hanfpus)
  12. [actual] lobtpus → hanfpus (原始: lobtpus is hanfpus)
  13. [actual] hanfpus → lojrpus and fedxpus (原始: hanfpus is lojrpus and fedxpus)
  14. [actual] hanfpus → lojrpus (原始: hanfpus is lojrpus)
  15. [actual] hanfpus → fedxpus (原始: hanfpus is fedxpus)
  16. [actual] lonwpus → cozlpus (原始: lonwpus is cozlpus)
  17. [actual] lonwpus → cozlpus (原始: lonwpus is cozlpus)
  18. [actual] lojrpus → yoxtpus (原始: lojrpus is yoxtpus)
  19. [actual] lojrpus → yoxtpus (原始: lojrpus is yoxtpus)
  20. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  21. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  22. [planning] x → babdpus (原始: x is babdpus)
  23. [planning] x → babqpus (原始: x is babqpus)
  24. [actual] x → lonwpus and zihxpus (原始: x is lonwpus and zihxpus)
  25. [actual] x → lonwpus (原始: x is lonwpus)
  26. [actual] lonwpus → cozlpus (原始: lonwpus is cozlpus)
  27. [actual] lonwpus → cozlpus (原始: lonwpus is cozlpus)
  28. [actual] x → lonwpus (原始: x is lonwpus)
  29. [actual] lonwpus → cozlpus (原始: lonwpus is cozlpus)
  30. [actual] x → cozlpus (原始: x is cozlpus)
  31. [planning] x → cozlpus (原始: x is cozlpus)
  32. [actual] cozlpus → lobtpus and huclpus (原始: cozlpus is lobtpus and huclpus)
  33. [planning] cozlpus → lobtpus (原始: cozlpus is lobtpus)
  34. [planning] cozlpus → huclpus (原始: cozlpus is huclpus)
  35. [actual] lobtpus → hanfpus (原始: lobtpus is hanfpus)
  36. [actual] lojrpus → yoxtpus (原始: lojrpus is yoxtpus)
  37. [actual] yoxtpus → babdpus (原始: yoxtpus is babdpus)
  38. [actual] cozlpus → lobtpus (原始: cozlpus is lobtpus)
  39. [actual] x → lonwpus (原始: x is lonwpus)
  40. [actual] x → lonwpus and zihxpus (原始: x is lonwpus and zihxpus)
  41. [planning] lonwpus → cozlpus (原始: lonwpus is cozlpus)
  42. [actual] lonwpus → cozlpus (原始: lonwpus is cozlpus)
  43. [planning] lonwpus → cozlpus (原始: lonwpus is cozlpus)
  44. [planning] lonwpus → cozlpus (原始: lonwpus is cozlpus)
  45. [actual] x → lonwpus (原始: x is lonwpus)
  46. [planning] lonwpus → cozlpus (原始: lonwpus is cozlpus)
  47. [planning] x → cozlpus (原始: x is cozlpus)
  48. [planning] lonwpus → cozlpus (原始: lonwpus is cozlpus)
  49. [planning] x → lonwpus (原始: x is lonwpus)
  50. [planning] lonwpus → cozlpus (原始: lonwpus is cozlpus)
  51. [actual] lobtpus → hanfpus (原始: lobtpus is hanfpus)
  52. [planning] lobtpus → hanfpus (原始: lobtpus is hanfpus)
  53. [planning] lobtpus → babgpus (原始: lobtpus is babgpus)
  54. [actual] hanfpus → lojrpus and fedxpus (原始: hanfpus is lojrpus and fedxpus)
  55. [actual] lojrpus → yoxtpus (原始: lojrpus is yoxtpus)
  56. [actual] yoxtpus → babdpus and babqpus and worhpus (原始: yoxtpus is babdpus and babqpus and worhpus)
  57. [actual] cozlpus → lobtpus and huclpus (原始: cozlpus is lobtpus and huclpus)
  58. [actual] x → lonwpus and zihxpus (原始: x is lonwpus and zihxpus)
  59. [actual] lonwpus → cozlpus (原始: lonwpus is cozlpus)
  60. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  61. [planning] x → babdpus (原始: x is babdpus)
  62. [planning] x → babqpus (原始: x is babqpus)
  63. [actual] x → lonwpus (原始: x is lonwpus)
  64. [actual] lonwpus → cozlpus (原始: lonwpus is cozlpus)
  65. [actual] cozlpus → lobtpus (原始: cozlpus is lobtpus)
  66. [actual] cozlpus → huclpus (原始: cozlpus is huclpus)
  67. [actual] lobtpus → hanfpus (原始: lobtpus is hanfpus)
  68. [actual] hanfpus → lojrpus (原始: hanfpus is lojrpus)
  69. [actual] hanfpus → fedxpus (原始: hanfpus is fedxpus)
  70. [actual] lojrpus → yoxtpus (原始: lojrpus is yoxtpus)
  71. [actual] yoxtpus → babdpus (原始: yoxtpus is babdpus)
  72. [actual] yoxtpus → babqpus (原始: yoxtpus is babqpus)
  73. [actual] yoxtpus → worhpus (原始: yoxtpus is worhpus)
  74. [actual] x → lonwpus (原始: x is lonwpus)
  75. [actual] lonwpus → cozlpus (原始: lonwpus is cozlpus)
  76. [actual] cozlpus → lobtpus (原始: cozlpus is lobtpus)
  77. [actual] lobtpus → hanfpus (原始: lobtpus is hanfpus)
  78. [actual] hanfpus → lojrpus (原始: hanfpus is lojrpus)
  79. [actual] yoxtpus → babdpus (原始: yoxtpus is babdpus)
  80. [actual] x → lonwpus (原始: x is lonwpus)
  81. [actual] lonwpus → babdpus (原始: lonwpus is babdpus)
  82. [actual] x → babdpus (原始: x is babdpus)
  83. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  84. [actual] lonwpus → cozlpus (原始: lonwpus is cozlpus)
  85. [actual] cozlpus → lobtpus (原始: cozlpus is lobtpus)
  86. [actual] lobtpus → hanfpus (原始: lobtpus is hanfpus)
  87. [actual] hanfpus → lojrpus (原始: hanfpus is lojrpus)
  88. [actual] yoxtpus → babqpus (原始: yoxtpus is babqpus)
  89. [actual] lonwpus → babqpus (原始: lonwpus is babqpus)
  90. [actual] x → lonwpus (原始: x is lonwpus)
  91. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  92. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  93. [actual] x → zihxpus (原始: x is zihxpus)
  94. [actual] hanfpus → lojrpus (原始: hanfpus is lojrpus)
  95. [actual] hanfpus → babdpus (原始: hanfpus is babdpus)
  96. [actual] x → lonwpus (原始: x is lonwpus)
  97. [actual] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 10
[后处理] 加载LoG图，包含 10 个节点
  LoG节点 0: x is babdpus and babqpus (规则: MP, 深度: 1)
  LoG节点 1: x is lobtpus (规则: CE, 深度: 2)
  LoG节点 2: lobtpus is babdpus and babqpus (规则: MP, 深度: 2)
  LoG节点 3: x is lobtpus and huclpus (规则: MP, 深度: 3)
  LoG节点 4: lobtpus is lojrpus (规则: CE, 深度: 3)
  LoG节点 5: lojrpus is babdpus and babqpus (规则: CE, 深度: 3)
  LoG节点 6: x is lonwpus (规则: CE, 深度: 4)
  LoG节点 7: lonwpus is lobtpus and huclpus (规则: MP, 深度: 4)
  LoG节点 8: lobtpus is lojrpus and fedxpus (规则: MP, 深度: 4)
  LoG节点 9: lojrpus is babdpus and babqpus and worhpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 97
   - 初始条件数: 7
   - LoG图节点数: 10

📋 初始条件列表:
    1. cozlpus is lobtpus and huclpus
    2. x is lonwpus and zihxpus
    3. yoxtpus is babdpus and babqpus and worhpus
    4. lobtpus is hanfpus
    5. hanfpus is lojrpus and fedxpus
    6. lonwpus is cozlpus
    7. lojrpus is yoxtpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 7 个前提节点

🔍 开始处理actual节点...

   节点 1: cozlpus is lobtpus and huclpus
      ↻ 重复节点，计数: 2

   节点 2: cozlpus is lobtpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: cozlpus is lobtpus and huclpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: cozlpus is lobtpus and huclpus

   节点 3: cozlpus is huclpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: cozlpus is lobtpus and huclpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: cozlpus is lobtpus and huclpus

   节点 4: x is lonwpus and zihxpus
      ↻ 重复节点，计数: 2

   节点 5: x is lonwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is lonwpus
      ✅ 验证成功 + LoG匹配

   节点 6: x is zihxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is lonwpus and zihxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is lonwpus and zihxpus

   节点 7: yoxtpus is babdpus and babqpus and worhpus
      ↻ 重复节点，计数: 2

   节点 8: yoxtpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yoxtpus is babdpus and babqpus and worhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yoxtpus is babdpus and babqpus and worhpus

   节点 9: yoxtpus is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yoxtpus is babdpus and babqpus and worhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yoxtpus is babdpus and babqpus and worhpus

   节点 10: yoxtpus is worhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yoxtpus is babdpus and babqpus and worhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yoxtpus is babdpus and babqpus and worhpus

   节点 11: lobtpus is hanfpus
      ↻ 重复节点，计数: 2

   节点 12: lobtpus is hanfpus
      ↻ 重复节点，计数: 3

   节点 13: hanfpus is lojrpus and fedxpus
      ↻ 重复节点，计数: 2

   节点 14: hanfpus is lojrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: hanfpus is lojrpus and fedxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: hanfpus is lojrpus and fedxpus

   节点 15: hanfpus is fedxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: hanfpus is lojrpus and fedxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: hanfpus is lojrpus and fedxpus

   节点 16: lonwpus is cozlpus
      ↻ 重复节点，计数: 2

   节点 17: lonwpus is cozlpus
      ↻ 重复节点，计数: 3

   节点 18: lojrpus is yoxtpus
      ↻ 重复节点，计数: 2

   节点 19: lojrpus is yoxtpus
      ↻ 重复节点，计数: 3

   节点 20: x is lonwpus and zihxpus
      ↻ 重复节点，计数: 3

   节点 21: x is lonwpus
      ↻ 重复节点，计数: 2

   节点 22: lonwpus is cozlpus
      ↻ 重复节点，计数: 4

   节点 23: lonwpus is cozlpus
      ↻ 重复节点，计数: 5

   节点 24: x is lonwpus
      ↻ 重复节点，计数: 3

   节点 25: lonwpus is cozlpus
      ↻ 重复节点，计数: 6

   节点 26: x is cozlpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is lonwpus → lonwpus is cozlpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is lonwpus
  - 前提: lonwpus is cozlpus

   节点 27: cozlpus is lobtpus and huclpus
      ↻ 重复节点，计数: 3

   节点 28: lobtpus is hanfpus
      ↻ 重复节点，计数: 4

   节点 29: lojrpus is yoxtpus
      ↻ 重复节点，计数: 4

   节点 30: yoxtpus is babdpus
      ↻ 重复节点，计数: 2

   节点 31: cozlpus is lobtpus
      ↻ 重复节点，计数: 2

   节点 32: x is lonwpus
      ↻ 重复节点，计数: 4

   节点 33: x is lonwpus and zihxpus
      ↻ 重复节点，计数: 4

   节点 34: lonwpus is cozlpus
      ↻ 重复节点，计数: 7

   节点 35: x is lonwpus
      ↻ 重复节点，计数: 5

   节点 36: lobtpus is hanfpus
      ↻ 重复节点，计数: 5

   节点 37: hanfpus is lojrpus and fedxpus
      ↻ 重复节点，计数: 3

   节点 38: lojrpus is yoxtpus
      ↻ 重复节点，计数: 5

   节点 39: yoxtpus is babdpus and babqpus and worhpus
      ↻ 重复节点，计数: 3

   节点 40: cozlpus is lobtpus and huclpus
      ↻ 重复节点，计数: 4

   节点 41: x is lonwpus and zihxpus
      ↻ 重复节点，计数: 5

   节点 42: lonwpus is cozlpus
      ↻ 重复节点，计数: 8

   节点 43: x is lonwpus
      ↻ 重复节点，计数: 6

   节点 44: lonwpus is cozlpus
      ↻ 重复节点，计数: 9

   节点 45: cozlpus is lobtpus
      ↻ 重复节点，计数: 3

   节点 46: cozlpus is huclpus
      ↻ 重复节点，计数: 2

   节点 47: lobtpus is hanfpus
      ↻ 重复节点，计数: 6

   节点 48: hanfpus is lojrpus
      ↻ 重复节点，计数: 2

   节点 49: hanfpus is fedxpus
      ↻ 重复节点，计数: 2

   节点 50: lojrpus is yoxtpus
      ↻ 重复节点，计数: 6

   节点 51: yoxtpus is babdpus
      ↻ 重复节点，计数: 3

   节点 52: yoxtpus is babqpus
      ↻ 重复节点，计数: 2

   节点 53: yoxtpus is worhpus
      ↻ 重复节点，计数: 2

   节点 54: x is lonwpus
      ↻ 重复节点，计数: 7

   节点 55: lonwpus is cozlpus
      ↻ 重复节点，计数: 10

   节点 56: cozlpus is lobtpus
      ↻ 重复节点，计数: 4

   节点 57: lobtpus is hanfpus
      ↻ 重复节点，计数: 7

   节点 58: hanfpus is lojrpus
      ↻ 重复节点，计数: 3

   节点 59: yoxtpus is babdpus
      ↻ 重复节点，计数: 4

   节点 60: x is lonwpus
      ↻ 重复节点，计数: 8

   节点 61: lonwpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: lonwpus is cozlpus → cozlpus is babdpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: lonwpus is cozlpus
  - 前提: cozlpus is lobtpus
  - 前提: lobtpus is hanfpus
  - 前提: hanfpus is lojrpus
  - 前提: lojrpus is yoxtpus
  - 前提: yoxtpus is babdpus
  ✓ 点亮LoG节点: lobtpus is lojrpus
[子树点亮]     └─ 点亮依赖节点: lobtpus is lojrpus and fedxpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 62: x is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is lonwpus → lonwpus is babdpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is lonwpus
  - 前提: lonwpus is babdpus

   节点 63: x is babdpus and babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus and babqpus
[子树点亮]     └─ 点亮依赖节点: x is lobtpus (深度2)
[子树点亮]     └─ 点亮依赖节点: lobtpus is babdpus and babqpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is lobtpus and huclpus (深度3)
[子树点亮]     └─ 点亮依赖节点: lojrpus is babdpus and babqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: lonwpus is lobtpus and huclpus (深度4)
[子树点亮]     └─ 点亮依赖节点: lojrpus is babdpus and babqpus and worhpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 6 个节点
      ✅ 验证成功 + LoG匹配

   节点 64: lonwpus is cozlpus
      ↻ 重复节点，计数: 11

   节点 65: cozlpus is lobtpus
      ↻ 重复节点，计数: 5

   节点 66: lobtpus is hanfpus
      ↻ 重复节点，计数: 8

   节点 67: hanfpus is lojrpus
      ↻ 重复节点，计数: 4

   节点 68: yoxtpus is babqpus
      ↻ 重复节点，计数: 3

   节点 69: lonwpus is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: lonwpus is cozlpus → cozlpus is babqpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: lonwpus is cozlpus
  - 前提: cozlpus is lobtpus
  - 前提: lobtpus is hanfpus
  - 前提: hanfpus is lojrpus
  - 前提: lojrpus is yoxtpus
  - 前提: yoxtpus is babqpus

   节点 70: x is lonwpus
      ↻ 重复节点，计数: 9

   节点 71: x is babdpus and babqpus
      ↻ 重复节点，计数: 2

   节点 72: x is zihxpus
      ↻ 重复节点，计数: 2

   节点 73: hanfpus is lojrpus
      ↻ 重复节点，计数: 5

   节点 74: hanfpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: hanfpus is lojrpus → lojrpus is babdpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: hanfpus is lojrpus
  - 前提: lojrpus is yoxtpus
  - 前提: yoxtpus is babdpus

   节点 75: x is lonwpus
      ↻ 重复节点，计数: 10

   节点 76: x is babdpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 76
   - 新增节点: 15
   - 更新已存在节点: 61
   - 点亮的LoG节点: 10

🎯 推理质量统计:
   - 完美推理: 15 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 10节点, 7前提, 复杂度1-7

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 22
   - 前提节点: 7
   - 推理节点: 15
   - 幻觉节点: 0
   - 点亮LoG节点: 10

✅ 推理节点详情:
   🟢 cozlpus is lobtpus (出现5次, 质量:perfect)
   🟢 cozlpus is huclpus (出现2次, 质量:perfect)
   🟢 x is lonwpus (出现10次, 质量:perfect)
   🟢 x is zihxpus (出现2次, 质量:perfect)
   🟢 yoxtpus is babdpus (出现4次, 质量:perfect)
   🟢 yoxtpus is babqpus (出现3次, 质量:perfect)
   🟢 yoxtpus is worhpus (出现2次, 质量:perfect)
   🟢 hanfpus is lojrpus (出现5次, 质量:perfect)
   🟢 hanfpus is fedxpus (出现2次, 质量:perfect)
   🟢 x is cozlpus (出现1次, 质量:perfect)
   🟢 lonwpus is babdpus (出现1次, 质量:perfect)
   🟢 x is babdpus (出现2次, 质量:perfect)
   🟢 x is babdpus and babqpus (出现2次, 质量:perfect)
   🟢 lonwpus is babqpus (出现1次, 质量:perfect)
   🟢 hanfpus is babdpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - lobtpus is lojrpus and fedxpus
   - x is lonwpus
   - lobtpus is babdpus and babqpus
   - x is babdpus and babqpus
   - x is lobtpus
   - x is lobtpus and huclpus
   - lonwpus is lobtpus and huclpus
   - lojrpus is babdpus and babqpus and worhpus
   - lobtpus is lojrpus
   - lojrpus is babdpus and babqpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus and babqpus (第4层)
   节点Coverage: 10/10 = 100.00%
   前提条件Coverage: 7/7 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/15 = 0.00%
   可推导节点: 15/15
   Strict Error Rate: 0/15 = 0.00%
   严格有效节点: 15/15

   详细分析:
     完美推理: 15 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 4/50
================================================================================
记录索引: 3
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_3.json
✅ 使用缓存结果:
   - 句子数: 160
   - 提取的语句数: 234
   - 初始条件数: 5

=== Statement提取完成 ===
总句子数: 160
成功提取: 160
失败提取: 0
总statements数: 234

=== 开始清洗Statement格式 ===
原始statements数: 234
清洗后statements数: 158
过滤掉的statements数: 76
清洗后的statements:
  1. [actual] lehwpus is gawvpus
  2. [actual] x is lehwpus
  3. [actual] tormpus is jedrpus
  4. [actual] gawvpus is tormpus and cezrpus
  5. [actual] jedrpus is babdpus and qumtpus and xucmpus
  6. [planning] x is babdpus
  7. [planning] x is babdpus
  8. [actual] x is lehwpus
  9. [actual] lehwpus is gawvpus
  10. [actual] x is lehwpus
  11. [actual] lehwpus is gawvpus
  12. [actual] x is gawvpus
  13. [planning] lehwpus is gawvpus
  14. [planning] lehwpus is gawvpus
  15. [planning] x is lehwpus
  16. [planning] x is lehwpus
  17. [planning] x is lehwpus and x ⊆ lehwpus
  18. [actual] gawvpus is tormpus and cezrpus
  19. [planning] gawvpus is tormpus and cezrpus
  20. [planning] gawvpus is tormpus and cezrpus
  21. [actual] jedrpus is babdpus and qumtpus and xucmpus
  22. [actual] jedrpus is babdpus
  23. [actual] jedrpus is qumtpus
  24. [actual] jedrpus is xucmpus
  25. [planning] jedrpus is babdpus and qumtpus and xucmpus
  26. [planning] x is babdpus
  27. [planning] x is babdpus
  28. [actual] x is lehwpus
  29. [actual] lehwpus is gawvpus
  30. [planning] x is lehwpus
  31. [planning] lehwpus is gawvpus
  32. [planning] x is gawvpus
  33. [planning] x is babgpus
  34. [actual] gawvpus is tormpus and cezrpus
  35. [planning] gawvpus is tormpus
  36. [planning] gawvpus is cezrpus
  37. [planning] gawvpus is an element of both
  38. [planning] gawvpus is a category
  39. [planning] gawvpus is a subcategory of tormpus and cezrpus
  40. [actual] tormpus is jedrpus
  41. [actual] jedrpus is babdpus and qumtpus and xucmpus
  42. [planning] x is babdpus
  43. [actual] x is lehwpus
  44. [actual] lehwpus is gawvpus
  45. [actual] x is gawvpus
  46. [actual] gawvpus is tormpus and cezrpus
  47. [actual] gawvpus is tormpus
  48. [planning] gawvpus is tormpus
  49. [planning] gawvpus is tormpus
  50. [actual] tormpus is jedrpus
  51. [planning] tormpus is jedrpus
  52. [planning] gawvpus is tormpus
  53. [planning] gawvpus is jedrpus
  54. [actual] jedrpus is babdpus
  55. [planning] gawvpus is babdpus
  56. [planning] gawvpus is babdpus
  57. [actual] x is gawvpus
  58. [actual] x is babdpus
  59. [planning] lehwpus is gawvpus
  60. [planning] lehwpus is gawvpus
  61. [actual] lehwpus is gawvpus
  62. [planning] lehwpus is gawvpus
  63. [actual] gawvpus is tormpus and cezrpus
  64. [actual] gawvpus is tormpus
  65. [actual] gawvpus is cezrpus
  66. [actual] jedrpus is babdpus and qumtpus and xucmpus
  67. [actual] tormpus is jedrpus
  68. [actual] gawvpus is tormpus and cezrpus
  69. [actual] lehwpus is gawvpus
  70. [actual] x is lehwpus
  71. [planning] x is babdpus
  72. [actual] x is lehwpus
  73. [actual] lehwpus is gawvpus
  74. [planning] x is gawvpus
  75. [actual] lehwpus is an element of gawvpus
  76. [actual] x is an element of lehwpus
  77. [planning] x is an element of gawvpus
  78. [actual] gawvpus is tormpus and cezrpus
  79. [planning] gawvpus is a subcategory of tormpus
  80. [actual] gawvpus is tormpus
  81. [planning] gawvpus is tormpus
  82. [planning] gawvpus is tormpus
  83. [planning] gawvpus is tormpus
  84. [planning] x is babdpus
  85. [planning] x is babdpus
  86. [actual] jedrpus is babdpus and qumtpus and xucmpus
  87. [planning] jedrpus is an element of babdpus
  88. [actual] babdpus is a category that contains jedrpus as an element
  89. [actual] jedrpus is a subset of babdpus
  90. [actual] tormpus is jedrpus
  91. [actual] tormpus is jedrpus
  92. [planning] tormpus is jedrpus
  93. [actual] gawvpus is tormpus
  94. [actual] gawvpus is tormpus
  95. [planning] gawvpus is tormpus
  96. [planning] x is an instance of babdpus
  97. [actual] x is lehwpus
  98. [actual] lehwpus is gawvpus
  99. [planning] lehwpus is gawvpus
  100. [planning] x is lehwpus
  101. [planning] x is gawvpus
  102. [planning] lehwpus is gawvpus
  103. [planning] x is gawvpus
  104. [planning] gawvpus is a set that contains all elements of lehwpus
  105. [actual] gawvpus is tormpus and cezrpus
  106. [actual] gawvpus is tormpus
  107. [actual] gawvpus is cezrpus
  108. [actual] jedrpus is babdpus and qumtpus and xucmpus
  109. [actual] tormpus is jedrpus
  110. [planning] gawvpus is tormpus
  111. [actual] gawvpus is tormpus
  112. [actual] gawvpus is cezrpus
  113. [planning] gawvpus is tormpus
  114. [planning] gawvpus is cezrpus
  115. [actual] lehwpus is gawvpus
  116. [planning] x is lehwpus
  117. [planning] x is lehwpus
  118. [actual] x is an individual
  119. [actual] x is an element of lehwpus
  120. [actual] x is lehwpus
  121. [actual] lehwpus is gawvpus
  122. [actual] x is an individual
  123. [actual] x is lehwpus
  124. [actual] x is lehwpus
  125. [actual] lehwpus is gawvpus
  126. [actual] x is lehwpus
  127. [actual] lehwpus is gawvpus
  128. [actual] x is gawvpus
  129. [actual] gawvpus is tormpus and cezrpus
  130. [actual] gawvpus is tormpus
  131. [planning] gawvpus is tormpus
  132. [planning] gawvpus is tormpus
  133. [actual] gawvpus is a category
  134. [planning] gawvpus is tormpus
  135. [planning] gawvpus is tormpus
  136. [planning] gawvpus is tormpus
  137. [actual] gawvpus is tormpus and cezrpus
  138. [planning] gawvpus is a subset of both tormpus and cezrpus
  139. [planning] gawvpus is an element of both tormpus and cezrpus
  140. [actual] gawvpus is a subset of tormpus
  141. [planning] gawvpus is tormpus
  142. [actual] gawvpus is tormpus
  143. [actual] gawvpus is tormpus and cezrpus
  144. [actual] tormpus is jedrpus
  145. [actual] jedrpus is babdpus and qumtpus and xucmpus
  146. [actual] gawvpus is tormpus
  147. [actual] x is tormpus
  148. [actual] tormpus is jedrpus
  149. [actual] x is jedrpus
  150. [actual] jedrpus is babdpus
  151. [planning] x is babdpus
  152. [actual] x is babdpus
  153. [actual] gawvpus is tormpus and cezrpus
  154. [planning] gawvpus is tormpus and cezrpus
  155. [actual] tormpus is jedrpus
  156. [actual] jedrpus is babdpus
  157. [actual] x is babdpus
  158. [planning] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 158
标准化后节点数: 138
过滤掉的无效实体数: 20
标准化后的节点:
  1. [actual] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  2. [actual] x → lehwpus (原始: x is lehwpus)
  3. [actual] tormpus → jedrpus (原始: tormpus is jedrpus)
  4. [actual] gawvpus → tormpus and cezrpus (原始: gawvpus is tormpus and cezrpus)
  5. [actual] jedrpus → babdpus and qumtpus and xucmpus (原始: jedrpus is babdpus and qumtpus and xucmpus)
  6. [planning] x → babdpus (原始: x is babdpus)
  7. [planning] x → babdpus (原始: x is babdpus)
  8. [actual] x → lehwpus (原始: x is lehwpus)
  9. [actual] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  10. [actual] x → lehwpus (原始: x is lehwpus)
  11. [actual] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  12. [actual] x → gawvpus (原始: x is gawvpus)
  13. [planning] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  14. [planning] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  15. [planning] x → lehwpus (原始: x is lehwpus)
  16. [planning] x → lehwpus (原始: x is lehwpus)
  17. [actual] gawvpus → tormpus and cezrpus (原始: gawvpus is tormpus and cezrpus)
  18. [planning] gawvpus → tormpus and cezrpus (原始: gawvpus is tormpus and cezrpus)
  19. [planning] gawvpus → tormpus and cezrpus (原始: gawvpus is tormpus and cezrpus)
  20. [actual] jedrpus → babdpus and qumtpus and xucmpus (原始: jedrpus is babdpus and qumtpus and xucmpus)
  21. [actual] jedrpus → babdpus (原始: jedrpus is babdpus)
  22. [actual] jedrpus → qumtpus (原始: jedrpus is qumtpus)
  23. [actual] jedrpus → xucmpus (原始: jedrpus is xucmpus)
  24. [planning] jedrpus → babdpus and qumtpus and xucmpus (原始: jedrpus is babdpus and qumtpus and xucmpus)
  25. [planning] x → babdpus (原始: x is babdpus)
  26. [planning] x → babdpus (原始: x is babdpus)
  27. [actual] x → lehwpus (原始: x is lehwpus)
  28. [actual] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  29. [planning] x → lehwpus (原始: x is lehwpus)
  30. [planning] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  31. [planning] x → gawvpus (原始: x is gawvpus)
  32. [planning] x → babgpus (原始: x is babgpus)
  33. [actual] gawvpus → tormpus and cezrpus (原始: gawvpus is tormpus and cezrpus)
  34. [planning] gawvpus → tormpus (原始: gawvpus is tormpus)
  35. [planning] gawvpus → cezrpus (原始: gawvpus is cezrpus)
  36. [actual] tormpus → jedrpus (原始: tormpus is jedrpus)
  37. [actual] jedrpus → babdpus and qumtpus and xucmpus (原始: jedrpus is babdpus and qumtpus and xucmpus)
  38. [planning] x → babdpus (原始: x is babdpus)
  39. [actual] x → lehwpus (原始: x is lehwpus)
  40. [actual] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  41. [actual] x → gawvpus (原始: x is gawvpus)
  42. [actual] gawvpus → tormpus and cezrpus (原始: gawvpus is tormpus and cezrpus)
  43. [actual] gawvpus → tormpus (原始: gawvpus is tormpus)
  44. [planning] gawvpus → tormpus (原始: gawvpus is tormpus)
  45. [planning] gawvpus → tormpus (原始: gawvpus is tormpus)
  46. [actual] tormpus → jedrpus (原始: tormpus is jedrpus)
  47. [planning] tormpus → jedrpus (原始: tormpus is jedrpus)
  48. [planning] gawvpus → tormpus (原始: gawvpus is tormpus)
  49. [planning] gawvpus → jedrpus (原始: gawvpus is jedrpus)
  50. [actual] jedrpus → babdpus (原始: jedrpus is babdpus)
  51. [planning] gawvpus → babdpus (原始: gawvpus is babdpus)
  52. [planning] gawvpus → babdpus (原始: gawvpus is babdpus)
  53. [actual] x → gawvpus (原始: x is gawvpus)
  54. [actual] x → babdpus (原始: x is babdpus)
  55. [planning] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  56. [planning] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  57. [actual] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  58. [planning] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  59. [actual] gawvpus → tormpus and cezrpus (原始: gawvpus is tormpus and cezrpus)
  60. [actual] gawvpus → tormpus (原始: gawvpus is tormpus)
  61. [actual] gawvpus → cezrpus (原始: gawvpus is cezrpus)
  62. [actual] jedrpus → babdpus and qumtpus and xucmpus (原始: jedrpus is babdpus and qumtpus and xucmpus)
  63. [actual] tormpus → jedrpus (原始: tormpus is jedrpus)
  64. [actual] gawvpus → tormpus and cezrpus (原始: gawvpus is tormpus and cezrpus)
  65. [actual] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  66. [actual] x → lehwpus (原始: x is lehwpus)
  67. [planning] x → babdpus (原始: x is babdpus)
  68. [actual] x → lehwpus (原始: x is lehwpus)
  69. [actual] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  70. [planning] x → gawvpus (原始: x is gawvpus)
  71. [actual] gawvpus → tormpus and cezrpus (原始: gawvpus is tormpus and cezrpus)
  72. [actual] gawvpus → tormpus (原始: gawvpus is tormpus)
  73. [planning] gawvpus → tormpus (原始: gawvpus is tormpus)
  74. [planning] gawvpus → tormpus (原始: gawvpus is tormpus)
  75. [planning] gawvpus → tormpus (原始: gawvpus is tormpus)
  76. [planning] x → babdpus (原始: x is babdpus)
  77. [planning] x → babdpus (原始: x is babdpus)
  78. [actual] jedrpus → babdpus and qumtpus and xucmpus (原始: jedrpus is babdpus and qumtpus and xucmpus)
  79. [actual] tormpus → jedrpus (原始: tormpus is jedrpus)
  80. [actual] tormpus → jedrpus (原始: tormpus is jedrpus)
  81. [planning] tormpus → jedrpus (原始: tormpus is jedrpus)
  82. [actual] gawvpus → tormpus (原始: gawvpus is tormpus)
  83. [actual] gawvpus → tormpus (原始: gawvpus is tormpus)
  84. [planning] gawvpus → tormpus (原始: gawvpus is tormpus)
  85. [actual] x → lehwpus (原始: x is lehwpus)
  86. [actual] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  87. [planning] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  88. [planning] x → lehwpus (原始: x is lehwpus)
  89. [planning] x → gawvpus (原始: x is gawvpus)
  90. [planning] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  91. [planning] x → gawvpus (原始: x is gawvpus)
  92. [actual] gawvpus → tormpus and cezrpus (原始: gawvpus is tormpus and cezrpus)
  93. [actual] gawvpus → tormpus (原始: gawvpus is tormpus)
  94. [actual] gawvpus → cezrpus (原始: gawvpus is cezrpus)
  95. [actual] jedrpus → babdpus and qumtpus and xucmpus (原始: jedrpus is babdpus and qumtpus and xucmpus)
  96. [actual] tormpus → jedrpus (原始: tormpus is jedrpus)
  97. [planning] gawvpus → tormpus (原始: gawvpus is tormpus)
  98. [actual] gawvpus → tormpus (原始: gawvpus is tormpus)
  99. [actual] gawvpus → cezrpus (原始: gawvpus is cezrpus)
  100. [planning] gawvpus → tormpus (原始: gawvpus is tormpus)
  101. [planning] gawvpus → cezrpus (原始: gawvpus is cezrpus)
  102. [actual] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  103. [planning] x → lehwpus (原始: x is lehwpus)
  104. [planning] x → lehwpus (原始: x is lehwpus)
  105. [actual] x → lehwpus (原始: x is lehwpus)
  106. [actual] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  107. [actual] x → lehwpus (原始: x is lehwpus)
  108. [actual] x → lehwpus (原始: x is lehwpus)
  109. [actual] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  110. [actual] x → lehwpus (原始: x is lehwpus)
  111. [actual] lehwpus → gawvpus (原始: lehwpus is gawvpus)
  112. [actual] x → gawvpus (原始: x is gawvpus)
  113. [actual] gawvpus → tormpus and cezrpus (原始: gawvpus is tormpus and cezrpus)
  114. [actual] gawvpus → tormpus (原始: gawvpus is tormpus)
  115. [planning] gawvpus → tormpus (原始: gawvpus is tormpus)
  116. [planning] gawvpus → tormpus (原始: gawvpus is tormpus)
  117. [planning] gawvpus → tormpus (原始: gawvpus is tormpus)
  118. [planning] gawvpus → tormpus (原始: gawvpus is tormpus)
  119. [planning] gawvpus → tormpus (原始: gawvpus is tormpus)
  120. [actual] gawvpus → tormpus and cezrpus (原始: gawvpus is tormpus and cezrpus)
  121. [planning] gawvpus → tormpus (原始: gawvpus is tormpus)
  122. [actual] gawvpus → tormpus (原始: gawvpus is tormpus)
  123. [actual] gawvpus → tormpus and cezrpus (原始: gawvpus is tormpus and cezrpus)
  124. [actual] tormpus → jedrpus (原始: tormpus is jedrpus)
  125. [actual] jedrpus → babdpus and qumtpus and xucmpus (原始: jedrpus is babdpus and qumtpus and xucmpus)
  126. [actual] gawvpus → tormpus (原始: gawvpus is tormpus)
  127. [actual] x → tormpus (原始: x is tormpus)
  128. [actual] tormpus → jedrpus (原始: tormpus is jedrpus)
  129. [actual] x → jedrpus (原始: x is jedrpus)
  130. [actual] jedrpus → babdpus (原始: jedrpus is babdpus)
  131. [planning] x → babdpus (原始: x is babdpus)
  132. [actual] x → babdpus (原始: x is babdpus)
  133. [actual] gawvpus → tormpus and cezrpus (原始: gawvpus is tormpus and cezrpus)
  134. [planning] gawvpus → tormpus and cezrpus (原始: gawvpus is tormpus and cezrpus)
  135. [actual] tormpus → jedrpus (原始: tormpus is jedrpus)
  136. [actual] jedrpus → babdpus (原始: jedrpus is babdpus)
  137. [actual] x → babdpus (原始: x is babdpus)
  138. [planning] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 7
[后处理] 加载LoG图，包含 7 个节点
  LoG节点 0: x is babdpus (规则: CE, 深度: 1)
  LoG节点 1: x is babdpus and qumtpus (规则: MP, 深度: 2)
  LoG节点 2: x is tormpus (规则: MP, 深度: 3)
  LoG节点 3: tormpus is babdpus and qumtpus (规则: CE, 深度: 3)
  LoG节点 4: x is gawvpus (规则: MP, 深度: 4)
  LoG节点 5: gawvpus is tormpus (规则: CE, 深度: 4)
  LoG节点 6: tormpus is babdpus and qumtpus and xucmpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 138
   - 初始条件数: 5
   - LoG图节点数: 7

📋 初始条件列表:
    1. lehwpus is gawvpus
    2. x is lehwpus
    3. tormpus is jedrpus
    4. gawvpus is tormpus and cezrpus
    5. jedrpus is babdpus and qumtpus and xucmpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 5 个前提节点

🔍 开始处理actual节点...

   节点 1: lehwpus is gawvpus
      ↻ 重复节点，计数: 2

   节点 2: x is lehwpus
      ↻ 重复节点，计数: 2

   节点 3: tormpus is jedrpus
      ↻ 重复节点，计数: 2

   节点 4: gawvpus is tormpus and cezrpus
      ↻ 重复节点，计数: 2

   节点 5: jedrpus is babdpus and qumtpus and xucmpus
      ↻ 重复节点，计数: 2

   节点 6: x is lehwpus
      ↻ 重复节点，计数: 3

   节点 7: lehwpus is gawvpus
      ↻ 重复节点，计数: 3

   节点 8: x is lehwpus
      ↻ 重复节点，计数: 4

   节点 9: lehwpus is gawvpus
      ↻ 重复节点，计数: 4

   节点 10: x is gawvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is gawvpus
      ✅ 验证成功 + LoG匹配

   节点 11: gawvpus is tormpus and cezrpus
      ↻ 重复节点，计数: 3

   节点 12: jedrpus is babdpus and qumtpus and xucmpus
      ↻ 重复节点，计数: 3

   节点 13: jedrpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: jedrpus is babdpus and qumtpus and xucmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: jedrpus is babdpus and qumtpus and xucmpus

   节点 14: jedrpus is qumtpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: jedrpus is babdpus and qumtpus and xucmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: jedrpus is babdpus and qumtpus and xucmpus

   节点 15: jedrpus is xucmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: jedrpus is babdpus and qumtpus and xucmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: jedrpus is babdpus and qumtpus and xucmpus

   节点 16: x is lehwpus
      ↻ 重复节点，计数: 5

   节点 17: lehwpus is gawvpus
      ↻ 重复节点，计数: 5

   节点 18: gawvpus is tormpus and cezrpus
      ↻ 重复节点，计数: 4

   节点 19: tormpus is jedrpus
      ↻ 重复节点，计数: 3

   节点 20: jedrpus is babdpus and qumtpus and xucmpus
      ↻ 重复节点，计数: 4

   节点 21: x is lehwpus
      ↻ 重复节点，计数: 6

   节点 22: lehwpus is gawvpus
      ↻ 重复节点，计数: 6

   节点 23: x is gawvpus
      ↻ 重复节点，计数: 2

   节点 24: gawvpus is tormpus and cezrpus
      ↻ 重复节点，计数: 5

   节点 25: gawvpus is tormpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: gawvpus is tormpus
      ✅ 验证成功 + LoG匹配

   节点 26: tormpus is jedrpus
      ↻ 重复节点，计数: 4

   节点 27: jedrpus is babdpus
      ↻ 重复节点，计数: 2

   节点 28: x is gawvpus
      ↻ 重复节点，计数: 3

   节点 29: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: x is babdpus and qumtpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is tormpus (深度3)
[子树点亮]     └─ 点亮依赖节点: tormpus is babdpus and qumtpus (深度3)
[子树点亮]     └─ 点亮依赖节点: tormpus is babdpus and qumtpus and xucmpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
      ✅ 验证成功 + LoG匹配

   节点 30: lehwpus is gawvpus
      ↻ 重复节点，计数: 7

   节点 31: gawvpus is tormpus and cezrpus
      ↻ 重复节点，计数: 6

   节点 32: gawvpus is tormpus
      ↻ 重复节点，计数: 2

   节点 33: gawvpus is cezrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gawvpus is tormpus and cezrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gawvpus is tormpus and cezrpus

   节点 34: jedrpus is babdpus and qumtpus and xucmpus
      ↻ 重复节点，计数: 5

   节点 35: tormpus is jedrpus
      ↻ 重复节点，计数: 5

   节点 36: gawvpus is tormpus and cezrpus
      ↻ 重复节点，计数: 7

   节点 37: lehwpus is gawvpus
      ↻ 重复节点，计数: 8

   节点 38: x is lehwpus
      ↻ 重复节点，计数: 7

   节点 39: x is lehwpus
      ↻ 重复节点，计数: 8

   节点 40: lehwpus is gawvpus
      ↻ 重复节点，计数: 9

   节点 41: gawvpus is tormpus and cezrpus
      ↻ 重复节点，计数: 8

   节点 42: gawvpus is tormpus
      ↻ 重复节点，计数: 3

   节点 43: jedrpus is babdpus and qumtpus and xucmpus
      ↻ 重复节点，计数: 6

   节点 44: tormpus is jedrpus
      ↻ 重复节点，计数: 6

   节点 45: tormpus is jedrpus
      ↻ 重复节点，计数: 7

   节点 46: gawvpus is tormpus
      ↻ 重复节点，计数: 4

   节点 47: gawvpus is tormpus
      ↻ 重复节点，计数: 5

   节点 48: x is lehwpus
      ↻ 重复节点，计数: 9

   节点 49: lehwpus is gawvpus
      ↻ 重复节点，计数: 10

   节点 50: gawvpus is tormpus and cezrpus
      ↻ 重复节点，计数: 9

   节点 51: gawvpus is tormpus
      ↻ 重复节点，计数: 6

   节点 52: gawvpus is cezrpus
      ↻ 重复节点，计数: 2

   节点 53: jedrpus is babdpus and qumtpus and xucmpus
      ↻ 重复节点，计数: 7

   节点 54: tormpus is jedrpus
      ↻ 重复节点，计数: 8

   节点 55: gawvpus is tormpus
      ↻ 重复节点，计数: 7

   节点 56: gawvpus is cezrpus
      ↻ 重复节点，计数: 3

   节点 57: lehwpus is gawvpus
      ↻ 重复节点，计数: 11

   节点 58: x is lehwpus
      ↻ 重复节点，计数: 10

   节点 59: lehwpus is gawvpus
      ↻ 重复节点，计数: 12

   节点 60: x is lehwpus
      ↻ 重复节点，计数: 11

   节点 61: x is lehwpus
      ↻ 重复节点，计数: 12

   节点 62: lehwpus is gawvpus
      ↻ 重复节点，计数: 13

   节点 63: x is lehwpus
      ↻ 重复节点，计数: 13

   节点 64: lehwpus is gawvpus
      ↻ 重复节点，计数: 14

   节点 65: x is gawvpus
      ↻ 重复节点，计数: 4

   节点 66: gawvpus is tormpus and cezrpus
      ↻ 重复节点，计数: 10

   节点 67: gawvpus is tormpus
      ↻ 重复节点，计数: 8

   节点 68: gawvpus is tormpus and cezrpus
      ↻ 重复节点，计数: 11

   节点 69: gawvpus is tormpus
      ↻ 重复节点，计数: 9

   节点 70: gawvpus is tormpus and cezrpus
      ↻ 重复节点，计数: 12

   节点 71: tormpus is jedrpus
      ↻ 重复节点，计数: 9

   节点 72: jedrpus is babdpus and qumtpus and xucmpus
      ↻ 重复节点，计数: 8

   节点 73: gawvpus is tormpus
      ↻ 重复节点，计数: 10

   节点 74: x is tormpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 75: tormpus is jedrpus
      ↻ 重复节点，计数: 10

   节点 76: x is jedrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is lehwpus → lehwpus is jedrpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is lehwpus
  - 前提: lehwpus is gawvpus
  - 前提: gawvpus is tormpus
  - 前提: tormpus is jedrpus

   节点 77: jedrpus is babdpus
      ↻ 重复节点，计数: 3

   节点 78: x is babdpus
      ↻ 重复节点，计数: 2

   节点 79: gawvpus is tormpus and cezrpus
      ↻ 重复节点，计数: 13

   节点 80: tormpus is jedrpus
      ↻ 重复节点，计数: 11

   节点 81: jedrpus is babdpus
      ↻ 重复节点，计数: 4

   节点 82: x is babdpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 82
   - 新增节点: 9
   - 更新已存在节点: 73
   - 点亮的LoG节点: 7

🎯 推理质量统计:
   - 完美推理: 9 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 7节点, 5前提, 复杂度1-5

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 14
   - 前提节点: 5
   - 推理节点: 9
   - 幻觉节点: 0
   - 点亮LoG节点: 7

✅ 推理节点详情:
   🟢 x is gawvpus (出现4次, 质量:perfect)
   🟢 jedrpus is babdpus (出现4次, 质量:perfect)
   🟢 jedrpus is qumtpus (出现1次, 质量:perfect)
   🟢 jedrpus is xucmpus (出现1次, 质量:perfect)
   🟢 gawvpus is tormpus (出现10次, 质量:perfect)
   🟢 x is babdpus (出现3次, 质量:perfect)
   🟢 gawvpus is cezrpus (出现3次, 质量:perfect)
   🟢 x is tormpus (出现1次, 质量:perfect)
   🟢 x is jedrpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is tormpus
   - x is babdpus and qumtpus
   - gawvpus is tormpus
   - tormpus is babdpus and qumtpus
   - x is gawvpus
   - x is babdpus
   - tormpus is babdpus and qumtpus and xucmpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus (第4层)
   节点Coverage: 7/7 = 100.00%
   前提条件Coverage: 5/5 = 100.00%
   各推理层点亮比例:
     第1层: 3/3 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/9 = 0.00%
   可推导节点: 9/9
   Strict Error Rate: 0/9 = 0.00%
   严格有效节点: 9/9

   详细分析:
     完美推理: 9 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 5/50
================================================================================
记录索引: 4
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_4.json
✅ 使用缓存结果:
   - 句子数: 41
   - 提取的语句数: 39
   - 初始条件数: 7

=== Statement提取完成 ===
总句子数: 41
成功提取: 41
失败提取: 0
总statements数: 39

=== 开始清洗Statement格式 ===
原始statements数: 39
清洗后statements数: 39
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 39
标准化后节点数: 37
过滤掉的无效实体数: 2
标准化后的节点:
  1. [actual] x → pawkpus (原始: x is pawkpus)
  2. [actual] tadnpus → didkpus (原始: tadnpus is didkpus)
  3. [actual] pophpus → yotnpus (原始: pophpus is yotnpus)
  4. [actual] didkpus → babqpus and hoscpus and veykpus (原始: didkpus is babqpus and hoscpus and veykpus)
  5. [actual] pawkpus → pophpus (原始: pawkpus is pophpus)
  6. [actual] pophpus → babdpus (原始: pophpus is babdpus)
  7. [actual] x → tadnpus (原始: x is tadnpus)
  8. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  9. [actual] x → tadnpus (原始: x is tadnpus)
  10. [actual] tadnpus → didkpus (原始: tadnpus is didkpus)
  11. [actual] x → tadnpus (原始: x is tadnpus)
  12. [actual] tadnpus → didkpus (原始: tadnpus is didkpus)
  13. [actual] x → didkpus (原始: x is didkpus)
  14. [actual] didkpus → babqpus and hoscpus and veykpus (原始: didkpus is babqpus and hoscpus and veykpus)
  15. [planning] x → didkpus (原始: x is didkpus)
  16. [planning] x → babqpus (原始: x is babqpus)
  17. [actual] x → babqpus (原始: x is babqpus)
  18. [planning] x → babdpus (原始: x is babdpus)
  19. [actual] x → pawkpus (原始: x is pawkpus)
  20. [actual] pawkpus → pophpus (原始: pawkpus is pophpus)
  21. [actual] x → pawkpus (原始: x is pawkpus)
  22. [actual] pawkpus → pophpus (原始: pawkpus is pophpus)
  23. [actual] x → pophpus (原始: x is pophpus)
  24. [actual] pophpus → babdpus (原始: pophpus is babdpus)
  25. [actual] x → pophpus (原始: x is pophpus)
  26. [actual] pophpus → babdpus (原始: pophpus is babdpus)
  27. [actual] x → babdpus (原始: x is babdpus)
  28. [planning] x → pophpus (原始: x is pophpus)
  29. [planning] pophpus → babdpus (原始: pophpus is babdpus)
  30. [planning] x → babdpus (原始: x is babdpus)
  31. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  32. [actual] pophpus → yotnpus (原始: pophpus is yotnpus)
  33. [planning] x → babdpus (原始: x is babdpus)
  34. [planning] x → babqpus (原始: x is babqpus)
  35. [actual] didkpus → babqpus (原始: didkpus is babqpus)
  36. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  37. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 9
[后处理] 加载LoG图，包含 9 个节点
  LoG节点 0: x is babdpus and babqpus (规则: CI, 深度: 1)
  LoG节点 1: x is babdpus (规则: CE, 深度: 2)
  LoG节点 2: x is babqpus (规则: CE, 深度: 2)
  LoG节点 3: x is babdpus and yotnpus (规则: MP, 深度: 3)
  LoG节点 4: x is babqpus and hoscpus (规则: MP, 深度: 3)
  LoG节点 5: x is pophpus (规则: MP, 深度: 4)
  LoG节点 6: pophpus is babdpus and yotnpus (规则: CI, 深度: 4)
  LoG节点 7: x is didkpus (规则: MP, 深度: 4)
  LoG节点 8: didkpus is babqpus and hoscpus (规则: CE, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 37
   - 初始条件数: 7
   - LoG图节点数: 9

📋 初始条件列表:
    1. x is pawkpus
    2. tadnpus is didkpus
    3. pophpus is yotnpus
    4. didkpus is babqpus and hoscpus and veykpus
    5. pawkpus is pophpus
    6. pophpus is babdpus
    7. x is tadnpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 7 个前提节点

🔍 开始处理actual节点...

   节点 1: x is pawkpus
      ↻ 重复节点，计数: 2

   节点 2: tadnpus is didkpus
      ↻ 重复节点，计数: 2

   节点 3: pophpus is yotnpus
      ↻ 重复节点，计数: 2

   节点 4: didkpus is babqpus and hoscpus and veykpus
      ↻ 重复节点，计数: 2

   节点 5: pawkpus is pophpus
      ↻ 重复节点，计数: 2

   节点 6: pophpus is babdpus
      ↻ 重复节点，计数: 2

   节点 7: x is tadnpus
      ↻ 重复节点，计数: 2

   节点 8: x is tadnpus
      ↻ 重复节点，计数: 3

   节点 9: tadnpus is didkpus
      ↻ 重复节点，计数: 3

   节点 10: x is tadnpus
      ↻ 重复节点，计数: 4

   节点 11: tadnpus is didkpus
      ↻ 重复节点，计数: 4

   节点 12: x is didkpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is didkpus
      ✅ 验证成功 + LoG匹配

   节点 13: didkpus is babqpus and hoscpus and veykpus
      ↻ 重复节点，计数: 3

   节点 14: x is babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babqpus
[子树点亮]     └─ 点亮依赖节点: x is babqpus and hoscpus (深度3)
[子树点亮]     └─ 点亮依赖节点: didkpus is babqpus and hoscpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 15: x is pawkpus
      ↻ 重复节点，计数: 3

   节点 16: pawkpus is pophpus
      ↻ 重复节点，计数: 3

   节点 17: x is pawkpus
      ↻ 重复节点，计数: 4

   节点 18: pawkpus is pophpus
      ↻ 重复节点，计数: 4

   节点 19: x is pophpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is pophpus
      ✅ 验证成功 + LoG匹配

   节点 20: pophpus is babdpus
      ↻ 重复节点，计数: 3

   节点 21: x is pophpus
      ↻ 重复节点，计数: 2

   节点 22: pophpus is babdpus
      ↻ 重复节点，计数: 4

   节点 23: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: x is babdpus and yotnpus (深度3)
[子树点亮]     └─ 点亮依赖节点: pophpus is babdpus and yotnpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 24: x is babdpus and babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus and babqpus
      ✅ 验证成功 + LoG匹配

   节点 25: pophpus is yotnpus
      ↻ 重复节点，计数: 3

   节点 26: didkpus is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: didkpus is babqpus and hoscpus and veykpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: didkpus is babqpus and hoscpus and veykpus

   节点 27: x is babdpus and babqpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 27
   - 新增节点: 6
   - 更新已存在节点: 21
   - 点亮的LoG节点: 9

🎯 推理质量统计:
   - 完美推理: 6 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 9节点, 7前提, 复杂度1-7

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 13
   - 前提节点: 7
   - 推理节点: 6
   - 幻觉节点: 0
   - 点亮LoG节点: 9

✅ 推理节点详情:
   🟢 x is didkpus (出现1次, 质量:perfect)
   🟢 x is babqpus (出现1次, 质量:perfect)
   🟢 x is pophpus (出现2次, 质量:perfect)
   🟢 x is babdpus (出现1次, 质量:perfect)
   🟢 x is babdpus and babqpus (出现2次, 质量:perfect)
   🟢 didkpus is babqpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is didkpus
   - x is pophpus
   - x is babqpus and hoscpus
   - didkpus is babqpus and hoscpus
   - x is babdpus
   - x is babdpus and babqpus
   - x is babdpus and yotnpus
   - x is babqpus
   - pophpus is babdpus and yotnpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus and babqpus (第4层)
   节点Coverage: 9/9 = 100.00%
   前提条件Coverage: 7/7 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/6 = 0.00%
   可推导节点: 6/6
   Strict Error Rate: 0/6 = 0.00%
   严格有效节点: 6/6

   详细分析:
     完美推理: 6 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 6/50
================================================================================
记录索引: 5
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_5.json
✅ 使用缓存结果:
   - 句子数: 150
   - 提取的语句数: 234
   - 初始条件数: 5

=== Statement提取完成 ===
总句子数: 150
成功提取: 150
失败提取: 0
总statements数: 234

=== 开始清洗Statement格式 ===
原始statements数: 234
清洗后statements数: 163
过滤掉的statements数: 71
清洗后的statements:
  1. [actual] zihwpus is caxxpus and fibnpus
  2. [actual] sujdpus is babdpus and fudwpus and yugfpus
  3. [actual] lutmpus is zihwpus
  4. [actual] caxxpus is sujdpus
  5. [actual] x is lutmpus
  6. [planning] x is babdpus
  7. [planning] x is babdpus
  8. [actual] zihwpus is caxxpus
  9. [actual] zihwpus is fibnpus
  10. [actual] zihwpus is caxxpus and fibnpus
  11. [actual] sujdpus is babdpus
  12. [actual] sujdpus is fudwpus
  13. [actual] sujdpus is yugfpus
  14. [actual] sujdpus is babdpus and fudwpus and yugfpus
  15. [actual] lutmpus is zihwpus
  16. [actual] caxxpus is sujdpus
  17. [actual] x is lutmpus
  18. [actual] x is lutmpus
  19. [planning] x is babdpus
  20. [actual] x is lutmpus
  21. [actual] lutmpus is zihwpus
  22. [actual] x is zihwpus
  23. [actual] zihwpus is caxxpus and fibnpus
  24. [actual] sujdpus is babdpus and fudwpus and yugfpus
  25. [actual] sujdpus is a member of multiple categories
  26. [actual] caxxpus is sujdpus
  27. [planning] caxxpus is a category
  28. [planning] caxxpus is sujdpus
  29. [planning] sujdpus is a category
  30. [planning] caxxpus is sujdpus
  31. [planning] caxxpus is a subcategory of sujdpus
  32. [planning] caxxpus is an instance of sujdpus
  33. [actual] zihwpus is caxxpus
  34. [planning] zihwpus is caxxpus
  35. [planning] zihwpus is a category itself
  36. [actual] zihwpus is caxxpus
  37. [actual] zihwpus is caxxpus
  38. [planning] zihwpus is a thing
  39. [planning] zihwpus is a category
  40. [actual] sujdpus is babdpus
  41. [actual] lutmpus is zihwpus
  42. [planning] lutmpus is zihwpus
  43. [actual] caxxpus is sujdpus
  44. [planning] caxxpus is sujdpus
  45. [planning] x is lutmpus
  46. [planning] x is babdpus
  47. [actual] x is an individual thing
  48. [actual] lutmpus is a category
  49. [actual] babdpus is a category
  50. [actual] zihwpus is caxxpus
  51. [planning] zihwpus is a category
  52. [planning] zihwpus is a subclass
  53. [actual] zihwpus is caxxpus
  54. [actual] sujdpus is babdpus and fudwpus and yugfpus
  55. [planning] sujdpus is an individual that is those categories
  56. [actual] zihwpus is caxxpus and fibnpus
  57. [actual] zihwpus is an individual
  58. [actual] lutmpus is zihwpus
  59. [actual] lutmpus is zihwpus
  60. [actual] caxxpus is sujdpus
  61. [actual] caxxpus is an individual that is sujdpus
  62. [planning] caxxpus is a category that zihwpus belongs to
  63. [planning] zihwpus is caxxpus
  64. [planning] caxxpus is sujdpus
  65. [planning] zihwpus is sujdpus
  66. [actual] zihwpus is an element of caxxpus
  67. [actual] caxxpus is an element of sujdpus
  68. [planning] zihwpus is an element of sujdpus
  69. [actual] caxxpus is a category
  70. [actual] sujdpus is a category
  71. [actual] caxxpus is an element of sujdpus
  72. [actual] caxxpus is a member of sujdpus
  73. [planning] caxxpus is a type of sujdpus
  74. [actual] zihwpus is caxxpus
  75. [planning] zihwpus is sujdpus
  76. [actual] zihwpus is caxxpus and fibnpus
  77. [actual] sujdpus is babdpus and fudwpus and yugfpus
  78. [actual] lutmpus is zihwpus
  79. [actual] caxxpus is sujdpus
  80. [actual] x is lutmpus
  81. [planning] x is babdpus
  82. [actual] x is lutmpus
  83. [actual] lutmpus is zihwpus
  84. [actual] x is zihwpus
  85. [actual] zihwpus is caxxpus
  86. [actual] x is caxxpus
  87. [actual] caxxpus is sujdpus
  88. [actual] x is sujdpus
  89. [actual] sujdpus is babdpus
  90. [actual] x is babdpus
  91. [actual] x is babdpus
  92. [actual] sujdpus is babdpus
  93. [actual] x is sujdpus
  94. [actual] zihwpus is caxxpus
  95. [actual] zihwpus is a class
  96. [actual] lutmpus is an instance of zihwpus
  97. [planning] zihwpus is a class and an instance
  98. [actual] zihwpus is an instance of caxxpus
  99. [actual] caxxpus is an instance of sujdpus
  100. [planning] zihwpus is an instance of sujdpus
  101. [actual] x is an instance of lutmpus
  102. [actual] lutmpus is an instance of zihwpus
  103. [planning] x is an instance of zihwpus
  104. [actual] lutmpus is an instance of zihwpus
  105. [actual] lutmpus is an object in category zihwpus
  106. [actual] x is an instance of lutmpus
  107. [actual] x is an object of lutmpus
  108. [actual] lutmpus is a category
  109. [actual] x is lutmpus
  110. [planning] lutmpus is an instance of zihwpus
  111. [planning] x is an instance of zihwpus
  112. [planning] zihwpus is the category animal
  113. [planning] caxxpus is the category mammal
  114. [planning] zihwpus is an instance of caxxpus
  115. [planning] x is babgpus
  116. [actual] zihwpus is caxxpus and fibnpus
  117. [actual] caxxpus is sujdpus
  118. [planning] x is instance of babdpus
  119. [actual] x is instance of lutmpus
  120. [actual] lutmpus is instance of zihwpus
  121. [actual] zihwpus is instance of caxxpus
  122. [actual] caxxpus is instance of sujdpus
  123. [planning] sujdpus is instance of babdpus
  124. [actual] sujdpus is babdpus
  125. [planning] sujdpus is instance of babdpus
  126. [planning] x is instance of babdpus
  127. [actual] x is instance of lutmpus
  128. [planning] x is instance of zihwpus
  129. [planning] x is member of zihwpus unless zihwpus is a category of categories
  130. [actual] sujdpus is babdpus
  131. [actual] caxxpus is sujdpus
  132. [actual] zihwpus is caxxpus
  133. [actual] lutmpus is zihwpus
  134. [actual] x is lutmpus
  135. [actual] x is lutmpus
  136. [actual] lutmpus is zihwpus
  137. [actual] zihwpus is caxxpus
  138. [actual] caxxpus is sujdpus
  139. [actual] sujdpus is babdpus
  140. [actual] x is lutmpus
  141. [actual] lutmpus is zihwpus
  142. [actual] zihwpus is a set that contains lutmpus
  143. [actual] lutmpus is an element of zihwpus
  144. [planning] x is lutmpus
  145. [planning] lutmpus is a subset of zihwpus
  146. [actual] zihwpus is a set of sets
  147. [actual] lutmpus is one set
  148. [actual] x is babdpus
  149. [actual] zihwpus is caxxpus and fibnpus
  150. [actual] sujdpus is babdpus and fudwpus and yugfpus
  151. [actual] lutmpus is zihwpus
  152. [actual] caxxpus is sujdpus
  153. [actual] x is lutmpus
  154. [actual] x is lutmpus
  155. [actual] lutmpus is zihwpus
  156. [actual] x is zihwpus
  157. [actual] zihwpus is caxxpus
  158. [actual] x is caxxpus
  159. [actual] caxxpus is sujdpus
  160. [actual] x is sujdpus
  161. [actual] sujdpus is babdpus
  162. [actual] x is babdpus
  163. [actual] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 163
标准化后节点数: 103
过滤掉的无效实体数: 60
标准化后的节点:
  1. [actual] zihwpus → caxxpus and fibnpus (原始: zihwpus is caxxpus and fibnpus)
  2. [actual] sujdpus → babdpus and fudwpus and yugfpus (原始: sujdpus is babdpus and fudwpus and yugfpus)
  3. [actual] lutmpus → zihwpus (原始: lutmpus is zihwpus)
  4. [actual] caxxpus → sujdpus (原始: caxxpus is sujdpus)
  5. [actual] x → lutmpus (原始: x is lutmpus)
  6. [planning] x → babdpus (原始: x is babdpus)
  7. [planning] x → babdpus (原始: x is babdpus)
  8. [actual] zihwpus → caxxpus (原始: zihwpus is caxxpus)
  9. [actual] zihwpus → fibnpus (原始: zihwpus is fibnpus)
  10. [actual] zihwpus → caxxpus and fibnpus (原始: zihwpus is caxxpus and fibnpus)
  11. [actual] sujdpus → babdpus (原始: sujdpus is babdpus)
  12. [actual] sujdpus → fudwpus (原始: sujdpus is fudwpus)
  13. [actual] sujdpus → yugfpus (原始: sujdpus is yugfpus)
  14. [actual] sujdpus → babdpus and fudwpus and yugfpus (原始: sujdpus is babdpus and fudwpus and yugfpus)
  15. [actual] lutmpus → zihwpus (原始: lutmpus is zihwpus)
  16. [actual] caxxpus → sujdpus (原始: caxxpus is sujdpus)
  17. [actual] x → lutmpus (原始: x is lutmpus)
  18. [actual] x → lutmpus (原始: x is lutmpus)
  19. [planning] x → babdpus (原始: x is babdpus)
  20. [actual] x → lutmpus (原始: x is lutmpus)
  21. [actual] lutmpus → zihwpus (原始: lutmpus is zihwpus)
  22. [actual] x → zihwpus (原始: x is zihwpus)
  23. [actual] zihwpus → caxxpus and fibnpus (原始: zihwpus is caxxpus and fibnpus)
  24. [actual] sujdpus → babdpus and fudwpus and yugfpus (原始: sujdpus is babdpus and fudwpus and yugfpus)
  25. [actual] caxxpus → sujdpus (原始: caxxpus is sujdpus)
  26. [planning] caxxpus → sujdpus (原始: caxxpus is sujdpus)
  27. [planning] caxxpus → sujdpus (原始: caxxpus is sujdpus)
  28. [actual] zihwpus → caxxpus (原始: zihwpus is caxxpus)
  29. [planning] zihwpus → caxxpus (原始: zihwpus is caxxpus)
  30. [actual] zihwpus → caxxpus (原始: zihwpus is caxxpus)
  31. [actual] zihwpus → caxxpus (原始: zihwpus is caxxpus)
  32. [actual] sujdpus → babdpus (原始: sujdpus is babdpus)
  33. [actual] lutmpus → zihwpus (原始: lutmpus is zihwpus)
  34. [planning] lutmpus → zihwpus (原始: lutmpus is zihwpus)
  35. [actual] caxxpus → sujdpus (原始: caxxpus is sujdpus)
  36. [planning] caxxpus → sujdpus (原始: caxxpus is sujdpus)
  37. [planning] x → lutmpus (原始: x is lutmpus)
  38. [planning] x → babdpus (原始: x is babdpus)
  39. [actual] zihwpus → caxxpus (原始: zihwpus is caxxpus)
  40. [actual] zihwpus → caxxpus (原始: zihwpus is caxxpus)
  41. [actual] sujdpus → babdpus and fudwpus and yugfpus (原始: sujdpus is babdpus and fudwpus and yugfpus)
  42. [actual] zihwpus → caxxpus and fibnpus (原始: zihwpus is caxxpus and fibnpus)
  43. [actual] lutmpus → zihwpus (原始: lutmpus is zihwpus)
  44. [actual] lutmpus → zihwpus (原始: lutmpus is zihwpus)
  45. [actual] caxxpus → sujdpus (原始: caxxpus is sujdpus)
  46. [planning] zihwpus → caxxpus (原始: zihwpus is caxxpus)
  47. [planning] caxxpus → sujdpus (原始: caxxpus is sujdpus)
  48. [planning] zihwpus → sujdpus (原始: zihwpus is sujdpus)
  49. [actual] zihwpus → caxxpus (原始: zihwpus is caxxpus)
  50. [planning] zihwpus → sujdpus (原始: zihwpus is sujdpus)
  51. [actual] zihwpus → caxxpus and fibnpus (原始: zihwpus is caxxpus and fibnpus)
  52. [actual] sujdpus → babdpus and fudwpus and yugfpus (原始: sujdpus is babdpus and fudwpus and yugfpus)
  53. [actual] lutmpus → zihwpus (原始: lutmpus is zihwpus)
  54. [actual] caxxpus → sujdpus (原始: caxxpus is sujdpus)
  55. [actual] x → lutmpus (原始: x is lutmpus)
  56. [planning] x → babdpus (原始: x is babdpus)
  57. [actual] x → lutmpus (原始: x is lutmpus)
  58. [actual] lutmpus → zihwpus (原始: lutmpus is zihwpus)
  59. [actual] x → zihwpus (原始: x is zihwpus)
  60. [actual] zihwpus → caxxpus (原始: zihwpus is caxxpus)
  61. [actual] x → caxxpus (原始: x is caxxpus)
  62. [actual] caxxpus → sujdpus (原始: caxxpus is sujdpus)
  63. [actual] x → sujdpus (原始: x is sujdpus)
  64. [actual] sujdpus → babdpus (原始: sujdpus is babdpus)
  65. [actual] x → babdpus (原始: x is babdpus)
  66. [actual] x → babdpus (原始: x is babdpus)
  67. [actual] sujdpus → babdpus (原始: sujdpus is babdpus)
  68. [actual] x → sujdpus (原始: x is sujdpus)
  69. [actual] zihwpus → caxxpus (原始: zihwpus is caxxpus)
  70. [actual] x → lutmpus (原始: x is lutmpus)
  71. [planning] x → babgpus (原始: x is babgpus)
  72. [actual] zihwpus → caxxpus and fibnpus (原始: zihwpus is caxxpus and fibnpus)
  73. [actual] caxxpus → sujdpus (原始: caxxpus is sujdpus)
  74. [actual] sujdpus → babdpus (原始: sujdpus is babdpus)
  75. [actual] sujdpus → babdpus (原始: sujdpus is babdpus)
  76. [actual] caxxpus → sujdpus (原始: caxxpus is sujdpus)
  77. [actual] zihwpus → caxxpus (原始: zihwpus is caxxpus)
  78. [actual] lutmpus → zihwpus (原始: lutmpus is zihwpus)
  79. [actual] x → lutmpus (原始: x is lutmpus)
  80. [actual] x → lutmpus (原始: x is lutmpus)
  81. [actual] lutmpus → zihwpus (原始: lutmpus is zihwpus)
  82. [actual] zihwpus → caxxpus (原始: zihwpus is caxxpus)
  83. [actual] caxxpus → sujdpus (原始: caxxpus is sujdpus)
  84. [actual] sujdpus → babdpus (原始: sujdpus is babdpus)
  85. [actual] x → lutmpus (原始: x is lutmpus)
  86. [actual] lutmpus → zihwpus (原始: lutmpus is zihwpus)
  87. [planning] x → lutmpus (原始: x is lutmpus)
  88. [actual] x → babdpus (原始: x is babdpus)
  89. [actual] zihwpus → caxxpus and fibnpus (原始: zihwpus is caxxpus and fibnpus)
  90. [actual] sujdpus → babdpus and fudwpus and yugfpus (原始: sujdpus is babdpus and fudwpus and yugfpus)
  91. [actual] lutmpus → zihwpus (原始: lutmpus is zihwpus)
  92. [actual] caxxpus → sujdpus (原始: caxxpus is sujdpus)
  93. [actual] x → lutmpus (原始: x is lutmpus)
  94. [actual] x → lutmpus (原始: x is lutmpus)
  95. [actual] lutmpus → zihwpus (原始: lutmpus is zihwpus)
  96. [actual] x → zihwpus (原始: x is zihwpus)
  97. [actual] zihwpus → caxxpus (原始: zihwpus is caxxpus)
  98. [actual] x → caxxpus (原始: x is caxxpus)
  99. [actual] caxxpus → sujdpus (原始: caxxpus is sujdpus)
  100. [actual] x → sujdpus (原始: x is sujdpus)
  101. [actual] sujdpus → babdpus (原始: sujdpus is babdpus)
  102. [actual] x → babdpus (原始: x is babdpus)
  103. [actual] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 7
[后处理] 加载LoG图，包含 7 个节点
  LoG节点 0: x is babdpus (规则: CE, 深度: 1)
  LoG节点 1: x is babdpus and fudwpus (规则: MP, 深度: 2)
  LoG节点 2: x is caxxpus (规则: MP, 深度: 3)
  LoG节点 3: caxxpus is babdpus and fudwpus (规则: CE, 深度: 3)
  LoG节点 4: x is zihwpus (规则: MP, 深度: 4)
  LoG节点 5: zihwpus is caxxpus (规则: CE, 深度: 4)
  LoG节点 6: caxxpus is babdpus and fudwpus and yugfpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 103
   - 初始条件数: 5
   - LoG图节点数: 7

📋 初始条件列表:
    1. zihwpus is caxxpus and fibnpus
    2. sujdpus is babdpus and fudwpus and yugfpus
    3. lutmpus is zihwpus
    4. caxxpus is sujdpus
    5. x is lutmpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 5 个前提节点

🔍 开始处理actual节点...

   节点 1: zihwpus is caxxpus and fibnpus
      ↻ 重复节点，计数: 2

   节点 2: sujdpus is babdpus and fudwpus and yugfpus
      ↻ 重复节点，计数: 2

   节点 3: lutmpus is zihwpus
      ↻ 重复节点，计数: 2

   节点 4: caxxpus is sujdpus
      ↻ 重复节点，计数: 2

   节点 5: x is lutmpus
      ↻ 重复节点，计数: 2

   节点 6: zihwpus is caxxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: zihwpus is caxxpus
      ✅ 验证成功 + LoG匹配

   节点 7: zihwpus is fibnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zihwpus is caxxpus and fibnpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zihwpus is caxxpus and fibnpus

   节点 8: zihwpus is caxxpus and fibnpus
      ↻ 重复节点，计数: 3

   节点 9: sujdpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: sujdpus is babdpus and fudwpus and yugfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: sujdpus is babdpus and fudwpus and yugfpus

   节点 10: sujdpus is fudwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: sujdpus is babdpus and fudwpus and yugfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: sujdpus is babdpus and fudwpus and yugfpus

   节点 11: sujdpus is yugfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: sujdpus is babdpus and fudwpus and yugfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: sujdpus is babdpus and fudwpus and yugfpus

   节点 12: sujdpus is babdpus and fudwpus and yugfpus
      ↻ 重复节点，计数: 3

   节点 13: lutmpus is zihwpus
      ↻ 重复节点，计数: 3

   节点 14: caxxpus is sujdpus
      ↻ 重复节点，计数: 3

   节点 15: x is lutmpus
      ↻ 重复节点，计数: 3

   节点 16: x is lutmpus
      ↻ 重复节点，计数: 4

   节点 17: x is lutmpus
      ↻ 重复节点，计数: 5

   节点 18: lutmpus is zihwpus
      ↻ 重复节点，计数: 4

   节点 19: x is zihwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is zihwpus
      ✅ 验证成功 + LoG匹配

   节点 20: zihwpus is caxxpus and fibnpus
      ↻ 重复节点，计数: 4

   节点 21: sujdpus is babdpus and fudwpus and yugfpus
      ↻ 重复节点，计数: 4

   节点 22: caxxpus is sujdpus
      ↻ 重复节点，计数: 4

   节点 23: zihwpus is caxxpus
      ↻ 重复节点，计数: 2

   节点 24: zihwpus is caxxpus
      ↻ 重复节点，计数: 3

   节点 25: zihwpus is caxxpus
      ↻ 重复节点，计数: 4

   节点 26: sujdpus is babdpus
      ↻ 重复节点，计数: 2

   节点 27: lutmpus is zihwpus
      ↻ 重复节点，计数: 5

   节点 28: caxxpus is sujdpus
      ↻ 重复节点，计数: 5

   节点 29: zihwpus is caxxpus
      ↻ 重复节点，计数: 5

   节点 30: zihwpus is caxxpus
      ↻ 重复节点，计数: 6

   节点 31: sujdpus is babdpus and fudwpus and yugfpus
      ↻ 重复节点，计数: 5

   节点 32: zihwpus is caxxpus and fibnpus
      ↻ 重复节点，计数: 5

   节点 33: lutmpus is zihwpus
      ↻ 重复节点，计数: 6

   节点 34: lutmpus is zihwpus
      ↻ 重复节点，计数: 7

   节点 35: caxxpus is sujdpus
      ↻ 重复节点，计数: 6

   节点 36: zihwpus is caxxpus
      ↻ 重复节点，计数: 7

   节点 37: zihwpus is caxxpus and fibnpus
      ↻ 重复节点，计数: 6

   节点 38: sujdpus is babdpus and fudwpus and yugfpus
      ↻ 重复节点，计数: 6

   节点 39: lutmpus is zihwpus
      ↻ 重复节点，计数: 8

   节点 40: caxxpus is sujdpus
      ↻ 重复节点，计数: 7

   节点 41: x is lutmpus
      ↻ 重复节点，计数: 6

   节点 42: x is lutmpus
      ↻ 重复节点，计数: 7

   节点 43: lutmpus is zihwpus
      ↻ 重复节点，计数: 9

   节点 44: x is zihwpus
      ↻ 重复节点，计数: 2

   节点 45: zihwpus is caxxpus
      ↻ 重复节点，计数: 8

   节点 46: x is caxxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is caxxpus
      ✅ 验证成功 + LoG匹配

   节点 47: caxxpus is sujdpus
      ↻ 重复节点，计数: 8

   节点 48: x is sujdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is lutmpus → lutmpus is sujdpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is lutmpus
  - 前提: lutmpus is zihwpus
  - 前提: zihwpus is caxxpus
  - 前提: caxxpus is sujdpus

   节点 49: sujdpus is babdpus
      ↻ 重复节点，计数: 3

   节点 50: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: x is babdpus and fudwpus (深度2)
[子树点亮]     └─ 点亮依赖节点: caxxpus is babdpus and fudwpus (深度3)
[子树点亮]     └─ 点亮依赖节点: caxxpus is babdpus and fudwpus and yugfpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 51: x is babdpus
      ↻ 重复节点，计数: 2

   节点 52: sujdpus is babdpus
      ↻ 重复节点，计数: 4

   节点 53: x is sujdpus
      ↻ 重复节点，计数: 2

   节点 54: zihwpus is caxxpus
      ↻ 重复节点，计数: 9

   节点 55: x is lutmpus
      ↻ 重复节点，计数: 8

   节点 56: zihwpus is caxxpus and fibnpus
      ↻ 重复节点，计数: 7

   节点 57: caxxpus is sujdpus
      ↻ 重复节点，计数: 9

   节点 58: sujdpus is babdpus
      ↻ 重复节点，计数: 5

   节点 59: sujdpus is babdpus
      ↻ 重复节点，计数: 6

   节点 60: caxxpus is sujdpus
      ↻ 重复节点，计数: 10

   节点 61: zihwpus is caxxpus
      ↻ 重复节点，计数: 10

   节点 62: lutmpus is zihwpus
      ↻ 重复节点，计数: 10

   节点 63: x is lutmpus
      ↻ 重复节点，计数: 9

   节点 64: x is lutmpus
      ↻ 重复节点，计数: 10

   节点 65: lutmpus is zihwpus
      ↻ 重复节点，计数: 11

   节点 66: zihwpus is caxxpus
      ↻ 重复节点，计数: 11

   节点 67: caxxpus is sujdpus
      ↻ 重复节点，计数: 11

   节点 68: sujdpus is babdpus
      ↻ 重复节点，计数: 7

   节点 69: x is lutmpus
      ↻ 重复节点，计数: 11

   节点 70: lutmpus is zihwpus
      ↻ 重复节点，计数: 12

   节点 71: x is babdpus
      ↻ 重复节点，计数: 3

   节点 72: zihwpus is caxxpus and fibnpus
      ↻ 重复节点，计数: 8

   节点 73: sujdpus is babdpus and fudwpus and yugfpus
      ↻ 重复节点，计数: 7

   节点 74: lutmpus is zihwpus
      ↻ 重复节点，计数: 13

   节点 75: caxxpus is sujdpus
      ↻ 重复节点，计数: 12

   节点 76: x is lutmpus
      ↻ 重复节点，计数: 12

   节点 77: x is lutmpus
      ↻ 重复节点，计数: 13

   节点 78: lutmpus is zihwpus
      ↻ 重复节点，计数: 14

   节点 79: x is zihwpus
      ↻ 重复节点，计数: 3

   节点 80: zihwpus is caxxpus
      ↻ 重复节点，计数: 12

   节点 81: x is caxxpus
      ↻ 重复节点，计数: 2

   节点 82: caxxpus is sujdpus
      ↻ 重复节点，计数: 13

   节点 83: x is sujdpus
      ↻ 重复节点，计数: 3

   节点 84: sujdpus is babdpus
      ↻ 重复节点，计数: 8

   节点 85: x is babdpus
      ↻ 重复节点，计数: 4

   节点 86: x is babdpus
      ↻ 重复节点，计数: 5

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 86
   - 新增节点: 9
   - 更新已存在节点: 77
   - 点亮的LoG节点: 7

🎯 推理质量统计:
   - 完美推理: 9 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 7节点, 5前提, 复杂度1-5

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 14
   - 前提节点: 5
   - 推理节点: 9
   - 幻觉节点: 0
   - 点亮LoG节点: 7

✅ 推理节点详情:
   🟢 zihwpus is caxxpus (出现12次, 质量:perfect)
   🟢 zihwpus is fibnpus (出现1次, 质量:perfect)
   🟢 sujdpus is babdpus (出现8次, 质量:perfect)
   🟢 sujdpus is fudwpus (出现1次, 质量:perfect)
   🟢 sujdpus is yugfpus (出现1次, 质量:perfect)
   🟢 x is zihwpus (出现3次, 质量:perfect)
   🟢 x is caxxpus (出现2次, 质量:perfect)
   🟢 x is sujdpus (出现3次, 质量:perfect)
   🟢 x is babdpus (出现5次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is babdpus and fudwpus
   - x is caxxpus
   - caxxpus is babdpus and fudwpus and yugfpus
   - x is zihwpus
   - x is babdpus
   - zihwpus is caxxpus
   - caxxpus is babdpus and fudwpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus (第4层)
   节点Coverage: 7/7 = 100.00%
   前提条件Coverage: 5/5 = 100.00%
   各推理层点亮比例:
     第1层: 3/3 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/9 = 0.00%
   可推导节点: 9/9
   Strict Error Rate: 0/9 = 0.00%
   严格有效节点: 9/9

   详细分析:
     完美推理: 9 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 7/50
================================================================================
记录索引: 6
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_6.json
✅ 使用缓存结果:
   - 句子数: 43
   - 提取的语句数: 53
   - 初始条件数: 9

=== Statement提取完成 ===
总句子数: 43
成功提取: 43
失败提取: 0
总statements数: 53

=== 开始清洗Statement格式 ===
原始statements数: 53
清洗后statements数: 43
过滤掉的statements数: 10
清洗后的statements:
  1. [actual] givxpus is hufzpus
  2. [actual] digrpus is vewkpus
  3. [actual] x is yezppus and webfpus
  4. [actual] kawppus is suskpus
  5. [actual] yezppus is kawppus
  6. [actual] hufzpus is digrpus and huclpus
  7. [actual] ropkpus is givxpus and vemcpus
  8. [actual] vewkpus is babdpus and babqpus and babxpus and vozmpus
  9. [actual] suskpus is ropkpus
  10. [planning] x is babdpus and babqpus and babxpus
  11. [planning] x is babdpus
  12. [planning] x is babqpus
  13. [planning] x is babxpus
  14. [actual] x is yezppus and webfpus
  15. [actual] x is yezppus
  16. [actual] yezppus is kawppus
  17. [actual] x is kawppus
  18. [actual] yezppus is kawppus
  19. [actual] x is yezppus
  20. [actual] x is kawppus
  21. [actual] kawppus is suskpus
  22. [actual] x is suskpus
  23. [actual] suskpus is ropkpus
  24. [actual] x is ropkpus
  25. [actual] ropkpus is givxpus and vemcpus
  26. [actual] x is givxpus
  27. [actual] ropkpus is givxpus
  28. [actual] x is ropkpus
  29. [actual] givxpus is hufzpus
  30. [actual] x is hufzpus
  31. [actual] hufzpus is digrpus and huclpus
  32. [actual] x is digrpus
  33. [actual] digrpus is vewkpus
  34. [actual] x is vewkpus
  35. [actual] vewkpus is babdpus and babqpus and babxpus and vozmpus
  36. [actual] x is vewkpus
  37. [actual] x is babdpus
  38. [actual] x is babqpus
  39. [actual] x is babxpus
  40. [actual] x is vozmpus
  41. [actual] x is babdpus and babqpus and babxpus
  42. [planning] x is babdpus and babqpus and babxpus
  43. [actual] x is vewkpus

=== 开始标准化和解析节点 ===
清洗后statements数: 43
标准化后节点数: 43
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] givxpus → hufzpus (原始: givxpus is hufzpus)
  2. [actual] digrpus → vewkpus (原始: digrpus is vewkpus)
  3. [actual] x → yezppus and webfpus (原始: x is yezppus and webfpus)
  4. [actual] kawppus → suskpus (原始: kawppus is suskpus)
  5. [actual] yezppus → kawppus (原始: yezppus is kawppus)
  6. [actual] hufzpus → digrpus and huclpus (原始: hufzpus is digrpus and huclpus)
  7. [actual] ropkpus → givxpus and vemcpus (原始: ropkpus is givxpus and vemcpus)
  8. [actual] vewkpus → babdpus and babqpus and babxpus and vozmpus (原始: vewkpus is babdpus and babqpus and babxpus and vozmpus)
  9. [actual] suskpus → ropkpus (原始: suskpus is ropkpus)
  10. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  11. [planning] x → babdpus (原始: x is babdpus)
  12. [planning] x → babqpus (原始: x is babqpus)
  13. [planning] x → babxpus (原始: x is babxpus)
  14. [actual] x → yezppus and webfpus (原始: x is yezppus and webfpus)
  15. [actual] x → yezppus (原始: x is yezppus)
  16. [actual] yezppus → kawppus (原始: yezppus is kawppus)
  17. [actual] x → kawppus (原始: x is kawppus)
  18. [actual] yezppus → kawppus (原始: yezppus is kawppus)
  19. [actual] x → yezppus (原始: x is yezppus)
  20. [actual] x → kawppus (原始: x is kawppus)
  21. [actual] kawppus → suskpus (原始: kawppus is suskpus)
  22. [actual] x → suskpus (原始: x is suskpus)
  23. [actual] suskpus → ropkpus (原始: suskpus is ropkpus)
  24. [actual] x → ropkpus (原始: x is ropkpus)
  25. [actual] ropkpus → givxpus and vemcpus (原始: ropkpus is givxpus and vemcpus)
  26. [actual] x → givxpus (原始: x is givxpus)
  27. [actual] ropkpus → givxpus (原始: ropkpus is givxpus)
  28. [actual] x → ropkpus (原始: x is ropkpus)
  29. [actual] givxpus → hufzpus (原始: givxpus is hufzpus)
  30. [actual] x → hufzpus (原始: x is hufzpus)
  31. [actual] hufzpus → digrpus and huclpus (原始: hufzpus is digrpus and huclpus)
  32. [actual] x → digrpus (原始: x is digrpus)
  33. [actual] digrpus → vewkpus (原始: digrpus is vewkpus)
  34. [actual] x → vewkpus (原始: x is vewkpus)
  35. [actual] vewkpus → babdpus and babqpus and babxpus and vozmpus (原始: vewkpus is babdpus and babqpus and babxpus and vozmpus)
  36. [actual] x → vewkpus (原始: x is vewkpus)
  37. [actual] x → babdpus (原始: x is babdpus)
  38. [actual] x → babqpus (原始: x is babqpus)
  39. [actual] x → babxpus (原始: x is babxpus)
  40. [actual] x → vozmpus (原始: x is vozmpus)
  41. [actual] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  42. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  43. [actual] x → vewkpus (原始: x is vewkpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 12
[后处理] 加载LoG图，包含 12 个节点
  LoG节点 0: x is babdpus and babqpus and babxpus (规则: MP, 深度: 1)
  LoG节点 1: x is givxpus (规则: MP, 深度: 2)
  LoG节点 2: givxpus is babdpus and babqpus and babxpus (规则: MP, 深度: 2)
  LoG节点 3: x is suskpus (规则: MP, 深度: 3)
  LoG节点 4: suskpus is givxpus (规则: CE, 深度: 3)
  LoG节点 5: givxpus is digrpus (规则: CE, 深度: 3)
  LoG节点 6: digrpus is babdpus and babqpus and babxpus (规则: CE, 深度: 3)
  LoG节点 7: x is yezppus (规则: CE, 深度: 4)
  LoG节点 8: yezppus is suskpus (规则: MP, 深度: 4)
  LoG节点 9: suskpus is givxpus and vemcpus (规则: MP, 深度: 4)
  LoG节点 10: givxpus is digrpus and huclpus (规则: MP, 深度: 4)
  LoG节点 11: digrpus is babdpus and babqpus and babxpus and vozmpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 43
   - 初始条件数: 9
   - LoG图节点数: 12

📋 初始条件列表:
    1. givxpus is hufzpus
    2. digrpus is vewkpus
    3. x is yezppus and webfpus
    4. kawppus is suskpus
    5. yezppus is kawppus
    6. hufzpus is digrpus and huclpus
    7. ropkpus is givxpus and vemcpus
    8. vewkpus is babdpus and babqpus and babxpus and vozmpus
    9. suskpus is ropkpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 9 个前提节点

🔍 开始处理actual节点...

   节点 1: givxpus is hufzpus
      ↻ 重复节点，计数: 2

   节点 2: digrpus is vewkpus
      ↻ 重复节点，计数: 2

   节点 3: x is yezppus and webfpus
      ↻ 重复节点，计数: 2

   节点 4: kawppus is suskpus
      ↻ 重复节点，计数: 2

   节点 5: yezppus is kawppus
      ↻ 重复节点，计数: 2

   节点 6: hufzpus is digrpus and huclpus
      ↻ 重复节点，计数: 2

   节点 7: ropkpus is givxpus and vemcpus
      ↻ 重复节点，计数: 2

   节点 8: vewkpus is babdpus and babqpus and babxpus and vozmpus
      ↻ 重复节点，计数: 2

   节点 9: suskpus is ropkpus
      ↻ 重复节点，计数: 2

   节点 10: x is yezppus and webfpus
      ↻ 重复节点，计数: 3

   节点 11: x is yezppus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is yezppus
      ✅ 验证成功 + LoG匹配

   节点 12: yezppus is kawppus
      ↻ 重复节点，计数: 3

   节点 13: x is kawppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is yezppus → yezppus is kawppus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is yezppus
  - 前提: yezppus is kawppus

   节点 14: yezppus is kawppus
      ↻ 重复节点，计数: 4

   节点 15: x is yezppus
      ↻ 重复节点，计数: 2

   节点 16: x is kawppus
      ↻ 重复节点，计数: 2

   节点 17: kawppus is suskpus
      ↻ 重复节点，计数: 3

   节点 18: x is suskpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is suskpus
[子树点亮]     └─ 点亮依赖节点: yezppus is suskpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 19: suskpus is ropkpus
      ↻ 重复节点，计数: 3

   节点 20: x is ropkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is yezppus → yezppus is ropkpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is yezppus
  - 前提: yezppus is kawppus
  - 前提: kawppus is suskpus
  - 前提: suskpus is ropkpus

   节点 21: ropkpus is givxpus and vemcpus
      ↻ 重复节点，计数: 3

   节点 22: x is givxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is givxpus
[子树点亮]     └─ 点亮依赖节点: suskpus is givxpus (深度3)
[子树点亮]     └─ 点亮依赖节点: suskpus is givxpus and vemcpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 23: ropkpus is givxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: ropkpus is givxpus and vemcpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: ropkpus is givxpus and vemcpus

   节点 24: x is ropkpus
      ↻ 重复节点，计数: 2

   节点 25: givxpus is hufzpus
      ↻ 重复节点，计数: 3

   节点 26: x is hufzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is yezppus → yezppus is hufzpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is yezppus
  - 前提: yezppus is kawppus
  - 前提: kawppus is suskpus
  - 前提: suskpus is ropkpus
  - 前提: ropkpus is givxpus
  - 前提: givxpus is hufzpus

   节点 27: hufzpus is digrpus and huclpus
      ↻ 重复节点，计数: 3

   节点 28: x is digrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is yezppus → yezppus is digrpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is yezppus
  - 前提: yezppus is kawppus
  - 前提: kawppus is suskpus
  - 前提: suskpus is ropkpus
  - 前提: ropkpus is givxpus
  - 前提: givxpus is hufzpus
  - 前提: hufzpus is digrpus and huclpus
  ✓ 点亮LoG节点: givxpus is digrpus
[子树点亮]     └─ 点亮依赖节点: givxpus is digrpus and huclpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 29: digrpus is vewkpus
      ↻ 重复节点，计数: 3

   节点 30: x is vewkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is yezppus → yezppus is vewkpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is yezppus
  - 前提: yezppus is kawppus
  - 前提: kawppus is suskpus
  - 前提: suskpus is ropkpus
  - 前提: ropkpus is givxpus
  - 前提: givxpus is hufzpus
  - 前提: hufzpus is digrpus and huclpus
  - 前提: digrpus is vewkpus

   节点 31: vewkpus is babdpus and babqpus and babxpus and vozmpus
      ↻ 重复节点，计数: 3

   节点 32: x is vewkpus
      ↻ 重复节点，计数: 2

   节点 33: x is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is yezppus → yezppus is babdpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is yezppus
  - 前提: yezppus is kawppus
  - 前提: kawppus is suskpus
  - 前提: suskpus is ropkpus
  - 前提: ropkpus is givxpus
  - 前提: givxpus is hufzpus
  - 前提: hufzpus is digrpus and huclpus
  - 前提: digrpus is vewkpus
  - 前提: vewkpus is babdpus and babqpus and babxpus and vozmpus
  ✓ 点亮LoG节点: x is babdpus and babqpus and babxpus
[子树点亮]     └─ 点亮依赖节点: givxpus is babdpus and babqpus and babxpus (深度2)
[子树点亮]     └─ 点亮依赖节点: digrpus is babdpus and babqpus and babxpus (深度3)
[子树点亮]     └─ 点亮依赖节点: digrpus is babdpus and babqpus and babxpus and vozmpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 34: x is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is yezppus → yezppus is babqpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is yezppus
  - 前提: yezppus is kawppus
  - 前提: kawppus is suskpus
  - 前提: suskpus is ropkpus
  - 前提: ropkpus is givxpus
  - 前提: givxpus is hufzpus
  - 前提: hufzpus is digrpus and huclpus
  - 前提: digrpus is vewkpus
  - 前提: vewkpus is babdpus and babqpus and babxpus and vozmpus

   节点 35: x is babxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is yezppus → yezppus is babxpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is yezppus
  - 前提: yezppus is kawppus
  - 前提: kawppus is suskpus
  - 前提: suskpus is ropkpus
  - 前提: ropkpus is givxpus
  - 前提: givxpus is hufzpus
  - 前提: hufzpus is digrpus and huclpus
  - 前提: digrpus is vewkpus
  - 前提: vewkpus is babdpus and babqpus and babxpus and vozmpus

   节点 36: x is vozmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is yezppus → yezppus is vozmpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is yezppus
  - 前提: yezppus is kawppus
  - 前提: kawppus is suskpus
  - 前提: suskpus is ropkpus
  - 前提: ropkpus is givxpus
  - 前提: givxpus is hufzpus
  - 前提: hufzpus is digrpus and huclpus
  - 前提: digrpus is vewkpus
  - 前提: vewkpus is babdpus and babqpus and babxpus and vozmpus

   节点 37: x is babdpus and babqpus and babxpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 38: x is vewkpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 38
   - 新增节点: 14
   - 更新已存在节点: 24
   - 点亮的LoG节点: 12

🎯 推理质量统计:
   - 完美推理: 14 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 12节点, 9前提, 复杂度1-9

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 23
   - 前提节点: 9
   - 推理节点: 14
   - 幻觉节点: 0
   - 点亮LoG节点: 12

✅ 推理节点详情:
   🟢 x is yezppus (出现2次, 质量:perfect)
   🟢 x is kawppus (出现2次, 质量:perfect)
   🟢 x is suskpus (出现1次, 质量:perfect)
   🟢 x is ropkpus (出现2次, 质量:perfect)
   🟢 x is givxpus (出现1次, 质量:perfect)
   🟢 ropkpus is givxpus (出现1次, 质量:perfect)
   🟢 x is hufzpus (出现1次, 质量:perfect)
   🟢 x is digrpus (出现1次, 质量:perfect)
   🟢 x is vewkpus (出现3次, 质量:perfect)
   🟢 x is babdpus (出现1次, 质量:perfect)
   🟢 x is babqpus (出现1次, 质量:perfect)
   🟢 x is babxpus (出现1次, 质量:perfect)
   🟢 x is vozmpus (出现1次, 质量:perfect)
   🟢 x is babdpus and babqpus and babxpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - givxpus is digrpus
   - suskpus is givxpus
   - x is suskpus
   - yezppus is suskpus
   - digrpus is babdpus and babqpus and babxpus and vozmpus
   - suskpus is givxpus and vemcpus
   - givxpus is babdpus and babqpus and babxpus
   - x is givxpus
   - digrpus is babdpus and babqpus and babxpus
   - x is yezppus
   - givxpus is digrpus and huclpus
   - x is babdpus and babqpus and babxpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus and babqpus and babxpus (第4层)
   节点Coverage: 12/12 = 100.00%
   前提条件Coverage: 9/9 = 100.00%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/14 = 0.00%
   可推导节点: 14/14
   Strict Error Rate: 0/14 = 0.00%
   严格有效节点: 14/14

   详细分析:
     完美推理: 14 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 8/50
================================================================================
记录索引: 7
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_7.json
✅ 使用缓存结果:
   - 句子数: 51
   - 提取的语句数: 54
   - 初始条件数: 6

=== Statement提取完成 ===
总句子数: 51
成功提取: 51
失败提取: 0
总statements数: 54

=== 开始清洗Statement格式 ===
原始statements数: 54
清洗后statements数: 50
过滤掉的statements数: 4
清洗后的statements:
  1. [actual] x is fengpus and pulxpus
  2. [actual] x is fengpus and pulxpus
  3. [actual] naydpus is facrpus and zefzpus
  4. [actual] naydpus is facrpus and zefzpus
  5. [actual] rugmpus is babxpus
  6. [actual] rugmpus is babxpus
  7. [actual] decypus is naydpus
  8. [actual] decypus is naydpus
  9. [actual] fengpus is decypus
  10. [actual] fengpus is decypus
  11. [actual] facrpus is rugmpus
  12. [actual] facrpus is rugmpus
  13. [planning] x is babdpus
  14. [planning] x is babqpus
  15. [planning] x is babxpus
  16. [actual] rugmpus is babxpus
  17. [actual] babxpus is rugmpus
  18. [planning] x is babxpus
  19. [planning] x is the others
  20. [actual] x is fengpus and pulxpus
  21. [actual] x is fengpus
  22. [actual] x is pulxpus
  23. [actual] fengpus is decypus
  24. [actual] fengpus is decypus
  25. [actual] x is fengpus
  26. [actual] x is decypus
  27. [actual] decypus is naydpus
  28. [actual] decypus is naydpus
  29. [actual] naydpus is facrpus and zefzpus
  30. [actual] naydpus is facrpus
  31. [actual] naydpus is zefzpus
  32. [actual] x is facrpus
  33. [actual] x is zefzpus
  34. [actual] facrpus is rugmpus
  35. [actual] facrpus is rugmpus
  36. [actual] x is rugmpus
  37. [actual] rugmpus is babxpus
  38. [actual] rugmpus is babxpus
  39. [actual] x is babxpus
  40. [planning] x is babdpus
  41. [planning] x is babqpus
  42. [planning] x is babxpus
  43. [actual] x is babxpus
  44. [planning] x is babxpus
  45. [planning] x is babdpus or babqpus or babxpus
  46. [planning] babdpus is mentioned
  47. [planning] babqpus is mentioned
  48. [planning] x is those categories
  49. [actual] x is babxpus
  50. [actual] x is babdpus or babqpus or babxpus

=== 开始标准化和解析节点 ===
清洗后statements数: 50
标准化后节点数: 46
过滤掉的无效实体数: 4
标准化后的节点:
  1. [actual] x → fengpus and pulxpus (原始: x is fengpus and pulxpus)
  2. [actual] x → fengpus and pulxpus (原始: x is fengpus and pulxpus)
  3. [actual] naydpus → facrpus and zefzpus (原始: naydpus is facrpus and zefzpus)
  4. [actual] naydpus → facrpus and zefzpus (原始: naydpus is facrpus and zefzpus)
  5. [actual] rugmpus → babxpus (原始: rugmpus is babxpus)
  6. [actual] rugmpus → babxpus (原始: rugmpus is babxpus)
  7. [actual] decypus → naydpus (原始: decypus is naydpus)
  8. [actual] decypus → naydpus (原始: decypus is naydpus)
  9. [actual] fengpus → decypus (原始: fengpus is decypus)
  10. [actual] fengpus → decypus (原始: fengpus is decypus)
  11. [actual] facrpus → rugmpus (原始: facrpus is rugmpus)
  12. [actual] facrpus → rugmpus (原始: facrpus is rugmpus)
  13. [planning] x → babdpus (原始: x is babdpus)
  14. [planning] x → babqpus (原始: x is babqpus)
  15. [planning] x → babxpus (原始: x is babxpus)
  16. [actual] rugmpus → babxpus (原始: rugmpus is babxpus)
  17. [actual] babxpus → rugmpus (原始: babxpus is rugmpus)
  18. [planning] x → babxpus (原始: x is babxpus)
  19. [actual] x → fengpus and pulxpus (原始: x is fengpus and pulxpus)
  20. [actual] x → fengpus (原始: x is fengpus)
  21. [actual] x → pulxpus (原始: x is pulxpus)
  22. [actual] fengpus → decypus (原始: fengpus is decypus)
  23. [actual] fengpus → decypus (原始: fengpus is decypus)
  24. [actual] x → fengpus (原始: x is fengpus)
  25. [actual] x → decypus (原始: x is decypus)
  26. [actual] decypus → naydpus (原始: decypus is naydpus)
  27. [actual] decypus → naydpus (原始: decypus is naydpus)
  28. [actual] naydpus → facrpus and zefzpus (原始: naydpus is facrpus and zefzpus)
  29. [actual] naydpus → facrpus (原始: naydpus is facrpus)
  30. [actual] naydpus → zefzpus (原始: naydpus is zefzpus)
  31. [actual] x → facrpus (原始: x is facrpus)
  32. [actual] x → zefzpus (原始: x is zefzpus)
  33. [actual] facrpus → rugmpus (原始: facrpus is rugmpus)
  34. [actual] facrpus → rugmpus (原始: facrpus is rugmpus)
  35. [actual] x → rugmpus (原始: x is rugmpus)
  36. [actual] rugmpus → babxpus (原始: rugmpus is babxpus)
  37. [actual] rugmpus → babxpus (原始: rugmpus is babxpus)
  38. [actual] x → babxpus (原始: x is babxpus)
  39. [planning] x → babdpus (原始: x is babdpus)
  40. [planning] x → babqpus (原始: x is babqpus)
  41. [planning] x → babxpus (原始: x is babxpus)
  42. [actual] x → babxpus (原始: x is babxpus)
  43. [planning] x → babxpus (原始: x is babxpus)
  44. [planning] x → babdpus or babqpus or babxpus (原始: x is babdpus or babqpus or babxpus)
  45. [actual] x → babxpus (原始: x is babxpus)
  46. [actual] x → babdpus or babqpus or babxpus (原始: x is babdpus or babqpus or babxpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 8
[后处理] 加载LoG图，包含 8 个节点
  LoG节点 0: x is babdpus or babqpus or babxpus (规则: DI, 深度: 1)
  LoG节点 1: x is babxpus (规则: MP, 深度: 2)
  LoG节点 2: x is naydpus (规则: MP, 深度: 3)
  LoG节点 3: naydpus is babxpus (规则: MP, 深度: 3)
  LoG节点 4: x is fengpus (规则: CE, 深度: 4)
  LoG节点 5: fengpus is naydpus (规则: MP, 深度: 4)
  LoG节点 6: naydpus is facrpus (规则: CE, 深度: 4)
  LoG节点 7: facrpus is babxpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 46
   - 初始条件数: 6
   - LoG图节点数: 8

📋 初始条件列表:
    1. x is fengpus and pulxpus
    2. naydpus is facrpus and zefzpus
    3. rugmpus is babxpus
    4. decypus is naydpus
    5. fengpus is decypus
    6. facrpus is rugmpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 6 个前提节点

🔍 开始处理actual节点...

   节点 1: x is fengpus and pulxpus
      ↻ 重复节点，计数: 2

   节点 2: x is fengpus and pulxpus
      ↻ 重复节点，计数: 3

   节点 3: naydpus is facrpus and zefzpus
      ↻ 重复节点，计数: 2

   节点 4: naydpus is facrpus and zefzpus
      ↻ 重复节点，计数: 3

   节点 5: rugmpus is babxpus
      ↻ 重复节点，计数: 2

   节点 6: rugmpus is babxpus
      ↻ 重复节点，计数: 3

   节点 7: decypus is naydpus
      ↻ 重复节点，计数: 2

   节点 8: decypus is naydpus
      ↻ 重复节点，计数: 3

   节点 9: fengpus is decypus
      ↻ 重复节点，计数: 2

   节点 10: fengpus is decypus
      ↻ 重复节点，计数: 3

   节点 11: facrpus is rugmpus
      ↻ 重复节点，计数: 2

   节点 12: facrpus is rugmpus
      ↻ 重复节点，计数: 3

   节点 13: rugmpus is babxpus
      ↻ 重复节点，计数: 4

   节点 14: babxpus is rugmpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 15: x is fengpus and pulxpus
      ↻ 重复节点，计数: 4

   节点 16: x is fengpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is fengpus
      ✅ 验证成功 + LoG匹配

   节点 17: x is pulxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is fengpus and pulxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is fengpus and pulxpus

   节点 18: fengpus is decypus
      ↻ 重复节点，计数: 4

   节点 19: fengpus is decypus
      ↻ 重复节点，计数: 5

   节点 20: x is fengpus
      ↻ 重复节点，计数: 2

   节点 21: x is decypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fengpus → fengpus is decypus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is fengpus
  - 前提: fengpus is decypus

   节点 22: decypus is naydpus
      ↻ 重复节点，计数: 4

   节点 23: decypus is naydpus
      ↻ 重复节点，计数: 5

   节点 24: naydpus is facrpus and zefzpus
      ↻ 重复节点，计数: 4

   节点 25: naydpus is facrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: naydpus is facrpus
      ✅ 验证成功 + LoG匹配

   节点 26: naydpus is zefzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: naydpus is facrpus and zefzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: naydpus is facrpus and zefzpus

   节点 27: x is facrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fengpus → fengpus is facrpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is fengpus
  - 前提: fengpus is decypus
  - 前提: decypus is naydpus
  - 前提: naydpus is facrpus
  ✓ 点亮LoG节点: x is naydpus
[子树点亮]     └─ 点亮依赖节点: fengpus is naydpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 28: x is zefzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fengpus → fengpus is zefzpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is fengpus
  - 前提: fengpus is decypus
  - 前提: decypus is naydpus
  - 前提: naydpus is zefzpus

   节点 29: facrpus is rugmpus
      ↻ 重复节点，计数: 4

   节点 30: facrpus is rugmpus
      ↻ 重复节点，计数: 5

   节点 31: x is rugmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fengpus → fengpus is rugmpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is fengpus
  - 前提: fengpus is decypus
  - 前提: decypus is naydpus
  - 前提: naydpus is facrpus
  - 前提: facrpus is rugmpus

   节点 32: rugmpus is babxpus
      ↻ 重复节点，计数: 5

   节点 33: rugmpus is babxpus
      ↻ 重复节点，计数: 6

   节点 34: x is babxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babxpus
[子树点亮]     └─ 点亮依赖节点: naydpus is babxpus (深度3)
[子树点亮]     └─ 点亮依赖节点: facrpus is babxpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 35: x is babxpus
      ↻ 重复节点，计数: 2

   节点 36: x is babxpus
      ↻ 重复节点，计数: 3

   节点 37: x is babdpus or babqpus or babxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus or babqpus or babxpus
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 37
   - 新增节点: 11
   - 更新已存在节点: 26
   - 点亮的LoG节点: 8

🎯 推理质量统计:
   - 完美推理: 10 (节点正确 + 路径正确)
   - 部分推理: 1 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 8节点, 6前提, 复杂度1-6

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 17
   - 前提节点: 6
   - 推理节点: 10
   - 幻觉节点: 1
   - 点亮LoG节点: 8

❌ 幻觉节点详情:
   - babxpus is rugmpus (出现1次)

✅ 推理节点详情:
   🟢 x is fengpus (出现2次, 质量:perfect)
   🟢 x is pulxpus (出现1次, 质量:perfect)
   🟢 x is decypus (出现1次, 质量:perfect)
   🟢 naydpus is facrpus (出现1次, 质量:perfect)
   🟢 naydpus is zefzpus (出现1次, 质量:perfect)
   🟢 x is facrpus (出现1次, 质量:perfect)
   🟢 x is zefzpus (出现1次, 质量:perfect)
   🟡 x is rugmpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['babxpus is rugmpus']
   🟢 x is babxpus (出现3次, 质量:perfect)
   🟢 x is babdpus or babqpus or babxpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - fengpus is naydpus
   - naydpus is facrpus
   - naydpus is babxpus
   - x is babdpus or babqpus or babxpus
   - facrpus is babxpus
   - x is naydpus
   - x is babxpus
   - x is fengpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus or babqpus or babxpus (第4层)
   节点Coverage: 8/8 = 100.00%
   前提条件Coverage: 6/6 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 1/11 = 9.09%
   可推导节点: 10/11
   Strict Error Rate: 2/11 = 18.18%
   严格有效节点: 9/11

   详细分析:
     完美推理: 10 (90.91%)
     部分推理: 1 (9.09%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 9/50
================================================================================
记录索引: 8
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_8.json
✅ 使用缓存结果:
   - 句子数: 152
   - 提取的语句数: 243
   - 初始条件数: 8

=== Statement提取完成 ===
总句子数: 152
成功提取: 152
失败提取: 0
总statements数: 243

=== 开始清洗Statement格式 ===
原始statements数: 243
清洗后statements数: 159
过滤掉的statements数: 84
清洗后的statements:
  1. [actual] liqppus is kedwpus
  2. [actual] x is zefmpus and humspus
  3. [actual] qezxpus is babqpus and zoffpus
  4. [actual] x is zekgpus and godzpus
  5. [actual] zekgpus is liqppus and lufmpus
  6. [actual] kedwpus is babdpus and beddpus
  7. [actual] x is qezxpus
  8. [actual] zefmpus is babxpus and pibmpus
  9. [planning] x is babdpus and babqpus and babxpus
  10. [planning] x is babdpus
  11. [planning] x is babqpus
  12. [planning] x is babxpus
  13. [actual] x is qezxpus
  14. [actual] qezxpus is babqpus and zoffpus
  15. [actual] x is qezxpus
  16. [actual] qezxpus is babqpus
  17. [actual] x is babqpus
  18. [actual] x is babqpus
  19. [planning] x is babdpus and babxpus
  20. [planning] x is babdpus
  21. [actual] kedwpus is babdpus and beddpus
  22. [planning] x is kedwpus
  23. [actual] x is zekgpus and godzpus
  24. [actual] zekgpus is liqppus and lufmpus
  25. [actual] liqppus is kedwpus
  26. [actual] x is zekgpus
  27. [actual] zekgpus is liqppus
  28. [actual] liqppus is kedwpus
  29. [planning] x is kedwpus
  30. [actual] x is zekgpus
  31. [actual] zekgpus is liqppus
  32. [planning] zekgpus is liqppus
  33. [actual] zekgpus is liqppus and lufmpus
  34. [planning] zekgpus is liqppus
  35. [planning] zekgpus is lufmpus
  36. [planning] zekgpus is liqppus
  37. [actual] zekgpus is liqppus
  38. [planning] liqppus is a category
  39. [actual] liqppus is kedwpus
  40. [actual] liqppus is a member of kedwpus
  41. [actual] kedwpus is babdpus
  42. [planning] kedwpus is a member of babdpus
  43. [planning] zekgpus is a member of liqppus
  44. [planning] liqppus is a member of kedwpus
  45. [actual] x is qezxpus
  46. [actual] qezxpus is babqpus
  47. [actual] qezxpus is babqpus
  48. [planning] x is qezxpus
  49. [planning] x is babqpus
  50. [planning] x is qezxpus
  51. [planning] qezxpus is babqpus
  52. [planning] x is babqpus
  53. [planning] qezxpus is an instance of babqpus
  54. [planning] x is an instance of qezxpus
  55. [planning] x is an instance of babqpus
  56. [actual] x is zekgpus and godzpus
  57. [actual] x is zekgpus
  58. [actual] zekgpus is liqppus and lufmpus
  59. [actual] zekgpus is liqppus
  60. [actual] liqppus is kedwpus
  61. [actual] liqppus is kedwpus
  62. [actual] kedwpus is babdpus and beddpus
  63. [actual] kedwpus is babdpus
  64. [planning] x is zekgpus
  65. [planning] zekgpus is liqppus
  66. [planning] liqppus is kedwpus
  67. [planning] kedwpus is babdpus
  68. [planning] x is babdpus
  69. [actual] x is zefmpus and humspus
  70. [actual] zefmpus is a category that x belongs to
  71. [planning] x is zefmpus
  72. [planning] x is humspus
  73. [actual] zekgpus is liqppus
  74. [planning] x is babdpus
  75. [actual] x is zekgpus
  76. [actual] zekgpus is liqppus
  77. [actual] liqppus is kedwpus
  78. [actual] kedwpus is babdpus
  79. [actual] kedwpus is liqppus
  80. [actual] kedwpus is babdpus
  81. [actual] babdpus is a higher-level category that contains kedwpus
  82. [actual] kedwpus is zekgpus
  83. [actual] zekgpus is x
  84. [planning] x is babdpus
  85. [actual] kedwpus is babdpus
  86. [actual] liqppus is kedwpus
  87. [planning] kedwpus is babdpus
  88. [planning] liqppus is babdpus
  89. [actual] kedwpus is a category
  90. [actual] babdpus is a set that contains all elements of kedwpus
  91. [actual] kedwpus is babdpus
  92. [planning] kedwpus is babdpus
  93. [planning] x is zefmpus and humspus
  94. [actual] x is zefmpus and humspus
  95. [actual] x is zefmpus
  96. [actual] x is humspus
  97. [planning] x is B
  98. [planning] x is B
  99. [planning] x is an individual
  100. [actual] x is B
  101. [actual] zekgpus is liqppus
  102. [planning] zekgpus is liqppus
  103. [planning] zekgpus is liqppus
  104. [actual] liqppus is kedwpus
  105. [actual] kedwpus is babdpus and beddpus
  106. [planning] kedwpus is babdpus
  107. [planning] kedwpus is babdpus and beddpus
  108. [actual] liqppus is kedwpus
  109. [actual] zekgpus is liqppus
  110. [actual] x is zekgpus
  111. [actual] zekgpus is liqppus
  112. [actual] liqppus is kedwpus
  113. [actual] kedwpus is babdpus
  114. [actual] x is liqppus
  115. [actual] x is kedwpus
  116. [actual] x is babdpus
  117. [actual] x is babdpus
  118. [actual] x is zefmpus and humspus
  119. [actual] x is zefmpus
  120. [actual] x is humspus
  121. [actual] zefmpus is babxpus and pibmpus
  122. [planning] zefmpus is babxpus
  123. [planning] zefmpus is babxpus and pibmpus
  124. [actual] x is zefmpus
  125. [actual] x is babxpus
  126. [actual] x is babxpus
  127. [actual] x is babqpus
  128. [actual] x is babdpus and babqpus and babxpus
  129. [actual] qezxpus is babqpus and zoffpus
  130. [actual] qezxpus is babqpus
  131. [actual] qezxpus is zoffpus
  132. [actual] x is qezxpus
  133. [actual] x is babqpus
  134. [actual] x is zekgpus and godzpus
  135. [actual] x is zekgpus
  136. [actual] x is godzpus
  137. [actual] zekgpus is liqppus and lufmpus
  138. [actual] liqppus is kedwpus
  139. [actual] kedwpus is babdpus and beddpus
  140. [actual] x is zekgpus
  141. [actual] zekgpus is liqppus
  142. [actual] x is liqppus
  143. [actual] x is liqppus
  144. [actual] liqppus is kedwpus
  145. [actual] x is kedwpus
  146. [actual] x is kedwpus
  147. [actual] kedwpus is babdpus
  148. [actual] x is babdpus
  149. [actual] x is babdpus
  150. [actual] zefmpus is babxpus
  151. [actual] zefmpus is pibmpus
  152. [actual] x is zefmpus
  153. [actual] zefmpus is babxpus
  154. [actual] x is babxpus
  155. [actual] x is babxpus
  156. [actual] x is babqpus
  157. [actual] x is babdpus
  158. [actual] x is babqpus
  159. [actual] x is babxpus

=== 开始标准化和解析节点 ===
清洗后statements数: 159
标准化后节点数: 143
过滤掉的无效实体数: 16
标准化后的节点:
  1. [actual] liqppus → kedwpus (原始: liqppus is kedwpus)
  2. [actual] x → zefmpus and humspus (原始: x is zefmpus and humspus)
  3. [actual] qezxpus → babqpus and zoffpus (原始: qezxpus is babqpus and zoffpus)
  4. [actual] x → zekgpus and godzpus (原始: x is zekgpus and godzpus)
  5. [actual] zekgpus → liqppus and lufmpus (原始: zekgpus is liqppus and lufmpus)
  6. [actual] kedwpus → babdpus and beddpus (原始: kedwpus is babdpus and beddpus)
  7. [actual] x → qezxpus (原始: x is qezxpus)
  8. [actual] zefmpus → babxpus and pibmpus (原始: zefmpus is babxpus and pibmpus)
  9. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  10. [planning] x → babdpus (原始: x is babdpus)
  11. [planning] x → babqpus (原始: x is babqpus)
  12. [planning] x → babxpus (原始: x is babxpus)
  13. [actual] x → qezxpus (原始: x is qezxpus)
  14. [actual] qezxpus → babqpus and zoffpus (原始: qezxpus is babqpus and zoffpus)
  15. [actual] x → qezxpus (原始: x is qezxpus)
  16. [actual] qezxpus → babqpus (原始: qezxpus is babqpus)
  17. [actual] x → babqpus (原始: x is babqpus)
  18. [actual] x → babqpus (原始: x is babqpus)
  19. [planning] x → babdpus and babxpus (原始: x is babdpus and babxpus)
  20. [planning] x → babdpus (原始: x is babdpus)
  21. [actual] kedwpus → babdpus and beddpus (原始: kedwpus is babdpus and beddpus)
  22. [planning] x → kedwpus (原始: x is kedwpus)
  23. [actual] x → zekgpus and godzpus (原始: x is zekgpus and godzpus)
  24. [actual] zekgpus → liqppus and lufmpus (原始: zekgpus is liqppus and lufmpus)
  25. [actual] liqppus → kedwpus (原始: liqppus is kedwpus)
  26. [actual] x → zekgpus (原始: x is zekgpus)
  27. [actual] zekgpus → liqppus (原始: zekgpus is liqppus)
  28. [actual] liqppus → kedwpus (原始: liqppus is kedwpus)
  29. [planning] x → kedwpus (原始: x is kedwpus)
  30. [actual] x → zekgpus (原始: x is zekgpus)
  31. [actual] zekgpus → liqppus (原始: zekgpus is liqppus)
  32. [planning] zekgpus → liqppus (原始: zekgpus is liqppus)
  33. [actual] zekgpus → liqppus and lufmpus (原始: zekgpus is liqppus and lufmpus)
  34. [planning] zekgpus → liqppus (原始: zekgpus is liqppus)
  35. [planning] zekgpus → lufmpus (原始: zekgpus is lufmpus)
  36. [planning] zekgpus → liqppus (原始: zekgpus is liqppus)
  37. [actual] zekgpus → liqppus (原始: zekgpus is liqppus)
  38. [actual] liqppus → kedwpus (原始: liqppus is kedwpus)
  39. [actual] kedwpus → babdpus (原始: kedwpus is babdpus)
  40. [actual] x → qezxpus (原始: x is qezxpus)
  41. [actual] qezxpus → babqpus (原始: qezxpus is babqpus)
  42. [actual] qezxpus → babqpus (原始: qezxpus is babqpus)
  43. [planning] x → qezxpus (原始: x is qezxpus)
  44. [planning] x → babqpus (原始: x is babqpus)
  45. [planning] x → qezxpus (原始: x is qezxpus)
  46. [planning] qezxpus → babqpus (原始: qezxpus is babqpus)
  47. [planning] x → babqpus (原始: x is babqpus)
  48. [actual] x → zekgpus and godzpus (原始: x is zekgpus and godzpus)
  49. [actual] x → zekgpus (原始: x is zekgpus)
  50. [actual] zekgpus → liqppus and lufmpus (原始: zekgpus is liqppus and lufmpus)
  51. [actual] zekgpus → liqppus (原始: zekgpus is liqppus)
  52. [actual] liqppus → kedwpus (原始: liqppus is kedwpus)
  53. [actual] liqppus → kedwpus (原始: liqppus is kedwpus)
  54. [actual] kedwpus → babdpus and beddpus (原始: kedwpus is babdpus and beddpus)
  55. [actual] kedwpus → babdpus (原始: kedwpus is babdpus)
  56. [planning] x → zekgpus (原始: x is zekgpus)
  57. [planning] zekgpus → liqppus (原始: zekgpus is liqppus)
  58. [planning] liqppus → kedwpus (原始: liqppus is kedwpus)
  59. [planning] kedwpus → babdpus (原始: kedwpus is babdpus)
  60. [planning] x → babdpus (原始: x is babdpus)
  61. [actual] x → zefmpus and humspus (原始: x is zefmpus and humspus)
  62. [planning] x → zefmpus (原始: x is zefmpus)
  63. [planning] x → humspus (原始: x is humspus)
  64. [actual] zekgpus → liqppus (原始: zekgpus is liqppus)
  65. [planning] x → babdpus (原始: x is babdpus)
  66. [actual] x → zekgpus (原始: x is zekgpus)
  67. [actual] zekgpus → liqppus (原始: zekgpus is liqppus)
  68. [actual] liqppus → kedwpus (原始: liqppus is kedwpus)
  69. [actual] kedwpus → babdpus (原始: kedwpus is babdpus)
  70. [actual] kedwpus → liqppus (原始: kedwpus is liqppus)
  71. [actual] kedwpus → babdpus (原始: kedwpus is babdpus)
  72. [actual] kedwpus → zekgpus (原始: kedwpus is zekgpus)
  73. [actual] zekgpus → x (原始: zekgpus is x)
  74. [planning] x → babdpus (原始: x is babdpus)
  75. [actual] kedwpus → babdpus (原始: kedwpus is babdpus)
  76. [actual] liqppus → kedwpus (原始: liqppus is kedwpus)
  77. [planning] kedwpus → babdpus (原始: kedwpus is babdpus)
  78. [planning] liqppus → babdpus (原始: liqppus is babdpus)
  79. [actual] kedwpus → babdpus (原始: kedwpus is babdpus)
  80. [planning] kedwpus → babdpus (原始: kedwpus is babdpus)
  81. [planning] x → zefmpus and humspus (原始: x is zefmpus and humspus)
  82. [actual] x → zefmpus and humspus (原始: x is zefmpus and humspus)
  83. [actual] x → zefmpus (原始: x is zefmpus)
  84. [actual] x → humspus (原始: x is humspus)
  85. [actual] zekgpus → liqppus (原始: zekgpus is liqppus)
  86. [planning] zekgpus → liqppus (原始: zekgpus is liqppus)
  87. [planning] zekgpus → liqppus (原始: zekgpus is liqppus)
  88. [actual] liqppus → kedwpus (原始: liqppus is kedwpus)
  89. [actual] kedwpus → babdpus and beddpus (原始: kedwpus is babdpus and beddpus)
  90. [planning] kedwpus → babdpus (原始: kedwpus is babdpus)
  91. [planning] kedwpus → babdpus and beddpus (原始: kedwpus is babdpus and beddpus)
  92. [actual] liqppus → kedwpus (原始: liqppus is kedwpus)
  93. [actual] zekgpus → liqppus (原始: zekgpus is liqppus)
  94. [actual] x → zekgpus (原始: x is zekgpus)
  95. [actual] zekgpus → liqppus (原始: zekgpus is liqppus)
  96. [actual] liqppus → kedwpus (原始: liqppus is kedwpus)
  97. [actual] kedwpus → babdpus (原始: kedwpus is babdpus)
  98. [actual] x → liqppus (原始: x is liqppus)
  99. [actual] x → kedwpus (原始: x is kedwpus)
  100. [actual] x → babdpus (原始: x is babdpus)
  101. [actual] x → babdpus (原始: x is babdpus)
  102. [actual] x → zefmpus and humspus (原始: x is zefmpus and humspus)
  103. [actual] x → zefmpus (原始: x is zefmpus)
  104. [actual] x → humspus (原始: x is humspus)
  105. [actual] zefmpus → babxpus and pibmpus (原始: zefmpus is babxpus and pibmpus)
  106. [planning] zefmpus → babxpus (原始: zefmpus is babxpus)
  107. [planning] zefmpus → babxpus and pibmpus (原始: zefmpus is babxpus and pibmpus)
  108. [actual] x → zefmpus (原始: x is zefmpus)
  109. [actual] x → babxpus (原始: x is babxpus)
  110. [actual] x → babxpus (原始: x is babxpus)
  111. [actual] x → babqpus (原始: x is babqpus)
  112. [actual] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  113. [actual] qezxpus → babqpus and zoffpus (原始: qezxpus is babqpus and zoffpus)
  114. [actual] qezxpus → babqpus (原始: qezxpus is babqpus)
  115. [actual] qezxpus → zoffpus (原始: qezxpus is zoffpus)
  116. [actual] x → qezxpus (原始: x is qezxpus)
  117. [actual] x → babqpus (原始: x is babqpus)
  118. [actual] x → zekgpus and godzpus (原始: x is zekgpus and godzpus)
  119. [actual] x → zekgpus (原始: x is zekgpus)
  120. [actual] x → godzpus (原始: x is godzpus)
  121. [actual] zekgpus → liqppus and lufmpus (原始: zekgpus is liqppus and lufmpus)
  122. [actual] liqppus → kedwpus (原始: liqppus is kedwpus)
  123. [actual] kedwpus → babdpus and beddpus (原始: kedwpus is babdpus and beddpus)
  124. [actual] x → zekgpus (原始: x is zekgpus)
  125. [actual] zekgpus → liqppus (原始: zekgpus is liqppus)
  126. [actual] x → liqppus (原始: x is liqppus)
  127. [actual] x → liqppus (原始: x is liqppus)
  128. [actual] liqppus → kedwpus (原始: liqppus is kedwpus)
  129. [actual] x → kedwpus (原始: x is kedwpus)
  130. [actual] x → kedwpus (原始: x is kedwpus)
  131. [actual] kedwpus → babdpus (原始: kedwpus is babdpus)
  132. [actual] x → babdpus (原始: x is babdpus)
  133. [actual] x → babdpus (原始: x is babdpus)
  134. [actual] zefmpus → babxpus (原始: zefmpus is babxpus)
  135. [actual] zefmpus → pibmpus (原始: zefmpus is pibmpus)
  136. [actual] x → zefmpus (原始: x is zefmpus)
  137. [actual] zefmpus → babxpus (原始: zefmpus is babxpus)
  138. [actual] x → babxpus (原始: x is babxpus)
  139. [actual] x → babxpus (原始: x is babxpus)
  140. [actual] x → babqpus (原始: x is babqpus)
  141. [actual] x → babdpus (原始: x is babdpus)
  142. [actual] x → babqpus (原始: x is babqpus)
  143. [actual] x → babxpus (原始: x is babxpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 13
[后处理] 加载LoG图，包含 13 个节点
  LoG节点 0: x is babdpus and babqpus and babxpus (规则: CI, 深度: 1)
  LoG节点 1: x is babdpus (规则: MP, 深度: 2)
  LoG节点 2: x is babqpus and babxpus (规则: CI, 深度: 2)
  LoG节点 3: x is liqppus (规则: MP, 深度: 3)
  LoG节点 4: liqppus is babdpus (规则: CE, 深度: 3)
  LoG节点 5: x is babqpus (规则: CE, 深度: 3)
  LoG节点 6: x is babxpus (规则: MP, 深度: 3)
  LoG节点 7: x is zekgpus (规则: CE, 深度: 4)
  LoG节点 8: zekgpus is liqppus (规则: CE, 深度: 4)
  LoG节点 9: liqppus is babdpus and beddpus (规则: MP, 深度: 4)
  LoG节点 10: x is babqpus and zoffpus (规则: MP, 深度: 4)
  LoG节点 11: x is zefmpus (规则: CE, 深度: 4)
  LoG节点 12: zefmpus is babxpus (规则: CE, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 143
   - 初始条件数: 8
   - LoG图节点数: 13

📋 初始条件列表:
    1. liqppus is kedwpus
    2. x is zefmpus and humspus
    3. qezxpus is babqpus and zoffpus
    4. x is zekgpus and godzpus
    5. zekgpus is liqppus and lufmpus
    6. kedwpus is babdpus and beddpus
    7. x is qezxpus
    8. zefmpus is babxpus and pibmpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 8 个前提节点

🔍 开始处理actual节点...

   节点 1: liqppus is kedwpus
      ↻ 重复节点，计数: 2

   节点 2: x is zefmpus and humspus
      ↻ 重复节点，计数: 2

   节点 3: qezxpus is babqpus and zoffpus
      ↻ 重复节点，计数: 2

   节点 4: x is zekgpus and godzpus
      ↻ 重复节点，计数: 2

   节点 5: zekgpus is liqppus and lufmpus
      ↻ 重复节点，计数: 2

   节点 6: kedwpus is babdpus and beddpus
      ↻ 重复节点，计数: 2

   节点 7: x is qezxpus
      ↻ 重复节点，计数: 2

   节点 8: zefmpus is babxpus and pibmpus
      ↻ 重复节点，计数: 2

   节点 9: x is qezxpus
      ↻ 重复节点，计数: 3

   节点 10: qezxpus is babqpus and zoffpus
      ↻ 重复节点，计数: 3

   节点 11: x is qezxpus
      ↻ 重复节点，计数: 4

   节点 12: qezxpus is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qezxpus is babqpus and zoffpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qezxpus is babqpus and zoffpus

   节点 13: x is babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babqpus
[子树点亮]     └─ 点亮依赖节点: x is babqpus and zoffpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 14: x is babqpus
      ↻ 重复节点，计数: 2

   节点 15: kedwpus is babdpus and beddpus
      ↻ 重复节点，计数: 3

   节点 16: x is zekgpus and godzpus
      ↻ 重复节点，计数: 3

   节点 17: zekgpus is liqppus and lufmpus
      ↻ 重复节点，计数: 3

   节点 18: liqppus is kedwpus
      ↻ 重复节点，计数: 3

   节点 19: x is zekgpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is zekgpus
      ✅ 验证成功 + LoG匹配

   节点 20: zekgpus is liqppus
      🔍 验证新节点...
[后处理] 点亮LoG节点: zekgpus is liqppus
      ✅ 验证成功 + LoG匹配

   节点 21: liqppus is kedwpus
      ↻ 重复节点，计数: 4

   节点 22: x is zekgpus
      ↻ 重复节点，计数: 2

   节点 23: zekgpus is liqppus
      ↻ 重复节点，计数: 2

   节点 24: zekgpus is liqppus and lufmpus
      ↻ 重复节点，计数: 4

   节点 25: zekgpus is liqppus
      ↻ 重复节点，计数: 3

   节点 26: liqppus is kedwpus
      ↻ 重复节点，计数: 5

   节点 27: kedwpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kedwpus is babdpus and beddpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kedwpus is babdpus and beddpus

   节点 28: x is qezxpus
      ↻ 重复节点，计数: 5

   节点 29: qezxpus is babqpus
      ↻ 重复节点，计数: 2

   节点 30: qezxpus is babqpus
      ↻ 重复节点，计数: 3

   节点 31: x is zekgpus and godzpus
      ↻ 重复节点，计数: 4

   节点 32: x is zekgpus
      ↻ 重复节点，计数: 3

   节点 33: zekgpus is liqppus and lufmpus
      ↻ 重复节点，计数: 5

   节点 34: zekgpus is liqppus
      ↻ 重复节点，计数: 4

   节点 35: liqppus is kedwpus
      ↻ 重复节点，计数: 6

   节点 36: liqppus is kedwpus
      ↻ 重复节点，计数: 7

   节点 37: kedwpus is babdpus and beddpus
      ↻ 重复节点，计数: 4

   节点 38: kedwpus is babdpus
      ↻ 重复节点，计数: 2

   节点 39: x is zefmpus and humspus
      ↻ 重复节点，计数: 3

   节点 40: zekgpus is liqppus
      ↻ 重复节点，计数: 5

   节点 41: x is zekgpus
      ↻ 重复节点，计数: 4

   节点 42: zekgpus is liqppus
      ↻ 重复节点，计数: 6

   节点 43: liqppus is kedwpus
      ↻ 重复节点，计数: 8

   节点 44: kedwpus is babdpus
      ↻ 重复节点，计数: 3

   节点 45: kedwpus is liqppus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 46: kedwpus is babdpus
      ↻ 重复节点，计数: 4

   节点 47: kedwpus is zekgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 48: zekgpus is x
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 49: kedwpus is babdpus
      ↻ 重复节点，计数: 5

   节点 50: liqppus is kedwpus
      ↻ 重复节点，计数: 9

   节点 51: kedwpus is babdpus
      ↻ 重复节点，计数: 6

   节点 52: x is zefmpus and humspus
      ↻ 重复节点，计数: 4

   节点 53: x is zefmpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is zefmpus
      ✅ 验证成功 + LoG匹配

   节点 54: x is humspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is zefmpus and humspus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is zefmpus and humspus

   节点 55: zekgpus is liqppus
      ↻ 重复节点，计数: 7

   节点 56: liqppus is kedwpus
      ↻ 重复节点，计数: 10

   节点 57: kedwpus is babdpus and beddpus
      ↻ 重复节点，计数: 5

   节点 58: liqppus is kedwpus
      ↻ 重复节点，计数: 11

   节点 59: zekgpus is liqppus
      ↻ 重复节点，计数: 8

   节点 60: x is zekgpus
      ↻ 重复节点，计数: 5

   节点 61: zekgpus is liqppus
      ↻ 重复节点，计数: 9

   节点 62: liqppus is kedwpus
      ↻ 重复节点，计数: 12

   节点 63: kedwpus is babdpus
      ↻ 重复节点，计数: 7

   节点 64: x is liqppus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is liqppus
      ✅ 验证成功 + LoG匹配

   节点 65: x is kedwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zekgpus → zekgpus is kedwpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is zekgpus
  - 前提: zekgpus is liqppus
  - 前提: liqppus is kedwpus

   节点 66: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: liqppus is babdpus (深度3)
[子树点亮]     └─ 点亮依赖节点: liqppus is babdpus and beddpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 67: x is babdpus
      ↻ 重复节点，计数: 2

   节点 68: x is zefmpus and humspus
      ↻ 重复节点，计数: 5

   节点 69: x is zefmpus
      ↻ 重复节点，计数: 2

   节点 70: x is humspus
      ↻ 重复节点，计数: 2

   节点 71: zefmpus is babxpus and pibmpus
      ↻ 重复节点，计数: 3

   节点 72: x is zefmpus
      ↻ 重复节点，计数: 3

   节点 73: x is babxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babxpus
[子树点亮]     └─ 点亮依赖节点: zefmpus is babxpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 74: x is babxpus
      ↻ 重复节点，计数: 2

   节点 75: x is babqpus
      ↻ 重复节点，计数: 3

   节点 76: x is babdpus and babqpus and babxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus and babqpus and babxpus
[子树点亮]     └─ 点亮依赖节点: x is babqpus and babxpus (深度2)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 77: qezxpus is babqpus and zoffpus
      ↻ 重复节点，计数: 4

   节点 78: qezxpus is babqpus
      ↻ 重复节点，计数: 4

   节点 79: qezxpus is zoffpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qezxpus is babqpus and zoffpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qezxpus is babqpus and zoffpus

   节点 80: x is qezxpus
      ↻ 重复节点，计数: 6

   节点 81: x is babqpus
      ↻ 重复节点，计数: 4

   节点 82: x is zekgpus and godzpus
      ↻ 重复节点，计数: 5

   节点 83: x is zekgpus
      ↻ 重复节点，计数: 6

   节点 84: x is godzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is zekgpus and godzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is zekgpus and godzpus

   节点 85: zekgpus is liqppus and lufmpus
      ↻ 重复节点，计数: 6

   节点 86: liqppus is kedwpus
      ↻ 重复节点，计数: 13

   节点 87: kedwpus is babdpus and beddpus
      ↻ 重复节点，计数: 6

   节点 88: x is zekgpus
      ↻ 重复节点，计数: 7

   节点 89: zekgpus is liqppus
      ↻ 重复节点，计数: 10

   节点 90: x is liqppus
      ↻ 重复节点，计数: 2

   节点 91: x is liqppus
      ↻ 重复节点，计数: 3

   节点 92: liqppus is kedwpus
      ↻ 重复节点，计数: 14

   节点 93: x is kedwpus
      ↻ 重复节点，计数: 2

   节点 94: x is kedwpus
      ↻ 重复节点，计数: 3

   节点 95: kedwpus is babdpus
      ↻ 重复节点，计数: 8

   节点 96: x is babdpus
      ↻ 重复节点，计数: 3

   节点 97: x is babdpus
      ↻ 重复节点，计数: 4

   节点 98: zefmpus is babxpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 99: zefmpus is pibmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zefmpus is babxpus and pibmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zefmpus is babxpus and pibmpus

   节点 100: x is zefmpus
      ↻ 重复节点，计数: 4

   节点 101: zefmpus is babxpus
      ↻ 重复节点，计数: 2

   节点 102: x is babxpus
      ↻ 重复节点，计数: 3

   节点 103: x is babxpus
      ↻ 重复节点，计数: 4

   节点 104: x is babqpus
      ↻ 重复节点，计数: 5

   节点 105: x is babdpus
      ↻ 重复节点，计数: 5

   节点 106: x is babqpus
      ↻ 重复节点，计数: 6

   节点 107: x is babxpus
      ↻ 重复节点，计数: 5

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 107
   - 新增节点: 19
   - 更新已存在节点: 88
   - 点亮的LoG节点: 13

🎯 推理质量统计:
   - 完美推理: 13 (节点正确 + 路径正确)
   - 部分推理: 6 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 13节点, 8前提, 复杂度1-8

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 27
   - 前提节点: 8
   - 推理节点: 16
   - 幻觉节点: 3
   - 点亮LoG节点: 13

❌ 幻觉节点详情:
   - kedwpus is liqppus (出现1次)
   - kedwpus is zekgpus (出现1次)
   - zekgpus is x (出现1次)

✅ 推理节点详情:
   🟢 qezxpus is babqpus (出现4次, 质量:perfect)
   🟢 x is babqpus (出现6次, 质量:perfect)
   🟡 x is zekgpus (出现7次, 质量:partial)
      ⚠️  无效依赖: ['kedwpus is zekgpus']
   🟡 zekgpus is liqppus (出现10次, 质量:partial)
      ⚠️  无效依赖: ['zekgpus is x', 'kedwpus is liqppus']
   🟡 kedwpus is babdpus (出现8次, 质量:partial)
      ⚠️  无效依赖: ['kedwpus is liqppus', 'kedwpus is zekgpus']
   🟢 x is zefmpus (出现4次, 质量:perfect)
   🟢 x is humspus (出现2次, 质量:perfect)
   🟡 x is liqppus (出现3次, 质量:partial)
      ⚠️  无效依赖: ['kedwpus is liqppus']
   🟢 x is kedwpus (出现3次, 质量:perfect)
   🟢 x is babdpus (出现5次, 质量:perfect)
   🟢 x is babxpus (出现5次, 质量:perfect)
   🟢 x is babdpus and babqpus and babxpus (出现1次, 质量:perfect)
   🟢 qezxpus is zoffpus (出现1次, 质量:perfect)
   🟢 x is godzpus (出现1次, 质量:perfect)
   🟢 zefmpus is babxpus (出现2次, 质量:perfect)
   🟢 zefmpus is pibmpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is babxpus
   - x is babqpus and zoffpus
   - zefmpus is babxpus
   - x is babdpus and babqpus and babxpus
   - x is babqpus and babxpus
   - x is zefmpus
   - x is zekgpus
   - x is babdpus
   - x is liqppus
   - x is babqpus
   - zekgpus is liqppus
   - liqppus is babdpus and beddpus
   - liqppus is babdpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus and babqpus and babxpus (第4层)
   节点Coverage: 13/13 = 100.00%
   前提条件Coverage: 8/8 = 100.00%
   各推理层点亮比例:
     第1层: 6/6 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 3/19 = 15.79%
   可推导节点: 16/19
   Strict Error Rate: 7/19 = 36.84%
   严格有效节点: 12/19

   详细分析:
     完美推理: 13 (68.42%)
     部分推理: 6 (31.58%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 10/50
================================================================================
记录索引: 9
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_9.json
✅ 使用缓存结果:
   - 句子数: 85
   - 提取的语句数: 115
   - 初始条件数: 6

=== Statement提取完成 ===
总句子数: 85
成功提取: 85
失败提取: 0
总statements数: 115

=== 开始清洗Statement格式 ===
原始statements数: 115
清洗后statements数: 91
过滤掉的statements数: 24
清洗后的statements:
  1. [actual] x is zumtpus and kozcpus
  2. [actual] zumtpus is yoxtpus
  3. [actual] ciprpus is babqpus and wolypus
  4. [actual] wicgpus is ciprpus and qahppus
  5. [actual] zefrpus is wicgpus
  6. [actual] zumtpus is zefrpus
  7. [planning] x is babdpus or babqpus
  8. [planning] x is babqpus
  9. [actual] x is zumtpus and kozcpus
  10. [actual] x is zumtpus and kozcpus
  11. [actual] zumtpus is yoxtpus
  12. [actual] zumtpus is a subset of yoxtpus
  13. [actual] zumtpus is yoxtpus
  14. [actual] zumtpus is zefrpus
  15. [actual] zumtpus is zefrpus
  16. [actual] zefrpus is wicgpus
  17. [actual] zefrpus is wicgpus
  18. [actual] wicgpus is ciprpus and qahppus
  19. [actual] wicgpus is ciprpus and qahppus
  20. [actual] ciprpus is babqpus and wolypus
  21. [actual] ciprpus is babqpus and wolypus
  22. [planning] x is babqpus
  23. [actual] x is zumtpus
  24. [actual] zumtpus is zefrpus
  25. [actual] zefrpus is wicgpus
  26. [actual] wicgpus is ciprpus
  27. [actual] ciprpus is babqpus
  28. [planning] zumtpus is babqpus
  29. [planning] x is babqpus
  30. [actual] x is zumtpus
  31. [actual] zumtpus is zefrpus
  32. [actual] zefrpus is wicgpus
  33. [actual] wicgpus is ciprpus
  34. [actual] ciprpus is babqpus
  35. [actual] zumtpus is zefrpus
  36. [actual] zefrpus is wicgpus
  37. [actual] zumtpus is wicgpus
  38. [actual] wicgpus is ciprpus
  39. [actual] ciprpus is babqpus
  40. [planning] zumtpus is babqpus
  41. [planning] zumtpus is babqpus
  42. [planning] x is babqpus
  43. [actual] x is zumtpus
  44. [actual] zumtpus is babqpus
  45. [actual] x is babqpus
  46. [planning] x is babdpus or babqpus
  47. [actual] zumtpus is zefrpus
  48. [actual] zefrpus is wicgpus
  49. [actual] wicgpus is ciprpus
  50. [actual] wicgpus is ciprpus
  51. [actual] ciprpus is a broader category
  52. [actual] ciprpus is babqpus
  53. [actual] ciprpus is babqpus
  54. [planning] ciprpus is babqpus
  55. [actual] zumtpus is zefrpus
  56. [actual] zefrpus is wicgpus
  57. [actual] wicgpus is ciprpus
  58. [actual] ciprpus is babqpus
  59. [actual] zumtpus is babqpus
  60. [actual] x is zumtpus
  61. [actual] x is zumtpus
  62. [actual] x is babqpus
  63. [planning] x is babqpus
  64. [actual] x is babqpus
  65. [planning] x is babdpus or babqpus
  66. [actual] x is babqpus
  67. [planning] babdpus is involved
  68. [planning] x is babqpus
  69. [actual] x is kozcpus
  70. [planning] x is babqpus
  71. [actual] x is babqpus
  72. [actual] x is babdpus or babqpus
  73. [actual] x is babqpus
  74. [planning] zumtpus is babqpus
  75. [actual] ciprpus is babqpus
  76. [actual] ciprpus is babqpus
  77. [actual] wicgpus is ciprpus
  78. [actual] wicgpus is ciprpus
  79. [actual] zefrpus is wicgpus
  80. [actual] zefrpus is wicgpus
  81. [actual] zumtpus is zefrpus
  82. [actual] zumtpus is zefrpus
  83. [actual] x is zumtpus
  84. [actual] x is zumtpus
  85. [actual] x is zefrpus
  86. [actual] zefrpus is wicgpus
  87. [actual] wicgpus is ciprpus
  88. [actual] ciprpus is babqpus
  89. [actual] x is babqpus
  90. [actual] x is babqpus
  91. [actual] x is babqpus

=== 开始标准化和解析节点 ===
清洗后statements数: 91
标准化后节点数: 88
过滤掉的无效实体数: 3
标准化后的节点:
  1. [actual] x → zumtpus and kozcpus (原始: x is zumtpus and kozcpus)
  2. [actual] zumtpus → yoxtpus (原始: zumtpus is yoxtpus)
  3. [actual] ciprpus → babqpus and wolypus (原始: ciprpus is babqpus and wolypus)
  4. [actual] wicgpus → ciprpus and qahppus (原始: wicgpus is ciprpus and qahppus)
  5. [actual] zefrpus → wicgpus (原始: zefrpus is wicgpus)
  6. [actual] zumtpus → zefrpus (原始: zumtpus is zefrpus)
  7. [planning] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  8. [planning] x → babqpus (原始: x is babqpus)
  9. [actual] x → zumtpus and kozcpus (原始: x is zumtpus and kozcpus)
  10. [actual] x → zumtpus and kozcpus (原始: x is zumtpus and kozcpus)
  11. [actual] zumtpus → yoxtpus (原始: zumtpus is yoxtpus)
  12. [actual] zumtpus → yoxtpus (原始: zumtpus is yoxtpus)
  13. [actual] zumtpus → zefrpus (原始: zumtpus is zefrpus)
  14. [actual] zumtpus → zefrpus (原始: zumtpus is zefrpus)
  15. [actual] zefrpus → wicgpus (原始: zefrpus is wicgpus)
  16. [actual] zefrpus → wicgpus (原始: zefrpus is wicgpus)
  17. [actual] wicgpus → ciprpus and qahppus (原始: wicgpus is ciprpus and qahppus)
  18. [actual] wicgpus → ciprpus and qahppus (原始: wicgpus is ciprpus and qahppus)
  19. [actual] ciprpus → babqpus and wolypus (原始: ciprpus is babqpus and wolypus)
  20. [actual] ciprpus → babqpus and wolypus (原始: ciprpus is babqpus and wolypus)
  21. [planning] x → babqpus (原始: x is babqpus)
  22. [actual] x → zumtpus (原始: x is zumtpus)
  23. [actual] zumtpus → zefrpus (原始: zumtpus is zefrpus)
  24. [actual] zefrpus → wicgpus (原始: zefrpus is wicgpus)
  25. [actual] wicgpus → ciprpus (原始: wicgpus is ciprpus)
  26. [actual] ciprpus → babqpus (原始: ciprpus is babqpus)
  27. [planning] zumtpus → babqpus (原始: zumtpus is babqpus)
  28. [planning] x → babqpus (原始: x is babqpus)
  29. [actual] x → zumtpus (原始: x is zumtpus)
  30. [actual] zumtpus → zefrpus (原始: zumtpus is zefrpus)
  31. [actual] zefrpus → wicgpus (原始: zefrpus is wicgpus)
  32. [actual] wicgpus → ciprpus (原始: wicgpus is ciprpus)
  33. [actual] ciprpus → babqpus (原始: ciprpus is babqpus)
  34. [actual] zumtpus → zefrpus (原始: zumtpus is zefrpus)
  35. [actual] zefrpus → wicgpus (原始: zefrpus is wicgpus)
  36. [actual] zumtpus → wicgpus (原始: zumtpus is wicgpus)
  37. [actual] wicgpus → ciprpus (原始: wicgpus is ciprpus)
  38. [actual] ciprpus → babqpus (原始: ciprpus is babqpus)
  39. [planning] zumtpus → babqpus (原始: zumtpus is babqpus)
  40. [planning] zumtpus → babqpus (原始: zumtpus is babqpus)
  41. [planning] x → babqpus (原始: x is babqpus)
  42. [actual] x → zumtpus (原始: x is zumtpus)
  43. [actual] zumtpus → babqpus (原始: zumtpus is babqpus)
  44. [actual] x → babqpus (原始: x is babqpus)
  45. [planning] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  46. [actual] zumtpus → zefrpus (原始: zumtpus is zefrpus)
  47. [actual] zefrpus → wicgpus (原始: zefrpus is wicgpus)
  48. [actual] wicgpus → ciprpus (原始: wicgpus is ciprpus)
  49. [actual] wicgpus → ciprpus (原始: wicgpus is ciprpus)
  50. [actual] ciprpus → babqpus (原始: ciprpus is babqpus)
  51. [actual] ciprpus → babqpus (原始: ciprpus is babqpus)
  52. [planning] ciprpus → babqpus (原始: ciprpus is babqpus)
  53. [actual] zumtpus → zefrpus (原始: zumtpus is zefrpus)
  54. [actual] zefrpus → wicgpus (原始: zefrpus is wicgpus)
  55. [actual] wicgpus → ciprpus (原始: wicgpus is ciprpus)
  56. [actual] ciprpus → babqpus (原始: ciprpus is babqpus)
  57. [actual] zumtpus → babqpus (原始: zumtpus is babqpus)
  58. [actual] x → zumtpus (原始: x is zumtpus)
  59. [actual] x → zumtpus (原始: x is zumtpus)
  60. [actual] x → babqpus (原始: x is babqpus)
  61. [planning] x → babqpus (原始: x is babqpus)
  62. [actual] x → babqpus (原始: x is babqpus)
  63. [planning] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  64. [actual] x → babqpus (原始: x is babqpus)
  65. [planning] x → babqpus (原始: x is babqpus)
  66. [actual] x → kozcpus (原始: x is kozcpus)
  67. [planning] x → babqpus (原始: x is babqpus)
  68. [actual] x → babqpus (原始: x is babqpus)
  69. [actual] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  70. [actual] x → babqpus (原始: x is babqpus)
  71. [planning] zumtpus → babqpus (原始: zumtpus is babqpus)
  72. [actual] ciprpus → babqpus (原始: ciprpus is babqpus)
  73. [actual] ciprpus → babqpus (原始: ciprpus is babqpus)
  74. [actual] wicgpus → ciprpus (原始: wicgpus is ciprpus)
  75. [actual] wicgpus → ciprpus (原始: wicgpus is ciprpus)
  76. [actual] zefrpus → wicgpus (原始: zefrpus is wicgpus)
  77. [actual] zefrpus → wicgpus (原始: zefrpus is wicgpus)
  78. [actual] zumtpus → zefrpus (原始: zumtpus is zefrpus)
  79. [actual] zumtpus → zefrpus (原始: zumtpus is zefrpus)
  80. [actual] x → zumtpus (原始: x is zumtpus)
  81. [actual] x → zumtpus (原始: x is zumtpus)
  82. [actual] x → zefrpus (原始: x is zefrpus)
  83. [actual] zefrpus → wicgpus (原始: zefrpus is wicgpus)
  84. [actual] wicgpus → ciprpus (原始: wicgpus is ciprpus)
  85. [actual] ciprpus → babqpus (原始: ciprpus is babqpus)
  86. [actual] x → babqpus (原始: x is babqpus)
  87. [actual] x → babqpus (原始: x is babqpus)
  88. [actual] x → babqpus (原始: x is babqpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 10
[后处理] 加载LoG图，包含 10 个节点
  LoG节点 0: x is babdpus or babqpus (规则: MP, 深度: 1)
  LoG节点 1: x is zefrpus (规则: CE, 深度: 2)
  LoG节点 2: zefrpus is babdpus or babqpus (规则: MP, 深度: 2)
  LoG节点 3: x is zefrpus and yoxtpus (规则: MP, 深度: 3)
  LoG节点 4: zefrpus is ciprpus (规则: CE, 深度: 3)
  LoG节点 5: ciprpus is babdpus or babqpus (规则: DI, 深度: 3)
  LoG节点 6: x is zumtpus (规则: CE, 深度: 4)
  LoG节点 7: zumtpus is zefrpus and yoxtpus (规则: CI, 深度: 4)
  LoG节点 8: zefrpus is ciprpus and qahppus (规则: MP, 深度: 4)
  LoG节点 9: ciprpus is babqpus (规则: CE, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 88
   - 初始条件数: 6
   - LoG图节点数: 10

📋 初始条件列表:
    1. x is zumtpus and kozcpus
    2. zumtpus is yoxtpus
    3. ciprpus is babqpus and wolypus
    4. wicgpus is ciprpus and qahppus
    5. zefrpus is wicgpus
    6. zumtpus is zefrpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 6 个前提节点

🔍 开始处理actual节点...

   节点 1: x is zumtpus and kozcpus
      ↻ 重复节点，计数: 2

   节点 2: zumtpus is yoxtpus
      ↻ 重复节点，计数: 2

   节点 3: ciprpus is babqpus and wolypus
      ↻ 重复节点，计数: 2

   节点 4: wicgpus is ciprpus and qahppus
      ↻ 重复节点，计数: 2

   节点 5: zefrpus is wicgpus
      ↻ 重复节点，计数: 2

   节点 6: zumtpus is zefrpus
      ↻ 重复节点，计数: 2

   节点 7: x is zumtpus and kozcpus
      ↻ 重复节点，计数: 3

   节点 8: x is zumtpus and kozcpus
      ↻ 重复节点，计数: 4

   节点 9: zumtpus is yoxtpus
      ↻ 重复节点，计数: 3

   节点 10: zumtpus is yoxtpus
      ↻ 重复节点，计数: 4

   节点 11: zumtpus is zefrpus
      ↻ 重复节点，计数: 3

   节点 12: zumtpus is zefrpus
      ↻ 重复节点，计数: 4

   节点 13: zefrpus is wicgpus
      ↻ 重复节点，计数: 3

   节点 14: zefrpus is wicgpus
      ↻ 重复节点，计数: 4

   节点 15: wicgpus is ciprpus and qahppus
      ↻ 重复节点，计数: 3

   节点 16: wicgpus is ciprpus and qahppus
      ↻ 重复节点，计数: 4

   节点 17: ciprpus is babqpus and wolypus
      ↻ 重复节点，计数: 3

   节点 18: ciprpus is babqpus and wolypus
      ↻ 重复节点，计数: 4

   节点 19: x is zumtpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is zumtpus
      ✅ 验证成功 + LoG匹配

   节点 20: zumtpus is zefrpus
      ↻ 重复节点，计数: 5

   节点 21: zefrpus is wicgpus
      ↻ 重复节点，计数: 5

   节点 22: wicgpus is ciprpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wicgpus is ciprpus and qahppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wicgpus is ciprpus and qahppus

   节点 23: ciprpus is babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: ciprpus is babqpus
      ✅ 验证成功 + LoG匹配

   节点 24: x is zumtpus
      ↻ 重复节点，计数: 2

   节点 25: zumtpus is zefrpus
      ↻ 重复节点，计数: 6

   节点 26: zefrpus is wicgpus
      ↻ 重复节点，计数: 6

   节点 27: wicgpus is ciprpus
      ↻ 重复节点，计数: 2

   节点 28: ciprpus is babqpus
      ↻ 重复节点，计数: 2

   节点 29: zumtpus is zefrpus
      ↻ 重复节点，计数: 7

   节点 30: zefrpus is wicgpus
      ↻ 重复节点，计数: 7

   节点 31: zumtpus is wicgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: zumtpus is zefrpus → zefrpus is wicgpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: zumtpus is zefrpus
  - 前提: zefrpus is wicgpus

   节点 32: wicgpus is ciprpus
      ↻ 重复节点，计数: 3

   节点 33: ciprpus is babqpus
      ↻ 重复节点，计数: 3

   节点 34: x is zumtpus
      ↻ 重复节点，计数: 3

   节点 35: zumtpus is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: zumtpus is zefrpus → zefrpus is babqpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: zumtpus is zefrpus
  - 前提: zefrpus is wicgpus
  - 前提: wicgpus is ciprpus
  - 前提: ciprpus is babqpus
  ✓ 点亮LoG节点: zefrpus is babdpus or babqpus
[子树点亮]     └─ 点亮依赖节点: zefrpus is ciprpus (深度3)
[子树点亮]     └─ 点亮依赖节点: ciprpus is babdpus or babqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: zefrpus is ciprpus and qahppus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 36: x is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zumtpus → zumtpus is babqpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is zumtpus
  - 前提: zumtpus is babqpus
  ✓ 点亮LoG节点: x is babdpus or babqpus
[子树点亮]     └─ 点亮依赖节点: x is zefrpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is zefrpus and yoxtpus (深度3)
[子树点亮]     └─ 点亮依赖节点: zumtpus is zefrpus and yoxtpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 37: zumtpus is zefrpus
      ↻ 重复节点，计数: 8

   节点 38: zefrpus is wicgpus
      ↻ 重复节点，计数: 8

   节点 39: wicgpus is ciprpus
      ↻ 重复节点，计数: 4

   节点 40: wicgpus is ciprpus
      ↻ 重复节点，计数: 5

   节点 41: ciprpus is babqpus
      ↻ 重复节点，计数: 4

   节点 42: ciprpus is babqpus
      ↻ 重复节点，计数: 5

   节点 43: zumtpus is zefrpus
      ↻ 重复节点，计数: 9

   节点 44: zefrpus is wicgpus
      ↻ 重复节点，计数: 9

   节点 45: wicgpus is ciprpus
      ↻ 重复节点，计数: 6

   节点 46: ciprpus is babqpus
      ↻ 重复节点，计数: 6

   节点 47: zumtpus is babqpus
      ↻ 重复节点，计数: 2

   节点 48: x is zumtpus
      ↻ 重复节点，计数: 4

   节点 49: x is zumtpus
      ↻ 重复节点，计数: 5

   节点 50: x is babqpus
      ↻ 重复节点，计数: 2

   节点 51: x is babqpus
      ↻ 重复节点，计数: 3

   节点 52: x is babqpus
      ↻ 重复节点，计数: 4

   节点 53: x is kozcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is zumtpus and kozcpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is zumtpus and kozcpus

   节点 54: x is babqpus
      ↻ 重复节点，计数: 5

   节点 55: x is babdpus or babqpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 56: x is babqpus
      ↻ 重复节点，计数: 6

   节点 57: ciprpus is babqpus
      ↻ 重复节点，计数: 7

   节点 58: ciprpus is babqpus
      ↻ 重复节点，计数: 8

   节点 59: wicgpus is ciprpus
      ↻ 重复节点，计数: 7

   节点 60: wicgpus is ciprpus
      ↻ 重复节点，计数: 8

   节点 61: zefrpus is wicgpus
      ↻ 重复节点，计数: 10

   节点 62: zefrpus is wicgpus
      ↻ 重复节点，计数: 11

   节点 63: zumtpus is zefrpus
      ↻ 重复节点，计数: 10

   节点 64: zumtpus is zefrpus
      ↻ 重复节点，计数: 11

   节点 65: x is zumtpus
      ↻ 重复节点，计数: 6

   节点 66: x is zumtpus
      ↻ 重复节点，计数: 7

   节点 67: x is zefrpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 68: zefrpus is wicgpus
      ↻ 重复节点，计数: 12

   节点 69: wicgpus is ciprpus
      ↻ 重复节点，计数: 9

   节点 70: ciprpus is babqpus
      ↻ 重复节点，计数: 9

   节点 71: x is babqpus
      ↻ 重复节点，计数: 7

   节点 72: x is babqpus
      ↻ 重复节点，计数: 8

   节点 73: x is babqpus
      ↻ 重复节点，计数: 9

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 73
   - 新增节点: 9
   - 更新已存在节点: 64
   - 点亮的LoG节点: 10

🎯 推理质量统计:
   - 完美推理: 9 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 10节点, 6前提, 复杂度1-6

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 15
   - 前提节点: 6
   - 推理节点: 9
   - 幻觉节点: 0
   - 点亮LoG节点: 10

✅ 推理节点详情:
   🟢 x is zumtpus (出现7次, 质量:perfect)
   🟢 wicgpus is ciprpus (出现9次, 质量:perfect)
   🟢 ciprpus is babqpus (出现9次, 质量:perfect)
   🟢 zumtpus is wicgpus (出现1次, 质量:perfect)
   🟢 zumtpus is babqpus (出现2次, 质量:perfect)
   🟢 x is babqpus (出现9次, 质量:perfect)
   🟢 x is kozcpus (出现1次, 质量:perfect)
   🟢 x is babdpus or babqpus (出现1次, 质量:perfect)
   🟢 x is zefrpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is zumtpus
   - ciprpus is babdpus or babqpus
   - zefrpus is ciprpus and qahppus
   - zefrpus is ciprpus
   - zefrpus is babdpus or babqpus
   - x is zefrpus and yoxtpus
   - ciprpus is babqpus
   - zumtpus is zefrpus and yoxtpus
   - x is babdpus or babqpus
   - x is zefrpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus or babqpus (第4层)
   节点Coverage: 10/10 = 100.00%
   前提条件Coverage: 6/6 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/9 = 0.00%
   可推导节点: 9/9
   Strict Error Rate: 0/9 = 0.00%
   严格有效节点: 9/9

   详细分析:
     完美推理: 9 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 11/50
================================================================================
记录索引: 10
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_10.json
✅ 使用缓存结果:
   - 句子数: 62
   - 提取的语句数: 70
   - 初始条件数: 10

=== Statement提取完成 ===
总句子数: 62
成功提取: 62
失败提取: 0
总statements数: 70

=== 开始清洗Statement格式 ===
原始statements数: 70
清洗后statements数: 70
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 70
标准化后节点数: 68
过滤掉的无效实体数: 2
标准化后的节点:
  1. [planning] x → babdpus (原始: x is babdpus)
  2. [planning] x → babqpus (原始: x is babqpus)
  3. [planning] x → babxpus (原始: x is babxpus)
  4. [planning] x → babgpus (原始: x is babgpus)
  5. [planning] x → babkpus (原始: x is babkpus)
  6. [planning] x → babmpus (原始: x is babmpus)
  7. [actual] nagjpus → ruqhpus and camnpus (原始: nagjpus is ruqhpus and camnpus)
  8. [actual] nagjpus → ruqhpus and camnpus (原始: nagjpus is ruqhpus and camnpus)
  9. [actual] watppus → qinspus (原始: watppus is qinspus)
  10. [actual] x → xorkpus and yenzpus (原始: x is xorkpus and yenzpus)
  11. [actual] x → xorkpus and yenzpus (原始: x is xorkpus and yenzpus)
  12. [actual] bepqpus → luwjpus (原始: bepqpus is luwjpus)
  13. [actual] qinspus → nagjpus (原始: qinspus is nagjpus)
  14. [actual] guczpus → babxpus (原始: guczpus is babxpus)
  15. [actual] ruqhpus → pifhpus and dutnpus (原始: ruqhpus is pifhpus and dutnpus)
  16. [actual] xorkpus → watppus (原始: xorkpus is watppus)
  17. [actual] luwjpus → guczpus (原始: luwjpus is guczpus)
  18. [actual] pifhpus → bepqpus (原始: pifhpus is bepqpus)
  19. [planning] x → babdpus (原始: x is babdpus)
  20. [planning] x → babqpus (原始: x is babqpus)
  21. [planning] x → babxpus (原始: x is babxpus)
  22. [actual] x → xorkpus and yenzpus (原始: x is xorkpus and yenzpus)
  23. [actual] xorkpus → watppus (原始: xorkpus is watppus)
  24. [actual] x → xorkpus (原始: x is xorkpus)
  25. [actual] xorkpus → watppus (原始: xorkpus is watppus)
  26. [actual] x → watppus (原始: x is watppus)
  27. [actual] x → xorkpus (原始: x is xorkpus)
  28. [actual] xorkpus → watppus (原始: xorkpus is watppus)
  29. [actual] x → watppus (原始: x is watppus)
  30. [actual] watppus → qinspus (原始: watppus is qinspus)
  31. [actual] xorkpus → watppus (原始: xorkpus is watppus)
  32. [actual] watppus → qinspus (原始: watppus is qinspus)
  33. [actual] xorkpus → qinspus (原始: xorkpus is qinspus)
  34. [planning] x → qinspus (原始: x is qinspus)
  35. [actual] x → xorkpus (原始: x is xorkpus)
  36. [actual] xorkpus → watppus (原始: xorkpus is watppus)
  37. [actual] x → watppus (原始: x is watppus)
  38. [actual] watppus → qinspus (原始: watppus is qinspus)
  39. [planning] x → qinspus (原始: x is qinspus)
  40. [actual] qinspus → nagjpus (原始: qinspus is nagjpus)
  41. [actual] qinspus → nagjpus (原始: qinspus is nagjpus)
  42. [actual] x → qinspus (原始: x is qinspus)
  43. [actual] x → nagjpus (原始: x is nagjpus)
  44. [actual] nagjpus → ruqhpus and camnpus (原始: nagjpus is ruqhpus and camnpus)
  45. [actual] nagjpus → ruqhpus and camnpus (原始: nagjpus is ruqhpus and camnpus)
  46. [actual] x → ruqhpus and camnpus (原始: x is ruqhpus and camnpus)
  47. [actual] ruqhpus → pifhpus and dutnpus (原始: ruqhpus is pifhpus and dutnpus)
  48. [actual] ruqhpus → pifhpus and dutnpus (原始: ruqhpus is pifhpus and dutnpus)
  49. [actual] x → ruqhpus (原始: x is ruqhpus)
  50. [actual] x → pifhpus and dutnpus (原始: x is pifhpus and dutnpus)
  51. [actual] pifhpus → bepqpus (原始: pifhpus is bepqpus)
  52. [actual] pifhpus → bepqpus (原始: pifhpus is bepqpus)
  53. [actual] x → bepqpus (原始: x is bepqpus)
  54. [actual] bepqpus → luwjpus (原始: bepqpus is luwjpus)
  55. [actual] bepqpus → luwjpus (原始: bepqpus is luwjpus)
  56. [actual] x → luwjpus (原始: x is luwjpus)
  57. [actual] luwjpus → guczpus (原始: luwjpus is guczpus)
  58. [actual] luwjpus → guczpus (原始: luwjpus is guczpus)
  59. [actual] x → guczpus (原始: x is guczpus)
  60. [actual] guczpus → babxpus (原始: guczpus is babxpus)
  61. [actual] guczpus → babxpus (原始: guczpus is babxpus)
  62. [actual] x → babxpus (原始: x is babxpus)
  63. [actual] x → babxpus (原始: x is babxpus)
  64. [planning] x → babdpus or babqpus or babxpus (原始: x is babdpus or babqpus or babxpus)
  65. [actual] x → babxpus (原始: x is babxpus)
  66. [actual] x → yenzpus (原始: x is yenzpus)
  67. [actual] x → babxpus (原始: x is babxpus)
  68. [actual] x → babxpus (原始: x is babxpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 13
[后处理] 加载LoG图，包含 13 个节点
  LoG节点 0: x is babdpus or babqpus or babxpus (规则: MP, 深度: 1)
  LoG节点 1: x is ruqhpus (规则: MP, 深度: 2)
  LoG节点 2: ruqhpus is babdpus or babqpus or babxpus (规则: MP, 深度: 2)
  LoG节点 3: x is qinspus (规则: MP, 深度: 3)
  LoG节点 4: qinspus is ruqhpus (规则: CE, 深度: 3)
  LoG节点 5: ruqhpus is luwjpus (规则: MP, 深度: 3)
  LoG节点 6: luwjpus is babdpus or babqpus or babxpus (规则: DI, 深度: 3)
  LoG节点 7: x is xorkpus (规则: CE, 深度: 4)
  LoG节点 8: xorkpus is qinspus (规则: MP, 深度: 4)
  LoG节点 9: qinspus is ruqhpus and camnpus (规则: MP, 深度: 4)
  LoG节点 10: ruqhpus is pifhpus (规则: CE, 深度: 4)
  LoG节点 11: pifhpus is luwjpus (规则: MP, 深度: 4)
  LoG节点 12: luwjpus is babxpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 68
   - 初始条件数: 10
   - LoG图节点数: 13

📋 初始条件列表:
    1. nagjpus is ruqhpus and camnpus
    2. watppus is qinspus
    3. x is xorkpus and yenzpus
    4. bepqpus is luwjpus
    5. qinspus is nagjpus
    6. guczpus is babxpus
    7. ruqhpus is pifhpus and dutnpus
    8. xorkpus is watppus
    9. luwjpus is guczpus
   10. pifhpus is bepqpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 10 个前提节点

🔍 开始处理actual节点...

   节点 1: nagjpus is ruqhpus and camnpus
      ↻ 重复节点，计数: 2

   节点 2: nagjpus is ruqhpus and camnpus
      ↻ 重复节点，计数: 3

   节点 3: watppus is qinspus
      ↻ 重复节点，计数: 2

   节点 4: x is xorkpus and yenzpus
      ↻ 重复节点，计数: 2

   节点 5: x is xorkpus and yenzpus
      ↻ 重复节点，计数: 3

   节点 6: bepqpus is luwjpus
      ↻ 重复节点，计数: 2

   节点 7: qinspus is nagjpus
      ↻ 重复节点，计数: 2

   节点 8: guczpus is babxpus
      ↻ 重复节点，计数: 2

   节点 9: ruqhpus is pifhpus and dutnpus
      ↻ 重复节点，计数: 2

   节点 10: xorkpus is watppus
      ↻ 重复节点，计数: 2

   节点 11: luwjpus is guczpus
      ↻ 重复节点，计数: 2

   节点 12: pifhpus is bepqpus
      ↻ 重复节点，计数: 2

   节点 13: x is xorkpus and yenzpus
      ↻ 重复节点，计数: 4

   节点 14: xorkpus is watppus
      ↻ 重复节点，计数: 3

   节点 15: x is xorkpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is xorkpus
      ✅ 验证成功 + LoG匹配

   节点 16: xorkpus is watppus
      ↻ 重复节点，计数: 4

   节点 17: x is watppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xorkpus → xorkpus is watppus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is xorkpus
  - 前提: xorkpus is watppus

   节点 18: x is xorkpus
      ↻ 重复节点，计数: 2

   节点 19: xorkpus is watppus
      ↻ 重复节点，计数: 5

   节点 20: x is watppus
      ↻ 重复节点，计数: 2

   节点 21: watppus is qinspus
      ↻ 重复节点，计数: 3

   节点 22: xorkpus is watppus
      ↻ 重复节点，计数: 6

   节点 23: watppus is qinspus
      ↻ 重复节点，计数: 4

   节点 24: xorkpus is qinspus
      🔍 验证新节点...
[后处理] 点亮LoG节点: xorkpus is qinspus
      ✅ 验证成功 + LoG匹配

   节点 25: x is xorkpus
      ↻ 重复节点，计数: 3

   节点 26: xorkpus is watppus
      ↻ 重复节点，计数: 7

   节点 27: x is watppus
      ↻ 重复节点，计数: 3

   节点 28: watppus is qinspus
      ↻ 重复节点，计数: 5

   节点 29: qinspus is nagjpus
      ↻ 重复节点，计数: 3

   节点 30: qinspus is nagjpus
      ↻ 重复节点，计数: 4

   节点 31: x is qinspus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is qinspus
      ✅ 验证成功 + LoG匹配

   节点 32: x is nagjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xorkpus → xorkpus is nagjpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is xorkpus
  - 前提: xorkpus is watppus
  - 前提: watppus is qinspus
  - 前提: qinspus is nagjpus

   节点 33: nagjpus is ruqhpus and camnpus
      ↻ 重复节点，计数: 4

   节点 34: nagjpus is ruqhpus and camnpus
      ↻ 重复节点，计数: 5

   节点 35: x is ruqhpus and camnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xorkpus → xorkpus is ruqhpus and camnpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is xorkpus
  - 前提: xorkpus is watppus
  - 前提: watppus is qinspus
  - 前提: qinspus is nagjpus
  - 前提: nagjpus is ruqhpus and camnpus
  ✓ 点亮LoG节点: x is ruqhpus
[子树点亮]     └─ 点亮依赖节点: qinspus is ruqhpus (深度3)
[子树点亮]     └─ 点亮依赖节点: qinspus is ruqhpus and camnpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 36: ruqhpus is pifhpus and dutnpus
      ↻ 重复节点，计数: 3

   节点 37: ruqhpus is pifhpus and dutnpus
      ↻ 重复节点，计数: 4

   节点 38: x is ruqhpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 39: x is pifhpus and dutnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xorkpus → xorkpus is pifhpus and dutnpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is xorkpus
  - 前提: xorkpus is watppus
  - 前提: watppus is qinspus
  - 前提: qinspus is nagjpus
  - 前提: nagjpus is ruqhpus and camnpus
  - 前提: ruqhpus is pifhpus and dutnpus
  ✓ 点亮LoG节点: ruqhpus is pifhpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 40: pifhpus is bepqpus
      ↻ 重复节点，计数: 3

   节点 41: pifhpus is bepqpus
      ↻ 重复节点，计数: 4

   节点 42: x is bepqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xorkpus → xorkpus is bepqpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is xorkpus
  - 前提: xorkpus is watppus
  - 前提: watppus is qinspus
  - 前提: qinspus is nagjpus
  - 前提: nagjpus is ruqhpus and camnpus
  - 前提: ruqhpus is pifhpus and dutnpus
  - 前提: pifhpus is bepqpus

   节点 43: bepqpus is luwjpus
      ↻ 重复节点，计数: 3

   节点 44: bepqpus is luwjpus
      ↻ 重复节点，计数: 4

   节点 45: x is luwjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xorkpus → xorkpus is luwjpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is xorkpus
  - 前提: xorkpus is watppus
  - 前提: watppus is qinspus
  - 前提: qinspus is nagjpus
  - 前提: nagjpus is ruqhpus and camnpus
  - 前提: ruqhpus is pifhpus and dutnpus
  - 前提: pifhpus is bepqpus
  - 前提: bepqpus is luwjpus
  ✓ 点亮LoG节点: ruqhpus is luwjpus
[子树点亮]     └─ 点亮依赖节点: pifhpus is luwjpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 46: luwjpus is guczpus
      ↻ 重复节点，计数: 3

   节点 47: luwjpus is guczpus
      ↻ 重复节点，计数: 4

   节点 48: x is guczpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xorkpus → xorkpus is guczpus
[后处理] 基于推理轨迹点亮节点，使用了 9 个前提条件:
  - 前提: x is xorkpus
  - 前提: xorkpus is watppus
  - 前提: watppus is qinspus
  - 前提: qinspus is nagjpus
  - 前提: nagjpus is ruqhpus and camnpus
  - 前提: ruqhpus is pifhpus and dutnpus
  - 前提: pifhpus is bepqpus
  - 前提: bepqpus is luwjpus
  - 前提: luwjpus is guczpus

   节点 49: guczpus is babxpus
      ↻ 重复节点，计数: 3

   节点 50: guczpus is babxpus
      ↻ 重复节点，计数: 4

   节点 51: x is babxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xorkpus → xorkpus is babxpus
[后处理] 基于推理轨迹点亮节点，使用了 10 个前提条件:
  - 前提: x is xorkpus
  - 前提: xorkpus is watppus
  - 前提: watppus is qinspus
  - 前提: qinspus is nagjpus
  - 前提: nagjpus is ruqhpus and camnpus
  - 前提: ruqhpus is pifhpus and dutnpus
  - 前提: pifhpus is bepqpus
  - 前提: bepqpus is luwjpus
  - 前提: luwjpus is guczpus
  - 前提: guczpus is babxpus
  ✓ 点亮LoG节点: x is babdpus or babqpus or babxpus
[子树点亮]     └─ 点亮依赖节点: ruqhpus is babdpus or babqpus or babxpus (深度2)
[子树点亮]     └─ 点亮依赖节点: luwjpus is babdpus or babqpus or babxpus (深度3)
[子树点亮]     └─ 点亮依赖节点: luwjpus is babxpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 52: x is babxpus
      ↻ 重复节点，计数: 2

   节点 53: x is babxpus
      ↻ 重复节点，计数: 3

   节点 54: x is yenzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is xorkpus and yenzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is xorkpus and yenzpus

   节点 55: x is babxpus
      ↻ 重复节点，计数: 4

   节点 56: x is babxpus
      ↻ 重复节点，计数: 5

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 56
   - 新增节点: 13
   - 更新已存在节点: 43
   - 点亮的LoG节点: 13

🎯 推理质量统计:
   - 完美推理: 13 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 13节点, 10前提, 复杂度1-10

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 23
   - 前提节点: 10
   - 推理节点: 13
   - 幻觉节点: 0
   - 点亮LoG节点: 13

✅ 推理节点详情:
   🟢 x is xorkpus (出现3次, 质量:perfect)
   🟢 x is watppus (出现3次, 质量:perfect)
   🟢 xorkpus is qinspus (出现1次, 质量:perfect)
   🟢 x is qinspus (出现1次, 质量:perfect)
   🟢 x is nagjpus (出现1次, 质量:perfect)
   🟢 x is ruqhpus and camnpus (出现1次, 质量:perfect)
   🟢 x is ruqhpus (出现1次, 质量:perfect)
   🟢 x is pifhpus and dutnpus (出现1次, 质量:perfect)
   🟢 x is bepqpus (出现1次, 质量:perfect)
   🟢 x is luwjpus (出现1次, 质量:perfect)
   🟢 x is guczpus (出现1次, 质量:perfect)
   🟢 x is babxpus (出现5次, 质量:perfect)
   🟢 x is yenzpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is xorkpus
   - xorkpus is qinspus
   - qinspus is ruqhpus and camnpus
   - luwjpus is babdpus or babqpus or babxpus
   - pifhpus is luwjpus
   - ruqhpus is luwjpus
   - ruqhpus is babdpus or babqpus or babxpus
   - x is babdpus or babqpus or babxpus
   - x is ruqhpus
   - luwjpus is babxpus
   - ruqhpus is pifhpus
   - x is qinspus
   - qinspus is ruqhpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus or babqpus or babxpus (第4层)
   节点Coverage: 13/13 = 100.00%
   前提条件Coverage: 10/10 = 100.00%
   各推理层点亮比例:
     第1层: 6/6 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/13 = 0.00%
   可推导节点: 13/13
   Strict Error Rate: 0/13 = 0.00%
   严格有效节点: 13/13

   详细分析:
     完美推理: 13 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 12/50
================================================================================
记录索引: 11
问题状态: incorrect
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_11.json
✅ 使用缓存结果:
   - 句子数: 120
   - 提取的语句数: 182
   - 初始条件数: 2

=== Statement提取完成 ===
总句子数: 120
成功提取: 120
失败提取: 0
总statements数: 182

=== 开始清洗Statement格式 ===
原始statements数: 182
清洗后statements数: 119
过滤掉的statements数: 63
清洗后的statements:
  1. [actual] pestpus is babxpus and fomdpus and hecjpus
  2. [actual] pestpus is babxpus and fomdpus and hecjpus
  3. [actual] x is pestpus and fucdpus
  4. [actual] x is pestpus and fucdpus
  5. [planning] x is babdpus
  6. [planning] x is babqpus
  7. [planning] x is babxpus
  8. [actual] x is pestpus
  9. [actual] pestpus is babxpus
  10. [actual] x is pestpus
  11. [actual] pestpus is babxpus
  12. [planning] x is babxpus
  13. [actual] x is babxpus through pestpus
  14. [actual] x is babxpus
  15. [planning] x is babxpus
  16. [actual] x is pestpus
  17. [actual] pestpus is babxpus
  18. [actual] x is babxpus
  19. [actual] x is babxpus
  20. [actual] x is babdpus or babqpus or babxpus
  21. [actual] x is fucdpus
  22. [actual] x is a member of pestpus
  23. [actual] pestpus is a member of babxpus
  24. [actual] pestpus is a subset of babxpus
  25. [planning] x is pestpus
  26. [planning] pestpus is babxpus
  27. [actual] pestpus is babxpus
  28. [actual] x is pestpus
  29. [planning] pestpus is a member of babxpus
  30. [planning] x is a member of pestpus
  31. [planning] x is also a member of babxpus
  32. [actual] x is an element of A
  33. [planning] x is an element of B
  34. [actual] pestpus is a category itself
  35. [actual] x is pestpus
  36. [actual] pestpus is babxpus
  37. [planning] x is babxpus
  38. [actual] babxpus is a category of categories
  39. [actual] pestpus is a category
  40. [actual] x is an item in pestpus
  41. [planning] x is an item in pestpus
  42. [planning] x is babdpus
  43. [planning] x is babqpus
  44. [planning] x is babxpus
  45. [planning] babdpus is babxpus
  46. [planning] babqpus is babxpus
  47. [actual] pestpus is babxpus
  48. [actual] x is pestpus
  49. [planning] babxpus is a category of items
  50. [planning] pestpus is babxpus
  51. [planning] x is babxpus
  52. [planning] x is babxpus
  53. [actual] pestpus is babxpus and fomdpus and hecjpus
  54. [actual] x is pestpus and fucdpus
  55. [actual] x is a member of pestpus and fucdpus
  56. [planning] pestpus is babxpus
  57. [planning] x is pestpus
  58. [planning] x is babxpus
  59. [actual] babxpus is animals
  60. [actual] pestpus is dogs
  61. [actual] x is Fido
  62. [planning] x is D
  63. [actual] x is A
  64. [actual] x is B
  65. [planning] x is A
  66. [planning] x is B
  67. [actual] pestpus is babxpus
  68. [actual] pestpus is babxpus and fomdpus and hecjpus
  69. [actual] pestpus is a subset of babxpus
  70. [planning] pestpus is babxpus
  71. [actual] x is a member of pestpus
  72. [planning] x is a member of babxpus
  73. [planning] pestpus is babxpus
  74. [planning] pestpus is an element of babxpus
  75. [planning] x is an element of pestpus
  76. [planning] x is babdpus
  77. [planning] x is babqpus
  78. [planning] x is babxpus
  79. [planning] pestpus is babxpus
  80. [planning] x is babxpus
  81. [planning] pestpus is babxpus
  82. [actual] x is pestpus
  83. [actual] x is category pestpus
  84. [actual] x is a member of pestpus
  85. [actual] pestpus is babxpus
  86. [actual] x is pestpus
  87. [actual] pestpus is babxpus
  88. [planning] x is babxpus
  89. [planning] x is babxpus
  90. [actual] pestpus is fomdpus and hecjpus
  91. [actual] x is fucdpus
  92. [planning] x is babdpus
  93. [planning] x is babqpus
  94. [planning] x is babxpus
  95. [planning] x is A
  96. [actual] x is pestpus
  97. [actual] pestpus is babxpus
  98. [planning] x is pestpus and pestpus is babxpus
  99. [actual] pestpus is a subset of babxpus
  100. [actual] pestpus is babxpus
  101. [planning] pestpus is babxpus
  102. [actual] pestpus is fomdpus and hecjpus
  103. [planning] pestpus is subset of babxpus
  104. [planning] pestpus is subset of fomdpus
  105. [planning] pestpus is subset of hecjpus
  106. [actual] x is pestpus
  107. [actual] pestpus is subset of babxpus
  108. [actual] x is babxpus
  109. [actual] x is babxpus
  110. [actual] pestpus is babxpus
  111. [planning] pestpus is a category that is classified under babxpus
  112. [planning] pestpus is a category
  113. [actual] x is pestpus and fucdpus
  114. [actual] pestpus is babxpus
  115. [actual] x is pestpus
  116. [actual] pestpus is babxpus
  117. [planning] x is babxpus
  118. [planning] x is babxpus
  119. [planning] x is babdpus or babqpus or babxpus

=== 开始标准化和解析节点 ===
清洗后statements数: 119
标准化后节点数: 79
过滤掉的无效实体数: 40
标准化后的节点:
  1. [actual] pestpus → babxpus and fomdpus and hecjpus (原始: pestpus is babxpus and fomdpus and hecjpus)
  2. [actual] pestpus → babxpus and fomdpus and hecjpus (原始: pestpus is babxpus and fomdpus and hecjpus)
  3. [actual] x → pestpus and fucdpus (原始: x is pestpus and fucdpus)
  4. [actual] x → pestpus and fucdpus (原始: x is pestpus and fucdpus)
  5. [planning] x → babdpus (原始: x is babdpus)
  6. [planning] x → babqpus (原始: x is babqpus)
  7. [planning] x → babxpus (原始: x is babxpus)
  8. [actual] x → pestpus (原始: x is pestpus)
  9. [actual] pestpus → babxpus (原始: pestpus is babxpus)
  10. [actual] x → pestpus (原始: x is pestpus)
  11. [actual] pestpus → babxpus (原始: pestpus is babxpus)
  12. [planning] x → babxpus (原始: x is babxpus)
  13. [actual] x → babxpus (原始: x is babxpus)
  14. [planning] x → babxpus (原始: x is babxpus)
  15. [actual] x → pestpus (原始: x is pestpus)
  16. [actual] pestpus → babxpus (原始: pestpus is babxpus)
  17. [actual] x → babxpus (原始: x is babxpus)
  18. [actual] x → babxpus (原始: x is babxpus)
  19. [actual] x → babdpus or babqpus or babxpus (原始: x is babdpus or babqpus or babxpus)
  20. [actual] x → fucdpus (原始: x is fucdpus)
  21. [planning] x → pestpus (原始: x is pestpus)
  22. [planning] pestpus → babxpus (原始: pestpus is babxpus)
  23. [actual] pestpus → babxpus (原始: pestpus is babxpus)
  24. [actual] x → pestpus (原始: x is pestpus)
  25. [actual] x → pestpus (原始: x is pestpus)
  26. [actual] pestpus → babxpus (原始: pestpus is babxpus)
  27. [planning] x → babxpus (原始: x is babxpus)
  28. [planning] x → babdpus (原始: x is babdpus)
  29. [planning] x → babqpus (原始: x is babqpus)
  30. [planning] x → babxpus (原始: x is babxpus)
  31. [planning] babdpus → babxpus (原始: babdpus is babxpus)
  32. [planning] babqpus → babxpus (原始: babqpus is babxpus)
  33. [actual] pestpus → babxpus (原始: pestpus is babxpus)
  34. [actual] x → pestpus (原始: x is pestpus)
  35. [planning] pestpus → babxpus (原始: pestpus is babxpus)
  36. [planning] x → babxpus (原始: x is babxpus)
  37. [planning] x → babxpus (原始: x is babxpus)
  38. [actual] pestpus → babxpus and fomdpus and hecjpus (原始: pestpus is babxpus and fomdpus and hecjpus)
  39. [actual] x → pestpus and fucdpus (原始: x is pestpus and fucdpus)
  40. [planning] pestpus → babxpus (原始: pestpus is babxpus)
  41. [planning] x → pestpus (原始: x is pestpus)
  42. [planning] x → babxpus (原始: x is babxpus)
  43. [actual] pestpus → babxpus (原始: pestpus is babxpus)
  44. [actual] pestpus → babxpus and fomdpus and hecjpus (原始: pestpus is babxpus and fomdpus and hecjpus)
  45. [planning] pestpus → babxpus (原始: pestpus is babxpus)
  46. [planning] pestpus → babxpus (原始: pestpus is babxpus)
  47. [planning] x → babdpus (原始: x is babdpus)
  48. [planning] x → babqpus (原始: x is babqpus)
  49. [planning] x → babxpus (原始: x is babxpus)
  50. [planning] pestpus → babxpus (原始: pestpus is babxpus)
  51. [planning] x → babxpus (原始: x is babxpus)
  52. [planning] pestpus → babxpus (原始: pestpus is babxpus)
  53. [actual] x → pestpus (原始: x is pestpus)
  54. [actual] pestpus → babxpus (原始: pestpus is babxpus)
  55. [actual] x → pestpus (原始: x is pestpus)
  56. [actual] pestpus → babxpus (原始: pestpus is babxpus)
  57. [planning] x → babxpus (原始: x is babxpus)
  58. [planning] x → babxpus (原始: x is babxpus)
  59. [actual] pestpus → fomdpus and hecjpus (原始: pestpus is fomdpus and hecjpus)
  60. [actual] x → fucdpus (原始: x is fucdpus)
  61. [planning] x → babdpus (原始: x is babdpus)
  62. [planning] x → babqpus (原始: x is babqpus)
  63. [planning] x → babxpus (原始: x is babxpus)
  64. [actual] x → pestpus (原始: x is pestpus)
  65. [actual] pestpus → babxpus (原始: pestpus is babxpus)
  66. [actual] pestpus → babxpus (原始: pestpus is babxpus)
  67. [planning] pestpus → babxpus (原始: pestpus is babxpus)
  68. [actual] pestpus → fomdpus and hecjpus (原始: pestpus is fomdpus and hecjpus)
  69. [actual] x → pestpus (原始: x is pestpus)
  70. [actual] x → babxpus (原始: x is babxpus)
  71. [actual] x → babxpus (原始: x is babxpus)
  72. [actual] pestpus → babxpus (原始: pestpus is babxpus)
  73. [actual] x → pestpus and fucdpus (原始: x is pestpus and fucdpus)
  74. [actual] pestpus → babxpus (原始: pestpus is babxpus)
  75. [actual] x → pestpus (原始: x is pestpus)
  76. [actual] pestpus → babxpus (原始: pestpus is babxpus)
  77. [planning] x → babxpus (原始: x is babxpus)
  78. [planning] x → babxpus (原始: x is babxpus)
  79. [planning] x → babdpus or babqpus or babxpus (原始: x is babdpus or babqpus or babxpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 5
[后处理] 加载LoG图，包含 5 个节点
  LoG节点 0: x is babdpus or babqpus or babxpus (规则: DI, 深度: 1)
  LoG节点 1: x is babxpus (规则: CE, 深度: 2)
  LoG节点 2: x is babxpus and fomdpus (规则: MP, 深度: 3)
  LoG节点 3: x is pestpus (规则: CE, 深度: 4)
  LoG节点 4: pestpus is babxpus and fomdpus (规则: CE, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 79
   - 初始条件数: 2
   - LoG图节点数: 5

📋 初始条件列表:
    1. pestpus is babxpus and fomdpus and hecjpus
    2. x is pestpus and fucdpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 2 个前提节点

🔍 开始处理actual节点...

   节点 1: pestpus is babxpus and fomdpus and hecjpus
      ↻ 重复节点，计数: 2

   节点 2: pestpus is babxpus and fomdpus and hecjpus
      ↻ 重复节点，计数: 3

   节点 3: x is pestpus and fucdpus
      ↻ 重复节点，计数: 2

   节点 4: x is pestpus and fucdpus
      ↻ 重复节点，计数: 3

   节点 5: x is pestpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is pestpus
      ✅ 验证成功 + LoG匹配

   节点 6: pestpus is babxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: pestpus is babxpus and fomdpus and hecjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: pestpus is babxpus and fomdpus and hecjpus
  ✓ 点亮LoG节点: pestpus is babxpus and fomdpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 7: x is pestpus
      ↻ 重复节点，计数: 2

   节点 8: pestpus is babxpus
      ↻ 重复节点，计数: 2

   节点 9: x is babxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babxpus
[子树点亮]     └─ 点亮依赖节点: x is babxpus and fomdpus (深度3)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 10: x is pestpus
      ↻ 重复节点，计数: 3

   节点 11: pestpus is babxpus
      ↻ 重复节点，计数: 3

   节点 12: x is babxpus
      ↻ 重复节点，计数: 2

   节点 13: x is babxpus
      ↻ 重复节点，计数: 3

   节点 14: x is babdpus or babqpus or babxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus or babqpus or babxpus
      ✅ 验证成功 + LoG匹配

   节点 15: x is fucdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is pestpus and fucdpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is pestpus and fucdpus

   节点 16: pestpus is babxpus
      ↻ 重复节点，计数: 4

   节点 17: x is pestpus
      ↻ 重复节点，计数: 4

   节点 18: x is pestpus
      ↻ 重复节点，计数: 5

   节点 19: pestpus is babxpus
      ↻ 重复节点，计数: 5

   节点 20: pestpus is babxpus
      ↻ 重复节点，计数: 6

   节点 21: x is pestpus
      ↻ 重复节点，计数: 6

   节点 22: pestpus is babxpus and fomdpus and hecjpus
      ↻ 重复节点，计数: 4

   节点 23: x is pestpus and fucdpus
      ↻ 重复节点，计数: 4

   节点 24: pestpus is babxpus
      ↻ 重复节点，计数: 7

   节点 25: pestpus is babxpus and fomdpus and hecjpus
      ↻ 重复节点，计数: 5

   节点 26: x is pestpus
      ↻ 重复节点，计数: 7

   节点 27: pestpus is babxpus
      ↻ 重复节点，计数: 8

   节点 28: x is pestpus
      ↻ 重复节点，计数: 8

   节点 29: pestpus is babxpus
      ↻ 重复节点，计数: 9

   节点 30: pestpus is fomdpus and hecjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: pestpus is fomdpus → pestpus is hecjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: pestpus is babxpus and fomdpus and hecjpus

   节点 31: x is fucdpus
      ↻ 重复节点，计数: 2

   节点 32: x is pestpus
      ↻ 重复节点，计数: 9

   节点 33: pestpus is babxpus
      ↻ 重复节点，计数: 10

   节点 34: pestpus is babxpus
      ↻ 重复节点，计数: 11

   节点 35: pestpus is fomdpus and hecjpus
      ↻ 重复节点，计数: 2

   节点 36: x is pestpus
      ↻ 重复节点，计数: 10

   节点 37: x is babxpus
      ↻ 重复节点，计数: 4

   节点 38: x is babxpus
      ↻ 重复节点，计数: 5

   节点 39: pestpus is babxpus
      ↻ 重复节点，计数: 12

   节点 40: x is pestpus and fucdpus
      ↻ 重复节点，计数: 5

   节点 41: pestpus is babxpus
      ↻ 重复节点，计数: 13

   节点 42: x is pestpus
      ↻ 重复节点，计数: 11

   节点 43: pestpus is babxpus
      ↻ 重复节点，计数: 14

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 43
   - 新增节点: 6
   - 更新已存在节点: 37
   - 点亮的LoG节点: 5

🎯 推理质量统计:
   - 完美推理: 6 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 5节点, 2前提, 复杂度1-2

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 8
   - 前提节点: 2
   - 推理节点: 6
   - 幻觉节点: 0
   - 点亮LoG节点: 5

✅ 推理节点详情:
   🟢 x is pestpus (出现11次, 质量:perfect)
   🟢 pestpus is babxpus (出现14次, 质量:perfect)
   🟢 x is babxpus (出现5次, 质量:perfect)
   🟢 x is babdpus or babqpus or babxpus (出现1次, 质量:perfect)
   🟢 x is fucdpus (出现2次, 质量:perfect)
   🟢 pestpus is fomdpus and hecjpus (出现2次, 质量:perfect)

🔥 点亮的LoG节点:
   - pestpus is babxpus and fomdpus
   - x is babxpus and fomdpus
   - x is pestpus
   - x is babdpus or babqpus or babxpus
   - x is babxpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus or babqpus or babxpus (第4层)
   节点Coverage: 5/5 = 100.00%
   前提条件Coverage: 2/2 = 100.00%
   各推理层点亮比例:
     第1层: 2/2 = 100.00%
     第2层: 1/1 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/6 = 0.00%
   可推导节点: 6/6
   Strict Error Rate: 0/6 = 0.00%
   严格有效节点: 6/6

   详细分析:
     完美推理: 6 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 13/50
================================================================================
记录索引: 12
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_12.json
✅ 使用缓存结果:
   - 句子数: 116
   - 提取的语句数: 140
   - 初始条件数: 10

=== Statement提取完成 ===
总句子数: 116
成功提取: 116
失败提取: 0
总statements数: 140

=== 开始清洗Statement格式 ===
原始statements数: 140
清洗后statements数: 112
过滤掉的statements数: 28
清洗后的statements:
  1. [actual] tuplpus is tekdpus
  2. [actual] pedppus is lixxpus
  3. [actual] zagspus is mawhpus
  4. [actual] lesdpus is furgpus
  5. [actual] x is lesdpus and sutmpus
  6. [actual] x is lesdpus and sutmpus
  7. [actual] zagspus is babdpus
  8. [actual] furgpus is tuplpus
  9. [actual] ticxpus is zagspus and komcpus
  10. [actual] ticxpus is zagspus and komcpus
  11. [actual] tekdpus is pedppus
  12. [actual] lixxpus is ticxpus
  13. [planning] x is babdpus
  14. [planning] x is babdpus
  15. [actual] x is lesdpus and sutmpus
  16. [actual] x is lesdpus
  17. [actual] lesdpus is furgpus
  18. [actual] x is lesdpus
  19. [actual] lesdpus is furgpus
  20. [actual] x is furgpus
  21. [planning] x is furgpus
  22. [actual] lesdpus is furgpus
  23. [actual] lesdpus is a subset of furgpus or a member
  24. [actual] tuplpus is tekdpus
  25. [actual] tekdpus is pedppus
  26. [planning] tuplpus is pedppus
  27. [actual] pedppus is lixxpus
  28. [actual] lixxpus is ticxpus
  29. [planning] pedppus is ticxpus
  30. [actual] ticxpus is zagspus and komcpus
  31. [planning] pedppus is zagspus
  32. [actual] furgpus is tuplpus
  33. [actual] tuplpus is tekdpus
  34. [planning] furgpus is tekdpus
  35. [actual] tekdpus is pedppus
  36. [planning] furgpus is pedppus
  37. [planning] x is babdpus
  38. [actual] babdpus is mentioned in statement 6: zagspus is babdpus
  39. [actual] zagspus is babdpus
  40. [planning] x is zagspus
  41. [planning] x is something that is zagspus
  42. [planning] x is babdpus
  43. [actual] x is lesdpus
  44. [actual] lesdpus is furgpus
  45. [actual] furgpus is tuplpus
  46. [actual] tuplpus is tekdpus
  47. [actual] tekdpus is pedppus
  48. [actual] pedppus is lixxpus
  49. [actual] lixxpus is ticxpus
  50. [actual] ticxpus is zagspus
  51. [actual] ticxpus is zagspus and komcpus
  52. [actual] zagspus is babdpus
  53. [actual] x is lesdpus
  54. [actual] lesdpus is furgpus
  55. [actual] x is furgpus
  56. [planning] x is furgpus
  57. [planning] lesdpus is furgpus
  58. [planning] x is lesdpus
  59. [planning] x is furgpus
  60. [planning] lesdpus is a member of furgpus
  61. [planning] x is a member of lesdpus
  62. [planning] x is a member of furgpus
  63. [planning] x is a member of furgpus unless lesdpus is a subset
  64. [planning] x is A
  65. [planning] x is B
  66. [actual] ticxpus is zagspus
  67. [actual] lixxpus is ticxpus
  68. [planning] lixxpus is zagspus
  69. [actual] pedppus is lixxpus
  70. [planning] pedppus is zagspus
  71. [actual] tekdpus is pedppus
  72. [planning] tekdpus is zagspus
  73. [actual] x is lesdpus
  74. [actual] lesdpus is furgpus
  75. [planning] x is furgpus
  76. [actual] lesdpus is furgpus
  77. [actual] x is lesdpus
  78. [actual] x is furgpus
  79. [planning] x is tuplpus
  80. [actual] x is lesdpus
  81. [actual] lesdpus is furgpus
  82. [planning] x is furgpus
  83. [actual] furgpus is tuplpus
  84. [planning] x is tuplpus
  85. [actual] tuplpus is tekdpus
  86. [planning] x is tekdpus
  87. [actual] tekdpus is pedppus
  88. [planning] x is pedppus
  89. [actual] pedppus is lixxpus
  90. [planning] x is lixxpus
  91. [actual] lixxpus is ticxpus
  92. [planning] x is ticxpus
  93. [actual] ticxpus is zagspus
  94. [actual] x is zagspus
  95. [planning] x is zagspus
  96. [actual] ticxpus is a category
  97. [actual] x is ticxpus
  98. [actual] x is ticxpus
  99. [actual] ticxpus is zagspus
  100. [planning] x is zagspus
  101. [actual] ticxpus is zagspus
  102. [planning] x is ticxpus
  103. [planning] x is zagspus
  104. [actual] x is zagspus
  105. [actual] zagspus is babdpus
  106. [planning] x is babdpus
  107. [actual] x is babdpus
  108. [actual] x is sutmpus
  109. [actual] zagspus is mawhpus
  110. [planning] x is babdpus
  111. [actual] ticxpus is komcpus
  112. [actual] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 112
标准化后节点数: 102
过滤掉的无效实体数: 10
标准化后的节点:
  1. [actual] tuplpus → tekdpus (原始: tuplpus is tekdpus)
  2. [actual] pedppus → lixxpus (原始: pedppus is lixxpus)
  3. [actual] zagspus → mawhpus (原始: zagspus is mawhpus)
  4. [actual] lesdpus → furgpus (原始: lesdpus is furgpus)
  5. [actual] x → lesdpus and sutmpus (原始: x is lesdpus and sutmpus)
  6. [actual] x → lesdpus and sutmpus (原始: x is lesdpus and sutmpus)
  7. [actual] zagspus → babdpus (原始: zagspus is babdpus)
  8. [actual] furgpus → tuplpus (原始: furgpus is tuplpus)
  9. [actual] ticxpus → zagspus and komcpus (原始: ticxpus is zagspus and komcpus)
  10. [actual] ticxpus → zagspus and komcpus (原始: ticxpus is zagspus and komcpus)
  11. [actual] tekdpus → pedppus (原始: tekdpus is pedppus)
  12. [actual] lixxpus → ticxpus (原始: lixxpus is ticxpus)
  13. [planning] x → babdpus (原始: x is babdpus)
  14. [planning] x → babdpus (原始: x is babdpus)
  15. [actual] x → lesdpus and sutmpus (原始: x is lesdpus and sutmpus)
  16. [actual] x → lesdpus (原始: x is lesdpus)
  17. [actual] lesdpus → furgpus (原始: lesdpus is furgpus)
  18. [actual] x → lesdpus (原始: x is lesdpus)
  19. [actual] lesdpus → furgpus (原始: lesdpus is furgpus)
  20. [actual] x → furgpus (原始: x is furgpus)
  21. [planning] x → furgpus (原始: x is furgpus)
  22. [actual] lesdpus → furgpus (原始: lesdpus is furgpus)
  23. [actual] tuplpus → tekdpus (原始: tuplpus is tekdpus)
  24. [actual] tekdpus → pedppus (原始: tekdpus is pedppus)
  25. [planning] tuplpus → pedppus (原始: tuplpus is pedppus)
  26. [actual] pedppus → lixxpus (原始: pedppus is lixxpus)
  27. [actual] lixxpus → ticxpus (原始: lixxpus is ticxpus)
  28. [planning] pedppus → ticxpus (原始: pedppus is ticxpus)
  29. [actual] ticxpus → zagspus and komcpus (原始: ticxpus is zagspus and komcpus)
  30. [planning] pedppus → zagspus (原始: pedppus is zagspus)
  31. [actual] furgpus → tuplpus (原始: furgpus is tuplpus)
  32. [actual] tuplpus → tekdpus (原始: tuplpus is tekdpus)
  33. [planning] furgpus → tekdpus (原始: furgpus is tekdpus)
  34. [actual] tekdpus → pedppus (原始: tekdpus is pedppus)
  35. [planning] furgpus → pedppus (原始: furgpus is pedppus)
  36. [planning] x → babdpus (原始: x is babdpus)
  37. [actual] zagspus → babdpus (原始: zagspus is babdpus)
  38. [planning] x → zagspus (原始: x is zagspus)
  39. [planning] x → babdpus (原始: x is babdpus)
  40. [actual] x → lesdpus (原始: x is lesdpus)
  41. [actual] lesdpus → furgpus (原始: lesdpus is furgpus)
  42. [actual] furgpus → tuplpus (原始: furgpus is tuplpus)
  43. [actual] tuplpus → tekdpus (原始: tuplpus is tekdpus)
  44. [actual] tekdpus → pedppus (原始: tekdpus is pedppus)
  45. [actual] pedppus → lixxpus (原始: pedppus is lixxpus)
  46. [actual] lixxpus → ticxpus (原始: lixxpus is ticxpus)
  47. [actual] ticxpus → zagspus (原始: ticxpus is zagspus)
  48. [actual] ticxpus → zagspus and komcpus (原始: ticxpus is zagspus and komcpus)
  49. [actual] zagspus → babdpus (原始: zagspus is babdpus)
  50. [actual] x → lesdpus (原始: x is lesdpus)
  51. [actual] lesdpus → furgpus (原始: lesdpus is furgpus)
  52. [actual] x → furgpus (原始: x is furgpus)
  53. [planning] x → furgpus (原始: x is furgpus)
  54. [planning] lesdpus → furgpus (原始: lesdpus is furgpus)
  55. [planning] x → lesdpus (原始: x is lesdpus)
  56. [planning] x → furgpus (原始: x is furgpus)
  57. [actual] ticxpus → zagspus (原始: ticxpus is zagspus)
  58. [actual] lixxpus → ticxpus (原始: lixxpus is ticxpus)
  59. [planning] lixxpus → zagspus (原始: lixxpus is zagspus)
  60. [actual] pedppus → lixxpus (原始: pedppus is lixxpus)
  61. [planning] pedppus → zagspus (原始: pedppus is zagspus)
  62. [actual] tekdpus → pedppus (原始: tekdpus is pedppus)
  63. [planning] tekdpus → zagspus (原始: tekdpus is zagspus)
  64. [actual] x → lesdpus (原始: x is lesdpus)
  65. [actual] lesdpus → furgpus (原始: lesdpus is furgpus)
  66. [planning] x → furgpus (原始: x is furgpus)
  67. [actual] lesdpus → furgpus (原始: lesdpus is furgpus)
  68. [actual] x → lesdpus (原始: x is lesdpus)
  69. [actual] x → furgpus (原始: x is furgpus)
  70. [planning] x → tuplpus (原始: x is tuplpus)
  71. [actual] x → lesdpus (原始: x is lesdpus)
  72. [actual] lesdpus → furgpus (原始: lesdpus is furgpus)
  73. [planning] x → furgpus (原始: x is furgpus)
  74. [actual] furgpus → tuplpus (原始: furgpus is tuplpus)
  75. [planning] x → tuplpus (原始: x is tuplpus)
  76. [actual] tuplpus → tekdpus (原始: tuplpus is tekdpus)
  77. [planning] x → tekdpus (原始: x is tekdpus)
  78. [actual] tekdpus → pedppus (原始: tekdpus is pedppus)
  79. [planning] x → pedppus (原始: x is pedppus)
  80. [actual] pedppus → lixxpus (原始: pedppus is lixxpus)
  81. [planning] x → lixxpus (原始: x is lixxpus)
  82. [actual] lixxpus → ticxpus (原始: lixxpus is ticxpus)
  83. [planning] x → ticxpus (原始: x is ticxpus)
  84. [actual] ticxpus → zagspus (原始: ticxpus is zagspus)
  85. [actual] x → zagspus (原始: x is zagspus)
  86. [planning] x → zagspus (原始: x is zagspus)
  87. [actual] x → ticxpus (原始: x is ticxpus)
  88. [actual] x → ticxpus (原始: x is ticxpus)
  89. [actual] ticxpus → zagspus (原始: ticxpus is zagspus)
  90. [planning] x → zagspus (原始: x is zagspus)
  91. [actual] ticxpus → zagspus (原始: ticxpus is zagspus)
  92. [planning] x → ticxpus (原始: x is ticxpus)
  93. [planning] x → zagspus (原始: x is zagspus)
  94. [actual] x → zagspus (原始: x is zagspus)
  95. [actual] zagspus → babdpus (原始: zagspus is babdpus)
  96. [planning] x → babdpus (原始: x is babdpus)
  97. [actual] x → babdpus (原始: x is babdpus)
  98. [actual] x → sutmpus (原始: x is sutmpus)
  99. [actual] zagspus → mawhpus (原始: zagspus is mawhpus)
  100. [planning] x → babdpus (原始: x is babdpus)
  101. [actual] ticxpus → komcpus (原始: ticxpus is komcpus)
  102. [actual] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 12
[后处理] 加载LoG图，包含 12 个节点
  LoG节点 0: x is babdpus (规则: MP, 深度: 1)
  LoG节点 1: x is ticxpus (规则: MP, 深度: 2)
  LoG节点 2: ticxpus is babdpus (规则: CE, 深度: 2)
  LoG节点 3: x is tuplpus (规则: MP, 深度: 3)
  LoG节点 4: tuplpus is ticxpus (规则: MP, 深度: 3)
  LoG节点 5: ticxpus is babdpus and mawhpus (规则: MP, 深度: 3)
  LoG节点 6: x is lesdpus (规则: CE, 深度: 4)
  LoG节点 7: lesdpus is tuplpus (规则: MP, 深度: 4)
  LoG节点 8: tuplpus is pedppus (规则: MP, 深度: 4)
  LoG节点 9: pedppus is ticxpus (规则: MP, 深度: 4)
  LoG节点 10: ticxpus is zagspus (规则: CE, 深度: 4)
  LoG节点 11: zagspus is babdpus and mawhpus (规则: CI, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 102
   - 初始条件数: 10
   - LoG图节点数: 12

📋 初始条件列表:
    1. tuplpus is tekdpus
    2. pedppus is lixxpus
    3. zagspus is mawhpus
    4. lesdpus is furgpus
    5. x is lesdpus and sutmpus
    6. zagspus is babdpus
    7. furgpus is tuplpus
    8. ticxpus is zagspus and komcpus
    9. tekdpus is pedppus
   10. lixxpus is ticxpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 10 个前提节点

🔍 开始处理actual节点...

   节点 1: tuplpus is tekdpus
      ↻ 重复节点，计数: 2

   节点 2: pedppus is lixxpus
      ↻ 重复节点，计数: 2

   节点 3: zagspus is mawhpus
      ↻ 重复节点，计数: 2

   节点 4: lesdpus is furgpus
      ↻ 重复节点，计数: 2

   节点 5: x is lesdpus and sutmpus
      ↻ 重复节点，计数: 2

   节点 6: x is lesdpus and sutmpus
      ↻ 重复节点，计数: 3

   节点 7: zagspus is babdpus
      ↻ 重复节点，计数: 2

   节点 8: furgpus is tuplpus
      ↻ 重复节点，计数: 2

   节点 9: ticxpus is zagspus and komcpus
      ↻ 重复节点，计数: 2

   节点 10: ticxpus is zagspus and komcpus
      ↻ 重复节点，计数: 3

   节点 11: tekdpus is pedppus
      ↻ 重复节点，计数: 2

   节点 12: lixxpus is ticxpus
      ↻ 重复节点，计数: 2

   节点 13: x is lesdpus and sutmpus
      ↻ 重复节点，计数: 4

   节点 14: x is lesdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is lesdpus
      ✅ 验证成功 + LoG匹配

   节点 15: lesdpus is furgpus
      ↻ 重复节点，计数: 3

   节点 16: x is lesdpus
      ↻ 重复节点，计数: 2

   节点 17: lesdpus is furgpus
      ↻ 重复节点，计数: 4

   节点 18: x is furgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is lesdpus → lesdpus is furgpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is lesdpus
  - 前提: lesdpus is furgpus

   节点 19: lesdpus is furgpus
      ↻ 重复节点，计数: 5

   节点 20: tuplpus is tekdpus
      ↻ 重复节点，计数: 3

   节点 21: tekdpus is pedppus
      ↻ 重复节点，计数: 3

   节点 22: pedppus is lixxpus
      ↻ 重复节点，计数: 3

   节点 23: lixxpus is ticxpus
      ↻ 重复节点，计数: 3

   节点 24: ticxpus is zagspus and komcpus
      ↻ 重复节点，计数: 4

   节点 25: furgpus is tuplpus
      ↻ 重复节点，计数: 3

   节点 26: tuplpus is tekdpus
      ↻ 重复节点，计数: 4

   节点 27: tekdpus is pedppus
      ↻ 重复节点，计数: 4

   节点 28: zagspus is babdpus
      ↻ 重复节点，计数: 3

   节点 29: x is lesdpus
      ↻ 重复节点，计数: 3

   节点 30: lesdpus is furgpus
      ↻ 重复节点，计数: 6

   节点 31: furgpus is tuplpus
      ↻ 重复节点，计数: 4

   节点 32: tuplpus is tekdpus
      ↻ 重复节点，计数: 5

   节点 33: tekdpus is pedppus
      ↻ 重复节点，计数: 5

   节点 34: pedppus is lixxpus
      ↻ 重复节点，计数: 4

   节点 35: lixxpus is ticxpus
      ↻ 重复节点，计数: 4

   节点 36: ticxpus is zagspus
      🔍 验证新节点...
[后处理] 点亮LoG节点: ticxpus is zagspus
      ✅ 验证成功 + LoG匹配

   节点 37: ticxpus is zagspus and komcpus
      ↻ 重复节点，计数: 5

   节点 38: zagspus is babdpus
      ↻ 重复节点，计数: 4

   节点 39: x is lesdpus
      ↻ 重复节点，计数: 4

   节点 40: lesdpus is furgpus
      ↻ 重复节点，计数: 7

   节点 41: x is furgpus
      ↻ 重复节点，计数: 2

   节点 42: ticxpus is zagspus
      ↻ 重复节点，计数: 2

   节点 43: lixxpus is ticxpus
      ↻ 重复节点，计数: 5

   节点 44: pedppus is lixxpus
      ↻ 重复节点，计数: 5

   节点 45: tekdpus is pedppus
      ↻ 重复节点，计数: 6

   节点 46: x is lesdpus
      ↻ 重复节点，计数: 5

   节点 47: lesdpus is furgpus
      ↻ 重复节点，计数: 8

   节点 48: lesdpus is furgpus
      ↻ 重复节点，计数: 9

   节点 49: x is lesdpus
      ↻ 重复节点，计数: 6

   节点 50: x is furgpus
      ↻ 重复节点，计数: 3

   节点 51: x is lesdpus
      ↻ 重复节点，计数: 7

   节点 52: lesdpus is furgpus
      ↻ 重复节点，计数: 10

   节点 53: furgpus is tuplpus
      ↻ 重复节点，计数: 5

   节点 54: tuplpus is tekdpus
      ↻ 重复节点，计数: 6

   节点 55: tekdpus is pedppus
      ↻ 重复节点，计数: 7

   节点 56: pedppus is lixxpus
      ↻ 重复节点，计数: 6

   节点 57: lixxpus is ticxpus
      ↻ 重复节点，计数: 6

   节点 58: ticxpus is zagspus
      ↻ 重复节点，计数: 3

   节点 59: x is zagspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is lesdpus → lesdpus is zagspus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is lesdpus
  - 前提: lesdpus is furgpus
  - 前提: furgpus is tuplpus
  - 前提: tuplpus is tekdpus
  - 前提: tekdpus is pedppus
  - 前提: pedppus is lixxpus
  - 前提: lixxpus is ticxpus
  - 前提: ticxpus is zagspus
  ✓ 点亮LoG节点: x is ticxpus
[子树点亮]     └─ 点亮依赖节点: x is tuplpus (深度3)
[子树点亮]     └─ 点亮依赖节点: tuplpus is ticxpus (深度3)
[子树点亮]     └─ 点亮依赖节点: lesdpus is tuplpus (深度4)
[子树点亮]     └─ 点亮依赖节点: tuplpus is pedppus (深度4)
[子树点亮]     └─ 点亮依赖节点: pedppus is ticxpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 5 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 60: x is ticxpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 61: x is ticxpus
      ↻ 重复节点，计数: 2

   节点 62: ticxpus is zagspus
      ↻ 重复节点，计数: 4

   节点 63: ticxpus is zagspus
      ↻ 重复节点，计数: 5

   节点 64: x is zagspus
      ↻ 重复节点，计数: 2

   节点 65: zagspus is babdpus
      ↻ 重复节点，计数: 5

   节点 66: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: ticxpus is babdpus (深度2)
[子树点亮]     └─ 点亮依赖节点: ticxpus is babdpus and mawhpus (深度3)
[子树点亮]     └─ 点亮依赖节点: zagspus is babdpus and mawhpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 67: x is sutmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is lesdpus and sutmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is lesdpus and sutmpus

   节点 68: zagspus is mawhpus
      ↻ 重复节点，计数: 3

   节点 69: ticxpus is komcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: ticxpus is zagspus and komcpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: ticxpus is zagspus and komcpus

   节点 70: x is babdpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 70
   - 新增节点: 8
   - 更新已存在节点: 62
   - 点亮的LoG节点: 12

🎯 推理质量统计:
   - 完美推理: 8 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 12节点, 10前提, 复杂度1-10

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 18
   - 前提节点: 10
   - 推理节点: 8
   - 幻觉节点: 0
   - 点亮LoG节点: 12

✅ 推理节点详情:
   🟢 x is lesdpus (出现7次, 质量:perfect)
   🟢 x is furgpus (出现3次, 质量:perfect)
   🟢 ticxpus is zagspus (出现5次, 质量:perfect)
   🟢 x is zagspus (出现2次, 质量:perfect)
   🟢 x is ticxpus (出现2次, 质量:perfect)
   🟢 x is babdpus (出现2次, 质量:perfect)
   🟢 x is sutmpus (出现1次, 质量:perfect)
   🟢 ticxpus is komcpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - lesdpus is tuplpus
   - x is lesdpus
   - zagspus is babdpus and mawhpus
   - pedppus is ticxpus
   - ticxpus is babdpus
   - tuplpus is ticxpus
   - tuplpus is pedppus
   - x is babdpus
   - x is tuplpus
   - ticxpus is babdpus and mawhpus
   - ticxpus is zagspus
   - x is ticxpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus (第4层)
   节点Coverage: 12/12 = 100.00%
   前提条件Coverage: 10/10 = 100.00%
   各推理层点亮比例:
     第1层: 6/6 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/8 = 0.00%
   可推导节点: 8/8
   Strict Error Rate: 0/8 = 0.00%
   严格有效节点: 8/8

   详细分析:
     完美推理: 8 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 14/50
================================================================================
记录索引: 13
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_13.json
✅ 使用缓存结果:
   - 句子数: 34
   - 提取的语句数: 32
   - 初始条件数: 7

=== Statement提取完成 ===
总句子数: 34
成功提取: 34
失败提取: 0
总statements数: 32

=== 开始清洗Statement格式 ===
原始statements数: 32
清洗后statements数: 24
过滤掉的statements数: 8
清洗后的statements:
  1. [actual] x is riqmpus
  2. [actual] vuxdpus is havdpus
  3. [actual] riqmpus is vuxdpus
  4. [actual] havdpus is gaxtpus
  5. [actual] gaxtpus is ceslpus
  6. [actual] gaxtpus is yadqpus and wudcpus
  7. [planning] gaxtpus is yadqpus and wudcpus
  8. [actual] gaxtpus is yadqpus and wudcpus
  9. [actual] ceslpus is babdpus
  10. [planning] x is babdpus
  11. [actual] x is riqmpus
  12. [actual] riqmpus is vuxdpus
  13. [actual] x is vuxdpus
  14. [actual] vuxdpus is havdpus
  15. [actual] x is havdpus
  16. [actual] havdpus is gaxtpus
  17. [actual] x is gaxtpus
  18. [actual] gaxtpus is ceslpus
  19. [actual] x is ceslpus
  20. [actual] ceslpus is babdpus
  21. [actual] x is babdpus
  22. [actual] gaxtpus is ceslpus
  23. [actual] ceslpus is babdpus
  24. [actual] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 24
标准化后节点数: 24
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → riqmpus (原始: x is riqmpus)
  2. [actual] vuxdpus → havdpus (原始: vuxdpus is havdpus)
  3. [actual] riqmpus → vuxdpus (原始: riqmpus is vuxdpus)
  4. [actual] havdpus → gaxtpus (原始: havdpus is gaxtpus)
  5. [actual] gaxtpus → ceslpus (原始: gaxtpus is ceslpus)
  6. [actual] gaxtpus → yadqpus and wudcpus (原始: gaxtpus is yadqpus and wudcpus)
  7. [planning] gaxtpus → yadqpus and wudcpus (原始: gaxtpus is yadqpus and wudcpus)
  8. [actual] gaxtpus → yadqpus and wudcpus (原始: gaxtpus is yadqpus and wudcpus)
  9. [actual] ceslpus → babdpus (原始: ceslpus is babdpus)
  10. [planning] x → babdpus (原始: x is babdpus)
  11. [actual] x → riqmpus (原始: x is riqmpus)
  12. [actual] riqmpus → vuxdpus (原始: riqmpus is vuxdpus)
  13. [actual] x → vuxdpus (原始: x is vuxdpus)
  14. [actual] vuxdpus → havdpus (原始: vuxdpus is havdpus)
  15. [actual] x → havdpus (原始: x is havdpus)
  16. [actual] havdpus → gaxtpus (原始: havdpus is gaxtpus)
  17. [actual] x → gaxtpus (原始: x is gaxtpus)
  18. [actual] gaxtpus → ceslpus (原始: gaxtpus is ceslpus)
  19. [actual] x → ceslpus (原始: x is ceslpus)
  20. [actual] ceslpus → babdpus (原始: ceslpus is babdpus)
  21. [actual] x → babdpus (原始: x is babdpus)
  22. [actual] gaxtpus → ceslpus (原始: gaxtpus is ceslpus)
  23. [actual] ceslpus → babdpus (原始: ceslpus is babdpus)
  24. [actual] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 8
[后处理] 加载LoG图，包含 8 个节点
  LoG节点 0: x is babdpus (规则: CE, 深度: 1)
  LoG节点 1: x is babdpus and yadqpus (规则: MP, 深度: 2)
  LoG节点 2: x is gaxtpus (规则: MP, 深度: 3)
  LoG节点 3: gaxtpus is babdpus and yadqpus (规则: CI, 深度: 3)
  LoG节点 4: x is vuxdpus (规则: MP, 深度: 4)
  LoG节点 5: vuxdpus is gaxtpus (规则: MP, 深度: 4)
  LoG节点 6: gaxtpus is babdpus (规则: MP, 深度: 4)
  LoG节点 7: gaxtpus is yadqpus (规则: CE, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 24
   - 初始条件数: 7
   - LoG图节点数: 8

📋 初始条件列表:
    1. x is riqmpus
    2. vuxdpus is havdpus
    3. riqmpus is vuxdpus
    4. havdpus is gaxtpus
    5. gaxtpus is ceslpus
    6. gaxtpus is yadqpus and wudcpus
    7. ceslpus is babdpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 7 个前提节点

🔍 开始处理actual节点...

   节点 1: x is riqmpus
      ↻ 重复节点，计数: 2

   节点 2: vuxdpus is havdpus
      ↻ 重复节点，计数: 2

   节点 3: riqmpus is vuxdpus
      ↻ 重复节点，计数: 2

   节点 4: havdpus is gaxtpus
      ↻ 重复节点，计数: 2

   节点 5: gaxtpus is ceslpus
      ↻ 重复节点，计数: 2

   节点 6: gaxtpus is yadqpus and wudcpus
      ↻ 重复节点，计数: 2

   节点 7: gaxtpus is yadqpus and wudcpus
      ↻ 重复节点，计数: 3

   节点 8: ceslpus is babdpus
      ↻ 重复节点，计数: 2

   节点 9: x is riqmpus
      ↻ 重复节点，计数: 3

   节点 10: riqmpus is vuxdpus
      ↻ 重复节点，计数: 3

   节点 11: x is vuxdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is vuxdpus
      ✅ 验证成功 + LoG匹配

   节点 12: vuxdpus is havdpus
      ↻ 重复节点，计数: 3

   节点 13: x is havdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is riqmpus → riqmpus is havdpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is riqmpus
  - 前提: riqmpus is vuxdpus
  - 前提: vuxdpus is havdpus

   节点 14: havdpus is gaxtpus
      ↻ 重复节点，计数: 3

   节点 15: x is gaxtpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is gaxtpus
[子树点亮]     └─ 点亮依赖节点: vuxdpus is gaxtpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 16: gaxtpus is ceslpus
      ↻ 重复节点，计数: 3

   节点 17: x is ceslpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is riqmpus → riqmpus is ceslpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is riqmpus
  - 前提: riqmpus is vuxdpus
  - 前提: vuxdpus is havdpus
  - 前提: havdpus is gaxtpus
  - 前提: gaxtpus is ceslpus

   节点 18: ceslpus is babdpus
      ↻ 重复节点，计数: 3

   节点 19: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: x is babdpus and yadqpus (深度2)
[子树点亮]     └─ 点亮依赖节点: gaxtpus is babdpus and yadqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: gaxtpus is babdpus (深度4)
[子树点亮]     └─ 点亮依赖节点: gaxtpus is yadqpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
      ✅ 验证成功 + LoG匹配

   节点 20: gaxtpus is ceslpus
      ↻ 重复节点，计数: 4

   节点 21: ceslpus is babdpus
      ↻ 重复节点，计数: 4

   节点 22: x is babdpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 22
   - 新增节点: 5
   - 更新已存在节点: 17
   - 点亮的LoG节点: 8

🎯 推理质量统计:
   - 完美推理: 5 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 8节点, 7前提, 复杂度1-7

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 12
   - 前提节点: 7
   - 推理节点: 5
   - 幻觉节点: 0
   - 点亮LoG节点: 8

✅ 推理节点详情:
   🟢 x is vuxdpus (出现1次, 质量:perfect)
   🟢 x is havdpus (出现1次, 质量:perfect)
   🟢 x is gaxtpus (出现1次, 质量:perfect)
   🟢 x is ceslpus (出现1次, 质量:perfect)
   🟢 x is babdpus (出现2次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is gaxtpus
   - vuxdpus is gaxtpus
   - gaxtpus is yadqpus
   - gaxtpus is babdpus
   - x is vuxdpus
   - gaxtpus is babdpus and yadqpus
   - x is babdpus
   - x is babdpus and yadqpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus (第4层)
   节点Coverage: 8/8 = 100.00%
   前提条件Coverage: 7/7 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/5 = 0.00%
   可推导节点: 5/5
   Strict Error Rate: 0/5 = 0.00%
   严格有效节点: 5/5

   详细分析:
     完美推理: 5 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 15/50
================================================================================
记录索引: 14
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_14.json
✅ 使用缓存结果:
   - 句子数: 72
   - 提取的语句数: 71
   - 初始条件数: 6

=== Statement提取完成 ===
总句子数: 72
成功提取: 72
失败提取: 0
总statements数: 71

=== 开始清洗Statement格式 ===
原始statements数: 71
清洗后statements数: 45
过滤掉的statements数: 26
清洗后的statements:
  1. [actual] wofcpus is xawrpus
  2. [planning] wofcpus is xawrpus
  3. [planning] wofcpus is xawrpus or wofcpus is subset of xawrpus
  4. [actual] wofcpus is xawrpus
  5. [actual] wofcpus is a subset of xawrpus
  6. [actual] x is qilfpus and vopppus
  7. [planning] x is qilfpus
  8. [planning] x is vopppus
  9. [planning] x is an element
  10. [actual] wofcpus is xawrpus
  11. [actual] x is qilfpus and vopppus
  12. [actual] qujypus is wofcpus
  13. [actual] xawrpus is hofppus
  14. [actual] hofppus is babdpus and jomxpus
  15. [actual] qilfpus is qujypus and gastpus and codwpus
  16. [actual] qilfpus is qujypus
  17. [actual] qilfpus is gastpus
  18. [actual] qilfpus is codwpus
  19. [planning] x is babdpus
  20. [planning] x is babdpus
  21. [planning] x is a subset of babdpus
  22. [actual] x is qilfpus
  23. [actual] x is vopppus
  24. [actual] x is qilfpus
  25. [actual] x is vopppus
  26. [actual] qilfpus is qujypus
  27. [actual] qilfpus is gastpus
  28. [actual] qilfpus is codwpus
  29. [actual] qilfpus is qujypus and gastpus and codwpus
  30. [actual] qujypus is wofcpus
  31. [actual] wofcpus is xawrpus
  32. [actual] xawrpus is hofppus
  33. [actual] hofppus is babdpus and jomxpus
  34. [actual] x is qilfpus
  35. [actual] qujypus is wofcpus
  36. [actual] wofcpus is xawrpus
  37. [actual] xawrpus is hofppus
  38. [actual] hofppus is babdpus
  39. [actual] x is babdpus
  40. [actual] qilfpus is gastpus and codwpus
  41. [actual] x is a subset of babdpus
  42. [actual] x is babdpus
  43. [planning] x is babdpus
  44. [actual] x is qilfpus and vopppus
  45. [actual] qujypus is wofcpus

=== 开始标准化和解析节点 ===
清洗后statements数: 45
标准化后节点数: 40
过滤掉的无效实体数: 5
标准化后的节点:
  1. [actual] wofcpus → xawrpus (原始: wofcpus is xawrpus)
  2. [planning] wofcpus → xawrpus (原始: wofcpus is xawrpus)
  3. [actual] wofcpus → xawrpus (原始: wofcpus is xawrpus)
  4. [actual] x → qilfpus and vopppus (原始: x is qilfpus and vopppus)
  5. [planning] x → qilfpus (原始: x is qilfpus)
  6. [planning] x → vopppus (原始: x is vopppus)
  7. [actual] wofcpus → xawrpus (原始: wofcpus is xawrpus)
  8. [actual] x → qilfpus and vopppus (原始: x is qilfpus and vopppus)
  9. [actual] qujypus → wofcpus (原始: qujypus is wofcpus)
  10. [actual] xawrpus → hofppus (原始: xawrpus is hofppus)
  11. [actual] hofppus → babdpus and jomxpus (原始: hofppus is babdpus and jomxpus)
  12. [actual] qilfpus → qujypus and gastpus and codwpus (原始: qilfpus is qujypus and gastpus and codwpus)
  13. [actual] qilfpus → qujypus (原始: qilfpus is qujypus)
  14. [actual] qilfpus → gastpus (原始: qilfpus is gastpus)
  15. [actual] qilfpus → codwpus (原始: qilfpus is codwpus)
  16. [planning] x → babdpus (原始: x is babdpus)
  17. [planning] x → babdpus (原始: x is babdpus)
  18. [actual] x → qilfpus (原始: x is qilfpus)
  19. [actual] x → vopppus (原始: x is vopppus)
  20. [actual] x → qilfpus (原始: x is qilfpus)
  21. [actual] x → vopppus (原始: x is vopppus)
  22. [actual] qilfpus → qujypus (原始: qilfpus is qujypus)
  23. [actual] qilfpus → gastpus (原始: qilfpus is gastpus)
  24. [actual] qilfpus → codwpus (原始: qilfpus is codwpus)
  25. [actual] qilfpus → qujypus and gastpus and codwpus (原始: qilfpus is qujypus and gastpus and codwpus)
  26. [actual] qujypus → wofcpus (原始: qujypus is wofcpus)
  27. [actual] wofcpus → xawrpus (原始: wofcpus is xawrpus)
  28. [actual] xawrpus → hofppus (原始: xawrpus is hofppus)
  29. [actual] hofppus → babdpus and jomxpus (原始: hofppus is babdpus and jomxpus)
  30. [actual] x → qilfpus (原始: x is qilfpus)
  31. [actual] qujypus → wofcpus (原始: qujypus is wofcpus)
  32. [actual] wofcpus → xawrpus (原始: wofcpus is xawrpus)
  33. [actual] xawrpus → hofppus (原始: xawrpus is hofppus)
  34. [actual] hofppus → babdpus (原始: hofppus is babdpus)
  35. [actual] x → babdpus (原始: x is babdpus)
  36. [actual] qilfpus → gastpus and codwpus (原始: qilfpus is gastpus and codwpus)
  37. [actual] x → babdpus (原始: x is babdpus)
  38. [planning] x → babdpus (原始: x is babdpus)
  39. [actual] x → qilfpus and vopppus (原始: x is qilfpus and vopppus)
  40. [actual] qujypus → wofcpus (原始: qujypus is wofcpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 9
[后处理] 加载LoG图，包含 9 个节点
  LoG节点 0: x is babdpus (规则: MP, 深度: 1)
  LoG节点 1: x is qujypus (规则: CE, 深度: 2)
  LoG节点 2: qujypus is babdpus (规则: CE, 深度: 2)
  LoG节点 3: x is qujypus and gastpus (规则: MP, 深度: 3)
  LoG节点 4: qujypus is babdpus and jomxpus (规则: MP, 深度: 3)
  LoG节点 5: x is qilfpus (规则: CE, 深度: 4)
  LoG节点 6: qilfpus is qujypus and gastpus (规则: CE, 深度: 4)
  LoG节点 7: qujypus is xawrpus (规则: MP, 深度: 4)
  LoG节点 8: xawrpus is babdpus and jomxpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 40
   - 初始条件数: 6
   - LoG图节点数: 9

📋 初始条件列表:
    1. wofcpus is xawrpus
    2. x is qilfpus and vopppus
    3. qujypus is wofcpus
    4. xawrpus is hofppus
    5. hofppus is babdpus and jomxpus
    6. qilfpus is qujypus and gastpus and codwpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 6 个前提节点

🔍 开始处理actual节点...

   节点 1: wofcpus is xawrpus
      ↻ 重复节点，计数: 2

   节点 2: wofcpus is xawrpus
      ↻ 重复节点，计数: 3

   节点 3: x is qilfpus and vopppus
      ↻ 重复节点，计数: 2

   节点 4: wofcpus is xawrpus
      ↻ 重复节点，计数: 4

   节点 5: x is qilfpus and vopppus
      ↻ 重复节点，计数: 3

   节点 6: qujypus is wofcpus
      ↻ 重复节点，计数: 2

   节点 7: xawrpus is hofppus
      ↻ 重复节点，计数: 2

   节点 8: hofppus is babdpus and jomxpus
      ↻ 重复节点，计数: 2

   节点 9: qilfpus is qujypus and gastpus and codwpus
      ↻ 重复节点，计数: 2

   节点 10: qilfpus is qujypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qilfpus is qujypus and gastpus and codwpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qilfpus is qujypus and gastpus and codwpus
  ✓ 点亮LoG节点: qilfpus is qujypus and gastpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 11: qilfpus is gastpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qilfpus is qujypus and gastpus and codwpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qilfpus is qujypus and gastpus and codwpus

   节点 12: qilfpus is codwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qilfpus is qujypus and gastpus and codwpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qilfpus is qujypus and gastpus and codwpus

   节点 13: x is qilfpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is qilfpus
      ✅ 验证成功 + LoG匹配

   节点 14: x is vopppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is qilfpus and vopppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is qilfpus and vopppus

   节点 15: x is qilfpus
      ↻ 重复节点，计数: 2

   节点 16: x is vopppus
      ↻ 重复节点，计数: 2

   节点 17: qilfpus is qujypus
      ↻ 重复节点，计数: 2

   节点 18: qilfpus is gastpus
      ↻ 重复节点，计数: 2

   节点 19: qilfpus is codwpus
      ↻ 重复节点，计数: 2

   节点 20: qilfpus is qujypus and gastpus and codwpus
      ↻ 重复节点，计数: 3

   节点 21: qujypus is wofcpus
      ↻ 重复节点，计数: 3

   节点 22: wofcpus is xawrpus
      ↻ 重复节点，计数: 5

   节点 23: xawrpus is hofppus
      ↻ 重复节点，计数: 3

   节点 24: hofppus is babdpus and jomxpus
      ↻ 重复节点，计数: 3

   节点 25: x is qilfpus
      ↻ 重复节点，计数: 3

   节点 26: qujypus is wofcpus
      ↻ 重复节点，计数: 4

   节点 27: wofcpus is xawrpus
      ↻ 重复节点，计数: 6

   节点 28: xawrpus is hofppus
      ↻ 重复节点，计数: 4

   节点 29: hofppus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: hofppus is babdpus and jomxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: hofppus is babdpus and jomxpus

   节点 30: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: x is qujypus (深度2)
[子树点亮]     └─ 点亮依赖节点: qujypus is babdpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is qujypus and gastpus (深度3)
[子树点亮]     └─ 点亮依赖节点: qujypus is babdpus and jomxpus (深度3)
[子树点亮]     └─ 点亮依赖节点: qujypus is xawrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: xawrpus is babdpus and jomxpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 6 个节点
      ✅ 验证成功 + LoG匹配

   节点 31: qilfpus is gastpus and codwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: qilfpus is gastpus → qilfpus is codwpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: qilfpus is gastpus
  - 前提: qilfpus is codwpus

   节点 32: x is babdpus
      ↻ 重复节点，计数: 2

   节点 33: x is qilfpus and vopppus
      ↻ 重复节点，计数: 4

   节点 34: qujypus is wofcpus
      ↻ 重复节点，计数: 5

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 34
   - 新增节点: 8
   - 更新已存在节点: 26
   - 点亮的LoG节点: 9

🎯 推理质量统计:
   - 完美推理: 8 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 9节点, 6前提, 复杂度1-6

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 14
   - 前提节点: 6
   - 推理节点: 8
   - 幻觉节点: 0
   - 点亮LoG节点: 9

✅ 推理节点详情:
   🟢 qilfpus is qujypus (出现2次, 质量:perfect)
   🟢 qilfpus is gastpus (出现2次, 质量:perfect)
   🟢 qilfpus is codwpus (出现2次, 质量:perfect)
   🟢 x is qilfpus (出现3次, 质量:perfect)
   🟢 x is vopppus (出现2次, 质量:perfect)
   🟢 hofppus is babdpus (出现1次, 质量:perfect)
   🟢 x is babdpus (出现2次, 质量:perfect)
   🟢 qilfpus is gastpus and codwpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - qujypus is xawrpus
   - xawrpus is babdpus and jomxpus
   - x is qujypus
   - qujypus is babdpus
   - x is babdpus
   - x is qilfpus
   - qilfpus is qujypus and gastpus
   - x is qujypus and gastpus
   - qujypus is babdpus and jomxpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus (第4层)
   节点Coverage: 9/9 = 100.00%
   前提条件Coverage: 6/6 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/8 = 0.00%
   可推导节点: 8/8
   Strict Error Rate: 0/8 = 0.00%
   严格有效节点: 8/8

   详细分析:
     完美推理: 8 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 16/50
================================================================================
记录索引: 15
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_15.json
✅ 使用缓存结果:
   - 句子数: 57
   - 提取的语句数: 55
   - 初始条件数: 7

=== Statement提取完成 ===
总句子数: 57
成功提取: 57
失败提取: 0
总statements数: 55

=== 开始清洗Statement格式 ===
原始statements数: 55
清洗后statements数: 52
过滤掉的statements数: 3
清洗后的statements:
  1. [actual] povzpus is qomdpus
  2. [actual] kikdpus is faljpus
  3. [actual] qomdpus is raszpus and pagwpus
  4. [actual] qomdpus is raszpus and pagwpus
  5. [actual] faljpus is povzpus and pizgpus and ruklpus
  6. [actual] faljpus is povzpus and pizgpus and ruklpus
  7. [actual] raszpus is xabfpus
  8. [actual] x is kikdpus
  9. [actual] xabfpus is babdpus and vapjpus
  10. [actual] xabfpus is babdpus and vapjpus
  11. [planning] x is babdpus
  12. [planning] x is babdpus
  13. [actual] x is kikdpus
  14. [actual] kikdpus is faljpus
  15. [actual] x is kikdpus
  16. [actual] kikdpus is faljpus
  17. [actual] x is faljpus
  18. [actual] faljpus is povzpus and pizgpus and ruklpus
  19. [actual] x is faljpus
  20. [actual] x is povzpus and pizgpus and ruklpus
  21. [planning] x is babdpus
  22. [actual] babdpus is mentioned
  23. [actual] xabfpus is babdpus and vapjpus
  24. [actual] babdpus is a category that contains xabfpus
  25. [actual] xabfpus is babdpus
  26. [planning] x is babdpus
  27. [actual] x is povzpus
  28. [actual] povzpus is qomdpus
  29. [actual] x is qomdpus
  30. [actual] qomdpus is raszpus and pagwpus
  31. [actual] x is raszpus
  32. [actual] raszpus is xabfpus
  33. [actual] x is xabfpus
  34. [actual] xabfpus is babdpus and vapjpus
  35. [actual] x is xabfpus
  36. [actual] xabfpus is babdpus
  37. [actual] x is babdpus
  38. [actual] x is babdpus
  39. [actual] x is kikdpus
  40. [actual] kikdpus is faljpus
  41. [actual] faljpus is povzpus
  42. [actual] povzpus is qomdpus
  43. [actual] qomdpus is raszpus
  44. [actual] raszpus is xabfpus
  45. [actual] xabfpus is babdpus
  46. [actual] x is babdpus
  47. [actual] faljpus is povzpus
  48. [planning] faljpus is povzpus
  49. [planning] povzpus is a broader category
  50. [actual] x is kikdpus
  51. [planning] kikdpus is a category containing x
  52. [actual] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 52
标准化后节点数: 48
过滤掉的无效实体数: 4
标准化后的节点:
  1. [actual] povzpus → qomdpus (原始: povzpus is qomdpus)
  2. [actual] kikdpus → faljpus (原始: kikdpus is faljpus)
  3. [actual] qomdpus → raszpus and pagwpus (原始: qomdpus is raszpus and pagwpus)
  4. [actual] qomdpus → raszpus and pagwpus (原始: qomdpus is raszpus and pagwpus)
  5. [actual] faljpus → povzpus and pizgpus and ruklpus (原始: faljpus is povzpus and pizgpus and ruklpus)
  6. [actual] faljpus → povzpus and pizgpus and ruklpus (原始: faljpus is povzpus and pizgpus and ruklpus)
  7. [actual] raszpus → xabfpus (原始: raszpus is xabfpus)
  8. [actual] x → kikdpus (原始: x is kikdpus)
  9. [actual] xabfpus → babdpus and vapjpus (原始: xabfpus is babdpus and vapjpus)
  10. [actual] xabfpus → babdpus and vapjpus (原始: xabfpus is babdpus and vapjpus)
  11. [planning] x → babdpus (原始: x is babdpus)
  12. [planning] x → babdpus (原始: x is babdpus)
  13. [actual] x → kikdpus (原始: x is kikdpus)
  14. [actual] kikdpus → faljpus (原始: kikdpus is faljpus)
  15. [actual] x → kikdpus (原始: x is kikdpus)
  16. [actual] kikdpus → faljpus (原始: kikdpus is faljpus)
  17. [actual] x → faljpus (原始: x is faljpus)
  18. [actual] faljpus → povzpus and pizgpus and ruklpus (原始: faljpus is povzpus and pizgpus and ruklpus)
  19. [actual] x → faljpus (原始: x is faljpus)
  20. [actual] x → povzpus and pizgpus and ruklpus (原始: x is povzpus and pizgpus and ruklpus)
  21. [planning] x → babdpus (原始: x is babdpus)
  22. [actual] xabfpus → babdpus and vapjpus (原始: xabfpus is babdpus and vapjpus)
  23. [actual] xabfpus → babdpus (原始: xabfpus is babdpus)
  24. [planning] x → babdpus (原始: x is babdpus)
  25. [actual] x → povzpus (原始: x is povzpus)
  26. [actual] povzpus → qomdpus (原始: povzpus is qomdpus)
  27. [actual] x → qomdpus (原始: x is qomdpus)
  28. [actual] qomdpus → raszpus and pagwpus (原始: qomdpus is raszpus and pagwpus)
  29. [actual] x → raszpus (原始: x is raszpus)
  30. [actual] raszpus → xabfpus (原始: raszpus is xabfpus)
  31. [actual] x → xabfpus (原始: x is xabfpus)
  32. [actual] xabfpus → babdpus and vapjpus (原始: xabfpus is babdpus and vapjpus)
  33. [actual] x → xabfpus (原始: x is xabfpus)
  34. [actual] xabfpus → babdpus (原始: xabfpus is babdpus)
  35. [actual] x → babdpus (原始: x is babdpus)
  36. [actual] x → babdpus (原始: x is babdpus)
  37. [actual] x → kikdpus (原始: x is kikdpus)
  38. [actual] kikdpus → faljpus (原始: kikdpus is faljpus)
  39. [actual] faljpus → povzpus (原始: faljpus is povzpus)
  40. [actual] povzpus → qomdpus (原始: povzpus is qomdpus)
  41. [actual] qomdpus → raszpus (原始: qomdpus is raszpus)
  42. [actual] raszpus → xabfpus (原始: raszpus is xabfpus)
  43. [actual] xabfpus → babdpus (原始: xabfpus is babdpus)
  44. [actual] x → babdpus (原始: x is babdpus)
  45. [actual] faljpus → povzpus (原始: faljpus is povzpus)
  46. [planning] faljpus → povzpus (原始: faljpus is povzpus)
  47. [actual] x → kikdpus (原始: x is kikdpus)
  48. [actual] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 10
[后处理] 加载LoG图，包含 10 个节点
  LoG节点 0: x is babdpus (规则: MP, 深度: 1)
  LoG节点 1: x is povzpus (规则: CE, 深度: 2)
  LoG节点 2: povzpus is babdpus (规则: MP, 深度: 2)
  LoG节点 3: x is povzpus and pizgpus (规则: MP, 深度: 3)
  LoG节点 4: povzpus is raszpus (规则: CE, 深度: 3)
  LoG节点 5: raszpus is babdpus (规则: CE, 深度: 3)
  LoG节点 6: x is faljpus (规则: MP, 深度: 4)
  LoG节点 7: faljpus is povzpus and pizgpus (规则: CE, 深度: 4)
  LoG节点 8: povzpus is raszpus and pagwpus (规则: MP, 深度: 4)
  LoG节点 9: raszpus is babdpus and vapjpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 48
   - 初始条件数: 7
   - LoG图节点数: 10

📋 初始条件列表:
    1. povzpus is qomdpus
    2. kikdpus is faljpus
    3. qomdpus is raszpus and pagwpus
    4. faljpus is povzpus and pizgpus and ruklpus
    5. raszpus is xabfpus
    6. x is kikdpus
    7. xabfpus is babdpus and vapjpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 7 个前提节点

🔍 开始处理actual节点...

   节点 1: povzpus is qomdpus
      ↻ 重复节点，计数: 2

   节点 2: kikdpus is faljpus
      ↻ 重复节点，计数: 2

   节点 3: qomdpus is raszpus and pagwpus
      ↻ 重复节点，计数: 2

   节点 4: qomdpus is raszpus and pagwpus
      ↻ 重复节点，计数: 3

   节点 5: faljpus is povzpus and pizgpus and ruklpus
      ↻ 重复节点，计数: 2

   节点 6: faljpus is povzpus and pizgpus and ruklpus
      ↻ 重复节点，计数: 3

   节点 7: raszpus is xabfpus
      ↻ 重复节点，计数: 2

   节点 8: x is kikdpus
      ↻ 重复节点，计数: 2

   节点 9: xabfpus is babdpus and vapjpus
      ↻ 重复节点，计数: 2

   节点 10: xabfpus is babdpus and vapjpus
      ↻ 重复节点，计数: 3

   节点 11: x is kikdpus
      ↻ 重复节点，计数: 3

   节点 12: kikdpus is faljpus
      ↻ 重复节点，计数: 3

   节点 13: x is kikdpus
      ↻ 重复节点，计数: 4

   节点 14: kikdpus is faljpus
      ↻ 重复节点，计数: 4

   节点 15: x is faljpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is faljpus
      ✅ 验证成功 + LoG匹配

   节点 16: faljpus is povzpus and pizgpus and ruklpus
      ↻ 重复节点，计数: 4

   节点 17: x is faljpus
      ↻ 重复节点，计数: 2

   节点 18: x is povzpus and pizgpus and ruklpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is kikdpus → kikdpus is povzpus and pizgpus and ruklpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is kikdpus
  - 前提: kikdpus is faljpus
  - 前提: faljpus is povzpus and pizgpus and ruklpus
  ✓ 点亮LoG节点: x is povzpus
[子树点亮]     └─ 点亮依赖节点: x is povzpus and pizgpus (深度3)
[子树点亮]     └─ 点亮依赖节点: faljpus is povzpus and pizgpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 19: xabfpus is babdpus and vapjpus
      ↻ 重复节点，计数: 4

   节点 20: xabfpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: xabfpus is babdpus and vapjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: xabfpus is babdpus and vapjpus

   节点 21: x is povzpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 22: povzpus is qomdpus
      ↻ 重复节点，计数: 3

   节点 23: x is qomdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is kikdpus → kikdpus is qomdpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is kikdpus
  - 前提: kikdpus is faljpus
  - 前提: faljpus is povzpus and pizgpus and ruklpus
  - 前提: povzpus is qomdpus

   节点 24: qomdpus is raszpus and pagwpus
      ↻ 重复节点，计数: 4

   节点 25: x is raszpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is kikdpus → kikdpus is raszpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is kikdpus
  - 前提: kikdpus is faljpus
  - 前提: faljpus is povzpus and pizgpus and ruklpus
  - 前提: povzpus is qomdpus
  - 前提: qomdpus is raszpus and pagwpus
  ✓ 点亮LoG节点: povzpus is raszpus
[子树点亮]     └─ 点亮依赖节点: povzpus is raszpus and pagwpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 26: raszpus is xabfpus
      ↻ 重复节点，计数: 3

   节点 27: x is xabfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is kikdpus → kikdpus is xabfpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is kikdpus
  - 前提: kikdpus is faljpus
  - 前提: faljpus is povzpus and pizgpus and ruklpus
  - 前提: povzpus is qomdpus
  - 前提: qomdpus is raszpus and pagwpus
  - 前提: raszpus is xabfpus

   节点 28: xabfpus is babdpus and vapjpus
      ↻ 重复节点，计数: 5

   节点 29: x is xabfpus
      ↻ 重复节点，计数: 2

   节点 30: xabfpus is babdpus
      ↻ 重复节点，计数: 2

   节点 31: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: povzpus is babdpus (深度2)
[子树点亮]     └─ 点亮依赖节点: raszpus is babdpus (深度3)
[子树点亮]     └─ 点亮依赖节点: raszpus is babdpus and vapjpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 32: x is babdpus
      ↻ 重复节点，计数: 2

   节点 33: x is kikdpus
      ↻ 重复节点，计数: 5

   节点 34: kikdpus is faljpus
      ↻ 重复节点，计数: 5

   节点 35: faljpus is povzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: faljpus is povzpus and pizgpus and ruklpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: faljpus is povzpus and pizgpus and ruklpus

   节点 36: povzpus is qomdpus
      ↻ 重复节点，计数: 4

   节点 37: qomdpus is raszpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qomdpus is raszpus and pagwpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qomdpus is raszpus and pagwpus

   节点 38: raszpus is xabfpus
      ↻ 重复节点，计数: 4

   节点 39: xabfpus is babdpus
      ↻ 重复节点，计数: 3

   节点 40: x is babdpus
      ↻ 重复节点，计数: 3

   节点 41: faljpus is povzpus
      ↻ 重复节点，计数: 2

   节点 42: x is kikdpus
      ↻ 重复节点，计数: 6

   节点 43: x is babdpus
      ↻ 重复节点，计数: 4

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 43
   - 新增节点: 10
   - 更新已存在节点: 33
   - 点亮的LoG节点: 10

🎯 推理质量统计:
   - 完美推理: 10 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 10节点, 7前提, 复杂度1-7

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 17
   - 前提节点: 7
   - 推理节点: 10
   - 幻觉节点: 0
   - 点亮LoG节点: 10

✅ 推理节点详情:
   🟢 x is faljpus (出现2次, 质量:perfect)
   🟢 x is povzpus and pizgpus and ruklpus (出现1次, 质量:perfect)
   🟢 xabfpus is babdpus (出现3次, 质量:perfect)
   🟢 x is povzpus (出现1次, 质量:perfect)
   🟢 x is qomdpus (出现1次, 质量:perfect)
   🟢 x is raszpus (出现1次, 质量:perfect)
   🟢 x is xabfpus (出现2次, 质量:perfect)
   🟢 x is babdpus (出现4次, 质量:perfect)
   🟢 faljpus is povzpus (出现2次, 质量:perfect)
   🟢 qomdpus is raszpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - faljpus is povzpus and pizgpus
   - raszpus is babdpus and vapjpus
   - x is povzpus
   - x is babdpus
   - povzpus is raszpus and pagwpus
   - povzpus is raszpus
   - x is faljpus
   - povzpus is babdpus
   - x is povzpus and pizgpus
   - raszpus is babdpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus (第4层)
   节点Coverage: 10/10 = 100.00%
   前提条件Coverage: 7/7 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/10 = 0.00%
   可推导节点: 10/10
   Strict Error Rate: 0/10 = 0.00%
   严格有效节点: 10/10

   详细分析:
     完美推理: 10 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 17/50
================================================================================
记录索引: 16
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_16.json
✅ 使用缓存结果:
   - 句子数: 30
   - 提取的语句数: 29
   - 初始条件数: 3

=== Statement提取完成 ===
总句子数: 30
成功提取: 30
失败提取: 0
总statements数: 29

=== 开始清洗Statement格式 ===
原始statements数: 29
清洗后statements数: 29
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 29
标准化后节点数: 25
过滤掉的无效实体数: 4
标准化后的节点:
  1. [actual] kisspus → babdpus and hodfpus (原始: kisspus is babdpus and hodfpus)
  2. [actual] lewxpus → kisspus (原始: lewxpus is kisspus)
  3. [actual] x → lewxpus and bepkpus (原始: x is lewxpus and bepkpus)
  4. [planning] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  5. [actual] kisspus → babdpus (原始: kisspus is babdpus)
  6. [actual] kisspus → hodfpus (原始: kisspus is hodfpus)
  7. [actual] lewxpus → kisspus (原始: lewxpus is kisspus)
  8. [actual] lewxpus → kisspus (原始: lewxpus is kisspus)
  9. [actual] x → lewxpus (原始: x is lewxpus)
  10. [actual] x → bepkpus (原始: x is bepkpus)
  11. [planning] x → babdpus (原始: x is babdpus)
  12. [planning] x → babqpus (原始: x is babqpus)
  13. [actual] kisspus → babdpus (原始: kisspus is babdpus)
  14. [actual] lewxpus → kisspus (原始: lewxpus is kisspus)
  15. [actual] x → lewxpus (原始: x is lewxpus)
  16. [actual] lewxpus → kisspus (原始: lewxpus is kisspus)
  17. [actual] kisspus → babdpus (原始: kisspus is babdpus)
  18. [actual] x → kisspus (原始: x is kisspus)
  19. [actual] x → babdpus (原始: x is babdpus)
  20. [actual] x → babdpus (原始: x is babdpus)
  21. [actual] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  22. [actual] x → babdpus (原始: x is babdpus)
  23. [planning] x → babdpus (原始: x is babdpus)
  24. [planning] x → babqpus (原始: x is babqpus)
  25. [actual] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 5
[后处理] 加载LoG图，包含 5 个节点
  LoG节点 0: x is babdpus or babqpus (规则: DI, 深度: 1)
  LoG节点 1: x is babdpus (规则: CE, 深度: 2)
  LoG节点 2: x is babdpus and hodfpus (规则: MP, 深度: 3)
  LoG节点 3: x is lewxpus (规则: CE, 深度: 4)
  LoG节点 4: lewxpus is babdpus and hodfpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 25
   - 初始条件数: 3
   - LoG图节点数: 5

📋 初始条件列表:
    1. kisspus is babdpus and hodfpus
    2. lewxpus is kisspus
    3. x is lewxpus and bepkpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 3 个前提节点

🔍 开始处理actual节点...

   节点 1: kisspus is babdpus and hodfpus
      ↻ 重复节点，计数: 2

   节点 2: lewxpus is kisspus
      ↻ 重复节点，计数: 2

   节点 3: x is lewxpus and bepkpus
      ↻ 重复节点，计数: 2

   节点 4: kisspus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kisspus is babdpus and hodfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kisspus is babdpus and hodfpus

   节点 5: kisspus is hodfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kisspus is babdpus and hodfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kisspus is babdpus and hodfpus

   节点 6: lewxpus is kisspus
      ↻ 重复节点，计数: 3

   节点 7: lewxpus is kisspus
      ↻ 重复节点，计数: 4

   节点 8: x is lewxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is lewxpus
      ✅ 验证成功 + LoG匹配

   节点 9: x is bepkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is lewxpus and bepkpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is lewxpus and bepkpus

   节点 10: kisspus is babdpus
      ↻ 重复节点，计数: 2

   节点 11: lewxpus is kisspus
      ↻ 重复节点，计数: 5

   节点 12: x is lewxpus
      ↻ 重复节点，计数: 2

   节点 13: lewxpus is kisspus
      ↻ 重复节点，计数: 6

   节点 14: kisspus is babdpus
      ↻ 重复节点，计数: 3

   节点 15: x is kisspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is lewxpus → lewxpus is kisspus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is lewxpus
  - 前提: lewxpus is kisspus

   节点 16: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: x is babdpus and hodfpus (深度3)
[子树点亮]     └─ 点亮依赖节点: lewxpus is babdpus and hodfpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 17: x is babdpus
      ↻ 重复节点，计数: 2

   节点 18: x is babdpus or babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus or babqpus
      ✅ 验证成功 + LoG匹配

   节点 19: x is babdpus
      ↻ 重复节点，计数: 3

   节点 20: x is babdpus
      ↻ 重复节点，计数: 4

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 20
   - 新增节点: 7
   - 更新已存在节点: 13
   - 点亮的LoG节点: 5

🎯 推理质量统计:
   - 完美推理: 7 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 5节点, 3前提, 复杂度1-3

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 10
   - 前提节点: 3
   - 推理节点: 7
   - 幻觉节点: 0
   - 点亮LoG节点: 5

✅ 推理节点详情:
   🟢 kisspus is babdpus (出现3次, 质量:perfect)
   🟢 kisspus is hodfpus (出现1次, 质量:perfect)
   🟢 x is lewxpus (出现2次, 质量:perfect)
   🟢 x is bepkpus (出现1次, 质量:perfect)
   🟢 x is kisspus (出现1次, 质量:perfect)
   🟢 x is babdpus (出现4次, 质量:perfect)
   🟢 x is babdpus or babqpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is babdpus or babqpus
   - x is babdpus and hodfpus
   - x is babdpus
   - x is lewxpus
   - lewxpus is babdpus and hodfpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus or babqpus (第4层)
   节点Coverage: 5/5 = 100.00%
   前提条件Coverage: 3/3 = 100.00%
   各推理层点亮比例:
     第1层: 2/2 = 100.00%
     第2层: 1/1 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/7 = 0.00%
   可推导节点: 7/7
   Strict Error Rate: 0/7 = 0.00%
   严格有效节点: 7/7

   详细分析:
     完美推理: 7 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 18/50
================================================================================
记录索引: 17
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_17.json
✅ 使用缓存结果:
   - 句子数: 41
   - 提取的语句数: 38
   - 初始条件数: 6

=== Statement提取完成 ===
总句子数: 41
成功提取: 41
失败提取: 0
总statements数: 38

=== 开始清洗Statement格式 ===
原始statements数: 38
清洗后statements数: 38
过滤掉的statements数: 0

=== 开始标准化和解析节点 ===
清洗后statements数: 38
标准化后节点数: 38
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → kuvvpus and yezwpus (原始: x is kuvvpus and yezwpus)
  2. [actual] kebzpus → lupdpus and qitxpus (原始: kebzpus is lupdpus and qitxpus)
  3. [actual] kuvvpus → babdpus and bilkpus and zolvpus (原始: kuvvpus is babdpus and bilkpus and zolvpus)
  4. [actual] voqjpus → babqpus and babxpus and gazkpus (原始: voqjpus is babqpus and babxpus and gazkpus)
  5. [actual] lupdpus → voqjpus (原始: lupdpus is voqjpus)
  6. [actual] x → kebzpus and lizkpus (原始: x is kebzpus and lizkpus)
  7. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  8. [planning] x → babdpus (原始: x is babdpus)
  9. [planning] x → babqpus (原始: x is babqpus)
  10. [planning] x → babxpus (原始: x is babxpus)
  11. [actual] x → kebzpus and lizkpus (原始: x is kebzpus and lizkpus)
  12. [actual] x → kuvvpus and yezwpus (原始: x is kuvvpus and yezwpus)
  13. [actual] x → kuvvpus (原始: x is kuvvpus)
  14. [actual] kuvvpus → babdpus and bilkpus and zolvpus (原始: kuvvpus is babdpus and bilkpus and zolvpus)
  15. [actual] x → kuvvpus (原始: x is kuvvpus)
  16. [actual] kuvvpus → babdpus (原始: kuvvpus is babdpus)
  17. [actual] x → babdpus (原始: x is babdpus)
  18. [actual] x → babdpus (原始: x is babdpus)
  19. [planning] x → babqpus and babxpus (原始: x is babqpus and babxpus)
  20. [actual] voqjpus → babqpus and babxpus and gazkpus (原始: voqjpus is babqpus and babxpus and gazkpus)
  21. [actual] voqjpus → babqpus and babxpus (原始: voqjpus is babqpus and babxpus)
  22. [planning] x → voqjpus (原始: x is voqjpus)
  23. [planning] x → babqpus (原始: x is babqpus)
  24. [planning] x → babxpus (原始: x is babxpus)
  25. [actual] kebzpus → lupdpus and qitxpus (原始: kebzpus is lupdpus and qitxpus)
  26. [actual] lupdpus → voqjpus (原始: lupdpus is voqjpus)
  27. [actual] kebzpus → lupdpus (原始: kebzpus is lupdpus)
  28. [actual] lupdpus → voqjpus (原始: lupdpus is voqjpus)
  29. [actual] kebzpus → voqjpus (原始: kebzpus is voqjpus)
  30. [actual] x → kebzpus (原始: x is kebzpus)
  31. [actual] kebzpus → voqjpus (原始: kebzpus is voqjpus)
  32. [actual] x → voqjpus (原始: x is voqjpus)
  33. [actual] voqjpus → babqpus and babxpus (原始: voqjpus is babqpus and babxpus)
  34. [planning] x → babqpus and babxpus (原始: x is babqpus and babxpus)
  35. [actual] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  36. [actual] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  37. [actual] x → kuvvpus and yezwpus (原始: x is kuvvpus and yezwpus)
  38. [actual] x → lizkpus (原始: x is lizkpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 11
[后处理] 加载LoG图，包含 11 个节点
  LoG节点 0: x is babdpus and babqpus and babxpus (规则: CI, 深度: 1)
  LoG节点 1: x is babdpus (规则: CE, 深度: 2)
  LoG节点 2: x is babqpus and babxpus (规则: MP, 深度: 2)
  LoG节点 3: x is babdpus and bilkpus (规则: MP, 深度: 3)
  LoG节点 4: x is lupdpus (规则: MP, 深度: 3)
  LoG节点 5: lupdpus is babqpus and babxpus (规则: CE, 深度: 3)
  LoG节点 6: x is kuvvpus (规则: CE, 深度: 4)
  LoG节点 7: kuvvpus is babdpus and bilkpus (规则: CE, 深度: 4)
  LoG节点 8: x is kebzpus (规则: CE, 深度: 4)
  LoG节点 9: kebzpus is lupdpus (规则: CE, 深度: 4)
  LoG节点 10: lupdpus is babqpus and babxpus and gazkpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 38
   - 初始条件数: 6
   - LoG图节点数: 11

📋 初始条件列表:
    1. x is kuvvpus and yezwpus
    2. kebzpus is lupdpus and qitxpus
    3. kuvvpus is babdpus and bilkpus and zolvpus
    4. voqjpus is babqpus and babxpus and gazkpus
    5. lupdpus is voqjpus
    6. x is kebzpus and lizkpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 6 个前提节点

🔍 开始处理actual节点...

   节点 1: x is kuvvpus and yezwpus
      ↻ 重复节点，计数: 2

   节点 2: kebzpus is lupdpus and qitxpus
      ↻ 重复节点，计数: 2

   节点 3: kuvvpus is babdpus and bilkpus and zolvpus
      ↻ 重复节点，计数: 2

   节点 4: voqjpus is babqpus and babxpus and gazkpus
      ↻ 重复节点，计数: 2

   节点 5: lupdpus is voqjpus
      ↻ 重复节点，计数: 2

   节点 6: x is kebzpus and lizkpus
      ↻ 重复节点，计数: 2

   节点 7: x is kebzpus and lizkpus
      ↻ 重复节点，计数: 3

   节点 8: x is kuvvpus and yezwpus
      ↻ 重复节点，计数: 3

   节点 9: x is kuvvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is kuvvpus
      ✅ 验证成功 + LoG匹配

   节点 10: kuvvpus is babdpus and bilkpus and zolvpus
      ↻ 重复节点，计数: 3

   节点 11: x is kuvvpus
      ↻ 重复节点，计数: 2

   节点 12: kuvvpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kuvvpus is babdpus and bilkpus and zolvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kuvvpus is babdpus and bilkpus and zolvpus
  ✓ 点亮LoG节点: kuvvpus is babdpus and bilkpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 13: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: x is babdpus and bilkpus (深度3)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 14: x is babdpus
      ↻ 重复节点，计数: 2

   节点 15: voqjpus is babqpus and babxpus and gazkpus
      ↻ 重复节点，计数: 3

   节点 16: voqjpus is babqpus and babxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: voqjpus is babqpus → voqjpus is babxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: voqjpus is babqpus and babxpus and gazkpus

   节点 17: kebzpus is lupdpus and qitxpus
      ↻ 重复节点，计数: 3

   节点 18: lupdpus is voqjpus
      ↻ 重复节点，计数: 3

   节点 19: kebzpus is lupdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: kebzpus is lupdpus
      ✅ 验证成功 + LoG匹配

   节点 20: lupdpus is voqjpus
      ↻ 重复节点，计数: 4

   节点 21: kebzpus is voqjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: kebzpus is lupdpus → lupdpus is voqjpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: kebzpus is lupdpus
  - 前提: lupdpus is voqjpus

   节点 22: x is kebzpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is kebzpus
      ✅ 验证成功 + LoG匹配

   节点 23: kebzpus is voqjpus
      ↻ 重复节点，计数: 2

   节点 24: x is voqjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is kebzpus → kebzpus is voqjpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is kebzpus
  - 前提: kebzpus is voqjpus

   节点 25: voqjpus is babqpus and babxpus
      ↻ 重复节点，计数: 2

   节点 26: x is babdpus and babqpus and babxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus and babqpus and babxpus
[子树点亮]     └─ 点亮依赖节点: x is babqpus and babxpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is lupdpus (深度3)
[子树点亮]     └─ 点亮依赖节点: lupdpus is babqpus and babxpus (深度3)
[子树点亮]     └─ 点亮依赖节点: lupdpus is babqpus and babxpus and gazkpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
      ✅ 验证成功 + LoG匹配

   节点 27: x is babdpus and babqpus and babxpus
      ↻ 重复节点，计数: 2

   节点 28: x is kuvvpus and yezwpus
      ↻ 重复节点，计数: 4

   节点 29: x is lizkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is kebzpus and lizkpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is kebzpus and lizkpus

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 29
   - 新增节点: 10
   - 更新已存在节点: 19
   - 点亮的LoG节点: 11

🎯 推理质量统计:
   - 完美推理: 10 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 11节点, 6前提, 复杂度1-6

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 16
   - 前提节点: 6
   - 推理节点: 10
   - 幻觉节点: 0
   - 点亮LoG节点: 11

✅ 推理节点详情:
   🟢 x is kuvvpus (出现2次, 质量:perfect)
   🟢 kuvvpus is babdpus (出现1次, 质量:perfect)
   🟢 x is babdpus (出现2次, 质量:perfect)
   🟢 voqjpus is babqpus and babxpus (出现2次, 质量:perfect)
   🟢 kebzpus is lupdpus (出现1次, 质量:perfect)
   🟢 kebzpus is voqjpus (出现2次, 质量:perfect)
   🟢 x is kebzpus (出现1次, 质量:perfect)
   🟢 x is voqjpus (出现1次, 质量:perfect)
   🟢 x is babdpus and babqpus and babxpus (出现2次, 质量:perfect)
   🟢 x is lizkpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - lupdpus is babqpus and babxpus and gazkpus
   - kuvvpus is babdpus and bilkpus
   - kebzpus is lupdpus
   - x is lupdpus
   - lupdpus is babqpus and babxpus
   - x is kebzpus
   - x is babqpus and babxpus
   - x is babdpus
   - x is babdpus and bilkpus
   - x is kuvvpus
   - x is babdpus and babqpus and babxpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus and babqpus and babxpus (第4层)
   节点Coverage: 11/11 = 100.00%
   前提条件Coverage: 6/6 = 100.00%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/10 = 0.00%
   可推导节点: 10/10
   Strict Error Rate: 0/10 = 0.00%
   严格有效节点: 10/10

   详细分析:
     完美推理: 10 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 19/50
================================================================================
记录索引: 18
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_18.json
✅ 使用缓存结果:
   - 句子数: 58
   - 提取的语句数: 69
   - 初始条件数: 7

=== Statement提取完成 ===
总句子数: 58
成功提取: 58
失败提取: 0
总statements数: 69

=== 开始清洗Statement格式 ===
原始statements数: 69
清洗后statements数: 59
过滤掉的statements数: 10
清洗后的statements:
  1. [actual] dolmpus is kixqpus
  2. [actual] xenypus is qinypus and hakbpus
  3. [actual] x is dohypus
  4. [actual] dohypus is xenypus
  5. [actual] qinypus is dolmpus
  6. [actual] tulkpus is babdpus
  7. [actual] kixqpus is tulkpus
  8. [planning] x is babdpus or babqpus
  9. [planning] x is babdpus or babqpus
  10. [planning] x is babdpus
  11. [planning] x is babqpus
  12. [actual] x is dohypus
  13. [actual] dohypus is xenypus
  14. [actual] xenypus is qinypus and hakbpus
  15. [actual] xenypus is qinypus and hakbpus
  16. [actual] xenypus is qinypus and hakbpus
  17. [actual] dohypus is xenypus
  18. [actual] dohypus is qinypus and hakbpus
  19. [actual] x is dohypus
  20. [planning] x is xenypus
  21. [actual] x is qinypus and hakbpus
  22. [actual] qinypus is dolmpus
  23. [actual] x is qinypus
  24. [actual] x is dolmpus
  25. [actual] dolmpus is kixqpus
  26. [actual] x is dolmpus
  27. [actual] x is kixqpus
  28. [actual] kixqpus is tulkpus
  29. [actual] x is kixqpus
  30. [actual] x is tulkpus
  31. [actual] tulkpus is babdpus
  32. [actual] x is tulkpus
  33. [actual] x is babdpus
  34. [actual] x is babdpus
  35. [planning] x is babdpus or babqpus
  36. [actual] x is babdpus
  37. [actual] x is babdpus or babqpus
  38. [actual] x is babdpus
  39. [actual] xenypus is qinypus and hakbpus
  40. [actual] xenypus is both qinypus and hakbpus
  41. [actual] x is dohypus
  42. [actual] dohypus is xenypus
  43. [actual] dohypus is qinypus
  44. [actual] x is qinypus
  45. [actual] qinypus is dolmpus
  46. [actual] x is dolmpus
  47. [actual] dolmpus is kixqpus
  48. [planning] x is kixqpus
  49. [actual] kixqpus is tulkpus
  50. [actual] x is tulkpus
  51. [actual] tulkpus is babdpus
  52. [actual] x is babdpus
  53. [actual] x is babdpus
  54. [actual] x is babdpus
  55. [actual] x is babdpus or babqpus
  56. [planning] x is babdpus
  57. [actual] x is babdpus
  58. [planning] x is babqpus
  59. [planning] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 59
标准化后节点数: 58
过滤掉的无效实体数: 1
标准化后的节点:
  1. [actual] dolmpus → kixqpus (原始: dolmpus is kixqpus)
  2. [actual] xenypus → qinypus and hakbpus (原始: xenypus is qinypus and hakbpus)
  3. [actual] x → dohypus (原始: x is dohypus)
  4. [actual] dohypus → xenypus (原始: dohypus is xenypus)
  5. [actual] qinypus → dolmpus (原始: qinypus is dolmpus)
  6. [actual] tulkpus → babdpus (原始: tulkpus is babdpus)
  7. [actual] kixqpus → tulkpus (原始: kixqpus is tulkpus)
  8. [planning] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  9. [planning] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  10. [planning] x → babdpus (原始: x is babdpus)
  11. [planning] x → babqpus (原始: x is babqpus)
  12. [actual] x → dohypus (原始: x is dohypus)
  13. [actual] dohypus → xenypus (原始: dohypus is xenypus)
  14. [actual] xenypus → qinypus and hakbpus (原始: xenypus is qinypus and hakbpus)
  15. [actual] xenypus → qinypus and hakbpus (原始: xenypus is qinypus and hakbpus)
  16. [actual] xenypus → qinypus and hakbpus (原始: xenypus is qinypus and hakbpus)
  17. [actual] dohypus → xenypus (原始: dohypus is xenypus)
  18. [actual] dohypus → qinypus and hakbpus (原始: dohypus is qinypus and hakbpus)
  19. [actual] x → dohypus (原始: x is dohypus)
  20. [planning] x → xenypus (原始: x is xenypus)
  21. [actual] x → qinypus and hakbpus (原始: x is qinypus and hakbpus)
  22. [actual] qinypus → dolmpus (原始: qinypus is dolmpus)
  23. [actual] x → qinypus (原始: x is qinypus)
  24. [actual] x → dolmpus (原始: x is dolmpus)
  25. [actual] dolmpus → kixqpus (原始: dolmpus is kixqpus)
  26. [actual] x → dolmpus (原始: x is dolmpus)
  27. [actual] x → kixqpus (原始: x is kixqpus)
  28. [actual] kixqpus → tulkpus (原始: kixqpus is tulkpus)
  29. [actual] x → kixqpus (原始: x is kixqpus)
  30. [actual] x → tulkpus (原始: x is tulkpus)
  31. [actual] tulkpus → babdpus (原始: tulkpus is babdpus)
  32. [actual] x → tulkpus (原始: x is tulkpus)
  33. [actual] x → babdpus (原始: x is babdpus)
  34. [actual] x → babdpus (原始: x is babdpus)
  35. [planning] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  36. [actual] x → babdpus (原始: x is babdpus)
  37. [actual] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  38. [actual] x → babdpus (原始: x is babdpus)
  39. [actual] xenypus → qinypus and hakbpus (原始: xenypus is qinypus and hakbpus)
  40. [actual] x → dohypus (原始: x is dohypus)
  41. [actual] dohypus → xenypus (原始: dohypus is xenypus)
  42. [actual] dohypus → qinypus (原始: dohypus is qinypus)
  43. [actual] x → qinypus (原始: x is qinypus)
  44. [actual] qinypus → dolmpus (原始: qinypus is dolmpus)
  45. [actual] x → dolmpus (原始: x is dolmpus)
  46. [actual] dolmpus → kixqpus (原始: dolmpus is kixqpus)
  47. [planning] x → kixqpus (原始: x is kixqpus)
  48. [actual] kixqpus → tulkpus (原始: kixqpus is tulkpus)
  49. [actual] x → tulkpus (原始: x is tulkpus)
  50. [actual] tulkpus → babdpus (原始: tulkpus is babdpus)
  51. [actual] x → babdpus (原始: x is babdpus)
  52. [actual] x → babdpus (原始: x is babdpus)
  53. [actual] x → babdpus (原始: x is babdpus)
  54. [actual] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  55. [planning] x → babdpus (原始: x is babdpus)
  56. [actual] x → babdpus (原始: x is babdpus)
  57. [planning] x → babqpus (原始: x is babqpus)
  58. [planning] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 8
[后处理] 加载LoG图，包含 8 个节点
  LoG节点 0: x is babdpus or babqpus (规则: DI, 深度: 1)
  LoG节点 1: x is babdpus (规则: MP, 深度: 2)
  LoG节点 2: x is qinypus (规则: MP, 深度: 3)
  LoG节点 3: qinypus is babdpus (规则: MP, 深度: 3)
  LoG节点 4: x is xenypus (规则: MP, 深度: 4)
  LoG节点 5: xenypus is qinypus (规则: CE, 深度: 4)
  LoG节点 6: qinypus is kixqpus (规则: MP, 深度: 4)
  LoG节点 7: kixqpus is babdpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 58
   - 初始条件数: 7
   - LoG图节点数: 8

📋 初始条件列表:
    1. dolmpus is kixqpus
    2. xenypus is qinypus and hakbpus
    3. x is dohypus
    4. dohypus is xenypus
    5. qinypus is dolmpus
    6. tulkpus is babdpus
    7. kixqpus is tulkpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 7 个前提节点

🔍 开始处理actual节点...

   节点 1: dolmpus is kixqpus
      ↻ 重复节点，计数: 2

   节点 2: xenypus is qinypus and hakbpus
      ↻ 重复节点，计数: 2

   节点 3: x is dohypus
      ↻ 重复节点，计数: 2

   节点 4: dohypus is xenypus
      ↻ 重复节点，计数: 2

   节点 5: qinypus is dolmpus
      ↻ 重复节点，计数: 2

   节点 6: tulkpus is babdpus
      ↻ 重复节点，计数: 2

   节点 7: kixqpus is tulkpus
      ↻ 重复节点，计数: 2

   节点 8: x is dohypus
      ↻ 重复节点，计数: 3

   节点 9: dohypus is xenypus
      ↻ 重复节点，计数: 3

   节点 10: xenypus is qinypus and hakbpus
      ↻ 重复节点，计数: 3

   节点 11: xenypus is qinypus and hakbpus
      ↻ 重复节点，计数: 4

   节点 12: xenypus is qinypus and hakbpus
      ↻ 重复节点，计数: 5

   节点 13: dohypus is xenypus
      ↻ 重复节点，计数: 4

   节点 14: dohypus is qinypus and hakbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: dohypus is xenypus → xenypus is qinypus and hakbpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: dohypus is xenypus
  - 前提: xenypus is qinypus and hakbpus
  ✓ 点亮LoG节点: xenypus is qinypus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 15: x is dohypus
      ↻ 重复节点，计数: 4

   节点 16: x is qinypus and hakbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is dohypus → dohypus is qinypus and hakbpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is dohypus
  - 前提: dohypus is qinypus and hakbpus
  ✓ 点亮LoG节点: x is qinypus
[子树点亮]     └─ 点亮依赖节点: x is xenypus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 17: qinypus is dolmpus
      ↻ 重复节点，计数: 3

   节点 18: x is qinypus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 19: x is dolmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is dohypus → dohypus is dolmpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is dohypus
  - 前提: dohypus is xenypus
  - 前提: xenypus is qinypus and hakbpus
  - 前提: qinypus is dolmpus

   节点 20: dolmpus is kixqpus
      ↻ 重复节点，计数: 3

   节点 21: x is dolmpus
      ↻ 重复节点，计数: 2

   节点 22: x is kixqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is dohypus → dohypus is kixqpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is dohypus
  - 前提: dohypus is xenypus
  - 前提: xenypus is qinypus and hakbpus
  - 前提: qinypus is dolmpus
  - 前提: dolmpus is kixqpus
  ✓ 点亮LoG节点: qinypus is kixqpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 23: kixqpus is tulkpus
      ↻ 重复节点，计数: 3

   节点 24: x is kixqpus
      ↻ 重复节点，计数: 2

   节点 25: x is tulkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is dohypus → dohypus is tulkpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is dohypus
  - 前提: dohypus is xenypus
  - 前提: xenypus is qinypus and hakbpus
  - 前提: qinypus is dolmpus
  - 前提: dolmpus is kixqpus
  - 前提: kixqpus is tulkpus

   节点 26: tulkpus is babdpus
      ↻ 重复节点，计数: 3

   节点 27: x is tulkpus
      ↻ 重复节点，计数: 2

   节点 28: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: qinypus is babdpus (深度3)
[子树点亮]     └─ 点亮依赖节点: kixqpus is babdpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 29: x is babdpus
      ↻ 重复节点，计数: 2

   节点 30: x is babdpus
      ↻ 重复节点，计数: 3

   节点 31: x is babdpus or babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus or babqpus
      ✅ 验证成功 + LoG匹配

   节点 32: x is babdpus
      ↻ 重复节点，计数: 4

   节点 33: xenypus is qinypus and hakbpus
      ↻ 重复节点，计数: 6

   节点 34: x is dohypus
      ↻ 重复节点，计数: 5

   节点 35: dohypus is xenypus
      ↻ 重复节点，计数: 5

   节点 36: dohypus is qinypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: dohypus is qinypus and hakbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: dohypus is qinypus and hakbpus

   节点 37: x is qinypus
      ↻ 重复节点，计数: 2

   节点 38: qinypus is dolmpus
      ↻ 重复节点，计数: 4

   节点 39: x is dolmpus
      ↻ 重复节点，计数: 3

   节点 40: dolmpus is kixqpus
      ↻ 重复节点，计数: 4

   节点 41: kixqpus is tulkpus
      ↻ 重复节点，计数: 4

   节点 42: x is tulkpus
      ↻ 重复节点，计数: 3

   节点 43: tulkpus is babdpus
      ↻ 重复节点，计数: 4

   节点 44: x is babdpus
      ↻ 重复节点，计数: 5

   节点 45: x is babdpus
      ↻ 重复节点，计数: 6

   节点 46: x is babdpus
      ↻ 重复节点，计数: 7

   节点 47: x is babdpus or babqpus
      ↻ 重复节点，计数: 2

   节点 48: x is babdpus
      ↻ 重复节点，计数: 8

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 48
   - 新增节点: 9
   - 更新已存在节点: 39
   - 点亮的LoG节点: 8

🎯 推理质量统计:
   - 完美推理: 9 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 8节点, 7前提, 复杂度1-7

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 16
   - 前提节点: 7
   - 推理节点: 9
   - 幻觉节点: 0
   - 点亮LoG节点: 8

✅ 推理节点详情:
   🟢 dohypus is qinypus and hakbpus (出现1次, 质量:perfect)
   🟢 x is qinypus and hakbpus (出现1次, 质量:perfect)
   🟢 x is qinypus (出现2次, 质量:perfect)
   🟢 x is dolmpus (出现3次, 质量:perfect)
   🟢 x is kixqpus (出现2次, 质量:perfect)
   🟢 x is tulkpus (出现3次, 质量:perfect)
   🟢 x is babdpus (出现8次, 质量:perfect)
   🟢 x is babdpus or babqpus (出现2次, 质量:perfect)
   🟢 dohypus is qinypus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - qinypus is kixqpus
   - x is xenypus
   - qinypus is babdpus
   - xenypus is qinypus
   - kixqpus is babdpus
   - x is babdpus
   - x is qinypus
   - x is babdpus or babqpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus or babqpus (第4层)
   节点Coverage: 8/8 = 100.00%
   前提条件Coverage: 7/7 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/9 = 0.00%
   可推导节点: 9/9
   Strict Error Rate: 0/9 = 0.00%
   严格有效节点: 9/9

   详细分析:
     完美推理: 9 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 20/50
================================================================================
记录索引: 19
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_19.json
✅ 使用缓存结果:
   - 句子数: 178
   - 提取的语句数: 303
   - 初始条件数: 7

=== Statement提取完成 ===
总句子数: 178
成功提取: 177
失败提取: 1
总statements数: 303

=== 开始清洗Statement格式 ===
原始statements数: 303
清洗后statements数: 169
过滤掉的statements数: 134
清洗后的statements:
  1. [planning] x is babdpus
  2. [actual] x is qowjpus
  3. [actual] kotlpus is dezqpus
  4. [actual] dezqpus is babdpus and rayfpus and mazrpus
  5. [actual] x is qowjpus
  6. [actual] kotlpus is dezqpus
  7. [actual] dezqpus is babdpus and rayfpus and mazrpus
  8. [planning] dezqpus is babdpus and rayfpus and mazrpus
  9. [actual] dezqpus is babdpus and rayfpus and mazrpus
  10. [planning] x is babdpus
  11. [planning] x is babdpus
  12. [planning] x is babdpus
  13. [actual] dezqpus is babdpus and rayfpus and mazrpus
  14. [actual] dezqpus is a member of all three categories
  15. [actual] qowjpus is kukwpus and coqypus
  16. [planning] qowjpus is kukwpus
  17. [planning] qowjpus is coqypus
  18. [actual] x is qowjpus
  19. [planning] x is qowjpus
  20. [planning] x is qowjpus
  21. [actual] x is qowjpus
  22. [actual] x is qowjpus
  23. [planning] x is babdpus
  24. [actual] x is a member of qowjpus
  25. [planning] x is a member of babdpus
  26. [planning] x is a member of qowjpus
  27. [planning] qowjpus is babdpus through a chain of membership
  28. [actual] kotlpus is dezqpus
  29. [actual] dezqpus is babdpus
  30. [actual] kotlpus is dezqpus
  31. [actual] dezqpus is babdpus
  32. [planning] kotlpus is babdpus
  33. [planning] dezqpus is a category that contains kotlpus
  34. [planning] babdpus is a category that contains dezqpus
  35. [planning] kotlpus is a category that contains babdpus
  36. [actual] x is qowjpus
  37. [actual] x is an instance of qowjpus
  38. [actual] kotlpus is dezqpus
  39. [planning] kotlpus is dezqpus
  40. [planning] kotlpus is dezqpus
  41. [actual] dezqpus is babdpus and rayfpus and mazrpus
  42. [actual] dezqpus is a member of babdpus category
  43. [planning] kotlpus is dezqpus
  44. [planning] kotlpus is a member of dezqpus
  45. [planning] kotlpus is a member of dezqpus
  46. [planning] dezqpus is a member of babdpus
  47. [planning] kotlpus is a member of babdpus
  48. [actual] babdpus is a set that contains dezqpus
  49. [actual] dezqpus is a set that contains kotlpus
  50. [actual] kotlpus is an element of dezqpus
  51. [actual] dezqpus is an element of babdpus
  52. [planning] kotlpus is an element of babdpus
  53. [planning] babdpus is a set that contains all elements of its elements
  54. [planning] x is babdpus
  55. [planning] x is a member of something that is a member of babdpus
  56. [actual] nolspus is purmpus and yaqfpus
  57. [actual] nolspus is a member of multiple categories
  58. [actual] qowjpus is kukwpus and coqypus
  59. [actual] qowjpus is a member of kukwpus and coqypus
  60. [planning] x is babdpus
  61. [actual] x is a member of qowjpus
  62. [planning] qowjpus is a member of babdpus
  63. [planning] x is a member of babdpus
  64. [actual] qowjpus is a member of babdpus
  65. [actual] qowjpus is an instance of babdpus
  66. [actual] x is an instance of qowjpus
  67. [planning] x is babdpus
  68. [actual] dezqpus is an object of class babdpus
  69. [actual] kotlpus is an instance of dezqpus
  70. [actual] dezqpus is a class itself
  71. [actual] kotlpus is an object of class dezqpus
  72. [planning] dezqpus is a subclass of babdpus
  73. [planning] x is babdpus
  74. [actual] x is qowjpus
  75. [actual] kotlpus is dezqpus
  76. [actual] dezqpus is babdpus and rayfpus and mazrpus
  77. [actual] kukwpus is nolspus and mehspus
  78. [actual] purmpus is kotlpus
  79. [actual] nolspus is purmpus and yaqfpus
  80. [actual] qowjpus is kukwpus and coqypus
  81. [planning] x is babdpus
  82. [actual] x is qowjpus
  83. [actual] qowjpus is kukwpus
  84. [planning] x is kukwpus
  85. [actual] dezqpus is babdpus
  86. [planning] x is dezqpus
  87. [actual] kotlpus is dezqpus
  88. [actual] purmpus is kotlpus
  89. [actual] nolspus is purmpus
  90. [actual] kukwpus is nolspus
  91. [actual] qowjpus is kukwpus
  92. [actual] x is qowjpus
  93. [planning] x is kukwpus
  94. [planning] dezqpus is babdpus
  95. [actual] dezqpus is babdpus
  96. [planning] dezqpus is babdpus
  97. [actual] kotlpus is dezqpus
  98. [actual] purmpus is kotlpus
  99. [actual] x is qowjpus
  100. [planning] x is a member of some set
  101. [planning] x is a subset
  102. [planning] x is a set itself
  103. [actual] kotlpus is dezqpus
  104. [planning] kotlpus is a subset of dezqpus
  105. [planning] kotlpus is a set
  106. [planning] dezqpus is a set
  107. [actual] dezqpus is babdpus
  108. [planning] dezqpus is a subset of babdpus
  109. [actual] dezqpus is babdpus and rayfpus and mazrpus
  110. [planning] dezqpus is a subset of babdpus
  111. [planning] dezqpus is a subset of rayfpus
  112. [planning] dezqpus is a subset of mazrpus
  113. [planning] dezqpus is all three
  114. [planning] x is babdpus
  115. [planning] x is qowjpus
  116. [planning] x is qowjpus
  117. [planning] x is qowjpus
  118. [planning] x is babdpus
  119. [actual] qowjpus is kukwpus
  120. [actual] x is kukwpus
  121. [planning] x is kukwpus
  122. [actual] x is qowjpus
  123. [planning] x is qowjpus
  124. [planning] x is qowjpus
  125. [actual] kotlpus is dezqpus
  126. [planning] kotlpus is dezqpus
  127. [actual] x is qowjpus
  128. [actual] qowjpus is a category
  129. [actual] kotlpus is dezqpus
  130. [actual] dezqpus is babdpus
  131. [actual] purmpus is kotlpus
  132. [planning] purmpus is kotlpus
  133. [planning] purmpus is a category
  134. [planning] kotlpus is a category
  135. [actual] nolspus is purmpus
  136. [actual] nolspus is purmpus and yaqfpus
  137. [planning] nolspus is purmpus and yaqfpus
  138. [actual] nolspus is a subset of purmpus
  139. [actual] nolspus is a subset of yaqfpus
  140. [actual] kukwpus is nolspus and mehspus
  141. [actual] qowjpus is kukwpus and coqypus
  142. [actual] x is qowjpus
  143. [actual] qowjpus is kukwpus
  144. [actual] x is qowjpus
  145. [actual] x is kukwpus
  146. [actual] kukwpus is nolspus
  147. [actual] x is nolspus
  148. [actual] nolspus is purmpus
  149. [actual] x is purmpus
  150. [actual] purmpus is kotlpus
  151. [actual] x is kotlpus
  152. [actual] kotlpus is dezqpus
  153. [actual] x is dezqpus
  154. [actual] dezqpus is babdpus
  155. [actual] x is babdpus
  156. [planning] x is babdpus
  157. [actual] dezqpus is rayfpus and mazrpus
  158. [planning] x is rayfpus
  159. [planning] x is mazrpus
  160. [actual] dezqpus is babdpus
  161. [actual] kotlpus is dezqpus
  162. [actual] purmpus is kotlpus
  163. [actual] nolspus is purmpus and yaqfpus
  164. [actual] kukwpus is nolspus and mehspus
  165. [actual] qowjpus is kukwpus and coqypus
  166. [actual] x is qowjpus
  167. [planning] x is babdpus
  168. [actual] x is babdpus
  169. [planning] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 169
标准化后节点数: 119
过滤掉的无效实体数: 50
标准化后的节点:
  1. [planning] x → babdpus (原始: x is babdpus)
  2. [actual] x → qowjpus (原始: x is qowjpus)
  3. [actual] kotlpus → dezqpus (原始: kotlpus is dezqpus)
  4. [actual] dezqpus → babdpus and rayfpus and mazrpus (原始: dezqpus is babdpus and rayfpus and mazrpus)
  5. [actual] x → qowjpus (原始: x is qowjpus)
  6. [actual] kotlpus → dezqpus (原始: kotlpus is dezqpus)
  7. [actual] dezqpus → babdpus and rayfpus and mazrpus (原始: dezqpus is babdpus and rayfpus and mazrpus)
  8. [planning] dezqpus → babdpus and rayfpus and mazrpus (原始: dezqpus is babdpus and rayfpus and mazrpus)
  9. [actual] dezqpus → babdpus and rayfpus and mazrpus (原始: dezqpus is babdpus and rayfpus and mazrpus)
  10. [planning] x → babdpus (原始: x is babdpus)
  11. [planning] x → babdpus (原始: x is babdpus)
  12. [planning] x → babdpus (原始: x is babdpus)
  13. [actual] dezqpus → babdpus and rayfpus and mazrpus (原始: dezqpus is babdpus and rayfpus and mazrpus)
  14. [actual] qowjpus → kukwpus and coqypus (原始: qowjpus is kukwpus and coqypus)
  15. [planning] qowjpus → kukwpus (原始: qowjpus is kukwpus)
  16. [planning] qowjpus → coqypus (原始: qowjpus is coqypus)
  17. [actual] x → qowjpus (原始: x is qowjpus)
  18. [planning] x → qowjpus (原始: x is qowjpus)
  19. [planning] x → qowjpus (原始: x is qowjpus)
  20. [actual] x → qowjpus (原始: x is qowjpus)
  21. [actual] x → qowjpus (原始: x is qowjpus)
  22. [planning] x → babdpus (原始: x is babdpus)
  23. [actual] kotlpus → dezqpus (原始: kotlpus is dezqpus)
  24. [actual] dezqpus → babdpus (原始: dezqpus is babdpus)
  25. [actual] kotlpus → dezqpus (原始: kotlpus is dezqpus)
  26. [actual] dezqpus → babdpus (原始: dezqpus is babdpus)
  27. [planning] kotlpus → babdpus (原始: kotlpus is babdpus)
  28. [actual] x → qowjpus (原始: x is qowjpus)
  29. [actual] kotlpus → dezqpus (原始: kotlpus is dezqpus)
  30. [planning] kotlpus → dezqpus (原始: kotlpus is dezqpus)
  31. [planning] kotlpus → dezqpus (原始: kotlpus is dezqpus)
  32. [actual] dezqpus → babdpus and rayfpus and mazrpus (原始: dezqpus is babdpus and rayfpus and mazrpus)
  33. [planning] kotlpus → dezqpus (原始: kotlpus is dezqpus)
  34. [planning] x → babdpus (原始: x is babdpus)
  35. [actual] nolspus → purmpus and yaqfpus (原始: nolspus is purmpus and yaqfpus)
  36. [actual] qowjpus → kukwpus and coqypus (原始: qowjpus is kukwpus and coqypus)
  37. [planning] x → babdpus (原始: x is babdpus)
  38. [planning] x → babdpus (原始: x is babdpus)
  39. [planning] x → babdpus (原始: x is babdpus)
  40. [actual] x → qowjpus (原始: x is qowjpus)
  41. [actual] kotlpus → dezqpus (原始: kotlpus is dezqpus)
  42. [actual] dezqpus → babdpus and rayfpus and mazrpus (原始: dezqpus is babdpus and rayfpus and mazrpus)
  43. [actual] kukwpus → nolspus and mehspus (原始: kukwpus is nolspus and mehspus)
  44. [actual] purmpus → kotlpus (原始: purmpus is kotlpus)
  45. [actual] nolspus → purmpus and yaqfpus (原始: nolspus is purmpus and yaqfpus)
  46. [actual] qowjpus → kukwpus and coqypus (原始: qowjpus is kukwpus and coqypus)
  47. [planning] x → babdpus (原始: x is babdpus)
  48. [actual] x → qowjpus (原始: x is qowjpus)
  49. [actual] qowjpus → kukwpus (原始: qowjpus is kukwpus)
  50. [planning] x → kukwpus (原始: x is kukwpus)
  51. [actual] dezqpus → babdpus (原始: dezqpus is babdpus)
  52. [planning] x → dezqpus (原始: x is dezqpus)
  53. [actual] kotlpus → dezqpus (原始: kotlpus is dezqpus)
  54. [actual] purmpus → kotlpus (原始: purmpus is kotlpus)
  55. [actual] nolspus → purmpus (原始: nolspus is purmpus)
  56. [actual] kukwpus → nolspus (原始: kukwpus is nolspus)
  57. [actual] qowjpus → kukwpus (原始: qowjpus is kukwpus)
  58. [actual] x → qowjpus (原始: x is qowjpus)
  59. [planning] x → kukwpus (原始: x is kukwpus)
  60. [planning] dezqpus → babdpus (原始: dezqpus is babdpus)
  61. [actual] dezqpus → babdpus (原始: dezqpus is babdpus)
  62. [planning] dezqpus → babdpus (原始: dezqpus is babdpus)
  63. [actual] kotlpus → dezqpus (原始: kotlpus is dezqpus)
  64. [actual] purmpus → kotlpus (原始: purmpus is kotlpus)
  65. [actual] x → qowjpus (原始: x is qowjpus)
  66. [actual] kotlpus → dezqpus (原始: kotlpus is dezqpus)
  67. [actual] dezqpus → babdpus (原始: dezqpus is babdpus)
  68. [actual] dezqpus → babdpus and rayfpus and mazrpus (原始: dezqpus is babdpus and rayfpus and mazrpus)
  69. [planning] x → babdpus (原始: x is babdpus)
  70. [planning] x → qowjpus (原始: x is qowjpus)
  71. [planning] x → qowjpus (原始: x is qowjpus)
  72. [planning] x → qowjpus (原始: x is qowjpus)
  73. [planning] x → babdpus (原始: x is babdpus)
  74. [actual] qowjpus → kukwpus (原始: qowjpus is kukwpus)
  75. [actual] x → kukwpus (原始: x is kukwpus)
  76. [planning] x → kukwpus (原始: x is kukwpus)
  77. [actual] x → qowjpus (原始: x is qowjpus)
  78. [planning] x → qowjpus (原始: x is qowjpus)
  79. [planning] x → qowjpus (原始: x is qowjpus)
  80. [actual] kotlpus → dezqpus (原始: kotlpus is dezqpus)
  81. [planning] kotlpus → dezqpus (原始: kotlpus is dezqpus)
  82. [actual] x → qowjpus (原始: x is qowjpus)
  83. [actual] kotlpus → dezqpus (原始: kotlpus is dezqpus)
  84. [actual] dezqpus → babdpus (原始: dezqpus is babdpus)
  85. [actual] purmpus → kotlpus (原始: purmpus is kotlpus)
  86. [planning] purmpus → kotlpus (原始: purmpus is kotlpus)
  87. [actual] nolspus → purmpus (原始: nolspus is purmpus)
  88. [actual] nolspus → purmpus and yaqfpus (原始: nolspus is purmpus and yaqfpus)
  89. [planning] nolspus → purmpus and yaqfpus (原始: nolspus is purmpus and yaqfpus)
  90. [actual] kukwpus → nolspus and mehspus (原始: kukwpus is nolspus and mehspus)
  91. [actual] qowjpus → kukwpus and coqypus (原始: qowjpus is kukwpus and coqypus)
  92. [actual] x → qowjpus (原始: x is qowjpus)
  93. [actual] qowjpus → kukwpus (原始: qowjpus is kukwpus)
  94. [actual] x → qowjpus (原始: x is qowjpus)
  95. [actual] x → kukwpus (原始: x is kukwpus)
  96. [actual] kukwpus → nolspus (原始: kukwpus is nolspus)
  97. [actual] x → nolspus (原始: x is nolspus)
  98. [actual] nolspus → purmpus (原始: nolspus is purmpus)
  99. [actual] x → purmpus (原始: x is purmpus)
  100. [actual] purmpus → kotlpus (原始: purmpus is kotlpus)
  101. [actual] x → kotlpus (原始: x is kotlpus)
  102. [actual] kotlpus → dezqpus (原始: kotlpus is dezqpus)
  103. [actual] x → dezqpus (原始: x is dezqpus)
  104. [actual] dezqpus → babdpus (原始: dezqpus is babdpus)
  105. [actual] x → babdpus (原始: x is babdpus)
  106. [planning] x → babdpus (原始: x is babdpus)
  107. [actual] dezqpus → rayfpus and mazrpus (原始: dezqpus is rayfpus and mazrpus)
  108. [planning] x → rayfpus (原始: x is rayfpus)
  109. [planning] x → mazrpus (原始: x is mazrpus)
  110. [actual] dezqpus → babdpus (原始: dezqpus is babdpus)
  111. [actual] kotlpus → dezqpus (原始: kotlpus is dezqpus)
  112. [actual] purmpus → kotlpus (原始: purmpus is kotlpus)
  113. [actual] nolspus → purmpus and yaqfpus (原始: nolspus is purmpus and yaqfpus)
  114. [actual] kukwpus → nolspus and mehspus (原始: kukwpus is nolspus and mehspus)
  115. [actual] qowjpus → kukwpus and coqypus (原始: qowjpus is kukwpus and coqypus)
  116. [actual] x → qowjpus (原始: x is qowjpus)
  117. [planning] x → babdpus (原始: x is babdpus)
  118. [actual] x → babdpus (原始: x is babdpus)
  119. [planning] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 11
[后处理] 加载LoG图，包含 11 个节点
  LoG节点 0: x is babdpus (规则: MP, 深度: 1)
  LoG节点 1: x is purmpus (规则: MP, 深度: 2)
  LoG节点 2: purmpus is babdpus (规则: CE, 深度: 2)
  LoG节点 3: x is kukwpus (规则: CE, 深度: 3)
  LoG节点 4: kukwpus is purmpus (规则: MP, 深度: 3)
  LoG节点 5: purmpus is babdpus and rayfpus (规则: MP, 深度: 3)
  LoG节点 6: x is kukwpus and coqypus (规则: MP, 深度: 4)
  LoG节点 7: kukwpus is nolspus (规则: CE, 深度: 4)
  LoG节点 8: nolspus is purmpus (规则: CE, 深度: 4)
  LoG节点 9: purmpus is dezqpus (规则: MP, 深度: 4)
  LoG节点 10: dezqpus is babdpus and rayfpus (规则: CE, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 119
   - 初始条件数: 7
   - LoG图节点数: 11

📋 初始条件列表:
    1. x is qowjpus
    2. kotlpus is dezqpus
    3. dezqpus is babdpus and rayfpus and mazrpus
    4. kukwpus is nolspus and mehspus
    5. purmpus is kotlpus
    6. nolspus is purmpus and yaqfpus
    7. qowjpus is kukwpus and coqypus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 7 个前提节点

🔍 开始处理actual节点...

   节点 1: x is qowjpus
      ↻ 重复节点，计数: 2

   节点 2: kotlpus is dezqpus
      ↻ 重复节点，计数: 2

   节点 3: dezqpus is babdpus and rayfpus and mazrpus
      ↻ 重复节点，计数: 2

   节点 4: x is qowjpus
      ↻ 重复节点，计数: 3

   节点 5: kotlpus is dezqpus
      ↻ 重复节点，计数: 3

   节点 6: dezqpus is babdpus and rayfpus and mazrpus
      ↻ 重复节点，计数: 3

   节点 7: dezqpus is babdpus and rayfpus and mazrpus
      ↻ 重复节点，计数: 4

   节点 8: dezqpus is babdpus and rayfpus and mazrpus
      ↻ 重复节点，计数: 5

   节点 9: qowjpus is kukwpus and coqypus
      ↻ 重复节点，计数: 2

   节点 10: x is qowjpus
      ↻ 重复节点，计数: 4

   节点 11: x is qowjpus
      ↻ 重复节点，计数: 5

   节点 12: x is qowjpus
      ↻ 重复节点，计数: 6

   节点 13: kotlpus is dezqpus
      ↻ 重复节点，计数: 4

   节点 14: dezqpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: dezqpus is babdpus and rayfpus and mazrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: dezqpus is babdpus and rayfpus and mazrpus
  ✓ 点亮LoG节点: dezqpus is babdpus and rayfpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 15: kotlpus is dezqpus
      ↻ 重复节点，计数: 5

   节点 16: dezqpus is babdpus
      ↻ 重复节点，计数: 2

   节点 17: x is qowjpus
      ↻ 重复节点，计数: 7

   节点 18: kotlpus is dezqpus
      ↻ 重复节点，计数: 6

   节点 19: dezqpus is babdpus and rayfpus and mazrpus
      ↻ 重复节点，计数: 6

   节点 20: nolspus is purmpus and yaqfpus
      ↻ 重复节点，计数: 2

   节点 21: qowjpus is kukwpus and coqypus
      ↻ 重复节点，计数: 3

   节点 22: x is qowjpus
      ↻ 重复节点，计数: 8

   节点 23: kotlpus is dezqpus
      ↻ 重复节点，计数: 7

   节点 24: dezqpus is babdpus and rayfpus and mazrpus
      ↻ 重复节点，计数: 7

   节点 25: kukwpus is nolspus and mehspus
      ↻ 重复节点，计数: 2

   节点 26: purmpus is kotlpus
      ↻ 重复节点，计数: 2

   节点 27: nolspus is purmpus and yaqfpus
      ↻ 重复节点，计数: 3

   节点 28: qowjpus is kukwpus and coqypus
      ↻ 重复节点，计数: 4

   节点 29: x is qowjpus
      ↻ 重复节点，计数: 9

   节点 30: qowjpus is kukwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qowjpus is kukwpus and coqypus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qowjpus is kukwpus and coqypus

   节点 31: dezqpus is babdpus
      ↻ 重复节点，计数: 3

   节点 32: kotlpus is dezqpus
      ↻ 重复节点，计数: 8

   节点 33: purmpus is kotlpus
      ↻ 重复节点，计数: 3

   节点 34: nolspus is purmpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: nolspus is purmpus
      ✅ 验证成功 + LoG匹配

   节点 35: kukwpus is nolspus
      🔍 验证新节点...
[后处理] 点亮LoG节点: kukwpus is nolspus
      ✅ 验证成功 + LoG匹配

   节点 36: qowjpus is kukwpus
      ↻ 重复节点，计数: 2

   节点 37: x is qowjpus
      ↻ 重复节点，计数: 10

   节点 38: dezqpus is babdpus
      ↻ 重复节点，计数: 4

   节点 39: kotlpus is dezqpus
      ↻ 重复节点，计数: 9

   节点 40: purmpus is kotlpus
      ↻ 重复节点，计数: 4

   节点 41: x is qowjpus
      ↻ 重复节点，计数: 11

   节点 42: kotlpus is dezqpus
      ↻ 重复节点，计数: 10

   节点 43: dezqpus is babdpus
      ↻ 重复节点，计数: 5

   节点 44: dezqpus is babdpus and rayfpus and mazrpus
      ↻ 重复节点，计数: 8

   节点 45: qowjpus is kukwpus
      ↻ 重复节点，计数: 3

   节点 46: x is kukwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is kukwpus
[子树点亮]     └─ 点亮依赖节点: x is kukwpus and coqypus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 47: x is qowjpus
      ↻ 重复节点，计数: 12

   节点 48: kotlpus is dezqpus
      ↻ 重复节点，计数: 11

   节点 49: x is qowjpus
      ↻ 重复节点，计数: 13

   节点 50: kotlpus is dezqpus
      ↻ 重复节点，计数: 12

   节点 51: dezqpus is babdpus
      ↻ 重复节点，计数: 6

   节点 52: purmpus is kotlpus
      ↻ 重复节点，计数: 5

   节点 53: nolspus is purmpus
      ↻ 重复节点，计数: 2

   节点 54: nolspus is purmpus and yaqfpus
      ↻ 重复节点，计数: 4

   节点 55: kukwpus is nolspus and mehspus
      ↻ 重复节点，计数: 3

   节点 56: qowjpus is kukwpus and coqypus
      ↻ 重复节点，计数: 5

   节点 57: x is qowjpus
      ↻ 重复节点，计数: 14

   节点 58: qowjpus is kukwpus
      ↻ 重复节点，计数: 4

   节点 59: x is qowjpus
      ↻ 重复节点，计数: 15

   节点 60: x is kukwpus
      ↻ 重复节点，计数: 2

   节点 61: kukwpus is nolspus
      ↻ 重复节点，计数: 2

   节点 62: x is nolspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qowjpus → qowjpus is nolspus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is qowjpus
  - 前提: qowjpus is kukwpus
  - 前提: kukwpus is nolspus

   节点 63: nolspus is purmpus
      ↻ 重复节点，计数: 3

   节点 64: x is purmpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is purmpus
[子树点亮]     └─ 点亮依赖节点: kukwpus is purmpus (深度3)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 65: purmpus is kotlpus
      ↻ 重复节点，计数: 6

   节点 66: x is kotlpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qowjpus → qowjpus is kotlpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is qowjpus
  - 前提: qowjpus is kukwpus
  - 前提: kukwpus is nolspus
  - 前提: nolspus is purmpus
  - 前提: purmpus is kotlpus

   节点 67: kotlpus is dezqpus
      ↻ 重复节点，计数: 13

   节点 68: x is dezqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qowjpus → qowjpus is dezqpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is qowjpus
  - 前提: qowjpus is kukwpus
  - 前提: kukwpus is nolspus
  - 前提: nolspus is purmpus
  - 前提: purmpus is kotlpus
  - 前提: kotlpus is dezqpus
  ✓ 点亮LoG节点: purmpus is dezqpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 69: dezqpus is babdpus
      ↻ 重复节点，计数: 7

   节点 70: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: purmpus is babdpus (深度2)
[子树点亮]     └─ 点亮依赖节点: purmpus is babdpus and rayfpus (深度3)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 71: dezqpus is rayfpus and mazrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: dezqpus is rayfpus → dezqpus is mazrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: dezqpus is babdpus and rayfpus and mazrpus

   节点 72: dezqpus is babdpus
      ↻ 重复节点，计数: 8

   节点 73: kotlpus is dezqpus
      ↻ 重复节点，计数: 14

   节点 74: purmpus is kotlpus
      ↻ 重复节点，计数: 7

   节点 75: nolspus is purmpus and yaqfpus
      ↻ 重复节点，计数: 5

   节点 76: kukwpus is nolspus and mehspus
      ↻ 重复节点，计数: 4

   节点 77: qowjpus is kukwpus and coqypus
      ↻ 重复节点，计数: 6

   节点 78: x is qowjpus
      ↻ 重复节点，计数: 16

   节点 79: x is babdpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 79
   - 新增节点: 11
   - 更新已存在节点: 68
   - 点亮的LoG节点: 11

🎯 推理质量统计:
   - 完美推理: 11 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 11节点, 7前提, 复杂度1-7

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 18
   - 前提节点: 7
   - 推理节点: 11
   - 幻觉节点: 0
   - 点亮LoG节点: 11

✅ 推理节点详情:
   🟢 dezqpus is babdpus (出现8次, 质量:perfect)
   🟢 qowjpus is kukwpus (出现4次, 质量:perfect)
   🟢 nolspus is purmpus (出现3次, 质量:perfect)
   🟢 kukwpus is nolspus (出现2次, 质量:perfect)
   🟢 x is kukwpus (出现2次, 质量:perfect)
   🟢 x is nolspus (出现1次, 质量:perfect)
   🟢 x is purmpus (出现1次, 质量:perfect)
   🟢 x is kotlpus (出现1次, 质量:perfect)
   🟢 x is dezqpus (出现1次, 质量:perfect)
   🟢 x is babdpus (出现2次, 质量:perfect)
   🟢 dezqpus is rayfpus and mazrpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - purmpus is babdpus and rayfpus
   - nolspus is purmpus
   - x is kukwpus
   - purmpus is dezqpus
   - purmpus is babdpus
   - x is babdpus
   - x is kukwpus and coqypus
   - kukwpus is nolspus
   - dezqpus is babdpus and rayfpus
   - kukwpus is purmpus
   - x is purmpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus (第4层)
   节点Coverage: 11/11 = 100.00%
   前提条件Coverage: 7/7 = 100.00%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/11 = 0.00%
   可推导节点: 11/11
   Strict Error Rate: 0/11 = 0.00%
   严格有效节点: 11/11

   详细分析:
     完美推理: 11 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 21/50
================================================================================
记录索引: 20
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_20.json
✅ 使用缓存结果:
   - 句子数: 136
   - 提取的语句数: 202
   - 初始条件数: 9

=== Statement提取完成 ===
总句子数: 136
成功提取: 136
失败提取: 0
总statements数: 202

=== 开始清洗Statement格式 ===
原始statements数: 202
清洗后statements数: 153
过滤掉的statements数: 49
清洗后的statements:
  1. [actual] ceslpus is babqpus
  2. [actual] x is wegtpus and vupypus
  3. [actual] rupwpus is hujfpus and qunjpus
  4. [actual] wimfpus is ditypus and refrpus
  5. [actual] hammpus is ceslpus
  6. [actual] hujfpus is hammpus
  7. [actual] ceslpus is babdpus
  8. [actual] wegtpus is wimfpus
  9. [actual] ditypus is rupwpus
  10. [planning] x is babdpus and babqpus
  11. [planning] x is babdpus
  12. [planning] x is babqpus
  13. [actual] x is wegtpus and vupypus
  14. [actual] x is wegtpus and vupypus
  15. [planning] x is babdpus and babqpus
  16. [actual] wegtpus is wimfpus
  17. [actual] wegtpus is wimfpus
  18. [planning] x is wegtpus
  19. [actual] wegtpus is wimfpus
  20. [planning] x is wimfpus
  21. [actual] hammpus is ceslpus
  22. [actual] ceslpus is babqpus
  23. [planning] hammpus is ceslpus
  24. [planning] ceslpus is babqpus
  25. [planning] hammpus is babqpus
  26. [actual] hujfpus is hammpus
  27. [actual] rupwpus is hujfpus and qunjpus
  28. [actual] hujfpus is hammpus
  29. [actual] hammpus is ceslpus
  30. [planning] hujfpus is ceslpus
  31. [actual] ceslpus is babdpus
  32. [actual] ceslpus is babqpus
  33. [actual] ceslpus is babdpus and babqpus
  34. [actual] x is wegtpus
  35. [actual] wegtpus is wimfpus
  36. [actual] wimfpus is ditypus and refrpus
  37. [actual] ditypus is rupwpus
  38. [actual] rupwpus is hujfpus and qunjpus
  39. [actual] hujfpus is hammpus
  40. [actual] hammpus is ceslpus
  41. [actual] ceslpus is babdpus and babqpus
  42. [planning] wegtpus is ceslpus
  43. [planning] wegtpus is wimfpus
  44. [planning] wegtpus is ditypus
  45. [planning] wegtpus is rupwpus
  46. [planning] wegtpus is hujfpus
  47. [planning] wegtpus is hammpus
  48. [actual] x is wegtpus
  49. [planning] wegtpus is wimfpus
  50. [planning] wimfpus is ditypus
  51. [actual] wegtpus is wimfpus
  52. [planning] wegtpus is wimfpus
  53. [planning] wegtpus is a subset of wimfpus
  54. [planning] wegtpus is an instance of wimfpus
  55. [actual] wegtpus is wimfpus
  56. [actual] x is wegtpus
  57. [actual] wegtpus is wimfpus
  58. [actual] x is wimfpus
  59. [actual] wimfpus is ditypus and refrpus
  60. [actual] wimfpus is ditypus and in refrpus
  61. [actual] wimfpus is refrpus and in ditypus
  62. [actual] x is wimfpus
  63. [actual] wimfpus is ditypus
  64. [planning] x is ditypus
  65. [planning] wimfpus is a subset of ditypus
  66. [planning] x is wimfpus implies x is ditypus
  67. [actual] ceslpus is babqpus
  68. [actual] ceslpus is a category itself
  69. [actual] babqpus is a higher-level category
  70. [actual] x is wegtpus
  71. [planning] wegtpus is a category that x belongs to
  72. [actual] hammpus is ceslpus
  73. [planning] hammpus is a subset of ceslpus
  74. [planning] hammpus is an element of ceslpus
  75. [actual] hujfpus is hammpus
  76. [actual] hujfpus is an element of hammpus
  77. [actual] hammpus is ceslpus
  78. [planning] hujfpus is ceslpus
  79. [actual] rupwpus is hujfpus and qunjpus
  80. [planning] rupwpus is hujfpus
  81. [planning] rupwpus is qunjpus
  82. [planning] rupwpus is hujfpus
  83. [planning] rupwpus is qunjpus
  84. [actual] hujfpus is hammpus
  85. [planning] rupwpus is hammpus
  86. [actual] hammpus is ceslpus
  87. [planning] rupwpus is ceslpus
  88. [actual] ditypus is rupwpus
  89. [planning] ditypus is rupwpus
  90. [planning] x is an instance or a category
  91. [planning] x is babdpus and babqpus
  92. [actual] x is wegtpus and vupypus
  93. [actual] x is wegtpus and vupypus and categories
  94. [actual] rupwpus is hujfpus and qunjpus
  95. [actual] rupwpus is hujfpus
  96. [actual] rupwpus is qunjpus
  97. [actual] ditypus is rupwpus
  98. [planning] rupwpus is a category itself
  99. [actual] ditypus is rupwpus
  100. [actual] wegtpus is wimfpus
  101. [actual] wegtpus is wimfpus
  102. [actual] wimfpus is ditypus and refrpus
  103. [actual] wimfpus is ditypus and refrpus
  104. [actual] ditypus is rupwpus
  105. [actual] ditypus is rupwpus
  106. [actual] rupwpus is hujfpus and qunjpus
  107. [actual] rupwpus is hujfpus
  108. [actual] rupwpus is qunjpus
  109. [actual] hujfpus is hammpus
  110. [actual] hujfpus is hammpus
  111. [actual] hammpus is ceslpus
  112. [planning] hammpus is ceslpus
  113. [actual] ceslpus is babdpus
  114. [planning] ceslpus is babdpus
  115. [actual] ceslpus is babqpus
  116. [planning] ceslpus is babqpus
  117. [actual] x is wegtpus
  118. [actual] wegtpus is wimfpus
  119. [planning] x is wimfpus
  120. [planning] wegtpus is a category
  121. [planning] x is wegtpus
  122. [planning] wegtpus is wimfpus
  123. [planning] wegtpus is a subset of wimfpus
  124. [planning] x is wimfpus
  125. [actual] wimfpus is ditypus
  126. [actual] wimfpus is a subset of ditypus
  127. [actual] x is ditypus
  128. [actual] ditypus is a subset of rupwpus
  129. [planning] x is rupwpus
  130. [actual] rupwpus is hujfpus
  131. [actual] x is hujfpus
  132. [actual] hujfpus is hammpus
  133. [planning] x is hammpus
  134. [actual] hammpus is ceslpus
  135. [planning] x is ceslpus
  136. [actual] ceslpus is babdpus
  137. [planning] x is babdpus
  138. [actual] ceslpus is babqpus
  139. [planning] x is babqpus
  140. [actual] x is babdpus and babqpus
  141. [planning] x is A
  142. [planning] x is B
  143. [actual] x is wegtpus
  144. [actual] wegtpus is wimfpus
  145. [actual] x is wimfpus
  146. [actual] wimfpus is ditypus
  147. [actual] wimfpus is ditypus
  148. [actual] x is ditypus
  149. [actual] ceslpus is babdpus and babqpus
  150. [actual] x is babdpus and babqpus
  151. [actual] x is babdpus and babqpus
  152. [actual] x is vupypus
  153. [planning] x is babdpus and babqpus

=== 开始标准化和解析节点 ===
清洗后statements数: 153
标准化后节点数: 132
过滤掉的无效实体数: 21
标准化后的节点:
  1. [actual] ceslpus → babqpus (原始: ceslpus is babqpus)
  2. [actual] x → wegtpus and vupypus (原始: x is wegtpus and vupypus)
  3. [actual] rupwpus → hujfpus and qunjpus (原始: rupwpus is hujfpus and qunjpus)
  4. [actual] wimfpus → ditypus and refrpus (原始: wimfpus is ditypus and refrpus)
  5. [actual] hammpus → ceslpus (原始: hammpus is ceslpus)
  6. [actual] hujfpus → hammpus (原始: hujfpus is hammpus)
  7. [actual] ceslpus → babdpus (原始: ceslpus is babdpus)
  8. [actual] wegtpus → wimfpus (原始: wegtpus is wimfpus)
  9. [actual] ditypus → rupwpus (原始: ditypus is rupwpus)
  10. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  11. [planning] x → babdpus (原始: x is babdpus)
  12. [planning] x → babqpus (原始: x is babqpus)
  13. [actual] x → wegtpus and vupypus (原始: x is wegtpus and vupypus)
  14. [actual] x → wegtpus and vupypus (原始: x is wegtpus and vupypus)
  15. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  16. [actual] wegtpus → wimfpus (原始: wegtpus is wimfpus)
  17. [actual] wegtpus → wimfpus (原始: wegtpus is wimfpus)
  18. [planning] x → wegtpus (原始: x is wegtpus)
  19. [actual] wegtpus → wimfpus (原始: wegtpus is wimfpus)
  20. [planning] x → wimfpus (原始: x is wimfpus)
  21. [actual] hammpus → ceslpus (原始: hammpus is ceslpus)
  22. [actual] ceslpus → babqpus (原始: ceslpus is babqpus)
  23. [planning] hammpus → ceslpus (原始: hammpus is ceslpus)
  24. [planning] ceslpus → babqpus (原始: ceslpus is babqpus)
  25. [planning] hammpus → babqpus (原始: hammpus is babqpus)
  26. [actual] hujfpus → hammpus (原始: hujfpus is hammpus)
  27. [actual] rupwpus → hujfpus and qunjpus (原始: rupwpus is hujfpus and qunjpus)
  28. [actual] hujfpus → hammpus (原始: hujfpus is hammpus)
  29. [actual] hammpus → ceslpus (原始: hammpus is ceslpus)
  30. [planning] hujfpus → ceslpus (原始: hujfpus is ceslpus)
  31. [actual] ceslpus → babdpus (原始: ceslpus is babdpus)
  32. [actual] ceslpus → babqpus (原始: ceslpus is babqpus)
  33. [actual] ceslpus → babdpus and babqpus (原始: ceslpus is babdpus and babqpus)
  34. [actual] x → wegtpus (原始: x is wegtpus)
  35. [actual] wegtpus → wimfpus (原始: wegtpus is wimfpus)
  36. [actual] wimfpus → ditypus and refrpus (原始: wimfpus is ditypus and refrpus)
  37. [actual] ditypus → rupwpus (原始: ditypus is rupwpus)
  38. [actual] rupwpus → hujfpus and qunjpus (原始: rupwpus is hujfpus and qunjpus)
  39. [actual] hujfpus → hammpus (原始: hujfpus is hammpus)
  40. [actual] hammpus → ceslpus (原始: hammpus is ceslpus)
  41. [actual] ceslpus → babdpus and babqpus (原始: ceslpus is babdpus and babqpus)
  42. [planning] wegtpus → ceslpus (原始: wegtpus is ceslpus)
  43. [planning] wegtpus → wimfpus (原始: wegtpus is wimfpus)
  44. [planning] wegtpus → ditypus (原始: wegtpus is ditypus)
  45. [planning] wegtpus → rupwpus (原始: wegtpus is rupwpus)
  46. [planning] wegtpus → hujfpus (原始: wegtpus is hujfpus)
  47. [planning] wegtpus → hammpus (原始: wegtpus is hammpus)
  48. [actual] x → wegtpus (原始: x is wegtpus)
  49. [planning] wegtpus → wimfpus (原始: wegtpus is wimfpus)
  50. [planning] wimfpus → ditypus (原始: wimfpus is ditypus)
  51. [actual] wegtpus → wimfpus (原始: wegtpus is wimfpus)
  52. [planning] wegtpus → wimfpus (原始: wegtpus is wimfpus)
  53. [actual] wegtpus → wimfpus (原始: wegtpus is wimfpus)
  54. [actual] x → wegtpus (原始: x is wegtpus)
  55. [actual] wegtpus → wimfpus (原始: wegtpus is wimfpus)
  56. [actual] x → wimfpus (原始: x is wimfpus)
  57. [actual] wimfpus → ditypus and refrpus (原始: wimfpus is ditypus and refrpus)
  58. [actual] x → wimfpus (原始: x is wimfpus)
  59. [actual] wimfpus → ditypus (原始: wimfpus is ditypus)
  60. [planning] x → ditypus (原始: x is ditypus)
  61. [actual] ceslpus → babqpus (原始: ceslpus is babqpus)
  62. [actual] x → wegtpus (原始: x is wegtpus)
  63. [actual] hammpus → ceslpus (原始: hammpus is ceslpus)
  64. [actual] hujfpus → hammpus (原始: hujfpus is hammpus)
  65. [actual] hammpus → ceslpus (原始: hammpus is ceslpus)
  66. [planning] hujfpus → ceslpus (原始: hujfpus is ceslpus)
  67. [actual] rupwpus → hujfpus and qunjpus (原始: rupwpus is hujfpus and qunjpus)
  68. [planning] rupwpus → hujfpus (原始: rupwpus is hujfpus)
  69. [planning] rupwpus → qunjpus (原始: rupwpus is qunjpus)
  70. [planning] rupwpus → hujfpus (原始: rupwpus is hujfpus)
  71. [planning] rupwpus → qunjpus (原始: rupwpus is qunjpus)
  72. [actual] hujfpus → hammpus (原始: hujfpus is hammpus)
  73. [planning] rupwpus → hammpus (原始: rupwpus is hammpus)
  74. [actual] hammpus → ceslpus (原始: hammpus is ceslpus)
  75. [planning] rupwpus → ceslpus (原始: rupwpus is ceslpus)
  76. [actual] ditypus → rupwpus (原始: ditypus is rupwpus)
  77. [planning] ditypus → rupwpus (原始: ditypus is rupwpus)
  78. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  79. [actual] x → wegtpus and vupypus (原始: x is wegtpus and vupypus)
  80. [actual] rupwpus → hujfpus and qunjpus (原始: rupwpus is hujfpus and qunjpus)
  81. [actual] rupwpus → hujfpus (原始: rupwpus is hujfpus)
  82. [actual] rupwpus → qunjpus (原始: rupwpus is qunjpus)
  83. [actual] ditypus → rupwpus (原始: ditypus is rupwpus)
  84. [actual] ditypus → rupwpus (原始: ditypus is rupwpus)
  85. [actual] wegtpus → wimfpus (原始: wegtpus is wimfpus)
  86. [actual] wegtpus → wimfpus (原始: wegtpus is wimfpus)
  87. [actual] wimfpus → ditypus and refrpus (原始: wimfpus is ditypus and refrpus)
  88. [actual] wimfpus → ditypus and refrpus (原始: wimfpus is ditypus and refrpus)
  89. [actual] ditypus → rupwpus (原始: ditypus is rupwpus)
  90. [actual] ditypus → rupwpus (原始: ditypus is rupwpus)
  91. [actual] rupwpus → hujfpus and qunjpus (原始: rupwpus is hujfpus and qunjpus)
  92. [actual] rupwpus → hujfpus (原始: rupwpus is hujfpus)
  93. [actual] rupwpus → qunjpus (原始: rupwpus is qunjpus)
  94. [actual] hujfpus → hammpus (原始: hujfpus is hammpus)
  95. [actual] hujfpus → hammpus (原始: hujfpus is hammpus)
  96. [actual] hammpus → ceslpus (原始: hammpus is ceslpus)
  97. [planning] hammpus → ceslpus (原始: hammpus is ceslpus)
  98. [actual] ceslpus → babdpus (原始: ceslpus is babdpus)
  99. [planning] ceslpus → babdpus (原始: ceslpus is babdpus)
  100. [actual] ceslpus → babqpus (原始: ceslpus is babqpus)
  101. [planning] ceslpus → babqpus (原始: ceslpus is babqpus)
  102. [actual] x → wegtpus (原始: x is wegtpus)
  103. [actual] wegtpus → wimfpus (原始: wegtpus is wimfpus)
  104. [planning] x → wimfpus (原始: x is wimfpus)
  105. [planning] x → wegtpus (原始: x is wegtpus)
  106. [planning] wegtpus → wimfpus (原始: wegtpus is wimfpus)
  107. [planning] x → wimfpus (原始: x is wimfpus)
  108. [actual] wimfpus → ditypus (原始: wimfpus is ditypus)
  109. [actual] x → ditypus (原始: x is ditypus)
  110. [planning] x → rupwpus (原始: x is rupwpus)
  111. [actual] rupwpus → hujfpus (原始: rupwpus is hujfpus)
  112. [actual] x → hujfpus (原始: x is hujfpus)
  113. [actual] hujfpus → hammpus (原始: hujfpus is hammpus)
  114. [planning] x → hammpus (原始: x is hammpus)
  115. [actual] hammpus → ceslpus (原始: hammpus is ceslpus)
  116. [planning] x → ceslpus (原始: x is ceslpus)
  117. [actual] ceslpus → babdpus (原始: ceslpus is babdpus)
  118. [planning] x → babdpus (原始: x is babdpus)
  119. [actual] ceslpus → babqpus (原始: ceslpus is babqpus)
  120. [planning] x → babqpus (原始: x is babqpus)
  121. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  122. [actual] x → wegtpus (原始: x is wegtpus)
  123. [actual] wegtpus → wimfpus (原始: wegtpus is wimfpus)
  124. [actual] x → wimfpus (原始: x is wimfpus)
  125. [actual] wimfpus → ditypus (原始: wimfpus is ditypus)
  126. [actual] wimfpus → ditypus (原始: wimfpus is ditypus)
  127. [actual] x → ditypus (原始: x is ditypus)
  128. [actual] ceslpus → babdpus and babqpus (原始: ceslpus is babdpus and babqpus)
  129. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  130. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  131. [actual] x → vupypus (原始: x is vupypus)
  132. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 11
[后处理] 加载LoG图，包含 11 个节点
  LoG节点 0: x is babdpus and babqpus (规则: MP, 深度: 1)
  LoG节点 1: x is ditypus (规则: CE, 深度: 2)
  LoG节点 2: ditypus is babdpus and babqpus (规则: MP, 深度: 2)
  LoG节点 3: x is ditypus and refrpus (规则: MP, 深度: 3)
  LoG节点 4: ditypus is hujfpus (规则: CE, 深度: 3)
  LoG节点 5: hujfpus is babdpus and babqpus (规则: MP, 深度: 3)
  LoG节点 6: x is wegtpus (规则: CE, 深度: 4)
  LoG节点 7: wegtpus is ditypus and refrpus (规则: MP, 深度: 4)
  LoG节点 8: ditypus is hujfpus and qunjpus (规则: MP, 深度: 4)
  LoG节点 9: hujfpus is ceslpus (规则: MP, 深度: 4)
  LoG节点 10: ceslpus is babdpus and babqpus (规则: CI, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 132
   - 初始条件数: 9
   - LoG图节点数: 11

📋 初始条件列表:
    1. ceslpus is babqpus
    2. x is wegtpus and vupypus
    3. rupwpus is hujfpus and qunjpus
    4. wimfpus is ditypus and refrpus
    5. hammpus is ceslpus
    6. hujfpus is hammpus
    7. ceslpus is babdpus
    8. wegtpus is wimfpus
    9. ditypus is rupwpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 9 个前提节点

🔍 开始处理actual节点...

   节点 1: ceslpus is babqpus
      ↻ 重复节点，计数: 2

   节点 2: x is wegtpus and vupypus
      ↻ 重复节点，计数: 2

   节点 3: rupwpus is hujfpus and qunjpus
      ↻ 重复节点，计数: 2

   节点 4: wimfpus is ditypus and refrpus
      ↻ 重复节点，计数: 2

   节点 5: hammpus is ceslpus
      ↻ 重复节点，计数: 2

   节点 6: hujfpus is hammpus
      ↻ 重复节点，计数: 2

   节点 7: ceslpus is babdpus
      ↻ 重复节点，计数: 2

   节点 8: wegtpus is wimfpus
      ↻ 重复节点，计数: 2

   节点 9: ditypus is rupwpus
      ↻ 重复节点，计数: 2

   节点 10: x is wegtpus and vupypus
      ↻ 重复节点，计数: 3

   节点 11: x is wegtpus and vupypus
      ↻ 重复节点，计数: 4

   节点 12: wegtpus is wimfpus
      ↻ 重复节点，计数: 3

   节点 13: wegtpus is wimfpus
      ↻ 重复节点，计数: 4

   节点 14: wegtpus is wimfpus
      ↻ 重复节点，计数: 5

   节点 15: hammpus is ceslpus
      ↻ 重复节点，计数: 3

   节点 16: ceslpus is babqpus
      ↻ 重复节点，计数: 3

   节点 17: hujfpus is hammpus
      ↻ 重复节点，计数: 3

   节点 18: rupwpus is hujfpus and qunjpus
      ↻ 重复节点，计数: 3

   节点 19: hujfpus is hammpus
      ↻ 重复节点，计数: 4

   节点 20: hammpus is ceslpus
      ↻ 重复节点，计数: 4

   节点 21: ceslpus is babdpus
      ↻ 重复节点，计数: 3

   节点 22: ceslpus is babqpus
      ↻ 重复节点，计数: 4

   节点 23: ceslpus is babdpus and babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: ceslpus is babdpus and babqpus
      ✅ 验证成功 + LoG匹配

   节点 24: x is wegtpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is wegtpus
      ✅ 验证成功 + LoG匹配

   节点 25: wegtpus is wimfpus
      ↻ 重复节点，计数: 6

   节点 26: wimfpus is ditypus and refrpus
      ↻ 重复节点，计数: 3

   节点 27: ditypus is rupwpus
      ↻ 重复节点，计数: 3

   节点 28: rupwpus is hujfpus and qunjpus
      ↻ 重复节点，计数: 4

   节点 29: hujfpus is hammpus
      ↻ 重复节点，计数: 5

   节点 30: hammpus is ceslpus
      ↻ 重复节点，计数: 5

   节点 31: ceslpus is babdpus and babqpus
      ↻ 重复节点，计数: 2

   节点 32: x is wegtpus
      ↻ 重复节点，计数: 2

   节点 33: wegtpus is wimfpus
      ↻ 重复节点，计数: 7

   节点 34: wegtpus is wimfpus
      ↻ 重复节点，计数: 8

   节点 35: x is wegtpus
      ↻ 重复节点，计数: 3

   节点 36: wegtpus is wimfpus
      ↻ 重复节点，计数: 9

   节点 37: x is wimfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wegtpus → wegtpus is wimfpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is wegtpus
  - 前提: wegtpus is wimfpus

   节点 38: wimfpus is ditypus and refrpus
      ↻ 重复节点，计数: 4

   节点 39: x is wimfpus
      ↻ 重复节点，计数: 2

   节点 40: wimfpus is ditypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wimfpus is ditypus and refrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wimfpus is ditypus and refrpus

   节点 41: ceslpus is babqpus
      ↻ 重复节点，计数: 5

   节点 42: x is wegtpus
      ↻ 重复节点，计数: 4

   节点 43: hammpus is ceslpus
      ↻ 重复节点，计数: 6

   节点 44: hujfpus is hammpus
      ↻ 重复节点，计数: 6

   节点 45: hammpus is ceslpus
      ↻ 重复节点，计数: 7

   节点 46: rupwpus is hujfpus and qunjpus
      ↻ 重复节点，计数: 5

   节点 47: hujfpus is hammpus
      ↻ 重复节点，计数: 7

   节点 48: hammpus is ceslpus
      ↻ 重复节点，计数: 8

   节点 49: ditypus is rupwpus
      ↻ 重复节点，计数: 4

   节点 50: x is wegtpus and vupypus
      ↻ 重复节点，计数: 5

   节点 51: rupwpus is hujfpus and qunjpus
      ↻ 重复节点，计数: 6

   节点 52: rupwpus is hujfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: rupwpus is hujfpus and qunjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: rupwpus is hujfpus and qunjpus

   节点 53: rupwpus is qunjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: rupwpus is hujfpus and qunjpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: rupwpus is hujfpus and qunjpus

   节点 54: ditypus is rupwpus
      ↻ 重复节点，计数: 5

   节点 55: ditypus is rupwpus
      ↻ 重复节点，计数: 6

   节点 56: wegtpus is wimfpus
      ↻ 重复节点，计数: 10

   节点 57: wegtpus is wimfpus
      ↻ 重复节点，计数: 11

   节点 58: wimfpus is ditypus and refrpus
      ↻ 重复节点，计数: 5

   节点 59: wimfpus is ditypus and refrpus
      ↻ 重复节点，计数: 6

   节点 60: ditypus is rupwpus
      ↻ 重复节点，计数: 7

   节点 61: ditypus is rupwpus
      ↻ 重复节点，计数: 8

   节点 62: rupwpus is hujfpus and qunjpus
      ↻ 重复节点，计数: 7

   节点 63: rupwpus is hujfpus
      ↻ 重复节点，计数: 2

   节点 64: rupwpus is qunjpus
      ↻ 重复节点，计数: 2

   节点 65: hujfpus is hammpus
      ↻ 重复节点，计数: 8

   节点 66: hujfpus is hammpus
      ↻ 重复节点，计数: 9

   节点 67: hammpus is ceslpus
      ↻ 重复节点，计数: 9

   节点 68: ceslpus is babdpus
      ↻ 重复节点，计数: 4

   节点 69: ceslpus is babqpus
      ↻ 重复节点，计数: 6

   节点 70: x is wegtpus
      ↻ 重复节点，计数: 5

   节点 71: wegtpus is wimfpus
      ↻ 重复节点，计数: 12

   节点 72: wimfpus is ditypus
      ↻ 重复节点，计数: 2

   节点 73: x is ditypus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is ditypus
[子树点亮]     └─ 点亮依赖节点: x is ditypus and refrpus (深度3)
[子树点亮]     └─ 点亮依赖节点: wegtpus is ditypus and refrpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 74: rupwpus is hujfpus
      ↻ 重复节点，计数: 3

   节点 75: x is hujfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wegtpus → wegtpus is hujfpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is wegtpus
  - 前提: wegtpus is wimfpus
  - 前提: wimfpus is ditypus
  - 前提: ditypus is rupwpus
  - 前提: rupwpus is hujfpus
  ✓ 点亮LoG节点: ditypus is hujfpus
[子树点亮]     └─ 点亮依赖节点: ditypus is hujfpus and qunjpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 76: hujfpus is hammpus
      ↻ 重复节点，计数: 10

   节点 77: hammpus is ceslpus
      ↻ 重复节点，计数: 10

   节点 78: ceslpus is babdpus
      ↻ 重复节点，计数: 5

   节点 79: ceslpus is babqpus
      ↻ 重复节点，计数: 7

   节点 80: x is babdpus and babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus and babqpus
[子树点亮]     └─ 点亮依赖节点: ditypus is babdpus and babqpus (深度2)
[子树点亮]     └─ 点亮依赖节点: hujfpus is babdpus and babqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: hujfpus is ceslpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 81: x is wegtpus
      ↻ 重复节点，计数: 6

   节点 82: wegtpus is wimfpus
      ↻ 重复节点，计数: 13

   节点 83: x is wimfpus
      ↻ 重复节点，计数: 3

   节点 84: wimfpus is ditypus
      ↻ 重复节点，计数: 3

   节点 85: wimfpus is ditypus
      ↻ 重复节点，计数: 4

   节点 86: x is ditypus
      ↻ 重复节点，计数: 2

   节点 87: ceslpus is babdpus and babqpus
      ↻ 重复节点，计数: 3

   节点 88: x is babdpus and babqpus
      ↻ 重复节点，计数: 2

   节点 89: x is babdpus and babqpus
      ↻ 重复节点，计数: 3

   节点 90: x is vupypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is wegtpus and vupypus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is wegtpus and vupypus

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 90
   - 新增节点: 10
   - 更新已存在节点: 80
   - 点亮的LoG节点: 11

🎯 推理质量统计:
   - 完美推理: 10 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 11节点, 9前提, 复杂度1-9

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 19
   - 前提节点: 9
   - 推理节点: 10
   - 幻觉节点: 0
   - 点亮LoG节点: 11

✅ 推理节点详情:
   🟢 ceslpus is babdpus and babqpus (出现3次, 质量:perfect)
   🟢 x is wegtpus (出现6次, 质量:perfect)
   🟢 x is wimfpus (出现3次, 质量:perfect)
   🟢 wimfpus is ditypus (出现4次, 质量:perfect)
   🟢 rupwpus is hujfpus (出现3次, 质量:perfect)
   🟢 rupwpus is qunjpus (出现2次, 质量:perfect)
   🟢 x is ditypus (出现2次, 质量:perfect)
   🟢 x is hujfpus (出现1次, 质量:perfect)
   🟢 x is babdpus and babqpus (出现3次, 质量:perfect)
   🟢 x is vupypus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - wegtpus is ditypus and refrpus
   - x is ditypus and refrpus
   - x is ditypus
   - hujfpus is babdpus and babqpus
   - x is wegtpus
   - ditypus is babdpus and babqpus
   - x is babdpus and babqpus
   - ditypus is hujfpus
   - ditypus is hujfpus and qunjpus
   - ceslpus is babdpus and babqpus
   - hujfpus is ceslpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus and babqpus (第4层)
   节点Coverage: 11/11 = 100.00%
   前提条件Coverage: 9/9 = 100.00%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/10 = 0.00%
   可推导节点: 10/10
   Strict Error Rate: 0/10 = 0.00%
   严格有效节点: 10/10

   详细分析:
     完美推理: 10 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 22/50
================================================================================
记录索引: 21
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_21.json
✅ 使用缓存结果:
   - 句子数: 109
   - 提取的语句数: 153
   - 初始条件数: 7

=== Statement提取完成 ===
总句子数: 109
成功提取: 109
失败提取: 0
总statements数: 153

=== 开始清洗Statement格式 ===
原始statements数: 153
清洗后statements数: 85
过滤掉的statements数: 68
清洗后的statements:
  1. [actual] fucspus is sikzpus
  2. [actual] fucspus is sikzpus
  3. [actual] sikzpus is domdpus
  4. [actual] sikzpus is domdpus
  5. [actual] domdpus is kiqzpus and wapqpus
  6. [actual] domdpus is composed of kiqzpus and wapqpus
  7. [planning] domdpus is kiqzpus and wapqpus
  8. [actual] domdpus is a subset of kiqzpus and wapqpus
  9. [actual] domdpus is kiqzpus and wapqpus
  10. [planning] domdpus is kiqzpus
  11. [planning] domdpus is wapqpus
  12. [planning] kiqzpus is categories
  13. [planning] wapqpus is categories
  14. [planning] domdpus is both
  15. [actual] fucspus is sikzpus
  16. [actual] fucspus is sikzpus
  17. [actual] sikzpus is domdpus
  18. [actual] sikzpus is domdpus
  19. [actual] domdpus is kiqzpus and wapqpus
  20. [planning] domdpus is kiqzpus and wapqpus
  21. [actual] domdpus is kiqzpus and wapqpus
  22. [actual] kiqzpus is pawwpus and liszpus
  23. [actual] pawwpus is jepspus
  24. [actual] jepspus is babdpus and mupppus
  25. [actual] x is fucspus
  26. [planning] x is babdpus
  27. [planning] x is babdpus
  28. [actual] x is fucspus
  29. [actual] fucspus is sikzpus
  30. [actual] sikzpus is domdpus
  31. [actual] sikzpus is domdpus
  32. [actual] domdpus is kiqzpus and wapqpus
  33. [actual] kiqzpus is pawwpus and liszpus
  34. [actual] pawwpus is jepspus
  35. [actual] jepspus is babdpus and mupppus
  36. [planning] x is babdpus
  37. [actual] x is fucspus
  38. [actual] fucspus is sikzpus
  39. [actual] sikzpus is domdpus
  40. [actual] domdpus is kiqzpus
  41. [actual] kiqzpus is pawwpus
  42. [actual] pawwpus is jepspus
  43. [actual] jepspus is babdpus
  44. [planning] domdpus is kiqzpus and wapqpus
  45. [actual] kiqzpus is pawwpus and liszpus
  46. [actual] jepspus is babdpus and mupppus
  47. [actual] fucspus is sikzpus
  48. [planning] fucspus is a type of sikzpus
  49. [planning] fucspus is sikzpus
  50. [actual] sikzpus is domdpus
  51. [actual] sikzpus is domdpus
  52. [actual] domdpus is kiqzpus and wapqpus
  53. [planning] domdpus is kiqzpus
  54. [planning] domdpus is wapqpus
  55. [actual] kiqzpus is pawwpus and liszpus
  56. [actual] pawwpus is jepspus
  57. [actual] jepspus is babdpus and mupppus
  58. [planning] x is fucspus
  59. [actual] x is fucspus
  60. [actual] fucspus is a set
  61. [planning] x is sikzpus
  62. [planning] x is babdpus
  63. [planning] x is babdpus
  64. [actual] x is fucspus
  65. [actual] x is sikzpus
  66. [planning] x is babdpus
  67. [planning] babdpus is a category
  68. [planning] x is that category
  69. [actual] fucspus is sikzpus
  70. [actual] sikzpus is domdpus
  71. [actual] domdpus is kiqzpus and wapqpus
  72. [actual] domdpus is wapqpus
  73. [planning] babdpus is wapqpus
  74. [actual] kiqzpus is pawwpus and liszpus
  75. [actual] pawwpus is jepspus
  76. [actual] jepspus is babdpus
  77. [actual] fucspus is babdpus
  78. [actual] x is fucspus
  79. [actual] x is babdpus
  80. [actual] kiqzpus is liszpus
  81. [actual] domdpus is wapqpus
  82. [actual] jepspus is mupppus
  83. [actual] pawwpus is jepspus
  84. [actual] jepspus is babdpus
  85. [actual] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 85
标准化后节点数: 76
过滤掉的无效实体数: 9
标准化后的节点:
  1. [actual] fucspus → sikzpus (原始: fucspus is sikzpus)
  2. [actual] fucspus → sikzpus (原始: fucspus is sikzpus)
  3. [actual] sikzpus → domdpus (原始: sikzpus is domdpus)
  4. [actual] sikzpus → domdpus (原始: sikzpus is domdpus)
  5. [actual] domdpus → kiqzpus and wapqpus (原始: domdpus is kiqzpus and wapqpus)
  6. [planning] domdpus → kiqzpus and wapqpus (原始: domdpus is kiqzpus and wapqpus)
  7. [actual] domdpus → kiqzpus and wapqpus (原始: domdpus is kiqzpus and wapqpus)
  8. [planning] domdpus → kiqzpus (原始: domdpus is kiqzpus)
  9. [planning] domdpus → wapqpus (原始: domdpus is wapqpus)
  10. [actual] fucspus → sikzpus (原始: fucspus is sikzpus)
  11. [actual] fucspus → sikzpus (原始: fucspus is sikzpus)
  12. [actual] sikzpus → domdpus (原始: sikzpus is domdpus)
  13. [actual] sikzpus → domdpus (原始: sikzpus is domdpus)
  14. [actual] domdpus → kiqzpus and wapqpus (原始: domdpus is kiqzpus and wapqpus)
  15. [planning] domdpus → kiqzpus and wapqpus (原始: domdpus is kiqzpus and wapqpus)
  16. [actual] domdpus → kiqzpus and wapqpus (原始: domdpus is kiqzpus and wapqpus)
  17. [actual] kiqzpus → pawwpus and liszpus (原始: kiqzpus is pawwpus and liszpus)
  18. [actual] pawwpus → jepspus (原始: pawwpus is jepspus)
  19. [actual] jepspus → babdpus and mupppus (原始: jepspus is babdpus and mupppus)
  20. [actual] x → fucspus (原始: x is fucspus)
  21. [planning] x → babdpus (原始: x is babdpus)
  22. [planning] x → babdpus (原始: x is babdpus)
  23. [actual] x → fucspus (原始: x is fucspus)
  24. [actual] fucspus → sikzpus (原始: fucspus is sikzpus)
  25. [actual] sikzpus → domdpus (原始: sikzpus is domdpus)
  26. [actual] sikzpus → domdpus (原始: sikzpus is domdpus)
  27. [actual] domdpus → kiqzpus and wapqpus (原始: domdpus is kiqzpus and wapqpus)
  28. [actual] kiqzpus → pawwpus and liszpus (原始: kiqzpus is pawwpus and liszpus)
  29. [actual] pawwpus → jepspus (原始: pawwpus is jepspus)
  30. [actual] jepspus → babdpus and mupppus (原始: jepspus is babdpus and mupppus)
  31. [planning] x → babdpus (原始: x is babdpus)
  32. [actual] x → fucspus (原始: x is fucspus)
  33. [actual] fucspus → sikzpus (原始: fucspus is sikzpus)
  34. [actual] sikzpus → domdpus (原始: sikzpus is domdpus)
  35. [actual] domdpus → kiqzpus (原始: domdpus is kiqzpus)
  36. [actual] kiqzpus → pawwpus (原始: kiqzpus is pawwpus)
  37. [actual] pawwpus → jepspus (原始: pawwpus is jepspus)
  38. [actual] jepspus → babdpus (原始: jepspus is babdpus)
  39. [planning] domdpus → kiqzpus and wapqpus (原始: domdpus is kiqzpus and wapqpus)
  40. [actual] kiqzpus → pawwpus and liszpus (原始: kiqzpus is pawwpus and liszpus)
  41. [actual] jepspus → babdpus and mupppus (原始: jepspus is babdpus and mupppus)
  42. [actual] fucspus → sikzpus (原始: fucspus is sikzpus)
  43. [planning] fucspus → sikzpus (原始: fucspus is sikzpus)
  44. [actual] sikzpus → domdpus (原始: sikzpus is domdpus)
  45. [actual] sikzpus → domdpus (原始: sikzpus is domdpus)
  46. [actual] domdpus → kiqzpus and wapqpus (原始: domdpus is kiqzpus and wapqpus)
  47. [planning] domdpus → kiqzpus (原始: domdpus is kiqzpus)
  48. [planning] domdpus → wapqpus (原始: domdpus is wapqpus)
  49. [actual] kiqzpus → pawwpus and liszpus (原始: kiqzpus is pawwpus and liszpus)
  50. [actual] pawwpus → jepspus (原始: pawwpus is jepspus)
  51. [actual] jepspus → babdpus and mupppus (原始: jepspus is babdpus and mupppus)
  52. [planning] x → fucspus (原始: x is fucspus)
  53. [actual] x → fucspus (原始: x is fucspus)
  54. [planning] x → sikzpus (原始: x is sikzpus)
  55. [planning] x → babdpus (原始: x is babdpus)
  56. [planning] x → babdpus (原始: x is babdpus)
  57. [actual] x → fucspus (原始: x is fucspus)
  58. [actual] x → sikzpus (原始: x is sikzpus)
  59. [planning] x → babdpus (原始: x is babdpus)
  60. [actual] fucspus → sikzpus (原始: fucspus is sikzpus)
  61. [actual] sikzpus → domdpus (原始: sikzpus is domdpus)
  62. [actual] domdpus → kiqzpus and wapqpus (原始: domdpus is kiqzpus and wapqpus)
  63. [actual] domdpus → wapqpus (原始: domdpus is wapqpus)
  64. [planning] babdpus → wapqpus (原始: babdpus is wapqpus)
  65. [actual] kiqzpus → pawwpus and liszpus (原始: kiqzpus is pawwpus and liszpus)
  66. [actual] pawwpus → jepspus (原始: pawwpus is jepspus)
  67. [actual] jepspus → babdpus (原始: jepspus is babdpus)
  68. [actual] fucspus → babdpus (原始: fucspus is babdpus)
  69. [actual] x → fucspus (原始: x is fucspus)
  70. [actual] x → babdpus (原始: x is babdpus)
  71. [actual] kiqzpus → liszpus (原始: kiqzpus is liszpus)
  72. [actual] domdpus → wapqpus (原始: domdpus is wapqpus)
  73. [actual] jepspus → mupppus (原始: jepspus is mupppus)
  74. [actual] pawwpus → jepspus (原始: pawwpus is jepspus)
  75. [actual] jepspus → babdpus (原始: jepspus is babdpus)
  76. [actual] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 9
[后处理] 加载LoG图，包含 9 个节点
  LoG节点 0: x is babdpus (规则: MP, 深度: 1)
  LoG节点 1: x is kiqzpus (规则: CE, 深度: 2)
  LoG节点 2: kiqzpus is babdpus (规则: CE, 深度: 2)
  LoG节点 3: x is kiqzpus and wapqpus (规则: MP, 深度: 3)
  LoG节点 4: kiqzpus is babdpus and mupppus (规则: MP, 深度: 3)
  LoG节点 5: x is sikzpus (规则: MP, 深度: 4)
  LoG节点 6: sikzpus is kiqzpus and wapqpus (规则: MP, 深度: 4)
  LoG节点 7: kiqzpus is pawwpus (规则: CE, 深度: 4)
  LoG节点 8: pawwpus is babdpus and mupppus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 76
   - 初始条件数: 7
   - LoG图节点数: 9

📋 初始条件列表:
    1. fucspus is sikzpus
    2. sikzpus is domdpus
    3. domdpus is kiqzpus and wapqpus
    4. pawwpus is jepspus
    5. jepspus is babdpus and mupppus
    6. x is fucspus
    7. kiqzpus is pawwpus and liszpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 7 个前提节点

🔍 开始处理actual节点...

   节点 1: fucspus is sikzpus
      ↻ 重复节点，计数: 2

   节点 2: fucspus is sikzpus
      ↻ 重复节点，计数: 3

   节点 3: sikzpus is domdpus
      ↻ 重复节点，计数: 2

   节点 4: sikzpus is domdpus
      ↻ 重复节点，计数: 3

   节点 5: domdpus is kiqzpus and wapqpus
      ↻ 重复节点，计数: 2

   节点 6: domdpus is kiqzpus and wapqpus
      ↻ 重复节点，计数: 3

   节点 7: fucspus is sikzpus
      ↻ 重复节点，计数: 4

   节点 8: fucspus is sikzpus
      ↻ 重复节点，计数: 5

   节点 9: sikzpus is domdpus
      ↻ 重复节点，计数: 4

   节点 10: sikzpus is domdpus
      ↻ 重复节点，计数: 5

   节点 11: domdpus is kiqzpus and wapqpus
      ↻ 重复节点，计数: 4

   节点 12: domdpus is kiqzpus and wapqpus
      ↻ 重复节点，计数: 5

   节点 13: kiqzpus is pawwpus and liszpus
      ↻ 重复节点，计数: 2

   节点 14: pawwpus is jepspus
      ↻ 重复节点，计数: 2

   节点 15: jepspus is babdpus and mupppus
      ↻ 重复节点，计数: 2

   节点 16: x is fucspus
      ↻ 重复节点，计数: 2

   节点 17: x is fucspus
      ↻ 重复节点，计数: 3

   节点 18: fucspus is sikzpus
      ↻ 重复节点，计数: 6

   节点 19: sikzpus is domdpus
      ↻ 重复节点，计数: 6

   节点 20: sikzpus is domdpus
      ↻ 重复节点，计数: 7

   节点 21: domdpus is kiqzpus and wapqpus
      ↻ 重复节点，计数: 6

   节点 22: kiqzpus is pawwpus and liszpus
      ↻ 重复节点，计数: 3

   节点 23: pawwpus is jepspus
      ↻ 重复节点，计数: 3

   节点 24: jepspus is babdpus and mupppus
      ↻ 重复节点，计数: 3

   节点 25: x is fucspus
      ↻ 重复节点，计数: 4

   节点 26: fucspus is sikzpus
      ↻ 重复节点，计数: 7

   节点 27: sikzpus is domdpus
      ↻ 重复节点，计数: 8

   节点 28: domdpus is kiqzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: domdpus is kiqzpus and wapqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: domdpus is kiqzpus and wapqpus

   节点 29: kiqzpus is pawwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: kiqzpus is pawwpus
      ✅ 验证成功 + LoG匹配

   节点 30: pawwpus is jepspus
      ↻ 重复节点，计数: 4

   节点 31: jepspus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: jepspus is babdpus and mupppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: jepspus is babdpus and mupppus

   节点 32: kiqzpus is pawwpus and liszpus
      ↻ 重复节点，计数: 4

   节点 33: jepspus is babdpus and mupppus
      ↻ 重复节点，计数: 4

   节点 34: fucspus is sikzpus
      ↻ 重复节点，计数: 8

   节点 35: sikzpus is domdpus
      ↻ 重复节点，计数: 9

   节点 36: sikzpus is domdpus
      ↻ 重复节点，计数: 10

   节点 37: domdpus is kiqzpus and wapqpus
      ↻ 重复节点，计数: 7

   节点 38: kiqzpus is pawwpus and liszpus
      ↻ 重复节点，计数: 5

   节点 39: pawwpus is jepspus
      ↻ 重复节点，计数: 5

   节点 40: jepspus is babdpus and mupppus
      ↻ 重复节点，计数: 5

   节点 41: x is fucspus
      ↻ 重复节点，计数: 5

   节点 42: x is fucspus
      ↻ 重复节点，计数: 6

   节点 43: x is sikzpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is sikzpus
      ✅ 验证成功 + LoG匹配

   节点 44: fucspus is sikzpus
      ↻ 重复节点，计数: 9

   节点 45: sikzpus is domdpus
      ↻ 重复节点，计数: 11

   节点 46: domdpus is kiqzpus and wapqpus
      ↻ 重复节点，计数: 8

   节点 47: domdpus is wapqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: domdpus is kiqzpus and wapqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: domdpus is kiqzpus and wapqpus

   节点 48: kiqzpus is pawwpus and liszpus
      ↻ 重复节点，计数: 6

   节点 49: pawwpus is jepspus
      ↻ 重复节点，计数: 6

   节点 50: jepspus is babdpus
      ↻ 重复节点，计数: 2

   节点 51: fucspus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: fucspus is sikzpus → sikzpus is babdpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: fucspus is sikzpus
  - 前提: sikzpus is domdpus
  - 前提: domdpus is kiqzpus
  - 前提: kiqzpus is pawwpus
  - 前提: pawwpus is jepspus
  - 前提: jepspus is babdpus
  ✓ 点亮LoG节点: kiqzpus is babdpus
[子树点亮]     └─ 点亮依赖节点: kiqzpus is babdpus and mupppus (深度3)
[子树点亮]     └─ 点亮依赖节点: pawwpus is babdpus and mupppus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 52: x is fucspus
      ↻ 重复节点，计数: 7

   节点 53: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: x is kiqzpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is kiqzpus and wapqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: sikzpus is kiqzpus and wapqpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 54: kiqzpus is liszpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kiqzpus is pawwpus and liszpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kiqzpus is pawwpus and liszpus

   节点 55: domdpus is wapqpus
      ↻ 重复节点，计数: 2

   节点 56: jepspus is mupppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: jepspus is babdpus and mupppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: jepspus is babdpus and mupppus

   节点 57: pawwpus is jepspus
      ↻ 重复节点，计数: 7

   节点 58: jepspus is babdpus
      ↻ 重复节点，计数: 3

   节点 59: x is babdpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 59
   - 新增节点: 9
   - 更新已存在节点: 50
   - 点亮的LoG节点: 9

🎯 推理质量统计:
   - 完美推理: 9 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 9节点, 7前提, 复杂度1-7

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 16
   - 前提节点: 7
   - 推理节点: 9
   - 幻觉节点: 0
   - 点亮LoG节点: 9

✅ 推理节点详情:
   🟢 domdpus is kiqzpus (出现1次, 质量:perfect)
   🟢 kiqzpus is pawwpus (出现1次, 质量:perfect)
   🟢 jepspus is babdpus (出现3次, 质量:perfect)
   🟢 x is sikzpus (出现1次, 质量:perfect)
   🟢 domdpus is wapqpus (出现2次, 质量:perfect)
   🟢 fucspus is babdpus (出现1次, 质量:perfect)
   🟢 x is babdpus (出现2次, 质量:perfect)
   🟢 kiqzpus is liszpus (出现1次, 质量:perfect)
   🟢 jepspus is mupppus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - pawwpus is babdpus and mupppus
   - x is sikzpus
   - sikzpus is kiqzpus and wapqpus
   - x is babdpus
   - x is kiqzpus and wapqpus
   - kiqzpus is babdpus and mupppus
   - kiqzpus is babdpus
   - x is kiqzpus
   - kiqzpus is pawwpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus (第4层)
   节点Coverage: 9/9 = 100.00%
   前提条件Coverage: 7/7 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/9 = 0.00%
   可推导节点: 9/9
   Strict Error Rate: 0/9 = 0.00%
   严格有效节点: 9/9

   详细分析:
     完美推理: 9 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 23/50
================================================================================
记录索引: 22
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_22.json
✅ 使用缓存结果:
   - 句子数: 38
   - 提取的语句数: 48
   - 初始条件数: 3

=== Statement提取完成 ===
总句子数: 38
成功提取: 38
失败提取: 0
总statements数: 48

=== 开始清洗Statement格式 ===
原始statements数: 48
清洗后statements数: 39
过滤掉的statements数: 9
清洗后的statements:
  1. [actual] vedtpus is babqpus
  2. [actual] vedtpus is veznpus
  3. [actual] x is vedtpus and xumqpus
  4. [planning] x is babdpus
  5. [planning] x is babqpus
  6. [actual] vedtpus is babqpus
  7. [planning] babqpus is a category that contains vedtpus
  8. [actual] vedtpus is veznpus
  9. [planning] veznpus is another category that contains vedtpus
  10. [actual] x is vedtpus and xumqpus
  11. [actual] x is vedtpus and xumqpus
  12. [planning] x is babdpus or babqpus
  13. [actual] vedtpus is babqpus
  14. [actual] x is vedtpus
  15. [actual] vedtpus is babqpus
  16. [actual] x is vedtpus
  17. [planning] x is babqpus
  18. [actual] x is an element of A
  19. [planning] x is an element of B
  20. [actual] vedtpus is babqpus
  21. [actual] x is vedtpus
  22. [actual] x is babqpus
  23. [actual] x is babqpus
  24. [planning] x is babdpus or babqpus
  25. [actual] x is babqpus
  26. [actual] x is babqpus
  27. [actual] x is babdpus or babqpus
  28. [planning] x is babqpus
  29. [actual] x is babqpus
  30. [actual] x is vedtpus
  31. [actual] vedtpus is a category
  32. [actual] vedtpus is babqpus
  33. [actual] vedtpus is a subset of babqpus
  34. [actual] x is vedtpus
  35. [actual] vedtpus is babqpus
  36. [actual] x is babqpus
  37. [actual] x is babqpus
  38. [actual] x is babqpus
  39. [actual] x is babdpus or babqpus

=== 开始标准化和解析节点 ===
清洗后statements数: 39
标准化后节点数: 33
过滤掉的无效实体数: 6
标准化后的节点:
  1. [actual] vedtpus → babqpus (原始: vedtpus is babqpus)
  2. [actual] vedtpus → veznpus (原始: vedtpus is veznpus)
  3. [actual] x → vedtpus and xumqpus (原始: x is vedtpus and xumqpus)
  4. [planning] x → babdpus (原始: x is babdpus)
  5. [planning] x → babqpus (原始: x is babqpus)
  6. [actual] vedtpus → babqpus (原始: vedtpus is babqpus)
  7. [actual] vedtpus → veznpus (原始: vedtpus is veznpus)
  8. [actual] x → vedtpus and xumqpus (原始: x is vedtpus and xumqpus)
  9. [actual] x → vedtpus and xumqpus (原始: x is vedtpus and xumqpus)
  10. [planning] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  11. [actual] vedtpus → babqpus (原始: vedtpus is babqpus)
  12. [actual] x → vedtpus (原始: x is vedtpus)
  13. [actual] vedtpus → babqpus (原始: vedtpus is babqpus)
  14. [actual] x → vedtpus (原始: x is vedtpus)
  15. [planning] x → babqpus (原始: x is babqpus)
  16. [actual] vedtpus → babqpus (原始: vedtpus is babqpus)
  17. [actual] x → vedtpus (原始: x is vedtpus)
  18. [actual] x → babqpus (原始: x is babqpus)
  19. [actual] x → babqpus (原始: x is babqpus)
  20. [planning] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  21. [actual] x → babqpus (原始: x is babqpus)
  22. [actual] x → babqpus (原始: x is babqpus)
  23. [actual] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  24. [planning] x → babqpus (原始: x is babqpus)
  25. [actual] x → babqpus (原始: x is babqpus)
  26. [actual] x → vedtpus (原始: x is vedtpus)
  27. [actual] vedtpus → babqpus (原始: vedtpus is babqpus)
  28. [actual] x → vedtpus (原始: x is vedtpus)
  29. [actual] vedtpus → babqpus (原始: vedtpus is babqpus)
  30. [actual] x → babqpus (原始: x is babqpus)
  31. [actual] x → babqpus (原始: x is babqpus)
  32. [actual] x → babqpus (原始: x is babqpus)
  33. [actual] x → babdpus or babqpus (原始: x is babdpus or babqpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 5
[后处理] 加载LoG图，包含 5 个节点
  LoG节点 0: x is babdpus or babqpus (规则: DI, 深度: 1)
  LoG节点 1: x is babqpus (规则: CE, 深度: 2)
  LoG节点 2: x is babqpus and veznpus (规则: MP, 深度: 3)
  LoG节点 3: x is vedtpus (规则: CE, 深度: 4)
  LoG节点 4: vedtpus is babqpus and veznpus (规则: CI, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 33
   - 初始条件数: 3
   - LoG图节点数: 5

📋 初始条件列表:
    1. vedtpus is babqpus
    2. vedtpus is veznpus
    3. x is vedtpus and xumqpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 3 个前提节点

🔍 开始处理actual节点...

   节点 1: vedtpus is babqpus
      ↻ 重复节点，计数: 2

   节点 2: vedtpus is veznpus
      ↻ 重复节点，计数: 2

   节点 3: x is vedtpus and xumqpus
      ↻ 重复节点，计数: 2

   节点 4: vedtpus is babqpus
      ↻ 重复节点，计数: 3

   节点 5: vedtpus is veznpus
      ↻ 重复节点，计数: 3

   节点 6: x is vedtpus and xumqpus
      ↻ 重复节点，计数: 3

   节点 7: x is vedtpus and xumqpus
      ↻ 重复节点，计数: 4

   节点 8: vedtpus is babqpus
      ↻ 重复节点，计数: 4

   节点 9: x is vedtpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is vedtpus
      ✅ 验证成功 + LoG匹配

   节点 10: vedtpus is babqpus
      ↻ 重复节点，计数: 5

   节点 11: x is vedtpus
      ↻ 重复节点，计数: 2

   节点 12: vedtpus is babqpus
      ↻ 重复节点，计数: 6

   节点 13: x is vedtpus
      ↻ 重复节点，计数: 3

   节点 14: x is babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babqpus
[子树点亮]     └─ 点亮依赖节点: x is babqpus and veznpus (深度3)
[子树点亮]     └─ 点亮依赖节点: vedtpus is babqpus and veznpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 15: x is babqpus
      ↻ 重复节点，计数: 2

   节点 16: x is babqpus
      ↻ 重复节点，计数: 3

   节点 17: x is babqpus
      ↻ 重复节点，计数: 4

   节点 18: x is babdpus or babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus or babqpus
      ✅ 验证成功 + LoG匹配

   节点 19: x is babqpus
      ↻ 重复节点，计数: 5

   节点 20: x is vedtpus
      ↻ 重复节点，计数: 4

   节点 21: vedtpus is babqpus
      ↻ 重复节点，计数: 7

   节点 22: x is vedtpus
      ↻ 重复节点，计数: 5

   节点 23: vedtpus is babqpus
      ↻ 重复节点，计数: 8

   节点 24: x is babqpus
      ↻ 重复节点，计数: 6

   节点 25: x is babqpus
      ↻ 重复节点，计数: 7

   节点 26: x is babqpus
      ↻ 重复节点，计数: 8

   节点 27: x is babdpus or babqpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 27
   - 新增节点: 3
   - 更新已存在节点: 24
   - 点亮的LoG节点: 5

🎯 推理质量统计:
   - 完美推理: 3 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 5节点, 3前提, 复杂度1-3

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 6
   - 前提节点: 3
   - 推理节点: 3
   - 幻觉节点: 0
   - 点亮LoG节点: 5

✅ 推理节点详情:
   🟢 x is vedtpus (出现5次, 质量:perfect)
   🟢 x is babqpus (出现8次, 质量:perfect)
   🟢 x is babdpus or babqpus (出现2次, 质量:perfect)

🔥 点亮的LoG节点:
   - vedtpus is babqpus and veznpus
   - x is babqpus and veznpus
   - x is babdpus or babqpus
   - x is babqpus
   - x is vedtpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus or babqpus (第4层)
   节点Coverage: 5/5 = 100.00%
   前提条件Coverage: 3/3 = 100.00%
   各推理层点亮比例:
     第1层: 2/2 = 100.00%
     第2层: 1/1 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/3 = 0.00%
   可推导节点: 3/3
   Strict Error Rate: 0/3 = 0.00%
   严格有效节点: 3/3

   详细分析:
     完美推理: 3 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 24/50
================================================================================
记录索引: 23
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_23.json
✅ 使用缓存结果:
   - 句子数: 61
   - 提取的语句数: 60
   - 初始条件数: 6

=== Statement提取完成 ===
总句子数: 61
成功提取: 61
失败提取: 0
总statements数: 60

=== 开始清洗Statement格式 ===
原始statements数: 60
清洗后statements数: 46
过滤掉的statements数: 14
清洗后的statements:
  1. [actual] guycpus is wubtpus and tildpus
  2. [actual] guycpus is wubtpus and tildpus
  3. [actual] guycpus is wubtpus
  4. [actual] guycpus is tildpus
  5. [actual] lecspus is zuhtpus
  6. [actual] lecspus is zuhtpus
  7. [actual] x is guycpus
  8. [planning] x is guycpus
  9. [planning] x is guycpus
  10. [actual] x is guycpus
  11. [planning] x is an element
  12. [planning] x is an instance
  13. [planning] x is a member
  14. [actual] x is guycpus
  15. [planning] x is guycpus
  16. [actual] huqrpus is lecspus
  17. [actual] wubtpus is huqrpus
  18. [actual] zuhtpus is babdpus and muwhpus
  19. [planning] x is babdpus
  20. [actual] x is guycpus
  21. [actual] guycpus is wubtpus and tildpus
  22. [actual] x is guycpus
  23. [actual] x is wubtpus
  24. [actual] x is tildpus
  25. [actual] wubtpus is huqrpus
  26. [actual] x is wubtpus
  27. [actual] x is huqrpus
  28. [actual] huqrpus is lecspus
  29. [actual] x is huqrpus
  30. [actual] x is lecspus
  31. [actual] lecspus is zuhtpus
  32. [actual] x is lecspus
  33. [actual] x is zuhtpus
  34. [actual] zuhtpus is babdpus and muwhpus
  35. [actual] x is zuhtpus
  36. [actual] x is babdpus
  37. [actual] x is babdpus
  38. [actual] x is guycpus
  39. [actual] guycpus is wubtpus
  40. [actual] wubtpus is huqrpus
  41. [actual] huqrpus is lecspus
  42. [actual] lecspus is zuhtpus
  43. [actual] zuhtpus is babdpus and muwhpus
  44. [actual] x is babdpus
  45. [actual] x is babdpus
  46. [planning] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 46
标准化后节点数: 43
过滤掉的无效实体数: 3
标准化后的节点:
  1. [actual] guycpus → wubtpus and tildpus (原始: guycpus is wubtpus and tildpus)
  2. [actual] guycpus → wubtpus and tildpus (原始: guycpus is wubtpus and tildpus)
  3. [actual] guycpus → wubtpus (原始: guycpus is wubtpus)
  4. [actual] guycpus → tildpus (原始: guycpus is tildpus)
  5. [actual] lecspus → zuhtpus (原始: lecspus is zuhtpus)
  6. [actual] lecspus → zuhtpus (原始: lecspus is zuhtpus)
  7. [actual] x → guycpus (原始: x is guycpus)
  8. [planning] x → guycpus (原始: x is guycpus)
  9. [planning] x → guycpus (原始: x is guycpus)
  10. [actual] x → guycpus (原始: x is guycpus)
  11. [actual] x → guycpus (原始: x is guycpus)
  12. [planning] x → guycpus (原始: x is guycpus)
  13. [actual] huqrpus → lecspus (原始: huqrpus is lecspus)
  14. [actual] wubtpus → huqrpus (原始: wubtpus is huqrpus)
  15. [actual] zuhtpus → babdpus and muwhpus (原始: zuhtpus is babdpus and muwhpus)
  16. [planning] x → babdpus (原始: x is babdpus)
  17. [actual] x → guycpus (原始: x is guycpus)
  18. [actual] guycpus → wubtpus and tildpus (原始: guycpus is wubtpus and tildpus)
  19. [actual] x → guycpus (原始: x is guycpus)
  20. [actual] x → wubtpus (原始: x is wubtpus)
  21. [actual] x → tildpus (原始: x is tildpus)
  22. [actual] wubtpus → huqrpus (原始: wubtpus is huqrpus)
  23. [actual] x → wubtpus (原始: x is wubtpus)
  24. [actual] x → huqrpus (原始: x is huqrpus)
  25. [actual] huqrpus → lecspus (原始: huqrpus is lecspus)
  26. [actual] x → huqrpus (原始: x is huqrpus)
  27. [actual] x → lecspus (原始: x is lecspus)
  28. [actual] lecspus → zuhtpus (原始: lecspus is zuhtpus)
  29. [actual] x → lecspus (原始: x is lecspus)
  30. [actual] x → zuhtpus (原始: x is zuhtpus)
  31. [actual] zuhtpus → babdpus and muwhpus (原始: zuhtpus is babdpus and muwhpus)
  32. [actual] x → zuhtpus (原始: x is zuhtpus)
  33. [actual] x → babdpus (原始: x is babdpus)
  34. [actual] x → babdpus (原始: x is babdpus)
  35. [actual] x → guycpus (原始: x is guycpus)
  36. [actual] guycpus → wubtpus (原始: guycpus is wubtpus)
  37. [actual] wubtpus → huqrpus (原始: wubtpus is huqrpus)
  38. [actual] huqrpus → lecspus (原始: huqrpus is lecspus)
  39. [actual] lecspus → zuhtpus (原始: lecspus is zuhtpus)
  40. [actual] zuhtpus → babdpus and muwhpus (原始: zuhtpus is babdpus and muwhpus)
  41. [actual] x → babdpus (原始: x is babdpus)
  42. [actual] x → babdpus (原始: x is babdpus)
  43. [planning] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 7
[后处理] 加载LoG图，包含 7 个节点
  LoG节点 0: x is babdpus (规则: CE, 深度: 1)
  LoG节点 1: x is babdpus and muwhpus (规则: MP, 深度: 2)
  LoG节点 2: x is wubtpus (规则: CE, 深度: 3)
  LoG节点 3: wubtpus is babdpus and muwhpus (规则: MP, 深度: 3)
  LoG节点 4: x is wubtpus and tildpus (规则: MP, 深度: 4)
  LoG节点 5: wubtpus is lecspus (规则: MP, 深度: 4)
  LoG节点 6: lecspus is babdpus and muwhpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 43
   - 初始条件数: 6
   - LoG图节点数: 7

📋 初始条件列表:
    1. guycpus is wubtpus and tildpus
    2. lecspus is zuhtpus
    3. x is guycpus
    4. huqrpus is lecspus
    5. wubtpus is huqrpus
    6. zuhtpus is babdpus and muwhpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 6 个前提节点

🔍 开始处理actual节点...

   节点 1: guycpus is wubtpus and tildpus
      ↻ 重复节点，计数: 2

   节点 2: guycpus is wubtpus and tildpus
      ↻ 重复节点，计数: 3

   节点 3: guycpus is wubtpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: guycpus is wubtpus and tildpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: guycpus is wubtpus and tildpus

   节点 4: guycpus is tildpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: guycpus is wubtpus and tildpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: guycpus is wubtpus and tildpus

   节点 5: lecspus is zuhtpus
      ↻ 重复节点，计数: 2

   节点 6: lecspus is zuhtpus
      ↻ 重复节点，计数: 3

   节点 7: x is guycpus
      ↻ 重复节点，计数: 2

   节点 8: x is guycpus
      ↻ 重复节点，计数: 3

   节点 9: x is guycpus
      ↻ 重复节点，计数: 4

   节点 10: huqrpus is lecspus
      ↻ 重复节点，计数: 2

   节点 11: wubtpus is huqrpus
      ↻ 重复节点，计数: 2

   节点 12: zuhtpus is babdpus and muwhpus
      ↻ 重复节点，计数: 2

   节点 13: x is guycpus
      ↻ 重复节点，计数: 5

   节点 14: guycpus is wubtpus and tildpus
      ↻ 重复节点，计数: 4

   节点 15: x is guycpus
      ↻ 重复节点，计数: 6

   节点 16: x is wubtpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is wubtpus
[子树点亮]     └─ 点亮依赖节点: x is wubtpus and tildpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 17: x is tildpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is guycpus → guycpus is tildpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is guycpus
  - 前提: guycpus is tildpus

   节点 18: wubtpus is huqrpus
      ↻ 重复节点，计数: 3

   节点 19: x is wubtpus
      ↻ 重复节点，计数: 2

   节点 20: x is huqrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is guycpus → guycpus is huqrpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is guycpus
  - 前提: guycpus is wubtpus
  - 前提: wubtpus is huqrpus

   节点 21: huqrpus is lecspus
      ↻ 重复节点，计数: 3

   节点 22: x is huqrpus
      ↻ 重复节点，计数: 2

   节点 23: x is lecspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is guycpus → guycpus is lecspus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is guycpus
  - 前提: guycpus is wubtpus
  - 前提: wubtpus is huqrpus
  - 前提: huqrpus is lecspus
  ✓ 点亮LoG节点: wubtpus is lecspus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 24: lecspus is zuhtpus
      ↻ 重复节点，计数: 4

   节点 25: x is lecspus
      ↻ 重复节点，计数: 2

   节点 26: x is zuhtpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is guycpus → guycpus is zuhtpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is guycpus
  - 前提: guycpus is wubtpus
  - 前提: wubtpus is huqrpus
  - 前提: huqrpus is lecspus
  - 前提: lecspus is zuhtpus

   节点 27: zuhtpus is babdpus and muwhpus
      ↻ 重复节点，计数: 3

   节点 28: x is zuhtpus
      ↻ 重复节点，计数: 2

   节点 29: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: x is babdpus and muwhpus (深度2)
[子树点亮]     └─ 点亮依赖节点: wubtpus is babdpus and muwhpus (深度3)
[子树点亮]     └─ 点亮依赖节点: lecspus is babdpus and muwhpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 30: x is babdpus
      ↻ 重复节点，计数: 2

   节点 31: x is guycpus
      ↻ 重复节点，计数: 7

   节点 32: guycpus is wubtpus
      ↻ 重复节点，计数: 2

   节点 33: wubtpus is huqrpus
      ↻ 重复节点，计数: 4

   节点 34: huqrpus is lecspus
      ↻ 重复节点，计数: 4

   节点 35: lecspus is zuhtpus
      ↻ 重复节点，计数: 5

   节点 36: zuhtpus is babdpus and muwhpus
      ↻ 重复节点，计数: 4

   节点 37: x is babdpus
      ↻ 重复节点，计数: 3

   节点 38: x is babdpus
      ↻ 重复节点，计数: 4

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 38
   - 新增节点: 8
   - 更新已存在节点: 30
   - 点亮的LoG节点: 7

🎯 推理质量统计:
   - 完美推理: 8 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 7节点, 6前提, 复杂度1-6

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 14
   - 前提节点: 6
   - 推理节点: 8
   - 幻觉节点: 0
   - 点亮LoG节点: 7

✅ 推理节点详情:
   🟢 guycpus is wubtpus (出现2次, 质量:perfect)
   🟢 guycpus is tildpus (出现1次, 质量:perfect)
   🟢 x is wubtpus (出现2次, 质量:perfect)
   🟢 x is tildpus (出现1次, 质量:perfect)
   🟢 x is huqrpus (出现2次, 质量:perfect)
   🟢 x is lecspus (出现2次, 质量:perfect)
   🟢 x is zuhtpus (出现2次, 质量:perfect)
   🟢 x is babdpus (出现4次, 质量:perfect)

🔥 点亮的LoG节点:
   - lecspus is babdpus and muwhpus
   - x is wubtpus and tildpus
   - wubtpus is babdpus and muwhpus
   - x is babdpus and muwhpus
   - x is babdpus
   - x is wubtpus
   - wubtpus is lecspus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus (第4层)
   节点Coverage: 7/7 = 100.00%
   前提条件Coverage: 6/6 = 100.00%
   各推理层点亮比例:
     第1层: 3/3 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/8 = 0.00%
   可推导节点: 8/8
   Strict Error Rate: 0/8 = 0.00%
   严格有效节点: 8/8

   详细分析:
     完美推理: 8 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 25/50
================================================================================
记录索引: 24
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_24.json
✅ 使用缓存结果:
   - 句子数: 43
   - 提取的语句数: 34
   - 初始条件数: 9

=== Statement提取完成 ===
总句子数: 43
成功提取: 43
失败提取: 0
总statements数: 34

=== 开始清洗Statement格式 ===
原始statements数: 34
清洗后statements数: 33
过滤掉的statements数: 1
清洗后的statements:
  1. [planning] x is babdpus or babqpus
  2. [actual] x is wisfpus
  3. [actual] yarwpus is hafbpus and honzpus
  4. [actual] hafbpus is porkpus
  5. [actual] maxjpus is babdpus or babqpus
  6. [actual] qeqrpus is megxpus and dawzpus
  7. [actual] porkpus is qeqrpus and palzpus
  8. [actual] megxpus is maxjpus
  9. [actual] mudcpus is yarwpus
  10. [actual] wisfpus is mudcpus and zihjpus
  11. [planning] x is babdpus
  12. [planning] x is babqpus
  13. [actual] x is wisfpus
  14. [actual] wisfpus is mudcpus and zihjpus
  15. [actual] x is mudcpus and zihjpus
  16. [actual] mudcpus is yarwpus
  17. [actual] x is mudcpus
  18. [actual] x is yarwpus
  19. [actual] yarwpus is hafbpus and honzpus
  20. [actual] x is hafbpus and honzpus
  21. [actual] hafbpus is porkpus
  22. [actual] x is porkpus
  23. [actual] porkpus is qeqrpus and palzpus
  24. [actual] x is qeqrpus and palzpus
  25. [actual] qeqrpus is megxpus and dawzpus
  26. [actual] x is megxpus and dawzpus
  27. [actual] megxpus is maxjpus
  28. [actual] x is maxjpus
  29. [actual] maxjpus is babdpus or babqpus
  30. [actual] x is maxjpus
  31. [planning] x is babdpus
  32. [planning] x is babqpus
  33. [actual] x is babdpus or babqpus

=== 开始标准化和解析节点 ===
清洗后statements数: 33
标准化后节点数: 33
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  2. [actual] x → wisfpus (原始: x is wisfpus)
  3. [actual] yarwpus → hafbpus and honzpus (原始: yarwpus is hafbpus and honzpus)
  4. [actual] hafbpus → porkpus (原始: hafbpus is porkpus)
  5. [actual] maxjpus → babdpus or babqpus (原始: maxjpus is babdpus or babqpus)
  6. [actual] qeqrpus → megxpus and dawzpus (原始: qeqrpus is megxpus and dawzpus)
  7. [actual] porkpus → qeqrpus and palzpus (原始: porkpus is qeqrpus and palzpus)
  8. [actual] megxpus → maxjpus (原始: megxpus is maxjpus)
  9. [actual] mudcpus → yarwpus (原始: mudcpus is yarwpus)
  10. [actual] wisfpus → mudcpus and zihjpus (原始: wisfpus is mudcpus and zihjpus)
  11. [planning] x → babdpus (原始: x is babdpus)
  12. [planning] x → babqpus (原始: x is babqpus)
  13. [actual] x → wisfpus (原始: x is wisfpus)
  14. [actual] wisfpus → mudcpus and zihjpus (原始: wisfpus is mudcpus and zihjpus)
  15. [actual] x → mudcpus and zihjpus (原始: x is mudcpus and zihjpus)
  16. [actual] mudcpus → yarwpus (原始: mudcpus is yarwpus)
  17. [actual] x → mudcpus (原始: x is mudcpus)
  18. [actual] x → yarwpus (原始: x is yarwpus)
  19. [actual] yarwpus → hafbpus and honzpus (原始: yarwpus is hafbpus and honzpus)
  20. [actual] x → hafbpus and honzpus (原始: x is hafbpus and honzpus)
  21. [actual] hafbpus → porkpus (原始: hafbpus is porkpus)
  22. [actual] x → porkpus (原始: x is porkpus)
  23. [actual] porkpus → qeqrpus and palzpus (原始: porkpus is qeqrpus and palzpus)
  24. [actual] x → qeqrpus and palzpus (原始: x is qeqrpus and palzpus)
  25. [actual] qeqrpus → megxpus and dawzpus (原始: qeqrpus is megxpus and dawzpus)
  26. [actual] x → megxpus and dawzpus (原始: x is megxpus and dawzpus)
  27. [actual] megxpus → maxjpus (原始: megxpus is maxjpus)
  28. [actual] x → maxjpus (原始: x is maxjpus)
  29. [actual] maxjpus → babdpus or babqpus (原始: maxjpus is babdpus or babqpus)
  30. [actual] x → maxjpus (原始: x is maxjpus)
  31. [planning] x → babdpus (原始: x is babdpus)
  32. [planning] x → babqpus (原始: x is babqpus)
  33. [actual] x → babdpus or babqpus (原始: x is babdpus or babqpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 12
[后处理] 加载LoG图，包含 12 个节点
  LoG节点 0: x is babdpus or babqpus (规则: MP, 深度: 1)
  LoG节点 1: x is hafbpus (规则: MP, 深度: 2)
  LoG节点 2: hafbpus is babdpus or babqpus (规则: MP, 深度: 2)
  LoG节点 3: x is mudcpus (规则: CE, 深度: 3)
  LoG节点 4: mudcpus is hafbpus (规则: CE, 深度: 3)
  LoG节点 5: hafbpus is qeqrpus (规则: CE, 深度: 3)
  LoG节点 6: qeqrpus is babdpus or babqpus (规则: MP, 深度: 3)
  LoG节点 7: x is mudcpus and zihjpus (规则: MP, 深度: 4)
  LoG节点 8: mudcpus is hafbpus and honzpus (规则: MP, 深度: 4)
  LoG节点 9: hafbpus is qeqrpus and palzpus (规则: MP, 深度: 4)
  LoG节点 10: qeqrpus is megxpus (规则: CE, 深度: 4)
  LoG节点 11: megxpus is babdpus or babqpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 33
   - 初始条件数: 9
   - LoG图节点数: 12

📋 初始条件列表:
    1. x is wisfpus
    2. yarwpus is hafbpus and honzpus
    3. hafbpus is porkpus
    4. maxjpus is babdpus or babqpus
    5. qeqrpus is megxpus and dawzpus
    6. porkpus is qeqrpus and palzpus
    7. megxpus is maxjpus
    8. mudcpus is yarwpus
    9. wisfpus is mudcpus and zihjpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 9 个前提节点

🔍 开始处理actual节点...

   节点 1: x is wisfpus
      ↻ 重复节点，计数: 2

   节点 2: yarwpus is hafbpus and honzpus
      ↻ 重复节点，计数: 2

   节点 3: hafbpus is porkpus
      ↻ 重复节点，计数: 2

   节点 4: maxjpus is babdpus or babqpus
      ↻ 重复节点，计数: 2

   节点 5: qeqrpus is megxpus and dawzpus
      ↻ 重复节点，计数: 2

   节点 6: porkpus is qeqrpus and palzpus
      ↻ 重复节点，计数: 2

   节点 7: megxpus is maxjpus
      ↻ 重复节点，计数: 2

   节点 8: mudcpus is yarwpus
      ↻ 重复节点，计数: 2

   节点 9: wisfpus is mudcpus and zihjpus
      ↻ 重复节点，计数: 2

   节点 10: x is wisfpus
      ↻ 重复节点，计数: 3

   节点 11: wisfpus is mudcpus and zihjpus
      ↻ 重复节点，计数: 3

   节点 12: x is mudcpus and zihjpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is mudcpus and zihjpus
      ✅ 验证成功 + LoG匹配

   节点 13: mudcpus is yarwpus
      ↻ 重复节点，计数: 3

   节点 14: x is mudcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is mudcpus
      ✅ 验证成功 + LoG匹配

   节点 15: x is yarwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wisfpus → wisfpus is yarwpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is wisfpus
  - 前提: wisfpus is mudcpus and zihjpus
  - 前提: mudcpus is yarwpus

   节点 16: yarwpus is hafbpus and honzpus
      ↻ 重复节点，计数: 3

   节点 17: x is hafbpus and honzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wisfpus → wisfpus is hafbpus and honzpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is wisfpus
  - 前提: wisfpus is mudcpus and zihjpus
  - 前提: mudcpus is yarwpus
  - 前提: yarwpus is hafbpus and honzpus
  ✓ 点亮LoG节点: x is hafbpus
[子树点亮]     └─ 点亮依赖节点: mudcpus is hafbpus (深度3)
[子树点亮]     └─ 点亮依赖节点: mudcpus is hafbpus and honzpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 18: hafbpus is porkpus
      ↻ 重复节点，计数: 3

   节点 19: x is porkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wisfpus → wisfpus is porkpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is wisfpus
  - 前提: wisfpus is mudcpus and zihjpus
  - 前提: mudcpus is yarwpus
  - 前提: yarwpus is hafbpus and honzpus
  - 前提: hafbpus is porkpus

   节点 20: porkpus is qeqrpus and palzpus
      ↻ 重复节点，计数: 3

   节点 21: x is qeqrpus and palzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wisfpus → wisfpus is qeqrpus and palzpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is wisfpus
  - 前提: wisfpus is mudcpus and zihjpus
  - 前提: mudcpus is yarwpus
  - 前提: yarwpus is hafbpus and honzpus
  - 前提: hafbpus is porkpus
  - 前提: porkpus is qeqrpus and palzpus
  ✓ 点亮LoG节点: hafbpus is qeqrpus
[子树点亮]     └─ 点亮依赖节点: hafbpus is qeqrpus and palzpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 22: qeqrpus is megxpus and dawzpus
      ↻ 重复节点，计数: 3

   节点 23: x is megxpus and dawzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wisfpus → wisfpus is megxpus and dawzpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is wisfpus
  - 前提: wisfpus is mudcpus and zihjpus
  - 前提: mudcpus is yarwpus
  - 前提: yarwpus is hafbpus and honzpus
  - 前提: hafbpus is porkpus
  - 前提: porkpus is qeqrpus and palzpus
  - 前提: qeqrpus is megxpus and dawzpus
  ✓ 点亮LoG节点: qeqrpus is megxpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 24: megxpus is maxjpus
      ↻ 重复节点，计数: 3

   节点 25: x is maxjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wisfpus → wisfpus is maxjpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is wisfpus
  - 前提: wisfpus is mudcpus and zihjpus
  - 前提: mudcpus is yarwpus
  - 前提: yarwpus is hafbpus and honzpus
  - 前提: hafbpus is porkpus
  - 前提: porkpus is qeqrpus and palzpus
  - 前提: qeqrpus is megxpus and dawzpus
  - 前提: megxpus is maxjpus

   节点 26: maxjpus is babdpus or babqpus
      ↻ 重复节点，计数: 3

   节点 27: x is maxjpus
      ↻ 重复节点，计数: 2

   节点 28: x is babdpus or babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus or babqpus
[子树点亮]     └─ 点亮依赖节点: hafbpus is babdpus or babqpus (深度2)
[子树点亮]     └─ 点亮依赖节点: qeqrpus is babdpus or babqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: megxpus is babdpus or babqpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 28
   - 新增节点: 9
   - 更新已存在节点: 19
   - 点亮的LoG节点: 12

🎯 推理质量统计:
   - 完美推理: 9 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 12节点, 9前提, 复杂度1-9

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 18
   - 前提节点: 9
   - 推理节点: 9
   - 幻觉节点: 0
   - 点亮LoG节点: 12

✅ 推理节点详情:
   🟢 x is mudcpus and zihjpus (出现1次, 质量:perfect)
   🟢 x is mudcpus (出现1次, 质量:perfect)
   🟢 x is yarwpus (出现1次, 质量:perfect)
   🟢 x is hafbpus and honzpus (出现1次, 质量:perfect)
   🟢 x is porkpus (出现1次, 质量:perfect)
   🟢 x is qeqrpus and palzpus (出现1次, 质量:perfect)
   🟢 x is megxpus and dawzpus (出现1次, 质量:perfect)
   🟢 x is maxjpus (出现2次, 质量:perfect)
   🟢 x is babdpus or babqpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - hafbpus is qeqrpus
   - hafbpus is babdpus or babqpus
   - x is mudcpus
   - mudcpus is hafbpus and honzpus
   - x is hafbpus
   - megxpus is babdpus or babqpus
   - x is mudcpus and zihjpus
   - mudcpus is hafbpus
   - qeqrpus is babdpus or babqpus
   - qeqrpus is megxpus
   - hafbpus is qeqrpus and palzpus
   - x is babdpus or babqpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus or babqpus (第4层)
   节点Coverage: 12/12 = 100.00%
   前提条件Coverage: 9/9 = 100.00%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/9 = 0.00%
   可推导节点: 9/9
   Strict Error Rate: 0/9 = 0.00%
   严格有效节点: 9/9

   详细分析:
     完美推理: 9 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 26/50
================================================================================
记录索引: 25
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_25.json
✅ 使用缓存结果:
   - 句子数: 81
   - 提取的语句数: 109
   - 初始条件数: 6

=== Statement提取完成 ===
总句子数: 81
成功提取: 81
失败提取: 0
总statements数: 109

=== 开始清洗Statement格式 ===
原始statements数: 109
清洗后statements数: 68
过滤掉的statements数: 41
清洗后的statements:
  1. [actual] bikjpus is nircpus
  2. [actual] nircpus is votnpus
  3. [actual] x is desspus
  4. [actual] votnpus is babqpus and vewvpus
  5. [actual] vexnpus is bikjpus
  6. [actual] desspus is vexnpus
  7. [planning] x is babdpus
  8. [planning] x is babqpus
  9. [planning] x is babxpus
  10. [planning] x is babqpus
  11. [actual] vexnpus is bikjpus
  12. [planning] vexnpus is bikjpus
  13. [planning] vexnpus is bikjpus
  14. [planning] votnpus is babqpus and vewvpus
  15. [planning] votnpus is a member of babqpus and vewvpus
  16. [planning] votnpus is both
  17. [actual] x is desspus
  18. [actual] x is desspus
  19. [actual] x is an item
  20. [actual] bikjpus is a category
  21. [actual] bikjpus is nircpus
  22. [actual] bikjpus is nircpus
  23. [actual] nircpus is votnpus
  24. [actual] x is desspus
  25. [actual] votnpus is babqpus and vewvpus
  26. [planning] votnpus is a subset of both babqpus and vewvpus
  27. [planning] votnpus is babqpus
  28. [planning] votnpus is vewvpus
  29. [actual] vexnpus is bikjpus
  30. [actual] desspus is vexnpus
  31. [planning] x is babqpus
  32. [planning] x is babdpus or babqpus or babxpus
  33. [planning] x is babdpus
  34. [planning] x is babqpus
  35. [planning] x is babxpus
  36. [planning] x is babqpus
  37. [actual] x is desspus
  38. [actual] x is desspus
  39. [actual] desspus is vexnpus
  40. [planning] x is vexnpus
  41. [planning] x is desspus
  42. [actual] vexnpus is bikjpus
  43. [actual] bikjpus is nircpus
  44. [actual] nircpus is votnpus
  45. [actual] votnpus is babqpus and vewvpus
  46. [actual] votnpus is babqpus and vewvpus
  47. [actual] votnpus is babqpus
  48. [actual] votnpus is vewvpus
  49. [planning] votnpus is babqpus
  50. [planning] votnpus is vewvpus
  51. [actual] x is votnpus
  52. [actual] votnpus is babqpus
  53. [actual] x is babqpus
  54. [actual] x is babqpus
  55. [planning] x is babdpus or babqpus or babxpus
  56. [actual] x is babqpus
  57. [planning] x is babqpus
  58. [planning] x is them
  59. [actual] x is babqpus
  60. [actual] votnpus is babqpus
  61. [actual] votnpus is vewvpus
  62. [actual] votnpus is babqpus
  63. [actual] votnpus is vewvpus
  64. [planning] votnpus is babqpus and vewvpus
  65. [actual] x is votnpus
  66. [actual] votnpus is babqpus
  67. [actual] x is babqpus
  68. [actual] x is babqpus

=== 开始标准化和解析节点 ===
清洗后statements数: 68
标准化后节点数: 62
过滤掉的无效实体数: 6
标准化后的节点:
  1. [actual] bikjpus → nircpus (原始: bikjpus is nircpus)
  2. [actual] nircpus → votnpus (原始: nircpus is votnpus)
  3. [actual] x → desspus (原始: x is desspus)
  4. [actual] votnpus → babqpus and vewvpus (原始: votnpus is babqpus and vewvpus)
  5. [actual] vexnpus → bikjpus (原始: vexnpus is bikjpus)
  6. [actual] desspus → vexnpus (原始: desspus is vexnpus)
  7. [planning] x → babdpus (原始: x is babdpus)
  8. [planning] x → babqpus (原始: x is babqpus)
  9. [planning] x → babxpus (原始: x is babxpus)
  10. [planning] x → babqpus (原始: x is babqpus)
  11. [actual] vexnpus → bikjpus (原始: vexnpus is bikjpus)
  12. [planning] vexnpus → bikjpus (原始: vexnpus is bikjpus)
  13. [planning] vexnpus → bikjpus (原始: vexnpus is bikjpus)
  14. [planning] votnpus → babqpus and vewvpus (原始: votnpus is babqpus and vewvpus)
  15. [actual] x → desspus (原始: x is desspus)
  16. [actual] x → desspus (原始: x is desspus)
  17. [actual] bikjpus → nircpus (原始: bikjpus is nircpus)
  18. [actual] bikjpus → nircpus (原始: bikjpus is nircpus)
  19. [actual] nircpus → votnpus (原始: nircpus is votnpus)
  20. [actual] x → desspus (原始: x is desspus)
  21. [actual] votnpus → babqpus and vewvpus (原始: votnpus is babqpus and vewvpus)
  22. [planning] votnpus → babqpus (原始: votnpus is babqpus)
  23. [planning] votnpus → vewvpus (原始: votnpus is vewvpus)
  24. [actual] vexnpus → bikjpus (原始: vexnpus is bikjpus)
  25. [actual] desspus → vexnpus (原始: desspus is vexnpus)
  26. [planning] x → babqpus (原始: x is babqpus)
  27. [planning] x → babdpus or babqpus or babxpus (原始: x is babdpus or babqpus or babxpus)
  28. [planning] x → babdpus (原始: x is babdpus)
  29. [planning] x → babqpus (原始: x is babqpus)
  30. [planning] x → babxpus (原始: x is babxpus)
  31. [planning] x → babqpus (原始: x is babqpus)
  32. [actual] x → desspus (原始: x is desspus)
  33. [actual] x → desspus (原始: x is desspus)
  34. [actual] desspus → vexnpus (原始: desspus is vexnpus)
  35. [planning] x → vexnpus (原始: x is vexnpus)
  36. [planning] x → desspus (原始: x is desspus)
  37. [actual] vexnpus → bikjpus (原始: vexnpus is bikjpus)
  38. [actual] bikjpus → nircpus (原始: bikjpus is nircpus)
  39. [actual] nircpus → votnpus (原始: nircpus is votnpus)
  40. [actual] votnpus → babqpus and vewvpus (原始: votnpus is babqpus and vewvpus)
  41. [actual] votnpus → babqpus and vewvpus (原始: votnpus is babqpus and vewvpus)
  42. [actual] votnpus → babqpus (原始: votnpus is babqpus)
  43. [actual] votnpus → vewvpus (原始: votnpus is vewvpus)
  44. [planning] votnpus → babqpus (原始: votnpus is babqpus)
  45. [planning] votnpus → vewvpus (原始: votnpus is vewvpus)
  46. [actual] x → votnpus (原始: x is votnpus)
  47. [actual] votnpus → babqpus (原始: votnpus is babqpus)
  48. [actual] x → babqpus (原始: x is babqpus)
  49. [actual] x → babqpus (原始: x is babqpus)
  50. [planning] x → babdpus or babqpus or babxpus (原始: x is babdpus or babqpus or babxpus)
  51. [actual] x → babqpus (原始: x is babqpus)
  52. [planning] x → babqpus (原始: x is babqpus)
  53. [actual] x → babqpus (原始: x is babqpus)
  54. [actual] votnpus → babqpus (原始: votnpus is babqpus)
  55. [actual] votnpus → vewvpus (原始: votnpus is vewvpus)
  56. [actual] votnpus → babqpus (原始: votnpus is babqpus)
  57. [actual] votnpus → vewvpus (原始: votnpus is vewvpus)
  58. [planning] votnpus → babqpus and vewvpus (原始: votnpus is babqpus and vewvpus)
  59. [actual] x → votnpus (原始: x is votnpus)
  60. [actual] votnpus → babqpus (原始: votnpus is babqpus)
  61. [actual] x → babqpus (原始: x is babqpus)
  62. [actual] x → babqpus (原始: x is babqpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 7
[后处理] 加载LoG图，包含 7 个节点
  LoG节点 0: x is babdpus or babqpus or babxpus (规则: DI, 深度: 1)
  LoG节点 1: x is babqpus (规则: MP, 深度: 2)
  LoG节点 2: x is nircpus (规则: MP, 深度: 3)
  LoG节点 3: nircpus is babqpus (规则: CE, 深度: 3)
  LoG节点 4: x is vexnpus (规则: MP, 深度: 4)
  LoG节点 5: vexnpus is nircpus (规则: MP, 深度: 4)
  LoG节点 6: nircpus is babqpus and vewvpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 62
   - 初始条件数: 6
   - LoG图节点数: 7

📋 初始条件列表:
    1. bikjpus is nircpus
    2. nircpus is votnpus
    3. x is desspus
    4. votnpus is babqpus and vewvpus
    5. vexnpus is bikjpus
    6. desspus is vexnpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 6 个前提节点

🔍 开始处理actual节点...

   节点 1: bikjpus is nircpus
      ↻ 重复节点，计数: 2

   节点 2: nircpus is votnpus
      ↻ 重复节点，计数: 2

   节点 3: x is desspus
      ↻ 重复节点，计数: 2

   节点 4: votnpus is babqpus and vewvpus
      ↻ 重复节点，计数: 2

   节点 5: vexnpus is bikjpus
      ↻ 重复节点，计数: 2

   节点 6: desspus is vexnpus
      ↻ 重复节点，计数: 2

   节点 7: vexnpus is bikjpus
      ↻ 重复节点，计数: 3

   节点 8: x is desspus
      ↻ 重复节点，计数: 3

   节点 9: x is desspus
      ↻ 重复节点，计数: 4

   节点 10: bikjpus is nircpus
      ↻ 重复节点，计数: 3

   节点 11: bikjpus is nircpus
      ↻ 重复节点，计数: 4

   节点 12: nircpus is votnpus
      ↻ 重复节点，计数: 3

   节点 13: x is desspus
      ↻ 重复节点，计数: 5

   节点 14: votnpus is babqpus and vewvpus
      ↻ 重复节点，计数: 3

   节点 15: vexnpus is bikjpus
      ↻ 重复节点，计数: 4

   节点 16: desspus is vexnpus
      ↻ 重复节点，计数: 3

   节点 17: x is desspus
      ↻ 重复节点，计数: 6

   节点 18: x is desspus
      ↻ 重复节点，计数: 7

   节点 19: desspus is vexnpus
      ↻ 重复节点，计数: 4

   节点 20: vexnpus is bikjpus
      ↻ 重复节点，计数: 5

   节点 21: bikjpus is nircpus
      ↻ 重复节点，计数: 5

   节点 22: nircpus is votnpus
      ↻ 重复节点，计数: 4

   节点 23: votnpus is babqpus and vewvpus
      ↻ 重复节点，计数: 4

   节点 24: votnpus is babqpus and vewvpus
      ↻ 重复节点，计数: 5

   节点 25: votnpus is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: votnpus is babqpus and vewvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: votnpus is babqpus and vewvpus

   节点 26: votnpus is vewvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: votnpus is babqpus and vewvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: votnpus is babqpus and vewvpus

   节点 27: x is votnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is desspus → desspus is votnpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is desspus
  - 前提: desspus is vexnpus
  - 前提: vexnpus is bikjpus
  - 前提: bikjpus is nircpus
  - 前提: nircpus is votnpus
  ✓ 点亮LoG节点: x is nircpus
[子树点亮]     └─ 点亮依赖节点: x is vexnpus (深度4)
[子树点亮]     └─ 点亮依赖节点: vexnpus is nircpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 28: votnpus is babqpus
      ↻ 重复节点，计数: 2

   节点 29: x is babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babqpus
[子树点亮]     └─ 点亮依赖节点: nircpus is babqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: nircpus is babqpus and vewvpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 30: x is babqpus
      ↻ 重复节点，计数: 2

   节点 31: x is babqpus
      ↻ 重复节点，计数: 3

   节点 32: x is babqpus
      ↻ 重复节点，计数: 4

   节点 33: votnpus is babqpus
      ↻ 重复节点，计数: 3

   节点 34: votnpus is vewvpus
      ↻ 重复节点，计数: 2

   节点 35: votnpus is babqpus
      ↻ 重复节点，计数: 4

   节点 36: votnpus is vewvpus
      ↻ 重复节点，计数: 3

   节点 37: x is votnpus
      ↻ 重复节点，计数: 2

   节点 38: votnpus is babqpus
      ↻ 重复节点，计数: 5

   节点 39: x is babqpus
      ↻ 重复节点，计数: 5

   节点 40: x is babqpus
      ↻ 重复节点，计数: 6

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 40
   - 新增节点: 4
   - 更新已存在节点: 36
   - 点亮的LoG节点: 6

🎯 推理质量统计:
   - 完美推理: 4 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 7节点, 6前提, 复杂度1-6
[高级点亮] 新点亮 1 个LoG节点

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 10
   - 前提节点: 6
   - 推理节点: 4
   - 幻觉节点: 0
   - 点亮LoG节点: 7

✅ 推理节点详情:
   🟢 votnpus is babqpus (出现5次, 质量:perfect)
   🟢 votnpus is vewvpus (出现3次, 质量:perfect)
   🟢 x is votnpus (出现2次, 质量:perfect)
   🟢 x is babqpus (出现6次, 质量:perfect)

🔥 点亮的LoG节点:
   - nircpus is babqpus and vewvpus
   - nircpus is babqpus
   - x is babdpus or babqpus or babxpus
   - x is nircpus
   - vexnpus is nircpus
   - x is babqpus
   - x is vexnpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus or babqpus or babxpus (第4层)
   节点Coverage: 7/7 = 100.00%
   前提条件Coverage: 6/6 = 100.00%
   各推理层点亮比例:
     第1层: 3/3 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/4 = 0.00%
   可推导节点: 4/4
   Strict Error Rate: 0/4 = 0.00%
   严格有效节点: 4/4

   详细分析:
     完美推理: 4 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 27/50
================================================================================
记录索引: 26
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_26.json
✅ 使用缓存结果:
   - 句子数: 77
   - 提取的语句数: 95
   - 初始条件数: 6

=== Statement提取完成 ===
总句子数: 77
成功提取: 77
失败提取: 0
总statements数: 95

=== 开始清洗Statement格式 ===
原始statements数: 95
清洗后statements数: 57
过滤掉的statements数: 38
清洗后的statements:
  1. [actual] depfpus is rugmpus
  2. [planning] depfpus is rugmpus or depfpus is rugmpus
  3. [planning] x is babdpus
  4. [actual] x is depfpus and kidgpus
  5. [actual] x is depfpus and kidgpus
  6. [actual] x is an element of depfpus and an element of kidgpus
  7. [actual] depfpus is rugmpus
  8. [planning] depfpus is rugmpus
  9. [planning] depfpus is rugmpus
  10. [actual] depfpus is a subset of rugmpus
  11. [actual] depfpus is rugmpus
  12. [actual] x is depfpus
  13. [actual] depfpus is a set
  14. [actual] x is babgpus
  15. [actual] x is relmpus and relmpus is babgpus
  16. [actual] depfpus is rugmpus
  17. [actual] x is depfpus and kidgpus
  18. [actual] x is depfpus and kidgpus
  19. [actual] pibkpus is tonxpus and japrpus
  20. [planning] pibkpus is tonxpus and japrpus
  21. [planning] pibkpus is a subset of both tonxpus and japrpus
  22. [actual] depfpus is pibkpus
  23. [planning] depfpus is pibkpus
  24. [actual] tonxpus is jelypus
  25. [actual] jelypus is babdpus and liqxpus
  26. [planning] jelypus is babdpus and liqxpus
  27. [planning] jelypus is an element
  28. [actual] jelypus is a set
  29. [actual] tonxpus is jelypus
  30. [actual] tonxpus is jelypus
  31. [planning] tonxpus is jelypus
  32. [planning] tonxpus is jelypus
  33. [actual] x is an element of depfpus
  34. [planning] x is babdpus
  35. [planning] x is babdpus
  36. [planning] x is babdpus
  37. [actual] depfpus is rugmpus
  38. [actual] x is depfpus and kidgpus
  39. [actual] pibkpus is tonxpus and japrpus
  40. [actual] depfpus is pibkpus
  41. [actual] jelypus is babdpus and liqxpus
  42. [actual] tonxpus is jelypus
  43. [planning] x is babdpus
  44. [actual] x is depfpus
  45. [actual] depfpus is pibkpus
  46. [actual] x is pibkpus
  47. [actual] x is tonxpus
  48. [actual] x is japrpus
  49. [actual] tonxpus is jelypus
  50. [actual] x is jelypus
  51. [actual] x is babdpus
  52. [actual] x is babdpus
  53. [actual] depfpus is rugmpus
  54. [actual] x is kidgpus
  55. [planning] x is babdpus
  56. [planning] x is babgpus
  57. [actual] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 57
标准化后节点数: 48
过滤掉的无效实体数: 9
标准化后的节点:
  1. [actual] depfpus → rugmpus (原始: depfpus is rugmpus)
  2. [planning] x → babdpus (原始: x is babdpus)
  3. [actual] x → depfpus and kidgpus (原始: x is depfpus and kidgpus)
  4. [actual] x → depfpus and kidgpus (原始: x is depfpus and kidgpus)
  5. [actual] depfpus → rugmpus (原始: depfpus is rugmpus)
  6. [planning] depfpus → rugmpus (原始: depfpus is rugmpus)
  7. [planning] depfpus → rugmpus (原始: depfpus is rugmpus)
  8. [actual] depfpus → rugmpus (原始: depfpus is rugmpus)
  9. [actual] x → depfpus (原始: x is depfpus)
  10. [actual] x → babgpus (原始: x is babgpus)
  11. [actual] depfpus → rugmpus (原始: depfpus is rugmpus)
  12. [actual] x → depfpus and kidgpus (原始: x is depfpus and kidgpus)
  13. [actual] x → depfpus and kidgpus (原始: x is depfpus and kidgpus)
  14. [actual] pibkpus → tonxpus and japrpus (原始: pibkpus is tonxpus and japrpus)
  15. [planning] pibkpus → tonxpus and japrpus (原始: pibkpus is tonxpus and japrpus)
  16. [actual] depfpus → pibkpus (原始: depfpus is pibkpus)
  17. [planning] depfpus → pibkpus (原始: depfpus is pibkpus)
  18. [actual] tonxpus → jelypus (原始: tonxpus is jelypus)
  19. [actual] jelypus → babdpus and liqxpus (原始: jelypus is babdpus and liqxpus)
  20. [planning] jelypus → babdpus and liqxpus (原始: jelypus is babdpus and liqxpus)
  21. [actual] tonxpus → jelypus (原始: tonxpus is jelypus)
  22. [actual] tonxpus → jelypus (原始: tonxpus is jelypus)
  23. [planning] tonxpus → jelypus (原始: tonxpus is jelypus)
  24. [planning] tonxpus → jelypus (原始: tonxpus is jelypus)
  25. [planning] x → babdpus (原始: x is babdpus)
  26. [planning] x → babdpus (原始: x is babdpus)
  27. [planning] x → babdpus (原始: x is babdpus)
  28. [actual] depfpus → rugmpus (原始: depfpus is rugmpus)
  29. [actual] x → depfpus and kidgpus (原始: x is depfpus and kidgpus)
  30. [actual] pibkpus → tonxpus and japrpus (原始: pibkpus is tonxpus and japrpus)
  31. [actual] depfpus → pibkpus (原始: depfpus is pibkpus)
  32. [actual] jelypus → babdpus and liqxpus (原始: jelypus is babdpus and liqxpus)
  33. [actual] tonxpus → jelypus (原始: tonxpus is jelypus)
  34. [planning] x → babdpus (原始: x is babdpus)
  35. [actual] x → depfpus (原始: x is depfpus)
  36. [actual] depfpus → pibkpus (原始: depfpus is pibkpus)
  37. [actual] x → pibkpus (原始: x is pibkpus)
  38. [actual] x → tonxpus (原始: x is tonxpus)
  39. [actual] x → japrpus (原始: x is japrpus)
  40. [actual] tonxpus → jelypus (原始: tonxpus is jelypus)
  41. [actual] x → jelypus (原始: x is jelypus)
  42. [actual] x → babdpus (原始: x is babdpus)
  43. [actual] x → babdpus (原始: x is babdpus)
  44. [actual] depfpus → rugmpus (原始: depfpus is rugmpus)
  45. [actual] x → kidgpus (原始: x is kidgpus)
  46. [planning] x → babdpus (原始: x is babdpus)
  47. [planning] x → babgpus (原始: x is babgpus)
  48. [actual] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 9
[后处理] 加载LoG图，包含 9 个节点
  LoG节点 0: x is babdpus (规则: MP, 深度: 1)
  LoG节点 1: x is pibkpus (规则: CE, 深度: 2)
  LoG节点 2: pibkpus is babdpus (规则: CE, 深度: 2)
  LoG节点 3: x is pibkpus and rugmpus (规则: MP, 深度: 3)
  LoG节点 4: pibkpus is babdpus and liqxpus (规则: MP, 深度: 3)
  LoG节点 5: x is depfpus (规则: CE, 深度: 4)
  LoG节点 6: depfpus is pibkpus and rugmpus (规则: CI, 深度: 4)
  LoG节点 7: pibkpus is tonxpus (规则: CE, 深度: 4)
  LoG节点 8: tonxpus is babdpus and liqxpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 48
   - 初始条件数: 6
   - LoG图节点数: 9

📋 初始条件列表:
    1. depfpus is rugmpus
    2. x is depfpus and kidgpus
    3. pibkpus is tonxpus and japrpus
    4. depfpus is pibkpus
    5. jelypus is babdpus and liqxpus
    6. tonxpus is jelypus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 6 个前提节点

🔍 开始处理actual节点...

   节点 1: depfpus is rugmpus
      ↻ 重复节点，计数: 2

   节点 2: x is depfpus and kidgpus
      ↻ 重复节点，计数: 2

   节点 3: x is depfpus and kidgpus
      ↻ 重复节点，计数: 3

   节点 4: depfpus is rugmpus
      ↻ 重复节点，计数: 3

   节点 5: depfpus is rugmpus
      ↻ 重复节点，计数: 4

   节点 6: x is depfpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is depfpus
      ✅ 验证成功 + LoG匹配

   节点 7: x is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 8: depfpus is rugmpus
      ↻ 重复节点，计数: 5

   节点 9: x is depfpus and kidgpus
      ↻ 重复节点，计数: 4

   节点 10: x is depfpus and kidgpus
      ↻ 重复节点，计数: 5

   节点 11: pibkpus is tonxpus and japrpus
      ↻ 重复节点，计数: 2

   节点 12: depfpus is pibkpus
      ↻ 重复节点，计数: 2

   节点 13: tonxpus is jelypus
      ↻ 重复节点，计数: 2

   节点 14: jelypus is babdpus and liqxpus
      ↻ 重复节点，计数: 2

   节点 15: tonxpus is jelypus
      ↻ 重复节点，计数: 3

   节点 16: tonxpus is jelypus
      ↻ 重复节点，计数: 4

   节点 17: depfpus is rugmpus
      ↻ 重复节点，计数: 6

   节点 18: x is depfpus and kidgpus
      ↻ 重复节点，计数: 6

   节点 19: pibkpus is tonxpus and japrpus
      ↻ 重复节点，计数: 3

   节点 20: depfpus is pibkpus
      ↻ 重复节点，计数: 3

   节点 21: jelypus is babdpus and liqxpus
      ↻ 重复节点，计数: 3

   节点 22: tonxpus is jelypus
      ↻ 重复节点，计数: 5

   节点 23: x is depfpus
      ↻ 重复节点，计数: 2

   节点 24: depfpus is pibkpus
      ↻ 重复节点，计数: 4

   节点 25: x is pibkpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is pibkpus
[子树点亮]     └─ 点亮依赖节点: x is pibkpus and rugmpus (深度3)
[子树点亮]     └─ 点亮依赖节点: depfpus is pibkpus and rugmpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 26: x is tonxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is depfpus → depfpus is tonxpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is depfpus
  - 前提: depfpus is pibkpus
  - 前提: pibkpus is tonxpus and japrpus
  ✓ 点亮LoG节点: pibkpus is tonxpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 27: x is japrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is depfpus → depfpus is japrpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is depfpus
  - 前提: depfpus is pibkpus
  - 前提: pibkpus is tonxpus and japrpus

   节点 28: tonxpus is jelypus
      ↻ 重复节点，计数: 6

   节点 29: x is jelypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is depfpus → depfpus is jelypus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is depfpus
  - 前提: depfpus is pibkpus
  - 前提: pibkpus is tonxpus and japrpus
  - 前提: tonxpus is jelypus

   节点 30: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: pibkpus is babdpus (深度2)
[子树点亮]     └─ 点亮依赖节点: pibkpus is babdpus and liqxpus (深度3)
[子树点亮]     └─ 点亮依赖节点: tonxpus is babdpus and liqxpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 31: x is babdpus
      ↻ 重复节点，计数: 2

   节点 32: depfpus is rugmpus
      ↻ 重复节点，计数: 7

   节点 33: x is kidgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is depfpus and kidgpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is depfpus and kidgpus

   节点 34: x is babdpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 34
   - 新增节点: 8
   - 更新已存在节点: 26
   - 点亮的LoG节点: 9

🎯 推理质量统计:
   - 完美推理: 1 (节点正确 + 路径正确)
   - 部分推理: 7 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 9节点, 6前提, 复杂度1-6

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 14
   - 前提节点: 6
   - 推理节点: 7
   - 幻觉节点: 1
   - 点亮LoG节点: 9

❌ 幻觉节点详情:
   - x is babgpus (出现1次)

✅ 推理节点详情:
   🟡 x is depfpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus']
   🟡 x is pibkpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus']
   🟡 x is tonxpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus']
   🟡 x is japrpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus']
   🟡 x is jelypus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus']
   🟡 x is babdpus (出现3次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus']
   🟡 x is kidgpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus']

🔥 点亮的LoG节点:
   - x is pibkpus and rugmpus
   - x is babdpus
   - pibkpus is babdpus
   - tonxpus is babdpus and liqxpus
   - pibkpus is babdpus and liqxpus
   - x is depfpus
   - pibkpus is tonxpus
   - depfpus is pibkpus and rugmpus
   - x is pibkpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus (第4层)
   节点Coverage: 9/9 = 100.00%
   前提条件Coverage: 6/6 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 1/8 = 12.50%
   可推导节点: 7/8
   Strict Error Rate: 8/8 = 100.00%
   严格有效节点: 0/8

   详细分析:
     完美推理: 1 (12.50%)
     部分推理: 7 (87.50%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 28/50
================================================================================
记录索引: 27
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_27.json
✅ 使用缓存结果:
   - 句子数: 47
   - 提取的语句数: 44
   - 初始条件数: 8

=== Statement提取完成 ===
总句子数: 47
成功提取: 47
失败提取: 0
总statements数: 44

=== 开始清洗Statement格式 ===
原始statements数: 44
清洗后statements数: 39
过滤掉的statements数: 5
清洗后的statements:
  1. [actual] betlpus is qadvpus
  2. [actual] x is zikkpus
  3. [actual] sichpus is tujkpus
  4. [actual] zikkpus is sichpus
  5. [actual] taympus is betlpus
  6. [actual] betlpus is babdpus
  7. [actual] x is taympus
  8. [actual] sichpus is babqpus
  9. [planning] x is babdpus and babqpus
  10. [planning] x is babdpus and babqpus
  11. [actual] x is taympus
  12. [actual] taympus is betlpus
  13. [actual] x is taympus
  14. [actual] taympus is betlpus
  15. [actual] x is betlpus
  16. [actual] x is betlpus
  17. [actual] betlpus is babdpus
  18. [actual] x is betlpus
  19. [actual] betlpus is babdpus
  20. [actual] x is babdpus
  21. [actual] x is babdpus
  22. [planning] x is babqpus
  23. [planning] x is sichpus or babqpus
  24. [actual] x is zikkpus
  25. [actual] zikkpus is sichpus
  26. [actual] x is zikkpus
  27. [actual] zikkpus is sichpus
  28. [actual] x is sichpus
  29. [actual] x is sichpus
  30. [actual] sichpus is babqpus
  31. [actual] x is sichpus
  32. [actual] sichpus is babqpus
  33. [actual] x is babqpus
  34. [actual] x is babdpus and babqpus
  35. [actual] x is babdpus and babqpus
  36. [actual] betlpus is qadvpus
  37. [actual] sichpus is tujkpus
  38. [actual] x is babdpus and babqpus
  39. [actual] x is babdpus and babqpus

=== 开始标准化和解析节点 ===
清洗后statements数: 39
标准化后节点数: 39
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] betlpus → qadvpus (原始: betlpus is qadvpus)
  2. [actual] x → zikkpus (原始: x is zikkpus)
  3. [actual] sichpus → tujkpus (原始: sichpus is tujkpus)
  4. [actual] zikkpus → sichpus (原始: zikkpus is sichpus)
  5. [actual] taympus → betlpus (原始: taympus is betlpus)
  6. [actual] betlpus → babdpus (原始: betlpus is babdpus)
  7. [actual] x → taympus (原始: x is taympus)
  8. [actual] sichpus → babqpus (原始: sichpus is babqpus)
  9. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  10. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  11. [actual] x → taympus (原始: x is taympus)
  12. [actual] taympus → betlpus (原始: taympus is betlpus)
  13. [actual] x → taympus (原始: x is taympus)
  14. [actual] taympus → betlpus (原始: taympus is betlpus)
  15. [actual] x → betlpus (原始: x is betlpus)
  16. [actual] x → betlpus (原始: x is betlpus)
  17. [actual] betlpus → babdpus (原始: betlpus is babdpus)
  18. [actual] x → betlpus (原始: x is betlpus)
  19. [actual] betlpus → babdpus (原始: betlpus is babdpus)
  20. [actual] x → babdpus (原始: x is babdpus)
  21. [actual] x → babdpus (原始: x is babdpus)
  22. [planning] x → babqpus (原始: x is babqpus)
  23. [planning] x → sichpus or babqpus (原始: x is sichpus or babqpus)
  24. [actual] x → zikkpus (原始: x is zikkpus)
  25. [actual] zikkpus → sichpus (原始: zikkpus is sichpus)
  26. [actual] x → zikkpus (原始: x is zikkpus)
  27. [actual] zikkpus → sichpus (原始: zikkpus is sichpus)
  28. [actual] x → sichpus (原始: x is sichpus)
  29. [actual] x → sichpus (原始: x is sichpus)
  30. [actual] sichpus → babqpus (原始: sichpus is babqpus)
  31. [actual] x → sichpus (原始: x is sichpus)
  32. [actual] sichpus → babqpus (原始: sichpus is babqpus)
  33. [actual] x → babqpus (原始: x is babqpus)
  34. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  35. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  36. [actual] betlpus → qadvpus (原始: betlpus is qadvpus)
  37. [actual] sichpus → tujkpus (原始: sichpus is tujkpus)
  38. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  39. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 9
[后处理] 加载LoG图，包含 9 个节点
  LoG节点 0: x is babdpus and babqpus (规则: CI, 深度: 1)
  LoG节点 1: x is babdpus (规则: CE, 深度: 2)
  LoG节点 2: x is babqpus (规则: CE, 深度: 2)
  LoG节点 3: x is babdpus and qadvpus (规则: MP, 深度: 3)
  LoG节点 4: x is babqpus and tujkpus (规则: MP, 深度: 3)
  LoG节点 5: x is betlpus (规则: MP, 深度: 4)
  LoG节点 6: betlpus is babdpus and qadvpus (规则: CI, 深度: 4)
  LoG节点 7: x is sichpus (规则: MP, 深度: 4)
  LoG节点 8: sichpus is babqpus and tujkpus (规则: CI, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 39
   - 初始条件数: 8
   - LoG图节点数: 9

📋 初始条件列表:
    1. betlpus is qadvpus
    2. x is zikkpus
    3. sichpus is tujkpus
    4. zikkpus is sichpus
    5. taympus is betlpus
    6. betlpus is babdpus
    7. x is taympus
    8. sichpus is babqpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 8 个前提节点

🔍 开始处理actual节点...

   节点 1: betlpus is qadvpus
      ↻ 重复节点，计数: 2

   节点 2: x is zikkpus
      ↻ 重复节点，计数: 2

   节点 3: sichpus is tujkpus
      ↻ 重复节点，计数: 2

   节点 4: zikkpus is sichpus
      ↻ 重复节点，计数: 2

   节点 5: taympus is betlpus
      ↻ 重复节点，计数: 2

   节点 6: betlpus is babdpus
      ↻ 重复节点，计数: 2

   节点 7: x is taympus
      ↻ 重复节点，计数: 2

   节点 8: sichpus is babqpus
      ↻ 重复节点，计数: 2

   节点 9: x is taympus
      ↻ 重复节点，计数: 3

   节点 10: taympus is betlpus
      ↻ 重复节点，计数: 3

   节点 11: x is taympus
      ↻ 重复节点，计数: 4

   节点 12: taympus is betlpus
      ↻ 重复节点，计数: 4

   节点 13: x is betlpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is betlpus
      ✅ 验证成功 + LoG匹配

   节点 14: x is betlpus
      ↻ 重复节点，计数: 2

   节点 15: betlpus is babdpus
      ↻ 重复节点，计数: 3

   节点 16: x is betlpus
      ↻ 重复节点，计数: 3

   节点 17: betlpus is babdpus
      ↻ 重复节点，计数: 4

   节点 18: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: x is babdpus and qadvpus (深度3)
[子树点亮]     └─ 点亮依赖节点: betlpus is babdpus and qadvpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 19: x is babdpus
      ↻ 重复节点，计数: 2

   节点 20: x is zikkpus
      ↻ 重复节点，计数: 3

   节点 21: zikkpus is sichpus
      ↻ 重复节点，计数: 3

   节点 22: x is zikkpus
      ↻ 重复节点，计数: 4

   节点 23: zikkpus is sichpus
      ↻ 重复节点，计数: 4

   节点 24: x is sichpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is sichpus
      ✅ 验证成功 + LoG匹配

   节点 25: x is sichpus
      ↻ 重复节点，计数: 2

   节点 26: sichpus is babqpus
      ↻ 重复节点，计数: 3

   节点 27: x is sichpus
      ↻ 重复节点，计数: 3

   节点 28: sichpus is babqpus
      ↻ 重复节点，计数: 4

   节点 29: x is babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babqpus
[子树点亮]     └─ 点亮依赖节点: x is babqpus and tujkpus (深度3)
[子树点亮]     └─ 点亮依赖节点: sichpus is babqpus and tujkpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 30: x is babdpus and babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus and babqpus
      ✅ 验证成功 + LoG匹配

   节点 31: x is babdpus and babqpus
      ↻ 重复节点，计数: 2

   节点 32: betlpus is qadvpus
      ↻ 重复节点，计数: 3

   节点 33: sichpus is tujkpus
      ↻ 重复节点，计数: 3

   节点 34: x is babdpus and babqpus
      ↻ 重复节点，计数: 3

   节点 35: x is babdpus and babqpus
      ↻ 重复节点，计数: 4

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 35
   - 新增节点: 5
   - 更新已存在节点: 30
   - 点亮的LoG节点: 9

🎯 推理质量统计:
   - 完美推理: 5 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 9节点, 8前提, 复杂度1-8

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 13
   - 前提节点: 8
   - 推理节点: 5
   - 幻觉节点: 0
   - 点亮LoG节点: 9

✅ 推理节点详情:
   🟢 x is betlpus (出现3次, 质量:perfect)
   🟢 x is babdpus (出现2次, 质量:perfect)
   🟢 x is sichpus (出现3次, 质量:perfect)
   🟢 x is babqpus (出现1次, 质量:perfect)
   🟢 x is babdpus and babqpus (出现4次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is babqpus and tujkpus
   - x is sichpus
   - x is babdpus and qadvpus
   - sichpus is babqpus and tujkpus
   - x is babdpus and babqpus
   - x is babdpus
   - betlpus is babdpus and qadvpus
   - x is betlpus
   - x is babqpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus and babqpus (第4层)
   节点Coverage: 9/9 = 100.00%
   前提条件Coverage: 8/8 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/5 = 0.00%
   可推导节点: 5/5
   Strict Error Rate: 0/5 = 0.00%
   严格有效节点: 5/5

   详细分析:
     完美推理: 5 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 29/50
================================================================================
记录索引: 28
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_28.json
✅ 使用缓存结果:
   - 句子数: 214
   - 提取的语句数: 264
   - 初始条件数: 7

=== Statement提取完成 ===
总句子数: 214
成功提取: 214
失败提取: 0
总statements数: 264

=== 开始清洗Statement格式 ===
原始statements数: 264
清洗后statements数: 183
过滤掉的statements数: 81
清洗后的statements:
  1. [actual] yudxpus is fotbpus
  2. [actual] x is puwfpus
  3. [actual] perjpus is yujzpus
  4. [actual] sadvpus is yudxpus and xusqpus
  5. [planning] sadvpus is both yudxpus and xusqpus
  6. [planning] sadvpus is a member of both
  7. [actual] sadvpus is yudxpus and xusqpus
  8. [actual] sadvpus is yudxpus and xusqpus
  9. [planning] sadvpus is yudxpus
  10. [planning] sadvpus is xusqpus
  11. [actual] yudxpus is fotbpus
  12. [planning] yudxpus is a subset of fotbpus
  13. [planning] yudxpus is an element
  14. [actual] sadvpus is yudxpus and xusqpus
  15. [planning] sadvpus is yudxpus
  16. [planning] sadvpus is xusqpus
  17. [planning] sadvpus is element
  18. [planning] sadvpus is yudxpus
  19. [planning] sadvpus is xusqpus
  20. [planning] x is babdpus
  21. [actual] x is puwfpus
  22. [planning] x is babdpus
  23. [planning] x is babdpus
  24. [actual] sadvpus is yudxpus and xusqpus
  25. [planning] x is instance
  26. [actual] x is relmpus
  27. [actual] relmpus is babgpus
  28. [actual] x is babgpus
  29. [planning] x is babgpus
  30. [actual] yudxpus is fotbpus
  31. [actual] perjpus is yujzpus
  32. [actual] sadvpus is yudxpus
  33. [actual] sadvpus is xusqpus
  34. [actual] yudxpus is babdpus
  35. [actual] puwfpus is perjpus
  36. [actual] perjpus is sadvpus
  37. [actual] puwfpus is perjpus
  38. [actual] perjpus is sadvpus
  39. [actual] perjpus is sadvpus
  40. [actual] perjpus is yujzpus
  41. [actual] sadvpus is yudxpus
  42. [actual] sadvpus is xusqpus
  43. [actual] yudxpus is fotbpus
  44. [actual] yudxpus is babdpus
  45. [planning] x is babdpus
  46. [planning] x is babdpus
  47. [actual] x is puwfpus
  48. [actual] puwfpus is perjpus
  49. [actual] perjpus is sadvpus
  50. [actual] sadvpus is yudxpus
  51. [actual] yudxpus is babdpus
  52. [actual] perjpus is a set that contains puwfpus
  53. [actual] perjpus is a member of sadvpus
  54. [actual] sadvpus is a set
  55. [actual] sadvpus is a member of yudxpus
  56. [actual] sadvpus is an element of yudxpus
  57. [actual] yudxpus is a set that contains sadvpus as an element
  58. [actual] x is an element of puwfpus
  59. [actual] puwfpus is an element of perjpus
  60. [actual] perjpus is an element of sadvpus
  61. [actual] sadvpus is an element of yudxpus
  62. [actual] yudxpus is an element of babdpus
  63. [actual] x is babdpus
  64. [actual] yudxpus is an element of babdpus
  65. [actual] yudxpus is a set
  66. [actual] x is deep inside
  67. [planning] x is babdpus
  68. [actual] perjpus is yujzpus
  69. [planning] yujzpus is babdpus
  70. [actual] yudxpus is fotbpus
  71. [actual] x is puwfpus
  72. [actual] x is an individual
  73. [planning] puwfpus is a set
  74. [planning] x is puwfpus
  75. [planning] x is a subset
  76. [planning] x is an individual
  77. [actual] x is puwfpus
  78. [planning] x is babdpus
  79. [actual] x is an individual
  80. [actual] yudxpus is a category
  81. [actual] x is puwfpus
  82. [actual] sadvpus is yudxpus and xusqpus
  83. [planning] sadvpus is yudxpus and xusqpus
  84. [planning] sadvpus is yudxpus
  85. [actual] yudxpus is fotbpus
  86. [actual] perjpus is yujzpus
  87. [actual] sadvpus is yudxpus and xusqpus
  88. [planning] sadvpus is a category
  89. [planning] sadvpus is yudxpus
  90. [planning] sadvpus is xusqpus
  91. [planning] sadvpus is yudxpus
  92. [planning] sadvpus is xusqpus
  93. [actual] sadvpus is yudxpus and xusqpus
  94. [planning] sadvpus is yudxpus and xusqpus
  95. [actual] yudxpus is babdpus
  96. [actual] puwfpus is perjpus
  97. [actual] perjpus is sadvpus
  98. [actual] puwfpus is perjpus
  99. [actual] perjpus is sadvpus
  100. [actual] sadvpus is yudxpus
  101. [actual] yudxpus is babdpus
  102. [actual] x is puwfpus
  103. [actual] puwfpus is babdpus
  104. [actual] x is babdpus
  105. [actual] x is babdpus
  106. [planning] sadvpus is yudxpus
  107. [planning] sadvpus is yudxpus and xusqpus
  108. [planning] sadvpus is yudxpus
  109. [planning] sadvpus is a category
  110. [planning] yudxpus is a category
  111. [planning] sadvpus is a subset of yudxpus
  112. [planning] sadvpus is a member of yudxpus
  113. [actual] perjpus is sadvpus
  114. [actual] yudxpus is fotbpus
  115. [actual] yudxpus is babdpus
  116. [planning] yudxpus is a category
  117. [planning] yudxpus is fotbpus
  118. [planning] yudxpus is babdpus
  119. [planning] yudxpus is babdpus and fotbpus
  120. [actual] perjpus is yujzpus
  121. [actual] perjpus is sadvpus
  122. [planning] perjpus is yujzpus
  123. [planning] perjpus is sadvpus
  124. [actual] puwfpus is perjpus
  125. [actual] perjpus is sadvpus
  126. [actual] puwfpus is sadvpus
  127. [actual] sadvpus is yudxpus
  128. [actual] sadvpus is yudxpus and xusqpus
  129. [planning] sadvpus is a subset of yudxpus
  130. [actual] x is puwfpus
  131. [actual] perjpus is sadvpus
  132. [actual] perjpus is an element of sadvpus
  133. [actual] puwfpus is perjpus
  134. [planning] puwfpus is perjpus
  135. [actual] sadvpus is yudxpus and xusqpus
  136. [planning] sadvpus is subset of yudxpus and xusqpus
  137. [actual] yudxpus is fotbpus
  138. [actual] yudxpus is babdpus
  139. [planning] yudxpus is a category
  140. [planning] yudxpus is a member of two other categories
  141. [planning] x is babdpus
  142. [planning] x is babdpus
  143. [planning] x is puwfpus
  144. [planning] puwfpus is perjpus
  145. [planning] perjpus is sadvpus
  146. [actual] x is an individual
  147. [planning] yudxpus is babdpus
  148. [planning] yudxpus is a category
  149. [planning] babdpus is a category
  150. [planning] yudxpus is babdpus
  151. [actual] perjpus is sadvpus
  152. [actual] sadvpus is yudxpus and xusqpus
  153. [planning] sadvpus is a category
  154. [planning] sadvpus is a member of yudxpus
  155. [planning] yudxpus is a category
  156. [planning] perjpus is a member of sadvpus
  157. [planning] perjpus is an instance of sadvpus
  158. [planning] puwfpus is a member of perjpus
  159. [planning] puwfpus is an instance of perjpus
  160. [planning] x is a member of puwfpus
  161. [planning] x is an instance of puwfpus
  162. [planning] x is babdpus
  163. [actual] sadvpus is yudxpus and xusqpus
  164. [planning] perjpus is sadvpus
  165. [actual] perjpus is a member of sadvpus
  166. [actual] sadvpus is a member of yudxpus
  167. [actual] perjpus is a member of a member of yudxpus
  168. [actual] x is yudxpus
  169. [actual] puwfpus is perjpus
  170. [actual] perjpus is sadvpus
  171. [actual] sadvpus is yudxpus
  172. [planning] x is babdpus
  173. [planning] x is yudxpus or in babdpus directly
  174. [actual] yudxpus is babdpus
  175. [planning] x is babdpus
  176. [actual] perjpus is yujzpus
  177. [planning] perjpus is subset of yujzpus
  178. [planning] perjpus is subset of babdpus
  179. [actual] sadvpus is subset of xusqpus
  180. [actual] sadvpus is yudxpus
  181. [actual] puwfpus is babdpus
  182. [actual] x is babdpus
  183. [actual] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 183
标准化后节点数: 127
过滤掉的无效实体数: 56
标准化后的节点:
  1. [actual] yudxpus → fotbpus (原始: yudxpus is fotbpus)
  2. [actual] x → puwfpus (原始: x is puwfpus)
  3. [actual] perjpus → yujzpus (原始: perjpus is yujzpus)
  4. [actual] sadvpus → yudxpus and xusqpus (原始: sadvpus is yudxpus and xusqpus)
  5. [actual] sadvpus → yudxpus and xusqpus (原始: sadvpus is yudxpus and xusqpus)
  6. [actual] sadvpus → yudxpus and xusqpus (原始: sadvpus is yudxpus and xusqpus)
  7. [planning] sadvpus → yudxpus (原始: sadvpus is yudxpus)
  8. [planning] sadvpus → xusqpus (原始: sadvpus is xusqpus)
  9. [actual] yudxpus → fotbpus (原始: yudxpus is fotbpus)
  10. [actual] sadvpus → yudxpus and xusqpus (原始: sadvpus is yudxpus and xusqpus)
  11. [planning] sadvpus → yudxpus (原始: sadvpus is yudxpus)
  12. [planning] sadvpus → xusqpus (原始: sadvpus is xusqpus)
  13. [planning] sadvpus → yudxpus (原始: sadvpus is yudxpus)
  14. [planning] sadvpus → xusqpus (原始: sadvpus is xusqpus)
  15. [planning] x → babdpus (原始: x is babdpus)
  16. [actual] x → puwfpus (原始: x is puwfpus)
  17. [planning] x → babdpus (原始: x is babdpus)
  18. [planning] x → babdpus (原始: x is babdpus)
  19. [actual] sadvpus → yudxpus and xusqpus (原始: sadvpus is yudxpus and xusqpus)
  20. [actual] x → relmpus (原始: x is relmpus)
  21. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  22. [actual] x → babgpus (原始: x is babgpus)
  23. [planning] x → babgpus (原始: x is babgpus)
  24. [actual] yudxpus → fotbpus (原始: yudxpus is fotbpus)
  25. [actual] perjpus → yujzpus (原始: perjpus is yujzpus)
  26. [actual] sadvpus → yudxpus (原始: sadvpus is yudxpus)
  27. [actual] sadvpus → xusqpus (原始: sadvpus is xusqpus)
  28. [actual] yudxpus → babdpus (原始: yudxpus is babdpus)
  29. [actual] puwfpus → perjpus (原始: puwfpus is perjpus)
  30. [actual] perjpus → sadvpus (原始: perjpus is sadvpus)
  31. [actual] puwfpus → perjpus (原始: puwfpus is perjpus)
  32. [actual] perjpus → sadvpus (原始: perjpus is sadvpus)
  33. [actual] perjpus → sadvpus (原始: perjpus is sadvpus)
  34. [actual] perjpus → yujzpus (原始: perjpus is yujzpus)
  35. [actual] sadvpus → yudxpus (原始: sadvpus is yudxpus)
  36. [actual] sadvpus → xusqpus (原始: sadvpus is xusqpus)
  37. [actual] yudxpus → fotbpus (原始: yudxpus is fotbpus)
  38. [actual] yudxpus → babdpus (原始: yudxpus is babdpus)
  39. [planning] x → babdpus (原始: x is babdpus)
  40. [planning] x → babdpus (原始: x is babdpus)
  41. [actual] x → puwfpus (原始: x is puwfpus)
  42. [actual] puwfpus → perjpus (原始: puwfpus is perjpus)
  43. [actual] perjpus → sadvpus (原始: perjpus is sadvpus)
  44. [actual] sadvpus → yudxpus (原始: sadvpus is yudxpus)
  45. [actual] yudxpus → babdpus (原始: yudxpus is babdpus)
  46. [actual] x → babdpus (原始: x is babdpus)
  47. [planning] x → babdpus (原始: x is babdpus)
  48. [actual] perjpus → yujzpus (原始: perjpus is yujzpus)
  49. [planning] yujzpus → babdpus (原始: yujzpus is babdpus)
  50. [actual] yudxpus → fotbpus (原始: yudxpus is fotbpus)
  51. [actual] x → puwfpus (原始: x is puwfpus)
  52. [planning] x → puwfpus (原始: x is puwfpus)
  53. [actual] x → puwfpus (原始: x is puwfpus)
  54. [planning] x → babdpus (原始: x is babdpus)
  55. [actual] x → puwfpus (原始: x is puwfpus)
  56. [actual] sadvpus → yudxpus and xusqpus (原始: sadvpus is yudxpus and xusqpus)
  57. [planning] sadvpus → yudxpus and xusqpus (原始: sadvpus is yudxpus and xusqpus)
  58. [planning] sadvpus → yudxpus (原始: sadvpus is yudxpus)
  59. [actual] yudxpus → fotbpus (原始: yudxpus is fotbpus)
  60. [actual] perjpus → yujzpus (原始: perjpus is yujzpus)
  61. [actual] sadvpus → yudxpus and xusqpus (原始: sadvpus is yudxpus and xusqpus)
  62. [planning] sadvpus → yudxpus (原始: sadvpus is yudxpus)
  63. [planning] sadvpus → xusqpus (原始: sadvpus is xusqpus)
  64. [planning] sadvpus → yudxpus (原始: sadvpus is yudxpus)
  65. [planning] sadvpus → xusqpus (原始: sadvpus is xusqpus)
  66. [actual] sadvpus → yudxpus and xusqpus (原始: sadvpus is yudxpus and xusqpus)
  67. [planning] sadvpus → yudxpus and xusqpus (原始: sadvpus is yudxpus and xusqpus)
  68. [actual] yudxpus → babdpus (原始: yudxpus is babdpus)
  69. [actual] puwfpus → perjpus (原始: puwfpus is perjpus)
  70. [actual] perjpus → sadvpus (原始: perjpus is sadvpus)
  71. [actual] puwfpus → perjpus (原始: puwfpus is perjpus)
  72. [actual] perjpus → sadvpus (原始: perjpus is sadvpus)
  73. [actual] sadvpus → yudxpus (原始: sadvpus is yudxpus)
  74. [actual] yudxpus → babdpus (原始: yudxpus is babdpus)
  75. [actual] x → puwfpus (原始: x is puwfpus)
  76. [actual] puwfpus → babdpus (原始: puwfpus is babdpus)
  77. [actual] x → babdpus (原始: x is babdpus)
  78. [actual] x → babdpus (原始: x is babdpus)
  79. [planning] sadvpus → yudxpus (原始: sadvpus is yudxpus)
  80. [planning] sadvpus → yudxpus and xusqpus (原始: sadvpus is yudxpus and xusqpus)
  81. [planning] sadvpus → yudxpus (原始: sadvpus is yudxpus)
  82. [actual] perjpus → sadvpus (原始: perjpus is sadvpus)
  83. [actual] yudxpus → fotbpus (原始: yudxpus is fotbpus)
  84. [actual] yudxpus → babdpus (原始: yudxpus is babdpus)
  85. [planning] yudxpus → fotbpus (原始: yudxpus is fotbpus)
  86. [planning] yudxpus → babdpus (原始: yudxpus is babdpus)
  87. [planning] yudxpus → babdpus and fotbpus (原始: yudxpus is babdpus and fotbpus)
  88. [actual] perjpus → yujzpus (原始: perjpus is yujzpus)
  89. [actual] perjpus → sadvpus (原始: perjpus is sadvpus)
  90. [planning] perjpus → yujzpus (原始: perjpus is yujzpus)
  91. [planning] perjpus → sadvpus (原始: perjpus is sadvpus)
  92. [actual] puwfpus → perjpus (原始: puwfpus is perjpus)
  93. [actual] perjpus → sadvpus (原始: perjpus is sadvpus)
  94. [actual] puwfpus → sadvpus (原始: puwfpus is sadvpus)
  95. [actual] sadvpus → yudxpus (原始: sadvpus is yudxpus)
  96. [actual] sadvpus → yudxpus and xusqpus (原始: sadvpus is yudxpus and xusqpus)
  97. [actual] x → puwfpus (原始: x is puwfpus)
  98. [actual] perjpus → sadvpus (原始: perjpus is sadvpus)
  99. [actual] puwfpus → perjpus (原始: puwfpus is perjpus)
  100. [planning] puwfpus → perjpus (原始: puwfpus is perjpus)
  101. [actual] sadvpus → yudxpus and xusqpus (原始: sadvpus is yudxpus and xusqpus)
  102. [actual] yudxpus → fotbpus (原始: yudxpus is fotbpus)
  103. [actual] yudxpus → babdpus (原始: yudxpus is babdpus)
  104. [planning] x → babdpus (原始: x is babdpus)
  105. [planning] x → babdpus (原始: x is babdpus)
  106. [planning] x → puwfpus (原始: x is puwfpus)
  107. [planning] puwfpus → perjpus (原始: puwfpus is perjpus)
  108. [planning] perjpus → sadvpus (原始: perjpus is sadvpus)
  109. [planning] yudxpus → babdpus (原始: yudxpus is babdpus)
  110. [planning] yudxpus → babdpus (原始: yudxpus is babdpus)
  111. [actual] perjpus → sadvpus (原始: perjpus is sadvpus)
  112. [actual] sadvpus → yudxpus and xusqpus (原始: sadvpus is yudxpus and xusqpus)
  113. [planning] x → babdpus (原始: x is babdpus)
  114. [actual] sadvpus → yudxpus and xusqpus (原始: sadvpus is yudxpus and xusqpus)
  115. [planning] perjpus → sadvpus (原始: perjpus is sadvpus)
  116. [actual] x → yudxpus (原始: x is yudxpus)
  117. [actual] puwfpus → perjpus (原始: puwfpus is perjpus)
  118. [actual] perjpus → sadvpus (原始: perjpus is sadvpus)
  119. [actual] sadvpus → yudxpus (原始: sadvpus is yudxpus)
  120. [planning] x → babdpus (原始: x is babdpus)
  121. [actual] yudxpus → babdpus (原始: yudxpus is babdpus)
  122. [planning] x → babdpus (原始: x is babdpus)
  123. [actual] perjpus → yujzpus (原始: perjpus is yujzpus)
  124. [actual] sadvpus → yudxpus (原始: sadvpus is yudxpus)
  125. [actual] puwfpus → babdpus (原始: puwfpus is babdpus)
  126. [actual] x → babdpus (原始: x is babdpus)
  127. [actual] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 9
[后处理] 加载LoG图，包含 9 个节点
  LoG节点 0: x is babdpus (规则: MP, 深度: 1)
  LoG节点 1: x is sadvpus (规则: CE, 深度: 2)
  LoG节点 2: sadvpus is babdpus (规则: CE, 深度: 2)
  LoG节点 3: x is sadvpus and yujzpus (规则: MP, 深度: 3)
  LoG节点 4: sadvpus is babdpus and fotbpus (规则: MP, 深度: 3)
  LoG节点 5: x is perjpus (规则: MP, 深度: 4)
  LoG节点 6: perjpus is sadvpus and yujzpus (规则: CI, 深度: 4)
  LoG节点 7: sadvpus is yudxpus (规则: CE, 深度: 4)
  LoG节点 8: yudxpus is babdpus and fotbpus (规则: CI, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 127
   - 初始条件数: 7
   - LoG图节点数: 9

📋 初始条件列表:
    1. yudxpus is fotbpus
    2. x is puwfpus
    3. perjpus is yujzpus
    4. sadvpus is yudxpus and xusqpus
    5. yudxpus is babdpus
    6. puwfpus is perjpus
    7. perjpus is sadvpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 7 个前提节点

🔍 开始处理actual节点...

   节点 1: yudxpus is fotbpus
      ↻ 重复节点，计数: 2

   节点 2: x is puwfpus
      ↻ 重复节点，计数: 2

   节点 3: perjpus is yujzpus
      ↻ 重复节点，计数: 2

   节点 4: sadvpus is yudxpus and xusqpus
      ↻ 重复节点，计数: 2

   节点 5: sadvpus is yudxpus and xusqpus
      ↻ 重复节点，计数: 3

   节点 6: sadvpus is yudxpus and xusqpus
      ↻ 重复节点，计数: 4

   节点 7: yudxpus is fotbpus
      ↻ 重复节点，计数: 3

   节点 8: sadvpus is yudxpus and xusqpus
      ↻ 重复节点，计数: 5

   节点 9: x is puwfpus
      ↻ 重复节点，计数: 3

   节点 10: sadvpus is yudxpus and xusqpus
      ↻ 重复节点，计数: 6

   节点 11: x is relmpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 12: relmpus is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 13: x is babgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is relmpus → relmpus is babgpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is relmpus
  - 前提: relmpus is babgpus

   节点 14: yudxpus is fotbpus
      ↻ 重复节点，计数: 4

   节点 15: perjpus is yujzpus
      ↻ 重复节点，计数: 3

   节点 16: sadvpus is yudxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: sadvpus is yudxpus
      ✅ 验证成功 + LoG匹配

   节点 17: sadvpus is xusqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: sadvpus is yudxpus and xusqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: sadvpus is yudxpus and xusqpus

   节点 18: yudxpus is babdpus
      ↻ 重复节点，计数: 2

   节点 19: puwfpus is perjpus
      ↻ 重复节点，计数: 2

   节点 20: perjpus is sadvpus
      ↻ 重复节点，计数: 2

   节点 21: puwfpus is perjpus
      ↻ 重复节点，计数: 3

   节点 22: perjpus is sadvpus
      ↻ 重复节点，计数: 3

   节点 23: perjpus is sadvpus
      ↻ 重复节点，计数: 4

   节点 24: perjpus is yujzpus
      ↻ 重复节点，计数: 4

   节点 25: sadvpus is yudxpus
      ↻ 重复节点，计数: 2

   节点 26: sadvpus is xusqpus
      ↻ 重复节点，计数: 2

   节点 27: yudxpus is fotbpus
      ↻ 重复节点，计数: 5

   节点 28: yudxpus is babdpus
      ↻ 重复节点，计数: 3

   节点 29: x is puwfpus
      ↻ 重复节点，计数: 4

   节点 30: puwfpus is perjpus
      ↻ 重复节点，计数: 4

   节点 31: perjpus is sadvpus
      ↻ 重复节点，计数: 5

   节点 32: sadvpus is yudxpus
      ↻ 重复节点，计数: 3

   节点 33: yudxpus is babdpus
      ↻ 重复节点，计数: 4

   节点 34: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: x is sadvpus (深度2)
[子树点亮]     └─ 点亮依赖节点: sadvpus is babdpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is sadvpus and yujzpus (深度3)
[子树点亮]     └─ 点亮依赖节点: sadvpus is babdpus and fotbpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is perjpus (深度4)
[子树点亮]     └─ 点亮依赖节点: perjpus is sadvpus and yujzpus (深度4)
[子树点亮]     └─ 点亮依赖节点: yudxpus is babdpus and fotbpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 7 个节点
      ✅ 验证成功 + LoG匹配

   节点 35: perjpus is yujzpus
      ↻ 重复节点，计数: 5

   节点 36: yudxpus is fotbpus
      ↻ 重复节点，计数: 6

   节点 37: x is puwfpus
      ↻ 重复节点，计数: 5

   节点 38: x is puwfpus
      ↻ 重复节点，计数: 6

   节点 39: x is puwfpus
      ↻ 重复节点，计数: 7

   节点 40: sadvpus is yudxpus and xusqpus
      ↻ 重复节点，计数: 7

   节点 41: yudxpus is fotbpus
      ↻ 重复节点，计数: 7

   节点 42: perjpus is yujzpus
      ↻ 重复节点，计数: 6

   节点 43: sadvpus is yudxpus and xusqpus
      ↻ 重复节点，计数: 8

   节点 44: sadvpus is yudxpus and xusqpus
      ↻ 重复节点，计数: 9

   节点 45: yudxpus is babdpus
      ↻ 重复节点，计数: 5

   节点 46: puwfpus is perjpus
      ↻ 重复节点，计数: 5

   节点 47: perjpus is sadvpus
      ↻ 重复节点，计数: 6

   节点 48: puwfpus is perjpus
      ↻ 重复节点，计数: 6

   节点 49: perjpus is sadvpus
      ↻ 重复节点，计数: 7

   节点 50: sadvpus is yudxpus
      ↻ 重复节点，计数: 4

   节点 51: yudxpus is babdpus
      ↻ 重复节点，计数: 6

   节点 52: x is puwfpus
      ↻ 重复节点，计数: 8

   节点 53: puwfpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: puwfpus is perjpus → perjpus is babdpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: puwfpus is perjpus
  - 前提: perjpus is sadvpus
  - 前提: sadvpus is yudxpus
  - 前提: yudxpus is babdpus

   节点 54: x is babdpus
      ↻ 重复节点，计数: 2

   节点 55: x is babdpus
      ↻ 重复节点，计数: 3

   节点 56: perjpus is sadvpus
      ↻ 重复节点，计数: 8

   节点 57: yudxpus is fotbpus
      ↻ 重复节点，计数: 8

   节点 58: yudxpus is babdpus
      ↻ 重复节点，计数: 7

   节点 59: perjpus is yujzpus
      ↻ 重复节点，计数: 7

   节点 60: perjpus is sadvpus
      ↻ 重复节点，计数: 9

   节点 61: puwfpus is perjpus
      ↻ 重复节点，计数: 7

   节点 62: perjpus is sadvpus
      ↻ 重复节点，计数: 10

   节点 63: puwfpus is sadvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: puwfpus is perjpus → perjpus is sadvpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: puwfpus is perjpus
  - 前提: perjpus is sadvpus

   节点 64: sadvpus is yudxpus
      ↻ 重复节点，计数: 5

   节点 65: sadvpus is yudxpus and xusqpus
      ↻ 重复节点，计数: 10

   节点 66: x is puwfpus
      ↻ 重复节点，计数: 9

   节点 67: perjpus is sadvpus
      ↻ 重复节点，计数: 11

   节点 68: puwfpus is perjpus
      ↻ 重复节点，计数: 8

   节点 69: sadvpus is yudxpus and xusqpus
      ↻ 重复节点，计数: 11

   节点 70: yudxpus is fotbpus
      ↻ 重复节点，计数: 9

   节点 71: yudxpus is babdpus
      ↻ 重复节点，计数: 8

   节点 72: perjpus is sadvpus
      ↻ 重复节点，计数: 12

   节点 73: sadvpus is yudxpus and xusqpus
      ↻ 重复节点，计数: 12

   节点 74: sadvpus is yudxpus and xusqpus
      ↻ 重复节点，计数: 13

   节点 75: x is yudxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is puwfpus → puwfpus is yudxpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is puwfpus
  - 前提: puwfpus is perjpus
  - 前提: perjpus is sadvpus
  - 前提: sadvpus is yudxpus

   节点 76: puwfpus is perjpus
      ↻ 重复节点，计数: 9

   节点 77: perjpus is sadvpus
      ↻ 重复节点，计数: 13

   节点 78: sadvpus is yudxpus
      ↻ 重复节点，计数: 6

   节点 79: yudxpus is babdpus
      ↻ 重复节点，计数: 9

   节点 80: perjpus is yujzpus
      ↻ 重复节点，计数: 8

   节点 81: sadvpus is yudxpus
      ↻ 重复节点，计数: 7

   节点 82: puwfpus is babdpus
      ↻ 重复节点，计数: 2

   节点 83: x is babdpus
      ↻ 重复节点，计数: 4

   节点 84: x is babdpus
      ↻ 重复节点，计数: 5

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 84
   - 新增节点: 9
   - 更新已存在节点: 75
   - 点亮的LoG节点: 9

🎯 推理质量统计:
   - 完美推理: 6 (节点正确 + 路径正确)
   - 部分推理: 3 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 9节点, 7前提, 复杂度1-7

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 16
   - 前提节点: 7
   - 推理节点: 7
   - 幻觉节点: 2
   - 点亮LoG节点: 9

❌ 幻觉节点详情:
   - x is relmpus (出现1次)
   - relmpus is babgpus (出现1次)

✅ 推理节点详情:
   🟡 x is babgpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus', 'relmpus is babgpus']
   🟢 sadvpus is yudxpus (出现7次, 质量:perfect)
   🟢 sadvpus is xusqpus (出现2次, 质量:perfect)
   🟡 x is babdpus (出现5次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟢 puwfpus is babdpus (出现2次, 质量:perfect)
   🟢 puwfpus is sadvpus (出现1次, 质量:perfect)
   🟡 x is yudxpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']

🔥 点亮的LoG节点:
   - x is perjpus
   - perjpus is sadvpus and yujzpus
   - x is sadvpus and yujzpus
   - sadvpus is babdpus and fotbpus
   - yudxpus is babdpus and fotbpus
   - sadvpus is babdpus
   - sadvpus is yudxpus
   - x is babdpus
   - x is sadvpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus (第4层)
   节点Coverage: 9/9 = 100.00%
   前提条件Coverage: 7/7 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 2/9 = 22.22%
   可推导节点: 7/9
   Strict Error Rate: 5/9 = 55.56%
   严格有效节点: 4/9

   详细分析:
     完美推理: 6 (66.67%)
     部分推理: 3 (33.33%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 30/50
================================================================================
记录索引: 29
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_29.json
✅ 使用缓存结果:
   - 句子数: 74
   - 提取的语句数: 87
   - 初始条件数: 7

=== Statement提取完成 ===
总句子数: 74
成功提取: 74
失败提取: 0
总statements数: 87

=== 开始清洗Statement格式 ===
原始statements数: 87
清洗后statements数: 75
过滤掉的statements数: 12
清洗后的statements:
  1. [planning] x is babdpus and babqpus and babxpus
  2. [actual] qagbpus is yuszpus and zupspus
  3. [actual] yuszpus is babxpus and cislpus
  4. [actual] zucjpus is qagbpus
  5. [actual] cepqpus is babdpus
  6. [actual] x is zucjpus
  7. [actual] yuszpus is cepqpus
  8. [actual] yuszpus is babqpus
  9. [planning] x is babdpus
  10. [planning] x is babqpus
  11. [planning] x is babxpus
  12. [actual] x is zucjpus
  13. [actual] zucjpus is qagbpus
  14. [actual] x is qagbpus
  15. [actual] zucjpus is qagbpus
  16. [actual] x is zucjpus
  17. [actual] x is qagbpus
  18. [actual] qagbpus is yuszpus and zupspus
  19. [actual] x is yuszpus and zupspus
  20. [actual] yuszpus is babxpus and cislpus
  21. [actual] yuszpus is cepqpus
  22. [actual] yuszpus is babqpus
  23. [actual] x is yuszpus
  24. [actual] yuszpus is babxpus
  25. [actual] x is babxpus
  26. [actual] yuszpus is babqpus
  27. [actual] x is babqpus
  28. [planning] x is babdpus
  29. [actual] yuszpus is cepqpus
  30. [actual] cepqpus is babdpus
  31. [actual] yuszpus is cepqpus
  32. [actual] cepqpus is babdpus
  33. [actual] yuszpus is babdpus
  34. [actual] x is yuszpus
  35. [actual] x is babdpus
  36. [actual] x is babdpus and babqpus and babxpus
  37. [actual] x is relmpus
  38. [actual] relmpus is babgpus
  39. [actual] x is babgpus
  40. [actual] qagbpus is yuszpus and zupspus
  41. [actual] qagbpus is yuszpus and zupspus
  42. [actual] yuszpus is babxpus and cislpus
  43. [actual] yuszpus is babxpus and cislpus
  44. [actual] zucjpus is qagbpus
  45. [actual] zucjpus is qagbpus
  46. [actual] cepqpus is babdpus
  47. [actual] cepqpus is babdpus
  48. [actual] x is zucjpus
  49. [actual] x is zucjpus
  50. [actual] yuszpus is cepqpus
  51. [actual] yuszpus is cepqpus
  52. [actual] yuszpus is babqpus
  53. [actual] yuszpus is babqpus
  54. [actual] x is zucjpus
  55. [actual] zucjpus is qagbpus
  56. [actual] x is qagbpus
  57. [actual] qagbpus is yuszpus and zupspus
  58. [actual] x is qagbpus
  59. [actual] x is yuszpus and zupspus
  60. [actual] x is yuszpus
  61. [actual] yuszpus is babxpus and cislpus
  62. [actual] x is yuszpus
  63. [actual] x is babxpus
  64. [actual] yuszpus is babqpus
  65. [planning] x is babqpus
  66. [actual] yuszpus is cepqpus
  67. [actual] cepqpus is babdpus
  68. [actual] yuszpus is babdpus
  69. [actual] yuszpus is cepqpus
  70. [actual] cepqpus is babdpus
  71. [actual] yuszpus is babdpus
  72. [actual] x is yuszpus
  73. [actual] x is babdpus
  74. [actual] x is babdpus and babqpus and babxpus
  75. [planning] x is babdpus and babqpus and babxpus

=== 开始标准化和解析节点 ===
清洗后statements数: 75
标准化后节点数: 75
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  2. [actual] qagbpus → yuszpus and zupspus (原始: qagbpus is yuszpus and zupspus)
  3. [actual] yuszpus → babxpus and cislpus (原始: yuszpus is babxpus and cislpus)
  4. [actual] zucjpus → qagbpus (原始: zucjpus is qagbpus)
  5. [actual] cepqpus → babdpus (原始: cepqpus is babdpus)
  6. [actual] x → zucjpus (原始: x is zucjpus)
  7. [actual] yuszpus → cepqpus (原始: yuszpus is cepqpus)
  8. [actual] yuszpus → babqpus (原始: yuszpus is babqpus)
  9. [planning] x → babdpus (原始: x is babdpus)
  10. [planning] x → babqpus (原始: x is babqpus)
  11. [planning] x → babxpus (原始: x is babxpus)
  12. [actual] x → zucjpus (原始: x is zucjpus)
  13. [actual] zucjpus → qagbpus (原始: zucjpus is qagbpus)
  14. [actual] x → qagbpus (原始: x is qagbpus)
  15. [actual] zucjpus → qagbpus (原始: zucjpus is qagbpus)
  16. [actual] x → zucjpus (原始: x is zucjpus)
  17. [actual] x → qagbpus (原始: x is qagbpus)
  18. [actual] qagbpus → yuszpus and zupspus (原始: qagbpus is yuszpus and zupspus)
  19. [actual] x → yuszpus and zupspus (原始: x is yuszpus and zupspus)
  20. [actual] yuszpus → babxpus and cislpus (原始: yuszpus is babxpus and cislpus)
  21. [actual] yuszpus → cepqpus (原始: yuszpus is cepqpus)
  22. [actual] yuszpus → babqpus (原始: yuszpus is babqpus)
  23. [actual] x → yuszpus (原始: x is yuszpus)
  24. [actual] yuszpus → babxpus (原始: yuszpus is babxpus)
  25. [actual] x → babxpus (原始: x is babxpus)
  26. [actual] yuszpus → babqpus (原始: yuszpus is babqpus)
  27. [actual] x → babqpus (原始: x is babqpus)
  28. [planning] x → babdpus (原始: x is babdpus)
  29. [actual] yuszpus → cepqpus (原始: yuszpus is cepqpus)
  30. [actual] cepqpus → babdpus (原始: cepqpus is babdpus)
  31. [actual] yuszpus → cepqpus (原始: yuszpus is cepqpus)
  32. [actual] cepqpus → babdpus (原始: cepqpus is babdpus)
  33. [actual] yuszpus → babdpus (原始: yuszpus is babdpus)
  34. [actual] x → yuszpus (原始: x is yuszpus)
  35. [actual] x → babdpus (原始: x is babdpus)
  36. [actual] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  37. [actual] x → relmpus (原始: x is relmpus)
  38. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  39. [actual] x → babgpus (原始: x is babgpus)
  40. [actual] qagbpus → yuszpus and zupspus (原始: qagbpus is yuszpus and zupspus)
  41. [actual] qagbpus → yuszpus and zupspus (原始: qagbpus is yuszpus and zupspus)
  42. [actual] yuszpus → babxpus and cislpus (原始: yuszpus is babxpus and cislpus)
  43. [actual] yuszpus → babxpus and cislpus (原始: yuszpus is babxpus and cislpus)
  44. [actual] zucjpus → qagbpus (原始: zucjpus is qagbpus)
  45. [actual] zucjpus → qagbpus (原始: zucjpus is qagbpus)
  46. [actual] cepqpus → babdpus (原始: cepqpus is babdpus)
  47. [actual] cepqpus → babdpus (原始: cepqpus is babdpus)
  48. [actual] x → zucjpus (原始: x is zucjpus)
  49. [actual] x → zucjpus (原始: x is zucjpus)
  50. [actual] yuszpus → cepqpus (原始: yuszpus is cepqpus)
  51. [actual] yuszpus → cepqpus (原始: yuszpus is cepqpus)
  52. [actual] yuszpus → babqpus (原始: yuszpus is babqpus)
  53. [actual] yuszpus → babqpus (原始: yuszpus is babqpus)
  54. [actual] x → zucjpus (原始: x is zucjpus)
  55. [actual] zucjpus → qagbpus (原始: zucjpus is qagbpus)
  56. [actual] x → qagbpus (原始: x is qagbpus)
  57. [actual] qagbpus → yuszpus and zupspus (原始: qagbpus is yuszpus and zupspus)
  58. [actual] x → qagbpus (原始: x is qagbpus)
  59. [actual] x → yuszpus and zupspus (原始: x is yuszpus and zupspus)
  60. [actual] x → yuszpus (原始: x is yuszpus)
  61. [actual] yuszpus → babxpus and cislpus (原始: yuszpus is babxpus and cislpus)
  62. [actual] x → yuszpus (原始: x is yuszpus)
  63. [actual] x → babxpus (原始: x is babxpus)
  64. [actual] yuszpus → babqpus (原始: yuszpus is babqpus)
  65. [planning] x → babqpus (原始: x is babqpus)
  66. [actual] yuszpus → cepqpus (原始: yuszpus is cepqpus)
  67. [actual] cepqpus → babdpus (原始: cepqpus is babdpus)
  68. [actual] yuszpus → babdpus (原始: yuszpus is babdpus)
  69. [actual] yuszpus → cepqpus (原始: yuszpus is cepqpus)
  70. [actual] cepqpus → babdpus (原始: cepqpus is babdpus)
  71. [actual] yuszpus → babdpus (原始: yuszpus is babdpus)
  72. [actual] x → yuszpus (原始: x is yuszpus)
  73. [actual] x → babdpus (原始: x is babdpus)
  74. [actual] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  75. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 8
[后处理] 加载LoG图，包含 8 个节点
  LoG节点 0: x is babdpus and babqpus and babxpus (规则: CE, 深度: 1)
  LoG节点 1: x is babdpus and babqpus and babxpus and cislpus (规则: MP, 深度: 2)
  LoG节点 2: x is yuszpus (规则: MP, 深度: 3)
  LoG节点 3: yuszpus is babdpus and babqpus and babxpus and cislpus (规则: CI, 深度: 3)
  LoG节点 4: x is qagbpus (规则: MP, 深度: 4)
  LoG节点 5: qagbpus is yuszpus (规则: CE, 深度: 4)
  LoG节点 6: yuszpus is babdpus (规则: MP, 深度: 4)
  LoG节点 7: yuszpus is babqpus and babxpus and cislpus (规则: CI, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 75
   - 初始条件数: 7
   - LoG图节点数: 8

📋 初始条件列表:
    1. qagbpus is yuszpus and zupspus
    2. yuszpus is babxpus and cislpus
    3. zucjpus is qagbpus
    4. cepqpus is babdpus
    5. x is zucjpus
    6. yuszpus is cepqpus
    7. yuszpus is babqpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 7 个前提节点

🔍 开始处理actual节点...

   节点 1: qagbpus is yuszpus and zupspus
      ↻ 重复节点，计数: 2

   节点 2: yuszpus is babxpus and cislpus
      ↻ 重复节点，计数: 2

   节点 3: zucjpus is qagbpus
      ↻ 重复节点，计数: 2

   节点 4: cepqpus is babdpus
      ↻ 重复节点，计数: 2

   节点 5: x is zucjpus
      ↻ 重复节点，计数: 2

   节点 6: yuszpus is cepqpus
      ↻ 重复节点，计数: 2

   节点 7: yuszpus is babqpus
      ↻ 重复节点，计数: 2

   节点 8: x is zucjpus
      ↻ 重复节点，计数: 3

   节点 9: zucjpus is qagbpus
      ↻ 重复节点，计数: 3

   节点 10: x is qagbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is qagbpus
      ✅ 验证成功 + LoG匹配

   节点 11: zucjpus is qagbpus
      ↻ 重复节点，计数: 4

   节点 12: x is zucjpus
      ↻ 重复节点，计数: 4

   节点 13: x is qagbpus
      ↻ 重复节点，计数: 2

   节点 14: qagbpus is yuszpus and zupspus
      ↻ 重复节点，计数: 3

   节点 15: x is yuszpus and zupspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zucjpus → zucjpus is yuszpus and zupspus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is zucjpus
  - 前提: zucjpus is qagbpus
  - 前提: qagbpus is yuszpus and zupspus
  ✓ 点亮LoG节点: x is yuszpus
[子树点亮]     └─ 点亮依赖节点: qagbpus is yuszpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 16: yuszpus is babxpus and cislpus
      ↻ 重复节点，计数: 3

   节点 17: yuszpus is cepqpus
      ↻ 重复节点，计数: 3

   节点 18: yuszpus is babqpus
      ↻ 重复节点，计数: 3

   节点 19: x is yuszpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 20: yuszpus is babxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yuszpus is babxpus and cislpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yuszpus is babxpus and cislpus

   节点 21: x is babxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zucjpus → zucjpus is babxpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is zucjpus
  - 前提: zucjpus is qagbpus
  - 前提: qagbpus is yuszpus and zupspus
  - 前提: yuszpus is babxpus

   节点 22: yuszpus is babqpus
      ↻ 重复节点，计数: 4

   节点 23: x is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zucjpus → zucjpus is babqpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is zucjpus
  - 前提: zucjpus is qagbpus
  - 前提: qagbpus is yuszpus and zupspus
  - 前提: yuszpus is babqpus

   节点 24: yuszpus is cepqpus
      ↻ 重复节点，计数: 4

   节点 25: cepqpus is babdpus
      ↻ 重复节点，计数: 3

   节点 26: yuszpus is cepqpus
      ↻ 重复节点，计数: 5

   节点 27: cepqpus is babdpus
      ↻ 重复节点，计数: 4

   节点 28: yuszpus is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: yuszpus is babdpus
      ✅ 验证成功 + LoG匹配

   节点 29: x is yuszpus
      ↻ 重复节点，计数: 2

   节点 30: x is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zucjpus → zucjpus is babdpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is zucjpus
  - 前提: zucjpus is qagbpus
  - 前提: qagbpus is yuszpus and zupspus
  - 前提: yuszpus is babdpus

   节点 31: x is babdpus and babqpus and babxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus and babqpus and babxpus
[子树点亮]     └─ 点亮依赖节点: x is babdpus and babqpus and babxpus and cislpus (深度2)
[子树点亮]     └─ 点亮依赖节点: yuszpus is babdpus and babqpus and babxpus and cislpus (深度3)
[子树点亮]     └─ 点亮依赖节点: yuszpus is babqpus and babxpus and cislpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 32: x is relmpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 33: relmpus is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 34: x is babgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is relmpus → relmpus is babgpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is relmpus
  - 前提: relmpus is babgpus

   节点 35: qagbpus is yuszpus and zupspus
      ↻ 重复节点，计数: 4

   节点 36: qagbpus is yuszpus and zupspus
      ↻ 重复节点，计数: 5

   节点 37: yuszpus is babxpus and cislpus
      ↻ 重复节点，计数: 4

   节点 38: yuszpus is babxpus and cislpus
      ↻ 重复节点，计数: 5

   节点 39: zucjpus is qagbpus
      ↻ 重复节点，计数: 5

   节点 40: zucjpus is qagbpus
      ↻ 重复节点，计数: 6

   节点 41: cepqpus is babdpus
      ↻ 重复节点，计数: 5

   节点 42: cepqpus is babdpus
      ↻ 重复节点，计数: 6

   节点 43: x is zucjpus
      ↻ 重复节点，计数: 5

   节点 44: x is zucjpus
      ↻ 重复节点，计数: 6

   节点 45: yuszpus is cepqpus
      ↻ 重复节点，计数: 6

   节点 46: yuszpus is cepqpus
      ↻ 重复节点，计数: 7

   节点 47: yuszpus is babqpus
      ↻ 重复节点，计数: 5

   节点 48: yuszpus is babqpus
      ↻ 重复节点，计数: 6

   节点 49: x is zucjpus
      ↻ 重复节点，计数: 7

   节点 50: zucjpus is qagbpus
      ↻ 重复节点，计数: 7

   节点 51: x is qagbpus
      ↻ 重复节点，计数: 3

   节点 52: qagbpus is yuszpus and zupspus
      ↻ 重复节点，计数: 6

   节点 53: x is qagbpus
      ↻ 重复节点，计数: 4

   节点 54: x is yuszpus and zupspus
      ↻ 重复节点，计数: 2

   节点 55: x is yuszpus
      ↻ 重复节点，计数: 3

   节点 56: yuszpus is babxpus and cislpus
      ↻ 重复节点，计数: 6

   节点 57: x is yuszpus
      ↻ 重复节点，计数: 4

   节点 58: x is babxpus
      ↻ 重复节点，计数: 2

   节点 59: yuszpus is babqpus
      ↻ 重复节点，计数: 7

   节点 60: yuszpus is cepqpus
      ↻ 重复节点，计数: 8

   节点 61: cepqpus is babdpus
      ↻ 重复节点，计数: 7

   节点 62: yuszpus is babdpus
      ↻ 重复节点，计数: 2

   节点 63: yuszpus is cepqpus
      ↻ 重复节点，计数: 9

   节点 64: cepqpus is babdpus
      ↻ 重复节点，计数: 8

   节点 65: yuszpus is babdpus
      ↻ 重复节点，计数: 3

   节点 66: x is yuszpus
      ↻ 重复节点，计数: 5

   节点 67: x is babdpus
      ↻ 重复节点，计数: 2

   节点 68: x is babdpus and babqpus and babxpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 68
   - 新增节点: 12
   - 更新已存在节点: 56
   - 点亮的LoG节点: 8

🎯 推理质量统计:
   - 完美推理: 4 (节点正确 + 路径正确)
   - 部分推理: 8 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 8节点, 7前提, 复杂度1-7

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 19
   - 前提节点: 7
   - 推理节点: 10
   - 幻觉节点: 2
   - 点亮LoG节点: 8

❌ 幻觉节点详情:
   - x is relmpus (出现1次)
   - relmpus is babgpus (出现1次)

✅ 推理节点详情:
   🟡 x is qagbpus (出现4次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟡 x is yuszpus and zupspus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟡 x is yuszpus (出现5次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟢 yuszpus is babxpus (出现1次, 质量:perfect)
   🟡 x is babxpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟡 x is babqpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟢 yuszpus is babdpus (出现3次, 质量:perfect)
   🟡 x is babdpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟡 x is babdpus and babqpus and babxpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟡 x is babgpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus', 'relmpus is babgpus']

🔥 点亮的LoG节点:
   - yuszpus is babqpus and babxpus and cislpus
   - qagbpus is yuszpus
   - yuszpus is babdpus and babqpus and babxpus and cislpus
   - yuszpus is babdpus
   - x is babdpus and babqpus and babxpus and cislpus
   - x is qagbpus
   - x is yuszpus
   - x is babdpus and babqpus and babxpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus and babqpus and babxpus (第4层)
   节点Coverage: 8/8 = 100.00%
   前提条件Coverage: 7/7 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 2/12 = 16.67%
   可推导节点: 10/12
   Strict Error Rate: 10/12 = 83.33%
   严格有效节点: 2/12

   详细分析:
     完美推理: 4 (33.33%)
     部分推理: 8 (66.67%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 31/50
================================================================================
记录索引: 30
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_30.json
✅ 使用缓存结果:
   - 句子数: 44
   - 提取的语句数: 45
   - 初始条件数: 9

=== Statement提取完成 ===
总句子数: 44
成功提取: 44
失败提取: 0
总statements数: 45

=== 开始清洗Statement格式 ===
原始statements数: 45
清洗后statements数: 41
过滤掉的statements数: 4
清洗后的statements:
  1. [planning] x is babdpus and babqpus and babxpus
  2. [planning] x is babdpus
  3. [planning] x is babqpus
  4. [planning] x is babxpus
  5. [actual] x is fupmpus
  6. [actual] x is jofnpus
  7. [actual] fupmpus is tuxnpus
  8. [actual] kukcpus is guzfpus and runppus
  9. [actual] tirmpus is babdpus and babqpus
  10. [actual] tuxnpus is kukcpus and tuqypus
  11. [actual] tizxpus is babxpus and rufwpus and yeljpus
  12. [actual] guzfpus is tirmpus
  13. [actual] jofnpus is tizxpus
  14. [planning] x is babdpus
  15. [planning] x is babqpus
  16. [planning] x is babxpus
  17. [actual] x is fupmpus
  18. [actual] fupmpus is tuxnpus
  19. [actual] x is tuxnpus
  20. [actual] tuxnpus is kukcpus and tuqypus
  21. [actual] x is kukcpus
  22. [actual] x is tuqypus
  23. [actual] kukcpus is guzfpus and runppus
  24. [actual] x is kukcpus
  25. [actual] guzfpus is tirmpus
  26. [actual] x is tirmpus
  27. [actual] x is guzfpus
  28. [actual] tirmpus is babdpus and babqpus
  29. [actual] x is tirmpus
  30. [actual] x is babdpus and babqpus
  31. [planning] x is babxpus
  32. [actual] x is jofnpus
  33. [actual] jofnpus is tizxpus
  34. [actual] x is tizxpus
  35. [actual] tizxpus is babxpus and rufwpus and yeljpus
  36. [actual] x is tizxpus
  37. [actual] x is babxpus
  38. [actual] x is babxpus
  39. [actual] x is babdpus and babqpus and babxpus
  40. [planning] x is babdpus and babqpus and babxpus
  41. [actual] x is all three categories

=== 开始标准化和解析节点 ===
清洗后statements数: 41
标准化后节点数: 40
过滤掉的无效实体数: 1
标准化后的节点:
  1. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  2. [planning] x → babdpus (原始: x is babdpus)
  3. [planning] x → babqpus (原始: x is babqpus)
  4. [planning] x → babxpus (原始: x is babxpus)
  5. [actual] x → fupmpus (原始: x is fupmpus)
  6. [actual] x → jofnpus (原始: x is jofnpus)
  7. [actual] fupmpus → tuxnpus (原始: fupmpus is tuxnpus)
  8. [actual] kukcpus → guzfpus and runppus (原始: kukcpus is guzfpus and runppus)
  9. [actual] tirmpus → babdpus and babqpus (原始: tirmpus is babdpus and babqpus)
  10. [actual] tuxnpus → kukcpus and tuqypus (原始: tuxnpus is kukcpus and tuqypus)
  11. [actual] tizxpus → babxpus and rufwpus and yeljpus (原始: tizxpus is babxpus and rufwpus and yeljpus)
  12. [actual] guzfpus → tirmpus (原始: guzfpus is tirmpus)
  13. [actual] jofnpus → tizxpus (原始: jofnpus is tizxpus)
  14. [planning] x → babdpus (原始: x is babdpus)
  15. [planning] x → babqpus (原始: x is babqpus)
  16. [planning] x → babxpus (原始: x is babxpus)
  17. [actual] x → fupmpus (原始: x is fupmpus)
  18. [actual] fupmpus → tuxnpus (原始: fupmpus is tuxnpus)
  19. [actual] x → tuxnpus (原始: x is tuxnpus)
  20. [actual] tuxnpus → kukcpus and tuqypus (原始: tuxnpus is kukcpus and tuqypus)
  21. [actual] x → kukcpus (原始: x is kukcpus)
  22. [actual] x → tuqypus (原始: x is tuqypus)
  23. [actual] kukcpus → guzfpus and runppus (原始: kukcpus is guzfpus and runppus)
  24. [actual] x → kukcpus (原始: x is kukcpus)
  25. [actual] guzfpus → tirmpus (原始: guzfpus is tirmpus)
  26. [actual] x → tirmpus (原始: x is tirmpus)
  27. [actual] x → guzfpus (原始: x is guzfpus)
  28. [actual] tirmpus → babdpus and babqpus (原始: tirmpus is babdpus and babqpus)
  29. [actual] x → tirmpus (原始: x is tirmpus)
  30. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  31. [planning] x → babxpus (原始: x is babxpus)
  32. [actual] x → jofnpus (原始: x is jofnpus)
  33. [actual] jofnpus → tizxpus (原始: jofnpus is tizxpus)
  34. [actual] x → tizxpus (原始: x is tizxpus)
  35. [actual] tizxpus → babxpus and rufwpus and yeljpus (原始: tizxpus is babxpus and rufwpus and yeljpus)
  36. [actual] x → tizxpus (原始: x is tizxpus)
  37. [actual] x → babxpus (原始: x is babxpus)
  38. [actual] x → babxpus (原始: x is babxpus)
  39. [actual] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  40. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 12
[后处理] 加载LoG图，包含 12 个节点
  LoG节点 0: x is babdpus and babqpus and babxpus (规则: CI, 深度: 1)
  LoG节点 1: x is babdpus and babqpus (规则: MP, 深度: 2)
  LoG节点 2: x is babxpus (规则: CE, 深度: 2)
  LoG节点 3: x is kukcpus (规则: MP, 深度: 3)
  LoG节点 4: kukcpus is babdpus and babqpus (规则: MP, 深度: 3)
  LoG节点 5: x is babxpus and rufwpus (规则: MP, 深度: 3)
  LoG节点 6: x is tuxnpus (规则: MP, 深度: 4)
  LoG节点 7: tuxnpus is kukcpus (规则: CE, 深度: 4)
  LoG节点 8: kukcpus is guzfpus (规则: CE, 深度: 4)
  LoG节点 9: guzfpus is babdpus and babqpus (规则: MP, 深度: 4)
  LoG节点 10: x is tizxpus (规则: MP, 深度: 4)
  LoG节点 11: tizxpus is babxpus and rufwpus (规则: CE, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 40
   - 初始条件数: 9
   - LoG图节点数: 12

📋 初始条件列表:
    1. x is fupmpus
    2. x is jofnpus
    3. fupmpus is tuxnpus
    4. kukcpus is guzfpus and runppus
    5. tirmpus is babdpus and babqpus
    6. tuxnpus is kukcpus and tuqypus
    7. tizxpus is babxpus and rufwpus and yeljpus
    8. guzfpus is tirmpus
    9. jofnpus is tizxpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 9 个前提节点

🔍 开始处理actual节点...

   节点 1: x is fupmpus
      ↻ 重复节点，计数: 2

   节点 2: x is jofnpus
      ↻ 重复节点，计数: 2

   节点 3: fupmpus is tuxnpus
      ↻ 重复节点，计数: 2

   节点 4: kukcpus is guzfpus and runppus
      ↻ 重复节点，计数: 2

   节点 5: tirmpus is babdpus and babqpus
      ↻ 重复节点，计数: 2

   节点 6: tuxnpus is kukcpus and tuqypus
      ↻ 重复节点，计数: 2

   节点 7: tizxpus is babxpus and rufwpus and yeljpus
      ↻ 重复节点，计数: 2

   节点 8: guzfpus is tirmpus
      ↻ 重复节点，计数: 2

   节点 9: jofnpus is tizxpus
      ↻ 重复节点，计数: 2

   节点 10: x is fupmpus
      ↻ 重复节点，计数: 3

   节点 11: fupmpus is tuxnpus
      ↻ 重复节点，计数: 3

   节点 12: x is tuxnpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is tuxnpus
      ✅ 验证成功 + LoG匹配

   节点 13: tuxnpus is kukcpus and tuqypus
      ↻ 重复节点，计数: 3

   节点 14: x is kukcpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is kukcpus
[子树点亮]     └─ 点亮依赖节点: tuxnpus is kukcpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 15: x is tuqypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fupmpus → fupmpus is tuqypus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is fupmpus
  - 前提: fupmpus is tuxnpus
  - 前提: tuxnpus is kukcpus and tuqypus

   节点 16: kukcpus is guzfpus and runppus
      ↻ 重复节点，计数: 3

   节点 17: x is kukcpus
      ↻ 重复节点，计数: 2

   节点 18: guzfpus is tirmpus
      ↻ 重复节点，计数: 3

   节点 19: x is tirmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fupmpus → fupmpus is tirmpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is fupmpus
  - 前提: fupmpus is tuxnpus
  - 前提: tuxnpus is kukcpus and tuqypus
  - 前提: kukcpus is guzfpus and runppus
  - 前提: guzfpus is tirmpus
  ✓ 点亮LoG节点: kukcpus is guzfpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 20: x is guzfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is fupmpus → fupmpus is guzfpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is fupmpus
  - 前提: fupmpus is tuxnpus
  - 前提: tuxnpus is kukcpus and tuqypus
  - 前提: kukcpus is guzfpus and runppus

   节点 21: tirmpus is babdpus and babqpus
      ↻ 重复节点，计数: 3

   节点 22: x is tirmpus
      ↻ 重复节点，计数: 2

   节点 23: x is babdpus and babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus and babqpus
[子树点亮]     └─ 点亮依赖节点: kukcpus is babdpus and babqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: guzfpus is babdpus and babqpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 24: x is jofnpus
      ↻ 重复节点，计数: 3

   节点 25: jofnpus is tizxpus
      ↻ 重复节点，计数: 3

   节点 26: x is tizxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is tizxpus
      ✅ 验证成功 + LoG匹配

   节点 27: tizxpus is babxpus and rufwpus and yeljpus
      ↻ 重复节点，计数: 3

   节点 28: x is tizxpus
      ↻ 重复节点，计数: 2

   节点 29: x is babxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babxpus
[子树点亮]     └─ 点亮依赖节点: x is babxpus and rufwpus (深度3)
[子树点亮]     └─ 点亮依赖节点: tizxpus is babxpus and rufwpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 30: x is babxpus
      ↻ 重复节点，计数: 2

   节点 31: x is babdpus and babqpus and babxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus and babqpus and babxpus
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 31
   - 新增节点: 9
   - 更新已存在节点: 22
   - 点亮的LoG节点: 12

🎯 推理质量统计:
   - 完美推理: 9 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 12节点, 9前提, 复杂度1-9

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 18
   - 前提节点: 9
   - 推理节点: 9
   - 幻觉节点: 0
   - 点亮LoG节点: 12

✅ 推理节点详情:
   🟢 x is tuxnpus (出现1次, 质量:perfect)
   🟢 x is kukcpus (出现2次, 质量:perfect)
   🟢 x is tuqypus (出现1次, 质量:perfect)
   🟢 x is tirmpus (出现2次, 质量:perfect)
   🟢 x is guzfpus (出现1次, 质量:perfect)
   🟢 x is babdpus and babqpus (出现1次, 质量:perfect)
   🟢 x is tizxpus (出现2次, 质量:perfect)
   🟢 x is babxpus (出现2次, 质量:perfect)
   🟢 x is babdpus and babqpus and babxpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is kukcpus
   - kukcpus is guzfpus
   - kukcpus is babdpus and babqpus
   - x is tuxnpus
   - x is tizxpus
   - x is babdpus and babqpus
   - tuxnpus is kukcpus
   - guzfpus is babdpus and babqpus
   - tizxpus is babxpus and rufwpus
   - x is babxpus and rufwpus
   - x is babxpus
   - x is babdpus and babqpus and babxpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus and babqpus and babxpus (第4层)
   节点Coverage: 12/12 = 100.00%
   前提条件Coverage: 9/9 = 100.00%
   各推理层点亮比例:
     第1层: 6/6 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/9 = 0.00%
   可推导节点: 9/9
   Strict Error Rate: 0/9 = 0.00%
   严格有效节点: 9/9

   详细分析:
     完美推理: 9 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 32/50
================================================================================
记录索引: 31
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_31.json
✅ 使用缓存结果:
   - 句子数: 27
   - 提取的语句数: 33
   - 初始条件数: 3

=== Statement提取完成 ===
总句子数: 27
成功提取: 27
失败提取: 0
总statements数: 33

=== 开始清洗Statement格式 ===
原始statements数: 33
清洗后statements数: 27
过滤掉的statements数: 6
清洗后的statements:
  1. [actual] x is dozbpus and binkpus
  2. [actual] dozbpus is babdpus
  3. [actual] dozbpus is liftpus
  4. [planning] x is babdpus
  5. [planning] x is babqpus
  6. [planning] x is babxpus
  7. [actual] x is relmpus
  8. [actual] relmpus is babgpus
  9. [actual] x is babgpus
  10. [actual] x is dozbpus
  11. [actual] dozbpus is babdpus
  12. [actual] dozbpus is babdpus
  13. [actual] x is dozbpus
  14. [actual] x is babdpus
  15. [actual] x is babdpus
  16. [planning] x is babdpus
  17. [planning] x is babqpus
  18. [planning] x is babxpus
  19. [actual] x is babdpus
  20. [actual] x is babdpus
  21. [planning] x is babqpus
  22. [planning] x is babxpus
  23. [actual] dozbpus is babdpus
  24. [planning] dozbpus is babdpus
  25. [actual] x is dozbpus
  26. [actual] x is babdpus
  27. [planning] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 27
标准化后节点数: 27
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] x → dozbpus and binkpus (原始: x is dozbpus and binkpus)
  2. [actual] dozbpus → babdpus (原始: dozbpus is babdpus)
  3. [actual] dozbpus → liftpus (原始: dozbpus is liftpus)
  4. [planning] x → babdpus (原始: x is babdpus)
  5. [planning] x → babqpus (原始: x is babqpus)
  6. [planning] x → babxpus (原始: x is babxpus)
  7. [actual] x → relmpus (原始: x is relmpus)
  8. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  9. [actual] x → babgpus (原始: x is babgpus)
  10. [actual] x → dozbpus (原始: x is dozbpus)
  11. [actual] dozbpus → babdpus (原始: dozbpus is babdpus)
  12. [actual] dozbpus → babdpus (原始: dozbpus is babdpus)
  13. [actual] x → dozbpus (原始: x is dozbpus)
  14. [actual] x → babdpus (原始: x is babdpus)
  15. [actual] x → babdpus (原始: x is babdpus)
  16. [planning] x → babdpus (原始: x is babdpus)
  17. [planning] x → babqpus (原始: x is babqpus)
  18. [planning] x → babxpus (原始: x is babxpus)
  19. [actual] x → babdpus (原始: x is babdpus)
  20. [actual] x → babdpus (原始: x is babdpus)
  21. [planning] x → babqpus (原始: x is babqpus)
  22. [planning] x → babxpus (原始: x is babxpus)
  23. [actual] dozbpus → babdpus (原始: dozbpus is babdpus)
  24. [planning] dozbpus → babdpus (原始: dozbpus is babdpus)
  25. [actual] x → dozbpus (原始: x is dozbpus)
  26. [actual] x → babdpus (原始: x is babdpus)
  27. [planning] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 5
[后处理] 加载LoG图，包含 5 个节点
  LoG节点 0: x is babdpus or babqpus or babxpus (规则: DI, 深度: 1)
  LoG节点 1: x is babdpus (规则: CE, 深度: 2)
  LoG节点 2: x is babdpus and liftpus (规则: MP, 深度: 3)
  LoG节点 3: x is dozbpus (规则: CE, 深度: 4)
  LoG节点 4: dozbpus is babdpus and liftpus (规则: CI, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 27
   - 初始条件数: 3
   - LoG图节点数: 5

📋 初始条件列表:
    1. x is dozbpus and binkpus
    2. dozbpus is babdpus
    3. dozbpus is liftpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 3 个前提节点

🔍 开始处理actual节点...

   节点 1: x is dozbpus and binkpus
      ↻ 重复节点，计数: 2

   节点 2: dozbpus is babdpus
      ↻ 重复节点，计数: 2

   节点 3: dozbpus is liftpus
      ↻ 重复节点，计数: 2

   节点 4: x is relmpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 5: relmpus is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 6: x is babgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is relmpus → relmpus is babgpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is relmpus
  - 前提: relmpus is babgpus

   节点 7: x is dozbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is dozbpus
      ✅ 验证成功 + LoG匹配

   节点 8: dozbpus is babdpus
      ↻ 重复节点，计数: 3

   节点 9: dozbpus is babdpus
      ↻ 重复节点，计数: 4

   节点 10: x is dozbpus
      ↻ 重复节点，计数: 2

   节点 11: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: x is babdpus and liftpus (深度3)
[子树点亮]     └─ 点亮依赖节点: dozbpus is babdpus and liftpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 12: x is babdpus
      ↻ 重复节点，计数: 2

   节点 13: x is babdpus
      ↻ 重复节点，计数: 3

   节点 14: x is babdpus
      ↻ 重复节点，计数: 4

   节点 15: dozbpus is babdpus
      ↻ 重复节点，计数: 5

   节点 16: x is dozbpus
      ↻ 重复节点，计数: 3

   节点 17: x is babdpus
      ↻ 重复节点，计数: 5

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 17
   - 新增节点: 5
   - 更新已存在节点: 12
   - 点亮的LoG节点: 4

🎯 推理质量统计:
   - 完美推理: 2 (节点正确 + 路径正确)
   - 部分推理: 3 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 5节点, 3前提, 复杂度1-3

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 8
   - 前提节点: 3
   - 推理节点: 3
   - 幻觉节点: 2
   - 点亮LoG节点: 4

❌ 幻觉节点详情:
   - x is relmpus (出现1次)
   - relmpus is babgpus (出现1次)

✅ 推理节点详情:
   🟡 x is babgpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus', 'relmpus is babgpus']
   🟡 x is dozbpus (出现3次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟡 x is babdpus (出现5次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']

🔥 点亮的LoG节点:
   - x is dozbpus
   - x is babdpus
   - dozbpus is babdpus and liftpus
   - x is babdpus and liftpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 3/4 = 75.00%
   最深点亮节点: x is babdpus (第3层)
   节点Coverage: 4/5 = 80.00%
   前提条件Coverage: 3/3 = 100.00%
   各推理层点亮比例:
     第1层: 2/2 = 100.00%
     第2层: 1/1 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 0/1 = 0.00%

🎯 计算Precision指标...
   Error Rate: 2/5 = 40.00%
   可推导节点: 3/5
   Strict Error Rate: 5/5 = 100.00%
   严格有效节点: 0/5

   详细分析:
     完美推理: 2 (40.00%)
     部分推理: 3 (60.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 33/50
================================================================================
记录索引: 32
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_32.json
✅ 使用缓存结果:
   - 句子数: 66
   - 提取的语句数: 64
   - 初始条件数: 7

=== Statement提取完成 ===
总句子数: 66
成功提取: 66
失败提取: 0
总statements数: 64

=== 开始清洗Statement格式 ===
原始statements数: 64
清洗后statements数: 61
过滤掉的statements数: 3
清洗后的statements:
  1. [actual] peckpus is parypus
  2. [actual] pubkpus is babqpus and xidspus
  3. [actual] pubkpus is sazfpus
  4. [actual] sazfpus is babdpus
  5. [actual] parypus is pubkpus
  6. [actual] x is peckpus and sibtpus
  7. [actual] pubkpus is jasjpus and yovmpus
  8. [planning] x is babdpus and babqpus
  9. [planning] x is babdpus and babqpus
  10. [actual] x is peckpus and sibtpus
  11. [actual] x is a member of peckpus and sibtpus
  12. [planning] x is babdpus and babqpus
  13. [actual] peckpus is parypus
  14. [actual] peckpus is a subset of parypus
  15. [actual] peckpus is parypus
  16. [actual] parypus is pubkpus
  17. [actual] parypus is pubkpus
  18. [actual] peckpus is parypus
  19. [actual] parypus is pubkpus
  20. [actual] peckpus is pubkpus
  21. [actual] peckpus is pubkpus
  22. [actual] x is peckpus
  23. [actual] peckpus is pubkpus
  24. [planning] x is pubkpus
  25. [actual] x is pubkpus
  26. [planning] pubkpus is babdpus and babqpus
  27. [actual] pubkpus is babqpus and xidspus
  28. [actual] pubkpus is a subset of babqpus
  29. [actual] pubkpus is a subset of xidspus
  30. [actual] x is pubkpus
  31. [actual] pubkpus is babqpus
  32. [actual] x is babqpus
  33. [actual] x is babqpus
  34. [planning] x is babdpus
  35. [actual] pubkpus is sazfpus
  36. [actual] pubkpus is a subset of sazfpus
  37. [actual] sazfpus is babdpus
  38. [actual] sazfpus is babdpus
  39. [actual] pubkpus is sazfpus
  40. [actual] sazfpus is babdpus
  41. [actual] pubkpus is babdpus
  42. [actual] x is pubkpus
  43. [actual] x is babdpus
  44. [actual] x is babdpus and babqpus
  45. [actual] x is babdpus and babqpus
  46. [actual] pubkpus is jasjpus and yovmpus
  47. [actual] x is sibtpus
  48. [planning] x is babgpus
  49. [planning] x is babkpus
  50. [planning] x is babmpus
  51. [actual] x is peckpus
  52. [actual] peckpus is parypus
  53. [actual] parypus is pubkpus
  54. [actual] x is pubkpus
  55. [actual] pubkpus is babqpus
  56. [actual] x is babqpus
  57. [actual] pubkpus is sazfpus
  58. [actual] sazfpus is babdpus
  59. [actual] pubkpus is babdpus
  60. [actual] x is babdpus
  61. [actual] x is babdpus and babqpus

=== 开始标准化和解析节点 ===
清洗后statements数: 61
标准化后节点数: 56
过滤掉的无效实体数: 5
标准化后的节点:
  1. [actual] peckpus → parypus (原始: peckpus is parypus)
  2. [actual] pubkpus → babqpus and xidspus (原始: pubkpus is babqpus and xidspus)
  3. [actual] pubkpus → sazfpus (原始: pubkpus is sazfpus)
  4. [actual] sazfpus → babdpus (原始: sazfpus is babdpus)
  5. [actual] parypus → pubkpus (原始: parypus is pubkpus)
  6. [actual] x → peckpus and sibtpus (原始: x is peckpus and sibtpus)
  7. [actual] pubkpus → jasjpus and yovmpus (原始: pubkpus is jasjpus and yovmpus)
  8. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  9. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  10. [actual] x → peckpus and sibtpus (原始: x is peckpus and sibtpus)
  11. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  12. [actual] peckpus → parypus (原始: peckpus is parypus)
  13. [actual] peckpus → parypus (原始: peckpus is parypus)
  14. [actual] parypus → pubkpus (原始: parypus is pubkpus)
  15. [actual] parypus → pubkpus (原始: parypus is pubkpus)
  16. [actual] peckpus → parypus (原始: peckpus is parypus)
  17. [actual] parypus → pubkpus (原始: parypus is pubkpus)
  18. [actual] peckpus → pubkpus (原始: peckpus is pubkpus)
  19. [actual] peckpus → pubkpus (原始: peckpus is pubkpus)
  20. [actual] x → peckpus (原始: x is peckpus)
  21. [actual] peckpus → pubkpus (原始: peckpus is pubkpus)
  22. [planning] x → pubkpus (原始: x is pubkpus)
  23. [actual] x → pubkpus (原始: x is pubkpus)
  24. [planning] pubkpus → babdpus and babqpus (原始: pubkpus is babdpus and babqpus)
  25. [actual] pubkpus → babqpus and xidspus (原始: pubkpus is babqpus and xidspus)
  26. [actual] x → pubkpus (原始: x is pubkpus)
  27. [actual] pubkpus → babqpus (原始: pubkpus is babqpus)
  28. [actual] x → babqpus (原始: x is babqpus)
  29. [actual] x → babqpus (原始: x is babqpus)
  30. [planning] x → babdpus (原始: x is babdpus)
  31. [actual] pubkpus → sazfpus (原始: pubkpus is sazfpus)
  32. [actual] sazfpus → babdpus (原始: sazfpus is babdpus)
  33. [actual] sazfpus → babdpus (原始: sazfpus is babdpus)
  34. [actual] pubkpus → sazfpus (原始: pubkpus is sazfpus)
  35. [actual] sazfpus → babdpus (原始: sazfpus is babdpus)
  36. [actual] pubkpus → babdpus (原始: pubkpus is babdpus)
  37. [actual] x → pubkpus (原始: x is pubkpus)
  38. [actual] x → babdpus (原始: x is babdpus)
  39. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  40. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  41. [actual] pubkpus → jasjpus and yovmpus (原始: pubkpus is jasjpus and yovmpus)
  42. [actual] x → sibtpus (原始: x is sibtpus)
  43. [planning] x → babgpus (原始: x is babgpus)
  44. [planning] x → babkpus (原始: x is babkpus)
  45. [planning] x → babmpus (原始: x is babmpus)
  46. [actual] x → peckpus (原始: x is peckpus)
  47. [actual] peckpus → parypus (原始: peckpus is parypus)
  48. [actual] parypus → pubkpus (原始: parypus is pubkpus)
  49. [actual] x → pubkpus (原始: x is pubkpus)
  50. [actual] pubkpus → babqpus (原始: pubkpus is babqpus)
  51. [actual] x → babqpus (原始: x is babqpus)
  52. [actual] pubkpus → sazfpus (原始: pubkpus is sazfpus)
  53. [actual] sazfpus → babdpus (原始: sazfpus is babdpus)
  54. [actual] pubkpus → babdpus (原始: pubkpus is babdpus)
  55. [actual] x → babdpus (原始: x is babdpus)
  56. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 9
[后处理] 加载LoG图，包含 9 个节点
  LoG节点 0: x is babdpus and babqpus (规则: CE, 深度: 1)
  LoG节点 1: x is babdpus and babqpus and jasjpus (规则: MP, 深度: 2)
  LoG节点 2: x is pubkpus (规则: MP, 深度: 3)
  LoG节点 3: pubkpus is babdpus and babqpus and jasjpus (规则: CI, 深度: 3)
  LoG节点 4: x is peckpus (规则: CE, 深度: 4)
  LoG节点 5: peckpus is pubkpus (规则: MP, 深度: 4)
  LoG节点 6: pubkpus is babdpus (规则: MP, 深度: 4)
  LoG节点 7: pubkpus is babqpus (规则: CE, 深度: 4)
  LoG节点 8: pubkpus is jasjpus (规则: CE, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 56
   - 初始条件数: 7
   - LoG图节点数: 9

📋 初始条件列表:
    1. peckpus is parypus
    2. pubkpus is babqpus and xidspus
    3. pubkpus is sazfpus
    4. sazfpus is babdpus
    5. parypus is pubkpus
    6. x is peckpus and sibtpus
    7. pubkpus is jasjpus and yovmpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 7 个前提节点

🔍 开始处理actual节点...

   节点 1: peckpus is parypus
      ↻ 重复节点，计数: 2

   节点 2: pubkpus is babqpus and xidspus
      ↻ 重复节点，计数: 2

   节点 3: pubkpus is sazfpus
      ↻ 重复节点，计数: 2

   节点 4: sazfpus is babdpus
      ↻ 重复节点，计数: 2

   节点 5: parypus is pubkpus
      ↻ 重复节点，计数: 2

   节点 6: x is peckpus and sibtpus
      ↻ 重复节点，计数: 2

   节点 7: pubkpus is jasjpus and yovmpus
      ↻ 重复节点，计数: 2

   节点 8: x is peckpus and sibtpus
      ↻ 重复节点，计数: 3

   节点 9: peckpus is parypus
      ↻ 重复节点，计数: 3

   节点 10: peckpus is parypus
      ↻ 重复节点，计数: 4

   节点 11: parypus is pubkpus
      ↻ 重复节点，计数: 3

   节点 12: parypus is pubkpus
      ↻ 重复节点，计数: 4

   节点 13: peckpus is parypus
      ↻ 重复节点，计数: 5

   节点 14: parypus is pubkpus
      ↻ 重复节点，计数: 5

   节点 15: peckpus is pubkpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: peckpus is pubkpus
      ✅ 验证成功 + LoG匹配

   节点 16: peckpus is pubkpus
      ↻ 重复节点，计数: 2

   节点 17: x is peckpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is peckpus
      ✅ 验证成功 + LoG匹配

   节点 18: peckpus is pubkpus
      ↻ 重复节点，计数: 3

   节点 19: x is pubkpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is pubkpus
      ✅ 验证成功 + LoG匹配

   节点 20: pubkpus is babqpus and xidspus
      ↻ 重复节点，计数: 3

   节点 21: x is pubkpus
      ↻ 重复节点，计数: 2

   节点 22: pubkpus is babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: pubkpus is babqpus
      ✅ 验证成功 + LoG匹配

   节点 23: x is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is peckpus → peckpus is babqpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is peckpus
  - 前提: peckpus is parypus
  - 前提: parypus is pubkpus
  - 前提: pubkpus is babqpus

   节点 24: x is babqpus
      ↻ 重复节点，计数: 2

   节点 25: pubkpus is sazfpus
      ↻ 重复节点，计数: 3

   节点 26: sazfpus is babdpus
      ↻ 重复节点，计数: 3

   节点 27: sazfpus is babdpus
      ↻ 重复节点，计数: 4

   节点 28: pubkpus is sazfpus
      ↻ 重复节点，计数: 4

   节点 29: sazfpus is babdpus
      ↻ 重复节点，计数: 5

   节点 30: pubkpus is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: pubkpus is babdpus
      ✅ 验证成功 + LoG匹配

   节点 31: x is pubkpus
      ↻ 重复节点，计数: 3

   节点 32: x is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is peckpus → peckpus is babdpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is peckpus
  - 前提: peckpus is parypus
  - 前提: parypus is pubkpus
  - 前提: pubkpus is babdpus

   节点 33: x is babdpus and babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus and babqpus
[子树点亮]     └─ 点亮依赖节点: x is babdpus and babqpus and jasjpus (深度2)
[子树点亮]     └─ 点亮依赖节点: pubkpus is babdpus and babqpus and jasjpus (深度3)
[子树点亮]     └─ 点亮依赖节点: pubkpus is jasjpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 34: x is babdpus and babqpus
      ↻ 重复节点，计数: 2

   节点 35: pubkpus is jasjpus and yovmpus
      ↻ 重复节点，计数: 3

   节点 36: x is sibtpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is peckpus and sibtpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is peckpus and sibtpus

   节点 37: x is peckpus
      ↻ 重复节点，计数: 2

   节点 38: peckpus is parypus
      ↻ 重复节点，计数: 6

   节点 39: parypus is pubkpus
      ↻ 重复节点，计数: 6

   节点 40: x is pubkpus
      ↻ 重复节点，计数: 4

   节点 41: pubkpus is babqpus
      ↻ 重复节点，计数: 2

   节点 42: x is babqpus
      ↻ 重复节点，计数: 3

   节点 43: pubkpus is sazfpus
      ↻ 重复节点，计数: 5

   节点 44: sazfpus is babdpus
      ↻ 重复节点，计数: 6

   节点 45: pubkpus is babdpus
      ↻ 重复节点，计数: 2

   节点 46: x is babdpus
      ↻ 重复节点，计数: 2

   节点 47: x is babdpus and babqpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 47
   - 新增节点: 9
   - 更新已存在节点: 38
   - 点亮的LoG节点: 9

🎯 推理质量统计:
   - 完美推理: 9 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 9节点, 7前提, 复杂度1-7

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 16
   - 前提节点: 7
   - 推理节点: 9
   - 幻觉节点: 0
   - 点亮LoG节点: 9

✅ 推理节点详情:
   🟢 peckpus is pubkpus (出现3次, 质量:perfect)
   🟢 x is peckpus (出现2次, 质量:perfect)
   🟢 x is pubkpus (出现4次, 质量:perfect)
   🟢 pubkpus is babqpus (出现2次, 质量:perfect)
   🟢 x is babqpus (出现3次, 质量:perfect)
   🟢 pubkpus is babdpus (出现2次, 质量:perfect)
   🟢 x is babdpus (出现2次, 质量:perfect)
   🟢 x is babdpus and babqpus (出现3次, 质量:perfect)
   🟢 x is sibtpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is babdpus and babqpus and jasjpus
   - pubkpus is jasjpus
   - pubkpus is babdpus
   - x is babdpus and babqpus
   - peckpus is pubkpus
   - pubkpus is babdpus and babqpus and jasjpus
   - pubkpus is babqpus
   - x is pubkpus
   - x is peckpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus and babqpus (第4层)
   节点Coverage: 9/9 = 100.00%
   前提条件Coverage: 7/7 = 100.00%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/9 = 0.00%
   可推导节点: 9/9
   Strict Error Rate: 0/9 = 0.00%
   严格有效节点: 9/9

   详细分析:
     完美推理: 9 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 34/50
================================================================================
记录索引: 33
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_33.json
✅ 使用缓存结果:
   - 句子数: 67
   - 提取的语句数: 90
   - 初始条件数: 6

=== Statement提取完成 ===
总句子数: 67
成功提取: 67
失败提取: 0
总statements数: 90

=== 开始清洗Statement格式 ===
原始statements数: 90
清洗后statements数: 65
过滤掉的statements数: 25
清洗后的statements:
  1. [actual] nevhpus is zozbpus
  2. [actual] x is wivlpus
  3. [actual] wivlpus is fukypus and jihcpus
  4. [planning] wivlpus is fukypus and jihcpus
  5. [planning] wivlpus is a subset of both
  6. [planning] wivlpus is fukypus and jihcpus
  7. [actual] wivlpus is fukypus and jihcpus
  8. [planning] wivlpus is fukypus
  9. [planning] wivlpus is jihcpus
  10. [actual] zozbpus is babdpus and puwfpus
  11. [actual] fukypus is lekjpus
  12. [actual] lekjpus is nevhpus and rofmpus
  13. [planning] x is babdpus
  14. [planning] x is babqpus
  15. [planning] x is babxpus
  16. [planning] x is babdpus
  17. [planning] x is babqpus
  18. [planning] x is babxpus
  19. [planning] x is babdpus
  20. [planning] x is babdpus
  21. [planning] x is babdpus
  22. [planning] x is babdpus
  23. [planning] x is babdpus
  24. [actual] x is wivlpus
  25. [actual] x is wivlpus
  26. [actual] wivlpus is fukypus and jihcpus
  27. [actual] wivlpus is fukypus
  28. [actual] x is wivlpus
  29. [actual] wivlpus is fukypus
  30. [planning] x is fukypus
  31. [actual] x is wivlpus
  32. [actual] wivlpus is fukypus
  33. [actual] x is fukypus
  34. [actual] fukypus is lekjpus
  35. [actual] x is fukypus
  36. [actual] x is lekjpus
  37. [actual] lekjpus is nevhpus and rofmpus
  38. [actual] lekjpus is nevhpus and rofmpus
  39. [actual] x is lekjpus
  40. [actual] nevhpus is zozbpus
  41. [actual] x is nevhpus
  42. [actual] x is zozbpus
  43. [actual] zozbpus is babdpus and puwfpus
  44. [actual] x is zozbpus
  45. [actual] x is babdpus
  46. [planning] x is babdpus or babqpus or babxpus
  47. [actual] x is babdpus
  48. [actual] x is babdpus
  49. [actual] lekjpus is nevhpus and rofmpus
  50. [actual] nevhpus is zozbpus
  51. [planning] lekjpus is zozbpus
  52. [actual] lekjpus is nevhpus
  53. [actual] nevhpus is zozbpus
  54. [actual] lekjpus is zozbpus
  55. [actual] wivlpus is fukypus
  56. [actual] fukypus is lekjpus
  57. [actual] wivlpus is lekjpus
  58. [actual] lekjpus is nevhpus
  59. [actual] nevhpus is zozbpus
  60. [actual] lekjpus is zozbpus
  61. [actual] zozbpus is babdpus
  62. [actual] lekjpus is babdpus
  63. [actual] x is lekjpus
  64. [actual] x is babdpus
  65. [actual] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 65
标准化后节点数: 64
过滤掉的无效实体数: 1
标准化后的节点:
  1. [actual] nevhpus → zozbpus (原始: nevhpus is zozbpus)
  2. [actual] x → wivlpus (原始: x is wivlpus)
  3. [actual] wivlpus → fukypus and jihcpus (原始: wivlpus is fukypus and jihcpus)
  4. [planning] wivlpus → fukypus and jihcpus (原始: wivlpus is fukypus and jihcpus)
  5. [planning] wivlpus → fukypus and jihcpus (原始: wivlpus is fukypus and jihcpus)
  6. [actual] wivlpus → fukypus and jihcpus (原始: wivlpus is fukypus and jihcpus)
  7. [planning] wivlpus → fukypus (原始: wivlpus is fukypus)
  8. [planning] wivlpus → jihcpus (原始: wivlpus is jihcpus)
  9. [actual] zozbpus → babdpus and puwfpus (原始: zozbpus is babdpus and puwfpus)
  10. [actual] fukypus → lekjpus (原始: fukypus is lekjpus)
  11. [actual] lekjpus → nevhpus and rofmpus (原始: lekjpus is nevhpus and rofmpus)
  12. [planning] x → babdpus (原始: x is babdpus)
  13. [planning] x → babqpus (原始: x is babqpus)
  14. [planning] x → babxpus (原始: x is babxpus)
  15. [planning] x → babdpus (原始: x is babdpus)
  16. [planning] x → babqpus (原始: x is babqpus)
  17. [planning] x → babxpus (原始: x is babxpus)
  18. [planning] x → babdpus (原始: x is babdpus)
  19. [planning] x → babdpus (原始: x is babdpus)
  20. [planning] x → babdpus (原始: x is babdpus)
  21. [planning] x → babdpus (原始: x is babdpus)
  22. [planning] x → babdpus (原始: x is babdpus)
  23. [actual] x → wivlpus (原始: x is wivlpus)
  24. [actual] x → wivlpus (原始: x is wivlpus)
  25. [actual] wivlpus → fukypus and jihcpus (原始: wivlpus is fukypus and jihcpus)
  26. [actual] wivlpus → fukypus (原始: wivlpus is fukypus)
  27. [actual] x → wivlpus (原始: x is wivlpus)
  28. [actual] wivlpus → fukypus (原始: wivlpus is fukypus)
  29. [planning] x → fukypus (原始: x is fukypus)
  30. [actual] x → wivlpus (原始: x is wivlpus)
  31. [actual] wivlpus → fukypus (原始: wivlpus is fukypus)
  32. [actual] x → fukypus (原始: x is fukypus)
  33. [actual] fukypus → lekjpus (原始: fukypus is lekjpus)
  34. [actual] x → fukypus (原始: x is fukypus)
  35. [actual] x → lekjpus (原始: x is lekjpus)
  36. [actual] lekjpus → nevhpus and rofmpus (原始: lekjpus is nevhpus and rofmpus)
  37. [actual] lekjpus → nevhpus and rofmpus (原始: lekjpus is nevhpus and rofmpus)
  38. [actual] x → lekjpus (原始: x is lekjpus)
  39. [actual] nevhpus → zozbpus (原始: nevhpus is zozbpus)
  40. [actual] x → nevhpus (原始: x is nevhpus)
  41. [actual] x → zozbpus (原始: x is zozbpus)
  42. [actual] zozbpus → babdpus and puwfpus (原始: zozbpus is babdpus and puwfpus)
  43. [actual] x → zozbpus (原始: x is zozbpus)
  44. [actual] x → babdpus (原始: x is babdpus)
  45. [planning] x → babdpus or babqpus or babxpus (原始: x is babdpus or babqpus or babxpus)
  46. [actual] x → babdpus (原始: x is babdpus)
  47. [actual] x → babdpus (原始: x is babdpus)
  48. [actual] lekjpus → nevhpus and rofmpus (原始: lekjpus is nevhpus and rofmpus)
  49. [actual] nevhpus → zozbpus (原始: nevhpus is zozbpus)
  50. [planning] lekjpus → zozbpus (原始: lekjpus is zozbpus)
  51. [actual] lekjpus → nevhpus (原始: lekjpus is nevhpus)
  52. [actual] nevhpus → zozbpus (原始: nevhpus is zozbpus)
  53. [actual] lekjpus → zozbpus (原始: lekjpus is zozbpus)
  54. [actual] wivlpus → fukypus (原始: wivlpus is fukypus)
  55. [actual] fukypus → lekjpus (原始: fukypus is lekjpus)
  56. [actual] wivlpus → lekjpus (原始: wivlpus is lekjpus)
  57. [actual] lekjpus → nevhpus (原始: lekjpus is nevhpus)
  58. [actual] nevhpus → zozbpus (原始: nevhpus is zozbpus)
  59. [actual] lekjpus → zozbpus (原始: lekjpus is zozbpus)
  60. [actual] zozbpus → babdpus (原始: zozbpus is babdpus)
  61. [actual] lekjpus → babdpus (原始: lekjpus is babdpus)
  62. [actual] x → lekjpus (原始: x is lekjpus)
  63. [actual] x → babdpus (原始: x is babdpus)
  64. [actual] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 9
[后处理] 加载LoG图，包含 9 个节点
  LoG节点 0: x is babdpus or babqpus or babxpus (规则: MP, 深度: 1)
  LoG节点 1: x is nevhpus (规则: MP, 深度: 2)
  LoG节点 2: nevhpus is babdpus or babqpus or babxpus (规则: DI, 深度: 2)
  LoG节点 3: x is fukypus (规则: CE, 深度: 3)
  LoG节点 4: fukypus is nevhpus (规则: CE, 深度: 3)
  LoG节点 5: nevhpus is babdpus (规则: CE, 深度: 3)
  LoG节点 6: x is fukypus and jihcpus (规则: MP, 深度: 4)
  LoG节点 7: fukypus is nevhpus and rofmpus (规则: MP, 深度: 4)
  LoG节点 8: nevhpus is babdpus and puwfpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 64
   - 初始条件数: 6
   - LoG图节点数: 9

📋 初始条件列表:
    1. nevhpus is zozbpus
    2. x is wivlpus
    3. wivlpus is fukypus and jihcpus
    4. zozbpus is babdpus and puwfpus
    5. fukypus is lekjpus
    6. lekjpus is nevhpus and rofmpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 6 个前提节点

🔍 开始处理actual节点...

   节点 1: nevhpus is zozbpus
      ↻ 重复节点，计数: 2

   节点 2: x is wivlpus
      ↻ 重复节点，计数: 2

   节点 3: wivlpus is fukypus and jihcpus
      ↻ 重复节点，计数: 2

   节点 4: wivlpus is fukypus and jihcpus
      ↻ 重复节点，计数: 3

   节点 5: zozbpus is babdpus and puwfpus
      ↻ 重复节点，计数: 2

   节点 6: fukypus is lekjpus
      ↻ 重复节点，计数: 2

   节点 7: lekjpus is nevhpus and rofmpus
      ↻ 重复节点，计数: 2

   节点 8: x is wivlpus
      ↻ 重复节点，计数: 3

   节点 9: x is wivlpus
      ↻ 重复节点，计数: 4

   节点 10: wivlpus is fukypus and jihcpus
      ↻ 重复节点，计数: 4

   节点 11: wivlpus is fukypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wivlpus is fukypus and jihcpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wivlpus is fukypus and jihcpus

   节点 12: x is wivlpus
      ↻ 重复节点，计数: 5

   节点 13: wivlpus is fukypus
      ↻ 重复节点，计数: 2

   节点 14: x is wivlpus
      ↻ 重复节点，计数: 6

   节点 15: wivlpus is fukypus
      ↻ 重复节点，计数: 3

   节点 16: x is fukypus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is fukypus
[子树点亮]     └─ 点亮依赖节点: x is fukypus and jihcpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 17: fukypus is lekjpus
      ↻ 重复节点，计数: 3

   节点 18: x is fukypus
      ↻ 重复节点，计数: 2

   节点 19: x is lekjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wivlpus → wivlpus is lekjpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is wivlpus
  - 前提: wivlpus is fukypus
  - 前提: fukypus is lekjpus

   节点 20: lekjpus is nevhpus and rofmpus
      ↻ 重复节点，计数: 3

   节点 21: lekjpus is nevhpus and rofmpus
      ↻ 重复节点，计数: 4

   节点 22: x is lekjpus
      ↻ 重复节点，计数: 2

   节点 23: nevhpus is zozbpus
      ↻ 重复节点，计数: 3

   节点 24: x is nevhpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is nevhpus
[子树点亮]     └─ 点亮依赖节点: fukypus is nevhpus (深度3)
[子树点亮]     └─ 点亮依赖节点: fukypus is nevhpus and rofmpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 25: x is zozbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wivlpus → wivlpus is zozbpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is wivlpus
  - 前提: wivlpus is fukypus
  - 前提: fukypus is lekjpus
  - 前提: lekjpus is nevhpus and rofmpus
  - 前提: nevhpus is zozbpus

   节点 26: zozbpus is babdpus and puwfpus
      ↻ 重复节点，计数: 3

   节点 27: x is zozbpus
      ↻ 重复节点，计数: 2

   节点 28: x is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is wivlpus → wivlpus is babdpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is wivlpus
  - 前提: wivlpus is fukypus
  - 前提: fukypus is lekjpus
  - 前提: lekjpus is nevhpus and rofmpus
  - 前提: nevhpus is zozbpus
  - 前提: zozbpus is babdpus and puwfpus
  ✓ 点亮LoG节点: x is babdpus or babqpus or babxpus
[子树点亮]     └─ 点亮依赖节点: nevhpus is babdpus or babqpus or babxpus (深度2)
[子树点亮]     └─ 点亮依赖节点: nevhpus is babdpus (深度3)
[子树点亮]     └─ 点亮依赖节点: nevhpus is babdpus and puwfpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 29: x is babdpus
      ↻ 重复节点，计数: 2

   节点 30: x is babdpus
      ↻ 重复节点，计数: 3

   节点 31: lekjpus is nevhpus and rofmpus
      ↻ 重复节点，计数: 5

   节点 32: nevhpus is zozbpus
      ↻ 重复节点，计数: 4

   节点 33: lekjpus is nevhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: lekjpus is nevhpus and rofmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: lekjpus is nevhpus and rofmpus

   节点 34: nevhpus is zozbpus
      ↻ 重复节点，计数: 5

   节点 35: lekjpus is zozbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: lekjpus is nevhpus → nevhpus is zozbpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: lekjpus is nevhpus
  - 前提: nevhpus is zozbpus

   节点 36: wivlpus is fukypus
      ↻ 重复节点，计数: 4

   节点 37: fukypus is lekjpus
      ↻ 重复节点，计数: 4

   节点 38: wivlpus is lekjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: wivlpus is fukypus → fukypus is lekjpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: wivlpus is fukypus
  - 前提: fukypus is lekjpus

   节点 39: lekjpus is nevhpus
      ↻ 重复节点，计数: 2

   节点 40: nevhpus is zozbpus
      ↻ 重复节点，计数: 6

   节点 41: lekjpus is zozbpus
      ↻ 重复节点，计数: 2

   节点 42: zozbpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zozbpus is babdpus and puwfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zozbpus is babdpus and puwfpus

   节点 43: lekjpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: lekjpus is nevhpus → nevhpus is babdpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: lekjpus is nevhpus
  - 前提: nevhpus is zozbpus
  - 前提: zozbpus is babdpus

   节点 44: x is lekjpus
      ↻ 重复节点，计数: 3

   节点 45: x is babdpus
      ↻ 重复节点，计数: 4

   节点 46: x is babdpus
      ↻ 重复节点，计数: 5

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 46
   - 新增节点: 11
   - 更新已存在节点: 35
   - 点亮的LoG节点: 9

🎯 推理质量统计:
   - 完美推理: 11 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 9节点, 6前提, 复杂度1-6

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 17
   - 前提节点: 6
   - 推理节点: 11
   - 幻觉节点: 0
   - 点亮LoG节点: 9

✅ 推理节点详情:
   🟢 wivlpus is fukypus (出现4次, 质量:perfect)
   🟢 x is fukypus (出现2次, 质量:perfect)
   🟢 x is lekjpus (出现3次, 质量:perfect)
   🟢 x is nevhpus (出现1次, 质量:perfect)
   🟢 x is zozbpus (出现2次, 质量:perfect)
   🟢 x is babdpus (出现5次, 质量:perfect)
   🟢 lekjpus is nevhpus (出现2次, 质量:perfect)
   🟢 lekjpus is zozbpus (出现2次, 质量:perfect)
   🟢 wivlpus is lekjpus (出现1次, 质量:perfect)
   🟢 zozbpus is babdpus (出现1次, 质量:perfect)
   🟢 lekjpus is babdpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - fukypus is nevhpus and rofmpus
   - nevhpus is babdpus or babqpus or babxpus
   - nevhpus is babdpus
   - nevhpus is babdpus and puwfpus
   - x is nevhpus
   - x is babdpus or babqpus or babxpus
   - fukypus is nevhpus
   - x is fukypus and jihcpus
   - x is fukypus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus or babqpus or babxpus (第4层)
   节点Coverage: 9/9 = 100.00%
   前提条件Coverage: 6/6 = 100.00%
   各推理层点亮比例:
     第1层: 3/3 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/11 = 0.00%
   可推导节点: 11/11
   Strict Error Rate: 0/11 = 0.00%
   严格有效节点: 11/11

   详细分析:
     完美推理: 11 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 35/50
================================================================================
记录索引: 34
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_34.json
✅ 使用缓存结果:
   - 句子数: 64
   - 提取的语句数: 64
   - 初始条件数: 8

=== Statement提取完成 ===
总句子数: 64
成功提取: 64
失败提取: 0
总statements数: 64

=== 开始清洗Statement格式 ===
原始statements数: 64
清洗后statements数: 63
过滤掉的statements数: 1
清洗后的statements:
  1. [planning] x is babdpus
  2. [planning] x is babdpus
  3. [actual] jupxpus is betgpus
  4. [actual] x is zeqfpus
  5. [actual] qojxpus is borppus and wivlpus
  6. [actual] betgpus is babdpus and mojcpus
  7. [actual] fokgpus is jupxpus and jehnpus
  8. [actual] zeqfpus is zatmpus and rakppus
  9. [actual] zatmpus is qojxpus
  10. [actual] borppus is fokgpus
  11. [actual] x is zeqfpus
  12. [actual] x is zeqfpus
  13. [actual] zeqfpus is zatmpus and rakppus
  14. [actual] zeqfpus is zatmpus and rakppus
  15. [actual] x is zeqfpus
  16. [planning] x is zatmpus
  17. [planning] x is rakppus
  18. [actual] zeqfpus is zatmpus
  19. [actual] zeqfpus is a subset of zatmpus
  20. [actual] x is zeqfpus
  21. [actual] x is zatmpus
  22. [planning] x is zeqfpus
  23. [planning] x is zatmpus
  24. [actual] x is rakppus
  25. [planning] zatmpus is babdpus
  26. [actual] zatmpus is qojxpus
  27. [actual] zatmpus is qojxpus
  28. [actual] x is zatmpus
  29. [actual] x is qojxpus
  30. [actual] qojxpus is borppus and wivlpus
  31. [actual] qojxpus is borppus and wivlpus
  32. [actual] x is borppus
  33. [actual] x is wivlpus
  34. [actual] borppus is fokgpus
  35. [actual] borppus is fokgpus
  36. [actual] x is fokgpus
  37. [actual] fokgpus is jupxpus and jehnpus
  38. [actual] fokgpus is jupxpus and jehnpus
  39. [actual] x is jupxpus
  40. [actual] x is jehnpus
  41. [actual] jupxpus is betgpus
  42. [actual] jupxpus is betgpus
  43. [actual] x is betgpus
  44. [actual] betgpus is babdpus and mojcpus
  45. [actual] betgpus is babdpus and mojcpus
  46. [actual] x is babdpus
  47. [actual] x is babdpus
  48. [actual] x is zeqfpus
  49. [actual] zeqfpus is zatmpus
  50. [planning] x is zatmpus
  51. [actual] zatmpus is qojxpus
  52. [planning] x is qojxpus
  53. [actual] qojxpus is borppus
  54. [actual] x is borppus
  55. [actual] borppus is fokgpus
  56. [planning] x is fokgpus
  57. [actual] fokgpus is jupxpus
  58. [planning] x is jupxpus
  59. [actual] jupxpus is betgpus
  60. [actual] x is betgpus
  61. [actual] betgpus is babdpus
  62. [planning] x is babdpus
  63. [actual] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 63
标准化后节点数: 62
过滤掉的无效实体数: 1
标准化后的节点:
  1. [planning] x → babdpus (原始: x is babdpus)
  2. [planning] x → babdpus (原始: x is babdpus)
  3. [actual] jupxpus → betgpus (原始: jupxpus is betgpus)
  4. [actual] x → zeqfpus (原始: x is zeqfpus)
  5. [actual] qojxpus → borppus and wivlpus (原始: qojxpus is borppus and wivlpus)
  6. [actual] betgpus → babdpus and mojcpus (原始: betgpus is babdpus and mojcpus)
  7. [actual] fokgpus → jupxpus and jehnpus (原始: fokgpus is jupxpus and jehnpus)
  8. [actual] zeqfpus → zatmpus and rakppus (原始: zeqfpus is zatmpus and rakppus)
  9. [actual] zatmpus → qojxpus (原始: zatmpus is qojxpus)
  10. [actual] borppus → fokgpus (原始: borppus is fokgpus)
  11. [actual] x → zeqfpus (原始: x is zeqfpus)
  12. [actual] x → zeqfpus (原始: x is zeqfpus)
  13. [actual] zeqfpus → zatmpus and rakppus (原始: zeqfpus is zatmpus and rakppus)
  14. [actual] zeqfpus → zatmpus and rakppus (原始: zeqfpus is zatmpus and rakppus)
  15. [actual] x → zeqfpus (原始: x is zeqfpus)
  16. [planning] x → zatmpus (原始: x is zatmpus)
  17. [planning] x → rakppus (原始: x is rakppus)
  18. [actual] zeqfpus → zatmpus (原始: zeqfpus is zatmpus)
  19. [actual] x → zeqfpus (原始: x is zeqfpus)
  20. [actual] x → zatmpus (原始: x is zatmpus)
  21. [planning] x → zeqfpus (原始: x is zeqfpus)
  22. [planning] x → zatmpus (原始: x is zatmpus)
  23. [actual] x → rakppus (原始: x is rakppus)
  24. [planning] zatmpus → babdpus (原始: zatmpus is babdpus)
  25. [actual] zatmpus → qojxpus (原始: zatmpus is qojxpus)
  26. [actual] zatmpus → qojxpus (原始: zatmpus is qojxpus)
  27. [actual] x → zatmpus (原始: x is zatmpus)
  28. [actual] x → qojxpus (原始: x is qojxpus)
  29. [actual] qojxpus → borppus and wivlpus (原始: qojxpus is borppus and wivlpus)
  30. [actual] qojxpus → borppus and wivlpus (原始: qojxpus is borppus and wivlpus)
  31. [actual] x → borppus (原始: x is borppus)
  32. [actual] x → wivlpus (原始: x is wivlpus)
  33. [actual] borppus → fokgpus (原始: borppus is fokgpus)
  34. [actual] borppus → fokgpus (原始: borppus is fokgpus)
  35. [actual] x → fokgpus (原始: x is fokgpus)
  36. [actual] fokgpus → jupxpus and jehnpus (原始: fokgpus is jupxpus and jehnpus)
  37. [actual] fokgpus → jupxpus and jehnpus (原始: fokgpus is jupxpus and jehnpus)
  38. [actual] x → jupxpus (原始: x is jupxpus)
  39. [actual] x → jehnpus (原始: x is jehnpus)
  40. [actual] jupxpus → betgpus (原始: jupxpus is betgpus)
  41. [actual] jupxpus → betgpus (原始: jupxpus is betgpus)
  42. [actual] x → betgpus (原始: x is betgpus)
  43. [actual] betgpus → babdpus and mojcpus (原始: betgpus is babdpus and mojcpus)
  44. [actual] betgpus → babdpus and mojcpus (原始: betgpus is babdpus and mojcpus)
  45. [actual] x → babdpus (原始: x is babdpus)
  46. [actual] x → babdpus (原始: x is babdpus)
  47. [actual] x → zeqfpus (原始: x is zeqfpus)
  48. [actual] zeqfpus → zatmpus (原始: zeqfpus is zatmpus)
  49. [planning] x → zatmpus (原始: x is zatmpus)
  50. [actual] zatmpus → qojxpus (原始: zatmpus is qojxpus)
  51. [planning] x → qojxpus (原始: x is qojxpus)
  52. [actual] qojxpus → borppus (原始: qojxpus is borppus)
  53. [actual] x → borppus (原始: x is borppus)
  54. [actual] borppus → fokgpus (原始: borppus is fokgpus)
  55. [planning] x → fokgpus (原始: x is fokgpus)
  56. [actual] fokgpus → jupxpus (原始: fokgpus is jupxpus)
  57. [planning] x → jupxpus (原始: x is jupxpus)
  58. [actual] jupxpus → betgpus (原始: jupxpus is betgpus)
  59. [actual] x → betgpus (原始: x is betgpus)
  60. [actual] betgpus → babdpus (原始: betgpus is babdpus)
  61. [planning] x → babdpus (原始: x is babdpus)
  62. [actual] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 11
[后处理] 加载LoG图，包含 11 个节点
  LoG节点 0: x is babdpus (规则: MP, 深度: 1)
  LoG节点 1: x is borppus (规则: MP, 深度: 2)
  LoG节点 2: borppus is babdpus (规则: MP, 深度: 2)
  LoG节点 3: x is zatmpus (规则: CE, 深度: 3)
  LoG节点 4: zatmpus is borppus (规则: CE, 深度: 3)
  LoG节点 5: borppus is jupxpus (规则: CE, 深度: 3)
  LoG节点 6: jupxpus is babdpus (规则: CE, 深度: 3)
  LoG节点 7: x is zatmpus and rakppus (规则: MP, 深度: 4)
  LoG节点 8: zatmpus is borppus and wivlpus (规则: MP, 深度: 4)
  LoG节点 9: borppus is jupxpus and jehnpus (规则: MP, 深度: 4)
  LoG节点 10: jupxpus is babdpus and mojcpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 62
   - 初始条件数: 8
   - LoG图节点数: 11

📋 初始条件列表:
    1. jupxpus is betgpus
    2. x is zeqfpus
    3. qojxpus is borppus and wivlpus
    4. betgpus is babdpus and mojcpus
    5. fokgpus is jupxpus and jehnpus
    6. zeqfpus is zatmpus and rakppus
    7. zatmpus is qojxpus
    8. borppus is fokgpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 8 个前提节点

🔍 开始处理actual节点...

   节点 1: jupxpus is betgpus
      ↻ 重复节点，计数: 2

   节点 2: x is zeqfpus
      ↻ 重复节点，计数: 2

   节点 3: qojxpus is borppus and wivlpus
      ↻ 重复节点，计数: 2

   节点 4: betgpus is babdpus and mojcpus
      ↻ 重复节点，计数: 2

   节点 5: fokgpus is jupxpus and jehnpus
      ↻ 重复节点，计数: 2

   节点 6: zeqfpus is zatmpus and rakppus
      ↻ 重复节点，计数: 2

   节点 7: zatmpus is qojxpus
      ↻ 重复节点，计数: 2

   节点 8: borppus is fokgpus
      ↻ 重复节点，计数: 2

   节点 9: x is zeqfpus
      ↻ 重复节点，计数: 3

   节点 10: x is zeqfpus
      ↻ 重复节点，计数: 4

   节点 11: zeqfpus is zatmpus and rakppus
      ↻ 重复节点，计数: 3

   节点 12: zeqfpus is zatmpus and rakppus
      ↻ 重复节点，计数: 4

   节点 13: x is zeqfpus
      ↻ 重复节点，计数: 5

   节点 14: zeqfpus is zatmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: zeqfpus is zatmpus and rakppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: zeqfpus is zatmpus and rakppus

   节点 15: x is zeqfpus
      ↻ 重复节点，计数: 6

   节点 16: x is zatmpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is zatmpus
[子树点亮]     └─ 点亮依赖节点: x is zatmpus and rakppus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 17: x is rakppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zeqfpus → zeqfpus is rakppus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is zeqfpus
  - 前提: zeqfpus is zatmpus and rakppus

   节点 18: zatmpus is qojxpus
      ↻ 重复节点，计数: 3

   节点 19: zatmpus is qojxpus
      ↻ 重复节点，计数: 4

   节点 20: x is zatmpus
      ↻ 重复节点，计数: 2

   节点 21: x is qojxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zeqfpus → zeqfpus is qojxpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is zeqfpus
  - 前提: zeqfpus is zatmpus
  - 前提: zatmpus is qojxpus

   节点 22: qojxpus is borppus and wivlpus
      ↻ 重复节点，计数: 3

   节点 23: qojxpus is borppus and wivlpus
      ↻ 重复节点，计数: 4

   节点 24: x is borppus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is borppus
[子树点亮]     └─ 点亮依赖节点: zatmpus is borppus (深度3)
[子树点亮]     └─ 点亮依赖节点: zatmpus is borppus and wivlpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 25: x is wivlpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zeqfpus → zeqfpus is wivlpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is zeqfpus
  - 前提: zeqfpus is zatmpus
  - 前提: zatmpus is qojxpus
  - 前提: qojxpus is borppus and wivlpus

   节点 26: borppus is fokgpus
      ↻ 重复节点，计数: 3

   节点 27: borppus is fokgpus
      ↻ 重复节点，计数: 4

   节点 28: x is fokgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zeqfpus → zeqfpus is fokgpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is zeqfpus
  - 前提: zeqfpus is zatmpus
  - 前提: zatmpus is qojxpus
  - 前提: qojxpus is borppus and wivlpus
  - 前提: borppus is fokgpus

   节点 29: fokgpus is jupxpus and jehnpus
      ↻ 重复节点，计数: 3

   节点 30: fokgpus is jupxpus and jehnpus
      ↻ 重复节点，计数: 4

   节点 31: x is jupxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zeqfpus → zeqfpus is jupxpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is zeqfpus
  - 前提: zeqfpus is zatmpus
  - 前提: zatmpus is qojxpus
  - 前提: qojxpus is borppus and wivlpus
  - 前提: borppus is fokgpus
  - 前提: fokgpus is jupxpus and jehnpus
  ✓ 点亮LoG节点: borppus is jupxpus
[子树点亮]     └─ 点亮依赖节点: borppus is jupxpus and jehnpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 32: x is jehnpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zeqfpus → zeqfpus is jehnpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is zeqfpus
  - 前提: zeqfpus is zatmpus
  - 前提: zatmpus is qojxpus
  - 前提: qojxpus is borppus and wivlpus
  - 前提: borppus is fokgpus
  - 前提: fokgpus is jupxpus and jehnpus

   节点 33: jupxpus is betgpus
      ↻ 重复节点，计数: 3

   节点 34: jupxpus is betgpus
      ↻ 重复节点，计数: 4

   节点 35: x is betgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is zeqfpus → zeqfpus is betgpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is zeqfpus
  - 前提: zeqfpus is zatmpus
  - 前提: zatmpus is qojxpus
  - 前提: qojxpus is borppus and wivlpus
  - 前提: borppus is fokgpus
  - 前提: fokgpus is jupxpus and jehnpus
  - 前提: jupxpus is betgpus

   节点 36: betgpus is babdpus and mojcpus
      ↻ 重复节点，计数: 3

   节点 37: betgpus is babdpus and mojcpus
      ↻ 重复节点，计数: 4

   节点 38: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: borppus is babdpus (深度2)
[子树点亮]     └─ 点亮依赖节点: jupxpus is babdpus (深度3)
[子树点亮]     └─ 点亮依赖节点: jupxpus is babdpus and mojcpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 39: x is babdpus
      ↻ 重复节点，计数: 2

   节点 40: x is zeqfpus
      ↻ 重复节点，计数: 7

   节点 41: zeqfpus is zatmpus
      ↻ 重复节点，计数: 2

   节点 42: zatmpus is qojxpus
      ↻ 重复节点，计数: 5

   节点 43: qojxpus is borppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qojxpus is borppus and wivlpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qojxpus is borppus and wivlpus

   节点 44: x is borppus
      ↻ 重复节点，计数: 2

   节点 45: borppus is fokgpus
      ↻ 重复节点，计数: 5

   节点 46: fokgpus is jupxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: fokgpus is jupxpus and jehnpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: fokgpus is jupxpus and jehnpus

   节点 47: jupxpus is betgpus
      ↻ 重复节点，计数: 5

   节点 48: x is betgpus
      ↻ 重复节点，计数: 2

   节点 49: betgpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: betgpus is babdpus and mojcpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: betgpus is babdpus and mojcpus

   节点 50: x is babdpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 50
   - 新增节点: 14
   - 更新已存在节点: 36
   - 点亮的LoG节点: 11

🎯 推理质量统计:
   - 完美推理: 14 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 11节点, 8前提, 复杂度1-8

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 22
   - 前提节点: 8
   - 推理节点: 14
   - 幻觉节点: 0
   - 点亮LoG节点: 11

✅ 推理节点详情:
   🟢 zeqfpus is zatmpus (出现2次, 质量:perfect)
   🟢 x is zatmpus (出现2次, 质量:perfect)
   🟢 x is rakppus (出现1次, 质量:perfect)
   🟢 x is qojxpus (出现1次, 质量:perfect)
   🟢 x is borppus (出现2次, 质量:perfect)
   🟢 x is wivlpus (出现1次, 质量:perfect)
   🟢 x is fokgpus (出现1次, 质量:perfect)
   🟢 x is jupxpus (出现1次, 质量:perfect)
   🟢 x is jehnpus (出现1次, 质量:perfect)
   🟢 x is betgpus (出现2次, 质量:perfect)
   🟢 x is babdpus (出现3次, 质量:perfect)
   🟢 qojxpus is borppus (出现1次, 质量:perfect)
   🟢 fokgpus is jupxpus (出现1次, 质量:perfect)
   🟢 betgpus is babdpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - jupxpus is babdpus
   - zatmpus is borppus and wivlpus
   - borppus is babdpus
   - x is zatmpus and rakppus
   - zatmpus is borppus
   - x is zatmpus
   - borppus is jupxpus
   - x is babdpus
   - jupxpus is babdpus and mojcpus
   - x is borppus
   - borppus is jupxpus and jehnpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus (第4层)
   节点Coverage: 11/11 = 100.00%
   前提条件Coverage: 8/8 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/14 = 0.00%
   可推导节点: 14/14
   Strict Error Rate: 0/14 = 0.00%
   严格有效节点: 14/14

   详细分析:
     完美推理: 14 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 36/50
================================================================================
记录索引: 35
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_35.json
✅ 使用缓存结果:
   - 句子数: 246
   - 提取的语句数: 354
   - 初始条件数: 7

=== Statement提取完成 ===
总句子数: 246
成功提取: 246
失败提取: 0
总statements数: 354

=== 开始清洗Statement格式 ===
原始statements数: 354
清洗后statements数: 243
过滤掉的statements数: 111
清洗后的statements:
  1. [actual] mevbpus is babdpus
  2. [actual] x is lebjpus
  3. [actual] jarbpus is qubwpus and cakkpus
  4. [actual] jarbpus is qubwpus and cakkpus
  5. [actual] lebjpus is jarbpus
  6. [actual] mevbpus is kocrpus
  7. [actual] mevbpus is babqpus
  8. [actual] qubwpus is mevbpus and rascpus
  9. [actual] qubwpus is mevbpus and rascpus
  10. [actual] qubwpus is rascpus and mevbpus
  11. [planning] mevbpus is qubwpus
  12. [planning] rascpus is qubwpus
  13. [planning] x is babdpus and babqpus
  14. [planning] x is babdpus and babqpus
  15. [actual] x is lebjpus
  16. [actual] lebjpus is jarbpus
  17. [actual] x is lebjpus
  18. [actual] lebjpus is jarbpus
  19. [actual] x is jarbpus
  20. [actual] x is jarbpus
  21. [actual] jarbpus is qubwpus and cakkpus
  22. [actual] jarbpus is qubwpus and cakkpus
  23. [actual] x is jarbpus
  24. [planning] x is qubwpus
  25. [planning] x is cakkpus
  26. [actual] x is qubwpus
  27. [actual] x is cakkpus
  28. [planning] x is babdpus and babqpus
  29. [actual] mevbpus is babdpus
  30. [actual] mevbpus is babdpus
  31. [actual] mevbpus is babqpus
  32. [actual] mevbpus is babqpus
  33. [actual] qubwpus is mevbpus and rascpus
  34. [actual] qubwpus is mevbpus and rascpus
  35. [actual] mevbpus is qubwpus
  36. [actual] rascpus is qubwpus
  37. [actual] x is qubwpus
  38. [planning] x is mevbpus
  39. [planning] x is something else
  40. [actual] x is qubwpus
  41. [actual] x is the category qubwpus
  42. [planning] x is mevbpus or rascpus or something else
  43. [actual] qubwpus is mevbpus and rascpus
  44. [planning] mevbpus is qubwpus
  45. [planning] rascpus is qubwpus
  46. [planning] x is qubwpus
  47. [planning] x is one of the things in qubwpus
  48. [planning] x is mevbpus
  49. [actual] qubwpus is mevbpus and rascpus
  50. [actual] qubwpus is mevbpus and rascpus
  51. [actual] mevbpus is a member of qubwpus
  52. [actual] rascpus is a member of qubwpus
  53. [actual] qubwpus is composed of mevbpus and rascpus
  54. [actual] qubwpus is mevbpus and rascpus
  55. [planning] qubwpus is the category that has mevbpus and rascpus as instances
  56. [actual] jarbpus is qubwpus and cakkpus
  57. [actual] qubwpus is mevbpus and rascpus
  58. [planning] qubwpus is mevbpus and rascpus
  59. [planning] qubwpus is a category
  60. [planning] mevbpus is a category
  61. [planning] rascpus is a category
  62. [planning] qubwpus is mevbpus and rascpus
  63. [planning] qubwpus is them
  64. [actual] mevbpus is babdpus
  65. [actual] mevbpus is a member of babdpus
  66. [actual] lebjpus is jarbpus
  67. [actual] jarbpus is qubwpus and cakkpus
  68. [actual] qubwpus is mevbpus and rascpus
  69. [planning] qubwpus is mevbpus
  70. [planning] mevbpus is a category
  71. [actual] mevbpus is babdpus
  72. [planning] mevbpus is babdpus
  73. [actual] mevbpus is babdpus
  74. [actual] mevbpus is kocrpus
  75. [actual] mevbpus is babqpus
  76. [actual] mevbpus is babdpus
  77. [actual] mevbpus is kocrpus
  78. [actual] mevbpus is babqpus
  79. [actual] qubwpus is mevbpus and rascpus
  80. [actual] mevbpus is a member of categories
  81. [planning] mevbpus is a category
  82. [planning] mevbpus is a category
  83. [actual] mevbpus is babdpus
  84. [actual] mevbpus is an instance of babdpus
  85. [planning] mevbpus is babdpus
  86. [planning] mevbpus is an instance
  87. [planning] qubwpus is mevbpus
  88. [planning] qubwpus is mevbpus
  89. [actual] qubwpus is mevbpus and rascpus
  90. [planning] qubwpus is mevbpus and rascpus
  91. [actual] jarbpus is qubwpus and cakkpus
  92. [planning] jarbpus is a subset of qubwpus
  93. [planning] jarbpus is a subset of cakkpus
  94. [actual] lebjpus is jarbpus
  95. [actual] x is lebjpus
  96. [planning] lebjpus is a category
  97. [planning] x is lebjpus
  98. [planning] qubwpus is mevbpus
  99. [planning] mevbpus is an instance of babdpus
  100. [actual] mevbpus is babdpus
  101. [actual] x is lebjpus
  102. [planning] x is an instance
  103. [planning] x is an element
  104. [actual] x is lebjpus
  105. [actual] lebjpus is a set
  106. [actual] lebjpus is jarbpus
  107. [planning] jarbpus is a set
  108. [planning] lebjpus is a subset
  109. [actual] jarbpus is qubwpus and cakkpus
  110. [actual] lebjpus is jarbpus
  111. [actual] mevbpus is kocrpus
  112. [actual] mevbpus is babqpus
  113. [actual] qubwpus is mevbpus and rascpus
  114. [planning] qubwpus is mevbpus and rascpus
  115. [actual] mevbpus is a subset of other things
  116. [actual] qubwpus is smaller than mevbpus
  117. [actual] mevbpus is babdpus
  118. [actual] x is babdpus
  119. [planning] x is babdpus
  120. [planning] x is babdpus and babqpus
  121. [actual] x is babqpus
  122. [actual] x is babdpus and babqpus
  123. [actual] qubwpus is mevbpus and rascpus
  124. [actual] lebjpus is jarbpus
  125. [actual] lebjpus is mevbpus
  126. [actual] x is lebjpus
  127. [actual] x is mevbpus
  128. [actual] mevbpus is babdpus
  129. [actual] x is babdpus
  130. [actual] mevbpus is babqpus
  131. [actual] x is babqpus
  132. [actual] x is babdpus and babqpus
  133. [actual] qubwpus is mevbpus and rascpus
  134. [planning] qubwpus is mevbpus
  135. [planning] x is babdpus and babqpus
  136. [planning] x is babdpus
  137. [planning] x is babdpus
  138. [planning] qubwpus is mevbpus and rascpus
  139. [actual] mevbpus is qubwpus
  140. [actual] rascpus is qubwpus
  141. [actual] qubwpus is mevbpus and rascpus
  142. [planning] mevbpus is qubwpus
  143. [planning] rascpus is qubwpus
  144. [planning] qubwpus is mevbpus
  145. [actual] mevbpus is babdpus
  146. [actual] mevbpus is babdpus
  147. [actual] mevbpus is an instance of babdpus
  148. [actual] mevbpus is babqpus
  149. [planning] mevbpus is an instance
  150. [planning] mevbpus is also a category
  151. [actual] x is lebjpus
  152. [actual] x is lebjpus
  153. [planning] lebjpus is a category
  154. [actual] lebjpus is jarbpus
  155. [actual] lebjpus is jarbpus
  156. [planning] jarbpus is a category
  157. [actual] jarbpus is qubwpus and cakkpus
  158. [actual] jarbpus is qubwpus and cakkpus
  159. [actual] qubwpus is categories
  160. [actual] cakkpus is categories
  161. [actual] mevbpus is babdpus
  162. [actual] mevbpus is babdpus
  163. [actual] mevbpus is kocrpus
  164. [actual] mevbpus is kocrpus
  165. [actual] mevbpus is babqpus
  166. [actual] mevbpus is babqpus
  167. [actual] qubwpus is mevbpus and rascpus
  168. [actual] qubwpus is mevbpus and rascpus
  169. [planning] qubwpus is mevbpus and rascpus
  170. [planning] mevbpus is an instance
  171. [planning] qubwpus is an instance
  172. [planning] qubwpus is an instanceearlier
  173. [planning] mevbpus is an instanceearlier
  174. [actual] mevbpus is an instance of babdpus
  175. [planning] mevbpus is both an instance and a category
  176. [actual] qubwpus is mevbpus
  177. [actual] mevbpus is a subset of babdpus
  178. [actual] mevbpus is babqpus
  179. [planning] mevbpus is a category
  180. [planning] qubwpus is mevbpus
  181. [actual] rascpus is a category
  182. [actual] x is lebjpus
  183. [planning] x is an instance
  184. [planning] x is an element
  185. [actual] x is lebjpus
  186. [actual] x is an element of lebjpus
  187. [actual] mevbpus is babdpus
  188. [actual] x is lebjpus
  189. [actual] jarbpus is qubwpus and cakkpus
  190. [actual] jarbpus is qubwpus ∩ cakkpus
  191. [actual] lebjpus is jarbpus
  192. [actual] mevbpus is kocrpus
  193. [actual] mevbpus is babqpus
  194. [actual] qubwpus is mevbpus
  195. [actual] qubwpus is rascpus
  196. [actual] qubwpus is mevbpus and rascpus
  197. [actual] jarbpus is qubwpus
  198. [actual] x is qubwpus
  199. [actual] qubwpus is mevbpus
  200. [actual] x is mevbpus
  201. [actual] mevbpus is babdpus
  202. [actual] x is babdpus
  203. [actual] mevbpus is babqpus
  204. [actual] x is babqpus
  205. [actual] x is babdpus and babqpus
  206. [actual] x is babdpus
  207. [actual] x is babqpus
  208. [planning] qubwpus is mevbpus and rascpus
  209. [actual] mevbpus is qubwpus
  210. [actual] rascpus is qubwpus
  211. [planning] qubwpus is mevbpus and rascpus
  212. [planning] mevbpus is qubwpus
  213. [planning] rascpus is qubwpus
  214. [actual] qubwpus is mevbpus and rascpus
  215. [actual] qubwpus is mevbpus
  216. [planning] mevbpus is a category
  217. [planning] qubwpus is mevbpus
  218. [planning] mevbpus is an instance
  219. [planning] qubwpus is mevbpus
  220. [actual] mevbpus is babdpus
  221. [actual] mevbpus is babdpus
  222. [actual] mevbpus is an instance of babdpus
  223. [planning] mevbpus is an instance
  224. [actual] qubwpus is mevbpus
  225. [actual] mevbpus is an instance
  226. [planning] mevbpus is an instance
  227. [planning] mevbpus is a leaf node
  228. [actual] mevbpus is babdpus
  229. [actual] mevbpus is a set that is subset of babdpus
  230. [actual] mevbpus is singleton set
  231. [actual] mevbpus is a singleton set
  232. [planning] qubwpus is mevbpus or empty
  233. [actual] jarbpus is qubwpus
  234. [actual] jarbpus is mevbpus
  235. [actual] x is lebjpus
  236. [actual] x is mevbpus
  237. [actual] mevbpus is babdpus
  238. [actual] x is babdpus
  239. [actual] mevbpus is babqpus
  240. [actual] x is babqpus
  241. [actual] x is babdpus and babqpus
  242. [actual] x is babdpus and babqpus
  243. [actual] x is babdpus and babqpus

=== 开始标准化和解析节点 ===
清洗后statements数: 243
标准化后节点数: 182
过滤掉的无效实体数: 61
标准化后的节点:
  1. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  2. [actual] x → lebjpus (原始: x is lebjpus)
  3. [actual] jarbpus → qubwpus and cakkpus (原始: jarbpus is qubwpus and cakkpus)
  4. [actual] jarbpus → qubwpus and cakkpus (原始: jarbpus is qubwpus and cakkpus)
  5. [actual] lebjpus → jarbpus (原始: lebjpus is jarbpus)
  6. [actual] mevbpus → kocrpus (原始: mevbpus is kocrpus)
  7. [actual] mevbpus → babqpus (原始: mevbpus is babqpus)
  8. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  9. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  10. [actual] qubwpus → rascpus and mevbpus (原始: qubwpus is rascpus and mevbpus)
  11. [planning] mevbpus → qubwpus (原始: mevbpus is qubwpus)
  12. [planning] rascpus → qubwpus (原始: rascpus is qubwpus)
  13. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  14. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  15. [actual] x → lebjpus (原始: x is lebjpus)
  16. [actual] lebjpus → jarbpus (原始: lebjpus is jarbpus)
  17. [actual] x → lebjpus (原始: x is lebjpus)
  18. [actual] lebjpus → jarbpus (原始: lebjpus is jarbpus)
  19. [actual] x → jarbpus (原始: x is jarbpus)
  20. [actual] x → jarbpus (原始: x is jarbpus)
  21. [actual] jarbpus → qubwpus and cakkpus (原始: jarbpus is qubwpus and cakkpus)
  22. [actual] jarbpus → qubwpus and cakkpus (原始: jarbpus is qubwpus and cakkpus)
  23. [actual] x → jarbpus (原始: x is jarbpus)
  24. [planning] x → qubwpus (原始: x is qubwpus)
  25. [planning] x → cakkpus (原始: x is cakkpus)
  26. [actual] x → qubwpus (原始: x is qubwpus)
  27. [actual] x → cakkpus (原始: x is cakkpus)
  28. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  29. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  30. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  31. [actual] mevbpus → babqpus (原始: mevbpus is babqpus)
  32. [actual] mevbpus → babqpus (原始: mevbpus is babqpus)
  33. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  34. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  35. [actual] mevbpus → qubwpus (原始: mevbpus is qubwpus)
  36. [actual] rascpus → qubwpus (原始: rascpus is qubwpus)
  37. [actual] x → qubwpus (原始: x is qubwpus)
  38. [planning] x → mevbpus (原始: x is mevbpus)
  39. [actual] x → qubwpus (原始: x is qubwpus)
  40. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  41. [planning] mevbpus → qubwpus (原始: mevbpus is qubwpus)
  42. [planning] rascpus → qubwpus (原始: rascpus is qubwpus)
  43. [planning] x → qubwpus (原始: x is qubwpus)
  44. [planning] x → mevbpus (原始: x is mevbpus)
  45. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  46. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  47. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  48. [actual] jarbpus → qubwpus and cakkpus (原始: jarbpus is qubwpus and cakkpus)
  49. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  50. [planning] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  51. [planning] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  52. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  53. [actual] lebjpus → jarbpus (原始: lebjpus is jarbpus)
  54. [actual] jarbpus → qubwpus and cakkpus (原始: jarbpus is qubwpus and cakkpus)
  55. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  56. [planning] qubwpus → mevbpus (原始: qubwpus is mevbpus)
  57. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  58. [planning] mevbpus → babdpus (原始: mevbpus is babdpus)
  59. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  60. [actual] mevbpus → kocrpus (原始: mevbpus is kocrpus)
  61. [actual] mevbpus → babqpus (原始: mevbpus is babqpus)
  62. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  63. [actual] mevbpus → kocrpus (原始: mevbpus is kocrpus)
  64. [actual] mevbpus → babqpus (原始: mevbpus is babqpus)
  65. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  66. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  67. [planning] mevbpus → babdpus (原始: mevbpus is babdpus)
  68. [planning] qubwpus → mevbpus (原始: qubwpus is mevbpus)
  69. [planning] qubwpus → mevbpus (原始: qubwpus is mevbpus)
  70. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  71. [planning] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  72. [actual] jarbpus → qubwpus and cakkpus (原始: jarbpus is qubwpus and cakkpus)
  73. [actual] lebjpus → jarbpus (原始: lebjpus is jarbpus)
  74. [actual] x → lebjpus (原始: x is lebjpus)
  75. [planning] x → lebjpus (原始: x is lebjpus)
  76. [planning] qubwpus → mevbpus (原始: qubwpus is mevbpus)
  77. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  78. [actual] x → lebjpus (原始: x is lebjpus)
  79. [actual] x → lebjpus (原始: x is lebjpus)
  80. [actual] lebjpus → jarbpus (原始: lebjpus is jarbpus)
  81. [actual] jarbpus → qubwpus and cakkpus (原始: jarbpus is qubwpus and cakkpus)
  82. [actual] lebjpus → jarbpus (原始: lebjpus is jarbpus)
  83. [actual] mevbpus → kocrpus (原始: mevbpus is kocrpus)
  84. [actual] mevbpus → babqpus (原始: mevbpus is babqpus)
  85. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  86. [planning] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  87. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  88. [actual] x → babdpus (原始: x is babdpus)
  89. [planning] x → babdpus (原始: x is babdpus)
  90. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  91. [actual] x → babqpus (原始: x is babqpus)
  92. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  93. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  94. [actual] lebjpus → jarbpus (原始: lebjpus is jarbpus)
  95. [actual] lebjpus → mevbpus (原始: lebjpus is mevbpus)
  96. [actual] x → lebjpus (原始: x is lebjpus)
  97. [actual] x → mevbpus (原始: x is mevbpus)
  98. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  99. [actual] x → babdpus (原始: x is babdpus)
  100. [actual] mevbpus → babqpus (原始: mevbpus is babqpus)
  101. [actual] x → babqpus (原始: x is babqpus)
  102. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  103. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  104. [planning] qubwpus → mevbpus (原始: qubwpus is mevbpus)
  105. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  106. [planning] x → babdpus (原始: x is babdpus)
  107. [planning] x → babdpus (原始: x is babdpus)
  108. [planning] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  109. [actual] mevbpus → qubwpus (原始: mevbpus is qubwpus)
  110. [actual] rascpus → qubwpus (原始: rascpus is qubwpus)
  111. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  112. [planning] mevbpus → qubwpus (原始: mevbpus is qubwpus)
  113. [planning] rascpus → qubwpus (原始: rascpus is qubwpus)
  114. [planning] qubwpus → mevbpus (原始: qubwpus is mevbpus)
  115. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  116. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  117. [actual] mevbpus → babqpus (原始: mevbpus is babqpus)
  118. [actual] x → lebjpus (原始: x is lebjpus)
  119. [actual] x → lebjpus (原始: x is lebjpus)
  120. [actual] lebjpus → jarbpus (原始: lebjpus is jarbpus)
  121. [actual] lebjpus → jarbpus (原始: lebjpus is jarbpus)
  122. [actual] jarbpus → qubwpus and cakkpus (原始: jarbpus is qubwpus and cakkpus)
  123. [actual] jarbpus → qubwpus and cakkpus (原始: jarbpus is qubwpus and cakkpus)
  124. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  125. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  126. [actual] mevbpus → kocrpus (原始: mevbpus is kocrpus)
  127. [actual] mevbpus → kocrpus (原始: mevbpus is kocrpus)
  128. [actual] mevbpus → babqpus (原始: mevbpus is babqpus)
  129. [actual] mevbpus → babqpus (原始: mevbpus is babqpus)
  130. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  131. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  132. [planning] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  133. [actual] qubwpus → mevbpus (原始: qubwpus is mevbpus)
  134. [actual] mevbpus → babqpus (原始: mevbpus is babqpus)
  135. [planning] qubwpus → mevbpus (原始: qubwpus is mevbpus)
  136. [actual] x → lebjpus (原始: x is lebjpus)
  137. [actual] x → lebjpus (原始: x is lebjpus)
  138. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  139. [actual] x → lebjpus (原始: x is lebjpus)
  140. [actual] jarbpus → qubwpus and cakkpus (原始: jarbpus is qubwpus and cakkpus)
  141. [actual] lebjpus → jarbpus (原始: lebjpus is jarbpus)
  142. [actual] mevbpus → kocrpus (原始: mevbpus is kocrpus)
  143. [actual] mevbpus → babqpus (原始: mevbpus is babqpus)
  144. [actual] qubwpus → mevbpus (原始: qubwpus is mevbpus)
  145. [actual] qubwpus → rascpus (原始: qubwpus is rascpus)
  146. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  147. [actual] jarbpus → qubwpus (原始: jarbpus is qubwpus)
  148. [actual] x → qubwpus (原始: x is qubwpus)
  149. [actual] qubwpus → mevbpus (原始: qubwpus is mevbpus)
  150. [actual] x → mevbpus (原始: x is mevbpus)
  151. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  152. [actual] x → babdpus (原始: x is babdpus)
  153. [actual] mevbpus → babqpus (原始: mevbpus is babqpus)
  154. [actual] x → babqpus (原始: x is babqpus)
  155. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  156. [actual] x → babdpus (原始: x is babdpus)
  157. [actual] x → babqpus (原始: x is babqpus)
  158. [planning] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  159. [actual] mevbpus → qubwpus (原始: mevbpus is qubwpus)
  160. [actual] rascpus → qubwpus (原始: rascpus is qubwpus)
  161. [planning] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  162. [planning] mevbpus → qubwpus (原始: mevbpus is qubwpus)
  163. [planning] rascpus → qubwpus (原始: rascpus is qubwpus)
  164. [actual] qubwpus → mevbpus and rascpus (原始: qubwpus is mevbpus and rascpus)
  165. [actual] qubwpus → mevbpus (原始: qubwpus is mevbpus)
  166. [planning] qubwpus → mevbpus (原始: qubwpus is mevbpus)
  167. [planning] qubwpus → mevbpus (原始: qubwpus is mevbpus)
  168. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  169. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  170. [actual] qubwpus → mevbpus (原始: qubwpus is mevbpus)
  171. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  172. [actual] jarbpus → qubwpus (原始: jarbpus is qubwpus)
  173. [actual] jarbpus → mevbpus (原始: jarbpus is mevbpus)
  174. [actual] x → lebjpus (原始: x is lebjpus)
  175. [actual] x → mevbpus (原始: x is mevbpus)
  176. [actual] mevbpus → babdpus (原始: mevbpus is babdpus)
  177. [actual] x → babdpus (原始: x is babdpus)
  178. [actual] mevbpus → babqpus (原始: mevbpus is babqpus)
  179. [actual] x → babqpus (原始: x is babqpus)
  180. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  181. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  182. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 8
[后处理] 加载LoG图，包含 8 个节点
  LoG节点 0: x is babdpus and babqpus (规则: CE, 深度: 1)
  LoG节点 1: x is babdpus and babqpus and kocrpus (规则: MP, 深度: 2)
  LoG节点 2: x is qubwpus (规则: MP, 深度: 3)
  LoG节点 3: qubwpus is babdpus and babqpus and kocrpus (规则: MP, 深度: 3)
  LoG节点 4: x is jarbpus (规则: MP, 深度: 4)
  LoG节点 5: jarbpus is qubwpus (规则: CE, 深度: 4)
  LoG节点 6: qubwpus is mevbpus (规则: CE, 深度: 4)
  LoG节点 7: mevbpus is babdpus and babqpus and kocrpus (规则: CI, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 182
   - 初始条件数: 7
   - LoG图节点数: 8

📋 初始条件列表:
    1. mevbpus is babdpus
    2. x is lebjpus
    3. jarbpus is qubwpus and cakkpus
    4. lebjpus is jarbpus
    5. mevbpus is kocrpus
    6. mevbpus is babqpus
    7. qubwpus is mevbpus and rascpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 7 个前提节点

🔍 开始处理actual节点...

   节点 1: mevbpus is babdpus
      ↻ 重复节点，计数: 2

   节点 2: x is lebjpus
      ↻ 重复节点，计数: 2

   节点 3: jarbpus is qubwpus and cakkpus
      ↻ 重复节点，计数: 2

   节点 4: jarbpus is qubwpus and cakkpus
      ↻ 重复节点，计数: 3

   节点 5: lebjpus is jarbpus
      ↻ 重复节点，计数: 2

   节点 6: mevbpus is kocrpus
      ↻ 重复节点，计数: 2

   节点 7: mevbpus is babqpus
      ↻ 重复节点，计数: 2

   节点 8: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 2

   节点 9: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 3

   节点 10: qubwpus is rascpus and mevbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: qubwpus is rascpus → qubwpus is mevbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qubwpus is mevbpus and rascpus
  ✓ 点亮LoG节点: qubwpus is mevbpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 11: x is lebjpus
      ↻ 重复节点，计数: 3

   节点 12: lebjpus is jarbpus
      ↻ 重复节点，计数: 3

   节点 13: x is lebjpus
      ↻ 重复节点，计数: 4

   节点 14: lebjpus is jarbpus
      ↻ 重复节点，计数: 4

   节点 15: x is jarbpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is jarbpus
      ✅ 验证成功 + LoG匹配

   节点 16: x is jarbpus
      ↻ 重复节点，计数: 2

   节点 17: jarbpus is qubwpus and cakkpus
      ↻ 重复节点，计数: 4

   节点 18: jarbpus is qubwpus and cakkpus
      ↻ 重复节点，计数: 5

   节点 19: x is jarbpus
      ↻ 重复节点，计数: 3

   节点 20: x is qubwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is qubwpus
[子树点亮]     └─ 点亮依赖节点: jarbpus is qubwpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 21: x is cakkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is lebjpus → lebjpus is cakkpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is lebjpus
  - 前提: lebjpus is jarbpus
  - 前提: jarbpus is qubwpus and cakkpus

   节点 22: mevbpus is babdpus
      ↻ 重复节点，计数: 3

   节点 23: mevbpus is babdpus
      ↻ 重复节点，计数: 4

   节点 24: mevbpus is babqpus
      ↻ 重复节点，计数: 3

   节点 25: mevbpus is babqpus
      ↻ 重复节点，计数: 4

   节点 26: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 4

   节点 27: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 5

   节点 28: mevbpus is qubwpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 29: rascpus is qubwpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 30: x is qubwpus
      ↻ 重复节点，计数: 2

   节点 31: x is qubwpus
      ↻ 重复节点，计数: 3

   节点 32: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 6

   节点 33: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 7

   节点 34: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 8

   节点 35: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 9

   节点 36: jarbpus is qubwpus and cakkpus
      ↻ 重复节点，计数: 6

   节点 37: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 10

   节点 38: mevbpus is babdpus
      ↻ 重复节点，计数: 5

   节点 39: lebjpus is jarbpus
      ↻ 重复节点，计数: 5

   节点 40: jarbpus is qubwpus and cakkpus
      ↻ 重复节点，计数: 7

   节点 41: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 11

   节点 42: mevbpus is babdpus
      ↻ 重复节点，计数: 6

   节点 43: mevbpus is babdpus
      ↻ 重复节点，计数: 7

   节点 44: mevbpus is kocrpus
      ↻ 重复节点，计数: 3

   节点 45: mevbpus is babqpus
      ↻ 重复节点，计数: 5

   节点 46: mevbpus is babdpus
      ↻ 重复节点，计数: 8

   节点 47: mevbpus is kocrpus
      ↻ 重复节点，计数: 4

   节点 48: mevbpus is babqpus
      ↻ 重复节点，计数: 6

   节点 49: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 12

   节点 50: mevbpus is babdpus
      ↻ 重复节点，计数: 9

   节点 51: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 13

   节点 52: jarbpus is qubwpus and cakkpus
      ↻ 重复节点，计数: 8

   节点 53: lebjpus is jarbpus
      ↻ 重复节点，计数: 6

   节点 54: x is lebjpus
      ↻ 重复节点，计数: 5

   节点 55: mevbpus is babdpus
      ↻ 重复节点，计数: 10

   节点 56: x is lebjpus
      ↻ 重复节点，计数: 6

   节点 57: x is lebjpus
      ↻ 重复节点，计数: 7

   节点 58: lebjpus is jarbpus
      ↻ 重复节点，计数: 7

   节点 59: jarbpus is qubwpus and cakkpus
      ↻ 重复节点，计数: 9

   节点 60: lebjpus is jarbpus
      ↻ 重复节点，计数: 8

   节点 61: mevbpus is kocrpus
      ↻ 重复节点，计数: 5

   节点 62: mevbpus is babqpus
      ↻ 重复节点，计数: 7

   节点 63: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 14

   节点 64: mevbpus is babdpus
      ↻ 重复节点，计数: 11

   节点 65: x is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is lebjpus → lebjpus is babdpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is lebjpus
  - 前提: lebjpus is jarbpus
  - 前提: jarbpus is qubwpus and cakkpus
  - 前提: qubwpus is mevbpus and rascpus
  - 前提: mevbpus is babdpus

   节点 66: x is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is lebjpus → lebjpus is babqpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is lebjpus
  - 前提: lebjpus is jarbpus
  - 前提: jarbpus is qubwpus and cakkpus
  - 前提: qubwpus is mevbpus and rascpus
  - 前提: mevbpus is babqpus

   节点 67: x is babdpus and babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus and babqpus
[子树点亮]     └─ 点亮依赖节点: x is babdpus and babqpus and kocrpus (深度2)
[子树点亮]     └─ 点亮依赖节点: qubwpus is babdpus and babqpus and kocrpus (深度3)
[子树点亮]     └─ 点亮依赖节点: mevbpus is babdpus and babqpus and kocrpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 68: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 15

   节点 69: lebjpus is jarbpus
      ↻ 重复节点，计数: 9

   节点 70: lebjpus is mevbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: lebjpus is jarbpus → jarbpus is mevbpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: lebjpus is jarbpus
  - 前提: jarbpus is qubwpus and cakkpus
  - 前提: qubwpus is mevbpus and rascpus

   节点 71: x is lebjpus
      ↻ 重复节点，计数: 8

   节点 72: x is mevbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is lebjpus → lebjpus is mevbpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is lebjpus
  - 前提: lebjpus is mevbpus

   节点 73: mevbpus is babdpus
      ↻ 重复节点，计数: 12

   节点 74: x is babdpus
      ↻ 重复节点，计数: 2

   节点 75: mevbpus is babqpus
      ↻ 重复节点，计数: 8

   节点 76: x is babqpus
      ↻ 重复节点，计数: 2

   节点 77: x is babdpus and babqpus
      ↻ 重复节点，计数: 2

   节点 78: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 16

   节点 79: mevbpus is qubwpus
      ↻ 重复节点，计数: 2

   节点 80: rascpus is qubwpus
      ↻ 重复节点，计数: 2

   节点 81: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 17

   节点 82: mevbpus is babdpus
      ↻ 重复节点，计数: 13

   节点 83: mevbpus is babdpus
      ↻ 重复节点，计数: 14

   节点 84: mevbpus is babqpus
      ↻ 重复节点，计数: 9

   节点 85: x is lebjpus
      ↻ 重复节点，计数: 9

   节点 86: x is lebjpus
      ↻ 重复节点，计数: 10

   节点 87: lebjpus is jarbpus
      ↻ 重复节点，计数: 10

   节点 88: lebjpus is jarbpus
      ↻ 重复节点，计数: 11

   节点 89: jarbpus is qubwpus and cakkpus
      ↻ 重复节点，计数: 10

   节点 90: jarbpus is qubwpus and cakkpus
      ↻ 重复节点，计数: 11

   节点 91: mevbpus is babdpus
      ↻ 重复节点，计数: 15

   节点 92: mevbpus is babdpus
      ↻ 重复节点，计数: 16

   节点 93: mevbpus is kocrpus
      ↻ 重复节点，计数: 6

   节点 94: mevbpus is kocrpus
      ↻ 重复节点，计数: 7

   节点 95: mevbpus is babqpus
      ↻ 重复节点，计数: 10

   节点 96: mevbpus is babqpus
      ↻ 重复节点，计数: 11

   节点 97: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 18

   节点 98: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 19

   节点 99: qubwpus is mevbpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 100: mevbpus is babqpus
      ↻ 重复节点，计数: 12

   节点 101: x is lebjpus
      ↻ 重复节点，计数: 11

   节点 102: x is lebjpus
      ↻ 重复节点，计数: 12

   节点 103: mevbpus is babdpus
      ↻ 重复节点，计数: 17

   节点 104: x is lebjpus
      ↻ 重复节点，计数: 13

   节点 105: jarbpus is qubwpus and cakkpus
      ↻ 重复节点，计数: 12

   节点 106: lebjpus is jarbpus
      ↻ 重复节点，计数: 12

   节点 107: mevbpus is kocrpus
      ↻ 重复节点，计数: 8

   节点 108: mevbpus is babqpus
      ↻ 重复节点，计数: 13

   节点 109: qubwpus is mevbpus
      ↻ 重复节点，计数: 2

   节点 110: qubwpus is rascpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qubwpus is mevbpus and rascpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qubwpus is mevbpus and rascpus

   节点 111: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 20

   节点 112: jarbpus is qubwpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 113: x is qubwpus
      ↻ 重复节点，计数: 4

   节点 114: qubwpus is mevbpus
      ↻ 重复节点，计数: 3

   节点 115: x is mevbpus
      ↻ 重复节点，计数: 2

   节点 116: mevbpus is babdpus
      ↻ 重复节点，计数: 18

   节点 117: x is babdpus
      ↻ 重复节点，计数: 3

   节点 118: mevbpus is babqpus
      ↻ 重复节点，计数: 14

   节点 119: x is babqpus
      ↻ 重复节点，计数: 3

   节点 120: x is babdpus and babqpus
      ↻ 重复节点，计数: 3

   节点 121: x is babdpus
      ↻ 重复节点，计数: 4

   节点 122: x is babqpus
      ↻ 重复节点，计数: 4

   节点 123: mevbpus is qubwpus
      ↻ 重复节点，计数: 3

   节点 124: rascpus is qubwpus
      ↻ 重复节点，计数: 3

   节点 125: qubwpus is mevbpus and rascpus
      ↻ 重复节点，计数: 21

   节点 126: qubwpus is mevbpus
      ↻ 重复节点，计数: 4

   节点 127: mevbpus is babdpus
      ↻ 重复节点，计数: 19

   节点 128: mevbpus is babdpus
      ↻ 重复节点，计数: 20

   节点 129: qubwpus is mevbpus
      ↻ 重复节点，计数: 5

   节点 130: mevbpus is babdpus
      ↻ 重复节点，计数: 21

   节点 131: jarbpus is qubwpus
      ↻ 重复节点，计数: 2

   节点 132: jarbpus is mevbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: jarbpus is qubwpus → qubwpus is mevbpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: jarbpus is qubwpus
  - 前提: qubwpus is mevbpus

   节点 133: x is lebjpus
      ↻ 重复节点，计数: 14

   节点 134: x is mevbpus
      ↻ 重复节点，计数: 3

   节点 135: mevbpus is babdpus
      ↻ 重复节点，计数: 22

   节点 136: x is babdpus
      ↻ 重复节点，计数: 5

   节点 137: mevbpus is babqpus
      ↻ 重复节点，计数: 15

   节点 138: x is babqpus
      ↻ 重复节点，计数: 5

   节点 139: x is babdpus and babqpus
      ↻ 重复节点，计数: 4

   节点 140: x is babdpus and babqpus
      ↻ 重复节点，计数: 5

   节点 141: x is babdpus and babqpus
      ↻ 重复节点，计数: 6

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 141
   - 新增节点: 15
   - 更新已存在节点: 126
   - 点亮的LoG节点: 8

🎯 推理质量统计:
   - 完美推理: 11 (节点正确 + 路径正确)
   - 部分推理: 4 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 8节点, 7前提, 复杂度1-7

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 22
   - 前提节点: 7
   - 推理节点: 13
   - 幻觉节点: 2
   - 点亮LoG节点: 8

❌ 幻觉节点详情:
   - mevbpus is qubwpus (出现3次)
   - rascpus is qubwpus (出现3次)

✅ 推理节点详情:
   🟢 qubwpus is rascpus and mevbpus (出现1次, 质量:perfect)
   🟢 x is jarbpus (出现3次, 质量:perfect)
   🟡 x is qubwpus (出现4次, 质量:partial)
      ⚠️  无效依赖: ['mevbpus is qubwpus', 'rascpus is qubwpus']
   🟢 x is cakkpus (出现1次, 质量:perfect)
   🟢 x is babdpus (出现5次, 质量:perfect)
   🟢 x is babqpus (出现5次, 质量:perfect)
   🟢 x is babdpus and babqpus (出现6次, 质量:perfect)
   🟢 lebjpus is mevbpus (出现1次, 质量:perfect)
   🟢 x is mevbpus (出现3次, 质量:perfect)
   🟢 qubwpus is mevbpus (出现5次, 质量:perfect)
   🟢 qubwpus is rascpus (出现1次, 质量:perfect)
   🟡 jarbpus is qubwpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['mevbpus is qubwpus', 'rascpus is qubwpus']
   🟢 jarbpus is mevbpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - qubwpus is babdpus and babqpus and kocrpus
   - x is babdpus and babqpus
   - x is qubwpus
   - mevbpus is babdpus and babqpus and kocrpus
   - x is jarbpus
   - qubwpus is mevbpus
   - jarbpus is qubwpus
   - x is babdpus and babqpus and kocrpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus and babqpus (第4层)
   节点Coverage: 8/8 = 100.00%
   前提条件Coverage: 7/7 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 2/15 = 13.33%
   可推导节点: 13/15
   Strict Error Rate: 4/15 = 26.67%
   严格有效节点: 11/15

   详细分析:
     完美推理: 11 (73.33%)
     部分推理: 4 (26.67%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 37/50
================================================================================
记录索引: 36
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_36.json
✅ 使用缓存结果:
   - 句子数: 96
   - 提取的语句数: 114
   - 初始条件数: 8

=== Statement提取完成 ===
总句子数: 96
成功提取: 96
失败提取: 0
总statements数: 114

=== 开始清洗Statement格式 ===
原始statements数: 114
清洗后statements数: 89
过滤掉的statements数: 25
清洗后的statements:
  1. [actual] vagspus is cushpus and wotwpus
  2. [actual] vagspus is cushpus
  3. [actual] vagspus is wotwpus
  4. [actual] gosypus is morgpus
  5. [actual] gosypus is morgpus
  6. [actual] cushpus is fuvrpus
  7. [actual] cushpus is fuvrpus
  8. [actual] hohppus is botrpus
  9. [actual] hohppus is botrpus
  10. [actual] botrpus is gosypus and rikmpus
  11. [actual] botrpus is gosypus
  12. [actual] botrpus is rikmpus
  13. [actual] x is hohppus
  14. [actual] x is hohppus
  15. [actual] morgpus is vagspus and ziktpus
  16. [actual] morgpus is vagspus and ziktpus
  17. [actual] fuvrpus is babdpus and babqpus and babxpus and xebhpus
  18. [actual] fuvrpus is babdpus
  19. [actual] fuvrpus is babqpus
  20. [actual] fuvrpus is babxpus
  21. [actual] fuvrpus is xebhpus
  22. [planning] x is babdpus and babqpus and babxpus
  23. [planning] x is babdpus
  24. [planning] x is babqpus
  25. [planning] x is babxpus
  26. [actual] x is hohppus
  27. [actual] hohppus is botrpus
  28. [actual] botrpus is gosypus and rikmpus
  29. [actual] botrpus is gosypus
  30. [actual] botrpus is rikmpus
  31. [actual] hohppus is gosypus
  32. [actual] vagspus is cushpus and wotwpus
  33. [actual] cushpus is fuvrpus
  34. [actual] botrpus is gosypus and rikmpus
  35. [planning] botrpus is gosypus
  36. [planning] botrpus is rikmpus
  37. [actual] x is hohppus
  38. [actual] hohppus is botrpus
  39. [actual] x is botrpus
  40. [actual] botrpus is gosypus and rikmpus
  41. [planning] x is gosypus
  42. [planning] x is rikmpus
  43. [actual] botrpus is gosypus
  44. [planning] x is botrpus
  45. [planning] x is gosypus
  46. [actual] gosypus is morgpus
  47. [planning] x is gosypus
  48. [planning] x is morgpus
  49. [actual] morgpus is vagspus and ziktpus
  50. [planning] x is vagspus
  51. [planning] x is ziktpus
  52. [actual] vagspus is cushpus and wotwpus
  53. [planning] x is vagspus
  54. [planning] x is cushpus
  55. [planning] x is wotwpus
  56. [actual] cushpus is fuvrpus
  57. [planning] x is fuvrpus
  58. [actual] fuvrpus is babdpus and babqpus and babxpus and xebhpus
  59. [planning] x is fuvrpus
  60. [planning] x is babdpus and babqpus and babxpus and xebhpus
  61. [planning] x is babdpus and babqpus and babxpus
  62. [actual] x is hohppus
  63. [actual] hohppus is botrpus
  64. [actual] hohppus is botrpus
  65. [actual] x is hohppus
  66. [actual] x is botrpus
  67. [actual] botrpus is gosypus and rikmpus
  68. [actual] botrpus is gosypus
  69. [actual] x is botrpus
  70. [actual] x is gosypus
  71. [actual] botrpus is rikmpus
  72. [actual] x is rikmpus
  73. [actual] gosypus is morgpus
  74. [planning] x is morgpus
  75. [actual] morgpus is vagspus and ziktpus
  76. [planning] x is vagspus
  77. [actual] vagspus is cushpus and wotwpus
  78. [actual] vagspus is cushpus
  79. [planning] x is cushpus
  80. [actual] cushpus is fuvrpus
  81. [planning] x is fuvrpus
  82. [actual] fuvrpus is babdpus and babqpus and babxpus and xebhpus
  83. [planning] x is babdpus
  84. [actual] x is babqpus
  85. [actual] x is babxpus
  86. [actual] x is babdpus and babqpus and babxpus
  87. [planning] x is babdpus and babqpus and babxpus
  88. [actual] botrpus is gosypus
  89. [actual] botrpus is rikmpus

=== 开始标准化和解析节点 ===
清洗后statements数: 89
标准化后节点数: 89
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] vagspus → cushpus and wotwpus (原始: vagspus is cushpus and wotwpus)
  2. [actual] vagspus → cushpus (原始: vagspus is cushpus)
  3. [actual] vagspus → wotwpus (原始: vagspus is wotwpus)
  4. [actual] gosypus → morgpus (原始: gosypus is morgpus)
  5. [actual] gosypus → morgpus (原始: gosypus is morgpus)
  6. [actual] cushpus → fuvrpus (原始: cushpus is fuvrpus)
  7. [actual] cushpus → fuvrpus (原始: cushpus is fuvrpus)
  8. [actual] hohppus → botrpus (原始: hohppus is botrpus)
  9. [actual] hohppus → botrpus (原始: hohppus is botrpus)
  10. [actual] botrpus → gosypus and rikmpus (原始: botrpus is gosypus and rikmpus)
  11. [actual] botrpus → gosypus (原始: botrpus is gosypus)
  12. [actual] botrpus → rikmpus (原始: botrpus is rikmpus)
  13. [actual] x → hohppus (原始: x is hohppus)
  14. [actual] x → hohppus (原始: x is hohppus)
  15. [actual] morgpus → vagspus and ziktpus (原始: morgpus is vagspus and ziktpus)
  16. [actual] morgpus → vagspus and ziktpus (原始: morgpus is vagspus and ziktpus)
  17. [actual] fuvrpus → babdpus and babqpus and babxpus and xebhpus (原始: fuvrpus is babdpus and babqpus and babxpus and xebhpus)
  18. [actual] fuvrpus → babdpus (原始: fuvrpus is babdpus)
  19. [actual] fuvrpus → babqpus (原始: fuvrpus is babqpus)
  20. [actual] fuvrpus → babxpus (原始: fuvrpus is babxpus)
  21. [actual] fuvrpus → xebhpus (原始: fuvrpus is xebhpus)
  22. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  23. [planning] x → babdpus (原始: x is babdpus)
  24. [planning] x → babqpus (原始: x is babqpus)
  25. [planning] x → babxpus (原始: x is babxpus)
  26. [actual] x → hohppus (原始: x is hohppus)
  27. [actual] hohppus → botrpus (原始: hohppus is botrpus)
  28. [actual] botrpus → gosypus and rikmpus (原始: botrpus is gosypus and rikmpus)
  29. [actual] botrpus → gosypus (原始: botrpus is gosypus)
  30. [actual] botrpus → rikmpus (原始: botrpus is rikmpus)
  31. [actual] hohppus → gosypus (原始: hohppus is gosypus)
  32. [actual] vagspus → cushpus and wotwpus (原始: vagspus is cushpus and wotwpus)
  33. [actual] cushpus → fuvrpus (原始: cushpus is fuvrpus)
  34. [actual] botrpus → gosypus and rikmpus (原始: botrpus is gosypus and rikmpus)
  35. [planning] botrpus → gosypus (原始: botrpus is gosypus)
  36. [planning] botrpus → rikmpus (原始: botrpus is rikmpus)
  37. [actual] x → hohppus (原始: x is hohppus)
  38. [actual] hohppus → botrpus (原始: hohppus is botrpus)
  39. [actual] x → botrpus (原始: x is botrpus)
  40. [actual] botrpus → gosypus and rikmpus (原始: botrpus is gosypus and rikmpus)
  41. [planning] x → gosypus (原始: x is gosypus)
  42. [planning] x → rikmpus (原始: x is rikmpus)
  43. [actual] botrpus → gosypus (原始: botrpus is gosypus)
  44. [planning] x → botrpus (原始: x is botrpus)
  45. [planning] x → gosypus (原始: x is gosypus)
  46. [actual] gosypus → morgpus (原始: gosypus is morgpus)
  47. [planning] x → gosypus (原始: x is gosypus)
  48. [planning] x → morgpus (原始: x is morgpus)
  49. [actual] morgpus → vagspus and ziktpus (原始: morgpus is vagspus and ziktpus)
  50. [planning] x → vagspus (原始: x is vagspus)
  51. [planning] x → ziktpus (原始: x is ziktpus)
  52. [actual] vagspus → cushpus and wotwpus (原始: vagspus is cushpus and wotwpus)
  53. [planning] x → vagspus (原始: x is vagspus)
  54. [planning] x → cushpus (原始: x is cushpus)
  55. [planning] x → wotwpus (原始: x is wotwpus)
  56. [actual] cushpus → fuvrpus (原始: cushpus is fuvrpus)
  57. [planning] x → fuvrpus (原始: x is fuvrpus)
  58. [actual] fuvrpus → babdpus and babqpus and babxpus and xebhpus (原始: fuvrpus is babdpus and babqpus and babxpus and xebhpus)
  59. [planning] x → fuvrpus (原始: x is fuvrpus)
  60. [planning] x → babdpus and babqpus and babxpus and xebhpus (原始: x is babdpus and babqpus and babxpus and xebhpus)
  61. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  62. [actual] x → hohppus (原始: x is hohppus)
  63. [actual] hohppus → botrpus (原始: hohppus is botrpus)
  64. [actual] hohppus → botrpus (原始: hohppus is botrpus)
  65. [actual] x → hohppus (原始: x is hohppus)
  66. [actual] x → botrpus (原始: x is botrpus)
  67. [actual] botrpus → gosypus and rikmpus (原始: botrpus is gosypus and rikmpus)
  68. [actual] botrpus → gosypus (原始: botrpus is gosypus)
  69. [actual] x → botrpus (原始: x is botrpus)
  70. [actual] x → gosypus (原始: x is gosypus)
  71. [actual] botrpus → rikmpus (原始: botrpus is rikmpus)
  72. [actual] x → rikmpus (原始: x is rikmpus)
  73. [actual] gosypus → morgpus (原始: gosypus is morgpus)
  74. [planning] x → morgpus (原始: x is morgpus)
  75. [actual] morgpus → vagspus and ziktpus (原始: morgpus is vagspus and ziktpus)
  76. [planning] x → vagspus (原始: x is vagspus)
  77. [actual] vagspus → cushpus and wotwpus (原始: vagspus is cushpus and wotwpus)
  78. [actual] vagspus → cushpus (原始: vagspus is cushpus)
  79. [planning] x → cushpus (原始: x is cushpus)
  80. [actual] cushpus → fuvrpus (原始: cushpus is fuvrpus)
  81. [planning] x → fuvrpus (原始: x is fuvrpus)
  82. [actual] fuvrpus → babdpus and babqpus and babxpus and xebhpus (原始: fuvrpus is babdpus and babqpus and babxpus and xebhpus)
  83. [planning] x → babdpus (原始: x is babdpus)
  84. [actual] x → babqpus (原始: x is babqpus)
  85. [actual] x → babxpus (原始: x is babxpus)
  86. [actual] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  87. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  88. [actual] botrpus → gosypus (原始: botrpus is gosypus)
  89. [actual] botrpus → rikmpus (原始: botrpus is rikmpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 11
[后处理] 加载LoG图，包含 11 个节点
  LoG节点 0: x is babdpus and babqpus and babxpus (规则: MP, 深度: 1)
  LoG节点 1: x is vagspus (规则: MP, 深度: 2)
  LoG节点 2: vagspus is babdpus and babqpus and babxpus (规则: CE, 深度: 2)
  LoG节点 3: x is gosypus (规则: MP, 深度: 3)
  LoG节点 4: gosypus is vagspus (规则: CE, 深度: 3)
  LoG节点 5: vagspus is babdpus and babqpus and babxpus and xebhpus (规则: MP, 深度: 3)
  LoG节点 6: x is botrpus (规则: MP, 深度: 4)
  LoG节点 7: botrpus is gosypus (规则: CE, 深度: 4)
  LoG节点 8: gosypus is vagspus and ziktpus (规则: MP, 深度: 4)
  LoG节点 9: vagspus is cushpus (规则: CE, 深度: 4)
  LoG节点 10: cushpus is babdpus and babqpus and babxpus and xebhpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 89
   - 初始条件数: 8
   - LoG图节点数: 11

📋 初始条件列表:
    1. vagspus is cushpus and wotwpus
    2. gosypus is morgpus
    3. cushpus is fuvrpus
    4. hohppus is botrpus
    5. botrpus is gosypus and rikmpus
    6. x is hohppus
    7. morgpus is vagspus and ziktpus
    8. fuvrpus is babdpus and babqpus and babxpus and xebhpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 8 个前提节点

🔍 开始处理actual节点...

   节点 1: vagspus is cushpus and wotwpus
      ↻ 重复节点，计数: 2

   节点 2: vagspus is cushpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: vagspus is cushpus
      ✅ 验证成功 + LoG匹配

   节点 3: vagspus is wotwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: vagspus is cushpus and wotwpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: vagspus is cushpus and wotwpus

   节点 4: gosypus is morgpus
      ↻ 重复节点，计数: 2

   节点 5: gosypus is morgpus
      ↻ 重复节点，计数: 3

   节点 6: cushpus is fuvrpus
      ↻ 重复节点，计数: 2

   节点 7: cushpus is fuvrpus
      ↻ 重复节点，计数: 3

   节点 8: hohppus is botrpus
      ↻ 重复节点，计数: 2

   节点 9: hohppus is botrpus
      ↻ 重复节点，计数: 3

   节点 10: botrpus is gosypus and rikmpus
      ↻ 重复节点，计数: 2

   节点 11: botrpus is gosypus
      🔍 验证新节点...
[后处理] 点亮LoG节点: botrpus is gosypus
      ✅ 验证成功 + LoG匹配

   节点 12: botrpus is rikmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: botrpus is gosypus and rikmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: botrpus is gosypus and rikmpus

   节点 13: x is hohppus
      ↻ 重复节点，计数: 2

   节点 14: x is hohppus
      ↻ 重复节点，计数: 3

   节点 15: morgpus is vagspus and ziktpus
      ↻ 重复节点，计数: 2

   节点 16: morgpus is vagspus and ziktpus
      ↻ 重复节点，计数: 3

   节点 17: fuvrpus is babdpus and babqpus and babxpus and xebhpus
      ↻ 重复节点，计数: 2

   节点 18: fuvrpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: fuvrpus is babdpus and babqpus and babxpus and xebhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: fuvrpus is babdpus and babqpus and babxpus and xebhpus

   节点 19: fuvrpus is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: fuvrpus is babdpus and babqpus and babxpus and xebhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: fuvrpus is babdpus and babqpus and babxpus and xebhpus

   节点 20: fuvrpus is babxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: fuvrpus is babdpus and babqpus and babxpus and xebhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: fuvrpus is babdpus and babqpus and babxpus and xebhpus

   节点 21: fuvrpus is xebhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: fuvrpus is babdpus and babqpus and babxpus and xebhpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: fuvrpus is babdpus and babqpus and babxpus and xebhpus

   节点 22: x is hohppus
      ↻ 重复节点，计数: 4

   节点 23: hohppus is botrpus
      ↻ 重复节点，计数: 4

   节点 24: botrpus is gosypus and rikmpus
      ↻ 重复节点，计数: 3

   节点 25: botrpus is gosypus
      ↻ 重复节点，计数: 2

   节点 26: botrpus is rikmpus
      ↻ 重复节点，计数: 2

   节点 27: hohppus is gosypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: hohppus is botrpus → botrpus is gosypus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: hohppus is botrpus
  - 前提: botrpus is gosypus

   节点 28: vagspus is cushpus and wotwpus
      ↻ 重复节点，计数: 3

   节点 29: cushpus is fuvrpus
      ↻ 重复节点，计数: 4

   节点 30: botrpus is gosypus and rikmpus
      ↻ 重复节点，计数: 4

   节点 31: x is hohppus
      ↻ 重复节点，计数: 5

   节点 32: hohppus is botrpus
      ↻ 重复节点，计数: 5

   节点 33: x is botrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is botrpus
      ✅ 验证成功 + LoG匹配

   节点 34: botrpus is gosypus and rikmpus
      ↻ 重复节点，计数: 5

   节点 35: botrpus is gosypus
      ↻ 重复节点，计数: 3

   节点 36: gosypus is morgpus
      ↻ 重复节点，计数: 4

   节点 37: morgpus is vagspus and ziktpus
      ↻ 重复节点，计数: 4

   节点 38: vagspus is cushpus and wotwpus
      ↻ 重复节点，计数: 4

   节点 39: cushpus is fuvrpus
      ↻ 重复节点，计数: 5

   节点 40: fuvrpus is babdpus and babqpus and babxpus and xebhpus
      ↻ 重复节点，计数: 3

   节点 41: x is hohppus
      ↻ 重复节点，计数: 6

   节点 42: hohppus is botrpus
      ↻ 重复节点，计数: 6

   节点 43: hohppus is botrpus
      ↻ 重复节点，计数: 7

   节点 44: x is hohppus
      ↻ 重复节点，计数: 7

   节点 45: x is botrpus
      ↻ 重复节点，计数: 2

   节点 46: botrpus is gosypus and rikmpus
      ↻ 重复节点，计数: 6

   节点 47: botrpus is gosypus
      ↻ 重复节点，计数: 4

   节点 48: x is botrpus
      ↻ 重复节点，计数: 3

   节点 49: x is gosypus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is gosypus
      ✅ 验证成功 + LoG匹配

   节点 50: botrpus is rikmpus
      ↻ 重复节点，计数: 3

   节点 51: x is rikmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is hohppus → hohppus is rikmpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is hohppus
  - 前提: hohppus is botrpus
  - 前提: botrpus is rikmpus

   节点 52: gosypus is morgpus
      ↻ 重复节点，计数: 5

   节点 53: morgpus is vagspus and ziktpus
      ↻ 重复节点，计数: 5

   节点 54: vagspus is cushpus and wotwpus
      ↻ 重复节点，计数: 5

   节点 55: vagspus is cushpus
      ↻ 重复节点，计数: 2

   节点 56: cushpus is fuvrpus
      ↻ 重复节点，计数: 6

   节点 57: fuvrpus is babdpus and babqpus and babxpus and xebhpus
      ↻ 重复节点，计数: 4

   节点 58: x is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is hohppus → hohppus is babqpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is hohppus
  - 前提: hohppus is botrpus
  - 前提: botrpus is gosypus
  - 前提: gosypus is morgpus
  - 前提: morgpus is vagspus and ziktpus
  - 前提: vagspus is cushpus
  - 前提: cushpus is fuvrpus
  - 前提: fuvrpus is babqpus
  ✓ 点亮LoG节点: x is vagspus
[子树点亮]     └─ 点亮依赖节点: gosypus is vagspus (深度3)
[子树点亮]     └─ 点亮依赖节点: gosypus is vagspus and ziktpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 59: x is babxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is hohppus → hohppus is babxpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is hohppus
  - 前提: hohppus is botrpus
  - 前提: botrpus is gosypus
  - 前提: gosypus is morgpus
  - 前提: morgpus is vagspus and ziktpus
  - 前提: vagspus is cushpus
  - 前提: cushpus is fuvrpus
  - 前提: fuvrpus is babxpus

   节点 60: x is babdpus and babqpus and babxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus and babqpus and babxpus
[子树点亮]     └─ 点亮依赖节点: vagspus is babdpus and babqpus and babxpus (深度2)
[子树点亮]     └─ 点亮依赖节点: vagspus is babdpus and babqpus and babxpus and xebhpus (深度3)
[子树点亮]     └─ 点亮依赖节点: cushpus is babdpus and babqpus and babxpus and xebhpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 61: botrpus is gosypus
      ↻ 重复节点，计数: 5

   节点 62: botrpus is rikmpus
      ↻ 重复节点，计数: 4

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 62
   - 新增节点: 15
   - 更新已存在节点: 47
   - 点亮的LoG节点: 11

🎯 推理质量统计:
   - 完美推理: 15 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 11节点, 8前提, 复杂度1-8

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 23
   - 前提节点: 8
   - 推理节点: 15
   - 幻觉节点: 0
   - 点亮LoG节点: 11

✅ 推理节点详情:
   🟢 vagspus is cushpus (出现2次, 质量:perfect)
   🟢 vagspus is wotwpus (出现1次, 质量:perfect)
   🟢 botrpus is gosypus (出现5次, 质量:perfect)
   🟢 botrpus is rikmpus (出现4次, 质量:perfect)
   🟢 fuvrpus is babdpus (出现1次, 质量:perfect)
   🟢 fuvrpus is babqpus (出现1次, 质量:perfect)
   🟢 fuvrpus is babxpus (出现1次, 质量:perfect)
   🟢 fuvrpus is xebhpus (出现1次, 质量:perfect)
   🟢 hohppus is gosypus (出现1次, 质量:perfect)
   🟢 x is botrpus (出现3次, 质量:perfect)
   🟢 x is gosypus (出现1次, 质量:perfect)
   🟢 x is rikmpus (出现1次, 质量:perfect)
   🟢 x is babqpus (出现1次, 质量:perfect)
   🟢 x is babxpus (出现1次, 质量:perfect)
   🟢 x is babdpus and babqpus and babxpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - vagspus is cushpus
   - x is vagspus
   - vagspus is babdpus and babqpus and babxpus
   - botrpus is gosypus
   - gosypus is vagspus and ziktpus
   - vagspus is babdpus and babqpus and babxpus and xebhpus
   - gosypus is vagspus
   - cushpus is babdpus and babqpus and babxpus and xebhpus
   - x is botrpus
   - x is gosypus
   - x is babdpus and babqpus and babxpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus and babqpus and babxpus (第4层)
   节点Coverage: 11/11 = 100.00%
   前提条件Coverage: 8/8 = 100.00%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/15 = 0.00%
   可推导节点: 15/15
   Strict Error Rate: 0/15 = 0.00%
   严格有效节点: 15/15

   详细分析:
     完美推理: 15 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 38/50
================================================================================
记录索引: 37
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_37.json
✅ 使用缓存结果:
   - 句子数: 76
   - 提取的语句数: 69
   - 初始条件数: 12

=== Statement提取完成 ===
总句子数: 76
成功提取: 76
失败提取: 0
总statements数: 69

=== 开始清洗Statement格式 ===
原始statements数: 69
清洗后statements数: 64
过滤掉的statements数: 5
清洗后的statements:
  1. [planning] x is babdpus and babqpus and babxpus
  2. [planning] x is babdpus
  3. [planning] x is babqpus
  4. [planning] x is babxpus
  5. [planning] x is A
  6. [planning] x is categories
  7. [actual] ruqfpus is babxpus
  8. [actual] x is topgpus
  9. [actual] ruqfpus is vaynpus
  10. [actual] x is hadwpus
  11. [actual] yufkpus is babqpus and wivkpus
  12. [actual] helypus is yufkpus
  13. [actual] dolmpus is helypus and zincpus
  14. [actual] naljpus is sirrpus
  15. [actual] sirrpus is babdpus and pejmpus
  16. [actual] x is dolmpus
  17. [actual] hadwpus is naljpus and zaldpus
  18. [actual] topgpus is ruqfpus
  19. [actual] x is topgpus
  20. [actual] x is hadwpus
  21. [actual] x is dolmpus
  22. [planning] x is babdpus
  23. [planning] x is babqpus
  24. [planning] x is babxpus
  25. [actual] ruqfpus is babxpus
  26. [actual] topgpus is ruqfpus
  27. [actual] x is topgpus
  28. [actual] topgpus is ruqfpus
  29. [actual] ruqfpus is babxpus
  30. [planning] x is babxpus
  31. [planning] x is topgpus
  32. [actual] topgpus is ruqfpus
  33. [actual] ruqfpus is babxpus
  34. [actual] x is babxpus
  35. [actual] x is babxpus
  36. [planning] x is babqpus
  37. [actual] yufkpus is babqpus and wivkpus
  38. [planning] x is yufkpus
  39. [actual] x is dolmpus
  40. [actual] dolmpus is helypus and zincpus
  41. [actual] helypus is yufkpus
  42. [actual] dolmpus is helypus
  43. [actual] dolmpus is yufkpus
  44. [actual] x is dolmpus
  45. [actual] x is yufkpus
  46. [actual] yufkpus is babqpus
  47. [actual] x is babqpus
  48. [actual] x is babqpus
  49. [planning] x is babdpus
  50. [actual] sirrpus is babdpus and pejmpus
  51. [actual] naljpus is sirrpus
  52. [planning] x is sirrpus or naljpus
  53. [actual] x is hadwpus
  54. [actual] hadwpus is naljpus and zaldpus
  55. [actual] x is hadwpus
  56. [actual] hadwpus is naljpus
  57. [actual] x is naljpus
  58. [actual] naljpus is sirrpus
  59. [planning] x is sirrpus
  60. [actual] sirrpus is babdpus
  61. [actual] x is babdpus
  62. [actual] x is babdpus
  63. [actual] x is babdpus and babqpus and babxpus
  64. [planning] x is babdpus and babqpus and babxpus

=== 开始标准化和解析节点 ===
清洗后statements数: 64
标准化后节点数: 62
过滤掉的无效实体数: 2
标准化后的节点:
  1. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  2. [planning] x → babdpus (原始: x is babdpus)
  3. [planning] x → babqpus (原始: x is babqpus)
  4. [planning] x → babxpus (原始: x is babxpus)
  5. [actual] ruqfpus → babxpus (原始: ruqfpus is babxpus)
  6. [actual] x → topgpus (原始: x is topgpus)
  7. [actual] ruqfpus → vaynpus (原始: ruqfpus is vaynpus)
  8. [actual] x → hadwpus (原始: x is hadwpus)
  9. [actual] yufkpus → babqpus and wivkpus (原始: yufkpus is babqpus and wivkpus)
  10. [actual] helypus → yufkpus (原始: helypus is yufkpus)
  11. [actual] dolmpus → helypus and zincpus (原始: dolmpus is helypus and zincpus)
  12. [actual] naljpus → sirrpus (原始: naljpus is sirrpus)
  13. [actual] sirrpus → babdpus and pejmpus (原始: sirrpus is babdpus and pejmpus)
  14. [actual] x → dolmpus (原始: x is dolmpus)
  15. [actual] hadwpus → naljpus and zaldpus (原始: hadwpus is naljpus and zaldpus)
  16. [actual] topgpus → ruqfpus (原始: topgpus is ruqfpus)
  17. [actual] x → topgpus (原始: x is topgpus)
  18. [actual] x → hadwpus (原始: x is hadwpus)
  19. [actual] x → dolmpus (原始: x is dolmpus)
  20. [planning] x → babdpus (原始: x is babdpus)
  21. [planning] x → babqpus (原始: x is babqpus)
  22. [planning] x → babxpus (原始: x is babxpus)
  23. [actual] ruqfpus → babxpus (原始: ruqfpus is babxpus)
  24. [actual] topgpus → ruqfpus (原始: topgpus is ruqfpus)
  25. [actual] x → topgpus (原始: x is topgpus)
  26. [actual] topgpus → ruqfpus (原始: topgpus is ruqfpus)
  27. [actual] ruqfpus → babxpus (原始: ruqfpus is babxpus)
  28. [planning] x → babxpus (原始: x is babxpus)
  29. [planning] x → topgpus (原始: x is topgpus)
  30. [actual] topgpus → ruqfpus (原始: topgpus is ruqfpus)
  31. [actual] ruqfpus → babxpus (原始: ruqfpus is babxpus)
  32. [actual] x → babxpus (原始: x is babxpus)
  33. [actual] x → babxpus (原始: x is babxpus)
  34. [planning] x → babqpus (原始: x is babqpus)
  35. [actual] yufkpus → babqpus and wivkpus (原始: yufkpus is babqpus and wivkpus)
  36. [planning] x → yufkpus (原始: x is yufkpus)
  37. [actual] x → dolmpus (原始: x is dolmpus)
  38. [actual] dolmpus → helypus and zincpus (原始: dolmpus is helypus and zincpus)
  39. [actual] helypus → yufkpus (原始: helypus is yufkpus)
  40. [actual] dolmpus → helypus (原始: dolmpus is helypus)
  41. [actual] dolmpus → yufkpus (原始: dolmpus is yufkpus)
  42. [actual] x → dolmpus (原始: x is dolmpus)
  43. [actual] x → yufkpus (原始: x is yufkpus)
  44. [actual] yufkpus → babqpus (原始: yufkpus is babqpus)
  45. [actual] x → babqpus (原始: x is babqpus)
  46. [actual] x → babqpus (原始: x is babqpus)
  47. [planning] x → babdpus (原始: x is babdpus)
  48. [actual] sirrpus → babdpus and pejmpus (原始: sirrpus is babdpus and pejmpus)
  49. [actual] naljpus → sirrpus (原始: naljpus is sirrpus)
  50. [planning] x → sirrpus or naljpus (原始: x is sirrpus or naljpus)
  51. [actual] x → hadwpus (原始: x is hadwpus)
  52. [actual] hadwpus → naljpus and zaldpus (原始: hadwpus is naljpus and zaldpus)
  53. [actual] x → hadwpus (原始: x is hadwpus)
  54. [actual] hadwpus → naljpus (原始: hadwpus is naljpus)
  55. [actual] x → naljpus (原始: x is naljpus)
  56. [actual] naljpus → sirrpus (原始: naljpus is sirrpus)
  57. [planning] x → sirrpus (原始: x is sirrpus)
  58. [actual] sirrpus → babdpus (原始: sirrpus is babdpus)
  59. [actual] x → babdpus (原始: x is babdpus)
  60. [actual] x → babdpus (原始: x is babdpus)
  61. [actual] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  62. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 15
[后处理] 加载LoG图，包含 15 个节点
  LoG节点 0: x is babdpus and babqpus and babxpus (规则: CI, 深度: 1)
  LoG节点 1: x is babdpus (规则: MP, 深度: 2)
  LoG节点 2: x is babqpus (规则: MP, 深度: 2)
  LoG节点 3: x is babxpus (规则: CE, 深度: 2)
  LoG节点 4: x is naljpus (规则: CE, 深度: 3)
  LoG节点 5: naljpus is babdpus (规则: CE, 深度: 3)
  LoG节点 6: x is helypus (规则: CE, 深度: 3)
  LoG节点 7: helypus is babqpus (规则: CE, 深度: 3)
  LoG节点 8: x is babxpus and vaynpus (规则: MP, 深度: 3)
  LoG节点 9: x is naljpus and zaldpus (规则: MP, 深度: 4)
  LoG节点 10: naljpus is babdpus and pejmpus (规则: MP, 深度: 4)
  LoG节点 11: x is helypus and zincpus (规则: MP, 深度: 4)
  LoG节点 12: helypus is babqpus and wivkpus (规则: MP, 深度: 4)
  LoG节点 13: x is ruqfpus (规则: MP, 深度: 4)
  LoG节点 14: ruqfpus is babxpus and vaynpus (规则: CI, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 62
   - 初始条件数: 12
   - LoG图节点数: 15

📋 初始条件列表:
    1. ruqfpus is babxpus
    2. x is topgpus
    3. ruqfpus is vaynpus
    4. x is hadwpus
    5. yufkpus is babqpus and wivkpus
    6. helypus is yufkpus
    7. dolmpus is helypus and zincpus
    8. naljpus is sirrpus
    9. sirrpus is babdpus and pejmpus
   10. x is dolmpus
   11. hadwpus is naljpus and zaldpus
   12. topgpus is ruqfpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 12 个前提节点

🔍 开始处理actual节点...

   节点 1: ruqfpus is babxpus
      ↻ 重复节点，计数: 2

   节点 2: x is topgpus
      ↻ 重复节点，计数: 2

   节点 3: ruqfpus is vaynpus
      ↻ 重复节点，计数: 2

   节点 4: x is hadwpus
      ↻ 重复节点，计数: 2

   节点 5: yufkpus is babqpus and wivkpus
      ↻ 重复节点，计数: 2

   节点 6: helypus is yufkpus
      ↻ 重复节点，计数: 2

   节点 7: dolmpus is helypus and zincpus
      ↻ 重复节点，计数: 2

   节点 8: naljpus is sirrpus
      ↻ 重复节点，计数: 2

   节点 9: sirrpus is babdpus and pejmpus
      ↻ 重复节点，计数: 2

   节点 10: x is dolmpus
      ↻ 重复节点，计数: 2

   节点 11: hadwpus is naljpus and zaldpus
      ↻ 重复节点，计数: 2

   节点 12: topgpus is ruqfpus
      ↻ 重复节点，计数: 2

   节点 13: x is topgpus
      ↻ 重复节点，计数: 3

   节点 14: x is hadwpus
      ↻ 重复节点，计数: 3

   节点 15: x is dolmpus
      ↻ 重复节点，计数: 3

   节点 16: ruqfpus is babxpus
      ↻ 重复节点，计数: 3

   节点 17: topgpus is ruqfpus
      ↻ 重复节点，计数: 3

   节点 18: x is topgpus
      ↻ 重复节点，计数: 4

   节点 19: topgpus is ruqfpus
      ↻ 重复节点，计数: 4

   节点 20: ruqfpus is babxpus
      ↻ 重复节点，计数: 4

   节点 21: topgpus is ruqfpus
      ↻ 重复节点，计数: 5

   节点 22: ruqfpus is babxpus
      ↻ 重复节点，计数: 5

   节点 23: x is babxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babxpus
[子树点亮]     └─ 点亮依赖节点: x is babxpus and vaynpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is ruqfpus (深度4)
[子树点亮]     └─ 点亮依赖节点: ruqfpus is babxpus and vaynpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 24: x is babxpus
      ↻ 重复节点，计数: 2

   节点 25: yufkpus is babqpus and wivkpus
      ↻ 重复节点，计数: 3

   节点 26: x is dolmpus
      ↻ 重复节点，计数: 4

   节点 27: dolmpus is helypus and zincpus
      ↻ 重复节点，计数: 3

   节点 28: helypus is yufkpus
      ↻ 重复节点，计数: 3

   节点 29: dolmpus is helypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: dolmpus is helypus and zincpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: dolmpus is helypus and zincpus

   节点 30: dolmpus is yufkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: dolmpus is helypus → helypus is yufkpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: dolmpus is helypus
  - 前提: helypus is yufkpus

   节点 31: x is dolmpus
      ↻ 重复节点，计数: 5

   节点 32: x is yufkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is dolmpus → dolmpus is yufkpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is dolmpus
  - 前提: dolmpus is yufkpus

   节点 33: yufkpus is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yufkpus is babqpus and wivkpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yufkpus is babqpus and wivkpus

   节点 34: x is babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babqpus
[子树点亮]     └─ 点亮依赖节点: x is helypus (深度3)
[子树点亮]     └─ 点亮依赖节点: helypus is babqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is helypus and zincpus (深度4)
[子树点亮]     └─ 点亮依赖节点: helypus is babqpus and wivkpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
      ✅ 验证成功 + LoG匹配

   节点 35: x is babqpus
      ↻ 重复节点，计数: 2

   节点 36: sirrpus is babdpus and pejmpus
      ↻ 重复节点，计数: 3

   节点 37: naljpus is sirrpus
      ↻ 重复节点，计数: 3

   节点 38: x is hadwpus
      ↻ 重复节点，计数: 4

   节点 39: hadwpus is naljpus and zaldpus
      ↻ 重复节点，计数: 3

   节点 40: x is hadwpus
      ↻ 重复节点，计数: 5

   节点 41: hadwpus is naljpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: hadwpus is naljpus and zaldpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: hadwpus is naljpus and zaldpus

   节点 42: x is naljpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is naljpus
[子树点亮]     └─ 点亮依赖节点: x is naljpus and zaldpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 43: naljpus is sirrpus
      ↻ 重复节点，计数: 4

   节点 44: sirrpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: sirrpus is babdpus and pejmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: sirrpus is babdpus and pejmpus

   节点 45: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: naljpus is babdpus (深度3)
[子树点亮]     └─ 点亮依赖节点: naljpus is babdpus and pejmpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 46: x is babdpus
      ↻ 重复节点，计数: 2

   节点 47: x is babdpus and babqpus and babxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus and babqpus and babxpus
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 47
   - 新增节点: 11
   - 更新已存在节点: 36
   - 点亮的LoG节点: 15

🎯 推理质量统计:
   - 完美推理: 11 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 15节点, 12前提, 复杂度1-12

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 23
   - 前提节点: 12
   - 推理节点: 11
   - 幻觉节点: 0
   - 点亮LoG节点: 15

✅ 推理节点详情:
   🟢 x is babxpus (出现2次, 质量:perfect)
   🟢 dolmpus is helypus (出现1次, 质量:perfect)
   🟢 dolmpus is yufkpus (出现1次, 质量:perfect)
   🟢 x is yufkpus (出现1次, 质量:perfect)
   🟢 yufkpus is babqpus (出现1次, 质量:perfect)
   🟢 x is babqpus (出现2次, 质量:perfect)
   🟢 hadwpus is naljpus (出现1次, 质量:perfect)
   🟢 x is naljpus (出现1次, 质量:perfect)
   🟢 sirrpus is babdpus (出现1次, 质量:perfect)
   🟢 x is babdpus (出现2次, 质量:perfect)
   🟢 x is babdpus and babqpus and babxpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is helypus
   - x is ruqfpus
   - helypus is babqpus
   - x is helypus and zincpus
   - helypus is babqpus and wivkpus
   - naljpus is babdpus
   - naljpus is babdpus and pejmpus
   - x is babdpus
   - ruqfpus is babxpus and vaynpus
   - x is naljpus
   - x is naljpus and zaldpus
   - x is babqpus
   - x is babxpus
   - x is babxpus and vaynpus
   - x is babdpus and babqpus and babxpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus and babqpus and babxpus (第4层)
   节点Coverage: 15/15 = 100.00%
   前提条件Coverage: 12/12 = 100.00%
   各推理层点亮比例:
     第1层: 6/6 = 100.00%
     第2层: 5/5 = 100.00%
     第3层: 3/3 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/11 = 0.00%
   可推导节点: 11/11
   Strict Error Rate: 0/11 = 0.00%
   严格有效节点: 11/11

   详细分析:
     完美推理: 11 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 39/50
================================================================================
记录索引: 38
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_38.json
✅ 使用缓存结果:
   - 句子数: 42
   - 提取的语句数: 39
   - 初始条件数: 6

=== Statement提取完成 ===
总句子数: 42
成功提取: 42
失败提取: 0
总statements数: 39

=== 开始清洗Statement格式 ===
原始statements数: 39
清洗后statements数: 36
过滤掉的statements数: 3
清洗后的statements:
  1. [actual] mexhpus is nukvpus
  2. [actual] mexhpus is pejbpus
  3. [planning] x is babdpus
  4. [planning] x is babdpus
  5. [actual] mexhpus is nukvpus and pejbpus
  6. [actual] x is yijxpus
  7. [actual] nukvpus is xohtpus and bahkpus
  8. [actual] yijxpus is mexhpus
  9. [actual] nukvpus is qogypus
  10. [actual] qogypus is babdpus
  11. [actual] yijxpus is mexhpus
  12. [actual] yijxpus is mexhpus
  13. [actual] x is yijxpus
  14. [actual] x is yijxpus
  15. [actual] yijxpus is mexhpus
  16. [actual] x is yijxpus
  17. [actual] x is mexhpus
  18. [actual] x is yijxpus
  19. [actual] yijxpus is mexhpus
  20. [actual] x is mexhpus
  21. [actual] mexhpus is nukvpus and pejbpus
  22. [actual] mexhpus is nukvpus
  23. [actual] x is mexhpus
  24. [actual] mexhpus is nukvpus
  25. [actual] x is nukvpus
  26. [actual] nukvpus is qogypus
  27. [actual] nukvpus is qogypus
  28. [actual] x is nukvpus
  29. [actual] nukvpus is qogypus
  30. [actual] x is qogypus
  31. [actual] qogypus is babdpus
  32. [actual] qogypus is babdpus
  33. [actual] x is qogypus
  34. [actual] qogypus is babdpus
  35. [actual] x is babdpus
  36. [actual] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 36
标准化后节点数: 36
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] mexhpus → nukvpus (原始: mexhpus is nukvpus)
  2. [actual] mexhpus → pejbpus (原始: mexhpus is pejbpus)
  3. [planning] x → babdpus (原始: x is babdpus)
  4. [planning] x → babdpus (原始: x is babdpus)
  5. [actual] mexhpus → nukvpus and pejbpus (原始: mexhpus is nukvpus and pejbpus)
  6. [actual] x → yijxpus (原始: x is yijxpus)
  7. [actual] nukvpus → xohtpus and bahkpus (原始: nukvpus is xohtpus and bahkpus)
  8. [actual] yijxpus → mexhpus (原始: yijxpus is mexhpus)
  9. [actual] nukvpus → qogypus (原始: nukvpus is qogypus)
  10. [actual] qogypus → babdpus (原始: qogypus is babdpus)
  11. [actual] yijxpus → mexhpus (原始: yijxpus is mexhpus)
  12. [actual] yijxpus → mexhpus (原始: yijxpus is mexhpus)
  13. [actual] x → yijxpus (原始: x is yijxpus)
  14. [actual] x → yijxpus (原始: x is yijxpus)
  15. [actual] yijxpus → mexhpus (原始: yijxpus is mexhpus)
  16. [actual] x → yijxpus (原始: x is yijxpus)
  17. [actual] x → mexhpus (原始: x is mexhpus)
  18. [actual] x → yijxpus (原始: x is yijxpus)
  19. [actual] yijxpus → mexhpus (原始: yijxpus is mexhpus)
  20. [actual] x → mexhpus (原始: x is mexhpus)
  21. [actual] mexhpus → nukvpus and pejbpus (原始: mexhpus is nukvpus and pejbpus)
  22. [actual] mexhpus → nukvpus (原始: mexhpus is nukvpus)
  23. [actual] x → mexhpus (原始: x is mexhpus)
  24. [actual] mexhpus → nukvpus (原始: mexhpus is nukvpus)
  25. [actual] x → nukvpus (原始: x is nukvpus)
  26. [actual] nukvpus → qogypus (原始: nukvpus is qogypus)
  27. [actual] nukvpus → qogypus (原始: nukvpus is qogypus)
  28. [actual] x → nukvpus (原始: x is nukvpus)
  29. [actual] nukvpus → qogypus (原始: nukvpus is qogypus)
  30. [actual] x → qogypus (原始: x is qogypus)
  31. [actual] qogypus → babdpus (原始: qogypus is babdpus)
  32. [actual] qogypus → babdpus (原始: qogypus is babdpus)
  33. [actual] x → qogypus (原始: x is qogypus)
  34. [actual] qogypus → babdpus (原始: qogypus is babdpus)
  35. [actual] x → babdpus (原始: x is babdpus)
  36. [actual] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 8
[后处理] 加载LoG图，包含 8 个节点
  LoG节点 0: x is babdpus (规则: CE, 深度: 1)
  LoG节点 1: x is babdpus and xohtpus (规则: MP, 深度: 2)
  LoG节点 2: x is nukvpus (规则: MP, 深度: 3)
  LoG节点 3: nukvpus is babdpus and xohtpus (规则: CI, 深度: 3)
  LoG节点 4: x is mexhpus (规则: MP, 深度: 4)
  LoG节点 5: mexhpus is nukvpus (规则: CE, 深度: 4)
  LoG节点 6: nukvpus is babdpus (规则: MP, 深度: 4)
  LoG节点 7: nukvpus is xohtpus (规则: CE, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 36
   - 初始条件数: 6
   - LoG图节点数: 8

📋 初始条件列表:
    1. mexhpus is nukvpus and pejbpus
    2. x is yijxpus
    3. nukvpus is xohtpus and bahkpus
    4. yijxpus is mexhpus
    5. nukvpus is qogypus
    6. qogypus is babdpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 6 个前提节点

🔍 开始处理actual节点...

   节点 1: mexhpus is nukvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: mexhpus is nukvpus
      ✅ 验证成功 + LoG匹配

   节点 2: mexhpus is pejbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: mexhpus is nukvpus and pejbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: mexhpus is nukvpus and pejbpus

   节点 3: mexhpus is nukvpus and pejbpus
      ↻ 重复节点，计数: 2

   节点 4: x is yijxpus
      ↻ 重复节点，计数: 2

   节点 5: nukvpus is xohtpus and bahkpus
      ↻ 重复节点，计数: 2

   节点 6: yijxpus is mexhpus
      ↻ 重复节点，计数: 2

   节点 7: nukvpus is qogypus
      ↻ 重复节点，计数: 2

   节点 8: qogypus is babdpus
      ↻ 重复节点，计数: 2

   节点 9: yijxpus is mexhpus
      ↻ 重复节点，计数: 3

   节点 10: yijxpus is mexhpus
      ↻ 重复节点，计数: 4

   节点 11: x is yijxpus
      ↻ 重复节点，计数: 3

   节点 12: x is yijxpus
      ↻ 重复节点，计数: 4

   节点 13: yijxpus is mexhpus
      ↻ 重复节点，计数: 5

   节点 14: x is yijxpus
      ↻ 重复节点，计数: 5

   节点 15: x is mexhpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is mexhpus
      ✅ 验证成功 + LoG匹配

   节点 16: x is yijxpus
      ↻ 重复节点，计数: 6

   节点 17: yijxpus is mexhpus
      ↻ 重复节点，计数: 6

   节点 18: x is mexhpus
      ↻ 重复节点，计数: 2

   节点 19: mexhpus is nukvpus and pejbpus
      ↻ 重复节点，计数: 3

   节点 20: mexhpus is nukvpus
      ↻ 重复节点，计数: 2

   节点 21: x is mexhpus
      ↻ 重复节点，计数: 3

   节点 22: mexhpus is nukvpus
      ↻ 重复节点，计数: 3

   节点 23: x is nukvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is nukvpus
      ✅ 验证成功 + LoG匹配

   节点 24: nukvpus is qogypus
      ↻ 重复节点，计数: 3

   节点 25: nukvpus is qogypus
      ↻ 重复节点，计数: 4

   节点 26: x is nukvpus
      ↻ 重复节点，计数: 2

   节点 27: nukvpus is qogypus
      ↻ 重复节点，计数: 5

   节点 28: x is qogypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is yijxpus → yijxpus is qogypus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is yijxpus
  - 前提: yijxpus is mexhpus
  - 前提: mexhpus is nukvpus
  - 前提: nukvpus is qogypus

   节点 29: qogypus is babdpus
      ↻ 重复节点，计数: 3

   节点 30: qogypus is babdpus
      ↻ 重复节点，计数: 4

   节点 31: x is qogypus
      ↻ 重复节点，计数: 2

   节点 32: qogypus is babdpus
      ↻ 重复节点，计数: 5

   节点 33: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: x is babdpus and xohtpus (深度2)
[子树点亮]     └─ 点亮依赖节点: nukvpus is babdpus and xohtpus (深度3)
[子树点亮]     └─ 点亮依赖节点: nukvpus is babdpus (深度4)
[子树点亮]     └─ 点亮依赖节点: nukvpus is xohtpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 4 个节点
      ✅ 验证成功 + LoG匹配

   节点 34: x is babdpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 34
   - 新增节点: 6
   - 更新已存在节点: 28
   - 点亮的LoG节点: 8

🎯 推理质量统计:
   - 完美推理: 6 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 8节点, 6前提, 复杂度1-6

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 12
   - 前提节点: 6
   - 推理节点: 6
   - 幻觉节点: 0
   - 点亮LoG节点: 8

✅ 推理节点详情:
   🟢 mexhpus is nukvpus (出现3次, 质量:perfect)
   🟢 mexhpus is pejbpus (出现1次, 质量:perfect)
   🟢 x is mexhpus (出现3次, 质量:perfect)
   🟢 x is nukvpus (出现2次, 质量:perfect)
   🟢 x is qogypus (出现2次, 质量:perfect)
   🟢 x is babdpus (出现2次, 质量:perfect)

🔥 点亮的LoG节点:
   - nukvpus is babdpus
   - x is nukvpus
   - x is babdpus and xohtpus
   - x is babdpus
   - nukvpus is babdpus and xohtpus
   - x is mexhpus
   - mexhpus is nukvpus
   - nukvpus is xohtpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus (第4层)
   节点Coverage: 8/8 = 100.00%
   前提条件Coverage: 6/6 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/6 = 0.00%
   可推导节点: 6/6
   Strict Error Rate: 0/6 = 0.00%
   严格有效节点: 6/6

   详细分析:
     完美推理: 6 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 40/50
================================================================================
记录索引: 39
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_39.json
✅ 使用缓存结果:
   - 句子数: 48
   - 提取的语句数: 49
   - 初始条件数: 7

=== Statement提取完成 ===
总句子数: 48
成功提取: 48
失败提取: 0
总statements数: 49

=== 开始清洗Statement格式 ===
原始statements数: 49
清洗后statements数: 43
过滤掉的statements数: 6
清洗后的statements:
  1. [planning] x is babdpus and babqpus and babxpus
  2. [actual] x is xocgpus and ropspus
  3. [actual] jihcpus is dakbpus
  4. [actual] dakbpus is babdpus and babqpus and babxpus
  5. [actual] dakbpus is yolzpus
  6. [actual] xocgpus is biyrpus
  7. [actual] xayzpus is jihcpus
  8. [actual] biyrpus is xayzpus and tottpus
  9. [planning] x is babdpus
  10. [planning] x is babqpus
  11. [planning] x is babxpus
  12. [actual] x is xocgpus and ropspus
  13. [actual] x is a member of xocgpus
  14. [actual] x is a member of ropspus
  15. [planning] x is dakbpus
  16. [actual] dakbpus is babdpus and babqpus and babxpus
  17. [planning] x is dakbpus
  18. [planning] x is dakbpus
  19. [actual] x is xocgpus
  20. [actual] xocgpus is biyrpus
  21. [actual] xocgpus is biyrpus
  22. [actual] x is xocgpus
  23. [actual] x is biyrpus
  24. [actual] biyrpus is xayzpus and tottpus
  25. [actual] biyrpus is xayzpus and tottpus
  26. [actual] x is biyrpus
  27. [actual] x is xayzpus and tottpus
  28. [actual] xayzpus is jihcpus
  29. [actual] xayzpus is jihcpus
  30. [actual] x is xayzpus
  31. [actual] x is jihcpus
  32. [actual] jihcpus is dakbpus
  33. [actual] jihcpus is dakbpus
  34. [actual] x is jihcpus
  35. [actual] x is dakbpus
  36. [actual] dakbpus is babdpus and babqpus and babxpus
  37. [actual] x is dakbpus
  38. [actual] x is babdpus and babqpus and babxpus
  39. [actual] x is babdpus and babqpus and babxpus
  40. [actual] dakbpus is yolzpus
  41. [actual] x is ropspus
  42. [actual] x is babdpus and babqpus and babxpus
  43. [planning] x is babdpus and babqpus and babxpus

=== 开始标准化和解析节点 ===
清洗后statements数: 43
标准化后节点数: 41
过滤掉的无效实体数: 2
标准化后的节点:
  1. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  2. [actual] x → xocgpus and ropspus (原始: x is xocgpus and ropspus)
  3. [actual] jihcpus → dakbpus (原始: jihcpus is dakbpus)
  4. [actual] dakbpus → babdpus and babqpus and babxpus (原始: dakbpus is babdpus and babqpus and babxpus)
  5. [actual] dakbpus → yolzpus (原始: dakbpus is yolzpus)
  6. [actual] xocgpus → biyrpus (原始: xocgpus is biyrpus)
  7. [actual] xayzpus → jihcpus (原始: xayzpus is jihcpus)
  8. [actual] biyrpus → xayzpus and tottpus (原始: biyrpus is xayzpus and tottpus)
  9. [planning] x → babdpus (原始: x is babdpus)
  10. [planning] x → babqpus (原始: x is babqpus)
  11. [planning] x → babxpus (原始: x is babxpus)
  12. [actual] x → xocgpus and ropspus (原始: x is xocgpus and ropspus)
  13. [planning] x → dakbpus (原始: x is dakbpus)
  14. [actual] dakbpus → babdpus and babqpus and babxpus (原始: dakbpus is babdpus and babqpus and babxpus)
  15. [planning] x → dakbpus (原始: x is dakbpus)
  16. [planning] x → dakbpus (原始: x is dakbpus)
  17. [actual] x → xocgpus (原始: x is xocgpus)
  18. [actual] xocgpus → biyrpus (原始: xocgpus is biyrpus)
  19. [actual] xocgpus → biyrpus (原始: xocgpus is biyrpus)
  20. [actual] x → xocgpus (原始: x is xocgpus)
  21. [actual] x → biyrpus (原始: x is biyrpus)
  22. [actual] biyrpus → xayzpus and tottpus (原始: biyrpus is xayzpus and tottpus)
  23. [actual] biyrpus → xayzpus and tottpus (原始: biyrpus is xayzpus and tottpus)
  24. [actual] x → biyrpus (原始: x is biyrpus)
  25. [actual] x → xayzpus and tottpus (原始: x is xayzpus and tottpus)
  26. [actual] xayzpus → jihcpus (原始: xayzpus is jihcpus)
  27. [actual] xayzpus → jihcpus (原始: xayzpus is jihcpus)
  28. [actual] x → xayzpus (原始: x is xayzpus)
  29. [actual] x → jihcpus (原始: x is jihcpus)
  30. [actual] jihcpus → dakbpus (原始: jihcpus is dakbpus)
  31. [actual] jihcpus → dakbpus (原始: jihcpus is dakbpus)
  32. [actual] x → jihcpus (原始: x is jihcpus)
  33. [actual] x → dakbpus (原始: x is dakbpus)
  34. [actual] dakbpus → babdpus and babqpus and babxpus (原始: dakbpus is babdpus and babqpus and babxpus)
  35. [actual] x → dakbpus (原始: x is dakbpus)
  36. [actual] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  37. [actual] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  38. [actual] dakbpus → yolzpus (原始: dakbpus is yolzpus)
  39. [actual] x → ropspus (原始: x is ropspus)
  40. [actual] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  41. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 9
[后处理] 加载LoG图，包含 9 个节点
  LoG节点 0: x is babdpus and babqpus and babxpus (规则: MP, 深度: 1)
  LoG节点 1: x is xayzpus (规则: CE, 深度: 2)
  LoG节点 2: xayzpus is babdpus and babqpus and babxpus (规则: CE, 深度: 2)
  LoG节点 3: x is xayzpus and tottpus (规则: MP, 深度: 3)
  LoG节点 4: xayzpus is babdpus and babqpus and babxpus and yolzpus (规则: MP, 深度: 3)
  LoG节点 5: x is xocgpus (规则: CE, 深度: 4)
  LoG节点 6: xocgpus is xayzpus and tottpus (规则: MP, 深度: 4)
  LoG节点 7: xayzpus is dakbpus (规则: MP, 深度: 4)
  LoG节点 8: dakbpus is babdpus and babqpus and babxpus and yolzpus (规则: CI, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 41
   - 初始条件数: 7
   - LoG图节点数: 9

📋 初始条件列表:
    1. x is xocgpus and ropspus
    2. jihcpus is dakbpus
    3. dakbpus is babdpus and babqpus and babxpus
    4. dakbpus is yolzpus
    5. xocgpus is biyrpus
    6. xayzpus is jihcpus
    7. biyrpus is xayzpus and tottpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 7 个前提节点

🔍 开始处理actual节点...

   节点 1: x is xocgpus and ropspus
      ↻ 重复节点，计数: 2

   节点 2: jihcpus is dakbpus
      ↻ 重复节点，计数: 2

   节点 3: dakbpus is babdpus and babqpus and babxpus
      ↻ 重复节点，计数: 2

   节点 4: dakbpus is yolzpus
      ↻ 重复节点，计数: 2

   节点 5: xocgpus is biyrpus
      ↻ 重复节点，计数: 2

   节点 6: xayzpus is jihcpus
      ↻ 重复节点，计数: 2

   节点 7: biyrpus is xayzpus and tottpus
      ↻ 重复节点，计数: 2

   节点 8: x is xocgpus and ropspus
      ↻ 重复节点，计数: 3

   节点 9: dakbpus is babdpus and babqpus and babxpus
      ↻ 重复节点，计数: 3

   节点 10: x is xocgpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is xocgpus
      ✅ 验证成功 + LoG匹配

   节点 11: xocgpus is biyrpus
      ↻ 重复节点，计数: 3

   节点 12: xocgpus is biyrpus
      ↻ 重复节点，计数: 4

   节点 13: x is xocgpus
      ↻ 重复节点，计数: 2

   节点 14: x is biyrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xocgpus → xocgpus is biyrpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is xocgpus
  - 前提: xocgpus is biyrpus

   节点 15: biyrpus is xayzpus and tottpus
      ↻ 重复节点，计数: 3

   节点 16: biyrpus is xayzpus and tottpus
      ↻ 重复节点，计数: 4

   节点 17: x is biyrpus
      ↻ 重复节点，计数: 2

   节点 18: x is xayzpus and tottpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is xayzpus and tottpus
[子树点亮]     └─ 点亮依赖节点: xocgpus is xayzpus and tottpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 19: xayzpus is jihcpus
      ↻ 重复节点，计数: 3

   节点 20: xayzpus is jihcpus
      ↻ 重复节点，计数: 4

   节点 21: x is xayzpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is xayzpus
      ✅ 验证成功 + LoG匹配

   节点 22: x is jihcpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xocgpus → xocgpus is jihcpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is xocgpus
  - 前提: xocgpus is biyrpus
  - 前提: biyrpus is xayzpus and tottpus
  - 前提: xayzpus is jihcpus

   节点 23: jihcpus is dakbpus
      ↻ 重复节点，计数: 3

   节点 24: jihcpus is dakbpus
      ↻ 重复节点，计数: 4

   节点 25: x is jihcpus
      ↻ 重复节点，计数: 2

   节点 26: x is dakbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is xocgpus → xocgpus is dakbpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is xocgpus
  - 前提: xocgpus is biyrpus
  - 前提: biyrpus is xayzpus and tottpus
  - 前提: xayzpus is jihcpus
  - 前提: jihcpus is dakbpus
  ✓ 点亮LoG节点: xayzpus is dakbpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 27: dakbpus is babdpus and babqpus and babxpus
      ↻ 重复节点，计数: 4

   节点 28: x is dakbpus
      ↻ 重复节点，计数: 2

   节点 29: x is babdpus and babqpus and babxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus and babqpus and babxpus
[子树点亮]     └─ 点亮依赖节点: xayzpus is babdpus and babqpus and babxpus (深度2)
[子树点亮]     └─ 点亮依赖节点: xayzpus is babdpus and babqpus and babxpus and yolzpus (深度3)
[子树点亮]     └─ 点亮依赖节点: dakbpus is babdpus and babqpus and babxpus and yolzpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 30: x is babdpus and babqpus and babxpus
      ↻ 重复节点，计数: 2

   节点 31: dakbpus is yolzpus
      ↻ 重复节点，计数: 3

   节点 32: x is ropspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is xocgpus and ropspus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is xocgpus and ropspus

   节点 33: x is babdpus and babqpus and babxpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 33
   - 新增节点: 8
   - 更新已存在节点: 25
   - 点亮的LoG节点: 9

🎯 推理质量统计:
   - 完美推理: 8 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 9节点, 7前提, 复杂度1-7

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 15
   - 前提节点: 7
   - 推理节点: 8
   - 幻觉节点: 0
   - 点亮LoG节点: 9

✅ 推理节点详情:
   🟢 x is xocgpus (出现2次, 质量:perfect)
   🟢 x is biyrpus (出现2次, 质量:perfect)
   🟢 x is xayzpus and tottpus (出现1次, 质量:perfect)
   🟢 x is xayzpus (出现1次, 质量:perfect)
   🟢 x is jihcpus (出现2次, 质量:perfect)
   🟢 x is dakbpus (出现2次, 质量:perfect)
   🟢 x is babdpus and babqpus and babxpus (出现3次, 质量:perfect)
   🟢 x is ropspus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - xayzpus is babdpus and babqpus and babxpus
   - xayzpus is dakbpus
   - dakbpus is babdpus and babqpus and babxpus and yolzpus
   - x is xayzpus and tottpus
   - x is xayzpus
   - xayzpus is babdpus and babqpus and babxpus and yolzpus
   - xocgpus is xayzpus and tottpus
   - x is babdpus and babqpus and babxpus
   - x is xocgpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus and babqpus and babxpus (第4层)
   节点Coverage: 9/9 = 100.00%
   前提条件Coverage: 7/7 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/8 = 0.00%
   可推导节点: 8/8
   Strict Error Rate: 0/8 = 0.00%
   严格有效节点: 8/8

   详细分析:
     完美推理: 8 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 41/50
================================================================================
记录索引: 40
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_40.json
✅ 使用缓存结果:
   - 句子数: 51
   - 提取的语句数: 49
   - 初始条件数: 8

=== Statement提取完成 ===
总句子数: 51
成功提取: 51
失败提取: 0
总statements数: 49

=== 开始清洗Statement格式 ===
原始statements数: 49
清洗后statements数: 47
过滤掉的statements数: 2
清洗后的statements:
  1. [actual] canxpus is rahwpus
  2. [actual] rattpus is pidlpus
  3. [actual] dewspus is babdpus and nevqpus
  4. [actual] pidlpus is mukypus
  5. [actual] x is rattpus
  6. [actual] pidlpus is canxpus
  7. [actual] qowjpus is dewspus
  8. [actual] rahwpus is qowjpus and pomxpus
  9. [planning] x is babdpus
  10. [actual] x is rattpus
  11. [actual] rattpus is pidlpus
  12. [actual] x is rattpus
  13. [actual] rattpus is pidlpus
  14. [actual] x is pidlpus
  15. [actual] pidlpus is canxpus
  16. [actual] x is pidlpus
  17. [actual] pidlpus is canxpus
  18. [actual] x is canxpus
  19. [actual] canxpus is rahwpus
  20. [actual] x is canxpus
  21. [actual] canxpus is rahwpus
  22. [actual] x is rahwpus
  23. [actual] rahwpus is qowjpus and pomxpus
  24. [actual] rahwpus is qowjpus and pomxpus
  25. [actual] x is rahwpus
  26. [actual] qowjpus is dewspus
  27. [actual] x is qowjpus
  28. [actual] qowjpus is dewspus
  29. [actual] x is dewspus
  30. [actual] dewspus is babdpus and nevqpus
  31. [actual] dewspus is babdpus and nevqpus
  32. [actual] x is dewspus
  33. [actual] x is babdpus
  34. [actual] x is rattpus
  35. [actual] rattpus is pidlpus
  36. [actual] x is pidlpus
  37. [actual] pidlpus is canxpus
  38. [actual] x is canxpus
  39. [actual] canxpus is rahwpus
  40. [actual] x is rahwpus
  41. [actual] rahwpus is qowjpus and pomxpus
  42. [planning] x is qowjpus
  43. [actual] qowjpus is dewspus
  44. [planning] x is dewspus
  45. [actual] dewspus is babdpus and nevqpus
  46. [planning] x is babdpus
  47. [actual] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 47
标准化后节点数: 47
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] canxpus → rahwpus (原始: canxpus is rahwpus)
  2. [actual] rattpus → pidlpus (原始: rattpus is pidlpus)
  3. [actual] dewspus → babdpus and nevqpus (原始: dewspus is babdpus and nevqpus)
  4. [actual] pidlpus → mukypus (原始: pidlpus is mukypus)
  5. [actual] x → rattpus (原始: x is rattpus)
  6. [actual] pidlpus → canxpus (原始: pidlpus is canxpus)
  7. [actual] qowjpus → dewspus (原始: qowjpus is dewspus)
  8. [actual] rahwpus → qowjpus and pomxpus (原始: rahwpus is qowjpus and pomxpus)
  9. [planning] x → babdpus (原始: x is babdpus)
  10. [actual] x → rattpus (原始: x is rattpus)
  11. [actual] rattpus → pidlpus (原始: rattpus is pidlpus)
  12. [actual] x → rattpus (原始: x is rattpus)
  13. [actual] rattpus → pidlpus (原始: rattpus is pidlpus)
  14. [actual] x → pidlpus (原始: x is pidlpus)
  15. [actual] pidlpus → canxpus (原始: pidlpus is canxpus)
  16. [actual] x → pidlpus (原始: x is pidlpus)
  17. [actual] pidlpus → canxpus (原始: pidlpus is canxpus)
  18. [actual] x → canxpus (原始: x is canxpus)
  19. [actual] canxpus → rahwpus (原始: canxpus is rahwpus)
  20. [actual] x → canxpus (原始: x is canxpus)
  21. [actual] canxpus → rahwpus (原始: canxpus is rahwpus)
  22. [actual] x → rahwpus (原始: x is rahwpus)
  23. [actual] rahwpus → qowjpus and pomxpus (原始: rahwpus is qowjpus and pomxpus)
  24. [actual] rahwpus → qowjpus and pomxpus (原始: rahwpus is qowjpus and pomxpus)
  25. [actual] x → rahwpus (原始: x is rahwpus)
  26. [actual] qowjpus → dewspus (原始: qowjpus is dewspus)
  27. [actual] x → qowjpus (原始: x is qowjpus)
  28. [actual] qowjpus → dewspus (原始: qowjpus is dewspus)
  29. [actual] x → dewspus (原始: x is dewspus)
  30. [actual] dewspus → babdpus and nevqpus (原始: dewspus is babdpus and nevqpus)
  31. [actual] dewspus → babdpus and nevqpus (原始: dewspus is babdpus and nevqpus)
  32. [actual] x → dewspus (原始: x is dewspus)
  33. [actual] x → babdpus (原始: x is babdpus)
  34. [actual] x → rattpus (原始: x is rattpus)
  35. [actual] rattpus → pidlpus (原始: rattpus is pidlpus)
  36. [actual] x → pidlpus (原始: x is pidlpus)
  37. [actual] pidlpus → canxpus (原始: pidlpus is canxpus)
  38. [actual] x → canxpus (原始: x is canxpus)
  39. [actual] canxpus → rahwpus (原始: canxpus is rahwpus)
  40. [actual] x → rahwpus (原始: x is rahwpus)
  41. [actual] rahwpus → qowjpus and pomxpus (原始: rahwpus is qowjpus and pomxpus)
  42. [planning] x → qowjpus (原始: x is qowjpus)
  43. [actual] qowjpus → dewspus (原始: qowjpus is dewspus)
  44. [planning] x → dewspus (原始: x is dewspus)
  45. [actual] dewspus → babdpus and nevqpus (原始: dewspus is babdpus and nevqpus)
  46. [planning] x → babdpus (原始: x is babdpus)
  47. [actual] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 10
[后处理] 加载LoG图，包含 10 个节点
  LoG节点 0: x is babdpus (规则: MP, 深度: 1)
  LoG节点 1: x is canxpus (规则: CE, 深度: 2)
  LoG节点 2: canxpus is babdpus (规则: MP, 深度: 2)
  LoG节点 3: x is canxpus and mukypus (规则: MP, 深度: 3)
  LoG节点 4: canxpus is qowjpus (规则: CE, 深度: 3)
  LoG节点 5: qowjpus is babdpus (规则: CE, 深度: 3)
  LoG节点 6: x is pidlpus (规则: MP, 深度: 4)
  LoG节点 7: pidlpus is canxpus and mukypus (规则: CI, 深度: 4)
  LoG节点 8: canxpus is qowjpus and pomxpus (规则: MP, 深度: 4)
  LoG节点 9: qowjpus is babdpus and nevqpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 47
   - 初始条件数: 8
   - LoG图节点数: 10

📋 初始条件列表:
    1. canxpus is rahwpus
    2. rattpus is pidlpus
    3. dewspus is babdpus and nevqpus
    4. pidlpus is mukypus
    5. x is rattpus
    6. pidlpus is canxpus
    7. qowjpus is dewspus
    8. rahwpus is qowjpus and pomxpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 8 个前提节点

🔍 开始处理actual节点...

   节点 1: canxpus is rahwpus
      ↻ 重复节点，计数: 2

   节点 2: rattpus is pidlpus
      ↻ 重复节点，计数: 2

   节点 3: dewspus is babdpus and nevqpus
      ↻ 重复节点，计数: 2

   节点 4: pidlpus is mukypus
      ↻ 重复节点，计数: 2

   节点 5: x is rattpus
      ↻ 重复节点，计数: 2

   节点 6: pidlpus is canxpus
      ↻ 重复节点，计数: 2

   节点 7: qowjpus is dewspus
      ↻ 重复节点，计数: 2

   节点 8: rahwpus is qowjpus and pomxpus
      ↻ 重复节点，计数: 2

   节点 9: x is rattpus
      ↻ 重复节点，计数: 3

   节点 10: rattpus is pidlpus
      ↻ 重复节点，计数: 3

   节点 11: x is rattpus
      ↻ 重复节点，计数: 4

   节点 12: rattpus is pidlpus
      ↻ 重复节点，计数: 4

   节点 13: x is pidlpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is pidlpus
      ✅ 验证成功 + LoG匹配

   节点 14: pidlpus is canxpus
      ↻ 重复节点，计数: 3

   节点 15: x is pidlpus
      ↻ 重复节点，计数: 2

   节点 16: pidlpus is canxpus
      ↻ 重复节点，计数: 4

   节点 17: x is canxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is canxpus
[子树点亮]     └─ 点亮依赖节点: x is canxpus and mukypus (深度3)
[子树点亮]     └─ 点亮依赖节点: pidlpus is canxpus and mukypus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 18: canxpus is rahwpus
      ↻ 重复节点，计数: 3

   节点 19: x is canxpus
      ↻ 重复节点，计数: 2

   节点 20: canxpus is rahwpus
      ↻ 重复节点，计数: 4

   节点 21: x is rahwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is rattpus → rattpus is rahwpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is rattpus
  - 前提: rattpus is pidlpus
  - 前提: pidlpus is canxpus
  - 前提: canxpus is rahwpus

   节点 22: rahwpus is qowjpus and pomxpus
      ↻ 重复节点，计数: 3

   节点 23: rahwpus is qowjpus and pomxpus
      ↻ 重复节点，计数: 4

   节点 24: x is rahwpus
      ↻ 重复节点，计数: 2

   节点 25: qowjpus is dewspus
      ↻ 重复节点，计数: 3

   节点 26: x is qowjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is rattpus → rattpus is qowjpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is rattpus
  - 前提: rattpus is pidlpus
  - 前提: pidlpus is canxpus
  - 前提: canxpus is rahwpus
  - 前提: rahwpus is qowjpus and pomxpus
  ✓ 点亮LoG节点: canxpus is qowjpus
[子树点亮]     └─ 点亮依赖节点: canxpus is qowjpus and pomxpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 27: qowjpus is dewspus
      ↻ 重复节点，计数: 4

   节点 28: x is dewspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is rattpus → rattpus is dewspus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is rattpus
  - 前提: rattpus is pidlpus
  - 前提: pidlpus is canxpus
  - 前提: canxpus is rahwpus
  - 前提: rahwpus is qowjpus and pomxpus
  - 前提: qowjpus is dewspus

   节点 29: dewspus is babdpus and nevqpus
      ↻ 重复节点，计数: 3

   节点 30: dewspus is babdpus and nevqpus
      ↻ 重复节点，计数: 4

   节点 31: x is dewspus
      ↻ 重复节点，计数: 2

   节点 32: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: canxpus is babdpus (深度2)
[子树点亮]     └─ 点亮依赖节点: qowjpus is babdpus (深度3)
[子树点亮]     └─ 点亮依赖节点: qowjpus is babdpus and nevqpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 33: x is rattpus
      ↻ 重复节点，计数: 5

   节点 34: rattpus is pidlpus
      ↻ 重复节点，计数: 5

   节点 35: x is pidlpus
      ↻ 重复节点，计数: 3

   节点 36: pidlpus is canxpus
      ↻ 重复节点，计数: 5

   节点 37: x is canxpus
      ↻ 重复节点，计数: 3

   节点 38: canxpus is rahwpus
      ↻ 重复节点，计数: 5

   节点 39: x is rahwpus
      ↻ 重复节点，计数: 3

   节点 40: rahwpus is qowjpus and pomxpus
      ↻ 重复节点，计数: 5

   节点 41: qowjpus is dewspus
      ↻ 重复节点，计数: 5

   节点 42: dewspus is babdpus and nevqpus
      ↻ 重复节点，计数: 5

   节点 43: x is babdpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 43
   - 新增节点: 6
   - 更新已存在节点: 37
   - 点亮的LoG节点: 10

🎯 推理质量统计:
   - 完美推理: 6 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 10节点, 8前提, 复杂度1-8

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 14
   - 前提节点: 8
   - 推理节点: 6
   - 幻觉节点: 0
   - 点亮LoG节点: 10

✅ 推理节点详情:
   🟢 x is pidlpus (出现3次, 质量:perfect)
   🟢 x is canxpus (出现3次, 质量:perfect)
   🟢 x is rahwpus (出现3次, 质量:perfect)
   🟢 x is qowjpus (出现1次, 质量:perfect)
   🟢 x is dewspus (出现2次, 质量:perfect)
   🟢 x is babdpus (出现2次, 质量:perfect)

🔥 点亮的LoG节点:
   - canxpus is babdpus
   - canxpus is qowjpus
   - x is canxpus and mukypus
   - x is pidlpus
   - x is babdpus
   - pidlpus is canxpus and mukypus
   - qowjpus is babdpus
   - x is canxpus
   - qowjpus is babdpus and nevqpus
   - canxpus is qowjpus and pomxpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus (第4层)
   节点Coverage: 10/10 = 100.00%
   前提条件Coverage: 8/8 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/6 = 0.00%
   可推导节点: 6/6
   Strict Error Rate: 0/6 = 0.00%
   严格有效节点: 6/6

   详细分析:
     完美推理: 6 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 42/50
================================================================================
记录索引: 41
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_41.json
✅ 使用缓存结果:
   - 句子数: 114
   - 提取的语句数: 168
   - 初始条件数: 9

=== Statement提取完成 ===
总句子数: 114
成功提取: 113
失败提取: 1
总statements数: 168

=== 开始清洗Statement格式 ===
原始statements数: 168
清洗后statements数: 122
过滤掉的statements数: 46
清洗后的statements:
  1. [planning] x is babdpus and babqpus
  2. [planning] x is both categories
  3. [actual] latppus is cebrpus
  4. [actual] yoqrpus is babqpus and ceghpus
  5. [actual] qomnpus is movbpus
  6. [actual] x is latppus
  7. [actual] futypus is loqfpus
  8. [actual] loqfpus is qomnpus and qolbpus
  9. [actual] x is futypus
  10. [actual] movbpus is babdpus and mevspus
  11. [actual] cebrpus is yoqrpus
  12. [actual] x is latppus and futypus
  13. [actual] x is latppus and futypus
  14. [actual] latppus is cebrpus
  15. [actual] x is latppus
  16. [planning] x is cebrpus
  17. [actual] latppus is cebrpus
  18. [actual] latppus is a member of cebrpus
  19. [planning] x is latppus
  20. [planning] x is a member of cebrpus
  21. [planning] latppus is cebrpus
  22. [planning] x is latppus
  23. [planning] x is cebrpus
  24. [actual] x is cebrpus
  25. [actual] cebrpus is yoqrpus
  26. [actual] cebrpus is yoqrpus
  27. [planning] cebrpus is yoqrpus
  28. [actual] cebrpus is yoqrpus
  29. [planning] cebrpus is yoqrpus
  30. [planning] cebrpus is yoqrpus
  31. [planning] cebrpus is a subset of yoqrpus
  32. [planning] cebrpus is a member
  33. [planning] yoqrpus is babqpus and ceghpus
  34. [actual] yoqrpus is babqpus and ceghpus
  35. [actual] yoqrpus is babqpus and ceghpus
  36. [actual] movbpus is babdpus and mevspus
  37. [actual] x is latppus
  38. [actual] latppus is cebrpus
  39. [actual] x is latppus
  40. [actual] latppus is cebrpus
  41. [planning] x is cebrpus
  42. [actual] latppus is a member of cebrpus
  43. [actual] x is a member of latppus
  44. [planning] x is a direct member of cebrpus
  45. [planning] cebrpus is a set that contains elements of latppus
  46. [planning] cebrpus is a set of sets
  47. [planning] x is babdpus and babqpus
  48. [planning] x is instance
  49. [planning] babdpus is categories
  50. [planning] babqpus is categories
  51. [actual] x is latppus
  52. [actual] latppus is cebrpus
  53. [planning] latppus is cebrpus
  54. [planning] latppus is cebrpus
  55. [actual] latppus is a member of cebrpus category
  56. [actual] cebrpus is a category that contains latppus as an element
  57. [planning] latppus is cebrpus category
  58. [actual] x is latppus
  59. [actual] latppus is cebrpus
  60. [planning] x is cebrpus
  61. [planning] cebrpus is a category of categories
  62. [actual] yoqrpus is babqpus and ceghpus
  63. [planning] yoqrpus is a subset of babqpus and ceghpus
  64. [actual] cebrpus is yoqrpus
  65. [actual] cebrpus is a subset of yoqrpus
  66. [actual] yoqrpus is babqpus
  67. [planning] yoqrpus is subset of babqpus
  68. [planning] cebrpus is subset of yoqrpus
  69. [actual] latppus is cebrpus
  70. [actual] x is latppus
  71. [actual] x is latppus
  72. [actual] x is cebrpus
  73. [planning] x is latppus
  74. [planning] x is cebrpus
  75. [actual] yoqrpus is babqpus
  76. [planning] yoqrpus is subset of babqpus
  77. [planning] yoqrpus is babqpus
  78. [planning] x is babdpus and babqpus
  79. [actual] x is latppus
  80. [actual] x is futypus
  81. [actual] x is latppus
  82. [actual] latppus is cebrpus
  83. [actual] latppus is a member of cebrpus
  84. [planning] x is cebrpus
  85. [actual] x is a member of latppus
  86. [actual] latppus is a member of cebrpus
  87. [planning] x is a member of cebrpus
  88. [planning] latppus is a category itself
  89. [planning] x is instance
  90. [planning] x is A
  91. [planning] x is B
  92. [actual] x is latppus
  93. [actual] x is an instance of latppus category
  94. [actual] latppus is cebrpus
  95. [actual] x is latppus
  96. [actual] x is cebrpus
  97. [actual] cebrpus is yoqrpus
  98. [actual] x is yoqrpus
  99. [planning] x is yoqrpus
  100. [actual] yoqrpus is babqpus and ceghpus
  101. [actual] x is yoqrpus
  102. [actual] x is babqpus
  103. [actual] x is babqpus
  104. [actual] x is babqpus
  105. [planning] x is babdpus
  106. [actual] x is yoqrpus
  107. [actual] yoqrpus is babqpus and ceghpus
  108. [actual] x is futypus
  109. [actual] futypus is loqfpus
  110. [planning] x is loqfpus
  111. [actual] loqfpus is qomnpus and qolbpus
  112. [actual] x is qomnpus
  113. [actual] x is qolbpus
  114. [actual] qomnpus is movbpus
  115. [actual] qomnpus is subset of movbpus
  116. [actual] x is qomnpus
  117. [actual] x is movbpus
  118. [planning] x is movbpus
  119. [actual] x is babdpus
  120. [actual] x is babqpus and babdpus
  121. [actual] cebrpus is yoqrpus
  122. [actual] x is babdpus and babqpus

=== 开始标准化和解析节点 ===
清洗后statements数: 122
标准化后节点数: 90
过滤掉的无效实体数: 32
标准化后的节点:
  1. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  2. [actual] latppus → cebrpus (原始: latppus is cebrpus)
  3. [actual] yoqrpus → babqpus and ceghpus (原始: yoqrpus is babqpus and ceghpus)
  4. [actual] qomnpus → movbpus (原始: qomnpus is movbpus)
  5. [actual] x → latppus (原始: x is latppus)
  6. [actual] futypus → loqfpus (原始: futypus is loqfpus)
  7. [actual] loqfpus → qomnpus and qolbpus (原始: loqfpus is qomnpus and qolbpus)
  8. [actual] x → futypus (原始: x is futypus)
  9. [actual] movbpus → babdpus and mevspus (原始: movbpus is babdpus and mevspus)
  10. [actual] cebrpus → yoqrpus (原始: cebrpus is yoqrpus)
  11. [actual] x → latppus and futypus (原始: x is latppus and futypus)
  12. [actual] x → latppus and futypus (原始: x is latppus and futypus)
  13. [actual] latppus → cebrpus (原始: latppus is cebrpus)
  14. [actual] x → latppus (原始: x is latppus)
  15. [planning] x → cebrpus (原始: x is cebrpus)
  16. [actual] latppus → cebrpus (原始: latppus is cebrpus)
  17. [planning] x → latppus (原始: x is latppus)
  18. [planning] latppus → cebrpus (原始: latppus is cebrpus)
  19. [planning] x → latppus (原始: x is latppus)
  20. [planning] x → cebrpus (原始: x is cebrpus)
  21. [actual] x → cebrpus (原始: x is cebrpus)
  22. [actual] cebrpus → yoqrpus (原始: cebrpus is yoqrpus)
  23. [actual] cebrpus → yoqrpus (原始: cebrpus is yoqrpus)
  24. [planning] cebrpus → yoqrpus (原始: cebrpus is yoqrpus)
  25. [actual] cebrpus → yoqrpus (原始: cebrpus is yoqrpus)
  26. [planning] cebrpus → yoqrpus (原始: cebrpus is yoqrpus)
  27. [planning] cebrpus → yoqrpus (原始: cebrpus is yoqrpus)
  28. [planning] yoqrpus → babqpus and ceghpus (原始: yoqrpus is babqpus and ceghpus)
  29. [actual] yoqrpus → babqpus and ceghpus (原始: yoqrpus is babqpus and ceghpus)
  30. [actual] yoqrpus → babqpus and ceghpus (原始: yoqrpus is babqpus and ceghpus)
  31. [actual] movbpus → babdpus and mevspus (原始: movbpus is babdpus and mevspus)
  32. [actual] x → latppus (原始: x is latppus)
  33. [actual] latppus → cebrpus (原始: latppus is cebrpus)
  34. [actual] x → latppus (原始: x is latppus)
  35. [actual] latppus → cebrpus (原始: latppus is cebrpus)
  36. [planning] x → cebrpus (原始: x is cebrpus)
  37. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  38. [actual] x → latppus (原始: x is latppus)
  39. [actual] latppus → cebrpus (原始: latppus is cebrpus)
  40. [planning] latppus → cebrpus (原始: latppus is cebrpus)
  41. [planning] latppus → cebrpus (原始: latppus is cebrpus)
  42. [actual] x → latppus (原始: x is latppus)
  43. [actual] latppus → cebrpus (原始: latppus is cebrpus)
  44. [planning] x → cebrpus (原始: x is cebrpus)
  45. [actual] yoqrpus → babqpus and ceghpus (原始: yoqrpus is babqpus and ceghpus)
  46. [actual] cebrpus → yoqrpus (原始: cebrpus is yoqrpus)
  47. [actual] yoqrpus → babqpus (原始: yoqrpus is babqpus)
  48. [actual] latppus → cebrpus (原始: latppus is cebrpus)
  49. [actual] x → latppus (原始: x is latppus)
  50. [actual] x → latppus (原始: x is latppus)
  51. [actual] x → cebrpus (原始: x is cebrpus)
  52. [planning] x → latppus (原始: x is latppus)
  53. [planning] x → cebrpus (原始: x is cebrpus)
  54. [actual] yoqrpus → babqpus (原始: yoqrpus is babqpus)
  55. [planning] yoqrpus → babqpus (原始: yoqrpus is babqpus)
  56. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  57. [actual] x → latppus (原始: x is latppus)
  58. [actual] x → futypus (原始: x is futypus)
  59. [actual] x → latppus (原始: x is latppus)
  60. [actual] latppus → cebrpus (原始: latppus is cebrpus)
  61. [planning] x → cebrpus (原始: x is cebrpus)
  62. [actual] x → latppus (原始: x is latppus)
  63. [actual] latppus → cebrpus (原始: latppus is cebrpus)
  64. [actual] x → latppus (原始: x is latppus)
  65. [actual] x → cebrpus (原始: x is cebrpus)
  66. [actual] cebrpus → yoqrpus (原始: cebrpus is yoqrpus)
  67. [actual] x → yoqrpus (原始: x is yoqrpus)
  68. [planning] x → yoqrpus (原始: x is yoqrpus)
  69. [actual] yoqrpus → babqpus and ceghpus (原始: yoqrpus is babqpus and ceghpus)
  70. [actual] x → yoqrpus (原始: x is yoqrpus)
  71. [actual] x → babqpus (原始: x is babqpus)
  72. [actual] x → babqpus (原始: x is babqpus)
  73. [actual] x → babqpus (原始: x is babqpus)
  74. [planning] x → babdpus (原始: x is babdpus)
  75. [actual] x → yoqrpus (原始: x is yoqrpus)
  76. [actual] yoqrpus → babqpus and ceghpus (原始: yoqrpus is babqpus and ceghpus)
  77. [actual] x → futypus (原始: x is futypus)
  78. [actual] futypus → loqfpus (原始: futypus is loqfpus)
  79. [planning] x → loqfpus (原始: x is loqfpus)
  80. [actual] loqfpus → qomnpus and qolbpus (原始: loqfpus is qomnpus and qolbpus)
  81. [actual] x → qomnpus (原始: x is qomnpus)
  82. [actual] x → qolbpus (原始: x is qolbpus)
  83. [actual] qomnpus → movbpus (原始: qomnpus is movbpus)
  84. [actual] x → qomnpus (原始: x is qomnpus)
  85. [actual] x → movbpus (原始: x is movbpus)
  86. [planning] x → movbpus (原始: x is movbpus)
  87. [actual] x → babdpus (原始: x is babdpus)
  88. [actual] x → babqpus and babdpus (原始: x is babqpus and babdpus)
  89. [actual] cebrpus → yoqrpus (原始: cebrpus is yoqrpus)
  90. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 11
[后处理] 加载LoG图，包含 11 个节点
  LoG节点 0: x is babdpus and babqpus (规则: CI, 深度: 1)
  LoG节点 1: x is babdpus (规则: MP, 深度: 2)
  LoG节点 2: x is babqpus (规则: CE, 深度: 2)
  LoG节点 3: x is qomnpus (规则: MP, 深度: 3)
  LoG节点 4: qomnpus is babdpus (规则: CE, 深度: 3)
  LoG节点 5: x is babqpus and ceghpus (规则: MP, 深度: 3)
  LoG节点 6: x is loqfpus (规则: MP, 深度: 4)
  LoG节点 7: loqfpus is qomnpus (规则: CE, 深度: 4)
  LoG节点 8: qomnpus is babdpus and mevspus (规则: MP, 深度: 4)
  LoG节点 9: x is cebrpus (规则: MP, 深度: 4)
  LoG节点 10: cebrpus is babqpus and ceghpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 90
   - 初始条件数: 9
   - LoG图节点数: 11

📋 初始条件列表:
    1. latppus is cebrpus
    2. yoqrpus is babqpus and ceghpus
    3. qomnpus is movbpus
    4. x is latppus
    5. futypus is loqfpus
    6. loqfpus is qomnpus and qolbpus
    7. x is futypus
    8. movbpus is babdpus and mevspus
    9. cebrpus is yoqrpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 9 个前提节点

🔍 开始处理actual节点...

   节点 1: latppus is cebrpus
      ↻ 重复节点，计数: 2

   节点 2: yoqrpus is babqpus and ceghpus
      ↻ 重复节点，计数: 2

   节点 3: qomnpus is movbpus
      ↻ 重复节点，计数: 2

   节点 4: x is latppus
      ↻ 重复节点，计数: 2

   节点 5: futypus is loqfpus
      ↻ 重复节点，计数: 2

   节点 6: loqfpus is qomnpus and qolbpus
      ↻ 重复节点，计数: 2

   节点 7: x is futypus
      ↻ 重复节点，计数: 2

   节点 8: movbpus is babdpus and mevspus
      ↻ 重复节点，计数: 2

   节点 9: cebrpus is yoqrpus
      ↻ 重复节点，计数: 2

   节点 10: x is latppus and futypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: x is latppus → x is futypus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is latppus
  - 前提: x is futypus

   节点 11: x is latppus and futypus
      ↻ 重复节点，计数: 2

   节点 12: latppus is cebrpus
      ↻ 重复节点，计数: 3

   节点 13: x is latppus
      ↻ 重复节点，计数: 3

   节点 14: latppus is cebrpus
      ↻ 重复节点，计数: 4

   节点 15: x is cebrpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is cebrpus
      ✅ 验证成功 + LoG匹配

   节点 16: cebrpus is yoqrpus
      ↻ 重复节点，计数: 3

   节点 17: cebrpus is yoqrpus
      ↻ 重复节点，计数: 4

   节点 18: cebrpus is yoqrpus
      ↻ 重复节点，计数: 5

   节点 19: yoqrpus is babqpus and ceghpus
      ↻ 重复节点，计数: 3

   节点 20: yoqrpus is babqpus and ceghpus
      ↻ 重复节点，计数: 4

   节点 21: movbpus is babdpus and mevspus
      ↻ 重复节点，计数: 3

   节点 22: x is latppus
      ↻ 重复节点，计数: 4

   节点 23: latppus is cebrpus
      ↻ 重复节点，计数: 5

   节点 24: x is latppus
      ↻ 重复节点，计数: 5

   节点 25: latppus is cebrpus
      ↻ 重复节点，计数: 6

   节点 26: x is latppus
      ↻ 重复节点，计数: 6

   节点 27: latppus is cebrpus
      ↻ 重复节点，计数: 7

   节点 28: x is latppus
      ↻ 重复节点，计数: 7

   节点 29: latppus is cebrpus
      ↻ 重复节点，计数: 8

   节点 30: yoqrpus is babqpus and ceghpus
      ↻ 重复节点，计数: 5

   节点 31: cebrpus is yoqrpus
      ↻ 重复节点，计数: 6

   节点 32: yoqrpus is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: yoqrpus is babqpus and ceghpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: yoqrpus is babqpus and ceghpus

   节点 33: latppus is cebrpus
      ↻ 重复节点，计数: 9

   节点 34: x is latppus
      ↻ 重复节点，计数: 8

   节点 35: x is latppus
      ↻ 重复节点，计数: 9

   节点 36: x is cebrpus
      ↻ 重复节点，计数: 2

   节点 37: yoqrpus is babqpus
      ↻ 重复节点，计数: 2

   节点 38: x is latppus
      ↻ 重复节点，计数: 10

   节点 39: x is futypus
      ↻ 重复节点，计数: 3

   节点 40: x is latppus
      ↻ 重复节点，计数: 11

   节点 41: latppus is cebrpus
      ↻ 重复节点，计数: 10

   节点 42: x is latppus
      ↻ 重复节点，计数: 12

   节点 43: latppus is cebrpus
      ↻ 重复节点，计数: 11

   节点 44: x is latppus
      ↻ 重复节点，计数: 13

   节点 45: x is cebrpus
      ↻ 重复节点，计数: 3

   节点 46: cebrpus is yoqrpus
      ↻ 重复节点，计数: 7

   节点 47: x is yoqrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is latppus → latppus is yoqrpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is latppus
  - 前提: latppus is cebrpus
  - 前提: cebrpus is yoqrpus

   节点 48: yoqrpus is babqpus and ceghpus
      ↻ 重复节点，计数: 6

   节点 49: x is yoqrpus
      ↻ 重复节点，计数: 2

   节点 50: x is babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babqpus
[子树点亮]     └─ 点亮依赖节点: x is babqpus and ceghpus (深度3)
[子树点亮]     └─ 点亮依赖节点: cebrpus is babqpus and ceghpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 51: x is babqpus
      ↻ 重复节点，计数: 2

   节点 52: x is babqpus
      ↻ 重复节点，计数: 3

   节点 53: x is yoqrpus
      ↻ 重复节点，计数: 3

   节点 54: yoqrpus is babqpus and ceghpus
      ↻ 重复节点，计数: 7

   节点 55: x is futypus
      ↻ 重复节点，计数: 4

   节点 56: futypus is loqfpus
      ↻ 重复节点，计数: 3

   节点 57: loqfpus is qomnpus and qolbpus
      ↻ 重复节点，计数: 3

   节点 58: x is qomnpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is qomnpus
[子树点亮]     └─ 点亮依赖节点: x is loqfpus (深度4)
[子树点亮]     └─ 点亮依赖节点: loqfpus is qomnpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 59: x is qolbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is futypus → futypus is qolbpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is futypus
  - 前提: futypus is loqfpus
  - 前提: loqfpus is qomnpus and qolbpus

   节点 60: qomnpus is movbpus
      ↻ 重复节点，计数: 3

   节点 61: x is qomnpus
      ↻ 重复节点，计数: 2

   节点 62: x is movbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is futypus → futypus is movbpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is futypus
  - 前提: futypus is loqfpus
  - 前提: loqfpus is qomnpus and qolbpus
  - 前提: qomnpus is movbpus

   节点 63: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: qomnpus is babdpus (深度3)
[子树点亮]     └─ 点亮依赖节点: qomnpus is babdpus and mevspus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 64: x is babqpus and babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: x is babqpus → x is babdpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is babqpus
  - 前提: x is babdpus
  ✓ 点亮LoG节点: x is babdpus and babqpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 65: cebrpus is yoqrpus
      ↻ 重复节点，计数: 8

   节点 66: x is babdpus and babqpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 66
   - 新增节点: 11
   - 更新已存在节点: 55
   - 点亮的LoG节点: 11

🎯 推理质量统计:
   - 完美推理: 11 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 11节点, 9前提, 复杂度1-9

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 20
   - 前提节点: 9
   - 推理节点: 11
   - 幻觉节点: 0
   - 点亮LoG节点: 11

✅ 推理节点详情:
   🟢 x is latppus and futypus (出现2次, 质量:perfect)
   🟢 x is cebrpus (出现3次, 质量:perfect)
   🟢 yoqrpus is babqpus (出现2次, 质量:perfect)
   🟢 x is yoqrpus (出现3次, 质量:perfect)
   🟢 x is babqpus (出现3次, 质量:perfect)
   🟢 x is qomnpus (出现2次, 质量:perfect)
   🟢 x is qolbpus (出现1次, 质量:perfect)
   🟢 x is movbpus (出现1次, 质量:perfect)
   🟢 x is babdpus (出现1次, 质量:perfect)
   🟢 x is babqpus and babdpus (出现1次, 质量:perfect)
   🟢 x is babdpus and babqpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is babqpus and ceghpus
   - qomnpus is babdpus
   - loqfpus is qomnpus
   - x is babdpus and babqpus
   - x is loqfpus
   - x is babdpus
   - qomnpus is babdpus and mevspus
   - x is qomnpus
   - x is cebrpus
   - x is babqpus
   - cebrpus is babqpus and ceghpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus and babqpus (第4层)
   节点Coverage: 11/11 = 100.00%
   前提条件Coverage: 9/9 = 100.00%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/11 = 0.00%
   可推导节点: 11/11
   Strict Error Rate: 0/11 = 0.00%
   严格有效节点: 11/11

   详细分析:
     完美推理: 11 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 43/50
================================================================================
记录索引: 42
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_42.json
✅ 使用缓存结果:
   - 句子数: 61
   - 提取的语句数: 43
   - 初始条件数: 9

=== Statement提取完成 ===
总句子数: 61
成功提取: 61
失败提取: 0
总statements数: 43

=== 开始清洗Statement格式 ===
原始statements数: 43
清洗后statements数: 38
过滤掉的statements数: 5
清洗后的statements:
  1. [planning] x is babdpus
  2. [actual] x is jarjpus
  3. [actual] x is wazspus
  4. [actual] x is jarjpus and wazspus
  5. [planning] x is babdpus
  6. [actual] sakkpus is kevrpus
  7. [actual] qixfpus is babdpus and vavtpus
  8. [actual] qixfpus is babdpus and vavtpus
  9. [actual] kevrpus is rolmpus and padxpus
  10. [actual] jarjpus is zejfpus
  11. [actual] rolmpus is vebzpus
  12. [actual] vebzpus is guszpus and jodzpus
  13. [actual] x is jarjpus and wazspus
  14. [actual] zejfpus is sakkpus
  15. [actual] guszpus is qixfpus
  16. [actual] x is jarjpus
  17. [actual] jarjpus is zejfpus
  18. [actual] zejfpus is sakkpus
  19. [actual] sakkpus is kevrpus
  20. [actual] kevrpus is rolmpus and padxpus
  21. [actual] rolmpus is vebzpus
  22. [actual] vebzpus is guszpus and jodzpus
  23. [actual] guszpus is qixfpus
  24. [actual] qixfpus is babdpus and vavtpus
  25. [actual] x is babdpus
  26. [planning] x is wazspus
  27. [actual] x is babdpus
  28. [actual] x is jarjpus
  29. [actual] jarjpus is zejfpus
  30. [actual] zejfpus is sakkpus
  31. [actual] sakkpus is kevrpus
  32. [actual] kevrpus is rolmpus
  33. [actual] rolmpus is vebzpus
  34. [actual] vebzpus is guszpus
  35. [actual] vebzpus is jodzpus
  36. [actual] guszpus is qixfpus
  37. [actual] qixfpus is babdpus
  38. [actual] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 38
标准化后节点数: 38
过滤掉的无效实体数: 0
标准化后的节点:
  1. [planning] x → babdpus (原始: x is babdpus)
  2. [actual] x → jarjpus (原始: x is jarjpus)
  3. [actual] x → wazspus (原始: x is wazspus)
  4. [actual] x → jarjpus and wazspus (原始: x is jarjpus and wazspus)
  5. [planning] x → babdpus (原始: x is babdpus)
  6. [actual] sakkpus → kevrpus (原始: sakkpus is kevrpus)
  7. [actual] qixfpus → babdpus and vavtpus (原始: qixfpus is babdpus and vavtpus)
  8. [actual] qixfpus → babdpus and vavtpus (原始: qixfpus is babdpus and vavtpus)
  9. [actual] kevrpus → rolmpus and padxpus (原始: kevrpus is rolmpus and padxpus)
  10. [actual] jarjpus → zejfpus (原始: jarjpus is zejfpus)
  11. [actual] rolmpus → vebzpus (原始: rolmpus is vebzpus)
  12. [actual] vebzpus → guszpus and jodzpus (原始: vebzpus is guszpus and jodzpus)
  13. [actual] x → jarjpus and wazspus (原始: x is jarjpus and wazspus)
  14. [actual] zejfpus → sakkpus (原始: zejfpus is sakkpus)
  15. [actual] guszpus → qixfpus (原始: guszpus is qixfpus)
  16. [actual] x → jarjpus (原始: x is jarjpus)
  17. [actual] jarjpus → zejfpus (原始: jarjpus is zejfpus)
  18. [actual] zejfpus → sakkpus (原始: zejfpus is sakkpus)
  19. [actual] sakkpus → kevrpus (原始: sakkpus is kevrpus)
  20. [actual] kevrpus → rolmpus and padxpus (原始: kevrpus is rolmpus and padxpus)
  21. [actual] rolmpus → vebzpus (原始: rolmpus is vebzpus)
  22. [actual] vebzpus → guszpus and jodzpus (原始: vebzpus is guszpus and jodzpus)
  23. [actual] guszpus → qixfpus (原始: guszpus is qixfpus)
  24. [actual] qixfpus → babdpus and vavtpus (原始: qixfpus is babdpus and vavtpus)
  25. [actual] x → babdpus (原始: x is babdpus)
  26. [planning] x → wazspus (原始: x is wazspus)
  27. [actual] x → babdpus (原始: x is babdpus)
  28. [actual] x → jarjpus (原始: x is jarjpus)
  29. [actual] jarjpus → zejfpus (原始: jarjpus is zejfpus)
  30. [actual] zejfpus → sakkpus (原始: zejfpus is sakkpus)
  31. [actual] sakkpus → kevrpus (原始: sakkpus is kevrpus)
  32. [actual] kevrpus → rolmpus (原始: kevrpus is rolmpus)
  33. [actual] rolmpus → vebzpus (原始: rolmpus is vebzpus)
  34. [actual] vebzpus → guszpus (原始: vebzpus is guszpus)
  35. [actual] vebzpus → jodzpus (原始: vebzpus is jodzpus)
  36. [actual] guszpus → qixfpus (原始: guszpus is qixfpus)
  37. [actual] qixfpus → babdpus (原始: qixfpus is babdpus)
  38. [actual] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 12
[后处理] 加载LoG图，包含 12 个节点
  LoG节点 0: x is babdpus (规则: MP, 深度: 1)
  LoG节点 1: x is rolmpus (规则: MP, 深度: 2)
  LoG节点 2: rolmpus is babdpus (规则: MP, 深度: 2)
  LoG节点 3: x is sakkpus (规则: MP, 深度: 3)
  LoG节点 4: sakkpus is rolmpus (规则: CE, 深度: 3)
  LoG节点 5: rolmpus is guszpus (规则: CE, 深度: 3)
  LoG节点 6: guszpus is babdpus (规则: CE, 深度: 3)
  LoG节点 7: x is jarjpus (规则: CE, 深度: 4)
  LoG节点 8: jarjpus is sakkpus (规则: MP, 深度: 4)
  LoG节点 9: sakkpus is rolmpus and padxpus (规则: MP, 深度: 4)
  LoG节点 10: rolmpus is guszpus and jodzpus (规则: MP, 深度: 4)
  LoG节点 11: guszpus is babdpus and vavtpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 38
   - 初始条件数: 9
   - LoG图节点数: 12

📋 初始条件列表:
    1. sakkpus is kevrpus
    2. qixfpus is babdpus and vavtpus
    3. kevrpus is rolmpus and padxpus
    4. jarjpus is zejfpus
    5. rolmpus is vebzpus
    6. vebzpus is guszpus and jodzpus
    7. x is jarjpus and wazspus
    8. zejfpus is sakkpus
    9. guszpus is qixfpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 9 个前提节点

🔍 开始处理actual节点...

   节点 1: x is jarjpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is jarjpus
      ✅ 验证成功 + LoG匹配

   节点 2: x is wazspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is jarjpus and wazspus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is jarjpus and wazspus

   节点 3: x is jarjpus and wazspus
      ↻ 重复节点，计数: 2

   节点 4: sakkpus is kevrpus
      ↻ 重复节点，计数: 2

   节点 5: qixfpus is babdpus and vavtpus
      ↻ 重复节点，计数: 2

   节点 6: qixfpus is babdpus and vavtpus
      ↻ 重复节点，计数: 3

   节点 7: kevrpus is rolmpus and padxpus
      ↻ 重复节点，计数: 2

   节点 8: jarjpus is zejfpus
      ↻ 重复节点，计数: 2

   节点 9: rolmpus is vebzpus
      ↻ 重复节点，计数: 2

   节点 10: vebzpus is guszpus and jodzpus
      ↻ 重复节点，计数: 2

   节点 11: x is jarjpus and wazspus
      ↻ 重复节点，计数: 3

   节点 12: zejfpus is sakkpus
      ↻ 重复节点，计数: 2

   节点 13: guszpus is qixfpus
      ↻ 重复节点，计数: 2

   节点 14: x is jarjpus
      ↻ 重复节点，计数: 2

   节点 15: jarjpus is zejfpus
      ↻ 重复节点，计数: 3

   节点 16: zejfpus is sakkpus
      ↻ 重复节点，计数: 3

   节点 17: sakkpus is kevrpus
      ↻ 重复节点，计数: 3

   节点 18: kevrpus is rolmpus and padxpus
      ↻ 重复节点，计数: 3

   节点 19: rolmpus is vebzpus
      ↻ 重复节点，计数: 3

   节点 20: vebzpus is guszpus and jodzpus
      ↻ 重复节点，计数: 3

   节点 21: guszpus is qixfpus
      ↻ 重复节点，计数: 3

   节点 22: qixfpus is babdpus and vavtpus
      ↻ 重复节点，计数: 4

   节点 23: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: x is rolmpus (深度2)
[子树点亮]     └─ 点亮依赖节点: rolmpus is babdpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is sakkpus (深度3)
[子树点亮]     └─ 点亮依赖节点: sakkpus is rolmpus (深度3)
[子树点亮]     └─ 点亮依赖节点: rolmpus is guszpus (深度3)
[子树点亮]     └─ 点亮依赖节点: guszpus is babdpus (深度3)
[子树点亮]     └─ 点亮依赖节点: jarjpus is sakkpus (深度4)
[子树点亮]     └─ 点亮依赖节点: sakkpus is rolmpus and padxpus (深度4)
[子树点亮]     └─ 点亮依赖节点: rolmpus is guszpus and jodzpus (深度4)
[子树点亮]     └─ 点亮依赖节点: guszpus is babdpus and vavtpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 10 个节点
      ✅ 验证成功 + LoG匹配

   节点 24: x is babdpus
      ↻ 重复节点，计数: 2

   节点 25: x is jarjpus
      ↻ 重复节点，计数: 3

   节点 26: jarjpus is zejfpus
      ↻ 重复节点，计数: 4

   节点 27: zejfpus is sakkpus
      ↻ 重复节点，计数: 4

   节点 28: sakkpus is kevrpus
      ↻ 重复节点，计数: 4

   节点 29: kevrpus is rolmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: kevrpus is rolmpus and padxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: kevrpus is rolmpus and padxpus

   节点 30: rolmpus is vebzpus
      ↻ 重复节点，计数: 4

   节点 31: vebzpus is guszpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: vebzpus is guszpus and jodzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: vebzpus is guszpus and jodzpus

   节点 32: vebzpus is jodzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: vebzpus is guszpus and jodzpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: vebzpus is guszpus and jodzpus

   节点 33: guszpus is qixfpus
      ↻ 重复节点，计数: 4

   节点 34: qixfpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qixfpus is babdpus and vavtpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qixfpus is babdpus and vavtpus

   节点 35: x is babdpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 35
   - 新增节点: 7
   - 更新已存在节点: 28
   - 点亮的LoG节点: 12

🎯 推理质量统计:
   - 完美推理: 7 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 12节点, 9前提, 复杂度1-9

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 16
   - 前提节点: 9
   - 推理节点: 7
   - 幻觉节点: 0
   - 点亮LoG节点: 12

✅ 推理节点详情:
   🟢 x is jarjpus (出现3次, 质量:perfect)
   🟢 x is wazspus (出现1次, 质量:perfect)
   🟢 x is babdpus (出现3次, 质量:perfect)
   🟢 kevrpus is rolmpus (出现1次, 质量:perfect)
   🟢 vebzpus is guszpus (出现1次, 质量:perfect)
   🟢 vebzpus is jodzpus (出现1次, 质量:perfect)
   🟢 qixfpus is babdpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is jarjpus
   - x is sakkpus
   - sakkpus is rolmpus
   - jarjpus is sakkpus
   - x is babdpus
   - rolmpus is guszpus
   - x is rolmpus
   - sakkpus is rolmpus and padxpus
   - rolmpus is babdpus
   - guszpus is babdpus and vavtpus
   - rolmpus is guszpus and jodzpus
   - guszpus is babdpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus (第4层)
   节点Coverage: 12/12 = 100.00%
   前提条件Coverage: 9/9 = 100.00%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 4/4 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/7 = 0.00%
   可推导节点: 7/7
   Strict Error Rate: 0/7 = 0.00%
   严格有效节点: 7/7

   详细分析:
     完美推理: 7 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 44/50
================================================================================
记录索引: 43
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_43.json
✅ 使用缓存结果:
   - 句子数: 61
   - 提取的语句数: 69
   - 初始条件数: 4

=== Statement提取完成 ===
总句子数: 61
成功提取: 61
失败提取: 0
总statements数: 69

=== 开始清洗Statement格式 ===
原始statements数: 69
清洗后statements数: 39
过滤掉的statements数: 30
清洗后的statements:
  1. [actual] tucmpus is babqpus and kihrpus
  2. [actual] nenmpus is tucmpus
  3. [actual] lihppus is nenmpus and cavbpus and bonbpus
  4. [actual] x is lihppus and vifbpus
  5. [planning] x is babdpus or babqpus
  6. [actual] tucmpus is babqpus and kihrpus
  7. [actual] x is lihppus and vifbpus
  8. [actual] x is lihppus and vifbpus
  9. [actual] lihppus is nenmpus and cavbpus and bonbpus
  10. [actual] lihppus is nenmpus and cavbpus and bonbpus
  11. [actual] nenmpus is tucmpus
  12. [actual] nenmpus is tucmpus
  13. [actual] tucmpus is babqpus and kihrpus
  14. [actual] tucmpus is babqpus and kihrpus
  15. [actual] x is lihppus
  16. [actual] lihppus is nenmpus
  17. [actual] nenmpus is tucmpus
  18. [actual] tucmpus is babqpus
  19. [planning] x is babqpus
  20. [actual] tucmpus is babqpus
  21. [actual] nenmpus is tucmpus
  22. [actual] nenmpus is tucmpus
  23. [actual] lihppus is nenmpus
  24. [actual] lihppus is a subtype of nenmpus
  25. [actual] x is lihppus
  26. [actual] x is nenmpus
  27. [actual] x is tucmpus
  28. [actual] x is babqpus
  29. [actual] x is babqpus
  30. [planning] x is babdpus or babqpus
  31. [actual] x is babqpus
  32. [planning] x is babqpus
  33. [planning] x is babdpus or babqpus
  34. [actual] x is babqpus
  35. [planning] x is babdpus
  36. [planning] x is babqpus
  37. [actual] x is babdpus or babqpus
  38. [planning] x is babqpus
  39. [actual] x is babqpus

=== 开始标准化和解析节点 ===
清洗后statements数: 39
标准化后节点数: 38
过滤掉的无效实体数: 1
标准化后的节点:
  1. [actual] tucmpus → babqpus and kihrpus (原始: tucmpus is babqpus and kihrpus)
  2. [actual] nenmpus → tucmpus (原始: nenmpus is tucmpus)
  3. [actual] lihppus → nenmpus and cavbpus and bonbpus (原始: lihppus is nenmpus and cavbpus and bonbpus)
  4. [actual] x → lihppus and vifbpus (原始: x is lihppus and vifbpus)
  5. [planning] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  6. [actual] tucmpus → babqpus and kihrpus (原始: tucmpus is babqpus and kihrpus)
  7. [actual] x → lihppus and vifbpus (原始: x is lihppus and vifbpus)
  8. [actual] x → lihppus and vifbpus (原始: x is lihppus and vifbpus)
  9. [actual] lihppus → nenmpus and cavbpus and bonbpus (原始: lihppus is nenmpus and cavbpus and bonbpus)
  10. [actual] lihppus → nenmpus and cavbpus and bonbpus (原始: lihppus is nenmpus and cavbpus and bonbpus)
  11. [actual] nenmpus → tucmpus (原始: nenmpus is tucmpus)
  12. [actual] nenmpus → tucmpus (原始: nenmpus is tucmpus)
  13. [actual] tucmpus → babqpus and kihrpus (原始: tucmpus is babqpus and kihrpus)
  14. [actual] tucmpus → babqpus and kihrpus (原始: tucmpus is babqpus and kihrpus)
  15. [actual] x → lihppus (原始: x is lihppus)
  16. [actual] lihppus → nenmpus (原始: lihppus is nenmpus)
  17. [actual] nenmpus → tucmpus (原始: nenmpus is tucmpus)
  18. [actual] tucmpus → babqpus (原始: tucmpus is babqpus)
  19. [planning] x → babqpus (原始: x is babqpus)
  20. [actual] tucmpus → babqpus (原始: tucmpus is babqpus)
  21. [actual] nenmpus → tucmpus (原始: nenmpus is tucmpus)
  22. [actual] nenmpus → tucmpus (原始: nenmpus is tucmpus)
  23. [actual] lihppus → nenmpus (原始: lihppus is nenmpus)
  24. [actual] x → lihppus (原始: x is lihppus)
  25. [actual] x → nenmpus (原始: x is nenmpus)
  26. [actual] x → tucmpus (原始: x is tucmpus)
  27. [actual] x → babqpus (原始: x is babqpus)
  28. [actual] x → babqpus (原始: x is babqpus)
  29. [planning] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  30. [actual] x → babqpus (原始: x is babqpus)
  31. [planning] x → babqpus (原始: x is babqpus)
  32. [planning] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  33. [actual] x → babqpus (原始: x is babqpus)
  34. [planning] x → babdpus (原始: x is babdpus)
  35. [planning] x → babqpus (原始: x is babqpus)
  36. [actual] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  37. [planning] x → babqpus (原始: x is babqpus)
  38. [actual] x → babqpus (原始: x is babqpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 8
[后处理] 加载LoG图，包含 8 个节点
  LoG节点 0: x is babdpus or babqpus (规则: MP, 深度: 1)
  LoG节点 1: x is nenmpus (规则: CE, 深度: 2)
  LoG节点 2: nenmpus is babdpus or babqpus (规则: DI, 深度: 2)
  LoG节点 3: x is nenmpus and cavbpus (规则: MP, 深度: 3)
  LoG节点 4: nenmpus is babqpus (规则: CE, 深度: 3)
  LoG节点 5: x is lihppus (规则: CE, 深度: 4)
  LoG节点 6: lihppus is nenmpus and cavbpus (规则: CE, 深度: 4)
  LoG节点 7: nenmpus is babqpus and kihrpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 38
   - 初始条件数: 4
   - LoG图节点数: 8

📋 初始条件列表:
    1. tucmpus is babqpus and kihrpus
    2. nenmpus is tucmpus
    3. lihppus is nenmpus and cavbpus and bonbpus
    4. x is lihppus and vifbpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 4 个前提节点

🔍 开始处理actual节点...

   节点 1: tucmpus is babqpus and kihrpus
      ↻ 重复节点，计数: 2

   节点 2: nenmpus is tucmpus
      ↻ 重复节点，计数: 2

   节点 3: lihppus is nenmpus and cavbpus and bonbpus
      ↻ 重复节点，计数: 2

   节点 4: x is lihppus and vifbpus
      ↻ 重复节点，计数: 2

   节点 5: tucmpus is babqpus and kihrpus
      ↻ 重复节点，计数: 3

   节点 6: x is lihppus and vifbpus
      ↻ 重复节点，计数: 3

   节点 7: x is lihppus and vifbpus
      ↻ 重复节点，计数: 4

   节点 8: lihppus is nenmpus and cavbpus and bonbpus
      ↻ 重复节点，计数: 3

   节点 9: lihppus is nenmpus and cavbpus and bonbpus
      ↻ 重复节点，计数: 4

   节点 10: nenmpus is tucmpus
      ↻ 重复节点，计数: 3

   节点 11: nenmpus is tucmpus
      ↻ 重复节点，计数: 4

   节点 12: tucmpus is babqpus and kihrpus
      ↻ 重复节点，计数: 4

   节点 13: tucmpus is babqpus and kihrpus
      ↻ 重复节点，计数: 5

   节点 14: x is lihppus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is lihppus
      ✅ 验证成功 + LoG匹配

   节点 15: lihppus is nenmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: lihppus is nenmpus and cavbpus and bonbpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: lihppus is nenmpus and cavbpus and bonbpus
  ✓ 点亮LoG节点: lihppus is nenmpus and cavbpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 16: nenmpus is tucmpus
      ↻ 重复节点，计数: 5

   节点 17: tucmpus is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: tucmpus is babqpus and kihrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: tucmpus is babqpus and kihrpus

   节点 18: tucmpus is babqpus
      ↻ 重复节点，计数: 2

   节点 19: nenmpus is tucmpus
      ↻ 重复节点，计数: 6

   节点 20: nenmpus is tucmpus
      ↻ 重复节点，计数: 7

   节点 21: lihppus is nenmpus
      ↻ 重复节点，计数: 2

   节点 22: x is lihppus
      ↻ 重复节点，计数: 2

   节点 23: x is nenmpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is nenmpus
[子树点亮]     └─ 点亮依赖节点: x is nenmpus and cavbpus (深度3)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 24: x is tucmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is lihppus → lihppus is tucmpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is lihppus
  - 前提: lihppus is nenmpus
  - 前提: nenmpus is tucmpus

   节点 25: x is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is lihppus → lihppus is babqpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is lihppus
  - 前提: lihppus is nenmpus
  - 前提: nenmpus is tucmpus
  - 前提: tucmpus is babqpus
  ✓ 点亮LoG节点: x is babdpus or babqpus
[子树点亮]     └─ 点亮依赖节点: nenmpus is babdpus or babqpus (深度2)
[子树点亮]     └─ 点亮依赖节点: nenmpus is babqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: nenmpus is babqpus and kihrpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 26: x is babqpus
      ↻ 重复节点，计数: 2

   节点 27: x is babqpus
      ↻ 重复节点，计数: 3

   节点 28: x is babqpus
      ↻ 重复节点，计数: 4

   节点 29: x is babdpus or babqpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 30: x is babqpus
      ↻ 重复节点，计数: 5

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 30
   - 新增节点: 7
   - 更新已存在节点: 23
   - 点亮的LoG节点: 8

🎯 推理质量统计:
   - 完美推理: 7 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 8节点, 4前提, 复杂度1-4

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 11
   - 前提节点: 4
   - 推理节点: 7
   - 幻觉节点: 0
   - 点亮LoG节点: 8

✅ 推理节点详情:
   🟢 x is lihppus (出现2次, 质量:perfect)
   🟢 lihppus is nenmpus (出现2次, 质量:perfect)
   🟢 tucmpus is babqpus (出现2次, 质量:perfect)
   🟢 x is nenmpus (出现1次, 质量:perfect)
   🟢 x is tucmpus (出现1次, 质量:perfect)
   🟢 x is babqpus (出现5次, 质量:perfect)
   🟢 x is babdpus or babqpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - nenmpus is babqpus
   - nenmpus is babdpus or babqpus
   - lihppus is nenmpus and cavbpus
   - x is lihppus
   - x is babdpus or babqpus
   - x is nenmpus and cavbpus
   - nenmpus is babqpus and kihrpus
   - x is nenmpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus or babqpus (第4层)
   节点Coverage: 8/8 = 100.00%
   前提条件Coverage: 4/4 = 100.00%
   各推理层点亮比例:
     第1层: 3/3 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/7 = 0.00%
   可推导节点: 7/7
   Strict Error Rate: 0/7 = 0.00%
   严格有效节点: 7/7

   详细分析:
     完美推理: 7 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 45/50
================================================================================
记录索引: 44
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_44.json
✅ 使用缓存结果:
   - 句子数: 128
   - 提取的语句数: 205
   - 初始条件数: 8

=== Statement提取完成 ===
总句子数: 128
成功提取: 128
失败提取: 0
总statements数: 205

=== 开始清洗Statement格式 ===
原始statements数: 205
清洗后statements数: 130
过滤掉的statements数: 75
清洗后的statements:
  1. [actual] xayxpus is topgpus
  2. [actual] zicbpus is megzpus
  3. [actual] megzpus is kiympus and vagrpus
  4. [planning] megzpus is kiympus and vagrpus
  5. [planning] megzpus is kiympus and vagrpus
  6. [actual] megzpus is kiympus and vagrpus
  7. [actual] xayxpus is topgpus
  8. [actual] zicbpus is megzpus
  9. [actual] megzpus is kiympus and vagrpus
  10. [actual] megzpus is both a kiympus and a vagrpus
  11. [planning] megzpus is kiympus and vagrpus
  12. [actual] topgpus is babdpus and babqpus and babxpus
  13. [planning] x is babdpus and babqpus and babxpus
  14. [actual] x is qulgpus
  15. [actual] x is qulgpus
  16. [actual] qulgpus is zicbpus and waswpus
  17. [actual] qulgpus is zicbpus and waswpus
  18. [actual] kiympus is xayxpus
  19. [planning] kiympus is xayxpus
  20. [planning] kiympus is xayxpus
  21. [actual] megzpus is kiympus
  22. [actual] x is babgpus and relmpus
  23. [planning] x is babgpus
  24. [actual] xayxpus is topgpus
  25. [actual] zicbpus is megzpus
  26. [actual] megzpus is kiympus and vagrpus
  27. [actual] topgpus is babdpus and babqpus and babxpus
  28. [actual] x is qulgpus
  29. [actual] qulgpus is zicbpus and waswpus
  30. [actual] kiympus is xayxpus
  31. [actual] topgpus is dacypus
  32. [planning] x is babdpus and babqpus and babxpus
  33. [actual] x is babdpus
  34. [actual] x is babqpus
  35. [actual] x is babxpus
  36. [actual] x is qulgpus
  37. [actual] qulgpus is zicbpus and waswpus
  38. [actual] zicbpus is megzpus
  39. [actual] megzpus is kiympus
  40. [actual] megzpus is vagrpus
  41. [actual] kiympus is xayxpus
  42. [actual] xayxpus is topgpus
  43. [actual] topgpus is babdpus and babqpus and babxpus
  44. [actual] topgpus is babdpus
  45. [actual] topgpus is babqpus
  46. [actual] topgpus is babxpus
  47. [planning] x is babdpus
  48. [actual] x is qulgpus
  49. [actual] qulgpus is zicbpus
  50. [actual] x is zicbpus
  51. [planning] x is zicbpus?
  52. [actual] qulgpus is zicbpus
  53. [actual] qulgpus is a member of zicbpus
  54. [planning] x is qulgpus
  55. [planning] qulgpus is zicbpus
  56. [planning] x is zicbpus
  57. [actual] zicbpus is megzpus
  58. [actual] zicbpus is an instance of megzpus
  59. [actual] megzpus is kiympus
  60. [actual] kiympus is xayxpus
  61. [actual] xayxpus is topgpus
  62. [actual] x is qulgpus
  63. [actual] qulgpus is zicbpus
  64. [actual] zicbpus is megzpus
  65. [actual] megzpus is kiympus
  66. [actual] kiympus is xayxpus
  67. [actual] xayxpus is topgpus
  68. [actual] topgpus is babdpus
  69. [planning] x is babdpus
  70. [actual] x is A
  71. [planning] x is C
  72. [actual] topgpus is babdpus and babqpus and babxpus
  73. [actual] topgpus is an element of babdpus
  74. [planning] topgpus is babdpus
  75. [planning] topgpus is babdpus
  76. [actual] babdpus is a category
  77. [actual] topgpus is a member of babdpus
  78. [actual] x is qulgpus
  79. [planning] x is a member of babdpus
  80. [planning] x is the set babdpus
  81. [actual] x is qulgpus
  82. [actual] qulgpus is zicbpus
  83. [planning] zicbpus is a set
  84. [planning] qulgpus is an element of zicbpus
  85. [actual] xayxpus is topgpus
  86. [actual] zicbpus is megzpus
  87. [actual] megzpus is kiympus and vagrpus
  88. [planning] megzpus is kiympus and vagrpus
  89. [actual] megzpus is a subset of kiympus and vagrpus
  90. [planning] kiympus is broader category
  91. [planning] vagrpus is broader category
  92. [actual] topgpus is babdpus and babqpus and babxpus
  93. [planning] topgpus is babdpus
  94. [planning] topgpus is babqpus
  95. [planning] topgpus is babxpus
  96. [actual] x is qulgpus
  97. [actual] x is an instance of qulgpus
  98. [planning] qulgpus is a class
  99. [planning] x is an element of qulgpus
  100. [actual] qulgpus is zicbpus and waswpus
  101. [planning] qulgpus is zicbpus and waswpus
  102. [actual] qulgpus is zicbpus
  103. [actual] qulgpus is waswpus
  104. [actual] kiympus is xayxpus
  105. [planning] kiympus is xayxpus
  106. [actual] topgpus is dacypus
  107. [planning] x is babdpus and babqpus and babxpus
  108. [planning] x is topgpus
  109. [planning] x is babdpus
  110. [planning] x is topgpus
  111. [planning] x is an instance of topgpus
  112. [actual] x is qulgpus
  113. [actual] qulgpus is zicbpus
  114. [actual] zicbpus is megzpus
  115. [actual] megzpus is kiympus
  116. [actual] kiympus is xayxpus
  117. [actual] xayxpus is topgpus
  118. [actual] qulgpus is topgpus
  119. [actual] x is qulgpus
  120. [actual] qulgpus is topgpus
  121. [actual] x is topgpus
  122. [planning] x is babdpus
  123. [planning] x is babqpus
  124. [planning] x is babxpus
  125. [actual] x is babdpus and babqpus and babxpus
  126. [actual] qulgpus is waswpus
  127. [actual] megzpus is vagrpus
  128. [actual] topgpus is dacypus
  129. [actual] x is topgpus
  130. [actual] topgpus is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 130
标准化后节点数: 110
过滤掉的无效实体数: 20
标准化后的节点:
  1. [actual] xayxpus → topgpus (原始: xayxpus is topgpus)
  2. [actual] zicbpus → megzpus (原始: zicbpus is megzpus)
  3. [actual] megzpus → kiympus and vagrpus (原始: megzpus is kiympus and vagrpus)
  4. [planning] megzpus → kiympus and vagrpus (原始: megzpus is kiympus and vagrpus)
  5. [planning] megzpus → kiympus and vagrpus (原始: megzpus is kiympus and vagrpus)
  6. [actual] megzpus → kiympus and vagrpus (原始: megzpus is kiympus and vagrpus)
  7. [actual] xayxpus → topgpus (原始: xayxpus is topgpus)
  8. [actual] zicbpus → megzpus (原始: zicbpus is megzpus)
  9. [actual] megzpus → kiympus and vagrpus (原始: megzpus is kiympus and vagrpus)
  10. [planning] megzpus → kiympus and vagrpus (原始: megzpus is kiympus and vagrpus)
  11. [actual] topgpus → babdpus and babqpus and babxpus (原始: topgpus is babdpus and babqpus and babxpus)
  12. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  13. [actual] x → qulgpus (原始: x is qulgpus)
  14. [actual] x → qulgpus (原始: x is qulgpus)
  15. [actual] qulgpus → zicbpus and waswpus (原始: qulgpus is zicbpus and waswpus)
  16. [actual] qulgpus → zicbpus and waswpus (原始: qulgpus is zicbpus and waswpus)
  17. [actual] kiympus → xayxpus (原始: kiympus is xayxpus)
  18. [planning] kiympus → xayxpus (原始: kiympus is xayxpus)
  19. [planning] kiympus → xayxpus (原始: kiympus is xayxpus)
  20. [actual] megzpus → kiympus (原始: megzpus is kiympus)
  21. [actual] x → babgpus and relmpus (原始: x is babgpus and relmpus)
  22. [planning] x → babgpus (原始: x is babgpus)
  23. [actual] xayxpus → topgpus (原始: xayxpus is topgpus)
  24. [actual] zicbpus → megzpus (原始: zicbpus is megzpus)
  25. [actual] megzpus → kiympus and vagrpus (原始: megzpus is kiympus and vagrpus)
  26. [actual] topgpus → babdpus and babqpus and babxpus (原始: topgpus is babdpus and babqpus and babxpus)
  27. [actual] x → qulgpus (原始: x is qulgpus)
  28. [actual] qulgpus → zicbpus and waswpus (原始: qulgpus is zicbpus and waswpus)
  29. [actual] kiympus → xayxpus (原始: kiympus is xayxpus)
  30. [actual] topgpus → dacypus (原始: topgpus is dacypus)
  31. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  32. [actual] x → babdpus (原始: x is babdpus)
  33. [actual] x → babqpus (原始: x is babqpus)
  34. [actual] x → babxpus (原始: x is babxpus)
  35. [actual] x → qulgpus (原始: x is qulgpus)
  36. [actual] qulgpus → zicbpus and waswpus (原始: qulgpus is zicbpus and waswpus)
  37. [actual] zicbpus → megzpus (原始: zicbpus is megzpus)
  38. [actual] megzpus → kiympus (原始: megzpus is kiympus)
  39. [actual] megzpus → vagrpus (原始: megzpus is vagrpus)
  40. [actual] kiympus → xayxpus (原始: kiympus is xayxpus)
  41. [actual] xayxpus → topgpus (原始: xayxpus is topgpus)
  42. [actual] topgpus → babdpus and babqpus and babxpus (原始: topgpus is babdpus and babqpus and babxpus)
  43. [actual] topgpus → babdpus (原始: topgpus is babdpus)
  44. [actual] topgpus → babqpus (原始: topgpus is babqpus)
  45. [actual] topgpus → babxpus (原始: topgpus is babxpus)
  46. [planning] x → babdpus (原始: x is babdpus)
  47. [actual] x → qulgpus (原始: x is qulgpus)
  48. [actual] qulgpus → zicbpus (原始: qulgpus is zicbpus)
  49. [actual] x → zicbpus (原始: x is zicbpus)
  50. [actual] qulgpus → zicbpus (原始: qulgpus is zicbpus)
  51. [planning] x → qulgpus (原始: x is qulgpus)
  52. [planning] qulgpus → zicbpus (原始: qulgpus is zicbpus)
  53. [planning] x → zicbpus (原始: x is zicbpus)
  54. [actual] zicbpus → megzpus (原始: zicbpus is megzpus)
  55. [actual] megzpus → kiympus (原始: megzpus is kiympus)
  56. [actual] kiympus → xayxpus (原始: kiympus is xayxpus)
  57. [actual] xayxpus → topgpus (原始: xayxpus is topgpus)
  58. [actual] x → qulgpus (原始: x is qulgpus)
  59. [actual] qulgpus → zicbpus (原始: qulgpus is zicbpus)
  60. [actual] zicbpus → megzpus (原始: zicbpus is megzpus)
  61. [actual] megzpus → kiympus (原始: megzpus is kiympus)
  62. [actual] kiympus → xayxpus (原始: kiympus is xayxpus)
  63. [actual] xayxpus → topgpus (原始: xayxpus is topgpus)
  64. [actual] topgpus → babdpus (原始: topgpus is babdpus)
  65. [planning] x → babdpus (原始: x is babdpus)
  66. [actual] topgpus → babdpus and babqpus and babxpus (原始: topgpus is babdpus and babqpus and babxpus)
  67. [planning] topgpus → babdpus (原始: topgpus is babdpus)
  68. [planning] topgpus → babdpus (原始: topgpus is babdpus)
  69. [actual] x → qulgpus (原始: x is qulgpus)
  70. [actual] x → qulgpus (原始: x is qulgpus)
  71. [actual] qulgpus → zicbpus (原始: qulgpus is zicbpus)
  72. [actual] xayxpus → topgpus (原始: xayxpus is topgpus)
  73. [actual] zicbpus → megzpus (原始: zicbpus is megzpus)
  74. [actual] megzpus → kiympus and vagrpus (原始: megzpus is kiympus and vagrpus)
  75. [planning] megzpus → kiympus and vagrpus (原始: megzpus is kiympus and vagrpus)
  76. [actual] topgpus → babdpus and babqpus and babxpus (原始: topgpus is babdpus and babqpus and babxpus)
  77. [planning] topgpus → babdpus (原始: topgpus is babdpus)
  78. [planning] topgpus → babqpus (原始: topgpus is babqpus)
  79. [planning] topgpus → babxpus (原始: topgpus is babxpus)
  80. [actual] x → qulgpus (原始: x is qulgpus)
  81. [actual] qulgpus → zicbpus and waswpus (原始: qulgpus is zicbpus and waswpus)
  82. [planning] qulgpus → zicbpus and waswpus (原始: qulgpus is zicbpus and waswpus)
  83. [actual] qulgpus → zicbpus (原始: qulgpus is zicbpus)
  84. [actual] qulgpus → waswpus (原始: qulgpus is waswpus)
  85. [actual] kiympus → xayxpus (原始: kiympus is xayxpus)
  86. [planning] kiympus → xayxpus (原始: kiympus is xayxpus)
  87. [actual] topgpus → dacypus (原始: topgpus is dacypus)
  88. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  89. [planning] x → topgpus (原始: x is topgpus)
  90. [planning] x → babdpus (原始: x is babdpus)
  91. [planning] x → topgpus (原始: x is topgpus)
  92. [actual] x → qulgpus (原始: x is qulgpus)
  93. [actual] qulgpus → zicbpus (原始: qulgpus is zicbpus)
  94. [actual] zicbpus → megzpus (原始: zicbpus is megzpus)
  95. [actual] megzpus → kiympus (原始: megzpus is kiympus)
  96. [actual] kiympus → xayxpus (原始: kiympus is xayxpus)
  97. [actual] xayxpus → topgpus (原始: xayxpus is topgpus)
  98. [actual] qulgpus → topgpus (原始: qulgpus is topgpus)
  99. [actual] x → qulgpus (原始: x is qulgpus)
  100. [actual] qulgpus → topgpus (原始: qulgpus is topgpus)
  101. [actual] x → topgpus (原始: x is topgpus)
  102. [planning] x → babdpus (原始: x is babdpus)
  103. [planning] x → babqpus (原始: x is babqpus)
  104. [planning] x → babxpus (原始: x is babxpus)
  105. [actual] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  106. [actual] qulgpus → waswpus (原始: qulgpus is waswpus)
  107. [actual] megzpus → vagrpus (原始: megzpus is vagrpus)
  108. [actual] topgpus → dacypus (原始: topgpus is dacypus)
  109. [actual] x → topgpus (原始: x is topgpus)
  110. [actual] topgpus → babdpus (原始: topgpus is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 10
[后处理] 加载LoG图，包含 10 个节点
  LoG节点 0: x is babdpus and babqpus and babxpus (规则: MP, 深度: 1)
  LoG节点 1: x is kiympus (规则: MP, 深度: 2)
  LoG节点 2: kiympus is babdpus and babqpus and babxpus (规则: CE, 深度: 2)
  LoG节点 3: x is zicbpus (规则: CE, 深度: 3)
  LoG节点 4: zicbpus is kiympus (规则: CE, 深度: 3)
  LoG节点 5: kiympus is babdpus and babqpus and babxpus and dacypus (规则: MP, 深度: 3)
  LoG节点 6: x is zicbpus and waswpus (规则: MP, 深度: 4)
  LoG节点 7: zicbpus is kiympus and vagrpus (规则: MP, 深度: 4)
  LoG节点 8: kiympus is topgpus (规则: MP, 深度: 4)
  LoG节点 9: topgpus is babdpus and babqpus and babxpus and dacypus (规则: CI, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 110
   - 初始条件数: 8
   - LoG图节点数: 10

📋 初始条件列表:
    1. xayxpus is topgpus
    2. zicbpus is megzpus
    3. megzpus is kiympus and vagrpus
    4. topgpus is babdpus and babqpus and babxpus
    5. x is qulgpus
    6. qulgpus is zicbpus and waswpus
    7. kiympus is xayxpus
    8. topgpus is dacypus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 8 个前提节点

🔍 开始处理actual节点...

   节点 1: xayxpus is topgpus
      ↻ 重复节点，计数: 2

   节点 2: zicbpus is megzpus
      ↻ 重复节点，计数: 2

   节点 3: megzpus is kiympus and vagrpus
      ↻ 重复节点，计数: 2

   节点 4: megzpus is kiympus and vagrpus
      ↻ 重复节点，计数: 3

   节点 5: xayxpus is topgpus
      ↻ 重复节点，计数: 3

   节点 6: zicbpus is megzpus
      ↻ 重复节点，计数: 3

   节点 7: megzpus is kiympus and vagrpus
      ↻ 重复节点，计数: 4

   节点 8: topgpus is babdpus and babqpus and babxpus
      ↻ 重复节点，计数: 2

   节点 9: x is qulgpus
      ↻ 重复节点，计数: 2

   节点 10: x is qulgpus
      ↻ 重复节点，计数: 3

   节点 11: qulgpus is zicbpus and waswpus
      ↻ 重复节点，计数: 2

   节点 12: qulgpus is zicbpus and waswpus
      ↻ 重复节点，计数: 3

   节点 13: kiympus is xayxpus
      ↻ 重复节点，计数: 2

   节点 14: megzpus is kiympus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: megzpus is kiympus and vagrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: megzpus is kiympus and vagrpus

   节点 15: x is babgpus and relmpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 16: xayxpus is topgpus
      ↻ 重复节点，计数: 4

   节点 17: zicbpus is megzpus
      ↻ 重复节点，计数: 4

   节点 18: megzpus is kiympus and vagrpus
      ↻ 重复节点，计数: 5

   节点 19: topgpus is babdpus and babqpus and babxpus
      ↻ 重复节点，计数: 3

   节点 20: x is qulgpus
      ↻ 重复节点，计数: 4

   节点 21: qulgpus is zicbpus and waswpus
      ↻ 重复节点，计数: 4

   节点 22: kiympus is xayxpus
      ↻ 重复节点，计数: 3

   节点 23: topgpus is dacypus
      ↻ 重复节点，计数: 2

   节点 24: x is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qulgpus → qulgpus is babdpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is qulgpus
  - 前提: qulgpus is zicbpus and waswpus
  - 前提: zicbpus is megzpus
  - 前提: megzpus is kiympus
  - 前提: kiympus is xayxpus
  - 前提: xayxpus is topgpus
  - 前提: topgpus is babdpus and babqpus and babxpus
  ✓ 点亮LoG节点: x is babdpus and babqpus and babxpus
[子树点亮]     └─ 点亮依赖节点: x is kiympus (深度2)
[子树点亮]     └─ 点亮依赖节点: kiympus is babdpus and babqpus and babxpus (深度2)
[子树点亮]     └─ 点亮依赖节点: x is zicbpus (深度3)
[子树点亮]     └─ 点亮依赖节点: zicbpus is kiympus (深度3)
[子树点亮]     └─ 点亮依赖节点: kiympus is babdpus and babqpus and babxpus and dacypus (深度3)
[子树点亮]     └─ 点亮依赖节点: x is zicbpus and waswpus (深度4)
[子树点亮]     └─ 点亮依赖节点: zicbpus is kiympus and vagrpus (深度4)
[子树点亮]     └─ 点亮依赖节点: kiympus is topgpus (深度4)
[子树点亮]     └─ 点亮依赖节点: topgpus is babdpus and babqpus and babxpus and dacypus (深度4)
[后处理]   └─ 自动点亮依赖子树: 9 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 25: x is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qulgpus → qulgpus is babqpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is qulgpus
  - 前提: qulgpus is zicbpus and waswpus
  - 前提: zicbpus is megzpus
  - 前提: megzpus is kiympus
  - 前提: kiympus is xayxpus
  - 前提: xayxpus is topgpus
  - 前提: topgpus is babdpus and babqpus and babxpus

   节点 26: x is babxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qulgpus → qulgpus is babxpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is qulgpus
  - 前提: qulgpus is zicbpus and waswpus
  - 前提: zicbpus is megzpus
  - 前提: megzpus is kiympus
  - 前提: kiympus is xayxpus
  - 前提: xayxpus is topgpus
  - 前提: topgpus is babdpus and babqpus and babxpus

   节点 27: x is qulgpus
      ↻ 重复节点，计数: 5

   节点 28: qulgpus is zicbpus and waswpus
      ↻ 重复节点，计数: 5

   节点 29: zicbpus is megzpus
      ↻ 重复节点，计数: 5

   节点 30: megzpus is kiympus
      ↻ 重复节点，计数: 2

   节点 31: megzpus is vagrpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: megzpus is kiympus and vagrpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: megzpus is kiympus and vagrpus

   节点 32: kiympus is xayxpus
      ↻ 重复节点，计数: 4

   节点 33: xayxpus is topgpus
      ↻ 重复节点，计数: 5

   节点 34: topgpus is babdpus and babqpus and babxpus
      ↻ 重复节点，计数: 4

   节点 35: topgpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: topgpus is babdpus and babqpus and babxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: topgpus is babdpus and babqpus and babxpus

   节点 36: topgpus is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: topgpus is babdpus and babqpus and babxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: topgpus is babdpus and babqpus and babxpus

   节点 37: topgpus is babxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: topgpus is babdpus and babqpus and babxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: topgpus is babdpus and babqpus and babxpus

   节点 38: x is qulgpus
      ↻ 重复节点，计数: 6

   节点 39: qulgpus is zicbpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qulgpus is zicbpus and waswpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qulgpus is zicbpus and waswpus

   节点 40: x is zicbpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 41: qulgpus is zicbpus
      ↻ 重复节点，计数: 2

   节点 42: zicbpus is megzpus
      ↻ 重复节点，计数: 6

   节点 43: megzpus is kiympus
      ↻ 重复节点，计数: 3

   节点 44: kiympus is xayxpus
      ↻ 重复节点，计数: 5

   节点 45: xayxpus is topgpus
      ↻ 重复节点，计数: 6

   节点 46: x is qulgpus
      ↻ 重复节点，计数: 7

   节点 47: qulgpus is zicbpus
      ↻ 重复节点，计数: 3

   节点 48: zicbpus is megzpus
      ↻ 重复节点，计数: 7

   节点 49: megzpus is kiympus
      ↻ 重复节点，计数: 4

   节点 50: kiympus is xayxpus
      ↻ 重复节点，计数: 6

   节点 51: xayxpus is topgpus
      ↻ 重复节点，计数: 7

   节点 52: topgpus is babdpus
      ↻ 重复节点，计数: 2

   节点 53: topgpus is babdpus and babqpus and babxpus
      ↻ 重复节点，计数: 5

   节点 54: x is qulgpus
      ↻ 重复节点，计数: 8

   节点 55: x is qulgpus
      ↻ 重复节点，计数: 9

   节点 56: qulgpus is zicbpus
      ↻ 重复节点，计数: 4

   节点 57: xayxpus is topgpus
      ↻ 重复节点，计数: 8

   节点 58: zicbpus is megzpus
      ↻ 重复节点，计数: 8

   节点 59: megzpus is kiympus and vagrpus
      ↻ 重复节点，计数: 6

   节点 60: topgpus is babdpus and babqpus and babxpus
      ↻ 重复节点，计数: 6

   节点 61: x is qulgpus
      ↻ 重复节点，计数: 10

   节点 62: qulgpus is zicbpus and waswpus
      ↻ 重复节点，计数: 6

   节点 63: qulgpus is zicbpus
      ↻ 重复节点，计数: 5

   节点 64: qulgpus is waswpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: qulgpus is zicbpus and waswpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: qulgpus is zicbpus and waswpus

   节点 65: kiympus is xayxpus
      ↻ 重复节点，计数: 7

   节点 66: topgpus is dacypus
      ↻ 重复节点，计数: 3

   节点 67: x is qulgpus
      ↻ 重复节点，计数: 11

   节点 68: qulgpus is zicbpus
      ↻ 重复节点，计数: 6

   节点 69: zicbpus is megzpus
      ↻ 重复节点，计数: 9

   节点 70: megzpus is kiympus
      ↻ 重复节点，计数: 5

   节点 71: kiympus is xayxpus
      ↻ 重复节点，计数: 8

   节点 72: xayxpus is topgpus
      ↻ 重复节点，计数: 9

   节点 73: qulgpus is topgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: qulgpus is zicbpus → zicbpus is topgpus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: qulgpus is zicbpus
  - 前提: zicbpus is megzpus
  - 前提: megzpus is kiympus
  - 前提: kiympus is xayxpus
  - 前提: xayxpus is topgpus

   节点 74: x is qulgpus
      ↻ 重复节点，计数: 12

   节点 75: qulgpus is topgpus
      ↻ 重复节点，计数: 2

   节点 76: x is topgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is qulgpus → qulgpus is topgpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is qulgpus
  - 前提: qulgpus is topgpus

   节点 77: x is babdpus and babqpus and babxpus
      🔍 验证新节点...
      ✅ 验证成功 + LoG匹配

   节点 78: qulgpus is waswpus
      ↻ 重复节点，计数: 2

   节点 79: megzpus is vagrpus
      ↻ 重复节点，计数: 2

   节点 80: topgpus is dacypus
      ↻ 重复节点，计数: 4

   节点 81: x is topgpus
      ↻ 重复节点，计数: 2

   节点 82: topgpus is babdpus
      ↻ 重复节点，计数: 3

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 82
   - 新增节点: 15
   - 更新已存在节点: 67
   - 点亮的LoG节点: 10

🎯 推理质量统计:
   - 完美推理: 9 (节点正确 + 路径正确)
   - 部分推理: 6 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 10节点, 8前提, 复杂度1-8

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 23
   - 前提节点: 8
   - 推理节点: 14
   - 幻觉节点: 1
   - 点亮LoG节点: 10

❌ 幻觉节点详情:
   - x is babgpus and relmpus (出现1次)

✅ 推理节点详情:
   🟢 megzpus is kiympus (出现5次, 质量:perfect)
   🟡 x is babdpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus and relmpus']
   🟡 x is babqpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus and relmpus']
   🟡 x is babxpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus and relmpus']
   🟢 megzpus is vagrpus (出现2次, 质量:perfect)
   🟢 topgpus is babdpus (出现3次, 质量:perfect)
   🟢 topgpus is babqpus (出现1次, 质量:perfect)
   🟢 topgpus is babxpus (出现1次, 质量:perfect)
   🟢 qulgpus is zicbpus (出现6次, 质量:perfect)
   🟡 x is zicbpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus and relmpus']
   🟢 qulgpus is waswpus (出现2次, 质量:perfect)
   🟢 qulgpus is topgpus (出现2次, 质量:perfect)
   🟡 x is topgpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus and relmpus']
   🟡 x is babdpus and babqpus and babxpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is babgpus and relmpus']

🔥 点亮的LoG节点:
   - kiympus is babdpus and babqpus and babxpus and dacypus
   - zicbpus is kiympus and vagrpus
   - x is zicbpus and waswpus
   - kiympus is topgpus
   - kiympus is babdpus and babqpus and babxpus
   - x is kiympus
   - x is zicbpus
   - topgpus is babdpus and babqpus and babxpus and dacypus
   - x is babdpus and babqpus and babxpus
   - zicbpus is kiympus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus and babqpus and babxpus (第4层)
   节点Coverage: 10/10 = 100.00%
   前提条件Coverage: 8/8 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 1/15 = 6.67%
   可推导节点: 14/15
   Strict Error Rate: 7/15 = 46.67%
   严格有效节点: 8/15

   详细分析:
     完美推理: 9 (60.00%)
     部分推理: 6 (40.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 46/50
================================================================================
记录索引: 45
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_45.json
✅ 使用缓存结果:
   - 句子数: 36
   - 提取的语句数: 45
   - 初始条件数: 4

=== Statement提取完成 ===
总句子数: 36
成功提取: 36
失败提取: 0
总statements数: 45

=== 开始清洗Statement格式 ===
原始statements数: 45
清洗后statements数: 36
过滤掉的statements数: 9
清洗后的statements:
  1. [actual] x is relmpus
  2. [actual] relmpus is babgpus
  3. [actual] x is babgpus
  4. [planning] x is babgpus
  5. [actual] jehlpus is fuywpus and loxppus
  6. [actual] jehlpus is fuywpus and loxppus
  7. [actual] x is jehlpus and sazqpus
  8. [actual] x is jehlpus
  9. [actual] x is sazqpus
  10. [actual] x is jehlpus
  11. [actual] x is sazqpus
  12. [actual] rinzpus is babdpus and pawypus and deyvpus
  13. [actual] rinzpus is babdpus
  14. [actual] rinzpus is pawypus
  15. [actual] rinzpus is deyvpus
  16. [actual] fuywpus is rinzpus and tecmpus
  17. [actual] fuywpus is rinzpus
  18. [actual] fuywpus is tecmpus
  19. [planning] x is babdpus
  20. [planning] x is babdpus
  21. [planning] x is babdpus
  22. [actual] x is jehlpus
  23. [actual] x is jehlpus
  24. [actual] jehlpus is fuywpus and loxppus
  25. [actual] fuywpus is rinzpus and tecmpus
  26. [actual] x is rinzpus
  27. [actual] rinzpus is babdpus and pawypus and deyvpus
  28. [actual] rinzpus is babdpus
  29. [actual] x is rinzpus
  30. [actual] x is babdpus
  31. [actual] x is babdpus
  32. [actual] x is babdpus
  33. [actual] rinzpus is babdpus and others
  34. [actual] rinzpus is babdpus
  35. [actual] x is rinzpus
  36. [actual] x is babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 36
标准化后节点数: 35
过滤掉的无效实体数: 1
标准化后的节点:
  1. [actual] x → relmpus (原始: x is relmpus)
  2. [actual] relmpus → babgpus (原始: relmpus is babgpus)
  3. [actual] x → babgpus (原始: x is babgpus)
  4. [planning] x → babgpus (原始: x is babgpus)
  5. [actual] jehlpus → fuywpus and loxppus (原始: jehlpus is fuywpus and loxppus)
  6. [actual] jehlpus → fuywpus and loxppus (原始: jehlpus is fuywpus and loxppus)
  7. [actual] x → jehlpus and sazqpus (原始: x is jehlpus and sazqpus)
  8. [actual] x → jehlpus (原始: x is jehlpus)
  9. [actual] x → sazqpus (原始: x is sazqpus)
  10. [actual] x → jehlpus (原始: x is jehlpus)
  11. [actual] x → sazqpus (原始: x is sazqpus)
  12. [actual] rinzpus → babdpus and pawypus and deyvpus (原始: rinzpus is babdpus and pawypus and deyvpus)
  13. [actual] rinzpus → babdpus (原始: rinzpus is babdpus)
  14. [actual] rinzpus → pawypus (原始: rinzpus is pawypus)
  15. [actual] rinzpus → deyvpus (原始: rinzpus is deyvpus)
  16. [actual] fuywpus → rinzpus and tecmpus (原始: fuywpus is rinzpus and tecmpus)
  17. [actual] fuywpus → rinzpus (原始: fuywpus is rinzpus)
  18. [actual] fuywpus → tecmpus (原始: fuywpus is tecmpus)
  19. [planning] x → babdpus (原始: x is babdpus)
  20. [planning] x → babdpus (原始: x is babdpus)
  21. [planning] x → babdpus (原始: x is babdpus)
  22. [actual] x → jehlpus (原始: x is jehlpus)
  23. [actual] x → jehlpus (原始: x is jehlpus)
  24. [actual] jehlpus → fuywpus and loxppus (原始: jehlpus is fuywpus and loxppus)
  25. [actual] fuywpus → rinzpus and tecmpus (原始: fuywpus is rinzpus and tecmpus)
  26. [actual] x → rinzpus (原始: x is rinzpus)
  27. [actual] rinzpus → babdpus and pawypus and deyvpus (原始: rinzpus is babdpus and pawypus and deyvpus)
  28. [actual] rinzpus → babdpus (原始: rinzpus is babdpus)
  29. [actual] x → rinzpus (原始: x is rinzpus)
  30. [actual] x → babdpus (原始: x is babdpus)
  31. [actual] x → babdpus (原始: x is babdpus)
  32. [actual] x → babdpus (原始: x is babdpus)
  33. [actual] rinzpus → babdpus (原始: rinzpus is babdpus)
  34. [actual] x → rinzpus (原始: x is rinzpus)
  35. [actual] x → babdpus (原始: x is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 8
[后处理] 加载LoG图，包含 8 个节点
  LoG节点 0: x is babdpus (规则: CE, 深度: 1)
  LoG节点 1: x is babdpus and pawypus (规则: MP, 深度: 2)
  LoG节点 2: x is fuywpus (规则: MP, 深度: 3)
  LoG节点 3: fuywpus is babdpus and pawypus (规则: MP, 深度: 3)
  LoG节点 4: x is jehlpus (规则: CE, 深度: 4)
  LoG节点 5: jehlpus is fuywpus (规则: CE, 深度: 4)
  LoG节点 6: fuywpus is rinzpus (规则: CE, 深度: 4)
  LoG节点 7: rinzpus is babdpus and pawypus (规则: CE, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 35
   - 初始条件数: 4
   - LoG图节点数: 8

📋 初始条件列表:
    1. jehlpus is fuywpus and loxppus
    2. x is jehlpus and sazqpus
    3. rinzpus is babdpus and pawypus and deyvpus
    4. fuywpus is rinzpus and tecmpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 4 个前提节点

🔍 开始处理actual节点...

   节点 1: x is relmpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 2: relmpus is babgpus
      🔍 验证新节点...
      ❌ 验证失败 - 幻觉节点

   节点 3: x is babgpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is relmpus → relmpus is babgpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is relmpus
  - 前提: relmpus is babgpus

   节点 4: jehlpus is fuywpus and loxppus
      ↻ 重复节点，计数: 2

   节点 5: jehlpus is fuywpus and loxppus
      ↻ 重复节点，计数: 3

   节点 6: x is jehlpus and sazqpus
      ↻ 重复节点，计数: 2

   节点 7: x is jehlpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is jehlpus
      ✅ 验证成功 + LoG匹配

   节点 8: x is sazqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is jehlpus and sazqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is jehlpus and sazqpus

   节点 9: x is jehlpus
      ↻ 重复节点，计数: 2

   节点 10: x is sazqpus
      ↻ 重复节点，计数: 2

   节点 11: rinzpus is babdpus and pawypus and deyvpus
      ↻ 重复节点，计数: 2

   节点 12: rinzpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: rinzpus is babdpus and pawypus and deyvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: rinzpus is babdpus and pawypus and deyvpus
  ✓ 点亮LoG节点: rinzpus is babdpus and pawypus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 13: rinzpus is pawypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: rinzpus is babdpus and pawypus and deyvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: rinzpus is babdpus and pawypus and deyvpus

   节点 14: rinzpus is deyvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: rinzpus is babdpus and pawypus and deyvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: rinzpus is babdpus and pawypus and deyvpus

   节点 15: fuywpus is rinzpus and tecmpus
      ↻ 重复节点，计数: 2

   节点 16: fuywpus is rinzpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: fuywpus is rinzpus
      ✅ 验证成功 + LoG匹配

   节点 17: fuywpus is tecmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: fuywpus is rinzpus and tecmpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: fuywpus is rinzpus and tecmpus

   节点 18: x is jehlpus
      ↻ 重复节点，计数: 3

   节点 19: x is jehlpus
      ↻ 重复节点，计数: 4

   节点 20: jehlpus is fuywpus and loxppus
      ↻ 重复节点，计数: 4

   节点 21: fuywpus is rinzpus and tecmpus
      ↻ 重复节点，计数: 3

   节点 22: x is rinzpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is jehlpus → jehlpus is rinzpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is jehlpus
  - 前提: jehlpus is fuywpus and loxppus
  - 前提: fuywpus is rinzpus
  ✓ 点亮LoG节点: x is fuywpus
[子树点亮]     └─ 点亮依赖节点: jehlpus is fuywpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 23: rinzpus is babdpus and pawypus and deyvpus
      ↻ 重复节点，计数: 3

   节点 24: rinzpus is babdpus
      ↻ 重复节点，计数: 2

   节点 25: x is rinzpus
      ↻ 重复节点，计数: 2

   节点 26: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: x is babdpus and pawypus (深度2)
[子树点亮]     └─ 点亮依赖节点: fuywpus is babdpus and pawypus (深度3)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 27: x is babdpus
      ↻ 重复节点，计数: 2

   节点 28: x is babdpus
      ↻ 重复节点，计数: 3

   节点 29: rinzpus is babdpus
      ↻ 重复节点，计数: 3

   节点 30: x is rinzpus
      ↻ 重复节点，计数: 3

   节点 31: x is babdpus
      ↻ 重复节点，计数: 4

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 31
   - 新增节点: 12
   - 更新已存在节点: 19
   - 点亮的LoG节点: 8

🎯 推理质量统计:
   - 完美推理: 7 (节点正确 + 路径正确)
   - 部分推理: 5 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 8节点, 4前提, 复杂度1-4

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 16
   - 前提节点: 4
   - 推理节点: 10
   - 幻觉节点: 2
   - 点亮LoG节点: 8

❌ 幻觉节点详情:
   - x is relmpus (出现1次)
   - relmpus is babgpus (出现1次)

✅ 推理节点详情:
   🟡 x is babgpus (出现1次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus', 'relmpus is babgpus']
   🟡 x is jehlpus (出现4次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟡 x is sazqpus (出现2次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟢 rinzpus is babdpus (出现3次, 质量:perfect)
   🟢 rinzpus is pawypus (出现1次, 质量:perfect)
   🟢 rinzpus is deyvpus (出现1次, 质量:perfect)
   🟢 fuywpus is rinzpus (出现1次, 质量:perfect)
   🟢 fuywpus is tecmpus (出现1次, 质量:perfect)
   🟡 x is rinzpus (出现3次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']
   🟡 x is babdpus (出现4次, 质量:partial)
      ⚠️  无效依赖: ['x is relmpus']

🔥 点亮的LoG节点:
   - fuywpus is babdpus and pawypus
   - rinzpus is babdpus and pawypus
   - x is babdpus
   - x is babdpus and pawypus
   - x is jehlpus
   - fuywpus is rinzpus
   - jehlpus is fuywpus
   - x is fuywpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus (第4层)
   节点Coverage: 8/8 = 100.00%
   前提条件Coverage: 4/4 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 2/12 = 16.67%
   可推导节点: 10/12
   Strict Error Rate: 7/12 = 58.33%
   严格有效节点: 5/12

   详细分析:
     完美推理: 7 (58.33%)
     部分推理: 5 (41.67%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 47/50
================================================================================
记录索引: 46
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_46.json
✅ 使用缓存结果:
   - 句子数: 61
   - 提取的语句数: 48
   - 初始条件数: 4

=== Statement提取完成 ===
总句子数: 61
成功提取: 61
失败提取: 0
总statements数: 48

=== 开始清洗Statement格式 ===
原始statements数: 48
清洗后statements数: 44
过滤掉的statements数: 4
清洗后的statements:
  1. [actual] x is visvpus
  2. [actual] mokjpus is nabvpus
  3. [actual] visvpus is mokjpus and hiqypus
  4. [actual] nabvpus is babqpus and habfpus
  5. [planning] x is babdpus or babqpus
  6. [actual] x is visvpus
  7. [actual] mokjpus is nabvpus
  8. [actual] visvpus is mokjpus
  9. [actual] visvpus is hiqypus
  10. [planning] visvpus is mokjpus and hiqypus
  11. [actual] visvpus is mokjpus and hiqypus
  12. [actual] visvpus is mokjpus and hiqypus
  13. [actual] visvpus is mokjpus
  14. [actual] visvpus is hiqypus
  15. [actual] nabvpus is babqpus and habfpus
  16. [planning] x is babdpus
  17. [planning] x is babqpus
  18. [planning] x is babqpus
  19. [actual] x is visvpus
  20. [actual] visvpus is mokjpus
  21. [planning] x is mokjpus
  22. [actual] mokjpus is nabvpus
  23. [planning] x is nabvpus
  24. [actual] mokjpus is nabvpus
  25. [actual] x is mokjpus
  26. [actual] x is nabvpus
  27. [actual] nabvpus is babqpus
  28. [actual] nabvpus is habfpus
  29. [actual] x is nabvpus
  30. [actual] x is babqpus
  31. [actual] x is babqpus
  32. [planning] x is babdpus or babqpus
  33. [actual] x is babqpus
  34. [planning] babdpus is related
  35. [actual] x is babqpus
  36. [actual] x is babdpus or babqpus
  37. [actual] x is visvpus
  38. [actual] visvpus is mokjpus
  39. [planning] x is mokjpus
  40. [actual] mokjpus is nabvpus
  41. [planning] x is nabvpus
  42. [actual] nabvpus is babqpus
  43. [actual] x is babqpus
  44. [actual] x is babqpus

=== 开始标准化和解析节点 ===
清洗后statements数: 44
标准化后节点数: 43
过滤掉的无效实体数: 1
标准化后的节点:
  1. [actual] x → visvpus (原始: x is visvpus)
  2. [actual] mokjpus → nabvpus (原始: mokjpus is nabvpus)
  3. [actual] visvpus → mokjpus and hiqypus (原始: visvpus is mokjpus and hiqypus)
  4. [actual] nabvpus → babqpus and habfpus (原始: nabvpus is babqpus and habfpus)
  5. [planning] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  6. [actual] x → visvpus (原始: x is visvpus)
  7. [actual] mokjpus → nabvpus (原始: mokjpus is nabvpus)
  8. [actual] visvpus → mokjpus (原始: visvpus is mokjpus)
  9. [actual] visvpus → hiqypus (原始: visvpus is hiqypus)
  10. [planning] visvpus → mokjpus and hiqypus (原始: visvpus is mokjpus and hiqypus)
  11. [actual] visvpus → mokjpus and hiqypus (原始: visvpus is mokjpus and hiqypus)
  12. [actual] visvpus → mokjpus and hiqypus (原始: visvpus is mokjpus and hiqypus)
  13. [actual] visvpus → mokjpus (原始: visvpus is mokjpus)
  14. [actual] visvpus → hiqypus (原始: visvpus is hiqypus)
  15. [actual] nabvpus → babqpus and habfpus (原始: nabvpus is babqpus and habfpus)
  16. [planning] x → babdpus (原始: x is babdpus)
  17. [planning] x → babqpus (原始: x is babqpus)
  18. [planning] x → babqpus (原始: x is babqpus)
  19. [actual] x → visvpus (原始: x is visvpus)
  20. [actual] visvpus → mokjpus (原始: visvpus is mokjpus)
  21. [planning] x → mokjpus (原始: x is mokjpus)
  22. [actual] mokjpus → nabvpus (原始: mokjpus is nabvpus)
  23. [planning] x → nabvpus (原始: x is nabvpus)
  24. [actual] mokjpus → nabvpus (原始: mokjpus is nabvpus)
  25. [actual] x → mokjpus (原始: x is mokjpus)
  26. [actual] x → nabvpus (原始: x is nabvpus)
  27. [actual] nabvpus → babqpus (原始: nabvpus is babqpus)
  28. [actual] nabvpus → habfpus (原始: nabvpus is habfpus)
  29. [actual] x → nabvpus (原始: x is nabvpus)
  30. [actual] x → babqpus (原始: x is babqpus)
  31. [actual] x → babqpus (原始: x is babqpus)
  32. [planning] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  33. [actual] x → babqpus (原始: x is babqpus)
  34. [actual] x → babqpus (原始: x is babqpus)
  35. [actual] x → babdpus or babqpus (原始: x is babdpus or babqpus)
  36. [actual] x → visvpus (原始: x is visvpus)
  37. [actual] visvpus → mokjpus (原始: visvpus is mokjpus)
  38. [planning] x → mokjpus (原始: x is mokjpus)
  39. [actual] mokjpus → nabvpus (原始: mokjpus is nabvpus)
  40. [planning] x → nabvpus (原始: x is nabvpus)
  41. [actual] nabvpus → babqpus (原始: nabvpus is babqpus)
  42. [actual] x → babqpus (原始: x is babqpus)
  43. [actual] x → babqpus (原始: x is babqpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 6
[后处理] 加载LoG图，包含 6 个节点
  LoG节点 0: x is babdpus or babqpus (规则: DI, 深度: 1)
  LoG节点 1: x is babqpus (规则: MP, 深度: 2)
  LoG节点 2: x is mokjpus (规则: CE, 深度: 3)
  LoG节点 3: mokjpus is babqpus (规则: CE, 深度: 3)
  LoG节点 4: x is mokjpus and hiqypus (规则: MP, 深度: 4)
  LoG节点 5: mokjpus is babqpus and habfpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 43
   - 初始条件数: 4
   - LoG图节点数: 6

📋 初始条件列表:
    1. x is visvpus
    2. mokjpus is nabvpus
    3. visvpus is mokjpus and hiqypus
    4. nabvpus is babqpus and habfpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 4 个前提节点

🔍 开始处理actual节点...

   节点 1: x is visvpus
      ↻ 重复节点，计数: 2

   节点 2: mokjpus is nabvpus
      ↻ 重复节点，计数: 2

   节点 3: visvpus is mokjpus and hiqypus
      ↻ 重复节点，计数: 2

   节点 4: nabvpus is babqpus and habfpus
      ↻ 重复节点，计数: 2

   节点 5: x is visvpus
      ↻ 重复节点，计数: 3

   节点 6: mokjpus is nabvpus
      ↻ 重复节点，计数: 3

   节点 7: visvpus is mokjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: visvpus is mokjpus and hiqypus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: visvpus is mokjpus and hiqypus

   节点 8: visvpus is hiqypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: visvpus is mokjpus and hiqypus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: visvpus is mokjpus and hiqypus

   节点 9: visvpus is mokjpus and hiqypus
      ↻ 重复节点，计数: 3

   节点 10: visvpus is mokjpus and hiqypus
      ↻ 重复节点，计数: 4

   节点 11: visvpus is mokjpus
      ↻ 重复节点，计数: 2

   节点 12: visvpus is hiqypus
      ↻ 重复节点，计数: 2

   节点 13: nabvpus is babqpus and habfpus
      ↻ 重复节点，计数: 3

   节点 14: x is visvpus
      ↻ 重复节点，计数: 4

   节点 15: visvpus is mokjpus
      ↻ 重复节点，计数: 3

   节点 16: mokjpus is nabvpus
      ↻ 重复节点，计数: 4

   节点 17: mokjpus is nabvpus
      ↻ 重复节点，计数: 5

   节点 18: x is mokjpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is mokjpus
[子树点亮]     └─ 点亮依赖节点: x is mokjpus and hiqypus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 19: x is nabvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is visvpus → visvpus is nabvpus
[后处理] 基于推理轨迹点亮节点，使用了 3 个前提条件:
  - 前提: x is visvpus
  - 前提: visvpus is mokjpus
  - 前提: mokjpus is nabvpus

   节点 20: nabvpus is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: nabvpus is babqpus and habfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: nabvpus is babqpus and habfpus

   节点 21: nabvpus is habfpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: nabvpus is babqpus and habfpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: nabvpus is babqpus and habfpus

   节点 22: x is nabvpus
      ↻ 重复节点，计数: 2

   节点 23: x is babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babqpus
[子树点亮]     └─ 点亮依赖节点: mokjpus is babqpus (深度3)
[子树点亮]     └─ 点亮依赖节点: mokjpus is babqpus and habfpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 24: x is babqpus
      ↻ 重复节点，计数: 2

   节点 25: x is babqpus
      ↻ 重复节点，计数: 3

   节点 26: x is babqpus
      ↻ 重复节点，计数: 4

   节点 27: x is babdpus or babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus or babqpus
      ✅ 验证成功 + LoG匹配

   节点 28: x is visvpus
      ↻ 重复节点，计数: 5

   节点 29: visvpus is mokjpus
      ↻ 重复节点，计数: 4

   节点 30: mokjpus is nabvpus
      ↻ 重复节点，计数: 6

   节点 31: nabvpus is babqpus
      ↻ 重复节点，计数: 2

   节点 32: x is babqpus
      ↻ 重复节点，计数: 5

   节点 33: x is babqpus
      ↻ 重复节点，计数: 6

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 33
   - 新增节点: 8
   - 更新已存在节点: 25
   - 点亮的LoG节点: 6

🎯 推理质量统计:
   - 完美推理: 8 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 6节点, 4前提, 复杂度1-4

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 12
   - 前提节点: 4
   - 推理节点: 8
   - 幻觉节点: 0
   - 点亮LoG节点: 6

✅ 推理节点详情:
   🟢 visvpus is mokjpus (出现4次, 质量:perfect)
   🟢 visvpus is hiqypus (出现2次, 质量:perfect)
   🟢 x is mokjpus (出现1次, 质量:perfect)
   🟢 x is nabvpus (出现2次, 质量:perfect)
   🟢 nabvpus is babqpus (出现2次, 质量:perfect)
   🟢 nabvpus is habfpus (出现1次, 质量:perfect)
   🟢 x is babqpus (出现6次, 质量:perfect)
   🟢 x is babdpus or babqpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is mokjpus and hiqypus
   - mokjpus is babqpus
   - x is mokjpus
   - x is babqpus
   - x is babdpus or babqpus
   - mokjpus is babqpus and habfpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus or babqpus (第4层)
   节点Coverage: 6/6 = 100.00%
   前提条件Coverage: 4/4 = 100.00%
   各推理层点亮比例:
     第1层: 2/2 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/8 = 0.00%
   可推导节点: 8/8
   Strict Error Rate: 0/8 = 0.00%
   严格有效节点: 8/8

   详细分析:
     完美推理: 8 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 48/50
================================================================================
记录索引: 47
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_47.json
✅ 使用缓存结果:
   - 句子数: 63
   - 提取的语句数: 72
   - 初始条件数: 6

=== Statement提取完成 ===
总句子数: 63
成功提取: 63
失败提取: 0
总statements数: 72

=== 开始清洗Statement格式 ===
原始statements数: 72
清洗后statements数: 61
过滤掉的statements数: 11
清洗后的statements:
  1. [actual] fogtpus is babqpus
  2. [actual] fogtpus is fapjpus
  3. [actual] pixlpus is bicnpus
  4. [actual] x is pixlpus
  5. [actual] bicnpus is babdpus and tufwpus and nezvpus
  6. [actual] x is fogtpus and kadppus
  7. [planning] x is babdpus and babqpus
  8. [planning] x is babdpus and babqpus
  9. [actual] x is pixlpus
  10. [actual] x is pixlpus
  11. [actual] x is fogtpus and kadppus
  12. [actual] pixlpus is bicnpus
  13. [actual] x is pixlpus
  14. [actual] pixlpus is bicnpus
  15. [actual] x is bicnpus
  16. [planning] x is pixlpus
  17. [planning] pixlpus is bicnpus
  18. [planning] x is bicnpus
  19. [actual] x is fogtpus
  20. [actual] fogtpus is babqpus
  21. [actual] x is babqpus
  22. [actual] fogtpus is babqpus
  23. [actual] fogtpus is fapjpus
  24. [actual] pixlpus is bicnpus
  25. [actual] x is pixlpus
  26. [actual] bicnpus is babdpus and tufwpus and nezvpus
  27. [planning] bicnpus is babdpus and tufwpus and nezvpus
  28. [actual] bicnpus is babdpus and tufwpus and nezvpus
  29. [actual] bicnpus is babdpus
  30. [actual] bicnpus is tufwpus
  31. [actual] bicnpus is nezvpus
  32. [actual] x is fogtpus and kadppus
  33. [planning] x is babqpus
  34. [actual] x is fogtpus and kadppus
  35. [actual] fogtpus is babqpus
  36. [actual] x is fogtpus
  37. [actual] fogtpus is babqpus
  38. [actual] x is babqpus
  39. [actual] x is babqpus
  40. [planning] x is babdpus
  41. [actual] x is pixlpus
  42. [actual] pixlpus is bicnpus
  43. [actual] bicnpus is babdpus
  44. [actual] x is pixlpus
  45. [actual] pixlpus is bicnpus
  46. [actual] bicnpus is babdpus
  47. [actual] x is babdpus
  48. [planning] x is babdpus
  49. [planning] x is babqpus
  50. [actual] x is babdpus and babqpus
  51. [actual] x is kadppus
  52. [actual] bicnpus is tufwpus and nezvpus
  53. [actual] x is pixlpus
  54. [actual] pixlpus is bicnpus
  55. [actual] bicnpus is babdpus
  56. [actual] x is babdpus
  57. [actual] x is fogtpus
  58. [actual] fogtpus is babqpus
  59. [actual] x is babqpus
  60. [planning] x is babdpus and babqpus
  61. [actual] x is babdpus and babqpus

=== 开始标准化和解析节点 ===
清洗后statements数: 61
标准化后节点数: 61
过滤掉的无效实体数: 0
标准化后的节点:
  1. [actual] fogtpus → babqpus (原始: fogtpus is babqpus)
  2. [actual] fogtpus → fapjpus (原始: fogtpus is fapjpus)
  3. [actual] pixlpus → bicnpus (原始: pixlpus is bicnpus)
  4. [actual] x → pixlpus (原始: x is pixlpus)
  5. [actual] bicnpus → babdpus and tufwpus and nezvpus (原始: bicnpus is babdpus and tufwpus and nezvpus)
  6. [actual] x → fogtpus and kadppus (原始: x is fogtpus and kadppus)
  7. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  8. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  9. [actual] x → pixlpus (原始: x is pixlpus)
  10. [actual] x → pixlpus (原始: x is pixlpus)
  11. [actual] x → fogtpus and kadppus (原始: x is fogtpus and kadppus)
  12. [actual] pixlpus → bicnpus (原始: pixlpus is bicnpus)
  13. [actual] x → pixlpus (原始: x is pixlpus)
  14. [actual] pixlpus → bicnpus (原始: pixlpus is bicnpus)
  15. [actual] x → bicnpus (原始: x is bicnpus)
  16. [planning] x → pixlpus (原始: x is pixlpus)
  17. [planning] pixlpus → bicnpus (原始: pixlpus is bicnpus)
  18. [planning] x → bicnpus (原始: x is bicnpus)
  19. [actual] x → fogtpus (原始: x is fogtpus)
  20. [actual] fogtpus → babqpus (原始: fogtpus is babqpus)
  21. [actual] x → babqpus (原始: x is babqpus)
  22. [actual] fogtpus → babqpus (原始: fogtpus is babqpus)
  23. [actual] fogtpus → fapjpus (原始: fogtpus is fapjpus)
  24. [actual] pixlpus → bicnpus (原始: pixlpus is bicnpus)
  25. [actual] x → pixlpus (原始: x is pixlpus)
  26. [actual] bicnpus → babdpus and tufwpus and nezvpus (原始: bicnpus is babdpus and tufwpus and nezvpus)
  27. [planning] bicnpus → babdpus and tufwpus and nezvpus (原始: bicnpus is babdpus and tufwpus and nezvpus)
  28. [actual] bicnpus → babdpus and tufwpus and nezvpus (原始: bicnpus is babdpus and tufwpus and nezvpus)
  29. [actual] bicnpus → babdpus (原始: bicnpus is babdpus)
  30. [actual] bicnpus → tufwpus (原始: bicnpus is tufwpus)
  31. [actual] bicnpus → nezvpus (原始: bicnpus is nezvpus)
  32. [actual] x → fogtpus and kadppus (原始: x is fogtpus and kadppus)
  33. [planning] x → babqpus (原始: x is babqpus)
  34. [actual] x → fogtpus and kadppus (原始: x is fogtpus and kadppus)
  35. [actual] fogtpus → babqpus (原始: fogtpus is babqpus)
  36. [actual] x → fogtpus (原始: x is fogtpus)
  37. [actual] fogtpus → babqpus (原始: fogtpus is babqpus)
  38. [actual] x → babqpus (原始: x is babqpus)
  39. [actual] x → babqpus (原始: x is babqpus)
  40. [planning] x → babdpus (原始: x is babdpus)
  41. [actual] x → pixlpus (原始: x is pixlpus)
  42. [actual] pixlpus → bicnpus (原始: pixlpus is bicnpus)
  43. [actual] bicnpus → babdpus (原始: bicnpus is babdpus)
  44. [actual] x → pixlpus (原始: x is pixlpus)
  45. [actual] pixlpus → bicnpus (原始: pixlpus is bicnpus)
  46. [actual] bicnpus → babdpus (原始: bicnpus is babdpus)
  47. [actual] x → babdpus (原始: x is babdpus)
  48. [planning] x → babdpus (原始: x is babdpus)
  49. [planning] x → babqpus (原始: x is babqpus)
  50. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  51. [actual] x → kadppus (原始: x is kadppus)
  52. [actual] bicnpus → tufwpus and nezvpus (原始: bicnpus is tufwpus and nezvpus)
  53. [actual] x → pixlpus (原始: x is pixlpus)
  54. [actual] pixlpus → bicnpus (原始: pixlpus is bicnpus)
  55. [actual] bicnpus → babdpus (原始: bicnpus is babdpus)
  56. [actual] x → babdpus (原始: x is babdpus)
  57. [actual] x → fogtpus (原始: x is fogtpus)
  58. [actual] fogtpus → babqpus (原始: fogtpus is babqpus)
  59. [actual] x → babqpus (原始: x is babqpus)
  60. [planning] x → babdpus and babqpus (原始: x is babdpus and babqpus)
  61. [actual] x → babdpus and babqpus (原始: x is babdpus and babqpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 9
[后处理] 加载LoG图，包含 9 个节点
  LoG节点 0: x is babdpus and babqpus (规则: CI, 深度: 1)
  LoG节点 1: x is babdpus (规则: CE, 深度: 2)
  LoG节点 2: x is babqpus (规则: CE, 深度: 2)
  LoG节点 3: x is babdpus and tufwpus (规则: MP, 深度: 3)
  LoG节点 4: x is babqpus and fapjpus (规则: MP, 深度: 3)
  LoG节点 5: x is bicnpus (规则: MP, 深度: 4)
  LoG节点 6: bicnpus is babdpus and tufwpus (规则: CE, 深度: 4)
  LoG节点 7: x is fogtpus (规则: CE, 深度: 4)
  LoG节点 8: fogtpus is babqpus and fapjpus (规则: CI, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 61
   - 初始条件数: 6
   - LoG图节点数: 9

📋 初始条件列表:
    1. fogtpus is babqpus
    2. fogtpus is fapjpus
    3. pixlpus is bicnpus
    4. x is pixlpus
    5. bicnpus is babdpus and tufwpus and nezvpus
    6. x is fogtpus and kadppus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 6 个前提节点

🔍 开始处理actual节点...

   节点 1: fogtpus is babqpus
      ↻ 重复节点，计数: 2

   节点 2: fogtpus is fapjpus
      ↻ 重复节点，计数: 2

   节点 3: pixlpus is bicnpus
      ↻ 重复节点，计数: 2

   节点 4: x is pixlpus
      ↻ 重复节点，计数: 2

   节点 5: bicnpus is babdpus and tufwpus and nezvpus
      ↻ 重复节点，计数: 2

   节点 6: x is fogtpus and kadppus
      ↻ 重复节点，计数: 2

   节点 7: x is pixlpus
      ↻ 重复节点，计数: 3

   节点 8: x is pixlpus
      ↻ 重复节点，计数: 4

   节点 9: x is fogtpus and kadppus
      ↻ 重复节点，计数: 3

   节点 10: pixlpus is bicnpus
      ↻ 重复节点，计数: 3

   节点 11: x is pixlpus
      ↻ 重复节点，计数: 5

   节点 12: pixlpus is bicnpus
      ↻ 重复节点，计数: 4

   节点 13: x is bicnpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is bicnpus
      ✅ 验证成功 + LoG匹配

   节点 14: x is fogtpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is fogtpus
      ✅ 验证成功 + LoG匹配

   节点 15: fogtpus is babqpus
      ↻ 重复节点，计数: 3

   节点 16: x is babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babqpus
[子树点亮]     └─ 点亮依赖节点: x is babqpus and fapjpus (深度3)
[子树点亮]     └─ 点亮依赖节点: fogtpus is babqpus and fapjpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 17: fogtpus is babqpus
      ↻ 重复节点，计数: 4

   节点 18: fogtpus is fapjpus
      ↻ 重复节点，计数: 3

   节点 19: pixlpus is bicnpus
      ↻ 重复节点，计数: 5

   节点 20: x is pixlpus
      ↻ 重复节点，计数: 6

   节点 21: bicnpus is babdpus and tufwpus and nezvpus
      ↻ 重复节点，计数: 3

   节点 22: bicnpus is babdpus and tufwpus and nezvpus
      ↻ 重复节点，计数: 4

   节点 23: bicnpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: bicnpus is babdpus and tufwpus and nezvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: bicnpus is babdpus and tufwpus and nezvpus
  ✓ 点亮LoG节点: bicnpus is babdpus and tufwpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 24: bicnpus is tufwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: bicnpus is babdpus and tufwpus and nezvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: bicnpus is babdpus and tufwpus and nezvpus

   节点 25: bicnpus is nezvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: bicnpus is babdpus and tufwpus and nezvpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: bicnpus is babdpus and tufwpus and nezvpus

   节点 26: x is fogtpus and kadppus
      ↻ 重复节点，计数: 4

   节点 27: x is fogtpus and kadppus
      ↻ 重复节点，计数: 5

   节点 28: fogtpus is babqpus
      ↻ 重复节点，计数: 5

   节点 29: x is fogtpus
      ↻ 重复节点，计数: 2

   节点 30: fogtpus is babqpus
      ↻ 重复节点，计数: 6

   节点 31: x is babqpus
      ↻ 重复节点，计数: 2

   节点 32: x is babqpus
      ↻ 重复节点，计数: 3

   节点 33: x is pixlpus
      ↻ 重复节点，计数: 7

   节点 34: pixlpus is bicnpus
      ↻ 重复节点，计数: 6

   节点 35: bicnpus is babdpus
      ↻ 重复节点，计数: 2

   节点 36: x is pixlpus
      ↻ 重复节点，计数: 8

   节点 37: pixlpus is bicnpus
      ↻ 重复节点，计数: 7

   节点 38: bicnpus is babdpus
      ↻ 重复节点，计数: 3

   节点 39: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: x is babdpus and tufwpus (深度3)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 40: x is babdpus and babqpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus and babqpus
      ✅ 验证成功 + LoG匹配

   节点 41: x is kadppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is fogtpus and kadppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is fogtpus and kadppus

   节点 42: bicnpus is tufwpus and nezvpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CI
      📋 推理路径: CI规则: bicnpus is tufwpus → bicnpus is nezvpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: bicnpus is tufwpus
  - 前提: bicnpus is nezvpus

   节点 43: x is pixlpus
      ↻ 重复节点，计数: 9

   节点 44: pixlpus is bicnpus
      ↻ 重复节点，计数: 8

   节点 45: bicnpus is babdpus
      ↻ 重复节点，计数: 4

   节点 46: x is babdpus
      ↻ 重复节点，计数: 2

   节点 47: x is fogtpus
      ↻ 重复节点，计数: 3

   节点 48: fogtpus is babqpus
      ↻ 重复节点，计数: 7

   节点 49: x is babqpus
      ↻ 重复节点，计数: 4

   节点 50: x is babdpus and babqpus
      ↻ 重复节点，计数: 2

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 50
   - 新增节点: 10
   - 更新已存在节点: 40
   - 点亮的LoG节点: 9

🎯 推理质量统计:
   - 完美推理: 10 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 9节点, 6前提, 复杂度1-6

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 16
   - 前提节点: 6
   - 推理节点: 10
   - 幻觉节点: 0
   - 点亮LoG节点: 9

✅ 推理节点详情:
   🟢 x is bicnpus (出现1次, 质量:perfect)
   🟢 x is fogtpus (出现3次, 质量:perfect)
   🟢 x is babqpus (出现4次, 质量:perfect)
   🟢 bicnpus is babdpus (出现4次, 质量:perfect)
   🟢 bicnpus is tufwpus (出现1次, 质量:perfect)
   🟢 bicnpus is nezvpus (出现1次, 质量:perfect)
   🟢 x is babdpus (出现2次, 质量:perfect)
   🟢 x is babdpus and babqpus (出现2次, 质量:perfect)
   🟢 x is kadppus (出现1次, 质量:perfect)
   🟢 bicnpus is tufwpus and nezvpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - bicnpus is babdpus and tufwpus
   - x is babqpus and fapjpus
   - x is fogtpus
   - x is babdpus and babqpus
   - x is bicnpus
   - x is babdpus
   - x is babdpus and tufwpus
   - fogtpus is babqpus and fapjpus
   - x is babqpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus and babqpus (第4层)
   节点Coverage: 9/9 = 100.00%
   前提条件Coverage: 6/6 = 100.00%
   各推理层点亮比例:
     第1层: 4/4 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/10 = 0.00%
   可推导节点: 10/10
   Strict Error Rate: 0/10 = 0.00%
   严格有效节点: 10/10

   详细分析:
     完美推理: 10 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 49/50
================================================================================
记录索引: 48
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_48.json
✅ 使用缓存结果:
   - 句子数: 33
   - 提取的语句数: 36
   - 初始条件数: 5

=== Statement提取完成 ===
总句子数: 33
成功提取: 33
失败提取: 0
总statements数: 36

=== 开始清洗Statement格式 ===
原始statements数: 36
清洗后statements数: 34
过滤掉的statements数: 2
清洗后的statements:
  1. [actual] huvwpus is hanvpus and wohfpus
  2. [actual] huvwpus is hanvpus and wohfpus
  3. [actual] hanvpus is wilypus
  4. [actual] hanvpus is wilypus
  5. [actual] rezbpus is huvwpus
  6. [actual] rezbpus is huvwpus
  7. [actual] wilypus is babdpus and kibwpus and bobxpus
  8. [actual] wilypus is babdpus and kibwpus and bobxpus
  9. [actual] x is rezbpus
  10. [actual] x is rezbpus
  11. [planning] x is babdpus
  12. [planning] x is babdpus
  13. [actual] x is rezbpus
  14. [actual] rezbpus is huvwpus
  15. [actual] x is rezbpus
  16. [actual] rezbpus is huvwpus
  17. [actual] x is huvwpus
  18. [actual] huvwpus is hanvpus and wohfpus
  19. [actual] x is huvwpus
  20. [actual] x is hanvpus
  21. [actual] hanvpus is wilypus
  22. [actual] x is hanvpus
  23. [actual] hanvpus is wilypus
  24. [actual] x is wilypus
  25. [planning] x is wilypus
  26. [actual] wilypus is babdpus and kibwpus and bobxpus
  27. [planning] x is wilypus
  28. [planning] x is babdpus
  29. [planning] x is babdpus
  30. [actual] x is babdpus
  31. [actual] wilypus is babdpus
  32. [actual] wilypus is a subset of babdpus or is it
  33. [actual] x is a member of wilypus
  34. [actual] x is a member of babdpus

=== 开始标准化和解析节点 ===
清洗后statements数: 34
标准化后节点数: 31
过滤掉的无效实体数: 3
标准化后的节点:
  1. [actual] huvwpus → hanvpus and wohfpus (原始: huvwpus is hanvpus and wohfpus)
  2. [actual] huvwpus → hanvpus and wohfpus (原始: huvwpus is hanvpus and wohfpus)
  3. [actual] hanvpus → wilypus (原始: hanvpus is wilypus)
  4. [actual] hanvpus → wilypus (原始: hanvpus is wilypus)
  5. [actual] rezbpus → huvwpus (原始: rezbpus is huvwpus)
  6. [actual] rezbpus → huvwpus (原始: rezbpus is huvwpus)
  7. [actual] wilypus → babdpus and kibwpus and bobxpus (原始: wilypus is babdpus and kibwpus and bobxpus)
  8. [actual] wilypus → babdpus and kibwpus and bobxpus (原始: wilypus is babdpus and kibwpus and bobxpus)
  9. [actual] x → rezbpus (原始: x is rezbpus)
  10. [actual] x → rezbpus (原始: x is rezbpus)
  11. [planning] x → babdpus (原始: x is babdpus)
  12. [planning] x → babdpus (原始: x is babdpus)
  13. [actual] x → rezbpus (原始: x is rezbpus)
  14. [actual] rezbpus → huvwpus (原始: rezbpus is huvwpus)
  15. [actual] x → rezbpus (原始: x is rezbpus)
  16. [actual] rezbpus → huvwpus (原始: rezbpus is huvwpus)
  17. [actual] x → huvwpus (原始: x is huvwpus)
  18. [actual] huvwpus → hanvpus and wohfpus (原始: huvwpus is hanvpus and wohfpus)
  19. [actual] x → huvwpus (原始: x is huvwpus)
  20. [actual] x → hanvpus (原始: x is hanvpus)
  21. [actual] hanvpus → wilypus (原始: hanvpus is wilypus)
  22. [actual] x → hanvpus (原始: x is hanvpus)
  23. [actual] hanvpus → wilypus (原始: hanvpus is wilypus)
  24. [actual] x → wilypus (原始: x is wilypus)
  25. [planning] x → wilypus (原始: x is wilypus)
  26. [actual] wilypus → babdpus and kibwpus and bobxpus (原始: wilypus is babdpus and kibwpus and bobxpus)
  27. [planning] x → wilypus (原始: x is wilypus)
  28. [planning] x → babdpus (原始: x is babdpus)
  29. [planning] x → babdpus (原始: x is babdpus)
  30. [actual] x → babdpus (原始: x is babdpus)
  31. [actual] wilypus → babdpus (原始: wilypus is babdpus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 7
[后处理] 加载LoG图，包含 7 个节点
  LoG节点 0: x is babdpus (规则: CE, 深度: 1)
  LoG节点 1: x is babdpus and kibwpus (规则: MP, 深度: 2)
  LoG节点 2: x is hanvpus (规则: MP, 深度: 3)
  LoG节点 3: hanvpus is babdpus and kibwpus (规则: CE, 深度: 3)
  LoG节点 4: x is huvwpus (规则: MP, 深度: 4)
  LoG节点 5: huvwpus is hanvpus (规则: CE, 深度: 4)
  LoG节点 6: hanvpus is babdpus and kibwpus and bobxpus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 31
   - 初始条件数: 5
   - LoG图节点数: 7

📋 初始条件列表:
    1. huvwpus is hanvpus and wohfpus
    2. hanvpus is wilypus
    3. rezbpus is huvwpus
    4. wilypus is babdpus and kibwpus and bobxpus
    5. x is rezbpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 5 个前提节点

🔍 开始处理actual节点...

   节点 1: huvwpus is hanvpus and wohfpus
      ↻ 重复节点，计数: 2

   节点 2: huvwpus is hanvpus and wohfpus
      ↻ 重复节点，计数: 3

   节点 3: hanvpus is wilypus
      ↻ 重复节点，计数: 2

   节点 4: hanvpus is wilypus
      ↻ 重复节点，计数: 3

   节点 5: rezbpus is huvwpus
      ↻ 重复节点，计数: 2

   节点 6: rezbpus is huvwpus
      ↻ 重复节点，计数: 3

   节点 7: wilypus is babdpus and kibwpus and bobxpus
      ↻ 重复节点，计数: 2

   节点 8: wilypus is babdpus and kibwpus and bobxpus
      ↻ 重复节点，计数: 3

   节点 9: x is rezbpus
      ↻ 重复节点，计数: 2

   节点 10: x is rezbpus
      ↻ 重复节点，计数: 3

   节点 11: x is rezbpus
      ↻ 重复节点，计数: 4

   节点 12: rezbpus is huvwpus
      ↻ 重复节点，计数: 4

   节点 13: x is rezbpus
      ↻ 重复节点，计数: 5

   节点 14: rezbpus is huvwpus
      ↻ 重复节点，计数: 5

   节点 15: x is huvwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is huvwpus
      ✅ 验证成功 + LoG匹配

   节点 16: huvwpus is hanvpus and wohfpus
      ↻ 重复节点，计数: 4

   节点 17: x is huvwpus
      ↻ 重复节点，计数: 2

   节点 18: x is hanvpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is hanvpus
[子树点亮]     └─ 点亮依赖节点: huvwpus is hanvpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 19: hanvpus is wilypus
      ↻ 重复节点，计数: 4

   节点 20: x is hanvpus
      ↻ 重复节点，计数: 2

   节点 21: hanvpus is wilypus
      ↻ 重复节点，计数: 5

   节点 22: x is wilypus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is rezbpus → rezbpus is wilypus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is rezbpus
  - 前提: rezbpus is huvwpus
  - 前提: huvwpus is hanvpus and wohfpus
  - 前提: hanvpus is wilypus

   节点 23: wilypus is babdpus and kibwpus and bobxpus
      ↻ 重复节点，计数: 4

   节点 24: x is babdpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus
[子树点亮]     └─ 点亮依赖节点: x is babdpus and kibwpus (深度2)
[子树点亮]     └─ 点亮依赖节点: hanvpus is babdpus and kibwpus (深度3)
[子树点亮]     └─ 点亮依赖节点: hanvpus is babdpus and kibwpus and bobxpus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 25: wilypus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wilypus is babdpus and kibwpus and bobxpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wilypus is babdpus and kibwpus and bobxpus

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 25
   - 新增节点: 5
   - 更新已存在节点: 20
   - 点亮的LoG节点: 7

🎯 推理质量统计:
   - 完美推理: 5 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 7节点, 5前提, 复杂度1-5

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 10
   - 前提节点: 5
   - 推理节点: 5
   - 幻觉节点: 0
   - 点亮LoG节点: 7

✅ 推理节点详情:
   🟢 x is huvwpus (出现2次, 质量:perfect)
   🟢 x is hanvpus (出现2次, 质量:perfect)
   🟢 x is wilypus (出现1次, 质量:perfect)
   🟢 x is babdpus (出现1次, 质量:perfect)
   🟢 wilypus is babdpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - x is babdpus and kibwpus
   - hanvpus is babdpus and kibwpus and bobxpus
   - huvwpus is hanvpus
   - hanvpus is babdpus and kibwpus
   - x is babdpus
   - x is huvwpus
   - x is hanvpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus (第4层)
   节点Coverage: 7/7 = 100.00%
   前提条件Coverage: 5/5 = 100.00%
   各推理层点亮比例:
     第1层: 3/3 = 100.00%
     第2层: 2/2 = 100.00%
     第3层: 1/1 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/5 = 0.00%
   可推导节点: 5/5
   Strict Error Rate: 0/5 = 0.00%
   严格有效节点: 5/5

   详细分析:
     完美推理: 5 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
处理记录 50/50
================================================================================
记录索引: 49
问题状态: correct
📁 从缓存加载提取结果: evaluation_results.LoG_4.deepseek-reasoner_record_49.json
✅ 使用缓存结果:
   - 句子数: 82
   - 提取的语句数: 103
   - 初始条件数: 8

=== Statement提取完成 ===
总句子数: 82
成功提取: 82
失败提取: 0
总statements数: 103

=== 开始清洗Statement格式 ===
原始statements数: 103
清洗后statements数: 71
过滤掉的statements数: 32
清洗后的statements:
  1. [actual] joylpus is xucmpus
  2. [actual] worjpus is wumkpus
  3. [actual] xucmpus is gicypus
  4. [actual] robwpus is worjpus and yizhpus
  5. [planning] robwpus is worjpus and yizhpus
  6. [actual] robwpus is both categories
  7. [planning] robwpus is and
  8. [planning] robwpus is worjpus
  9. [planning] robwpus is yizhpus
  10. [actual] robwpus is worjpus and yizhpus
  11. [actual] x is joylpus and neqqpus
  12. [planning] x is a member of joylpus and neqqpus
  13. [actual] x is joylpus
  14. [actual] joylpus is xucmpus
  15. [actual] worjpus is wumkpus
  16. [actual] robwpus is worjpus and yizhpus
  17. [actual] x is joylpus and neqqpus
  18. [planning] x is babdpus and babqpus and babxpus
  19. [planning] x is a member of these categories
  20. [actual] x is joylpus and neqqpus
  21. [actual] x is joylpus
  22. [actual] x is neqqpus
  23. [actual] joylpus is xucmpus
  24. [actual] x is joylpus
  25. [actual] x is xucmpus
  26. [actual] xucmpus is gicypus
  27. [actual] gicypus is gugqpus
  28. [actual] gicypus is gugqpus
  29. [actual] gicypus is gugqpus
  30. [actual] gicypus is gugqpus
  31. [actual] x is gicypus
  32. [actual] x is gugqpus
  33. [actual] gugqpus is robwpus and rirppus
  34. [actual] gugqpus is robwpus
  35. [actual] gugqpus is rirppus
  36. [planning] gugqpus is robwpus and rirppus
  37. [actual] gugqpus is robwpus and rirppus
  38. [actual] robwpus is worjpus and yizhpus
  39. [actual] wumkpus is babdpus and babqpus and babxpus and bakspus
  40. [actual] gugqpus is robwpus and rirppus
  41. [actual] x is gugqpus
  42. [actual] x is robwpus
  43. [actual] x is rirppus
  44. [planning] x is gugqpus and robwpus and rirppus
  45. [planning] gugqpus is robwpus
  46. [actual] x is robwpus
  47. [actual] robwpus is worjpus and yizhpus
  48. [actual] x is robwpus
  49. [actual] x is worjpus
  50. [actual] x is yizhpus
  51. [actual] worjpus is wumkpus
  52. [actual] x is worjpus
  53. [actual] x is wumkpus
  54. [actual] wumkpus is babdpus and babqpus and babxpus and bakspus
  55. [actual] wumkpus is babdpus
  56. [actual] wumkpus is babqpus
  57. [actual] wumkpus is babxpus
  58. [actual] wumkpus is bakspus
  59. [actual] x is wumkpus
  60. [actual] x is babdpus
  61. [actual] x is babqpus
  62. [actual] x is babxpus
  63. [actual] x is bakspus
  64. [planning] x is babdpus and babqpus and babxpus
  65. [actual] x is neqqpus
  66. [actual] x is wumkpus
  67. [actual] wumkpus is babdpus
  68. [actual] wumkpus is babqpus
  69. [actual] wumkpus is babxpus
  70. [actual] x is babdpus and babqpus and babxpus
  71. [actual] wumkpus is babdpus and babqpus and babxpus and bakspus

=== 开始标准化和解析节点 ===
清洗后statements数: 71
标准化后节点数: 67
过滤掉的无效实体数: 4
标准化后的节点:
  1. [actual] joylpus → xucmpus (原始: joylpus is xucmpus)
  2. [actual] worjpus → wumkpus (原始: worjpus is wumkpus)
  3. [actual] xucmpus → gicypus (原始: xucmpus is gicypus)
  4. [actual] robwpus → worjpus and yizhpus (原始: robwpus is worjpus and yizhpus)
  5. [planning] robwpus → worjpus and yizhpus (原始: robwpus is worjpus and yizhpus)
  6. [planning] robwpus → worjpus (原始: robwpus is worjpus)
  7. [planning] robwpus → yizhpus (原始: robwpus is yizhpus)
  8. [actual] robwpus → worjpus and yizhpus (原始: robwpus is worjpus and yizhpus)
  9. [actual] x → joylpus and neqqpus (原始: x is joylpus and neqqpus)
  10. [actual] x → joylpus (原始: x is joylpus)
  11. [actual] joylpus → xucmpus (原始: joylpus is xucmpus)
  12. [actual] worjpus → wumkpus (原始: worjpus is wumkpus)
  13. [actual] robwpus → worjpus and yizhpus (原始: robwpus is worjpus and yizhpus)
  14. [actual] x → joylpus and neqqpus (原始: x is joylpus and neqqpus)
  15. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  16. [actual] x → joylpus and neqqpus (原始: x is joylpus and neqqpus)
  17. [actual] x → joylpus (原始: x is joylpus)
  18. [actual] x → neqqpus (原始: x is neqqpus)
  19. [actual] joylpus → xucmpus (原始: joylpus is xucmpus)
  20. [actual] x → joylpus (原始: x is joylpus)
  21. [actual] x → xucmpus (原始: x is xucmpus)
  22. [actual] xucmpus → gicypus (原始: xucmpus is gicypus)
  23. [actual] gicypus → gugqpus (原始: gicypus is gugqpus)
  24. [actual] gicypus → gugqpus (原始: gicypus is gugqpus)
  25. [actual] gicypus → gugqpus (原始: gicypus is gugqpus)
  26. [actual] gicypus → gugqpus (原始: gicypus is gugqpus)
  27. [actual] x → gicypus (原始: x is gicypus)
  28. [actual] x → gugqpus (原始: x is gugqpus)
  29. [actual] gugqpus → robwpus and rirppus (原始: gugqpus is robwpus and rirppus)
  30. [actual] gugqpus → robwpus (原始: gugqpus is robwpus)
  31. [actual] gugqpus → rirppus (原始: gugqpus is rirppus)
  32. [planning] gugqpus → robwpus and rirppus (原始: gugqpus is robwpus and rirppus)
  33. [actual] gugqpus → robwpus and rirppus (原始: gugqpus is robwpus and rirppus)
  34. [actual] robwpus → worjpus and yizhpus (原始: robwpus is worjpus and yizhpus)
  35. [actual] wumkpus → babdpus and babqpus and babxpus and bakspus (原始: wumkpus is babdpus and babqpus and babxpus and bakspus)
  36. [actual] gugqpus → robwpus and rirppus (原始: gugqpus is robwpus and rirppus)
  37. [actual] x → gugqpus (原始: x is gugqpus)
  38. [actual] x → robwpus (原始: x is robwpus)
  39. [actual] x → rirppus (原始: x is rirppus)
  40. [planning] x → gugqpus and robwpus and rirppus (原始: x is gugqpus and robwpus and rirppus)
  41. [planning] gugqpus → robwpus (原始: gugqpus is robwpus)
  42. [actual] x → robwpus (原始: x is robwpus)
  43. [actual] robwpus → worjpus and yizhpus (原始: robwpus is worjpus and yizhpus)
  44. [actual] x → robwpus (原始: x is robwpus)
  45. [actual] x → worjpus (原始: x is worjpus)
  46. [actual] x → yizhpus (原始: x is yizhpus)
  47. [actual] worjpus → wumkpus (原始: worjpus is wumkpus)
  48. [actual] x → worjpus (原始: x is worjpus)
  49. [actual] x → wumkpus (原始: x is wumkpus)
  50. [actual] wumkpus → babdpus and babqpus and babxpus and bakspus (原始: wumkpus is babdpus and babqpus and babxpus and bakspus)
  51. [actual] wumkpus → babdpus (原始: wumkpus is babdpus)
  52. [actual] wumkpus → babqpus (原始: wumkpus is babqpus)
  53. [actual] wumkpus → babxpus (原始: wumkpus is babxpus)
  54. [actual] wumkpus → bakspus (原始: wumkpus is bakspus)
  55. [actual] x → wumkpus (原始: x is wumkpus)
  56. [actual] x → babdpus (原始: x is babdpus)
  57. [actual] x → babqpus (原始: x is babqpus)
  58. [actual] x → babxpus (原始: x is babxpus)
  59. [actual] x → bakspus (原始: x is bakspus)
  60. [planning] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  61. [actual] x → neqqpus (原始: x is neqqpus)
  62. [actual] x → wumkpus (原始: x is wumkpus)
  63. [actual] wumkpus → babdpus (原始: wumkpus is babdpus)
  64. [actual] wumkpus → babqpus (原始: wumkpus is babqpus)
  65. [actual] wumkpus → babxpus (原始: wumkpus is babxpus)
  66. [actual] x → babdpus and babqpus and babxpus (原始: x is babdpus and babqpus and babxpus)
  67. [actual] wumkpus → babdpus and babqpus and babxpus and bakspus (原始: wumkpus is babdpus and babqpus and babxpus and bakspus)

开始新的后处理...
[后处理] 从LoG数据文件中获取到图数据，节点数: 11
[后处理] 加载LoG图，包含 11 个节点
  LoG节点 0: x is babdpus and babqpus and babxpus (规则: MP, 深度: 1)
  LoG节点 1: x is robwpus (规则: MP, 深度: 2)
  LoG节点 2: robwpus is babdpus and babqpus and babxpus (规则: CE, 深度: 2)
  LoG节点 3: x is gicypus (规则: MP, 深度: 3)
  LoG节点 4: gicypus is robwpus (规则: CE, 深度: 3)
  LoG节点 5: robwpus is babdpus and babqpus and babxpus and bakspus (规则: MP, 深度: 3)
  LoG节点 6: x is joylpus (规则: CE, 深度: 4)
  LoG节点 7: joylpus is gicypus (规则: MP, 深度: 4)
  LoG节点 8: gicypus is robwpus and rirppus (规则: MP, 深度: 4)
  LoG节点 9: robwpus is worjpus (规则: CE, 深度: 4)
  LoG节点 10: worjpus is babdpus and babqpus and babxpus and bakspus (规则: MP, 深度: 4)

============================================================
[后处理] 开始处理节点
============================================================
📊 初始状态:
   - 标准化节点数: 67
   - 初始条件数: 8
   - LoG图节点数: 11

📋 初始条件列表:
    1. joylpus is xucmpus
    2. worjpus is wumkpus
    3. xucmpus is gicypus
    4. robwpus is worjpus and yizhpus
    5. gugqpus is robwpus and rirppus
    6. wumkpus is babdpus and babqpus and babxpus and bakspus
    7. gicypus is gugqpus
    8. x is joylpus and neqqpus

🔧 构建初始Statement列表...
✅ 初始Statement列表构建完成，包含 8 个前提节点

🔍 开始处理actual节点...

   节点 1: joylpus is xucmpus
      ↻ 重复节点，计数: 2

   节点 2: worjpus is wumkpus
      ↻ 重复节点，计数: 2

   节点 3: xucmpus is gicypus
      ↻ 重复节点，计数: 2

   节点 4: robwpus is worjpus and yizhpus
      ↻ 重复节点，计数: 2

   节点 5: robwpus is worjpus and yizhpus
      ↻ 重复节点，计数: 3

   节点 6: x is joylpus and neqqpus
      ↻ 重复节点，计数: 2

   节点 7: x is joylpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is joylpus
      ✅ 验证成功 + LoG匹配

   节点 8: joylpus is xucmpus
      ↻ 重复节点，计数: 3

   节点 9: worjpus is wumkpus
      ↻ 重复节点，计数: 3

   节点 10: robwpus is worjpus and yizhpus
      ↻ 重复节点，计数: 4

   节点 11: x is joylpus and neqqpus
      ↻ 重复节点，计数: 3

   节点 12: x is joylpus and neqqpus
      ↻ 重复节点，计数: 4

   节点 13: x is joylpus
      ↻ 重复节点，计数: 2

   节点 14: x is neqqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: x is joylpus and neqqpus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: x is joylpus and neqqpus

   节点 15: joylpus is xucmpus
      ↻ 重复节点，计数: 4

   节点 16: x is joylpus
      ↻ 重复节点，计数: 3

   节点 17: x is xucmpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is joylpus → joylpus is xucmpus
[后处理] 基于推理轨迹点亮节点，使用了 2 个前提条件:
  - 前提: x is joylpus
  - 前提: joylpus is xucmpus

   节点 18: xucmpus is gicypus
      ↻ 重复节点，计数: 3

   节点 19: gicypus is gugqpus
      ↻ 重复节点，计数: 2

   节点 20: gicypus is gugqpus
      ↻ 重复节点，计数: 3

   节点 21: gicypus is gugqpus
      ↻ 重复节点，计数: 4

   节点 22: gicypus is gugqpus
      ↻ 重复节点，计数: 5

   节点 23: x is gicypus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is gicypus
[子树点亮]     └─ 点亮依赖节点: joylpus is gicypus (深度4)
[后处理]   └─ 自动点亮依赖子树: 1 个节点
      ✅ 验证成功 + LoG匹配

   节点 24: x is gugqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is joylpus → joylpus is gugqpus
[后处理] 基于推理轨迹点亮节点，使用了 4 个前提条件:
  - 前提: x is joylpus
  - 前提: joylpus is xucmpus
  - 前提: xucmpus is gicypus
  - 前提: gicypus is gugqpus

   节点 25: gugqpus is robwpus and rirppus
      ↻ 重复节点，计数: 2

   节点 26: gugqpus is robwpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gugqpus is robwpus and rirppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gugqpus is robwpus and rirppus

   节点 27: gugqpus is rirppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: gugqpus is robwpus and rirppus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: gugqpus is robwpus and rirppus

   节点 28: gugqpus is robwpus and rirppus
      ↻ 重复节点，计数: 3

   节点 29: robwpus is worjpus and yizhpus
      ↻ 重复节点，计数: 5

   节点 30: wumkpus is babdpus and babqpus and babxpus and bakspus
      ↻ 重复节点，计数: 2

   节点 31: gugqpus is robwpus and rirppus
      ↻ 重复节点，计数: 4

   节点 32: x is gugqpus
      ↻ 重复节点，计数: 2

   节点 33: x is robwpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is robwpus
[子树点亮]     └─ 点亮依赖节点: gicypus is robwpus (深度3)
[子树点亮]     └─ 点亮依赖节点: gicypus is robwpus and rirppus (深度4)
[后处理]   └─ 自动点亮依赖子树: 2 个节点
      ✅ 验证成功 + LoG匹配

   节点 34: x is rirppus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is joylpus → joylpus is rirppus
[后处理] 基于推理轨迹点亮节点，使用了 5 个前提条件:
  - 前提: x is joylpus
  - 前提: joylpus is xucmpus
  - 前提: xucmpus is gicypus
  - 前提: gicypus is gugqpus
  - 前提: gugqpus is rirppus

   节点 35: x is robwpus
      ↻ 重复节点，计数: 2

   节点 36: robwpus is worjpus and yizhpus
      ↻ 重复节点，计数: 6

   节点 37: x is robwpus
      ↻ 重复节点，计数: 3

   节点 38: x is worjpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is joylpus → joylpus is worjpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is joylpus
  - 前提: joylpus is xucmpus
  - 前提: xucmpus is gicypus
  - 前提: gicypus is gugqpus
  - 前提: gugqpus is robwpus
  - 前提: robwpus is worjpus and yizhpus
  ✓ 点亮LoG节点: robwpus is worjpus
[后处理] 通过推理轨迹额外点亮了 1 个LoG节点

   节点 39: x is yizhpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is joylpus → joylpus is yizhpus
[后处理] 基于推理轨迹点亮节点，使用了 6 个前提条件:
  - 前提: x is joylpus
  - 前提: joylpus is xucmpus
  - 前提: xucmpus is gicypus
  - 前提: gicypus is gugqpus
  - 前提: gugqpus is robwpus
  - 前提: robwpus is worjpus and yizhpus

   节点 40: worjpus is wumkpus
      ↻ 重复节点，计数: 4

   节点 41: x is worjpus
      ↻ 重复节点，计数: 2

   节点 42: x is wumkpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is joylpus → joylpus is wumkpus
[后处理] 基于推理轨迹点亮节点，使用了 7 个前提条件:
  - 前提: x is joylpus
  - 前提: joylpus is xucmpus
  - 前提: xucmpus is gicypus
  - 前提: gicypus is gugqpus
  - 前提: gugqpus is robwpus
  - 前提: robwpus is worjpus and yizhpus
  - 前提: worjpus is wumkpus

   节点 43: wumkpus is babdpus and babqpus and babxpus and bakspus
      ↻ 重复节点，计数: 3

   节点 44: wumkpus is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wumkpus is babdpus and babqpus and babxpus and bakspus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wumkpus is babdpus and babqpus and babxpus and bakspus

   节点 45: wumkpus is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wumkpus is babdpus and babqpus and babxpus and bakspus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wumkpus is babdpus and babqpus and babxpus and bakspus

   节点 46: wumkpus is babxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wumkpus is babdpus and babqpus and babxpus and bakspus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wumkpus is babdpus and babqpus and babxpus and bakspus

   节点 47: wumkpus is bakspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: CE
      📋 推理路径: CE规则: wumkpus is babdpus and babqpus and babxpus and bakspus
[后处理] 基于推理轨迹点亮节点，使用了 1 个前提条件:
  - 前提: wumkpus is babdpus and babqpus and babxpus and bakspus

   节点 48: x is wumkpus
      ↻ 重复节点，计数: 2

   节点 49: x is babdpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is joylpus → joylpus is babdpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is joylpus
  - 前提: joylpus is xucmpus
  - 前提: xucmpus is gicypus
  - 前提: gicypus is gugqpus
  - 前提: gugqpus is robwpus
  - 前提: robwpus is worjpus and yizhpus
  - 前提: worjpus is wumkpus
  - 前提: wumkpus is babdpus

   节点 50: x is babqpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is joylpus → joylpus is babqpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is joylpus
  - 前提: joylpus is xucmpus
  - 前提: xucmpus is gicypus
  - 前提: gicypus is gugqpus
  - 前提: gugqpus is robwpus
  - 前提: robwpus is worjpus and yizhpus
  - 前提: worjpus is wumkpus
  - 前提: wumkpus is babqpus

   节点 51: x is babxpus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is joylpus → joylpus is babxpus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is joylpus
  - 前提: joylpus is xucmpus
  - 前提: xucmpus is gicypus
  - 前提: gicypus is gugqpus
  - 前提: gugqpus is robwpus
  - 前提: robwpus is worjpus and yizhpus
  - 前提: worjpus is wumkpus
  - 前提: wumkpus is babxpus

   节点 52: x is bakspus
      🔍 验证新节点...
      ✅ 验证成功 (LoG中无对应节点)
      🔍 获取推理轨迹以点亮隐式节点...
      📋 推理方法: MP
      📋 推理路径: MP规则: x is joylpus → joylpus is bakspus
[后处理] 基于推理轨迹点亮节点，使用了 8 个前提条件:
  - 前提: x is joylpus
  - 前提: joylpus is xucmpus
  - 前提: xucmpus is gicypus
  - 前提: gicypus is gugqpus
  - 前提: gugqpus is robwpus
  - 前提: robwpus is worjpus and yizhpus
  - 前提: worjpus is wumkpus
  - 前提: wumkpus is bakspus

   节点 53: x is neqqpus
      ↻ 重复节点，计数: 2

   节点 54: x is wumkpus
      ↻ 重复节点，计数: 3

   节点 55: wumkpus is babdpus
      ↻ 重复节点，计数: 2

   节点 56: wumkpus is babqpus
      ↻ 重复节点，计数: 2

   节点 57: wumkpus is babxpus
      ↻ 重复节点，计数: 2

   节点 58: x is babdpus and babqpus and babxpus
      🔍 验证新节点...
[后处理] 点亮LoG节点: x is babdpus and babqpus and babxpus
[子树点亮]     └─ 点亮依赖节点: robwpus is babdpus and babqpus and babxpus (深度2)
[子树点亮]     └─ 点亮依赖节点: robwpus is babdpus and babqpus and babxpus and bakspus (深度3)
[子树点亮]     └─ 点亮依赖节点: worjpus is babdpus and babqpus and babxpus and bakspus (深度4)
[后处理]   └─ 自动点亮依赖子树: 3 个节点
      ✅ 验证成功 + LoG匹配

   节点 59: wumkpus is babdpus and babqpus and babxpus and bakspus
      ↻ 重复节点，计数: 4

🔍 分析推理路径完整性...

============================================================
[后处理] 处理完成
============================================================
📈 处理统计:
   - 处理的actual节点: 59
   - 新增节点: 21
   - 更新已存在节点: 38
   - 点亮的LoG节点: 11

🎯 推理质量统计:
   - 完美推理: 21 (节点正确 + 路径正确)
   - 部分推理: 0 (节点正确 + 路径部分错误)
   - 无效推理: 0 (节点错误或路径完全错误)
[LoG分析] LoG图: 11节点, 8前提, 复杂度1-8

📊 === Statement列表分析 ===
📈 节点统计:
   - 总节点数: 29
   - 前提节点: 8
   - 推理节点: 21
   - 幻觉节点: 0
   - 点亮LoG节点: 11

✅ 推理节点详情:
   🟢 x is joylpus (出现3次, 质量:perfect)
   🟢 x is neqqpus (出现2次, 质量:perfect)
   🟢 x is xucmpus (出现1次, 质量:perfect)
   🟢 x is gicypus (出现1次, 质量:perfect)
   🟢 x is gugqpus (出现2次, 质量:perfect)
   🟢 gugqpus is robwpus (出现1次, 质量:perfect)
   🟢 gugqpus is rirppus (出现1次, 质量:perfect)
   🟢 x is robwpus (出现3次, 质量:perfect)
   🟢 x is rirppus (出现1次, 质量:perfect)
   🟢 x is worjpus (出现2次, 质量:perfect)
   🟢 x is yizhpus (出现1次, 质量:perfect)
   🟢 x is wumkpus (出现3次, 质量:perfect)
   🟢 wumkpus is babdpus (出现2次, 质量:perfect)
   🟢 wumkpus is babqpus (出现2次, 质量:perfect)
   🟢 wumkpus is babxpus (出现2次, 质量:perfect)
   🟢 wumkpus is bakspus (出现1次, 质量:perfect)
   🟢 x is babdpus (出现1次, 质量:perfect)
   🟢 x is babqpus (出现1次, 质量:perfect)
   🟢 x is babxpus (出现1次, 质量:perfect)
   🟢 x is bakspus (出现1次, 质量:perfect)
   🟢 x is babdpus and babqpus and babxpus (出现1次, 质量:perfect)

🔥 点亮的LoG节点:
   - robwpus is worjpus
   - x is robwpus
   - joylpus is gicypus
   - robwpus is babdpus and babqpus and babxpus
   - x is joylpus
   - robwpus is babdpus and babqpus and babxpus and bakspus
   - x is gicypus
   - worjpus is babdpus and babqpus and babxpus and bakspus
   - gicypus is robwpus
   - gicypus is robwpus and rirppus
   - x is babdpus and babqpus and babxpus

============================================================
📊 计算评估指标
============================================================

🎯 计算Coverage指标...
   深度Coverage: 4/4 = 100.00%
   最深点亮节点: x is babdpus and babqpus and babxpus (第4层)
   节点Coverage: 11/11 = 100.00%
   前提条件Coverage: 8/8 = 100.00%
   各推理层点亮比例:
     第1层: 5/5 = 100.00%
     第2层: 3/3 = 100.00%
     第3层: 2/2 = 100.00%
     第4层: 1/1 = 100.00%

🎯 计算Precision指标...
   Error Rate: 0/21 = 0.00%
   可推导节点: 21/21
   Strict Error Rate: 0/21 = 0.00%
   严格有效节点: 21/21

   详细分析:
     完美推理: 21 (100.00%)
     部分推理: 0 (0.00%)
     无效推理: 0 (0.00%)

================================================================================
📊 平均指标摘要 (基于 50 条记录)
================================================================================

🎯 Coverage指标 (召回率):
   深度Coverage: 99.50% (平均最深层级: 4.0)
   节点Coverage: 99.60% (总体: 99.78%)
     - 总点亮节点: 462
     - 总LoG节点: 463
   前提Coverage: 100.00%
   各推理层平均点亮比例:
     第1层: 平均100.00%, 总体204/204=100.00% (50条记录)
     第2层: 平均100.00%, 总体127/127=100.00% (50条记录)
     第3层: 平均100.00%, 总体82/82=100.00% (50条记录)
     第4层: 平均98.00%, 总体49/50=98.00% (50条记录)

🎯 Precision指标 (精确率):
   Error Rate: 3.98% (总体: 4.56%)
     - 可推导节点: 460
     - 总推理节点: 482
   Strict Error Rate: 11.74%
   推理质量分布:
     - 完美推理: 432 (89.63%)
     - 部分推理: 47 (9.75%)
     - 无效推理: 3 (0.62%)

📈 数据统计:
   总statements: 820 (平均: 16.4/记录)
   前提statements: 338
   推理statements: 482 (平均: 9.6/记录)
结果已保存到: step_by_step_evaluation_2_evaluation_results.LoG_4.deepseek-reasoner.json

评估成功完成！
